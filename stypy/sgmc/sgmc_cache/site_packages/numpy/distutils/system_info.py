
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: #!/bin/env python
2: '''
3: This file defines a set of system_info classes for getting
4: information about various resources (libraries, library directories,
5: include directories, etc.) in the system. Currently, the following
6: classes are available:
7: 
8:   atlas_info
9:   atlas_threads_info
10:   atlas_blas_info
11:   atlas_blas_threads_info
12:   lapack_atlas_info
13:   lapack_atlas_threads_info
14:   atlas_3_10_info
15:   atlas_3_10_threads_info
16:   atlas_3_10_blas_info,
17:   atlas_3_10_blas_threads_info,
18:   lapack_atlas_3_10_info
19:   lapack_atlas_3_10_threads_info
20:   blas_info
21:   lapack_info
22:   openblas_info
23:   blas_opt_info       # usage recommended
24:   lapack_opt_info     # usage recommended
25:   fftw_info,dfftw_info,sfftw_info
26:   fftw_threads_info,dfftw_threads_info,sfftw_threads_info
27:   djbfft_info
28:   x11_info
29:   lapack_src_info
30:   blas_src_info
31:   numpy_info
32:   numarray_info
33:   numpy_info
34:   boost_python_info
35:   agg2_info
36:   wx_info
37:   gdk_pixbuf_xlib_2_info
38:   gdk_pixbuf_2_info
39:   gdk_x11_2_info
40:   gtkp_x11_2_info
41:   gtkp_2_info
42:   xft_info
43:   freetype2_info
44:   umfpack_info
45: 
46: Usage:
47:     info_dict = get_info(<name>)
48:   where <name> is a string 'atlas','x11','fftw','lapack','blas',
49:   'lapack_src', 'blas_src', etc. For a complete list of allowed names,
50:   see the definition of get_info() function below.
51: 
52:   Returned info_dict is a dictionary which is compatible with
53:   distutils.setup keyword arguments. If info_dict == {}, then the
54:   asked resource is not available (system_info could not find it).
55: 
56:   Several *_info classes specify an environment variable to specify
57:   the locations of software. When setting the corresponding environment
58:   variable to 'None' then the software will be ignored, even when it
59:   is available in system.
60: 
61: Global parameters:
62:   system_info.search_static_first - search static libraries (.a)
63:              in precedence to shared ones (.so, .sl) if enabled.
64:   system_info.verbosity - output the results to stdout if enabled.
65: 
66: The file 'site.cfg' is looked for in
67: 
68: 1) Directory of main setup.py file being run.
69: 2) Home directory of user running the setup.py file as ~/.numpy-site.cfg
70: 3) System wide directory (location of this file...)
71: 
72: The first one found is used to get system configuration options The
73: format is that used by ConfigParser (i.e., Windows .INI style). The
74: section ALL has options that are the default for each section. The
75: available sections are fftw, atlas, and x11. Appropiate defaults are
76: used if nothing is specified.
77: 
78: The order of finding the locations of resources is the following:
79:  1. environment variable
80:  2. section in site.cfg
81:  3. ALL section in site.cfg
82: Only the first complete match is returned.
83: 
84: Example:
85: ----------
86: [ALL]
87: library_dirs = /usr/lib:/usr/local/lib:/opt/lib
88: include_dirs = /usr/include:/usr/local/include:/opt/include
89: src_dirs = /usr/local/src:/opt/src
90: # search static libraries (.a) in preference to shared ones (.so)
91: search_static_first = 0
92: 
93: [fftw]
94: fftw_libs = rfftw, fftw
95: fftw_opt_libs = rfftw_threaded, fftw_threaded
96: # if the above aren't found, look for {s,d}fftw_libs and {s,d}fftw_opt_libs
97: 
98: [atlas]
99: library_dirs = /usr/lib/3dnow:/usr/lib/3dnow/atlas
100: # for overriding the names of the atlas libraries
101: atlas_libs = lapack, f77blas, cblas, atlas
102: 
103: [x11]
104: library_dirs = /usr/X11R6/lib
105: include_dirs = /usr/X11R6/include
106: ----------
107: 
108: Authors:
109:   Pearu Peterson <pearu@cens.ioc.ee>, February 2002
110:   David M. Cooke <cookedm@physics.mcmaster.ca>, April 2002
111: 
112: Copyright 2002 Pearu Peterson all rights reserved,
113: Pearu Peterson <pearu@cens.ioc.ee>
114: Permission to use, modify, and distribute this software is given under the
115: terms of the NumPy (BSD style) license.  See LICENSE.txt that came with
116: this distribution for specifics.
117: 
118: NO WARRANTY IS EXPRESSED OR IMPLIED.  USE AT YOUR OWN RISK.
119: 
120: '''
121: from __future__ import division, absolute_import, print_function
122: 
123: import sys
124: import os
125: import re
126: import copy
127: import warnings
128: from glob import glob
129: from functools import reduce
130: if sys.version_info[0] < 3:
131:     from ConfigParser import NoOptionError, ConfigParser
132: else:
133:     from configparser import NoOptionError, ConfigParser
134: 
135: from distutils.errors import DistutilsError
136: from distutils.dist import Distribution
137: import distutils.sysconfig
138: from distutils import log
139: from distutils.util import get_platform
140: 
141: from numpy.distutils.exec_command import \
142:     find_executable, exec_command, get_pythonexe
143: from numpy.distutils.misc_util import is_sequence, is_string, \
144:                                       get_shared_lib_extension
145: from numpy.distutils.command.config import config as cmd_config
146: from numpy.distutils.compat import get_exception
147: import distutils.ccompiler
148: import tempfile
149: import shutil
150: 
151: 
152: # Determine number of bits
153: import platform
154: _bits = {'32bit': 32, '64bit': 64}
155: platform_bits = _bits[platform.architecture()[0]]
156: 
157: 
158: def libpaths(paths, bits):
159:     '''Return a list of library paths valid on 32 or 64 bit systems.
160: 
161:     Inputs:
162:       paths : sequence
163:         A sequence of strings (typically paths)
164:       bits : int
165:         An integer, the only valid values are 32 or 64.  A ValueError exception
166:       is raised otherwise.
167: 
168:     Examples:
169: 
170:     Consider a list of directories
171:     >>> paths = ['/usr/X11R6/lib','/usr/X11/lib','/usr/lib']
172: 
173:     For a 32-bit platform, this is already valid:
174:     >>> np.distutils.system_info.libpaths(paths,32)
175:     ['/usr/X11R6/lib', '/usr/X11/lib', '/usr/lib']
176: 
177:     On 64 bits, we prepend the '64' postfix
178:     >>> np.distutils.system_info.libpaths(paths,64)
179:     ['/usr/X11R6/lib64', '/usr/X11R6/lib', '/usr/X11/lib64', '/usr/X11/lib',
180:     '/usr/lib64', '/usr/lib']
181:     '''
182:     if bits not in (32, 64):
183:         raise ValueError("Invalid bit size in libpaths: 32 or 64 only")
184: 
185:     # Handle 32bit case
186:     if bits == 32:
187:         return paths
188: 
189:     # Handle 64bit case
190:     out = []
191:     for p in paths:
192:         out.extend([p + '64', p])
193: 
194:     return out
195: 
196: 
197: if sys.platform == 'win32':
198:     default_lib_dirs = ['C:\\',
199:                         os.path.join(distutils.sysconfig.EXEC_PREFIX,
200:                                      'libs')]
201:     default_runtime_dirs = []
202:     default_include_dirs = []
203:     default_src_dirs = ['.']
204:     default_x11_lib_dirs = []
205:     default_x11_include_dirs = []
206: else:
207:     default_lib_dirs = libpaths(['/usr/local/lib', '/opt/lib', '/usr/lib',
208:                                  '/opt/local/lib', '/sw/lib'], platform_bits)
209:     default_runtime_dirs = []
210:     default_include_dirs = ['/usr/local/include',
211:                             '/opt/include', '/usr/include',
212:                             # path of umfpack under macports
213:                             '/opt/local/include/ufsparse',
214:                             '/opt/local/include', '/sw/include',
215:                             '/usr/include/suitesparse']
216:     default_src_dirs = ['.', '/usr/local/src', '/opt/src', '/sw/src']
217: 
218:     default_x11_lib_dirs = libpaths(['/usr/X11R6/lib', '/usr/X11/lib',
219:                                      '/usr/lib'], platform_bits)
220:     default_x11_include_dirs = ['/usr/X11R6/include', '/usr/X11/include',
221:                                 '/usr/include']
222: 
223:     if os.path.exists('/usr/lib/X11'):
224:         globbed_x11_dir = glob('/usr/lib/*/libX11.so')
225:         if globbed_x11_dir:
226:             x11_so_dir = os.path.split(globbed_x11_dir[0])[0]
227:             default_x11_lib_dirs.extend([x11_so_dir, '/usr/lib/X11'])
228:             default_x11_include_dirs.extend(['/usr/lib/X11/include',
229:                                              '/usr/include/X11'])
230: 
231:     import subprocess as sp
232:     tmp = None
233:     try:
234:         # Explicitly open/close file to avoid ResourceWarning when
235:         # tests are run in debug mode Python 3.
236:         tmp = open(os.devnull, 'w')
237:         p = sp.Popen(["gcc", "-print-multiarch"], stdout=sp.PIPE,
238:                 stderr=tmp)
239:     except (OSError, DistutilsError):
240:         # OSError if gcc is not installed, or SandboxViolation (DistutilsError
241:         # subclass) if an old setuptools bug is triggered (see gh-3160).
242:         pass
243:     else:
244:         triplet = str(p.communicate()[0].decode().strip())
245:         if p.returncode == 0:
246:             # gcc supports the "-print-multiarch" option
247:             default_x11_lib_dirs += [os.path.join("/usr/lib/", triplet)]
248:             default_lib_dirs += [os.path.join("/usr/lib/", triplet)]
249:     finally:
250:         if tmp is not None:
251:             tmp.close()
252: 
253: if os.path.join(sys.prefix, 'lib') not in default_lib_dirs:
254:     default_lib_dirs.insert(0, os.path.join(sys.prefix, 'lib'))
255:     default_include_dirs.append(os.path.join(sys.prefix, 'include'))
256:     default_src_dirs.append(os.path.join(sys.prefix, 'src'))
257: 
258: default_lib_dirs = [_m for _m in default_lib_dirs if os.path.isdir(_m)]
259: default_runtime_dirs = [_m for _m in default_runtime_dirs if os.path.isdir(_m)]
260: default_include_dirs = [_m for _m in default_include_dirs if os.path.isdir(_m)]
261: default_src_dirs = [_m for _m in default_src_dirs if os.path.isdir(_m)]
262: 
263: so_ext = get_shared_lib_extension()
264: 
265: 
266: def get_standard_file(fname):
267:     '''Returns a list of files named 'fname' from
268:     1) System-wide directory (directory-location of this module)
269:     2) Users HOME directory (os.environ['HOME'])
270:     3) Local directory
271:     '''
272:     # System-wide file
273:     filenames = []
274:     try:
275:         f = __file__
276:     except NameError:
277:         f = sys.argv[0]
278:     else:
279:         sysfile = os.path.join(os.path.split(os.path.abspath(f))[0],
280:                                fname)
281:         if os.path.isfile(sysfile):
282:             filenames.append(sysfile)
283: 
284:     # Home directory
285:     # And look for the user config file
286:     try:
287:         f = os.path.expanduser('~')
288:     except KeyError:
289:         pass
290:     else:
291:         user_file = os.path.join(f, fname)
292:         if os.path.isfile(user_file):
293:             filenames.append(user_file)
294: 
295:     # Local file
296:     if os.path.isfile(fname):
297:         filenames.append(os.path.abspath(fname))
298: 
299:     return filenames
300: 
301: 
302: def get_info(name, notfound_action=0):
303:     '''
304:     notfound_action:
305:       0 - do nothing
306:       1 - display warning message
307:       2 - raise error
308:     '''
309:     cl = {'atlas': atlas_info,  # use lapack_opt or blas_opt instead
310:           'atlas_threads': atlas_threads_info,                # ditto
311:           'atlas_blas': atlas_blas_info,
312:           'atlas_blas_threads': atlas_blas_threads_info,
313:           'lapack_atlas': lapack_atlas_info,  # use lapack_opt instead
314:           'lapack_atlas_threads': lapack_atlas_threads_info,  # ditto
315:           'atlas_3_10': atlas_3_10_info,  # use lapack_opt or blas_opt instead
316:           'atlas_3_10_threads': atlas_3_10_threads_info,                # ditto
317:           'atlas_3_10_blas': atlas_3_10_blas_info,
318:           'atlas_3_10_blas_threads': atlas_3_10_blas_threads_info,
319:           'lapack_atlas_3_10': lapack_atlas_3_10_info,  # use lapack_opt instead
320:           'lapack_atlas_3_10_threads': lapack_atlas_3_10_threads_info,  # ditto
321:           'mkl': mkl_info,
322:           # openblas which may or may not have embedded lapack
323:           'openblas': openblas_info,          # use blas_opt instead
324:           # openblas with embedded lapack
325:           'openblas_lapack': openblas_lapack_info, # use blas_opt instead
326:           'lapack_mkl': lapack_mkl_info,      # use lapack_opt instead
327:           'blas_mkl': blas_mkl_info,          # use blas_opt instead
328:           'x11': x11_info,
329:           'fft_opt': fft_opt_info,
330:           'fftw': fftw_info,
331:           'fftw2': fftw2_info,
332:           'fftw3': fftw3_info,
333:           'dfftw': dfftw_info,
334:           'sfftw': sfftw_info,
335:           'fftw_threads': fftw_threads_info,
336:           'dfftw_threads': dfftw_threads_info,
337:           'sfftw_threads': sfftw_threads_info,
338:           'djbfft': djbfft_info,
339:           'blas': blas_info,                  # use blas_opt instead
340:           'lapack': lapack_info,              # use lapack_opt instead
341:           'lapack_src': lapack_src_info,
342:           'blas_src': blas_src_info,
343:           'numpy': numpy_info,
344:           'f2py': f2py_info,
345:           'Numeric': Numeric_info,
346:           'numeric': Numeric_info,
347:           'numarray': numarray_info,
348:           'numerix': numerix_info,
349:           'lapack_opt': lapack_opt_info,
350:           'blas_opt': blas_opt_info,
351:           'boost_python': boost_python_info,
352:           'agg2': agg2_info,
353:           'wx': wx_info,
354:           'gdk_pixbuf_xlib_2': gdk_pixbuf_xlib_2_info,
355:           'gdk-pixbuf-xlib-2.0': gdk_pixbuf_xlib_2_info,
356:           'gdk_pixbuf_2': gdk_pixbuf_2_info,
357:           'gdk-pixbuf-2.0': gdk_pixbuf_2_info,
358:           'gdk': gdk_info,
359:           'gdk_2': gdk_2_info,
360:           'gdk-2.0': gdk_2_info,
361:           'gdk_x11_2': gdk_x11_2_info,
362:           'gdk-x11-2.0': gdk_x11_2_info,
363:           'gtkp_x11_2': gtkp_x11_2_info,
364:           'gtk+-x11-2.0': gtkp_x11_2_info,
365:           'gtkp_2': gtkp_2_info,
366:           'gtk+-2.0': gtkp_2_info,
367:           'xft': xft_info,
368:           'freetype2': freetype2_info,
369:           'umfpack': umfpack_info,
370:           'amd': amd_info,
371:           }.get(name.lower(), system_info)
372:     return cl().get_info(notfound_action)
373: 
374: 
375: class NotFoundError(DistutilsError):
376:     '''Some third-party program or library is not found.'''
377: 
378: 
379: class AtlasNotFoundError(NotFoundError):
380:     '''
381:     Atlas (http://math-atlas.sourceforge.net/) libraries not found.
382:     Directories to search for the libraries can be specified in the
383:     numpy/distutils/site.cfg file (section [atlas]) or by setting
384:     the ATLAS environment variable.'''
385: 
386: 
387: class LapackNotFoundError(NotFoundError):
388:     '''
389:     Lapack (http://www.netlib.org/lapack/) libraries not found.
390:     Directories to search for the libraries can be specified in the
391:     numpy/distutils/site.cfg file (section [lapack]) or by setting
392:     the LAPACK environment variable.'''
393: 
394: 
395: class LapackSrcNotFoundError(LapackNotFoundError):
396:     '''
397:     Lapack (http://www.netlib.org/lapack/) sources not found.
398:     Directories to search for the sources can be specified in the
399:     numpy/distutils/site.cfg file (section [lapack_src]) or by setting
400:     the LAPACK_SRC environment variable.'''
401: 
402: 
403: class BlasNotFoundError(NotFoundError):
404:     '''
405:     Blas (http://www.netlib.org/blas/) libraries not found.
406:     Directories to search for the libraries can be specified in the
407:     numpy/distutils/site.cfg file (section [blas]) or by setting
408:     the BLAS environment variable.'''
409: 
410: 
411: class BlasSrcNotFoundError(BlasNotFoundError):
412:     '''
413:     Blas (http://www.netlib.org/blas/) sources not found.
414:     Directories to search for the sources can be specified in the
415:     numpy/distutils/site.cfg file (section [blas_src]) or by setting
416:     the BLAS_SRC environment variable.'''
417: 
418: 
419: class FFTWNotFoundError(NotFoundError):
420:     '''
421:     FFTW (http://www.fftw.org/) libraries not found.
422:     Directories to search for the libraries can be specified in the
423:     numpy/distutils/site.cfg file (section [fftw]) or by setting
424:     the FFTW environment variable.'''
425: 
426: 
427: class DJBFFTNotFoundError(NotFoundError):
428:     '''
429:     DJBFFT (http://cr.yp.to/djbfft.html) libraries not found.
430:     Directories to search for the libraries can be specified in the
431:     numpy/distutils/site.cfg file (section [djbfft]) or by setting
432:     the DJBFFT environment variable.'''
433: 
434: 
435: class NumericNotFoundError(NotFoundError):
436:     '''
437:     Numeric (http://www.numpy.org/) module not found.
438:     Get it from above location, install it, and retry setup.py.'''
439: 
440: 
441: class X11NotFoundError(NotFoundError):
442:     '''X11 libraries not found.'''
443: 
444: 
445: class UmfpackNotFoundError(NotFoundError):
446:     '''
447:     UMFPACK sparse solver (http://www.cise.ufl.edu/research/sparse/umfpack/)
448:     not found. Directories to search for the libraries can be specified in the
449:     numpy/distutils/site.cfg file (section [umfpack]) or by setting
450:     the UMFPACK environment variable.'''
451: 
452: 
453: class system_info(object):
454: 
455:     ''' get_info() is the only public method. Don't use others.
456:     '''
457:     section = 'ALL'
458:     dir_env_var = None
459:     search_static_first = 0  # XXX: disabled by default, may disappear in
460:                             # future unless it is proved to be useful.
461:     verbosity = 1
462:     saved_results = {}
463: 
464:     notfounderror = NotFoundError
465: 
466:     def __init__(self,
467:                   default_lib_dirs=default_lib_dirs,
468:                   default_include_dirs=default_include_dirs,
469:                   verbosity=1,
470:                   ):
471:         self.__class__.info = {}
472:         self.local_prefixes = []
473:         defaults = {'library_dirs': os.pathsep.join(default_lib_dirs),
474:                     'include_dirs': os.pathsep.join(default_include_dirs),
475:                     'runtime_library_dirs': os.pathsep.join(default_runtime_dirs),
476:                     'rpath': '',
477:                     'src_dirs': os.pathsep.join(default_src_dirs),
478:                     'search_static_first': str(self.search_static_first),
479:                     'extra_compile_args': '', 'extra_link_args': ''}
480:         self.cp = ConfigParser(defaults)
481:         self.files = []
482:         self.files.extend(get_standard_file('.numpy-site.cfg'))
483:         self.files.extend(get_standard_file('site.cfg'))
484:         self.parse_config_files()
485:         if self.section is not None:
486:             self.search_static_first = self.cp.getboolean(
487:                 self.section, 'search_static_first')
488:         assert isinstance(self.search_static_first, int)
489: 
490:     def parse_config_files(self):
491:         self.cp.read(self.files)
492:         if not self.cp.has_section(self.section):
493:             if self.section is not None:
494:                 self.cp.add_section(self.section)
495: 
496:     def calc_libraries_info(self):
497:         libs = self.get_libraries()
498:         dirs = self.get_lib_dirs()
499:         # The extensions use runtime_library_dirs
500:         r_dirs = self.get_runtime_lib_dirs() 
501:         # Intrinsic distutils use rpath, we simply append both entries
502:         # as though they were one entry
503:         r_dirs.extend(self.get_runtime_lib_dirs(key='rpath'))
504:         info = {}
505:         for lib in libs:
506:             i = self.check_libs(dirs, [lib])
507:             if i is not None:
508:                 dict_append(info, **i)
509:             else:
510:                 log.info('Library %s was not found. Ignoring' % (lib))
511:             i = self.check_libs(r_dirs, [lib])
512:             if i is not None:
513:                 # Swap library keywords found to runtime_library_dirs
514:                 # the libraries are insisting on the user having defined
515:                 # them using the library_dirs, and not necessarily by
516:                 # runtime_library_dirs
517:                 del i['libraries']
518:                 i['runtime_library_dirs'] = i.pop('library_dirs')
519:                 dict_append(info, **i)
520:             else:
521:                 log.info('Runtime library %s was not found. Ignoring' % (lib))
522:         return info
523: 
524:     def set_info(self, **info):
525:         if info:
526:             lib_info = self.calc_libraries_info()
527:             dict_append(info, **lib_info)
528:             # Update extra information
529:             extra_info = self.calc_extra_info()
530:             dict_append(info, **extra_info)
531:         self.saved_results[self.__class__.__name__] = info
532: 
533:     def has_info(self):
534:         return self.__class__.__name__ in self.saved_results
535: 
536:     def calc_extra_info(self):
537:         ''' Updates the information in the current information with
538:         respect to these flags:
539:           extra_compile_args
540:           extra_link_args
541:         '''
542:         info = {}
543:         for key in ['extra_compile_args', 'extra_link_args']:
544:             # Get values
545:             opt = self.cp.get(self.section, key)
546:             if opt:
547:                 tmp = {key : [opt]}
548:                 dict_append(info, **tmp)
549:         return info
550: 
551:     def get_info(self, notfound_action=0):
552:         ''' Return a dictonary with items that are compatible
553:             with numpy.distutils.setup keyword arguments.
554:         '''
555:         flag = 0
556:         if not self.has_info():
557:             flag = 1
558:             log.info(self.__class__.__name__ + ':')
559:             if hasattr(self, 'calc_info'):
560:                 self.calc_info()
561:             if notfound_action:
562:                 if not self.has_info():
563:                     if notfound_action == 1:
564:                         warnings.warn(self.notfounderror.__doc__)
565:                     elif notfound_action == 2:
566:                         raise self.notfounderror(self.notfounderror.__doc__)
567:                     else:
568:                         raise ValueError(repr(notfound_action))
569: 
570:             if not self.has_info():
571:                 log.info('  NOT AVAILABLE')
572:                 self.set_info()
573:             else:
574:                 log.info('  FOUND:')
575: 
576:         res = self.saved_results.get(self.__class__.__name__)
577:         if self.verbosity > 0 and flag:
578:             for k, v in res.items():
579:                 v = str(v)
580:                 if k in ['sources', 'libraries'] and len(v) > 270:
581:                     v = v[:120] + '...\n...\n...' + v[-120:]
582:                 log.info('    %s = %s', k, v)
583:             log.info('')
584: 
585:         return copy.deepcopy(res)
586: 
587:     def get_paths(self, section, key):
588:         dirs = self.cp.get(section, key).split(os.pathsep)
589:         env_var = self.dir_env_var
590:         if env_var:
591:             if is_sequence(env_var):
592:                 e0 = env_var[-1]
593:                 for e in env_var:
594:                     if e in os.environ:
595:                         e0 = e
596:                         break
597:                 if not env_var[0] == e0:
598:                     log.info('Setting %s=%s' % (env_var[0], e0))
599:                 env_var = e0
600:         if env_var and env_var in os.environ:
601:             d = os.environ[env_var]
602:             if d == 'None':
603:                 log.info('Disabled %s: %s',
604:                          self.__class__.__name__, '(%s is None)'
605:                          % (env_var,))
606:                 return []
607:             if os.path.isfile(d):
608:                 dirs = [os.path.dirname(d)] + dirs
609:                 l = getattr(self, '_lib_names', [])
610:                 if len(l) == 1:
611:                     b = os.path.basename(d)
612:                     b = os.path.splitext(b)[0]
613:                     if b[:3] == 'lib':
614:                         log.info('Replacing _lib_names[0]==%r with %r' \
615:                               % (self._lib_names[0], b[3:]))
616:                         self._lib_names[0] = b[3:]
617:             else:
618:                 ds = d.split(os.pathsep)
619:                 ds2 = []
620:                 for d in ds:
621:                     if os.path.isdir(d):
622:                         ds2.append(d)
623:                         for dd in ['include', 'lib']:
624:                             d1 = os.path.join(d, dd)
625:                             if os.path.isdir(d1):
626:                                 ds2.append(d1)
627:                 dirs = ds2 + dirs
628:         default_dirs = self.cp.get(self.section, key).split(os.pathsep)
629:         dirs.extend(default_dirs)
630:         ret = []
631:         for d in dirs:
632:             if len(d) > 0 and not os.path.isdir(d):
633:                 warnings.warn('Specified path %s is invalid.' % d)
634:                 continue
635: 
636:             if d not in ret:
637:                 ret.append(d)
638: 
639:         log.debug('( %s = %s )', key, ':'.join(ret))
640:         return ret
641: 
642:     def get_lib_dirs(self, key='library_dirs'):
643:         return self.get_paths(self.section, key)
644: 
645:     def get_runtime_lib_dirs(self, key='runtime_library_dirs'):
646:         return self.get_paths(self.section, key)
647: 
648:     def get_include_dirs(self, key='include_dirs'):
649:         return self.get_paths(self.section, key)
650: 
651:     def get_src_dirs(self, key='src_dirs'):
652:         return self.get_paths(self.section, key)
653: 
654:     def get_libs(self, key, default):
655:         try:
656:             libs = self.cp.get(self.section, key)
657:         except NoOptionError:
658:             if not default:
659:                 return []
660:             if is_string(default):
661:                 return [default]
662:             return default
663:         return [b for b in [a.strip() for a in libs.split(',')] if b]
664: 
665:     def get_libraries(self, key='libraries'):
666:         if hasattr(self, '_lib_names'):
667:             return self.get_libs(key, default=self._lib_names)
668:         else:
669:             return self.get_libs(key, '')
670: 
671:     def library_extensions(self):
672:         static_exts = ['.a']
673:         if sys.platform == 'win32':
674:             static_exts.append('.lib')  # .lib is used by MSVC
675:         if self.search_static_first:
676:             exts = static_exts + [so_ext]
677:         else:
678:             exts = [so_ext] + static_exts
679:         if sys.platform == 'cygwin':
680:             exts.append('.dll.a')
681:         if sys.platform == 'darwin':
682:             exts.append('.dylib')
683:         return exts
684: 
685:     def check_libs(self, lib_dirs, libs, opt_libs=[]):
686:         '''If static or shared libraries are available then return
687:         their info dictionary.
688: 
689:         Checks for all libraries as shared libraries first, then
690:         static (or vice versa if self.search_static_first is True).
691:         '''
692:         exts = self.library_extensions()
693:         info = None
694:         for ext in exts:
695:             info = self._check_libs(lib_dirs, libs, opt_libs, [ext])
696:             if info is not None:
697:                 break
698:         if not info:
699:             log.info('  libraries %s not found in %s', ','.join(libs),
700:                      lib_dirs)
701:         return info
702: 
703:     def check_libs2(self, lib_dirs, libs, opt_libs=[]):
704:         '''If static or shared libraries are available then return
705:         their info dictionary.
706: 
707:         Checks each library for shared or static.
708:         '''
709:         exts = self.library_extensions()
710:         info = self._check_libs(lib_dirs, libs, opt_libs, exts)
711:         if not info:
712:             log.info('  libraries %s not found in %s', ','.join(libs),
713:                      lib_dirs)
714:         return info
715: 
716:     def _lib_list(self, lib_dir, libs, exts):
717:         assert is_string(lib_dir)
718:         liblist = []
719:         # under windows first try without 'lib' prefix
720:         if sys.platform == 'win32':
721:             lib_prefixes = ['', 'lib']
722:         else:
723:             lib_prefixes = ['lib']
724:         # for each library name, see if we can find a file for it.
725:         for l in libs:
726:             for ext in exts:
727:                 for prefix in lib_prefixes:
728:                     p = self.combine_paths(lib_dir, prefix + l + ext)
729:                     if p:
730:                         break
731:                 if p:
732:                     assert len(p) == 1
733:                     # ??? splitext on p[0] would do this for cygwin
734:                     # doesn't seem correct
735:                     if ext == '.dll.a':
736:                         l += '.dll'
737:                     liblist.append(l)
738:                     break
739:         return liblist
740: 
741:     def _check_libs(self, lib_dirs, libs, opt_libs, exts):
742:         '''Find mandatory and optional libs in expected paths.
743: 
744:         Missing optional libraries are silently forgotten.
745:         '''
746:         # First, try to find the mandatory libraries
747:         if is_sequence(lib_dirs):
748:             found_libs, found_dirs = [], []
749:             for dir_ in lib_dirs:
750:                 found_libs1 = self._lib_list(dir_, libs, exts)
751:                 # It's possible that we'll find the same library in multiple
752:                 # directories. It's also possible that we'll find some
753:                 # libraries on in directory, and some in another. So the
754:                 # obvious thing would be to use a set instead of a list, but I
755:                 # don't know if preserving order matters (does it?).
756:                 for found_lib in found_libs1:
757:                     if found_lib not in found_libs:
758:                         found_libs.append(found_lib)
759:                         if dir_ not in found_dirs:
760:                             found_dirs.append(dir_)
761:         else:
762:             found_libs = self._lib_list(lib_dirs, libs, exts)
763:             found_dirs = [lib_dirs]
764:         if len(found_libs) > 0 and len(found_libs) == len(libs):
765:             info = {'libraries': found_libs, 'library_dirs': found_dirs}
766:             # Now, check for optional libraries
767:             if is_sequence(lib_dirs):
768:                 for dir_ in lib_dirs:
769:                     opt_found_libs = self._lib_list(dir_, opt_libs, exts)
770:                     if opt_found_libs:
771:                         if dir_ not in found_dirs:
772:                             found_dirs.extend(dir_)
773:                         found_libs.extend(opt_found_libs)
774:             else:
775:                 opt_found_libs = self._lib_list(lib_dirs, opt_libs, exts)
776:                 if opt_found_libs:
777:                     found_libs.extend(opt_found_libs)
778:             return info
779:         else:
780:             return None
781: 
782:     def combine_paths(self, *args):
783:         '''Return a list of existing paths composed by all combinations
784:         of items from the arguments.
785:         '''
786:         return combine_paths(*args, **{'verbosity': self.verbosity})
787: 
788: 
789: class fft_opt_info(system_info):
790: 
791:     def calc_info(self):
792:         info = {}
793:         fftw_info = get_info('fftw3') or get_info('fftw2') or get_info('dfftw')
794:         djbfft_info = get_info('djbfft')
795:         if fftw_info:
796:             dict_append(info, **fftw_info)
797:             if djbfft_info:
798:                 dict_append(info, **djbfft_info)
799:             self.set_info(**info)
800:             return
801: 
802: 
803: class fftw_info(system_info):
804:     #variables to override
805:     section = 'fftw'
806:     dir_env_var = 'FFTW'
807:     notfounderror = FFTWNotFoundError
808:     ver_info = [{'name':'fftw3',
809:                     'libs':['fftw3'],
810:                     'includes':['fftw3.h'],
811:                     'macros':[('SCIPY_FFTW3_H', None)]},
812:                   {'name':'fftw2',
813:                     'libs':['rfftw', 'fftw'],
814:                     'includes':['fftw.h', 'rfftw.h'],
815:                     'macros':[('SCIPY_FFTW_H', None)]}]
816: 
817:     def calc_ver_info(self, ver_param):
818:         '''Returns True on successful version detection, else False'''
819:         lib_dirs = self.get_lib_dirs()
820:         incl_dirs = self.get_include_dirs()
821:         incl_dir = None
822:         libs = self.get_libs(self.section + '_libs', ver_param['libs'])
823:         info = self.check_libs(lib_dirs, libs)
824:         if info is not None:
825:             flag = 0
826:             for d in incl_dirs:
827:                 if len(self.combine_paths(d, ver_param['includes'])) \
828:                    == len(ver_param['includes']):
829:                     dict_append(info, include_dirs=[d])
830:                     flag = 1
831:                     incl_dirs = [d]
832:                     break
833:             if flag:
834:                 dict_append(info, define_macros=ver_param['macros'])
835:             else:
836:                 info = None
837:         if info is not None:
838:             self.set_info(**info)
839:             return True
840:         else:
841:             log.info('  %s not found' % (ver_param['name']))
842:             return False
843: 
844:     def calc_info(self):
845:         for i in self.ver_info:
846:             if self.calc_ver_info(i):
847:                 break
848: 
849: 
850: class fftw2_info(fftw_info):
851:     #variables to override
852:     section = 'fftw'
853:     dir_env_var = 'FFTW'
854:     notfounderror = FFTWNotFoundError
855:     ver_info = [{'name':'fftw2',
856:                     'libs':['rfftw', 'fftw'],
857:                     'includes':['fftw.h', 'rfftw.h'],
858:                     'macros':[('SCIPY_FFTW_H', None)]}
859:                   ]
860: 
861: 
862: class fftw3_info(fftw_info):
863:     #variables to override
864:     section = 'fftw3'
865:     dir_env_var = 'FFTW3'
866:     notfounderror = FFTWNotFoundError
867:     ver_info = [{'name':'fftw3',
868:                     'libs':['fftw3'],
869:                     'includes':['fftw3.h'],
870:                     'macros':[('SCIPY_FFTW3_H', None)]},
871:                   ]
872: 
873: 
874: class dfftw_info(fftw_info):
875:     section = 'fftw'
876:     dir_env_var = 'FFTW'
877:     ver_info = [{'name':'dfftw',
878:                     'libs':['drfftw', 'dfftw'],
879:                     'includes':['dfftw.h', 'drfftw.h'],
880:                     'macros':[('SCIPY_DFFTW_H', None)]}]
881: 
882: 
883: class sfftw_info(fftw_info):
884:     section = 'fftw'
885:     dir_env_var = 'FFTW'
886:     ver_info = [{'name':'sfftw',
887:                     'libs':['srfftw', 'sfftw'],
888:                     'includes':['sfftw.h', 'srfftw.h'],
889:                     'macros':[('SCIPY_SFFTW_H', None)]}]
890: 
891: 
892: class fftw_threads_info(fftw_info):
893:     section = 'fftw'
894:     dir_env_var = 'FFTW'
895:     ver_info = [{'name':'fftw threads',
896:                     'libs':['rfftw_threads', 'fftw_threads'],
897:                     'includes':['fftw_threads.h', 'rfftw_threads.h'],
898:                     'macros':[('SCIPY_FFTW_THREADS_H', None)]}]
899: 
900: 
901: class dfftw_threads_info(fftw_info):
902:     section = 'fftw'
903:     dir_env_var = 'FFTW'
904:     ver_info = [{'name':'dfftw threads',
905:                     'libs':['drfftw_threads', 'dfftw_threads'],
906:                     'includes':['dfftw_threads.h', 'drfftw_threads.h'],
907:                     'macros':[('SCIPY_DFFTW_THREADS_H', None)]}]
908: 
909: 
910: class sfftw_threads_info(fftw_info):
911:     section = 'fftw'
912:     dir_env_var = 'FFTW'
913:     ver_info = [{'name':'sfftw threads',
914:                     'libs':['srfftw_threads', 'sfftw_threads'],
915:                     'includes':['sfftw_threads.h', 'srfftw_threads.h'],
916:                     'macros':[('SCIPY_SFFTW_THREADS_H', None)]}]
917: 
918: 
919: class djbfft_info(system_info):
920:     section = 'djbfft'
921:     dir_env_var = 'DJBFFT'
922:     notfounderror = DJBFFTNotFoundError
923: 
924:     def get_paths(self, section, key):
925:         pre_dirs = system_info.get_paths(self, section, key)
926:         dirs = []
927:         for d in pre_dirs:
928:             dirs.extend(self.combine_paths(d, ['djbfft']) + [d])
929:         return [d for d in dirs if os.path.isdir(d)]
930: 
931:     def calc_info(self):
932:         lib_dirs = self.get_lib_dirs()
933:         incl_dirs = self.get_include_dirs()
934:         info = None
935:         for d in lib_dirs:
936:             p = self.combine_paths(d, ['djbfft.a'])
937:             if p:
938:                 info = {'extra_objects': p}
939:                 break
940:             p = self.combine_paths(d, ['libdjbfft.a', 'libdjbfft' + so_ext])
941:             if p:
942:                 info = {'libraries': ['djbfft'], 'library_dirs': [d]}
943:                 break
944:         if info is None:
945:             return
946:         for d in incl_dirs:
947:             if len(self.combine_paths(d, ['fftc8.h', 'fftfreq.h'])) == 2:
948:                 dict_append(info, include_dirs=[d],
949:                             define_macros=[('SCIPY_DJBFFT_H', None)])
950:                 self.set_info(**info)
951:                 return
952:         return
953: 
954: 
955: class mkl_info(system_info):
956:     section = 'mkl'
957:     dir_env_var = 'MKL'
958:     _lib_mkl = ['mkl', 'vml', 'guide']
959: 
960:     def get_mkl_rootdir(self):
961:         mklroot = os.environ.get('MKLROOT', None)
962:         if mklroot is not None:
963:             return mklroot
964:         paths = os.environ.get('LD_LIBRARY_PATH', '').split(os.pathsep)
965:         ld_so_conf = '/etc/ld.so.conf'
966:         if os.path.isfile(ld_so_conf):
967:             for d in open(ld_so_conf, 'r'):
968:                 d = d.strip()
969:                 if d:
970:                     paths.append(d)
971:         intel_mkl_dirs = []
972:         for path in paths:
973:             path_atoms = path.split(os.sep)
974:             for m in path_atoms:
975:                 if m.startswith('mkl'):
976:                     d = os.sep.join(path_atoms[:path_atoms.index(m) + 2])
977:                     intel_mkl_dirs.append(d)
978:                     break
979:         for d in paths:
980:             dirs = glob(os.path.join(d, 'mkl', '*'))
981:             dirs += glob(os.path.join(d, 'mkl*'))
982:             for d in dirs:
983:                 if os.path.isdir(os.path.join(d, 'lib')):
984:                     return d
985:         return None
986: 
987:     def __init__(self):
988:         mklroot = self.get_mkl_rootdir()
989:         if mklroot is None:
990:             system_info.__init__(self)
991:         else:
992:             from .cpuinfo import cpu
993:             l = 'mkl'  # use shared library
994:             if cpu.is_Itanium():
995:                 plt = '64'
996:             elif cpu.is_Xeon():
997:                 plt = 'intel64'
998:             else:
999:                 plt = '32'
1000:             if l not in self._lib_mkl:
1001:                 self._lib_mkl.insert(0, l)
1002:             system_info.__init__(
1003:                 self,
1004:                 default_lib_dirs=[os.path.join(mklroot, 'lib', plt)],
1005:                 default_include_dirs=[os.path.join(mklroot, 'include')])
1006: 
1007:     def calc_info(self):
1008:         lib_dirs = self.get_lib_dirs()
1009:         incl_dirs = self.get_include_dirs()
1010:         mkl_libs = self.get_libs('mkl_libs', self._lib_mkl)
1011:         info = self.check_libs2(lib_dirs, mkl_libs)
1012:         if info is None:
1013:             return
1014:         dict_append(info,
1015:                     define_macros=[('SCIPY_MKL_H', None),
1016:                                    ('HAVE_CBLAS', None)],
1017:                     include_dirs=incl_dirs)
1018:         if sys.platform == 'win32':
1019:             pass  # win32 has no pthread library
1020:         else:
1021:             dict_append(info, libraries=['pthread'])
1022:         self.set_info(**info)
1023: 
1024: 
1025: class lapack_mkl_info(mkl_info):
1026: 
1027:     def calc_info(self):
1028:         mkl = get_info('mkl')
1029:         if not mkl:
1030:             return
1031:         if sys.platform == 'win32':
1032:             lapack_libs = self.get_libs('lapack_libs', ['mkl_lapack'])
1033:         else:
1034:             lapack_libs = self.get_libs('lapack_libs',
1035:                                         ['mkl_lapack32', 'mkl_lapack64'])
1036: 
1037:         info = {'libraries': lapack_libs}
1038:         dict_append(info, **mkl)
1039:         self.set_info(**info)
1040: 
1041: 
1042: class blas_mkl_info(mkl_info):
1043:     pass
1044: 
1045: 
1046: class atlas_info(system_info):
1047:     section = 'atlas'
1048:     dir_env_var = 'ATLAS'
1049:     _lib_names = ['f77blas', 'cblas']
1050:     if sys.platform[:7] == 'freebsd':
1051:         _lib_atlas = ['atlas_r']
1052:         _lib_lapack = ['alapack_r']
1053:     else:
1054:         _lib_atlas = ['atlas']
1055:         _lib_lapack = ['lapack']
1056: 
1057:     notfounderror = AtlasNotFoundError
1058: 
1059:     def get_paths(self, section, key):
1060:         pre_dirs = system_info.get_paths(self, section, key)
1061:         dirs = []
1062:         for d in pre_dirs:
1063:             dirs.extend(self.combine_paths(d, ['atlas*', 'ATLAS*',
1064:                                          'sse', '3dnow', 'sse2']) + [d])
1065:         return [d for d in dirs if os.path.isdir(d)]
1066: 
1067:     def calc_info(self):
1068:         lib_dirs = self.get_lib_dirs()
1069:         info = {}
1070:         atlas_libs = self.get_libs('atlas_libs',
1071:                                    self._lib_names + self._lib_atlas)
1072:         lapack_libs = self.get_libs('lapack_libs', self._lib_lapack)
1073:         atlas = None
1074:         lapack = None
1075:         atlas_1 = None
1076:         for d in lib_dirs:
1077:             atlas = self.check_libs2(d, atlas_libs, [])
1078:             lapack_atlas = self.check_libs2(d, ['lapack_atlas'], [])
1079:             if atlas is not None:
1080:                 lib_dirs2 = [d] + self.combine_paths(d, ['atlas*', 'ATLAS*'])
1081:                 lapack = self.check_libs2(lib_dirs2, lapack_libs, [])
1082:                 if lapack is not None:
1083:                     break
1084:             if atlas:
1085:                 atlas_1 = atlas
1086:         log.info(self.__class__)
1087:         if atlas is None:
1088:             atlas = atlas_1
1089:         if atlas is None:
1090:             return
1091:         include_dirs = self.get_include_dirs()
1092:         h = (self.combine_paths(lib_dirs + include_dirs, 'cblas.h') or [None])
1093:         h = h[0]
1094:         if h:
1095:             h = os.path.dirname(h)
1096:             dict_append(info, include_dirs=[h])
1097:         info['language'] = 'c'
1098:         if lapack is not None:
1099:             dict_append(info, **lapack)
1100:             dict_append(info, **atlas)
1101:         elif 'lapack_atlas' in atlas['libraries']:
1102:             dict_append(info, **atlas)
1103:             dict_append(info,
1104:                         define_macros=[('ATLAS_WITH_LAPACK_ATLAS', None)])
1105:             self.set_info(**info)
1106:             return
1107:         else:
1108:             dict_append(info, **atlas)
1109:             dict_append(info, define_macros=[('ATLAS_WITHOUT_LAPACK', None)])
1110:             message = '''
1111: *********************************************************************
1112:     Could not find lapack library within the ATLAS installation.
1113: *********************************************************************
1114: '''
1115:             warnings.warn(message)
1116:             self.set_info(**info)
1117:             return
1118: 
1119:         # Check if lapack library is complete, only warn if it is not.
1120:         lapack_dir = lapack['library_dirs'][0]
1121:         lapack_name = lapack['libraries'][0]
1122:         lapack_lib = None
1123:         lib_prefixes = ['lib']
1124:         if sys.platform == 'win32':
1125:             lib_prefixes.append('')
1126:         for e in self.library_extensions():
1127:             for prefix in lib_prefixes:
1128:                 fn = os.path.join(lapack_dir, prefix + lapack_name + e)
1129:                 if os.path.exists(fn):
1130:                     lapack_lib = fn
1131:                     break
1132:             if lapack_lib:
1133:                 break
1134:         if lapack_lib is not None:
1135:             sz = os.stat(lapack_lib)[6]
1136:             if sz <= 4000 * 1024:
1137:                 message = '''
1138: *********************************************************************
1139:     Lapack library (from ATLAS) is probably incomplete:
1140:       size of %s is %sk (expected >4000k)
1141: 
1142:     Follow the instructions in the KNOWN PROBLEMS section of the file
1143:     numpy/INSTALL.txt.
1144: *********************************************************************
1145: ''' % (lapack_lib, sz / 1024)
1146:                 warnings.warn(message)
1147:             else:
1148:                 info['language'] = 'f77'
1149: 
1150:         atlas_version, atlas_extra_info = get_atlas_version(**atlas)
1151:         dict_append(info, **atlas_extra_info)
1152: 
1153:         self.set_info(**info)
1154: 
1155: 
1156: class atlas_blas_info(atlas_info):
1157:     _lib_names = ['f77blas', 'cblas']
1158: 
1159:     def calc_info(self):
1160:         lib_dirs = self.get_lib_dirs()
1161:         info = {}
1162:         atlas_libs = self.get_libs('atlas_libs',
1163:                                    self._lib_names + self._lib_atlas)
1164:         atlas = self.check_libs2(lib_dirs, atlas_libs, [])
1165:         if atlas is None:
1166:             return
1167:         include_dirs = self.get_include_dirs()
1168:         h = (self.combine_paths(lib_dirs + include_dirs, 'cblas.h') or [None])
1169:         h = h[0]
1170:         if h:
1171:             h = os.path.dirname(h)
1172:             dict_append(info, include_dirs=[h])
1173:         info['language'] = 'c'
1174:         info['define_macros'] = [('HAVE_CBLAS', None)]
1175: 
1176:         atlas_version, atlas_extra_info = get_atlas_version(**atlas)
1177:         dict_append(atlas, **atlas_extra_info)
1178: 
1179:         dict_append(info, **atlas)
1180: 
1181:         self.set_info(**info)
1182:         return
1183: 
1184: 
1185: class atlas_threads_info(atlas_info):
1186:     dir_env_var = ['PTATLAS', 'ATLAS']
1187:     _lib_names = ['ptf77blas', 'ptcblas']
1188: 
1189: 
1190: class atlas_blas_threads_info(atlas_blas_info):
1191:     dir_env_var = ['PTATLAS', 'ATLAS']
1192:     _lib_names = ['ptf77blas', 'ptcblas']
1193: 
1194: 
1195: class lapack_atlas_info(atlas_info):
1196:     _lib_names = ['lapack_atlas'] + atlas_info._lib_names
1197: 
1198: 
1199: class lapack_atlas_threads_info(atlas_threads_info):
1200:     _lib_names = ['lapack_atlas'] + atlas_threads_info._lib_names
1201: 
1202: 
1203: class atlas_3_10_info(atlas_info):
1204:     _lib_names = ['satlas']
1205:     _lib_atlas = _lib_names
1206:     _lib_lapack = _lib_names
1207: 
1208: 
1209: class atlas_3_10_blas_info(atlas_3_10_info):
1210:     _lib_names = ['satlas']
1211: 
1212:     def calc_info(self):
1213:         lib_dirs = self.get_lib_dirs()
1214:         info = {}
1215:         atlas_libs = self.get_libs('atlas_libs',
1216:                                    self._lib_names)
1217:         atlas = self.check_libs2(lib_dirs, atlas_libs, [])
1218:         if atlas is None:
1219:             return
1220:         include_dirs = self.get_include_dirs()
1221:         h = (self.combine_paths(lib_dirs + include_dirs, 'cblas.h') or [None])
1222:         h = h[0]
1223:         if h:
1224:             h = os.path.dirname(h)
1225:             dict_append(info, include_dirs=[h])
1226:         info['language'] = 'c'
1227:         info['define_macros'] = [('HAVE_CBLAS', None)]
1228: 
1229:         atlas_version, atlas_extra_info = get_atlas_version(**atlas)
1230:         dict_append(atlas, **atlas_extra_info)
1231: 
1232:         dict_append(info, **atlas)
1233: 
1234:         self.set_info(**info)
1235:         return
1236: 
1237: 
1238: class atlas_3_10_threads_info(atlas_3_10_info):
1239:     dir_env_var = ['PTATLAS', 'ATLAS']
1240:     _lib_names = ['tatlas']
1241:     _lib_atlas = _lib_names
1242:     _lib_lapack = _lib_names
1243: 
1244: 
1245: class atlas_3_10_blas_threads_info(atlas_3_10_blas_info):
1246:     dir_env_var = ['PTATLAS', 'ATLAS']
1247:     _lib_names = ['tatlas']
1248: 
1249: 
1250: class lapack_atlas_3_10_info(atlas_3_10_info):
1251:     pass
1252: 
1253: 
1254: class lapack_atlas_3_10_threads_info(atlas_3_10_threads_info):
1255:     pass
1256: 
1257: 
1258: class lapack_info(system_info):
1259:     section = 'lapack'
1260:     dir_env_var = 'LAPACK'
1261:     _lib_names = ['lapack']
1262:     notfounderror = LapackNotFoundError
1263: 
1264:     def calc_info(self):
1265:         lib_dirs = self.get_lib_dirs()
1266: 
1267:         lapack_libs = self.get_libs('lapack_libs', self._lib_names)
1268:         info = self.check_libs(lib_dirs, lapack_libs, [])
1269:         if info is None:
1270:             return
1271:         info['language'] = 'f77'
1272:         self.set_info(**info)
1273: 
1274: 
1275: class lapack_src_info(system_info):
1276:     section = 'lapack_src'
1277:     dir_env_var = 'LAPACK_SRC'
1278:     notfounderror = LapackSrcNotFoundError
1279: 
1280:     def get_paths(self, section, key):
1281:         pre_dirs = system_info.get_paths(self, section, key)
1282:         dirs = []
1283:         for d in pre_dirs:
1284:             dirs.extend([d] + self.combine_paths(d, ['LAPACK*/SRC', 'SRC']))
1285:         return [d for d in dirs if os.path.isdir(d)]
1286: 
1287:     def calc_info(self):
1288:         src_dirs = self.get_src_dirs()
1289:         src_dir = ''
1290:         for d in src_dirs:
1291:             if os.path.isfile(os.path.join(d, 'dgesv.f')):
1292:                 src_dir = d
1293:                 break
1294:         if not src_dir:
1295:             #XXX: Get sources from netlib. May be ask first.
1296:             return
1297:         # The following is extracted from LAPACK-3.0/SRC/Makefile.
1298:         # Added missing names from lapack-lite-3.1.1/SRC/Makefile
1299:         # while keeping removed names for Lapack-3.0 compatibility.
1300:         allaux = '''
1301:         ilaenv ieeeck lsame lsamen xerbla
1302:         iparmq
1303:         '''  # *.f
1304:         laux = '''
1305:         bdsdc bdsqr disna labad lacpy ladiv lae2 laebz laed0 laed1
1306:         laed2 laed3 laed4 laed5 laed6 laed7 laed8 laed9 laeda laev2
1307:         lagtf lagts lamch lamrg lanst lapy2 lapy3 larnv larrb larre
1308:         larrf lartg laruv las2 lascl lasd0 lasd1 lasd2 lasd3 lasd4
1309:         lasd5 lasd6 lasd7 lasd8 lasd9 lasda lasdq lasdt laset lasq1
1310:         lasq2 lasq3 lasq4 lasq5 lasq6 lasr lasrt lassq lasv2 pttrf
1311:         stebz stedc steqr sterf
1312: 
1313:         larra larrc larrd larr larrk larrj larrr laneg laisnan isnan
1314:         lazq3 lazq4
1315:         '''  # [s|d]*.f
1316:         lasrc = '''
1317:         gbbrd gbcon gbequ gbrfs gbsv gbsvx gbtf2 gbtrf gbtrs gebak
1318:         gebal gebd2 gebrd gecon geequ gees geesx geev geevx gegs gegv
1319:         gehd2 gehrd gelq2 gelqf gels gelsd gelss gelsx gelsy geql2
1320:         geqlf geqp3 geqpf geqr2 geqrf gerfs gerq2 gerqf gesc2 gesdd
1321:         gesv gesvd gesvx getc2 getf2 getrf getri getrs ggbak ggbal
1322:         gges ggesx ggev ggevx ggglm gghrd gglse ggqrf ggrqf ggsvd
1323:         ggsvp gtcon gtrfs gtsv gtsvx gttrf gttrs gtts2 hgeqz hsein
1324:         hseqr labrd lacon laein lags2 lagtm lahqr lahrd laic1 lals0
1325:         lalsa lalsd langb lange langt lanhs lansb lansp lansy lantb
1326:         lantp lantr lapll lapmt laqgb laqge laqp2 laqps laqsb laqsp
1327:         laqsy lar1v lar2v larf larfb larfg larft larfx largv larrv
1328:         lartv larz larzb larzt laswp lasyf latbs latdf latps latrd
1329:         latrs latrz latzm lauu2 lauum pbcon pbequ pbrfs pbstf pbsv
1330:         pbsvx pbtf2 pbtrf pbtrs pocon poequ porfs posv posvx potf2
1331:         potrf potri potrs ppcon ppequ pprfs ppsv ppsvx pptrf pptri
1332:         pptrs ptcon pteqr ptrfs ptsv ptsvx pttrs ptts2 spcon sprfs
1333:         spsv spsvx sptrf sptri sptrs stegr stein sycon syrfs sysv
1334:         sysvx sytf2 sytrf sytri sytrs tbcon tbrfs tbtrs tgevc tgex2
1335:         tgexc tgsen tgsja tgsna tgsy2 tgsyl tpcon tprfs tptri tptrs
1336:         trcon trevc trexc trrfs trsen trsna trsyl trti2 trtri trtrs
1337:         tzrqf tzrzf
1338: 
1339:         lacn2 lahr2 stemr laqr0 laqr1 laqr2 laqr3 laqr4 laqr5
1340:         '''  # [s|c|d|z]*.f
1341:         sd_lasrc = '''
1342:         laexc lag2 lagv2 laln2 lanv2 laqtr lasy2 opgtr opmtr org2l
1343:         org2r orgbr orghr orgl2 orglq orgql orgqr orgr2 orgrq orgtr
1344:         orm2l orm2r ormbr ormhr orml2 ormlq ormql ormqr ormr2 ormr3
1345:         ormrq ormrz ormtr rscl sbev sbevd sbevx sbgst sbgv sbgvd sbgvx
1346:         sbtrd spev spevd spevx spgst spgv spgvd spgvx sptrd stev stevd
1347:         stevr stevx syev syevd syevr syevx sygs2 sygst sygv sygvd
1348:         sygvx sytd2 sytrd
1349:         '''  # [s|d]*.f
1350:         cz_lasrc = '''
1351:         bdsqr hbev hbevd hbevx hbgst hbgv hbgvd hbgvx hbtrd hecon heev
1352:         heevd heevr heevx hegs2 hegst hegv hegvd hegvx herfs hesv
1353:         hesvx hetd2 hetf2 hetrd hetrf hetri hetrs hpcon hpev hpevd
1354:         hpevx hpgst hpgv hpgvd hpgvx hprfs hpsv hpsvx hptrd hptrf
1355:         hptri hptrs lacgv lacp2 lacpy lacrm lacrt ladiv laed0 laed7
1356:         laed8 laesy laev2 lahef lanhb lanhe lanhp lanht laqhb laqhe
1357:         laqhp larcm larnv lartg lascl laset lasr lassq pttrf rot spmv
1358:         spr stedc steqr symv syr ung2l ung2r ungbr unghr ungl2 unglq
1359:         ungql ungqr ungr2 ungrq ungtr unm2l unm2r unmbr unmhr unml2
1360:         unmlq unmql unmqr unmr2 unmr3 unmrq unmrz unmtr upgtr upmtr
1361:         '''  # [c|z]*.f
1362:         #######
1363:         sclaux = laux + ' econd '                  # s*.f
1364:         dzlaux = laux + ' secnd '                  # d*.f
1365:         slasrc = lasrc + sd_lasrc                  # s*.f
1366:         dlasrc = lasrc + sd_lasrc                  # d*.f
1367:         clasrc = lasrc + cz_lasrc + ' srot srscl '  # c*.f
1368:         zlasrc = lasrc + cz_lasrc + ' drot drscl '  # z*.f
1369:         oclasrc = ' icmax1 scsum1 '                # *.f
1370:         ozlasrc = ' izmax1 dzsum1 '                # *.f
1371:         sources = ['s%s.f' % f for f in (sclaux + slasrc).split()] \
1372:                   + ['d%s.f' % f for f in (dzlaux + dlasrc).split()] \
1373:                   + ['c%s.f' % f for f in (clasrc).split()] \
1374:                   + ['z%s.f' % f for f in (zlasrc).split()] \
1375:                   + ['%s.f' % f for f in (allaux + oclasrc + ozlasrc).split()]
1376:         sources = [os.path.join(src_dir, f) for f in sources]
1377:         # Lapack 3.1:
1378:         src_dir2 = os.path.join(src_dir, '..', 'INSTALL')
1379:         sources += [os.path.join(src_dir2, p + 'lamch.f') for p in 'sdcz']
1380:         # Lapack 3.2.1:
1381:         sources += [os.path.join(src_dir, p + 'larfp.f') for p in 'sdcz']
1382:         sources += [os.path.join(src_dir, 'ila' + p + 'lr.f') for p in 'sdcz']
1383:         sources += [os.path.join(src_dir, 'ila' + p + 'lc.f') for p in 'sdcz']
1384:         # Should we check here actual existence of source files?
1385:         # Yes, the file listing is different between 3.0 and 3.1
1386:         # versions.
1387:         sources = [f for f in sources if os.path.isfile(f)]
1388:         info = {'sources': sources, 'language': 'f77'}
1389:         self.set_info(**info)
1390: 
1391: atlas_version_c_text = r'''
1392: /* This file is generated from numpy/distutils/system_info.py */
1393: void ATL_buildinfo(void);
1394: int main(void) {
1395:   ATL_buildinfo();
1396:   return 0;
1397: }
1398: '''
1399: 
1400: _cached_atlas_version = {}
1401: 
1402: 
1403: def get_atlas_version(**config):
1404:     libraries = config.get('libraries', [])
1405:     library_dirs = config.get('library_dirs', [])
1406:     key = (tuple(libraries), tuple(library_dirs))
1407:     if key in _cached_atlas_version:
1408:         return _cached_atlas_version[key]
1409:     c = cmd_config(Distribution())
1410:     atlas_version = None
1411:     info = {}
1412:     try:
1413:         s, o = c.get_output(atlas_version_c_text,
1414:                             libraries=libraries, library_dirs=library_dirs,
1415:                             use_tee=(system_info.verbosity > 0))
1416:         if s and re.search(r'undefined reference to `_gfortran', o, re.M):
1417:             s, o = c.get_output(atlas_version_c_text,
1418:                                 libraries=libraries + ['gfortran'],
1419:                                 library_dirs=library_dirs,
1420:                                 use_tee=(system_info.verbosity > 0))
1421:             if not s:
1422:                 warnings.warn('''
1423: *****************************************************
1424: Linkage with ATLAS requires gfortran. Use
1425: 
1426:   python setup.py config_fc --fcompiler=gnu95 ...
1427: 
1428: when building extension libraries that use ATLAS.
1429: Make sure that -lgfortran is used for C++ extensions.
1430: *****************************************************
1431: ''')
1432:                 dict_append(info, language='f90',
1433:                             define_macros=[('ATLAS_REQUIRES_GFORTRAN', None)])
1434:     except Exception:  # failed to get version from file -- maybe on Windows
1435:         # look at directory name
1436:         for o in library_dirs:
1437:             m = re.search(r'ATLAS_(?P<version>\d+[.]\d+[.]\d+)_', o)
1438:             if m:
1439:                 atlas_version = m.group('version')
1440:             if atlas_version is not None:
1441:                 break
1442: 
1443:         # final choice --- look at ATLAS_VERSION environment
1444:         #   variable
1445:         if atlas_version is None:
1446:             atlas_version = os.environ.get('ATLAS_VERSION', None)
1447:         if atlas_version:
1448:             dict_append(info, define_macros=[(
1449:                 'ATLAS_INFO', '"\\"%s\\""' % atlas_version)
1450:             ])
1451:         else:
1452:             dict_append(info, define_macros=[('NO_ATLAS_INFO', -1)])
1453:         return atlas_version or '?.?.?', info
1454: 
1455:     if not s:
1456:         m = re.search(r'ATLAS version (?P<version>\d+[.]\d+[.]\d+)', o)
1457:         if m:
1458:             atlas_version = m.group('version')
1459:     if atlas_version is None:
1460:         if re.search(r'undefined symbol: ATL_buildinfo', o, re.M):
1461:             atlas_version = '3.2.1_pre3.3.6'
1462:         else:
1463:             log.info('Status: %d', s)
1464:             log.info('Output: %s', o)
1465: 
1466:     if atlas_version == '3.2.1_pre3.3.6':
1467:         dict_append(info, define_macros=[('NO_ATLAS_INFO', -2)])
1468:     else:
1469:         dict_append(info, define_macros=[(
1470:             'ATLAS_INFO', '"\\"%s\\""' % atlas_version)
1471:         ])
1472:     result = _cached_atlas_version[key] = atlas_version, info
1473:     return result
1474: 
1475: 
1476: class lapack_opt_info(system_info):
1477: 
1478:     notfounderror = LapackNotFoundError
1479: 
1480:     def calc_info(self):
1481: 
1482:         openblas_info = get_info('openblas_lapack')
1483:         if openblas_info:
1484:             self.set_info(**openblas_info)
1485:             return
1486: 
1487:         lapack_mkl_info = get_info('lapack_mkl')
1488:         if lapack_mkl_info:
1489:             self.set_info(**lapack_mkl_info)
1490:             return
1491: 
1492:         atlas_info = get_info('atlas_3_10_threads')
1493:         if not atlas_info:
1494:             atlas_info = get_info('atlas_3_10')
1495:         if not atlas_info:
1496:             atlas_info = get_info('atlas_threads')
1497:         if not atlas_info:
1498:             atlas_info = get_info('atlas')
1499: 
1500:         if sys.platform == 'darwin' and not atlas_info:
1501:             # Use the system lapack from Accelerate or vecLib under OSX
1502:             args = []
1503:             link_args = []
1504:             if get_platform()[-4:] == 'i386' or 'intel' in get_platform() or \
1505:                'x86_64' in get_platform() or \
1506:                'i386' in platform.platform():
1507:                 intel = 1
1508:             else:
1509:                 intel = 0
1510:             if os.path.exists('/System/Library/Frameworks'
1511:                               '/Accelerate.framework/'):
1512:                 if intel:
1513:                     args.extend(['-msse3'])
1514:                 else:
1515:                     args.extend(['-faltivec'])
1516:                 link_args.extend(['-Wl,-framework', '-Wl,Accelerate'])
1517:             elif os.path.exists('/System/Library/Frameworks'
1518:                                 '/vecLib.framework/'):
1519:                 if intel:
1520:                     args.extend(['-msse3'])
1521:                 else:
1522:                     args.extend(['-faltivec'])
1523:                 link_args.extend(['-Wl,-framework', '-Wl,vecLib'])
1524:             if args:
1525:                 self.set_info(extra_compile_args=args,
1526:                               extra_link_args=link_args,
1527:                               define_macros=[('NO_ATLAS_INFO', 3),
1528:                                              ('HAVE_CBLAS', None)])
1529:                 return
1530: 
1531:         need_lapack = 0
1532:         need_blas = 0
1533:         info = {}
1534:         if atlas_info:
1535:             l = atlas_info.get('define_macros', [])
1536:             if ('ATLAS_WITH_LAPACK_ATLAS', None) in l \
1537:                    or ('ATLAS_WITHOUT_LAPACK', None) in l:
1538:                 need_lapack = 1
1539:             info = atlas_info
1540: 
1541:         else:
1542:             warnings.warn(AtlasNotFoundError.__doc__)
1543:             need_blas = 1
1544:             need_lapack = 1
1545:             dict_append(info, define_macros=[('NO_ATLAS_INFO', 1)])
1546: 
1547:         if need_lapack:
1548:             lapack_info = get_info('lapack')
1549:             #lapack_info = {} ## uncomment for testing
1550:             if lapack_info:
1551:                 dict_append(info, **lapack_info)
1552:             else:
1553:                 warnings.warn(LapackNotFoundError.__doc__)
1554:                 lapack_src_info = get_info('lapack_src')
1555:                 if not lapack_src_info:
1556:                     warnings.warn(LapackSrcNotFoundError.__doc__)
1557:                     return
1558:                 dict_append(info, libraries=[('flapack_src', lapack_src_info)])
1559: 
1560:         if need_blas:
1561:             blas_info = get_info('blas')
1562:             if blas_info:
1563:                 dict_append(info, **blas_info)
1564:             else:
1565:                 warnings.warn(BlasNotFoundError.__doc__)
1566:                 blas_src_info = get_info('blas_src')
1567:                 if not blas_src_info:
1568:                     warnings.warn(BlasSrcNotFoundError.__doc__)
1569:                     return
1570:                 dict_append(info, libraries=[('fblas_src', blas_src_info)])
1571: 
1572:         self.set_info(**info)
1573:         return
1574: 
1575: 
1576: class blas_opt_info(system_info):
1577: 
1578:     notfounderror = BlasNotFoundError
1579: 
1580:     def calc_info(self):
1581: 
1582:         blas_mkl_info = get_info('blas_mkl')
1583:         if blas_mkl_info:
1584:             self.set_info(**blas_mkl_info)
1585:             return
1586: 
1587:         openblas_info = get_info('openblas')
1588:         if openblas_info:
1589:             self.set_info(**openblas_info)
1590:             return
1591: 
1592:         atlas_info = get_info('atlas_3_10_blas_threads')
1593:         if not atlas_info:
1594:             atlas_info = get_info('atlas_3_10_blas')
1595:         if not atlas_info:
1596:             atlas_info = get_info('atlas_blas_threads')
1597:         if not atlas_info:
1598:             atlas_info = get_info('atlas_blas')
1599: 
1600:         if sys.platform == 'darwin' and not atlas_info:
1601:             # Use the system BLAS from Accelerate or vecLib under OSX
1602:             args = []
1603:             link_args = []
1604:             if get_platform()[-4:] == 'i386' or 'intel' in get_platform() or \
1605:                'x86_64' in get_platform() or \
1606:                'i386' in platform.platform():
1607:                 intel = 1
1608:             else:
1609:                 intel = 0
1610:             if os.path.exists('/System/Library/Frameworks'
1611:                               '/Accelerate.framework/'):
1612:                 if intel:
1613:                     args.extend(['-msse3'])
1614:                 else:
1615:                     args.extend(['-faltivec'])
1616:                 args.extend([
1617:                     '-I/System/Library/Frameworks/vecLib.framework/Headers'])
1618:                 link_args.extend(['-Wl,-framework', '-Wl,Accelerate'])
1619:             elif os.path.exists('/System/Library/Frameworks'
1620:                                 '/vecLib.framework/'):
1621:                 if intel:
1622:                     args.extend(['-msse3'])
1623:                 else:
1624:                     args.extend(['-faltivec'])
1625:                 args.extend([
1626:                     '-I/System/Library/Frameworks/vecLib.framework/Headers'])
1627:                 link_args.extend(['-Wl,-framework', '-Wl,vecLib'])
1628:             if args:
1629:                 self.set_info(extra_compile_args=args,
1630:                               extra_link_args=link_args,
1631:                               define_macros=[('NO_ATLAS_INFO', 3),
1632:                                              ('HAVE_CBLAS', None)])
1633:                 return
1634: 
1635:         need_blas = 0
1636:         info = {}
1637:         if atlas_info:
1638:             info = atlas_info
1639:         else:
1640:             warnings.warn(AtlasNotFoundError.__doc__)
1641:             need_blas = 1
1642:             dict_append(info, define_macros=[('NO_ATLAS_INFO', 1)])
1643: 
1644:         if need_blas:
1645:             blas_info = get_info('blas')
1646:             if blas_info:
1647:                 dict_append(info, **blas_info)
1648:             else:
1649:                 warnings.warn(BlasNotFoundError.__doc__)
1650:                 blas_src_info = get_info('blas_src')
1651:                 if not blas_src_info:
1652:                     warnings.warn(BlasSrcNotFoundError.__doc__)
1653:                     return
1654:                 dict_append(info, libraries=[('fblas_src', blas_src_info)])
1655: 
1656:         self.set_info(**info)
1657:         return
1658: 
1659: 
1660: class blas_info(system_info):
1661:     section = 'blas'
1662:     dir_env_var = 'BLAS'
1663:     _lib_names = ['blas']
1664:     notfounderror = BlasNotFoundError
1665: 
1666:     def calc_info(self):
1667:         lib_dirs = self.get_lib_dirs()
1668:         blas_libs = self.get_libs('blas_libs', self._lib_names)
1669:         info = self.check_libs(lib_dirs, blas_libs, [])
1670:         if info is None:
1671:             return
1672:         if platform.system() == 'Windows':
1673:             # The check for windows is needed because has_cblas uses the
1674:             # same compiler that was used to compile Python and msvc is
1675:             # often not installed when mingw is being used. This rough
1676:             # treatment is not desirable, but windows is tricky.
1677:             info['language'] = 'f77'  # XXX: is it generally true?
1678:         else:
1679:             lib = self.has_cblas(info)
1680:             if lib is not None:
1681:                 info['language'] = 'c'
1682:                 info['libraries'] = [lib]
1683:                 info['define_macros'] = [('HAVE_CBLAS', None)]
1684:         self.set_info(**info)
1685: 
1686:     def has_cblas(self, info):
1687:         # primitive cblas check by looking for the header and trying to link
1688:         # cblas or blas
1689:         res = False
1690:         c = distutils.ccompiler.new_compiler()
1691:         tmpdir = tempfile.mkdtemp()
1692:         s = '''#include <cblas.h>
1693:         int main(int argc, const char *argv[])
1694:         {
1695:             double a[4] = {1,2,3,4};
1696:             double b[4] = {5,6,7,8};
1697:             return cblas_ddot(4, a, 1, b, 1) > 10;
1698:         }'''
1699:         src = os.path.join(tmpdir, 'source.c')
1700:         try:
1701:             with open(src, 'wt') as f:
1702:                 f.write(s)
1703: 
1704:             try:
1705:                 # check we can compile (find headers)
1706:                 obj = c.compile([src], output_dir=tmpdir,
1707:                                 include_dirs=self.get_include_dirs())
1708: 
1709:                 # check we can link (find library)
1710:                 # some systems have separate cblas and blas libs. First
1711:                 # check for cblas lib, and if not present check for blas lib.
1712:                 try:
1713:                     c.link_executable(obj, os.path.join(tmpdir, "a.out"),
1714:                                       libraries=["cblas"],
1715:                                       library_dirs=info['library_dirs'],
1716:                                       extra_postargs=info.get('extra_link_args', []))
1717:                     res = "cblas"
1718:                 except distutils.ccompiler.LinkError:
1719:                     c.link_executable(obj, os.path.join(tmpdir, "a.out"),
1720:                                       libraries=["blas"],
1721:                                       library_dirs=info['library_dirs'],
1722:                                       extra_postargs=info.get('extra_link_args', []))
1723:                     res = "blas"
1724:             except distutils.ccompiler.CompileError:
1725:                 res = None
1726:         finally:
1727:             shutil.rmtree(tmpdir)
1728:         return res
1729: 
1730: 
1731: class openblas_info(blas_info):
1732:     section = 'openblas'
1733:     dir_env_var = 'OPENBLAS'
1734:     _lib_names = ['openblas']
1735:     notfounderror = BlasNotFoundError
1736: 
1737:     def check_embedded_lapack(self, info):
1738:         return True
1739: 
1740:     def calc_info(self):
1741:         lib_dirs = self.get_lib_dirs()
1742: 
1743:         openblas_libs = self.get_libs('libraries', self._lib_names)
1744:         if openblas_libs == self._lib_names: # backward compat with 1.8.0
1745:             openblas_libs = self.get_libs('openblas_libs', self._lib_names)
1746:         info = self.check_libs(lib_dirs, openblas_libs, [])
1747:         if info is None:
1748:             return
1749: 
1750:         # Add extra info for OpenBLAS
1751:         extra_info = self.calc_extra_info()
1752:         dict_append(info, **extra_info)
1753: 
1754:         if not self.check_embedded_lapack(info):
1755:             return
1756: 
1757:         info['language'] = 'c'
1758:         info['define_macros'] = [('HAVE_CBLAS', None)]
1759:         self.set_info(**info)
1760: 
1761: 
1762: class openblas_lapack_info(openblas_info):
1763:     section = 'openblas'
1764:     dir_env_var = 'OPENBLAS'
1765:     _lib_names = ['openblas']
1766:     notfounderror = BlasNotFoundError
1767: 
1768:     def check_embedded_lapack(self, info):
1769:         res = False
1770:         c = distutils.ccompiler.new_compiler()
1771:         tmpdir = tempfile.mkdtemp()
1772:         s = '''void zungqr();
1773:         int main(int argc, const char *argv[])
1774:         {
1775:             zungqr_();
1776:             return 0;
1777:         }'''
1778:         src = os.path.join(tmpdir, 'source.c')
1779:         out = os.path.join(tmpdir, 'a.out')
1780:         # Add the additional "extra" arguments
1781:         try:
1782:             extra_args = info['extra_link_args']
1783:         except:
1784:             extra_args = []
1785:         try:
1786:             with open(src, 'wt') as f:
1787:                 f.write(s)
1788:             obj = c.compile([src], output_dir=tmpdir)
1789:             try:
1790:                 c.link_executable(obj, out, libraries=info['libraries'],
1791:                                   library_dirs=info['library_dirs'],
1792:                                   extra_postargs=extra_args)
1793:                 res = True
1794:             except distutils.ccompiler.LinkError:
1795:                 res = False
1796:         finally:
1797:             shutil.rmtree(tmpdir)
1798:         return res
1799: 
1800: 
1801: class blas_src_info(system_info):
1802:     section = 'blas_src'
1803:     dir_env_var = 'BLAS_SRC'
1804:     notfounderror = BlasSrcNotFoundError
1805: 
1806:     def get_paths(self, section, key):
1807:         pre_dirs = system_info.get_paths(self, section, key)
1808:         dirs = []
1809:         for d in pre_dirs:
1810:             dirs.extend([d] + self.combine_paths(d, ['blas']))
1811:         return [d for d in dirs if os.path.isdir(d)]
1812: 
1813:     def calc_info(self):
1814:         src_dirs = self.get_src_dirs()
1815:         src_dir = ''
1816:         for d in src_dirs:
1817:             if os.path.isfile(os.path.join(d, 'daxpy.f')):
1818:                 src_dir = d
1819:                 break
1820:         if not src_dir:
1821:             #XXX: Get sources from netlib. May be ask first.
1822:             return
1823:         blas1 = '''
1824:         caxpy csscal dnrm2 dzasum saxpy srotg zdotc ccopy cswap drot
1825:         dznrm2 scasum srotm zdotu cdotc dasum drotg icamax scnrm2
1826:         srotmg zdrot cdotu daxpy drotm idamax scopy sscal zdscal crotg
1827:         dcabs1 drotmg isamax sdot sswap zrotg cscal dcopy dscal izamax
1828:         snrm2 zaxpy zscal csrot ddot dswap sasum srot zcopy zswap
1829:         scabs1
1830:         '''
1831:         blas2 = '''
1832:         cgbmv chpmv ctrsv dsymv dtrsv sspr2 strmv zhemv ztpmv cgemv
1833:         chpr dgbmv dsyr lsame ssymv strsv zher ztpsv cgerc chpr2 dgemv
1834:         dsyr2 sgbmv ssyr xerbla zher2 ztrmv cgeru ctbmv dger dtbmv
1835:         sgemv ssyr2 zgbmv zhpmv ztrsv chbmv ctbsv dsbmv dtbsv sger
1836:         stbmv zgemv zhpr chemv ctpmv dspmv dtpmv ssbmv stbsv zgerc
1837:         zhpr2 cher ctpsv dspr dtpsv sspmv stpmv zgeru ztbmv cher2
1838:         ctrmv dspr2 dtrmv sspr stpsv zhbmv ztbsv
1839:         '''
1840:         blas3 = '''
1841:         cgemm csymm ctrsm dsyrk sgemm strmm zhemm zsyr2k chemm csyr2k
1842:         dgemm dtrmm ssymm strsm zher2k zsyrk cher2k csyrk dsymm dtrsm
1843:         ssyr2k zherk ztrmm cherk ctrmm dsyr2k ssyrk zgemm zsymm ztrsm
1844:         '''
1845:         sources = [os.path.join(src_dir, f + '.f') \
1846:                    for f in (blas1 + blas2 + blas3).split()]
1847:         #XXX: should we check here actual existence of source files?
1848:         sources = [f for f in sources if os.path.isfile(f)]
1849:         info = {'sources': sources, 'language': 'f77'}
1850:         self.set_info(**info)
1851: 
1852: 
1853: class x11_info(system_info):
1854:     section = 'x11'
1855:     notfounderror = X11NotFoundError
1856: 
1857:     def __init__(self):
1858:         system_info.__init__(self,
1859:                              default_lib_dirs=default_x11_lib_dirs,
1860:                              default_include_dirs=default_x11_include_dirs)
1861: 
1862:     def calc_info(self):
1863:         if sys.platform  in ['win32']:
1864:             return
1865:         lib_dirs = self.get_lib_dirs()
1866:         include_dirs = self.get_include_dirs()
1867:         x11_libs = self.get_libs('x11_libs', ['X11'])
1868:         info = self.check_libs(lib_dirs, x11_libs, [])
1869:         if info is None:
1870:             return
1871:         inc_dir = None
1872:         for d in include_dirs:
1873:             if self.combine_paths(d, 'X11/X.h'):
1874:                 inc_dir = d
1875:                 break
1876:         if inc_dir is not None:
1877:             dict_append(info, include_dirs=[inc_dir])
1878:         self.set_info(**info)
1879: 
1880: 
1881: class _numpy_info(system_info):
1882:     section = 'Numeric'
1883:     modulename = 'Numeric'
1884:     notfounderror = NumericNotFoundError
1885: 
1886:     def __init__(self):
1887:         include_dirs = []
1888:         try:
1889:             module = __import__(self.modulename)
1890:             prefix = []
1891:             for name in module.__file__.split(os.sep):
1892:                 if name == 'lib':
1893:                     break
1894:                 prefix.append(name)
1895: 
1896:             # Ask numpy for its own include path before attempting
1897:             # anything else
1898:             try:
1899:                 include_dirs.append(getattr(module, 'get_include')())
1900:             except AttributeError:
1901:                 pass
1902: 
1903:             include_dirs.append(distutils.sysconfig.get_python_inc(
1904:                                         prefix=os.sep.join(prefix)))
1905:         except ImportError:
1906:             pass
1907:         py_incl_dir = distutils.sysconfig.get_python_inc()
1908:         include_dirs.append(py_incl_dir)
1909:         py_pincl_dir = distutils.sysconfig.get_python_inc(plat_specific=True)
1910:         if py_pincl_dir not in include_dirs:
1911:             include_dirs.append(py_pincl_dir)
1912:         for d in default_include_dirs:
1913:             d = os.path.join(d, os.path.basename(py_incl_dir))
1914:             if d not in include_dirs:
1915:                 include_dirs.append(d)
1916:         system_info.__init__(self,
1917:                              default_lib_dirs=[],
1918:                              default_include_dirs=include_dirs)
1919: 
1920:     def calc_info(self):
1921:         try:
1922:             module = __import__(self.modulename)
1923:         except ImportError:
1924:             return
1925:         info = {}
1926:         macros = []
1927:         for v in ['__version__', 'version']:
1928:             vrs = getattr(module, v, None)
1929:             if vrs is None:
1930:                 continue
1931:             macros = [(self.modulename.upper() + '_VERSION',
1932:                       '"\\"%s\\""' % (vrs)),
1933:                       (self.modulename.upper(), None)]
1934:             break
1935:         dict_append(info, define_macros=macros)
1936:         include_dirs = self.get_include_dirs()
1937:         inc_dir = None
1938:         for d in include_dirs:
1939:             if self.combine_paths(d,
1940:                                   os.path.join(self.modulename,
1941:                                                'arrayobject.h')):
1942:                 inc_dir = d
1943:                 break
1944:         if inc_dir is not None:
1945:             dict_append(info, include_dirs=[inc_dir])
1946:         if info:
1947:             self.set_info(**info)
1948:         return
1949: 
1950: 
1951: class numarray_info(_numpy_info):
1952:     section = 'numarray'
1953:     modulename = 'numarray'
1954: 
1955: 
1956: class Numeric_info(_numpy_info):
1957:     section = 'Numeric'
1958:     modulename = 'Numeric'
1959: 
1960: 
1961: class numpy_info(_numpy_info):
1962:     section = 'numpy'
1963:     modulename = 'numpy'
1964: 
1965: 
1966: class numerix_info(system_info):
1967:     section = 'numerix'
1968: 
1969:     def calc_info(self):
1970:         which = None, None
1971:         if os.getenv("NUMERIX"):
1972:             which = os.getenv("NUMERIX"), "environment var"
1973:         # If all the above fail, default to numpy.
1974:         if which[0] is None:
1975:             which = "numpy", "defaulted"
1976:             try:
1977:                 import numpy
1978:                 which = "numpy", "defaulted"
1979:             except ImportError:
1980:                 msg1 = str(get_exception())
1981:                 try:
1982:                     import Numeric
1983:                     which = "numeric", "defaulted"
1984:                 except ImportError:
1985:                     msg2 = str(get_exception())
1986:                     try:
1987:                         import numarray
1988:                         which = "numarray", "defaulted"
1989:                     except ImportError:
1990:                         msg3 = str(get_exception())
1991:                         log.info(msg1)
1992:                         log.info(msg2)
1993:                         log.info(msg3)
1994:         which = which[0].strip().lower(), which[1]
1995:         if which[0] not in ["numeric", "numarray", "numpy"]:
1996:             raise ValueError("numerix selector must be either 'Numeric' "
1997:                              "or 'numarray' or 'numpy' but the value obtained"
1998:                              " from the %s was '%s'." % (which[1], which[0]))
1999:         os.environ['NUMERIX'] = which[0]
2000:         self.set_info(**get_info(which[0]))
2001: 
2002: 
2003: class f2py_info(system_info):
2004:     def calc_info(self):
2005:         try:
2006:             import numpy.f2py as f2py
2007:         except ImportError:
2008:             return
2009:         f2py_dir = os.path.join(os.path.dirname(f2py.__file__), 'src')
2010:         self.set_info(sources=[os.path.join(f2py_dir, 'fortranobject.c')],
2011:                       include_dirs=[f2py_dir])
2012:         return
2013: 
2014: 
2015: class boost_python_info(system_info):
2016:     section = 'boost_python'
2017:     dir_env_var = 'BOOST'
2018: 
2019:     def get_paths(self, section, key):
2020:         pre_dirs = system_info.get_paths(self, section, key)
2021:         dirs = []
2022:         for d in pre_dirs:
2023:             dirs.extend([d] + self.combine_paths(d, ['boost*']))
2024:         return [d for d in dirs if os.path.isdir(d)]
2025: 
2026:     def calc_info(self):
2027:         src_dirs = self.get_src_dirs()
2028:         src_dir = ''
2029:         for d in src_dirs:
2030:             if os.path.isfile(os.path.join(d, 'libs', 'python', 'src',
2031:                                            'module.cpp')):
2032:                 src_dir = d
2033:                 break
2034:         if not src_dir:
2035:             return
2036:         py_incl_dirs = [distutils.sysconfig.get_python_inc()]
2037:         py_pincl_dir = distutils.sysconfig.get_python_inc(plat_specific=True)
2038:         if py_pincl_dir not in py_incl_dirs:
2039:             py_incl_dirs.append(py_pincl_dir)
2040:         srcs_dir = os.path.join(src_dir, 'libs', 'python', 'src')
2041:         bpl_srcs = glob(os.path.join(srcs_dir, '*.cpp'))
2042:         bpl_srcs += glob(os.path.join(srcs_dir, '*', '*.cpp'))
2043:         info = {'libraries': [('boost_python_src',
2044:                                {'include_dirs': [src_dir] + py_incl_dirs,
2045:                                 'sources':bpl_srcs}
2046:                               )],
2047:                 'include_dirs': [src_dir],
2048:                 }
2049:         if info:
2050:             self.set_info(**info)
2051:         return
2052: 
2053: 
2054: class agg2_info(system_info):
2055:     section = 'agg2'
2056:     dir_env_var = 'AGG2'
2057: 
2058:     def get_paths(self, section, key):
2059:         pre_dirs = system_info.get_paths(self, section, key)
2060:         dirs = []
2061:         for d in pre_dirs:
2062:             dirs.extend([d] + self.combine_paths(d, ['agg2*']))
2063:         return [d for d in dirs if os.path.isdir(d)]
2064: 
2065:     def calc_info(self):
2066:         src_dirs = self.get_src_dirs()
2067:         src_dir = ''
2068:         for d in src_dirs:
2069:             if os.path.isfile(os.path.join(d, 'src', 'agg_affine_matrix.cpp')):
2070:                 src_dir = d
2071:                 break
2072:         if not src_dir:
2073:             return
2074:         if sys.platform == 'win32':
2075:             agg2_srcs = glob(os.path.join(src_dir, 'src', 'platform',
2076:                                           'win32', 'agg_win32_bmp.cpp'))
2077:         else:
2078:             agg2_srcs = glob(os.path.join(src_dir, 'src', '*.cpp'))
2079:             agg2_srcs += [os.path.join(src_dir, 'src', 'platform',
2080:                                        'X11',
2081:                                        'agg_platform_support.cpp')]
2082: 
2083:         info = {'libraries':
2084:                 [('agg2_src',
2085:                   {'sources': agg2_srcs,
2086:                    'include_dirs': [os.path.join(src_dir, 'include')],
2087:                   }
2088:                  )],
2089:                 'include_dirs': [os.path.join(src_dir, 'include')],
2090:                 }
2091:         if info:
2092:             self.set_info(**info)
2093:         return
2094: 
2095: 
2096: class _pkg_config_info(system_info):
2097:     section = None
2098:     config_env_var = 'PKG_CONFIG'
2099:     default_config_exe = 'pkg-config'
2100:     append_config_exe = ''
2101:     version_macro_name = None
2102:     release_macro_name = None
2103:     version_flag = '--modversion'
2104:     cflags_flag = '--cflags'
2105: 
2106:     def get_config_exe(self):
2107:         if self.config_env_var in os.environ:
2108:             return os.environ[self.config_env_var]
2109:         return self.default_config_exe
2110: 
2111:     def get_config_output(self, config_exe, option):
2112:         cmd = config_exe + ' ' + self.append_config_exe + ' ' + option
2113:         s, o = exec_command(cmd, use_tee=0)
2114:         if not s:
2115:             return o
2116: 
2117:     def calc_info(self):
2118:         config_exe = find_executable(self.get_config_exe())
2119:         if not config_exe:
2120:             log.warn('File not found: %s. Cannot determine %s info.' \
2121:                   % (config_exe, self.section))
2122:             return
2123:         info = {}
2124:         macros = []
2125:         libraries = []
2126:         library_dirs = []
2127:         include_dirs = []
2128:         extra_link_args = []
2129:         extra_compile_args = []
2130:         version = self.get_config_output(config_exe, self.version_flag)
2131:         if version:
2132:             macros.append((self.__class__.__name__.split('.')[-1].upper(),
2133:                            '"\\"%s\\""' % (version)))
2134:             if self.version_macro_name:
2135:                 macros.append((self.version_macro_name + '_%s'
2136:                                % (version.replace('.', '_')), None))
2137:         if self.release_macro_name:
2138:             release = self.get_config_output(config_exe, '--release')
2139:             if release:
2140:                 macros.append((self.release_macro_name + '_%s'
2141:                                % (release.replace('.', '_')), None))
2142:         opts = self.get_config_output(config_exe, '--libs')
2143:         if opts:
2144:             for opt in opts.split():
2145:                 if opt[:2] == '-l':
2146:                     libraries.append(opt[2:])
2147:                 elif opt[:2] == '-L':
2148:                     library_dirs.append(opt[2:])
2149:                 else:
2150:                     extra_link_args.append(opt)
2151:         opts = self.get_config_output(config_exe, self.cflags_flag)
2152:         if opts:
2153:             for opt in opts.split():
2154:                 if opt[:2] == '-I':
2155:                     include_dirs.append(opt[2:])
2156:                 elif opt[:2] == '-D':
2157:                     if '=' in opt:
2158:                         n, v = opt[2:].split('=')
2159:                         macros.append((n, v))
2160:                     else:
2161:                         macros.append((opt[2:], None))
2162:                 else:
2163:                     extra_compile_args.append(opt)
2164:         if macros:
2165:             dict_append(info, define_macros=macros)
2166:         if libraries:
2167:             dict_append(info, libraries=libraries)
2168:         if library_dirs:
2169:             dict_append(info, library_dirs=library_dirs)
2170:         if include_dirs:
2171:             dict_append(info, include_dirs=include_dirs)
2172:         if extra_link_args:
2173:             dict_append(info, extra_link_args=extra_link_args)
2174:         if extra_compile_args:
2175:             dict_append(info, extra_compile_args=extra_compile_args)
2176:         if info:
2177:             self.set_info(**info)
2178:         return
2179: 
2180: 
2181: class wx_info(_pkg_config_info):
2182:     section = 'wx'
2183:     config_env_var = 'WX_CONFIG'
2184:     default_config_exe = 'wx-config'
2185:     append_config_exe = ''
2186:     version_macro_name = 'WX_VERSION'
2187:     release_macro_name = 'WX_RELEASE'
2188:     version_flag = '--version'
2189:     cflags_flag = '--cxxflags'
2190: 
2191: 
2192: class gdk_pixbuf_xlib_2_info(_pkg_config_info):
2193:     section = 'gdk_pixbuf_xlib_2'
2194:     append_config_exe = 'gdk-pixbuf-xlib-2.0'
2195:     version_macro_name = 'GDK_PIXBUF_XLIB_VERSION'
2196: 
2197: 
2198: class gdk_pixbuf_2_info(_pkg_config_info):
2199:     section = 'gdk_pixbuf_2'
2200:     append_config_exe = 'gdk-pixbuf-2.0'
2201:     version_macro_name = 'GDK_PIXBUF_VERSION'
2202: 
2203: 
2204: class gdk_x11_2_info(_pkg_config_info):
2205:     section = 'gdk_x11_2'
2206:     append_config_exe = 'gdk-x11-2.0'
2207:     version_macro_name = 'GDK_X11_VERSION'
2208: 
2209: 
2210: class gdk_2_info(_pkg_config_info):
2211:     section = 'gdk_2'
2212:     append_config_exe = 'gdk-2.0'
2213:     version_macro_name = 'GDK_VERSION'
2214: 
2215: 
2216: class gdk_info(_pkg_config_info):
2217:     section = 'gdk'
2218:     append_config_exe = 'gdk'
2219:     version_macro_name = 'GDK_VERSION'
2220: 
2221: 
2222: class gtkp_x11_2_info(_pkg_config_info):
2223:     section = 'gtkp_x11_2'
2224:     append_config_exe = 'gtk+-x11-2.0'
2225:     version_macro_name = 'GTK_X11_VERSION'
2226: 
2227: 
2228: class gtkp_2_info(_pkg_config_info):
2229:     section = 'gtkp_2'
2230:     append_config_exe = 'gtk+-2.0'
2231:     version_macro_name = 'GTK_VERSION'
2232: 
2233: 
2234: class xft_info(_pkg_config_info):
2235:     section = 'xft'
2236:     append_config_exe = 'xft'
2237:     version_macro_name = 'XFT_VERSION'
2238: 
2239: 
2240: class freetype2_info(_pkg_config_info):
2241:     section = 'freetype2'
2242:     append_config_exe = 'freetype2'
2243:     version_macro_name = 'FREETYPE2_VERSION'
2244: 
2245: 
2246: class amd_info(system_info):
2247:     section = 'amd'
2248:     dir_env_var = 'AMD'
2249:     _lib_names = ['amd']
2250: 
2251:     def calc_info(self):
2252:         lib_dirs = self.get_lib_dirs()
2253: 
2254:         amd_libs = self.get_libs('amd_libs', self._lib_names)
2255:         info = self.check_libs(lib_dirs, amd_libs, [])
2256:         if info is None:
2257:             return
2258: 
2259:         include_dirs = self.get_include_dirs()
2260: 
2261:         inc_dir = None
2262:         for d in include_dirs:
2263:             p = self.combine_paths(d, 'amd.h')
2264:             if p:
2265:                 inc_dir = os.path.dirname(p[0])
2266:                 break
2267:         if inc_dir is not None:
2268:             dict_append(info, include_dirs=[inc_dir],
2269:                         define_macros=[('SCIPY_AMD_H', None)],
2270:                         swig_opts=['-I' + inc_dir])
2271: 
2272:         self.set_info(**info)
2273:         return
2274: 
2275: 
2276: class umfpack_info(system_info):
2277:     section = 'umfpack'
2278:     dir_env_var = 'UMFPACK'
2279:     notfounderror = UmfpackNotFoundError
2280:     _lib_names = ['umfpack']
2281: 
2282:     def calc_info(self):
2283:         lib_dirs = self.get_lib_dirs()
2284: 
2285:         umfpack_libs = self.get_libs('umfpack_libs', self._lib_names)
2286:         info = self.check_libs(lib_dirs, umfpack_libs, [])
2287:         if info is None:
2288:             return
2289: 
2290:         include_dirs = self.get_include_dirs()
2291: 
2292:         inc_dir = None
2293:         for d in include_dirs:
2294:             p = self.combine_paths(d, ['', 'umfpack'], 'umfpack.h')
2295:             if p:
2296:                 inc_dir = os.path.dirname(p[0])
2297:                 break
2298:         if inc_dir is not None:
2299:             dict_append(info, include_dirs=[inc_dir],
2300:                         define_macros=[('SCIPY_UMFPACK_H', None)],
2301:                         swig_opts=['-I' + inc_dir])
2302: 
2303:         amd = get_info('amd')
2304:         dict_append(info, **get_info('amd'))
2305: 
2306:         self.set_info(**info)
2307:         return
2308: 
2309: 
2310: def combine_paths(*args, **kws):
2311:     ''' Return a list of existing paths composed by all combinations of
2312:         items from arguments.
2313:     '''
2314:     r = []
2315:     for a in args:
2316:         if not a:
2317:             continue
2318:         if is_string(a):
2319:             a = [a]
2320:         r.append(a)
2321:     args = r
2322:     if not args:
2323:         return []
2324:     if len(args) == 1:
2325:         result = reduce(lambda a, b: a + b, map(glob, args[0]), [])
2326:     elif len(args) == 2:
2327:         result = []
2328:         for a0 in args[0]:
2329:             for a1 in args[1]:
2330:                 result.extend(glob(os.path.join(a0, a1)))
2331:     else:
2332:         result = combine_paths(*(combine_paths(args[0], args[1]) + args[2:]))
2333:     verbosity = kws.get('verbosity', 1)
2334:     log.debug('(paths: %s)', ','.join(result))
2335:     return result
2336: 
2337: language_map = {'c': 0, 'c++': 1, 'f77': 2, 'f90': 3}
2338: inv_language_map = {0: 'c', 1: 'c++', 2: 'f77', 3: 'f90'}
2339: 
2340: 
2341: def dict_append(d, **kws):
2342:     languages = []
2343:     for k, v in kws.items():
2344:         if k == 'language':
2345:             languages.append(v)
2346:             continue
2347:         if k in d:
2348:             if k in ['library_dirs', 'include_dirs', 
2349:                      'extra_compile_args', 'extra_link_args',
2350:                      'runtime_library_dirs', 'define_macros']:
2351:                 [d[k].append(vv) for vv in v if vv not in d[k]]
2352:             else:
2353:                 d[k].extend(v)
2354:         else:
2355:             d[k] = v
2356:     if languages:
2357:         l = inv_language_map[max([language_map.get(l, 0) for l in languages])]
2358:         d['language'] = l
2359:     return
2360: 
2361: 
2362: def parseCmdLine(argv=(None,)):
2363:     import optparse
2364:     parser = optparse.OptionParser("usage: %prog [-v] [info objs]")
2365:     parser.add_option('-v', '--verbose', action='store_true', dest='verbose',
2366:                       default=False,
2367:                       help='be verbose and print more messages')
2368: 
2369:     opts, args = parser.parse_args(args=argv[1:])
2370:     return opts, args
2371: 
2372: 
2373: def show_all(argv=None):
2374:     import inspect
2375:     if argv is None:
2376:         argv = sys.argv
2377:     opts, args = parseCmdLine(argv)
2378:     if opts.verbose:
2379:         log.set_threshold(log.DEBUG)
2380:     else:
2381:         log.set_threshold(log.INFO)
2382:     show_only = []
2383:     for n in args:
2384:         if n[-5:] != '_info':
2385:             n = n + '_info'
2386:         show_only.append(n)
2387:     show_all = not show_only
2388:     _gdict_ = globals().copy()
2389:     for name, c in _gdict_.items():
2390:         if not inspect.isclass(c):
2391:             continue
2392:         if not issubclass(c, system_info) or c is system_info:
2393:             continue
2394:         if not show_all:
2395:             if name not in show_only:
2396:                 continue
2397:             del show_only[show_only.index(name)]
2398:         conf = c()
2399:         conf.verbosity = 2
2400:         r = conf.get_info()
2401:     if show_only:
2402:         log.info('Info classes not defined: %s', ','.join(show_only))
2403: 
2404: if __name__ == "__main__":
2405:     show_all()
2406: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

str_45363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 120, (-1)), 'str', "\nThis file defines a set of system_info classes for getting\ninformation about various resources (libraries, library directories,\ninclude directories, etc.) in the system. Currently, the following\nclasses are available:\n\n  atlas_info\n  atlas_threads_info\n  atlas_blas_info\n  atlas_blas_threads_info\n  lapack_atlas_info\n  lapack_atlas_threads_info\n  atlas_3_10_info\n  atlas_3_10_threads_info\n  atlas_3_10_blas_info,\n  atlas_3_10_blas_threads_info,\n  lapack_atlas_3_10_info\n  lapack_atlas_3_10_threads_info\n  blas_info\n  lapack_info\n  openblas_info\n  blas_opt_info       # usage recommended\n  lapack_opt_info     # usage recommended\n  fftw_info,dfftw_info,sfftw_info\n  fftw_threads_info,dfftw_threads_info,sfftw_threads_info\n  djbfft_info\n  x11_info\n  lapack_src_info\n  blas_src_info\n  numpy_info\n  numarray_info\n  numpy_info\n  boost_python_info\n  agg2_info\n  wx_info\n  gdk_pixbuf_xlib_2_info\n  gdk_pixbuf_2_info\n  gdk_x11_2_info\n  gtkp_x11_2_info\n  gtkp_2_info\n  xft_info\n  freetype2_info\n  umfpack_info\n\nUsage:\n    info_dict = get_info(<name>)\n  where <name> is a string 'atlas','x11','fftw','lapack','blas',\n  'lapack_src', 'blas_src', etc. For a complete list of allowed names,\n  see the definition of get_info() function below.\n\n  Returned info_dict is a dictionary which is compatible with\n  distutils.setup keyword arguments. If info_dict == {}, then the\n  asked resource is not available (system_info could not find it).\n\n  Several *_info classes specify an environment variable to specify\n  the locations of software. When setting the corresponding environment\n  variable to 'None' then the software will be ignored, even when it\n  is available in system.\n\nGlobal parameters:\n  system_info.search_static_first - search static libraries (.a)\n             in precedence to shared ones (.so, .sl) if enabled.\n  system_info.verbosity - output the results to stdout if enabled.\n\nThe file 'site.cfg' is looked for in\n\n1) Directory of main setup.py file being run.\n2) Home directory of user running the setup.py file as ~/.numpy-site.cfg\n3) System wide directory (location of this file...)\n\nThe first one found is used to get system configuration options The\nformat is that used by ConfigParser (i.e., Windows .INI style). The\nsection ALL has options that are the default for each section. The\navailable sections are fftw, atlas, and x11. Appropiate defaults are\nused if nothing is specified.\n\nThe order of finding the locations of resources is the following:\n 1. environment variable\n 2. section in site.cfg\n 3. ALL section in site.cfg\nOnly the first complete match is returned.\n\nExample:\n----------\n[ALL]\nlibrary_dirs = /usr/lib:/usr/local/lib:/opt/lib\ninclude_dirs = /usr/include:/usr/local/include:/opt/include\nsrc_dirs = /usr/local/src:/opt/src\n# search static libraries (.a) in preference to shared ones (.so)\nsearch_static_first = 0\n\n[fftw]\nfftw_libs = rfftw, fftw\nfftw_opt_libs = rfftw_threaded, fftw_threaded\n# if the above aren't found, look for {s,d}fftw_libs and {s,d}fftw_opt_libs\n\n[atlas]\nlibrary_dirs = /usr/lib/3dnow:/usr/lib/3dnow/atlas\n# for overriding the names of the atlas libraries\natlas_libs = lapack, f77blas, cblas, atlas\n\n[x11]\nlibrary_dirs = /usr/X11R6/lib\ninclude_dirs = /usr/X11R6/include\n----------\n\nAuthors:\n  Pearu Peterson <pearu@cens.ioc.ee>, February 2002\n  David M. Cooke <cookedm@physics.mcmaster.ca>, April 2002\n\nCopyright 2002 Pearu Peterson all rights reserved,\nPearu Peterson <pearu@cens.ioc.ee>\nPermission to use, modify, and distribute this software is given under the\nterms of the NumPy (BSD style) license.  See LICENSE.txt that came with\nthis distribution for specifics.\n\nNO WARRANTY IS EXPRESSED OR IMPLIED.  USE AT YOUR OWN RISK.\n\n")
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 123, 0))

# 'import sys' statement (line 123)
import sys

import_module(stypy.reporting.localization.Localization(__file__, 123, 0), 'sys', sys, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 124, 0))

# 'import os' statement (line 124)
import os

import_module(stypy.reporting.localization.Localization(__file__, 124, 0), 'os', os, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 125, 0))

# 'import re' statement (line 125)
import re

import_module(stypy.reporting.localization.Localization(__file__, 125, 0), 're', re, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 126, 0))

# 'import copy' statement (line 126)
import copy

import_module(stypy.reporting.localization.Localization(__file__, 126, 0), 'copy', copy, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 127, 0))

# 'import warnings' statement (line 127)
import warnings

import_module(stypy.reporting.localization.Localization(__file__, 127, 0), 'warnings', warnings, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 128, 0))

# 'from glob import glob' statement (line 128)
from glob import glob

import_from_module(stypy.reporting.localization.Localization(__file__, 128, 0), 'glob', None, module_type_store, ['glob'], [glob])

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 129, 0))

# 'from functools import reduce' statement (line 129)
from functools import reduce

import_from_module(stypy.reporting.localization.Localization(__file__, 129, 0), 'functools', None, module_type_store, ['reduce'], [reduce])




# Obtaining the type of the subscript
int_45364 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 130, 20), 'int')
# Getting the type of 'sys' (line 130)
sys_45365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 3), 'sys')
# Obtaining the member 'version_info' of a type (line 130)
version_info_45366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 130, 3), sys_45365, 'version_info')
# Obtaining the member '__getitem__' of a type (line 130)
getitem___45367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 130, 3), version_info_45366, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 130)
subscript_call_result_45368 = invoke(stypy.reporting.localization.Localization(__file__, 130, 3), getitem___45367, int_45364)

int_45369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 130, 25), 'int')
# Applying the binary operator '<' (line 130)
result_lt_45370 = python_operator(stypy.reporting.localization.Localization(__file__, 130, 3), '<', subscript_call_result_45368, int_45369)

# Testing the type of an if condition (line 130)
if_condition_45371 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 130, 0), result_lt_45370)
# Assigning a type to the variable 'if_condition_45371' (line 130)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 130, 0), 'if_condition_45371', if_condition_45371)
# SSA begins for if statement (line 130)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 131, 4))

# 'from ConfigParser import NoOptionError, ConfigParser' statement (line 131)
from ConfigParser import NoOptionError, ConfigParser

import_from_module(stypy.reporting.localization.Localization(__file__, 131, 4), 'ConfigParser', None, module_type_store, ['NoOptionError', 'ConfigParser'], [NoOptionError, ConfigParser])

# SSA branch for the else part of an if statement (line 130)
module_type_store.open_ssa_branch('else')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 133, 4))

# 'from configparser import NoOptionError, ConfigParser' statement (line 133)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/distutils/')
import_45372 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 133, 4), 'configparser')

if (type(import_45372) is not StypyTypeError):

    if (import_45372 != 'pyd_module'):
        __import__(import_45372)
        sys_modules_45373 = sys.modules[import_45372]
        import_from_module(stypy.reporting.localization.Localization(__file__, 133, 4), 'configparser', sys_modules_45373.module_type_store, module_type_store, ['NoOptionError', 'ConfigParser'])
        nest_module(stypy.reporting.localization.Localization(__file__, 133, 4), __file__, sys_modules_45373, sys_modules_45373.module_type_store, module_type_store)
    else:
        from configparser import NoOptionError, ConfigParser

        import_from_module(stypy.reporting.localization.Localization(__file__, 133, 4), 'configparser', None, module_type_store, ['NoOptionError', 'ConfigParser'], [NoOptionError, ConfigParser])

else:
    # Assigning a type to the variable 'configparser' (line 133)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 133, 4), 'configparser', import_45372)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/distutils/')

# SSA join for if statement (line 130)
module_type_store = module_type_store.join_ssa_context()

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 135, 0))

# 'from distutils.errors import DistutilsError' statement (line 135)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/distutils/')
import_45374 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 135, 0), 'distutils.errors')

if (type(import_45374) is not StypyTypeError):

    if (import_45374 != 'pyd_module'):
        __import__(import_45374)
        sys_modules_45375 = sys.modules[import_45374]
        import_from_module(stypy.reporting.localization.Localization(__file__, 135, 0), 'distutils.errors', sys_modules_45375.module_type_store, module_type_store, ['DistutilsError'])
        nest_module(stypy.reporting.localization.Localization(__file__, 135, 0), __file__, sys_modules_45375, sys_modules_45375.module_type_store, module_type_store)
    else:
        from distutils.errors import DistutilsError

        import_from_module(stypy.reporting.localization.Localization(__file__, 135, 0), 'distutils.errors', None, module_type_store, ['DistutilsError'], [DistutilsError])

else:
    # Assigning a type to the variable 'distutils.errors' (line 135)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 135, 0), 'distutils.errors', import_45374)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/distutils/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 136, 0))

# 'from distutils.dist import Distribution' statement (line 136)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/distutils/')
import_45376 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 136, 0), 'distutils.dist')

if (type(import_45376) is not StypyTypeError):

    if (import_45376 != 'pyd_module'):
        __import__(import_45376)
        sys_modules_45377 = sys.modules[import_45376]
        import_from_module(stypy.reporting.localization.Localization(__file__, 136, 0), 'distutils.dist', sys_modules_45377.module_type_store, module_type_store, ['Distribution'])
        nest_module(stypy.reporting.localization.Localization(__file__, 136, 0), __file__, sys_modules_45377, sys_modules_45377.module_type_store, module_type_store)
    else:
        from distutils.dist import Distribution

        import_from_module(stypy.reporting.localization.Localization(__file__, 136, 0), 'distutils.dist', None, module_type_store, ['Distribution'], [Distribution])

else:
    # Assigning a type to the variable 'distutils.dist' (line 136)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 136, 0), 'distutils.dist', import_45376)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/distutils/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 137, 0))

# 'import distutils.sysconfig' statement (line 137)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/distutils/')
import_45378 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 137, 0), 'distutils.sysconfig')

if (type(import_45378) is not StypyTypeError):

    if (import_45378 != 'pyd_module'):
        __import__(import_45378)
        sys_modules_45379 = sys.modules[import_45378]
        import_module(stypy.reporting.localization.Localization(__file__, 137, 0), 'distutils.sysconfig', sys_modules_45379.module_type_store, module_type_store)
    else:
        import distutils.sysconfig

        import_module(stypy.reporting.localization.Localization(__file__, 137, 0), 'distutils.sysconfig', distutils.sysconfig, module_type_store)

else:
    # Assigning a type to the variable 'distutils.sysconfig' (line 137)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 137, 0), 'distutils.sysconfig', import_45378)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/distutils/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 138, 0))

# 'from distutils import log' statement (line 138)
from distutils import log

import_from_module(stypy.reporting.localization.Localization(__file__, 138, 0), 'distutils', None, module_type_store, ['log'], [log])

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 139, 0))

# 'from distutils.util import get_platform' statement (line 139)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/distutils/')
import_45380 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 139, 0), 'distutils.util')

if (type(import_45380) is not StypyTypeError):

    if (import_45380 != 'pyd_module'):
        __import__(import_45380)
        sys_modules_45381 = sys.modules[import_45380]
        import_from_module(stypy.reporting.localization.Localization(__file__, 139, 0), 'distutils.util', sys_modules_45381.module_type_store, module_type_store, ['get_platform'])
        nest_module(stypy.reporting.localization.Localization(__file__, 139, 0), __file__, sys_modules_45381, sys_modules_45381.module_type_store, module_type_store)
    else:
        from distutils.util import get_platform

        import_from_module(stypy.reporting.localization.Localization(__file__, 139, 0), 'distutils.util', None, module_type_store, ['get_platform'], [get_platform])

else:
    # Assigning a type to the variable 'distutils.util' (line 139)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 139, 0), 'distutils.util', import_45380)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/distutils/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 141, 0))

# 'from numpy.distutils.exec_command import find_executable, exec_command, get_pythonexe' statement (line 141)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/distutils/')
import_45382 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 141, 0), 'numpy.distutils.exec_command')

if (type(import_45382) is not StypyTypeError):

    if (import_45382 != 'pyd_module'):
        __import__(import_45382)
        sys_modules_45383 = sys.modules[import_45382]
        import_from_module(stypy.reporting.localization.Localization(__file__, 141, 0), 'numpy.distutils.exec_command', sys_modules_45383.module_type_store, module_type_store, ['find_executable', 'exec_command', 'get_pythonexe'])
        nest_module(stypy.reporting.localization.Localization(__file__, 141, 0), __file__, sys_modules_45383, sys_modules_45383.module_type_store, module_type_store)
    else:
        from numpy.distutils.exec_command import find_executable, exec_command, get_pythonexe

        import_from_module(stypy.reporting.localization.Localization(__file__, 141, 0), 'numpy.distutils.exec_command', None, module_type_store, ['find_executable', 'exec_command', 'get_pythonexe'], [find_executable, exec_command, get_pythonexe])

else:
    # Assigning a type to the variable 'numpy.distutils.exec_command' (line 141)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 141, 0), 'numpy.distutils.exec_command', import_45382)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/distutils/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 143, 0))

# 'from numpy.distutils.misc_util import is_sequence, is_string, get_shared_lib_extension' statement (line 143)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/distutils/')
import_45384 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 143, 0), 'numpy.distutils.misc_util')

if (type(import_45384) is not StypyTypeError):

    if (import_45384 != 'pyd_module'):
        __import__(import_45384)
        sys_modules_45385 = sys.modules[import_45384]
        import_from_module(stypy.reporting.localization.Localization(__file__, 143, 0), 'numpy.distutils.misc_util', sys_modules_45385.module_type_store, module_type_store, ['is_sequence', 'is_string', 'get_shared_lib_extension'])
        nest_module(stypy.reporting.localization.Localization(__file__, 143, 0), __file__, sys_modules_45385, sys_modules_45385.module_type_store, module_type_store)
    else:
        from numpy.distutils.misc_util import is_sequence, is_string, get_shared_lib_extension

        import_from_module(stypy.reporting.localization.Localization(__file__, 143, 0), 'numpy.distutils.misc_util', None, module_type_store, ['is_sequence', 'is_string', 'get_shared_lib_extension'], [is_sequence, is_string, get_shared_lib_extension])

else:
    # Assigning a type to the variable 'numpy.distutils.misc_util' (line 143)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 143, 0), 'numpy.distutils.misc_util', import_45384)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/distutils/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 145, 0))

# 'from numpy.distutils.command.config import cmd_config' statement (line 145)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/distutils/')
import_45386 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 145, 0), 'numpy.distutils.command.config')

if (type(import_45386) is not StypyTypeError):

    if (import_45386 != 'pyd_module'):
        __import__(import_45386)
        sys_modules_45387 = sys.modules[import_45386]
        import_from_module(stypy.reporting.localization.Localization(__file__, 145, 0), 'numpy.distutils.command.config', sys_modules_45387.module_type_store, module_type_store, ['config'])
        nest_module(stypy.reporting.localization.Localization(__file__, 145, 0), __file__, sys_modules_45387, sys_modules_45387.module_type_store, module_type_store)
    else:
        from numpy.distutils.command.config import config as cmd_config

        import_from_module(stypy.reporting.localization.Localization(__file__, 145, 0), 'numpy.distutils.command.config', None, module_type_store, ['config'], [cmd_config])

else:
    # Assigning a type to the variable 'numpy.distutils.command.config' (line 145)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 145, 0), 'numpy.distutils.command.config', import_45386)

# Adding an alias
module_type_store.add_alias('cmd_config', 'config')
remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/distutils/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 146, 0))

# 'from numpy.distutils.compat import get_exception' statement (line 146)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/distutils/')
import_45388 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 146, 0), 'numpy.distutils.compat')

if (type(import_45388) is not StypyTypeError):

    if (import_45388 != 'pyd_module'):
        __import__(import_45388)
        sys_modules_45389 = sys.modules[import_45388]
        import_from_module(stypy.reporting.localization.Localization(__file__, 146, 0), 'numpy.distutils.compat', sys_modules_45389.module_type_store, module_type_store, ['get_exception'])
        nest_module(stypy.reporting.localization.Localization(__file__, 146, 0), __file__, sys_modules_45389, sys_modules_45389.module_type_store, module_type_store)
    else:
        from numpy.distutils.compat import get_exception

        import_from_module(stypy.reporting.localization.Localization(__file__, 146, 0), 'numpy.distutils.compat', None, module_type_store, ['get_exception'], [get_exception])

else:
    # Assigning a type to the variable 'numpy.distutils.compat' (line 146)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 146, 0), 'numpy.distutils.compat', import_45388)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/distutils/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 147, 0))

# 'import distutils.ccompiler' statement (line 147)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/distutils/')
import_45390 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 147, 0), 'distutils.ccompiler')

if (type(import_45390) is not StypyTypeError):

    if (import_45390 != 'pyd_module'):
        __import__(import_45390)
        sys_modules_45391 = sys.modules[import_45390]
        import_module(stypy.reporting.localization.Localization(__file__, 147, 0), 'distutils.ccompiler', sys_modules_45391.module_type_store, module_type_store)
    else:
        import distutils.ccompiler

        import_module(stypy.reporting.localization.Localization(__file__, 147, 0), 'distutils.ccompiler', distutils.ccompiler, module_type_store)

else:
    # Assigning a type to the variable 'distutils.ccompiler' (line 147)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 147, 0), 'distutils.ccompiler', import_45390)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/distutils/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 148, 0))

# 'import tempfile' statement (line 148)
import tempfile

import_module(stypy.reporting.localization.Localization(__file__, 148, 0), 'tempfile', tempfile, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 149, 0))

# 'import shutil' statement (line 149)
import shutil

import_module(stypy.reporting.localization.Localization(__file__, 149, 0), 'shutil', shutil, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 153, 0))

# 'import platform' statement (line 153)
import platform

import_module(stypy.reporting.localization.Localization(__file__, 153, 0), 'platform', platform, module_type_store)


# Assigning a Dict to a Name (line 154):

# Assigning a Dict to a Name (line 154):

# Obtaining an instance of the builtin type 'dict' (line 154)
dict_45392 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 154, 8), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 154)
# Adding element type (key, value) (line 154)
str_45393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 154, 9), 'str', '32bit')
int_45394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 154, 18), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 154, 8), dict_45392, (str_45393, int_45394))
# Adding element type (key, value) (line 154)
str_45395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 154, 22), 'str', '64bit')
int_45396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 154, 31), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 154, 8), dict_45392, (str_45395, int_45396))

# Assigning a type to the variable '_bits' (line 154)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 154, 0), '_bits', dict_45392)

# Assigning a Subscript to a Name (line 155):

# Assigning a Subscript to a Name (line 155):

# Obtaining the type of the subscript

# Obtaining the type of the subscript
int_45397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 155, 46), 'int')

# Call to architecture(...): (line 155)
# Processing the call keyword arguments (line 155)
kwargs_45400 = {}
# Getting the type of 'platform' (line 155)
platform_45398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 155, 22), 'platform', False)
# Obtaining the member 'architecture' of a type (line 155)
architecture_45399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 155, 22), platform_45398, 'architecture')
# Calling architecture(args, kwargs) (line 155)
architecture_call_result_45401 = invoke(stypy.reporting.localization.Localization(__file__, 155, 22), architecture_45399, *[], **kwargs_45400)

# Obtaining the member '__getitem__' of a type (line 155)
getitem___45402 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 155, 22), architecture_call_result_45401, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 155)
subscript_call_result_45403 = invoke(stypy.reporting.localization.Localization(__file__, 155, 22), getitem___45402, int_45397)

# Getting the type of '_bits' (line 155)
_bits_45404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 155, 16), '_bits')
# Obtaining the member '__getitem__' of a type (line 155)
getitem___45405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 155, 16), _bits_45404, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 155)
subscript_call_result_45406 = invoke(stypy.reporting.localization.Localization(__file__, 155, 16), getitem___45405, subscript_call_result_45403)

# Assigning a type to the variable 'platform_bits' (line 155)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 155, 0), 'platform_bits', subscript_call_result_45406)

@norecursion
def libpaths(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'libpaths'
    module_type_store = module_type_store.open_function_context('libpaths', 158, 0, False)
    
    # Passed parameters checking function
    libpaths.stypy_localization = localization
    libpaths.stypy_type_of_self = None
    libpaths.stypy_type_store = module_type_store
    libpaths.stypy_function_name = 'libpaths'
    libpaths.stypy_param_names_list = ['paths', 'bits']
    libpaths.stypy_varargs_param_name = None
    libpaths.stypy_kwargs_param_name = None
    libpaths.stypy_call_defaults = defaults
    libpaths.stypy_call_varargs = varargs
    libpaths.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'libpaths', ['paths', 'bits'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'libpaths', localization, ['paths', 'bits'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'libpaths(...)' code ##################

    str_45407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 181, (-1)), 'str', "Return a list of library paths valid on 32 or 64 bit systems.\n\n    Inputs:\n      paths : sequence\n        A sequence of strings (typically paths)\n      bits : int\n        An integer, the only valid values are 32 or 64.  A ValueError exception\n      is raised otherwise.\n\n    Examples:\n\n    Consider a list of directories\n    >>> paths = ['/usr/X11R6/lib','/usr/X11/lib','/usr/lib']\n\n    For a 32-bit platform, this is already valid:\n    >>> np.distutils.system_info.libpaths(paths,32)\n    ['/usr/X11R6/lib', '/usr/X11/lib', '/usr/lib']\n\n    On 64 bits, we prepend the '64' postfix\n    >>> np.distutils.system_info.libpaths(paths,64)\n    ['/usr/X11R6/lib64', '/usr/X11R6/lib', '/usr/X11/lib64', '/usr/X11/lib',\n    '/usr/lib64', '/usr/lib']\n    ")
    
    
    # Getting the type of 'bits' (line 182)
    bits_45408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 182, 7), 'bits')
    
    # Obtaining an instance of the builtin type 'tuple' (line 182)
    tuple_45409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 182, 20), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 182)
    # Adding element type (line 182)
    int_45410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 182, 20), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 182, 20), tuple_45409, int_45410)
    # Adding element type (line 182)
    int_45411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 182, 24), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 182, 20), tuple_45409, int_45411)
    
    # Applying the binary operator 'notin' (line 182)
    result_contains_45412 = python_operator(stypy.reporting.localization.Localization(__file__, 182, 7), 'notin', bits_45408, tuple_45409)
    
    # Testing the type of an if condition (line 182)
    if_condition_45413 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 182, 4), result_contains_45412)
    # Assigning a type to the variable 'if_condition_45413' (line 182)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 182, 4), 'if_condition_45413', if_condition_45413)
    # SSA begins for if statement (line 182)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 183)
    # Processing the call arguments (line 183)
    str_45415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 183, 25), 'str', 'Invalid bit size in libpaths: 32 or 64 only')
    # Processing the call keyword arguments (line 183)
    kwargs_45416 = {}
    # Getting the type of 'ValueError' (line 183)
    ValueError_45414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 183)
    ValueError_call_result_45417 = invoke(stypy.reporting.localization.Localization(__file__, 183, 14), ValueError_45414, *[str_45415], **kwargs_45416)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 183, 8), ValueError_call_result_45417, 'raise parameter', BaseException)
    # SSA join for if statement (line 182)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'bits' (line 186)
    bits_45418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 186, 7), 'bits')
    int_45419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 186, 15), 'int')
    # Applying the binary operator '==' (line 186)
    result_eq_45420 = python_operator(stypy.reporting.localization.Localization(__file__, 186, 7), '==', bits_45418, int_45419)
    
    # Testing the type of an if condition (line 186)
    if_condition_45421 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 186, 4), result_eq_45420)
    # Assigning a type to the variable 'if_condition_45421' (line 186)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 186, 4), 'if_condition_45421', if_condition_45421)
    # SSA begins for if statement (line 186)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'paths' (line 187)
    paths_45422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 187, 15), 'paths')
    # Assigning a type to the variable 'stypy_return_type' (line 187)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 187, 8), 'stypy_return_type', paths_45422)
    # SSA join for if statement (line 186)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a List to a Name (line 190):
    
    # Assigning a List to a Name (line 190):
    
    # Obtaining an instance of the builtin type 'list' (line 190)
    list_45423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 190, 10), 'list')
    # Adding type elements to the builtin type 'list' instance (line 190)
    
    # Assigning a type to the variable 'out' (line 190)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 190, 4), 'out', list_45423)
    
    # Getting the type of 'paths' (line 191)
    paths_45424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 191, 13), 'paths')
    # Testing the type of a for loop iterable (line 191)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 191, 4), paths_45424)
    # Getting the type of the for loop variable (line 191)
    for_loop_var_45425 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 191, 4), paths_45424)
    # Assigning a type to the variable 'p' (line 191)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 191, 4), 'p', for_loop_var_45425)
    # SSA begins for a for statement (line 191)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to extend(...): (line 192)
    # Processing the call arguments (line 192)
    
    # Obtaining an instance of the builtin type 'list' (line 192)
    list_45428 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 192, 19), 'list')
    # Adding type elements to the builtin type 'list' instance (line 192)
    # Adding element type (line 192)
    # Getting the type of 'p' (line 192)
    p_45429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 20), 'p', False)
    str_45430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 192, 24), 'str', '64')
    # Applying the binary operator '+' (line 192)
    result_add_45431 = python_operator(stypy.reporting.localization.Localization(__file__, 192, 20), '+', p_45429, str_45430)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 192, 19), list_45428, result_add_45431)
    # Adding element type (line 192)
    # Getting the type of 'p' (line 192)
    p_45432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 30), 'p', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 192, 19), list_45428, p_45432)
    
    # Processing the call keyword arguments (line 192)
    kwargs_45433 = {}
    # Getting the type of 'out' (line 192)
    out_45426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 8), 'out', False)
    # Obtaining the member 'extend' of a type (line 192)
    extend_45427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 192, 8), out_45426, 'extend')
    # Calling extend(args, kwargs) (line 192)
    extend_call_result_45434 = invoke(stypy.reporting.localization.Localization(__file__, 192, 8), extend_45427, *[list_45428], **kwargs_45433)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'out' (line 194)
    out_45435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 11), 'out')
    # Assigning a type to the variable 'stypy_return_type' (line 194)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 194, 4), 'stypy_return_type', out_45435)
    
    # ################# End of 'libpaths(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'libpaths' in the type store
    # Getting the type of 'stypy_return_type' (line 158)
    stypy_return_type_45436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_45436)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'libpaths'
    return stypy_return_type_45436

# Assigning a type to the variable 'libpaths' (line 158)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 158, 0), 'libpaths', libpaths)


# Getting the type of 'sys' (line 197)
sys_45437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 197, 3), 'sys')
# Obtaining the member 'platform' of a type (line 197)
platform_45438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 197, 3), sys_45437, 'platform')
str_45439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 197, 19), 'str', 'win32')
# Applying the binary operator '==' (line 197)
result_eq_45440 = python_operator(stypy.reporting.localization.Localization(__file__, 197, 3), '==', platform_45438, str_45439)

# Testing the type of an if condition (line 197)
if_condition_45441 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 197, 0), result_eq_45440)
# Assigning a type to the variable 'if_condition_45441' (line 197)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 197, 0), 'if_condition_45441', if_condition_45441)
# SSA begins for if statement (line 197)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Assigning a List to a Name (line 198):

# Assigning a List to a Name (line 198):

# Obtaining an instance of the builtin type 'list' (line 198)
list_45442 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 198, 23), 'list')
# Adding type elements to the builtin type 'list' instance (line 198)
# Adding element type (line 198)
str_45443 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 198, 24), 'str', 'C:\\')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 198, 23), list_45442, str_45443)
# Adding element type (line 198)

# Call to join(...): (line 199)
# Processing the call arguments (line 199)
# Getting the type of 'distutils' (line 199)
distutils_45447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 199, 37), 'distutils', False)
# Obtaining the member 'sysconfig' of a type (line 199)
sysconfig_45448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 199, 37), distutils_45447, 'sysconfig')
# Obtaining the member 'EXEC_PREFIX' of a type (line 199)
EXEC_PREFIX_45449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 199, 37), sysconfig_45448, 'EXEC_PREFIX')
str_45450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 200, 37), 'str', 'libs')
# Processing the call keyword arguments (line 199)
kwargs_45451 = {}
# Getting the type of 'os' (line 199)
os_45444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 199, 24), 'os', False)
# Obtaining the member 'path' of a type (line 199)
path_45445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 199, 24), os_45444, 'path')
# Obtaining the member 'join' of a type (line 199)
join_45446 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 199, 24), path_45445, 'join')
# Calling join(args, kwargs) (line 199)
join_call_result_45452 = invoke(stypy.reporting.localization.Localization(__file__, 199, 24), join_45446, *[EXEC_PREFIX_45449, str_45450], **kwargs_45451)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 198, 23), list_45442, join_call_result_45452)

# Assigning a type to the variable 'default_lib_dirs' (line 198)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 198, 4), 'default_lib_dirs', list_45442)

# Assigning a List to a Name (line 201):

# Assigning a List to a Name (line 201):

# Obtaining an instance of the builtin type 'list' (line 201)
list_45453 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 201, 27), 'list')
# Adding type elements to the builtin type 'list' instance (line 201)

# Assigning a type to the variable 'default_runtime_dirs' (line 201)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 201, 4), 'default_runtime_dirs', list_45453)

# Assigning a List to a Name (line 202):

# Assigning a List to a Name (line 202):

# Obtaining an instance of the builtin type 'list' (line 202)
list_45454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 202, 27), 'list')
# Adding type elements to the builtin type 'list' instance (line 202)

# Assigning a type to the variable 'default_include_dirs' (line 202)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 202, 4), 'default_include_dirs', list_45454)

# Assigning a List to a Name (line 203):

# Assigning a List to a Name (line 203):

# Obtaining an instance of the builtin type 'list' (line 203)
list_45455 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 203, 23), 'list')
# Adding type elements to the builtin type 'list' instance (line 203)
# Adding element type (line 203)
str_45456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 203, 24), 'str', '.')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 203, 23), list_45455, str_45456)

# Assigning a type to the variable 'default_src_dirs' (line 203)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 203, 4), 'default_src_dirs', list_45455)

# Assigning a List to a Name (line 204):

# Assigning a List to a Name (line 204):

# Obtaining an instance of the builtin type 'list' (line 204)
list_45457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 204, 27), 'list')
# Adding type elements to the builtin type 'list' instance (line 204)

# Assigning a type to the variable 'default_x11_lib_dirs' (line 204)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 204, 4), 'default_x11_lib_dirs', list_45457)

# Assigning a List to a Name (line 205):

# Assigning a List to a Name (line 205):

# Obtaining an instance of the builtin type 'list' (line 205)
list_45458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 205, 31), 'list')
# Adding type elements to the builtin type 'list' instance (line 205)

# Assigning a type to the variable 'default_x11_include_dirs' (line 205)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 205, 4), 'default_x11_include_dirs', list_45458)
# SSA branch for the else part of an if statement (line 197)
module_type_store.open_ssa_branch('else')

# Assigning a Call to a Name (line 207):

# Assigning a Call to a Name (line 207):

# Call to libpaths(...): (line 207)
# Processing the call arguments (line 207)

# Obtaining an instance of the builtin type 'list' (line 207)
list_45460 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 207, 32), 'list')
# Adding type elements to the builtin type 'list' instance (line 207)
# Adding element type (line 207)
str_45461 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 207, 33), 'str', '/usr/local/lib')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 207, 32), list_45460, str_45461)
# Adding element type (line 207)
str_45462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 207, 51), 'str', '/opt/lib')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 207, 32), list_45460, str_45462)
# Adding element type (line 207)
str_45463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 207, 63), 'str', '/usr/lib')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 207, 32), list_45460, str_45463)
# Adding element type (line 207)
str_45464 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 208, 33), 'str', '/opt/local/lib')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 207, 32), list_45460, str_45464)
# Adding element type (line 207)
str_45465 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 208, 51), 'str', '/sw/lib')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 207, 32), list_45460, str_45465)

# Getting the type of 'platform_bits' (line 208)
platform_bits_45466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 63), 'platform_bits', False)
# Processing the call keyword arguments (line 207)
kwargs_45467 = {}
# Getting the type of 'libpaths' (line 207)
libpaths_45459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 23), 'libpaths', False)
# Calling libpaths(args, kwargs) (line 207)
libpaths_call_result_45468 = invoke(stypy.reporting.localization.Localization(__file__, 207, 23), libpaths_45459, *[list_45460, platform_bits_45466], **kwargs_45467)

# Assigning a type to the variable 'default_lib_dirs' (line 207)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 207, 4), 'default_lib_dirs', libpaths_call_result_45468)

# Assigning a List to a Name (line 209):

# Assigning a List to a Name (line 209):

# Obtaining an instance of the builtin type 'list' (line 209)
list_45469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 209, 27), 'list')
# Adding type elements to the builtin type 'list' instance (line 209)

# Assigning a type to the variable 'default_runtime_dirs' (line 209)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 209, 4), 'default_runtime_dirs', list_45469)

# Assigning a List to a Name (line 210):

# Assigning a List to a Name (line 210):

# Obtaining an instance of the builtin type 'list' (line 210)
list_45470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 210, 27), 'list')
# Adding type elements to the builtin type 'list' instance (line 210)
# Adding element type (line 210)
str_45471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 210, 28), 'str', '/usr/local/include')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 210, 27), list_45470, str_45471)
# Adding element type (line 210)
str_45472 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 211, 28), 'str', '/opt/include')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 210, 27), list_45470, str_45472)
# Adding element type (line 210)
str_45473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 211, 44), 'str', '/usr/include')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 210, 27), list_45470, str_45473)
# Adding element type (line 210)
str_45474 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 213, 28), 'str', '/opt/local/include/ufsparse')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 210, 27), list_45470, str_45474)
# Adding element type (line 210)
str_45475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 214, 28), 'str', '/opt/local/include')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 210, 27), list_45470, str_45475)
# Adding element type (line 210)
str_45476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 214, 50), 'str', '/sw/include')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 210, 27), list_45470, str_45476)
# Adding element type (line 210)
str_45477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 215, 28), 'str', '/usr/include/suitesparse')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 210, 27), list_45470, str_45477)

# Assigning a type to the variable 'default_include_dirs' (line 210)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 210, 4), 'default_include_dirs', list_45470)

# Assigning a List to a Name (line 216):

# Assigning a List to a Name (line 216):

# Obtaining an instance of the builtin type 'list' (line 216)
list_45478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 216, 23), 'list')
# Adding type elements to the builtin type 'list' instance (line 216)
# Adding element type (line 216)
str_45479 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 216, 24), 'str', '.')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 216, 23), list_45478, str_45479)
# Adding element type (line 216)
str_45480 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 216, 29), 'str', '/usr/local/src')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 216, 23), list_45478, str_45480)
# Adding element type (line 216)
str_45481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 216, 47), 'str', '/opt/src')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 216, 23), list_45478, str_45481)
# Adding element type (line 216)
str_45482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 216, 59), 'str', '/sw/src')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 216, 23), list_45478, str_45482)

# Assigning a type to the variable 'default_src_dirs' (line 216)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 216, 4), 'default_src_dirs', list_45478)

# Assigning a Call to a Name (line 218):

# Assigning a Call to a Name (line 218):

# Call to libpaths(...): (line 218)
# Processing the call arguments (line 218)

# Obtaining an instance of the builtin type 'list' (line 218)
list_45484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 218, 36), 'list')
# Adding type elements to the builtin type 'list' instance (line 218)
# Adding element type (line 218)
str_45485 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 218, 37), 'str', '/usr/X11R6/lib')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 218, 36), list_45484, str_45485)
# Adding element type (line 218)
str_45486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 218, 55), 'str', '/usr/X11/lib')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 218, 36), list_45484, str_45486)
# Adding element type (line 218)
str_45487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 219, 37), 'str', '/usr/lib')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 218, 36), list_45484, str_45487)

# Getting the type of 'platform_bits' (line 219)
platform_bits_45488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 50), 'platform_bits', False)
# Processing the call keyword arguments (line 218)
kwargs_45489 = {}
# Getting the type of 'libpaths' (line 218)
libpaths_45483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 218, 27), 'libpaths', False)
# Calling libpaths(args, kwargs) (line 218)
libpaths_call_result_45490 = invoke(stypy.reporting.localization.Localization(__file__, 218, 27), libpaths_45483, *[list_45484, platform_bits_45488], **kwargs_45489)

# Assigning a type to the variable 'default_x11_lib_dirs' (line 218)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 218, 4), 'default_x11_lib_dirs', libpaths_call_result_45490)

# Assigning a List to a Name (line 220):

# Assigning a List to a Name (line 220):

# Obtaining an instance of the builtin type 'list' (line 220)
list_45491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 220, 31), 'list')
# Adding type elements to the builtin type 'list' instance (line 220)
# Adding element type (line 220)
str_45492 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 220, 32), 'str', '/usr/X11R6/include')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 220, 31), list_45491, str_45492)
# Adding element type (line 220)
str_45493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 220, 54), 'str', '/usr/X11/include')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 220, 31), list_45491, str_45493)
# Adding element type (line 220)
str_45494 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 221, 32), 'str', '/usr/include')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 220, 31), list_45491, str_45494)

# Assigning a type to the variable 'default_x11_include_dirs' (line 220)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 220, 4), 'default_x11_include_dirs', list_45491)


# Call to exists(...): (line 223)
# Processing the call arguments (line 223)
str_45498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 223, 22), 'str', '/usr/lib/X11')
# Processing the call keyword arguments (line 223)
kwargs_45499 = {}
# Getting the type of 'os' (line 223)
os_45495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 7), 'os', False)
# Obtaining the member 'path' of a type (line 223)
path_45496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 223, 7), os_45495, 'path')
# Obtaining the member 'exists' of a type (line 223)
exists_45497 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 223, 7), path_45496, 'exists')
# Calling exists(args, kwargs) (line 223)
exists_call_result_45500 = invoke(stypy.reporting.localization.Localization(__file__, 223, 7), exists_45497, *[str_45498], **kwargs_45499)

# Testing the type of an if condition (line 223)
if_condition_45501 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 223, 4), exists_call_result_45500)
# Assigning a type to the variable 'if_condition_45501' (line 223)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 223, 4), 'if_condition_45501', if_condition_45501)
# SSA begins for if statement (line 223)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Assigning a Call to a Name (line 224):

# Assigning a Call to a Name (line 224):

# Call to glob(...): (line 224)
# Processing the call arguments (line 224)
str_45503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 224, 31), 'str', '/usr/lib/*/libX11.so')
# Processing the call keyword arguments (line 224)
kwargs_45504 = {}
# Getting the type of 'glob' (line 224)
glob_45502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 26), 'glob', False)
# Calling glob(args, kwargs) (line 224)
glob_call_result_45505 = invoke(stypy.reporting.localization.Localization(__file__, 224, 26), glob_45502, *[str_45503], **kwargs_45504)

# Assigning a type to the variable 'globbed_x11_dir' (line 224)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 224, 8), 'globbed_x11_dir', glob_call_result_45505)

# Getting the type of 'globbed_x11_dir' (line 225)
globbed_x11_dir_45506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 11), 'globbed_x11_dir')
# Testing the type of an if condition (line 225)
if_condition_45507 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 225, 8), globbed_x11_dir_45506)
# Assigning a type to the variable 'if_condition_45507' (line 225)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 225, 8), 'if_condition_45507', if_condition_45507)
# SSA begins for if statement (line 225)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Assigning a Subscript to a Name (line 226):

# Assigning a Subscript to a Name (line 226):

# Obtaining the type of the subscript
int_45508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 226, 59), 'int')

# Call to split(...): (line 226)
# Processing the call arguments (line 226)

# Obtaining the type of the subscript
int_45512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 226, 55), 'int')
# Getting the type of 'globbed_x11_dir' (line 226)
globbed_x11_dir_45513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 226, 39), 'globbed_x11_dir', False)
# Obtaining the member '__getitem__' of a type (line 226)
getitem___45514 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 226, 39), globbed_x11_dir_45513, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 226)
subscript_call_result_45515 = invoke(stypy.reporting.localization.Localization(__file__, 226, 39), getitem___45514, int_45512)

# Processing the call keyword arguments (line 226)
kwargs_45516 = {}
# Getting the type of 'os' (line 226)
os_45509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 226, 25), 'os', False)
# Obtaining the member 'path' of a type (line 226)
path_45510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 226, 25), os_45509, 'path')
# Obtaining the member 'split' of a type (line 226)
split_45511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 226, 25), path_45510, 'split')
# Calling split(args, kwargs) (line 226)
split_call_result_45517 = invoke(stypy.reporting.localization.Localization(__file__, 226, 25), split_45511, *[subscript_call_result_45515], **kwargs_45516)

# Obtaining the member '__getitem__' of a type (line 226)
getitem___45518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 226, 25), split_call_result_45517, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 226)
subscript_call_result_45519 = invoke(stypy.reporting.localization.Localization(__file__, 226, 25), getitem___45518, int_45508)

# Assigning a type to the variable 'x11_so_dir' (line 226)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 226, 12), 'x11_so_dir', subscript_call_result_45519)

# Call to extend(...): (line 227)
# Processing the call arguments (line 227)

# Obtaining an instance of the builtin type 'list' (line 227)
list_45522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 227, 40), 'list')
# Adding type elements to the builtin type 'list' instance (line 227)
# Adding element type (line 227)
# Getting the type of 'x11_so_dir' (line 227)
x11_so_dir_45523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 41), 'x11_so_dir', False)
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 227, 40), list_45522, x11_so_dir_45523)
# Adding element type (line 227)
str_45524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 227, 53), 'str', '/usr/lib/X11')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 227, 40), list_45522, str_45524)

# Processing the call keyword arguments (line 227)
kwargs_45525 = {}
# Getting the type of 'default_x11_lib_dirs' (line 227)
default_x11_lib_dirs_45520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 12), 'default_x11_lib_dirs', False)
# Obtaining the member 'extend' of a type (line 227)
extend_45521 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 227, 12), default_x11_lib_dirs_45520, 'extend')
# Calling extend(args, kwargs) (line 227)
extend_call_result_45526 = invoke(stypy.reporting.localization.Localization(__file__, 227, 12), extend_45521, *[list_45522], **kwargs_45525)


# Call to extend(...): (line 228)
# Processing the call arguments (line 228)

# Obtaining an instance of the builtin type 'list' (line 228)
list_45529 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 228, 44), 'list')
# Adding type elements to the builtin type 'list' instance (line 228)
# Adding element type (line 228)
str_45530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 228, 45), 'str', '/usr/lib/X11/include')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 228, 44), list_45529, str_45530)
# Adding element type (line 228)
str_45531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 229, 45), 'str', '/usr/include/X11')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 228, 44), list_45529, str_45531)

# Processing the call keyword arguments (line 228)
kwargs_45532 = {}
# Getting the type of 'default_x11_include_dirs' (line 228)
default_x11_include_dirs_45527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 12), 'default_x11_include_dirs', False)
# Obtaining the member 'extend' of a type (line 228)
extend_45528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 228, 12), default_x11_include_dirs_45527, 'extend')
# Calling extend(args, kwargs) (line 228)
extend_call_result_45533 = invoke(stypy.reporting.localization.Localization(__file__, 228, 12), extend_45528, *[list_45529], **kwargs_45532)

# SSA join for if statement (line 225)
module_type_store = module_type_store.join_ssa_context()

# SSA join for if statement (line 223)
module_type_store = module_type_store.join_ssa_context()

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 231, 4))

# 'import subprocess' statement (line 231)
import subprocess as sp

import_module(stypy.reporting.localization.Localization(__file__, 231, 4), 'sp', sp, module_type_store)


# Assigning a Name to a Name (line 232):

# Assigning a Name to a Name (line 232):
# Getting the type of 'None' (line 232)
None_45534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 10), 'None')
# Assigning a type to the variable 'tmp' (line 232)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 232, 4), 'tmp', None_45534)

# Try-finally block (line 233)


# SSA begins for try-except statement (line 233)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')

# Assigning a Call to a Name (line 236):

# Assigning a Call to a Name (line 236):

# Call to open(...): (line 236)
# Processing the call arguments (line 236)
# Getting the type of 'os' (line 236)
os_45536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 236, 19), 'os', False)
# Obtaining the member 'devnull' of a type (line 236)
devnull_45537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 236, 19), os_45536, 'devnull')
str_45538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 236, 31), 'str', 'w')
# Processing the call keyword arguments (line 236)
kwargs_45539 = {}
# Getting the type of 'open' (line 236)
open_45535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 236, 14), 'open', False)
# Calling open(args, kwargs) (line 236)
open_call_result_45540 = invoke(stypy.reporting.localization.Localization(__file__, 236, 14), open_45535, *[devnull_45537, str_45538], **kwargs_45539)

# Assigning a type to the variable 'tmp' (line 236)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 236, 8), 'tmp', open_call_result_45540)

# Assigning a Call to a Name (line 237):

# Assigning a Call to a Name (line 237):

# Call to Popen(...): (line 237)
# Processing the call arguments (line 237)

# Obtaining an instance of the builtin type 'list' (line 237)
list_45543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 237, 21), 'list')
# Adding type elements to the builtin type 'list' instance (line 237)
# Adding element type (line 237)
str_45544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 237, 22), 'str', 'gcc')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 237, 21), list_45543, str_45544)
# Adding element type (line 237)
str_45545 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 237, 29), 'str', '-print-multiarch')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 237, 21), list_45543, str_45545)

# Processing the call keyword arguments (line 237)
# Getting the type of 'sp' (line 237)
sp_45546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 57), 'sp', False)
# Obtaining the member 'PIPE' of a type (line 237)
PIPE_45547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 237, 57), sp_45546, 'PIPE')
keyword_45548 = PIPE_45547
# Getting the type of 'tmp' (line 238)
tmp_45549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 238, 23), 'tmp', False)
keyword_45550 = tmp_45549
kwargs_45551 = {'stderr': keyword_45550, 'stdout': keyword_45548}
# Getting the type of 'sp' (line 237)
sp_45541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 12), 'sp', False)
# Obtaining the member 'Popen' of a type (line 237)
Popen_45542 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 237, 12), sp_45541, 'Popen')
# Calling Popen(args, kwargs) (line 237)
Popen_call_result_45552 = invoke(stypy.reporting.localization.Localization(__file__, 237, 12), Popen_45542, *[list_45543], **kwargs_45551)

# Assigning a type to the variable 'p' (line 237)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 237, 8), 'p', Popen_call_result_45552)
# SSA branch for the except part of a try statement (line 233)
# SSA branch for the except 'Tuple' branch of a try statement (line 233)
module_type_store.open_ssa_branch('except')
pass
# SSA branch for the else branch of a try statement (line 233)
module_type_store.open_ssa_branch('except else')

# Assigning a Call to a Name (line 244):

# Assigning a Call to a Name (line 244):

# Call to str(...): (line 244)
# Processing the call arguments (line 244)

# Call to strip(...): (line 244)
# Processing the call keyword arguments (line 244)
kwargs_45565 = {}

# Call to decode(...): (line 244)
# Processing the call keyword arguments (line 244)
kwargs_45562 = {}

# Obtaining the type of the subscript
int_45554 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 244, 38), 'int')

# Call to communicate(...): (line 244)
# Processing the call keyword arguments (line 244)
kwargs_45557 = {}
# Getting the type of 'p' (line 244)
p_45555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 22), 'p', False)
# Obtaining the member 'communicate' of a type (line 244)
communicate_45556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 244, 22), p_45555, 'communicate')
# Calling communicate(args, kwargs) (line 244)
communicate_call_result_45558 = invoke(stypy.reporting.localization.Localization(__file__, 244, 22), communicate_45556, *[], **kwargs_45557)

# Obtaining the member '__getitem__' of a type (line 244)
getitem___45559 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 244, 22), communicate_call_result_45558, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 244)
subscript_call_result_45560 = invoke(stypy.reporting.localization.Localization(__file__, 244, 22), getitem___45559, int_45554)

# Obtaining the member 'decode' of a type (line 244)
decode_45561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 244, 22), subscript_call_result_45560, 'decode')
# Calling decode(args, kwargs) (line 244)
decode_call_result_45563 = invoke(stypy.reporting.localization.Localization(__file__, 244, 22), decode_45561, *[], **kwargs_45562)

# Obtaining the member 'strip' of a type (line 244)
strip_45564 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 244, 22), decode_call_result_45563, 'strip')
# Calling strip(args, kwargs) (line 244)
strip_call_result_45566 = invoke(stypy.reporting.localization.Localization(__file__, 244, 22), strip_45564, *[], **kwargs_45565)

# Processing the call keyword arguments (line 244)
kwargs_45567 = {}
# Getting the type of 'str' (line 244)
str_45553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 18), 'str', False)
# Calling str(args, kwargs) (line 244)
str_call_result_45568 = invoke(stypy.reporting.localization.Localization(__file__, 244, 18), str_45553, *[strip_call_result_45566], **kwargs_45567)

# Assigning a type to the variable 'triplet' (line 244)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 244, 8), 'triplet', str_call_result_45568)


# Getting the type of 'p' (line 245)
p_45569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 11), 'p')
# Obtaining the member 'returncode' of a type (line 245)
returncode_45570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 245, 11), p_45569, 'returncode')
int_45571 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 245, 27), 'int')
# Applying the binary operator '==' (line 245)
result_eq_45572 = python_operator(stypy.reporting.localization.Localization(__file__, 245, 11), '==', returncode_45570, int_45571)

# Testing the type of an if condition (line 245)
if_condition_45573 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 245, 8), result_eq_45572)
# Assigning a type to the variable 'if_condition_45573' (line 245)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 245, 8), 'if_condition_45573', if_condition_45573)
# SSA begins for if statement (line 245)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Getting the type of 'default_x11_lib_dirs' (line 247)
default_x11_lib_dirs_45574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 12), 'default_x11_lib_dirs')

# Obtaining an instance of the builtin type 'list' (line 247)
list_45575 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 247, 36), 'list')
# Adding type elements to the builtin type 'list' instance (line 247)
# Adding element type (line 247)

# Call to join(...): (line 247)
# Processing the call arguments (line 247)
str_45579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 247, 50), 'str', '/usr/lib/')
# Getting the type of 'triplet' (line 247)
triplet_45580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 63), 'triplet', False)
# Processing the call keyword arguments (line 247)
kwargs_45581 = {}
# Getting the type of 'os' (line 247)
os_45576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 37), 'os', False)
# Obtaining the member 'path' of a type (line 247)
path_45577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 247, 37), os_45576, 'path')
# Obtaining the member 'join' of a type (line 247)
join_45578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 247, 37), path_45577, 'join')
# Calling join(args, kwargs) (line 247)
join_call_result_45582 = invoke(stypy.reporting.localization.Localization(__file__, 247, 37), join_45578, *[str_45579, triplet_45580], **kwargs_45581)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 247, 36), list_45575, join_call_result_45582)

# Applying the binary operator '+=' (line 247)
result_iadd_45583 = python_operator(stypy.reporting.localization.Localization(__file__, 247, 12), '+=', default_x11_lib_dirs_45574, list_45575)
# Assigning a type to the variable 'default_x11_lib_dirs' (line 247)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 247, 12), 'default_x11_lib_dirs', result_iadd_45583)


# Getting the type of 'default_lib_dirs' (line 248)
default_lib_dirs_45584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 12), 'default_lib_dirs')

# Obtaining an instance of the builtin type 'list' (line 248)
list_45585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 248, 32), 'list')
# Adding type elements to the builtin type 'list' instance (line 248)
# Adding element type (line 248)

# Call to join(...): (line 248)
# Processing the call arguments (line 248)
str_45589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 248, 46), 'str', '/usr/lib/')
# Getting the type of 'triplet' (line 248)
triplet_45590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 59), 'triplet', False)
# Processing the call keyword arguments (line 248)
kwargs_45591 = {}
# Getting the type of 'os' (line 248)
os_45586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 33), 'os', False)
# Obtaining the member 'path' of a type (line 248)
path_45587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 248, 33), os_45586, 'path')
# Obtaining the member 'join' of a type (line 248)
join_45588 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 248, 33), path_45587, 'join')
# Calling join(args, kwargs) (line 248)
join_call_result_45592 = invoke(stypy.reporting.localization.Localization(__file__, 248, 33), join_45588, *[str_45589, triplet_45590], **kwargs_45591)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 248, 32), list_45585, join_call_result_45592)

# Applying the binary operator '+=' (line 248)
result_iadd_45593 = python_operator(stypy.reporting.localization.Localization(__file__, 248, 12), '+=', default_lib_dirs_45584, list_45585)
# Assigning a type to the variable 'default_lib_dirs' (line 248)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 248, 12), 'default_lib_dirs', result_iadd_45593)

# SSA join for if statement (line 245)
module_type_store = module_type_store.join_ssa_context()

# SSA join for try-except statement (line 233)
module_type_store = module_type_store.join_ssa_context()


# finally branch of the try-finally block (line 233)

# Type idiom detected: calculating its left and rigth part (line 250)
# Getting the type of 'tmp' (line 250)
tmp_45594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 8), 'tmp')
# Getting the type of 'None' (line 250)
None_45595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 22), 'None')

(may_be_45596, more_types_in_union_45597) = may_not_be_none(tmp_45594, None_45595)

if may_be_45596:

    if more_types_in_union_45597:
        # Runtime conditional SSA (line 250)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
    else:
        module_type_store = module_type_store

    
    # Call to close(...): (line 251)
    # Processing the call keyword arguments (line 251)
    kwargs_45600 = {}
    # Getting the type of 'tmp' (line 251)
    tmp_45598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 12), 'tmp', False)
    # Obtaining the member 'close' of a type (line 251)
    close_45599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 251, 12), tmp_45598, 'close')
    # Calling close(args, kwargs) (line 251)
    close_call_result_45601 = invoke(stypy.reporting.localization.Localization(__file__, 251, 12), close_45599, *[], **kwargs_45600)
    

    if more_types_in_union_45597:
        # SSA join for if statement (line 250)
        module_type_store = module_type_store.join_ssa_context()




# SSA join for if statement (line 197)
module_type_store = module_type_store.join_ssa_context()




# Call to join(...): (line 253)
# Processing the call arguments (line 253)
# Getting the type of 'sys' (line 253)
sys_45605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 16), 'sys', False)
# Obtaining the member 'prefix' of a type (line 253)
prefix_45606 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 253, 16), sys_45605, 'prefix')
str_45607 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 253, 28), 'str', 'lib')
# Processing the call keyword arguments (line 253)
kwargs_45608 = {}
# Getting the type of 'os' (line 253)
os_45602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 3), 'os', False)
# Obtaining the member 'path' of a type (line 253)
path_45603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 253, 3), os_45602, 'path')
# Obtaining the member 'join' of a type (line 253)
join_45604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 253, 3), path_45603, 'join')
# Calling join(args, kwargs) (line 253)
join_call_result_45609 = invoke(stypy.reporting.localization.Localization(__file__, 253, 3), join_45604, *[prefix_45606, str_45607], **kwargs_45608)

# Getting the type of 'default_lib_dirs' (line 253)
default_lib_dirs_45610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 42), 'default_lib_dirs')
# Applying the binary operator 'notin' (line 253)
result_contains_45611 = python_operator(stypy.reporting.localization.Localization(__file__, 253, 3), 'notin', join_call_result_45609, default_lib_dirs_45610)

# Testing the type of an if condition (line 253)
if_condition_45612 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 253, 0), result_contains_45611)
# Assigning a type to the variable 'if_condition_45612' (line 253)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 253, 0), 'if_condition_45612', if_condition_45612)
# SSA begins for if statement (line 253)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Call to insert(...): (line 254)
# Processing the call arguments (line 254)
int_45615 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 254, 28), 'int')

# Call to join(...): (line 254)
# Processing the call arguments (line 254)
# Getting the type of 'sys' (line 254)
sys_45619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 44), 'sys', False)
# Obtaining the member 'prefix' of a type (line 254)
prefix_45620 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 254, 44), sys_45619, 'prefix')
str_45621 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 254, 56), 'str', 'lib')
# Processing the call keyword arguments (line 254)
kwargs_45622 = {}
# Getting the type of 'os' (line 254)
os_45616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 31), 'os', False)
# Obtaining the member 'path' of a type (line 254)
path_45617 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 254, 31), os_45616, 'path')
# Obtaining the member 'join' of a type (line 254)
join_45618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 254, 31), path_45617, 'join')
# Calling join(args, kwargs) (line 254)
join_call_result_45623 = invoke(stypy.reporting.localization.Localization(__file__, 254, 31), join_45618, *[prefix_45620, str_45621], **kwargs_45622)

# Processing the call keyword arguments (line 254)
kwargs_45624 = {}
# Getting the type of 'default_lib_dirs' (line 254)
default_lib_dirs_45613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 4), 'default_lib_dirs', False)
# Obtaining the member 'insert' of a type (line 254)
insert_45614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 254, 4), default_lib_dirs_45613, 'insert')
# Calling insert(args, kwargs) (line 254)
insert_call_result_45625 = invoke(stypy.reporting.localization.Localization(__file__, 254, 4), insert_45614, *[int_45615, join_call_result_45623], **kwargs_45624)


# Call to append(...): (line 255)
# Processing the call arguments (line 255)

# Call to join(...): (line 255)
# Processing the call arguments (line 255)
# Getting the type of 'sys' (line 255)
sys_45631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 45), 'sys', False)
# Obtaining the member 'prefix' of a type (line 255)
prefix_45632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 255, 45), sys_45631, 'prefix')
str_45633 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 255, 57), 'str', 'include')
# Processing the call keyword arguments (line 255)
kwargs_45634 = {}
# Getting the type of 'os' (line 255)
os_45628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 32), 'os', False)
# Obtaining the member 'path' of a type (line 255)
path_45629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 255, 32), os_45628, 'path')
# Obtaining the member 'join' of a type (line 255)
join_45630 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 255, 32), path_45629, 'join')
# Calling join(args, kwargs) (line 255)
join_call_result_45635 = invoke(stypy.reporting.localization.Localization(__file__, 255, 32), join_45630, *[prefix_45632, str_45633], **kwargs_45634)

# Processing the call keyword arguments (line 255)
kwargs_45636 = {}
# Getting the type of 'default_include_dirs' (line 255)
default_include_dirs_45626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 4), 'default_include_dirs', False)
# Obtaining the member 'append' of a type (line 255)
append_45627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 255, 4), default_include_dirs_45626, 'append')
# Calling append(args, kwargs) (line 255)
append_call_result_45637 = invoke(stypy.reporting.localization.Localization(__file__, 255, 4), append_45627, *[join_call_result_45635], **kwargs_45636)


# Call to append(...): (line 256)
# Processing the call arguments (line 256)

# Call to join(...): (line 256)
# Processing the call arguments (line 256)
# Getting the type of 'sys' (line 256)
sys_45643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 41), 'sys', False)
# Obtaining the member 'prefix' of a type (line 256)
prefix_45644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 256, 41), sys_45643, 'prefix')
str_45645 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 256, 53), 'str', 'src')
# Processing the call keyword arguments (line 256)
kwargs_45646 = {}
# Getting the type of 'os' (line 256)
os_45640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 28), 'os', False)
# Obtaining the member 'path' of a type (line 256)
path_45641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 256, 28), os_45640, 'path')
# Obtaining the member 'join' of a type (line 256)
join_45642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 256, 28), path_45641, 'join')
# Calling join(args, kwargs) (line 256)
join_call_result_45647 = invoke(stypy.reporting.localization.Localization(__file__, 256, 28), join_45642, *[prefix_45644, str_45645], **kwargs_45646)

# Processing the call keyword arguments (line 256)
kwargs_45648 = {}
# Getting the type of 'default_src_dirs' (line 256)
default_src_dirs_45638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 4), 'default_src_dirs', False)
# Obtaining the member 'append' of a type (line 256)
append_45639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 256, 4), default_src_dirs_45638, 'append')
# Calling append(args, kwargs) (line 256)
append_call_result_45649 = invoke(stypy.reporting.localization.Localization(__file__, 256, 4), append_45639, *[join_call_result_45647], **kwargs_45648)

# SSA join for if statement (line 253)
module_type_store = module_type_store.join_ssa_context()


# Assigning a ListComp to a Name (line 258):

# Assigning a ListComp to a Name (line 258):
# Calculating list comprehension
# Calculating comprehension expression
# Getting the type of 'default_lib_dirs' (line 258)
default_lib_dirs_45657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 33), 'default_lib_dirs')
comprehension_45658 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 258, 20), default_lib_dirs_45657)
# Assigning a type to the variable '_m' (line 258)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 258, 20), '_m', comprehension_45658)

# Call to isdir(...): (line 258)
# Processing the call arguments (line 258)
# Getting the type of '_m' (line 258)
_m_45654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 67), '_m', False)
# Processing the call keyword arguments (line 258)
kwargs_45655 = {}
# Getting the type of 'os' (line 258)
os_45651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 53), 'os', False)
# Obtaining the member 'path' of a type (line 258)
path_45652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 258, 53), os_45651, 'path')
# Obtaining the member 'isdir' of a type (line 258)
isdir_45653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 258, 53), path_45652, 'isdir')
# Calling isdir(args, kwargs) (line 258)
isdir_call_result_45656 = invoke(stypy.reporting.localization.Localization(__file__, 258, 53), isdir_45653, *[_m_45654], **kwargs_45655)

# Getting the type of '_m' (line 258)
_m_45650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 20), '_m')
list_45659 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 258, 20), 'list')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 258, 20), list_45659, _m_45650)
# Assigning a type to the variable 'default_lib_dirs' (line 258)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 258, 0), 'default_lib_dirs', list_45659)

# Assigning a ListComp to a Name (line 259):

# Assigning a ListComp to a Name (line 259):
# Calculating list comprehension
# Calculating comprehension expression
# Getting the type of 'default_runtime_dirs' (line 259)
default_runtime_dirs_45667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 37), 'default_runtime_dirs')
comprehension_45668 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 259, 24), default_runtime_dirs_45667)
# Assigning a type to the variable '_m' (line 259)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 259, 24), '_m', comprehension_45668)

# Call to isdir(...): (line 259)
# Processing the call arguments (line 259)
# Getting the type of '_m' (line 259)
_m_45664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 75), '_m', False)
# Processing the call keyword arguments (line 259)
kwargs_45665 = {}
# Getting the type of 'os' (line 259)
os_45661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 61), 'os', False)
# Obtaining the member 'path' of a type (line 259)
path_45662 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 259, 61), os_45661, 'path')
# Obtaining the member 'isdir' of a type (line 259)
isdir_45663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 259, 61), path_45662, 'isdir')
# Calling isdir(args, kwargs) (line 259)
isdir_call_result_45666 = invoke(stypy.reporting.localization.Localization(__file__, 259, 61), isdir_45663, *[_m_45664], **kwargs_45665)

# Getting the type of '_m' (line 259)
_m_45660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 24), '_m')
list_45669 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 259, 24), 'list')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 259, 24), list_45669, _m_45660)
# Assigning a type to the variable 'default_runtime_dirs' (line 259)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 259, 0), 'default_runtime_dirs', list_45669)

# Assigning a ListComp to a Name (line 260):

# Assigning a ListComp to a Name (line 260):
# Calculating list comprehension
# Calculating comprehension expression
# Getting the type of 'default_include_dirs' (line 260)
default_include_dirs_45677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 37), 'default_include_dirs')
comprehension_45678 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 260, 24), default_include_dirs_45677)
# Assigning a type to the variable '_m' (line 260)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 260, 24), '_m', comprehension_45678)

# Call to isdir(...): (line 260)
# Processing the call arguments (line 260)
# Getting the type of '_m' (line 260)
_m_45674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 75), '_m', False)
# Processing the call keyword arguments (line 260)
kwargs_45675 = {}
# Getting the type of 'os' (line 260)
os_45671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 61), 'os', False)
# Obtaining the member 'path' of a type (line 260)
path_45672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 260, 61), os_45671, 'path')
# Obtaining the member 'isdir' of a type (line 260)
isdir_45673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 260, 61), path_45672, 'isdir')
# Calling isdir(args, kwargs) (line 260)
isdir_call_result_45676 = invoke(stypy.reporting.localization.Localization(__file__, 260, 61), isdir_45673, *[_m_45674], **kwargs_45675)

# Getting the type of '_m' (line 260)
_m_45670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 24), '_m')
list_45679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 260, 24), 'list')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 260, 24), list_45679, _m_45670)
# Assigning a type to the variable 'default_include_dirs' (line 260)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 260, 0), 'default_include_dirs', list_45679)

# Assigning a ListComp to a Name (line 261):

# Assigning a ListComp to a Name (line 261):
# Calculating list comprehension
# Calculating comprehension expression
# Getting the type of 'default_src_dirs' (line 261)
default_src_dirs_45687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 33), 'default_src_dirs')
comprehension_45688 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 261, 20), default_src_dirs_45687)
# Assigning a type to the variable '_m' (line 261)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 261, 20), '_m', comprehension_45688)

# Call to isdir(...): (line 261)
# Processing the call arguments (line 261)
# Getting the type of '_m' (line 261)
_m_45684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 67), '_m', False)
# Processing the call keyword arguments (line 261)
kwargs_45685 = {}
# Getting the type of 'os' (line 261)
os_45681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 53), 'os', False)
# Obtaining the member 'path' of a type (line 261)
path_45682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 261, 53), os_45681, 'path')
# Obtaining the member 'isdir' of a type (line 261)
isdir_45683 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 261, 53), path_45682, 'isdir')
# Calling isdir(args, kwargs) (line 261)
isdir_call_result_45686 = invoke(stypy.reporting.localization.Localization(__file__, 261, 53), isdir_45683, *[_m_45684], **kwargs_45685)

# Getting the type of '_m' (line 261)
_m_45680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 20), '_m')
list_45689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 261, 20), 'list')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 261, 20), list_45689, _m_45680)
# Assigning a type to the variable 'default_src_dirs' (line 261)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 261, 0), 'default_src_dirs', list_45689)

# Assigning a Call to a Name (line 263):

# Assigning a Call to a Name (line 263):

# Call to get_shared_lib_extension(...): (line 263)
# Processing the call keyword arguments (line 263)
kwargs_45691 = {}
# Getting the type of 'get_shared_lib_extension' (line 263)
get_shared_lib_extension_45690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 9), 'get_shared_lib_extension', False)
# Calling get_shared_lib_extension(args, kwargs) (line 263)
get_shared_lib_extension_call_result_45692 = invoke(stypy.reporting.localization.Localization(__file__, 263, 9), get_shared_lib_extension_45690, *[], **kwargs_45691)

# Assigning a type to the variable 'so_ext' (line 263)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 263, 0), 'so_ext', get_shared_lib_extension_call_result_45692)

@norecursion
def get_standard_file(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_standard_file'
    module_type_store = module_type_store.open_function_context('get_standard_file', 266, 0, False)
    
    # Passed parameters checking function
    get_standard_file.stypy_localization = localization
    get_standard_file.stypy_type_of_self = None
    get_standard_file.stypy_type_store = module_type_store
    get_standard_file.stypy_function_name = 'get_standard_file'
    get_standard_file.stypy_param_names_list = ['fname']
    get_standard_file.stypy_varargs_param_name = None
    get_standard_file.stypy_kwargs_param_name = None
    get_standard_file.stypy_call_defaults = defaults
    get_standard_file.stypy_call_varargs = varargs
    get_standard_file.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_standard_file', ['fname'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_standard_file', localization, ['fname'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_standard_file(...)' code ##################

    str_45693 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 271, (-1)), 'str', "Returns a list of files named 'fname' from\n    1) System-wide directory (directory-location of this module)\n    2) Users HOME directory (os.environ['HOME'])\n    3) Local directory\n    ")
    
    # Assigning a List to a Name (line 273):
    
    # Assigning a List to a Name (line 273):
    
    # Obtaining an instance of the builtin type 'list' (line 273)
    list_45694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 273, 16), 'list')
    # Adding type elements to the builtin type 'list' instance (line 273)
    
    # Assigning a type to the variable 'filenames' (line 273)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 273, 4), 'filenames', list_45694)
    
    
    # SSA begins for try-except statement (line 274)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Name to a Name (line 275):
    
    # Assigning a Name to a Name (line 275):
    # Getting the type of '__file__' (line 275)
    file___45695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 12), '__file__')
    # Assigning a type to the variable 'f' (line 275)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 275, 8), 'f', file___45695)
    # SSA branch for the except part of a try statement (line 274)
    # SSA branch for the except 'NameError' branch of a try statement (line 274)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Subscript to a Name (line 277):
    
    # Assigning a Subscript to a Name (line 277):
    
    # Obtaining the type of the subscript
    int_45696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 277, 21), 'int')
    # Getting the type of 'sys' (line 277)
    sys_45697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 12), 'sys')
    # Obtaining the member 'argv' of a type (line 277)
    argv_45698 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 277, 12), sys_45697, 'argv')
    # Obtaining the member '__getitem__' of a type (line 277)
    getitem___45699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 277, 12), argv_45698, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 277)
    subscript_call_result_45700 = invoke(stypy.reporting.localization.Localization(__file__, 277, 12), getitem___45699, int_45696)
    
    # Assigning a type to the variable 'f' (line 277)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 277, 8), 'f', subscript_call_result_45700)
    # SSA branch for the else branch of a try statement (line 274)
    module_type_store.open_ssa_branch('except else')
    
    # Assigning a Call to a Name (line 279):
    
    # Assigning a Call to a Name (line 279):
    
    # Call to join(...): (line 279)
    # Processing the call arguments (line 279)
    
    # Obtaining the type of the subscript
    int_45704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 279, 65), 'int')
    
    # Call to split(...): (line 279)
    # Processing the call arguments (line 279)
    
    # Call to abspath(...): (line 279)
    # Processing the call arguments (line 279)
    # Getting the type of 'f' (line 279)
    f_45711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 61), 'f', False)
    # Processing the call keyword arguments (line 279)
    kwargs_45712 = {}
    # Getting the type of 'os' (line 279)
    os_45708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 45), 'os', False)
    # Obtaining the member 'path' of a type (line 279)
    path_45709 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 279, 45), os_45708, 'path')
    # Obtaining the member 'abspath' of a type (line 279)
    abspath_45710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 279, 45), path_45709, 'abspath')
    # Calling abspath(args, kwargs) (line 279)
    abspath_call_result_45713 = invoke(stypy.reporting.localization.Localization(__file__, 279, 45), abspath_45710, *[f_45711], **kwargs_45712)
    
    # Processing the call keyword arguments (line 279)
    kwargs_45714 = {}
    # Getting the type of 'os' (line 279)
    os_45705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 31), 'os', False)
    # Obtaining the member 'path' of a type (line 279)
    path_45706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 279, 31), os_45705, 'path')
    # Obtaining the member 'split' of a type (line 279)
    split_45707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 279, 31), path_45706, 'split')
    # Calling split(args, kwargs) (line 279)
    split_call_result_45715 = invoke(stypy.reporting.localization.Localization(__file__, 279, 31), split_45707, *[abspath_call_result_45713], **kwargs_45714)
    
    # Obtaining the member '__getitem__' of a type (line 279)
    getitem___45716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 279, 31), split_call_result_45715, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 279)
    subscript_call_result_45717 = invoke(stypy.reporting.localization.Localization(__file__, 279, 31), getitem___45716, int_45704)
    
    # Getting the type of 'fname' (line 280)
    fname_45718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 31), 'fname', False)
    # Processing the call keyword arguments (line 279)
    kwargs_45719 = {}
    # Getting the type of 'os' (line 279)
    os_45701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 18), 'os', False)
    # Obtaining the member 'path' of a type (line 279)
    path_45702 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 279, 18), os_45701, 'path')
    # Obtaining the member 'join' of a type (line 279)
    join_45703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 279, 18), path_45702, 'join')
    # Calling join(args, kwargs) (line 279)
    join_call_result_45720 = invoke(stypy.reporting.localization.Localization(__file__, 279, 18), join_45703, *[subscript_call_result_45717, fname_45718], **kwargs_45719)
    
    # Assigning a type to the variable 'sysfile' (line 279)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 279, 8), 'sysfile', join_call_result_45720)
    
    
    # Call to isfile(...): (line 281)
    # Processing the call arguments (line 281)
    # Getting the type of 'sysfile' (line 281)
    sysfile_45724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 26), 'sysfile', False)
    # Processing the call keyword arguments (line 281)
    kwargs_45725 = {}
    # Getting the type of 'os' (line 281)
    os_45721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 11), 'os', False)
    # Obtaining the member 'path' of a type (line 281)
    path_45722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 281, 11), os_45721, 'path')
    # Obtaining the member 'isfile' of a type (line 281)
    isfile_45723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 281, 11), path_45722, 'isfile')
    # Calling isfile(args, kwargs) (line 281)
    isfile_call_result_45726 = invoke(stypy.reporting.localization.Localization(__file__, 281, 11), isfile_45723, *[sysfile_45724], **kwargs_45725)
    
    # Testing the type of an if condition (line 281)
    if_condition_45727 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 281, 8), isfile_call_result_45726)
    # Assigning a type to the variable 'if_condition_45727' (line 281)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 281, 8), 'if_condition_45727', if_condition_45727)
    # SSA begins for if statement (line 281)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 282)
    # Processing the call arguments (line 282)
    # Getting the type of 'sysfile' (line 282)
    sysfile_45730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 29), 'sysfile', False)
    # Processing the call keyword arguments (line 282)
    kwargs_45731 = {}
    # Getting the type of 'filenames' (line 282)
    filenames_45728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 12), 'filenames', False)
    # Obtaining the member 'append' of a type (line 282)
    append_45729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 282, 12), filenames_45728, 'append')
    # Calling append(args, kwargs) (line 282)
    append_call_result_45732 = invoke(stypy.reporting.localization.Localization(__file__, 282, 12), append_45729, *[sysfile_45730], **kwargs_45731)
    
    # SSA join for if statement (line 281)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for try-except statement (line 274)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 286)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 287):
    
    # Assigning a Call to a Name (line 287):
    
    # Call to expanduser(...): (line 287)
    # Processing the call arguments (line 287)
    str_45736 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 287, 31), 'str', '~')
    # Processing the call keyword arguments (line 287)
    kwargs_45737 = {}
    # Getting the type of 'os' (line 287)
    os_45733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 12), 'os', False)
    # Obtaining the member 'path' of a type (line 287)
    path_45734 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 287, 12), os_45733, 'path')
    # Obtaining the member 'expanduser' of a type (line 287)
    expanduser_45735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 287, 12), path_45734, 'expanduser')
    # Calling expanduser(args, kwargs) (line 287)
    expanduser_call_result_45738 = invoke(stypy.reporting.localization.Localization(__file__, 287, 12), expanduser_45735, *[str_45736], **kwargs_45737)
    
    # Assigning a type to the variable 'f' (line 287)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 287, 8), 'f', expanduser_call_result_45738)
    # SSA branch for the except part of a try statement (line 286)
    # SSA branch for the except 'KeyError' branch of a try statement (line 286)
    module_type_store.open_ssa_branch('except')
    pass
    # SSA branch for the else branch of a try statement (line 286)
    module_type_store.open_ssa_branch('except else')
    
    # Assigning a Call to a Name (line 291):
    
    # Assigning a Call to a Name (line 291):
    
    # Call to join(...): (line 291)
    # Processing the call arguments (line 291)
    # Getting the type of 'f' (line 291)
    f_45742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 291, 33), 'f', False)
    # Getting the type of 'fname' (line 291)
    fname_45743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 291, 36), 'fname', False)
    # Processing the call keyword arguments (line 291)
    kwargs_45744 = {}
    # Getting the type of 'os' (line 291)
    os_45739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 291, 20), 'os', False)
    # Obtaining the member 'path' of a type (line 291)
    path_45740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 291, 20), os_45739, 'path')
    # Obtaining the member 'join' of a type (line 291)
    join_45741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 291, 20), path_45740, 'join')
    # Calling join(args, kwargs) (line 291)
    join_call_result_45745 = invoke(stypy.reporting.localization.Localization(__file__, 291, 20), join_45741, *[f_45742, fname_45743], **kwargs_45744)
    
    # Assigning a type to the variable 'user_file' (line 291)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 291, 8), 'user_file', join_call_result_45745)
    
    
    # Call to isfile(...): (line 292)
    # Processing the call arguments (line 292)
    # Getting the type of 'user_file' (line 292)
    user_file_45749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 26), 'user_file', False)
    # Processing the call keyword arguments (line 292)
    kwargs_45750 = {}
    # Getting the type of 'os' (line 292)
    os_45746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 11), 'os', False)
    # Obtaining the member 'path' of a type (line 292)
    path_45747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 292, 11), os_45746, 'path')
    # Obtaining the member 'isfile' of a type (line 292)
    isfile_45748 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 292, 11), path_45747, 'isfile')
    # Calling isfile(args, kwargs) (line 292)
    isfile_call_result_45751 = invoke(stypy.reporting.localization.Localization(__file__, 292, 11), isfile_45748, *[user_file_45749], **kwargs_45750)
    
    # Testing the type of an if condition (line 292)
    if_condition_45752 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 292, 8), isfile_call_result_45751)
    # Assigning a type to the variable 'if_condition_45752' (line 292)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 292, 8), 'if_condition_45752', if_condition_45752)
    # SSA begins for if statement (line 292)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 293)
    # Processing the call arguments (line 293)
    # Getting the type of 'user_file' (line 293)
    user_file_45755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 29), 'user_file', False)
    # Processing the call keyword arguments (line 293)
    kwargs_45756 = {}
    # Getting the type of 'filenames' (line 293)
    filenames_45753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 12), 'filenames', False)
    # Obtaining the member 'append' of a type (line 293)
    append_45754 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 293, 12), filenames_45753, 'append')
    # Calling append(args, kwargs) (line 293)
    append_call_result_45757 = invoke(stypy.reporting.localization.Localization(__file__, 293, 12), append_45754, *[user_file_45755], **kwargs_45756)
    
    # SSA join for if statement (line 292)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for try-except statement (line 286)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to isfile(...): (line 296)
    # Processing the call arguments (line 296)
    # Getting the type of 'fname' (line 296)
    fname_45761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 22), 'fname', False)
    # Processing the call keyword arguments (line 296)
    kwargs_45762 = {}
    # Getting the type of 'os' (line 296)
    os_45758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 7), 'os', False)
    # Obtaining the member 'path' of a type (line 296)
    path_45759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 296, 7), os_45758, 'path')
    # Obtaining the member 'isfile' of a type (line 296)
    isfile_45760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 296, 7), path_45759, 'isfile')
    # Calling isfile(args, kwargs) (line 296)
    isfile_call_result_45763 = invoke(stypy.reporting.localization.Localization(__file__, 296, 7), isfile_45760, *[fname_45761], **kwargs_45762)
    
    # Testing the type of an if condition (line 296)
    if_condition_45764 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 296, 4), isfile_call_result_45763)
    # Assigning a type to the variable 'if_condition_45764' (line 296)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 296, 4), 'if_condition_45764', if_condition_45764)
    # SSA begins for if statement (line 296)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 297)
    # Processing the call arguments (line 297)
    
    # Call to abspath(...): (line 297)
    # Processing the call arguments (line 297)
    # Getting the type of 'fname' (line 297)
    fname_45770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 41), 'fname', False)
    # Processing the call keyword arguments (line 297)
    kwargs_45771 = {}
    # Getting the type of 'os' (line 297)
    os_45767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 25), 'os', False)
    # Obtaining the member 'path' of a type (line 297)
    path_45768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 297, 25), os_45767, 'path')
    # Obtaining the member 'abspath' of a type (line 297)
    abspath_45769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 297, 25), path_45768, 'abspath')
    # Calling abspath(args, kwargs) (line 297)
    abspath_call_result_45772 = invoke(stypy.reporting.localization.Localization(__file__, 297, 25), abspath_45769, *[fname_45770], **kwargs_45771)
    
    # Processing the call keyword arguments (line 297)
    kwargs_45773 = {}
    # Getting the type of 'filenames' (line 297)
    filenames_45765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 8), 'filenames', False)
    # Obtaining the member 'append' of a type (line 297)
    append_45766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 297, 8), filenames_45765, 'append')
    # Calling append(args, kwargs) (line 297)
    append_call_result_45774 = invoke(stypy.reporting.localization.Localization(__file__, 297, 8), append_45766, *[abspath_call_result_45772], **kwargs_45773)
    
    # SSA join for if statement (line 296)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'filenames' (line 299)
    filenames_45775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 11), 'filenames')
    # Assigning a type to the variable 'stypy_return_type' (line 299)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 299, 4), 'stypy_return_type', filenames_45775)
    
    # ################# End of 'get_standard_file(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_standard_file' in the type store
    # Getting the type of 'stypy_return_type' (line 266)
    stypy_return_type_45776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 266, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_45776)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_standard_file'
    return stypy_return_type_45776

# Assigning a type to the variable 'get_standard_file' (line 266)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 266, 0), 'get_standard_file', get_standard_file)

@norecursion
def get_info(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_45777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 302, 35), 'int')
    defaults = [int_45777]
    # Create a new context for function 'get_info'
    module_type_store = module_type_store.open_function_context('get_info', 302, 0, False)
    
    # Passed parameters checking function
    get_info.stypy_localization = localization
    get_info.stypy_type_of_self = None
    get_info.stypy_type_store = module_type_store
    get_info.stypy_function_name = 'get_info'
    get_info.stypy_param_names_list = ['name', 'notfound_action']
    get_info.stypy_varargs_param_name = None
    get_info.stypy_kwargs_param_name = None
    get_info.stypy_call_defaults = defaults
    get_info.stypy_call_varargs = varargs
    get_info.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_info', ['name', 'notfound_action'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_info', localization, ['name', 'notfound_action'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_info(...)' code ##################

    str_45778 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 308, (-1)), 'str', '\n    notfound_action:\n      0 - do nothing\n      1 - display warning message\n      2 - raise error\n    ')
    
    # Assigning a Call to a Name (line 309):
    
    # Assigning a Call to a Name (line 309):
    
    # Call to get(...): (line 309)
    # Processing the call arguments (line 309)
    
    # Call to lower(...): (line 371)
    # Processing the call keyword arguments (line 371)
    kwargs_45903 = {}
    # Getting the type of 'name' (line 371)
    name_45901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 16), 'name', False)
    # Obtaining the member 'lower' of a type (line 371)
    lower_45902 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 371, 16), name_45901, 'lower')
    # Calling lower(args, kwargs) (line 371)
    lower_call_result_45904 = invoke(stypy.reporting.localization.Localization(__file__, 371, 16), lower_45902, *[], **kwargs_45903)
    
    # Getting the type of 'system_info' (line 371)
    system_info_45905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 30), 'system_info', False)
    # Processing the call keyword arguments (line 309)
    kwargs_45906 = {}
    
    # Obtaining an instance of the builtin type 'dict' (line 309)
    dict_45779 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 309, 9), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 309)
    # Adding element type (key, value) (line 309)
    str_45780 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 309, 10), 'str', 'atlas')
    # Getting the type of 'atlas_info' (line 309)
    atlas_info_45781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 19), 'atlas_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45780, atlas_info_45781))
    # Adding element type (key, value) (line 309)
    str_45782 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 310, 10), 'str', 'atlas_threads')
    # Getting the type of 'atlas_threads_info' (line 310)
    atlas_threads_info_45783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 310, 27), 'atlas_threads_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45782, atlas_threads_info_45783))
    # Adding element type (key, value) (line 309)
    str_45784 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 311, 10), 'str', 'atlas_blas')
    # Getting the type of 'atlas_blas_info' (line 311)
    atlas_blas_info_45785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 24), 'atlas_blas_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45784, atlas_blas_info_45785))
    # Adding element type (key, value) (line 309)
    str_45786 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 312, 10), 'str', 'atlas_blas_threads')
    # Getting the type of 'atlas_blas_threads_info' (line 312)
    atlas_blas_threads_info_45787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 32), 'atlas_blas_threads_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45786, atlas_blas_threads_info_45787))
    # Adding element type (key, value) (line 309)
    str_45788 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 313, 10), 'str', 'lapack_atlas')
    # Getting the type of 'lapack_atlas_info' (line 313)
    lapack_atlas_info_45789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 313, 26), 'lapack_atlas_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45788, lapack_atlas_info_45789))
    # Adding element type (key, value) (line 309)
    str_45790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 314, 10), 'str', 'lapack_atlas_threads')
    # Getting the type of 'lapack_atlas_threads_info' (line 314)
    lapack_atlas_threads_info_45791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 34), 'lapack_atlas_threads_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45790, lapack_atlas_threads_info_45791))
    # Adding element type (key, value) (line 309)
    str_45792 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 315, 10), 'str', 'atlas_3_10')
    # Getting the type of 'atlas_3_10_info' (line 315)
    atlas_3_10_info_45793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 24), 'atlas_3_10_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45792, atlas_3_10_info_45793))
    # Adding element type (key, value) (line 309)
    str_45794 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 316, 10), 'str', 'atlas_3_10_threads')
    # Getting the type of 'atlas_3_10_threads_info' (line 316)
    atlas_3_10_threads_info_45795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 32), 'atlas_3_10_threads_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45794, atlas_3_10_threads_info_45795))
    # Adding element type (key, value) (line 309)
    str_45796 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 317, 10), 'str', 'atlas_3_10_blas')
    # Getting the type of 'atlas_3_10_blas_info' (line 317)
    atlas_3_10_blas_info_45797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 29), 'atlas_3_10_blas_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45796, atlas_3_10_blas_info_45797))
    # Adding element type (key, value) (line 309)
    str_45798 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 318, 10), 'str', 'atlas_3_10_blas_threads')
    # Getting the type of 'atlas_3_10_blas_threads_info' (line 318)
    atlas_3_10_blas_threads_info_45799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 37), 'atlas_3_10_blas_threads_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45798, atlas_3_10_blas_threads_info_45799))
    # Adding element type (key, value) (line 309)
    str_45800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 319, 10), 'str', 'lapack_atlas_3_10')
    # Getting the type of 'lapack_atlas_3_10_info' (line 319)
    lapack_atlas_3_10_info_45801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 31), 'lapack_atlas_3_10_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45800, lapack_atlas_3_10_info_45801))
    # Adding element type (key, value) (line 309)
    str_45802 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 320, 10), 'str', 'lapack_atlas_3_10_threads')
    # Getting the type of 'lapack_atlas_3_10_threads_info' (line 320)
    lapack_atlas_3_10_threads_info_45803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 39), 'lapack_atlas_3_10_threads_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45802, lapack_atlas_3_10_threads_info_45803))
    # Adding element type (key, value) (line 309)
    str_45804 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 321, 10), 'str', 'mkl')
    # Getting the type of 'mkl_info' (line 321)
    mkl_info_45805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 17), 'mkl_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45804, mkl_info_45805))
    # Adding element type (key, value) (line 309)
    str_45806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 323, 10), 'str', 'openblas')
    # Getting the type of 'openblas_info' (line 323)
    openblas_info_45807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 22), 'openblas_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45806, openblas_info_45807))
    # Adding element type (key, value) (line 309)
    str_45808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 325, 10), 'str', 'openblas_lapack')
    # Getting the type of 'openblas_lapack_info' (line 325)
    openblas_lapack_info_45809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 29), 'openblas_lapack_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45808, openblas_lapack_info_45809))
    # Adding element type (key, value) (line 309)
    str_45810 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 326, 10), 'str', 'lapack_mkl')
    # Getting the type of 'lapack_mkl_info' (line 326)
    lapack_mkl_info_45811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 24), 'lapack_mkl_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45810, lapack_mkl_info_45811))
    # Adding element type (key, value) (line 309)
    str_45812 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 327, 10), 'str', 'blas_mkl')
    # Getting the type of 'blas_mkl_info' (line 327)
    blas_mkl_info_45813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 22), 'blas_mkl_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45812, blas_mkl_info_45813))
    # Adding element type (key, value) (line 309)
    str_45814 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 328, 10), 'str', 'x11')
    # Getting the type of 'x11_info' (line 328)
    x11_info_45815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 328, 17), 'x11_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45814, x11_info_45815))
    # Adding element type (key, value) (line 309)
    str_45816 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 329, 10), 'str', 'fft_opt')
    # Getting the type of 'fft_opt_info' (line 329)
    fft_opt_info_45817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 21), 'fft_opt_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45816, fft_opt_info_45817))
    # Adding element type (key, value) (line 309)
    str_45818 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 330, 10), 'str', 'fftw')
    # Getting the type of 'fftw_info' (line 330)
    fftw_info_45819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 330, 18), 'fftw_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45818, fftw_info_45819))
    # Adding element type (key, value) (line 309)
    str_45820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 331, 10), 'str', 'fftw2')
    # Getting the type of 'fftw2_info' (line 331)
    fftw2_info_45821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 19), 'fftw2_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45820, fftw2_info_45821))
    # Adding element type (key, value) (line 309)
    str_45822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 332, 10), 'str', 'fftw3')
    # Getting the type of 'fftw3_info' (line 332)
    fftw3_info_45823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 19), 'fftw3_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45822, fftw3_info_45823))
    # Adding element type (key, value) (line 309)
    str_45824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 333, 10), 'str', 'dfftw')
    # Getting the type of 'dfftw_info' (line 333)
    dfftw_info_45825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 19), 'dfftw_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45824, dfftw_info_45825))
    # Adding element type (key, value) (line 309)
    str_45826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 334, 10), 'str', 'sfftw')
    # Getting the type of 'sfftw_info' (line 334)
    sfftw_info_45827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 334, 19), 'sfftw_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45826, sfftw_info_45827))
    # Adding element type (key, value) (line 309)
    str_45828 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 335, 10), 'str', 'fftw_threads')
    # Getting the type of 'fftw_threads_info' (line 335)
    fftw_threads_info_45829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 26), 'fftw_threads_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45828, fftw_threads_info_45829))
    # Adding element type (key, value) (line 309)
    str_45830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 336, 10), 'str', 'dfftw_threads')
    # Getting the type of 'dfftw_threads_info' (line 336)
    dfftw_threads_info_45831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 27), 'dfftw_threads_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45830, dfftw_threads_info_45831))
    # Adding element type (key, value) (line 309)
    str_45832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 337, 10), 'str', 'sfftw_threads')
    # Getting the type of 'sfftw_threads_info' (line 337)
    sfftw_threads_info_45833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 337, 27), 'sfftw_threads_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45832, sfftw_threads_info_45833))
    # Adding element type (key, value) (line 309)
    str_45834 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 338, 10), 'str', 'djbfft')
    # Getting the type of 'djbfft_info' (line 338)
    djbfft_info_45835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 338, 20), 'djbfft_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45834, djbfft_info_45835))
    # Adding element type (key, value) (line 309)
    str_45836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 339, 10), 'str', 'blas')
    # Getting the type of 'blas_info' (line 339)
    blas_info_45837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 339, 18), 'blas_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45836, blas_info_45837))
    # Adding element type (key, value) (line 309)
    str_45838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 340, 10), 'str', 'lapack')
    # Getting the type of 'lapack_info' (line 340)
    lapack_info_45839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 20), 'lapack_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45838, lapack_info_45839))
    # Adding element type (key, value) (line 309)
    str_45840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 341, 10), 'str', 'lapack_src')
    # Getting the type of 'lapack_src_info' (line 341)
    lapack_src_info_45841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 24), 'lapack_src_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45840, lapack_src_info_45841))
    # Adding element type (key, value) (line 309)
    str_45842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 342, 10), 'str', 'blas_src')
    # Getting the type of 'blas_src_info' (line 342)
    blas_src_info_45843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 22), 'blas_src_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45842, blas_src_info_45843))
    # Adding element type (key, value) (line 309)
    str_45844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 343, 10), 'str', 'numpy')
    # Getting the type of 'numpy_info' (line 343)
    numpy_info_45845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 19), 'numpy_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45844, numpy_info_45845))
    # Adding element type (key, value) (line 309)
    str_45846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 344, 10), 'str', 'f2py')
    # Getting the type of 'f2py_info' (line 344)
    f2py_info_45847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 18), 'f2py_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45846, f2py_info_45847))
    # Adding element type (key, value) (line 309)
    str_45848 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 345, 10), 'str', 'Numeric')
    # Getting the type of 'Numeric_info' (line 345)
    Numeric_info_45849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 21), 'Numeric_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45848, Numeric_info_45849))
    # Adding element type (key, value) (line 309)
    str_45850 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 346, 10), 'str', 'numeric')
    # Getting the type of 'Numeric_info' (line 346)
    Numeric_info_45851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 21), 'Numeric_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45850, Numeric_info_45851))
    # Adding element type (key, value) (line 309)
    str_45852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 347, 10), 'str', 'numarray')
    # Getting the type of 'numarray_info' (line 347)
    numarray_info_45853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 347, 22), 'numarray_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45852, numarray_info_45853))
    # Adding element type (key, value) (line 309)
    str_45854 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 348, 10), 'str', 'numerix')
    # Getting the type of 'numerix_info' (line 348)
    numerix_info_45855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 348, 21), 'numerix_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45854, numerix_info_45855))
    # Adding element type (key, value) (line 309)
    str_45856 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 349, 10), 'str', 'lapack_opt')
    # Getting the type of 'lapack_opt_info' (line 349)
    lapack_opt_info_45857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 24), 'lapack_opt_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45856, lapack_opt_info_45857))
    # Adding element type (key, value) (line 309)
    str_45858 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 350, 10), 'str', 'blas_opt')
    # Getting the type of 'blas_opt_info' (line 350)
    blas_opt_info_45859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 350, 22), 'blas_opt_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45858, blas_opt_info_45859))
    # Adding element type (key, value) (line 309)
    str_45860 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 351, 10), 'str', 'boost_python')
    # Getting the type of 'boost_python_info' (line 351)
    boost_python_info_45861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 351, 26), 'boost_python_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45860, boost_python_info_45861))
    # Adding element type (key, value) (line 309)
    str_45862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 352, 10), 'str', 'agg2')
    # Getting the type of 'agg2_info' (line 352)
    agg2_info_45863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 18), 'agg2_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45862, agg2_info_45863))
    # Adding element type (key, value) (line 309)
    str_45864 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 353, 10), 'str', 'wx')
    # Getting the type of 'wx_info' (line 353)
    wx_info_45865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 353, 16), 'wx_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45864, wx_info_45865))
    # Adding element type (key, value) (line 309)
    str_45866 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 354, 10), 'str', 'gdk_pixbuf_xlib_2')
    # Getting the type of 'gdk_pixbuf_xlib_2_info' (line 354)
    gdk_pixbuf_xlib_2_info_45867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 354, 31), 'gdk_pixbuf_xlib_2_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45866, gdk_pixbuf_xlib_2_info_45867))
    # Adding element type (key, value) (line 309)
    str_45868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 355, 10), 'str', 'gdk-pixbuf-xlib-2.0')
    # Getting the type of 'gdk_pixbuf_xlib_2_info' (line 355)
    gdk_pixbuf_xlib_2_info_45869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 33), 'gdk_pixbuf_xlib_2_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45868, gdk_pixbuf_xlib_2_info_45869))
    # Adding element type (key, value) (line 309)
    str_45870 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 356, 10), 'str', 'gdk_pixbuf_2')
    # Getting the type of 'gdk_pixbuf_2_info' (line 356)
    gdk_pixbuf_2_info_45871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 26), 'gdk_pixbuf_2_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45870, gdk_pixbuf_2_info_45871))
    # Adding element type (key, value) (line 309)
    str_45872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 357, 10), 'str', 'gdk-pixbuf-2.0')
    # Getting the type of 'gdk_pixbuf_2_info' (line 357)
    gdk_pixbuf_2_info_45873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 357, 28), 'gdk_pixbuf_2_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45872, gdk_pixbuf_2_info_45873))
    # Adding element type (key, value) (line 309)
    str_45874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 358, 10), 'str', 'gdk')
    # Getting the type of 'gdk_info' (line 358)
    gdk_info_45875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 358, 17), 'gdk_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45874, gdk_info_45875))
    # Adding element type (key, value) (line 309)
    str_45876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 359, 10), 'str', 'gdk_2')
    # Getting the type of 'gdk_2_info' (line 359)
    gdk_2_info_45877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 19), 'gdk_2_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45876, gdk_2_info_45877))
    # Adding element type (key, value) (line 309)
    str_45878 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 360, 10), 'str', 'gdk-2.0')
    # Getting the type of 'gdk_2_info' (line 360)
    gdk_2_info_45879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 21), 'gdk_2_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45878, gdk_2_info_45879))
    # Adding element type (key, value) (line 309)
    str_45880 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 361, 10), 'str', 'gdk_x11_2')
    # Getting the type of 'gdk_x11_2_info' (line 361)
    gdk_x11_2_info_45881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 23), 'gdk_x11_2_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45880, gdk_x11_2_info_45881))
    # Adding element type (key, value) (line 309)
    str_45882 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 362, 10), 'str', 'gdk-x11-2.0')
    # Getting the type of 'gdk_x11_2_info' (line 362)
    gdk_x11_2_info_45883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 25), 'gdk_x11_2_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45882, gdk_x11_2_info_45883))
    # Adding element type (key, value) (line 309)
    str_45884 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 363, 10), 'str', 'gtkp_x11_2')
    # Getting the type of 'gtkp_x11_2_info' (line 363)
    gtkp_x11_2_info_45885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 24), 'gtkp_x11_2_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45884, gtkp_x11_2_info_45885))
    # Adding element type (key, value) (line 309)
    str_45886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 364, 10), 'str', 'gtk+-x11-2.0')
    # Getting the type of 'gtkp_x11_2_info' (line 364)
    gtkp_x11_2_info_45887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 26), 'gtkp_x11_2_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45886, gtkp_x11_2_info_45887))
    # Adding element type (key, value) (line 309)
    str_45888 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 365, 10), 'str', 'gtkp_2')
    # Getting the type of 'gtkp_2_info' (line 365)
    gtkp_2_info_45889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 20), 'gtkp_2_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45888, gtkp_2_info_45889))
    # Adding element type (key, value) (line 309)
    str_45890 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 366, 10), 'str', 'gtk+-2.0')
    # Getting the type of 'gtkp_2_info' (line 366)
    gtkp_2_info_45891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 22), 'gtkp_2_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45890, gtkp_2_info_45891))
    # Adding element type (key, value) (line 309)
    str_45892 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 367, 10), 'str', 'xft')
    # Getting the type of 'xft_info' (line 367)
    xft_info_45893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 17), 'xft_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45892, xft_info_45893))
    # Adding element type (key, value) (line 309)
    str_45894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 368, 10), 'str', 'freetype2')
    # Getting the type of 'freetype2_info' (line 368)
    freetype2_info_45895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 23), 'freetype2_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45894, freetype2_info_45895))
    # Adding element type (key, value) (line 309)
    str_45896 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 369, 10), 'str', 'umfpack')
    # Getting the type of 'umfpack_info' (line 369)
    umfpack_info_45897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 21), 'umfpack_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45896, umfpack_info_45897))
    # Adding element type (key, value) (line 309)
    str_45898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 370, 10), 'str', 'amd')
    # Getting the type of 'amd_info' (line 370)
    amd_info_45899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 17), 'amd_info', False)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, (str_45898, amd_info_45899))
    
    # Obtaining the member 'get' of a type (line 309)
    get_45900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 309, 9), dict_45779, 'get')
    # Calling get(args, kwargs) (line 309)
    get_call_result_45907 = invoke(stypy.reporting.localization.Localization(__file__, 309, 9), get_45900, *[lower_call_result_45904, system_info_45905], **kwargs_45906)
    
    # Assigning a type to the variable 'cl' (line 309)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 309, 4), 'cl', get_call_result_45907)
    
    # Call to get_info(...): (line 372)
    # Processing the call arguments (line 372)
    # Getting the type of 'notfound_action' (line 372)
    notfound_action_45912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 25), 'notfound_action', False)
    # Processing the call keyword arguments (line 372)
    kwargs_45913 = {}
    
    # Call to cl(...): (line 372)
    # Processing the call keyword arguments (line 372)
    kwargs_45909 = {}
    # Getting the type of 'cl' (line 372)
    cl_45908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 11), 'cl', False)
    # Calling cl(args, kwargs) (line 372)
    cl_call_result_45910 = invoke(stypy.reporting.localization.Localization(__file__, 372, 11), cl_45908, *[], **kwargs_45909)
    
    # Obtaining the member 'get_info' of a type (line 372)
    get_info_45911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 372, 11), cl_call_result_45910, 'get_info')
    # Calling get_info(args, kwargs) (line 372)
    get_info_call_result_45914 = invoke(stypy.reporting.localization.Localization(__file__, 372, 11), get_info_45911, *[notfound_action_45912], **kwargs_45913)
    
    # Assigning a type to the variable 'stypy_return_type' (line 372)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 372, 4), 'stypy_return_type', get_info_call_result_45914)
    
    # ################# End of 'get_info(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_info' in the type store
    # Getting the type of 'stypy_return_type' (line 302)
    stypy_return_type_45915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_45915)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_info'
    return stypy_return_type_45915

# Assigning a type to the variable 'get_info' (line 302)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 302, 0), 'get_info', get_info)
# Declaration of the 'NotFoundError' class
# Getting the type of 'DistutilsError' (line 375)
DistutilsError_45916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 20), 'DistutilsError')

class NotFoundError(DistutilsError_45916, ):
    str_45917 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 376, 4), 'str', 'Some third-party program or library is not found.')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 375, 0, False)
        # Assigning a type to the variable 'self' (line 376)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 376, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NotFoundError.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'NotFoundError' (line 375)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 375, 0), 'NotFoundError', NotFoundError)
# Declaration of the 'AtlasNotFoundError' class
# Getting the type of 'NotFoundError' (line 379)
NotFoundError_45918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 25), 'NotFoundError')

class AtlasNotFoundError(NotFoundError_45918, ):
    str_45919 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 384, (-1)), 'str', '\n    Atlas (http://math-atlas.sourceforge.net/) libraries not found.\n    Directories to search for the libraries can be specified in the\n    numpy/distutils/site.cfg file (section [atlas]) or by setting\n    the ATLAS environment variable.')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 379, 0, False)
        # Assigning a type to the variable 'self' (line 380)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 380, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AtlasNotFoundError.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'AtlasNotFoundError' (line 379)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 379, 0), 'AtlasNotFoundError', AtlasNotFoundError)
# Declaration of the 'LapackNotFoundError' class
# Getting the type of 'NotFoundError' (line 387)
NotFoundError_45920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 26), 'NotFoundError')

class LapackNotFoundError(NotFoundError_45920, ):
    str_45921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 392, (-1)), 'str', '\n    Lapack (http://www.netlib.org/lapack/) libraries not found.\n    Directories to search for the libraries can be specified in the\n    numpy/distutils/site.cfg file (section [lapack]) or by setting\n    the LAPACK environment variable.')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 387, 0, False)
        # Assigning a type to the variable 'self' (line 388)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 388, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LapackNotFoundError.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'LapackNotFoundError' (line 387)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 387, 0), 'LapackNotFoundError', LapackNotFoundError)
# Declaration of the 'LapackSrcNotFoundError' class
# Getting the type of 'LapackNotFoundError' (line 395)
LapackNotFoundError_45922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 29), 'LapackNotFoundError')

class LapackSrcNotFoundError(LapackNotFoundError_45922, ):
    str_45923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 400, (-1)), 'str', '\n    Lapack (http://www.netlib.org/lapack/) sources not found.\n    Directories to search for the sources can be specified in the\n    numpy/distutils/site.cfg file (section [lapack_src]) or by setting\n    the LAPACK_SRC environment variable.')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 395, 0, False)
        # Assigning a type to the variable 'self' (line 396)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 396, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LapackSrcNotFoundError.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'LapackSrcNotFoundError' (line 395)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 395, 0), 'LapackSrcNotFoundError', LapackSrcNotFoundError)
# Declaration of the 'BlasNotFoundError' class
# Getting the type of 'NotFoundError' (line 403)
NotFoundError_45924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 24), 'NotFoundError')

class BlasNotFoundError(NotFoundError_45924, ):
    str_45925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 408, (-1)), 'str', '\n    Blas (http://www.netlib.org/blas/) libraries not found.\n    Directories to search for the libraries can be specified in the\n    numpy/distutils/site.cfg file (section [blas]) or by setting\n    the BLAS environment variable.')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 403, 0, False)
        # Assigning a type to the variable 'self' (line 404)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 404, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BlasNotFoundError.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'BlasNotFoundError' (line 403)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 403, 0), 'BlasNotFoundError', BlasNotFoundError)
# Declaration of the 'BlasSrcNotFoundError' class
# Getting the type of 'BlasNotFoundError' (line 411)
BlasNotFoundError_45926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 27), 'BlasNotFoundError')

class BlasSrcNotFoundError(BlasNotFoundError_45926, ):
    str_45927 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 416, (-1)), 'str', '\n    Blas (http://www.netlib.org/blas/) sources not found.\n    Directories to search for the sources can be specified in the\n    numpy/distutils/site.cfg file (section [blas_src]) or by setting\n    the BLAS_SRC environment variable.')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 411, 0, False)
        # Assigning a type to the variable 'self' (line 412)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 412, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BlasSrcNotFoundError.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'BlasSrcNotFoundError' (line 411)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 411, 0), 'BlasSrcNotFoundError', BlasSrcNotFoundError)
# Declaration of the 'FFTWNotFoundError' class
# Getting the type of 'NotFoundError' (line 419)
NotFoundError_45928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 24), 'NotFoundError')

class FFTWNotFoundError(NotFoundError_45928, ):
    str_45929 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 424, (-1)), 'str', '\n    FFTW (http://www.fftw.org/) libraries not found.\n    Directories to search for the libraries can be specified in the\n    numpy/distutils/site.cfg file (section [fftw]) or by setting\n    the FFTW environment variable.')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 419, 0, False)
        # Assigning a type to the variable 'self' (line 420)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 420, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FFTWNotFoundError.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'FFTWNotFoundError' (line 419)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 419, 0), 'FFTWNotFoundError', FFTWNotFoundError)
# Declaration of the 'DJBFFTNotFoundError' class
# Getting the type of 'NotFoundError' (line 427)
NotFoundError_45930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 26), 'NotFoundError')

class DJBFFTNotFoundError(NotFoundError_45930, ):
    str_45931 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 432, (-1)), 'str', '\n    DJBFFT (http://cr.yp.to/djbfft.html) libraries not found.\n    Directories to search for the libraries can be specified in the\n    numpy/distutils/site.cfg file (section [djbfft]) or by setting\n    the DJBFFT environment variable.')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 427, 0, False)
        # Assigning a type to the variable 'self' (line 428)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 428, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DJBFFTNotFoundError.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'DJBFFTNotFoundError' (line 427)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 427, 0), 'DJBFFTNotFoundError', DJBFFTNotFoundError)
# Declaration of the 'NumericNotFoundError' class
# Getting the type of 'NotFoundError' (line 435)
NotFoundError_45932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 27), 'NotFoundError')

class NumericNotFoundError(NotFoundError_45932, ):
    str_45933 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 438, (-1)), 'str', '\n    Numeric (http://www.numpy.org/) module not found.\n    Get it from above location, install it, and retry setup.py.')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 435, 0, False)
        # Assigning a type to the variable 'self' (line 436)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 436, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NumericNotFoundError.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'NumericNotFoundError' (line 435)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 435, 0), 'NumericNotFoundError', NumericNotFoundError)
# Declaration of the 'X11NotFoundError' class
# Getting the type of 'NotFoundError' (line 441)
NotFoundError_45934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 23), 'NotFoundError')

class X11NotFoundError(NotFoundError_45934, ):
    str_45935 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 442, 4), 'str', 'X11 libraries not found.')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 441, 0, False)
        # Assigning a type to the variable 'self' (line 442)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 442, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'X11NotFoundError.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'X11NotFoundError' (line 441)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 441, 0), 'X11NotFoundError', X11NotFoundError)
# Declaration of the 'UmfpackNotFoundError' class
# Getting the type of 'NotFoundError' (line 445)
NotFoundError_45936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 27), 'NotFoundError')

class UmfpackNotFoundError(NotFoundError_45936, ):
    str_45937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 450, (-1)), 'str', '\n    UMFPACK sparse solver (http://www.cise.ufl.edu/research/sparse/umfpack/)\n    not found. Directories to search for the libraries can be specified in the\n    numpy/distutils/site.cfg file (section [umfpack]) or by setting\n    the UMFPACK environment variable.')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 445, 0, False)
        # Assigning a type to the variable 'self' (line 446)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 446, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'UmfpackNotFoundError.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'UmfpackNotFoundError' (line 445)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 445, 0), 'UmfpackNotFoundError', UmfpackNotFoundError)
# Declaration of the 'system_info' class

class system_info(object, ):
    str_45938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 456, (-1)), 'str', " get_info() is the only public method. Don't use others.\n    ")
    
    # Assigning a Str to a Name (line 457):
    
    # Assigning a Name to a Name (line 458):
    
    # Assigning a Num to a Name (line 459):
    
    # Assigning a Num to a Name (line 461):
    
    # Assigning a Dict to a Name (line 462):
    
    # Assigning a Name to a Name (line 464):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'default_lib_dirs' (line 467)
        default_lib_dirs_45939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 35), 'default_lib_dirs')
        # Getting the type of 'default_include_dirs' (line 468)
        default_include_dirs_45940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 39), 'default_include_dirs')
        int_45941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 469, 28), 'int')
        defaults = [default_lib_dirs_45939, default_include_dirs_45940, int_45941]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 466, 4, False)
        # Assigning a type to the variable 'self' (line 467)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 467, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'system_info.__init__', ['default_lib_dirs', 'default_include_dirs', 'verbosity'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['default_lib_dirs', 'default_include_dirs', 'verbosity'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Dict to a Attribute (line 471):
        
        # Assigning a Dict to a Attribute (line 471):
        
        # Obtaining an instance of the builtin type 'dict' (line 471)
        dict_45942 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 471, 30), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 471)
        
        # Getting the type of 'self' (line 471)
        self_45943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 8), 'self')
        # Obtaining the member '__class__' of a type (line 471)
        class___45944 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 471, 8), self_45943, '__class__')
        # Setting the type of the member 'info' of a type (line 471)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 471, 8), class___45944, 'info', dict_45942)
        
        # Assigning a List to a Attribute (line 472):
        
        # Assigning a List to a Attribute (line 472):
        
        # Obtaining an instance of the builtin type 'list' (line 472)
        list_45945 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 472, 30), 'list')
        # Adding type elements to the builtin type 'list' instance (line 472)
        
        # Getting the type of 'self' (line 472)
        self_45946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 8), 'self')
        # Setting the type of the member 'local_prefixes' of a type (line 472)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 472, 8), self_45946, 'local_prefixes', list_45945)
        
        # Assigning a Dict to a Name (line 473):
        
        # Assigning a Dict to a Name (line 473):
        
        # Obtaining an instance of the builtin type 'dict' (line 473)
        dict_45947 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 473, 19), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 473)
        # Adding element type (key, value) (line 473)
        str_45948 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 473, 20), 'str', 'library_dirs')
        
        # Call to join(...): (line 473)
        # Processing the call arguments (line 473)
        # Getting the type of 'default_lib_dirs' (line 473)
        default_lib_dirs_45952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 52), 'default_lib_dirs', False)
        # Processing the call keyword arguments (line 473)
        kwargs_45953 = {}
        # Getting the type of 'os' (line 473)
        os_45949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 36), 'os', False)
        # Obtaining the member 'pathsep' of a type (line 473)
        pathsep_45950 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 473, 36), os_45949, 'pathsep')
        # Obtaining the member 'join' of a type (line 473)
        join_45951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 473, 36), pathsep_45950, 'join')
        # Calling join(args, kwargs) (line 473)
        join_call_result_45954 = invoke(stypy.reporting.localization.Localization(__file__, 473, 36), join_45951, *[default_lib_dirs_45952], **kwargs_45953)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 473, 19), dict_45947, (str_45948, join_call_result_45954))
        # Adding element type (key, value) (line 473)
        str_45955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 474, 20), 'str', 'include_dirs')
        
        # Call to join(...): (line 474)
        # Processing the call arguments (line 474)
        # Getting the type of 'default_include_dirs' (line 474)
        default_include_dirs_45959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 52), 'default_include_dirs', False)
        # Processing the call keyword arguments (line 474)
        kwargs_45960 = {}
        # Getting the type of 'os' (line 474)
        os_45956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 36), 'os', False)
        # Obtaining the member 'pathsep' of a type (line 474)
        pathsep_45957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 474, 36), os_45956, 'pathsep')
        # Obtaining the member 'join' of a type (line 474)
        join_45958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 474, 36), pathsep_45957, 'join')
        # Calling join(args, kwargs) (line 474)
        join_call_result_45961 = invoke(stypy.reporting.localization.Localization(__file__, 474, 36), join_45958, *[default_include_dirs_45959], **kwargs_45960)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 473, 19), dict_45947, (str_45955, join_call_result_45961))
        # Adding element type (key, value) (line 473)
        str_45962 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 475, 20), 'str', 'runtime_library_dirs')
        
        # Call to join(...): (line 475)
        # Processing the call arguments (line 475)
        # Getting the type of 'default_runtime_dirs' (line 475)
        default_runtime_dirs_45966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 60), 'default_runtime_dirs', False)
        # Processing the call keyword arguments (line 475)
        kwargs_45967 = {}
        # Getting the type of 'os' (line 475)
        os_45963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 44), 'os', False)
        # Obtaining the member 'pathsep' of a type (line 475)
        pathsep_45964 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 475, 44), os_45963, 'pathsep')
        # Obtaining the member 'join' of a type (line 475)
        join_45965 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 475, 44), pathsep_45964, 'join')
        # Calling join(args, kwargs) (line 475)
        join_call_result_45968 = invoke(stypy.reporting.localization.Localization(__file__, 475, 44), join_45965, *[default_runtime_dirs_45966], **kwargs_45967)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 473, 19), dict_45947, (str_45962, join_call_result_45968))
        # Adding element type (key, value) (line 473)
        str_45969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 476, 20), 'str', 'rpath')
        str_45970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 476, 29), 'str', '')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 473, 19), dict_45947, (str_45969, str_45970))
        # Adding element type (key, value) (line 473)
        str_45971 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 477, 20), 'str', 'src_dirs')
        
        # Call to join(...): (line 477)
        # Processing the call arguments (line 477)
        # Getting the type of 'default_src_dirs' (line 477)
        default_src_dirs_45975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 48), 'default_src_dirs', False)
        # Processing the call keyword arguments (line 477)
        kwargs_45976 = {}
        # Getting the type of 'os' (line 477)
        os_45972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 32), 'os', False)
        # Obtaining the member 'pathsep' of a type (line 477)
        pathsep_45973 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 477, 32), os_45972, 'pathsep')
        # Obtaining the member 'join' of a type (line 477)
        join_45974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 477, 32), pathsep_45973, 'join')
        # Calling join(args, kwargs) (line 477)
        join_call_result_45977 = invoke(stypy.reporting.localization.Localization(__file__, 477, 32), join_45974, *[default_src_dirs_45975], **kwargs_45976)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 473, 19), dict_45947, (str_45971, join_call_result_45977))
        # Adding element type (key, value) (line 473)
        str_45978 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 478, 20), 'str', 'search_static_first')
        
        # Call to str(...): (line 478)
        # Processing the call arguments (line 478)
        # Getting the type of 'self' (line 478)
        self_45980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 47), 'self', False)
        # Obtaining the member 'search_static_first' of a type (line 478)
        search_static_first_45981 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 478, 47), self_45980, 'search_static_first')
        # Processing the call keyword arguments (line 478)
        kwargs_45982 = {}
        # Getting the type of 'str' (line 478)
        str_45979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 43), 'str', False)
        # Calling str(args, kwargs) (line 478)
        str_call_result_45983 = invoke(stypy.reporting.localization.Localization(__file__, 478, 43), str_45979, *[search_static_first_45981], **kwargs_45982)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 473, 19), dict_45947, (str_45978, str_call_result_45983))
        # Adding element type (key, value) (line 473)
        str_45984 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 479, 20), 'str', 'extra_compile_args')
        str_45985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 479, 42), 'str', '')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 473, 19), dict_45947, (str_45984, str_45985))
        # Adding element type (key, value) (line 473)
        str_45986 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 479, 46), 'str', 'extra_link_args')
        str_45987 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 479, 65), 'str', '')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 473, 19), dict_45947, (str_45986, str_45987))
        
        # Assigning a type to the variable 'defaults' (line 473)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 473, 8), 'defaults', dict_45947)
        
        # Assigning a Call to a Attribute (line 480):
        
        # Assigning a Call to a Attribute (line 480):
        
        # Call to ConfigParser(...): (line 480)
        # Processing the call arguments (line 480)
        # Getting the type of 'defaults' (line 480)
        defaults_45989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 31), 'defaults', False)
        # Processing the call keyword arguments (line 480)
        kwargs_45990 = {}
        # Getting the type of 'ConfigParser' (line 480)
        ConfigParser_45988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 18), 'ConfigParser', False)
        # Calling ConfigParser(args, kwargs) (line 480)
        ConfigParser_call_result_45991 = invoke(stypy.reporting.localization.Localization(__file__, 480, 18), ConfigParser_45988, *[defaults_45989], **kwargs_45990)
        
        # Getting the type of 'self' (line 480)
        self_45992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 8), 'self')
        # Setting the type of the member 'cp' of a type (line 480)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 480, 8), self_45992, 'cp', ConfigParser_call_result_45991)
        
        # Assigning a List to a Attribute (line 481):
        
        # Assigning a List to a Attribute (line 481):
        
        # Obtaining an instance of the builtin type 'list' (line 481)
        list_45993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 481, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 481)
        
        # Getting the type of 'self' (line 481)
        self_45994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 8), 'self')
        # Setting the type of the member 'files' of a type (line 481)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 481, 8), self_45994, 'files', list_45993)
        
        # Call to extend(...): (line 482)
        # Processing the call arguments (line 482)
        
        # Call to get_standard_file(...): (line 482)
        # Processing the call arguments (line 482)
        str_45999 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 482, 44), 'str', '.numpy-site.cfg')
        # Processing the call keyword arguments (line 482)
        kwargs_46000 = {}
        # Getting the type of 'get_standard_file' (line 482)
        get_standard_file_45998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 26), 'get_standard_file', False)
        # Calling get_standard_file(args, kwargs) (line 482)
        get_standard_file_call_result_46001 = invoke(stypy.reporting.localization.Localization(__file__, 482, 26), get_standard_file_45998, *[str_45999], **kwargs_46000)
        
        # Processing the call keyword arguments (line 482)
        kwargs_46002 = {}
        # Getting the type of 'self' (line 482)
        self_45995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 8), 'self', False)
        # Obtaining the member 'files' of a type (line 482)
        files_45996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 482, 8), self_45995, 'files')
        # Obtaining the member 'extend' of a type (line 482)
        extend_45997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 482, 8), files_45996, 'extend')
        # Calling extend(args, kwargs) (line 482)
        extend_call_result_46003 = invoke(stypy.reporting.localization.Localization(__file__, 482, 8), extend_45997, *[get_standard_file_call_result_46001], **kwargs_46002)
        
        
        # Call to extend(...): (line 483)
        # Processing the call arguments (line 483)
        
        # Call to get_standard_file(...): (line 483)
        # Processing the call arguments (line 483)
        str_46008 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 483, 44), 'str', 'site.cfg')
        # Processing the call keyword arguments (line 483)
        kwargs_46009 = {}
        # Getting the type of 'get_standard_file' (line 483)
        get_standard_file_46007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 26), 'get_standard_file', False)
        # Calling get_standard_file(args, kwargs) (line 483)
        get_standard_file_call_result_46010 = invoke(stypy.reporting.localization.Localization(__file__, 483, 26), get_standard_file_46007, *[str_46008], **kwargs_46009)
        
        # Processing the call keyword arguments (line 483)
        kwargs_46011 = {}
        # Getting the type of 'self' (line 483)
        self_46004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 8), 'self', False)
        # Obtaining the member 'files' of a type (line 483)
        files_46005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 483, 8), self_46004, 'files')
        # Obtaining the member 'extend' of a type (line 483)
        extend_46006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 483, 8), files_46005, 'extend')
        # Calling extend(args, kwargs) (line 483)
        extend_call_result_46012 = invoke(stypy.reporting.localization.Localization(__file__, 483, 8), extend_46006, *[get_standard_file_call_result_46010], **kwargs_46011)
        
        
        # Call to parse_config_files(...): (line 484)
        # Processing the call keyword arguments (line 484)
        kwargs_46015 = {}
        # Getting the type of 'self' (line 484)
        self_46013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 8), 'self', False)
        # Obtaining the member 'parse_config_files' of a type (line 484)
        parse_config_files_46014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 484, 8), self_46013, 'parse_config_files')
        # Calling parse_config_files(args, kwargs) (line 484)
        parse_config_files_call_result_46016 = invoke(stypy.reporting.localization.Localization(__file__, 484, 8), parse_config_files_46014, *[], **kwargs_46015)
        
        
        
        # Getting the type of 'self' (line 485)
        self_46017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 11), 'self')
        # Obtaining the member 'section' of a type (line 485)
        section_46018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 485, 11), self_46017, 'section')
        # Getting the type of 'None' (line 485)
        None_46019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 31), 'None')
        # Applying the binary operator 'isnot' (line 485)
        result_is_not_46020 = python_operator(stypy.reporting.localization.Localization(__file__, 485, 11), 'isnot', section_46018, None_46019)
        
        # Testing the type of an if condition (line 485)
        if_condition_46021 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 485, 8), result_is_not_46020)
        # Assigning a type to the variable 'if_condition_46021' (line 485)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 485, 8), 'if_condition_46021', if_condition_46021)
        # SSA begins for if statement (line 485)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 486):
        
        # Assigning a Call to a Attribute (line 486):
        
        # Call to getboolean(...): (line 486)
        # Processing the call arguments (line 486)
        # Getting the type of 'self' (line 487)
        self_46025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 16), 'self', False)
        # Obtaining the member 'section' of a type (line 487)
        section_46026 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 487, 16), self_46025, 'section')
        str_46027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 487, 30), 'str', 'search_static_first')
        # Processing the call keyword arguments (line 486)
        kwargs_46028 = {}
        # Getting the type of 'self' (line 486)
        self_46022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 39), 'self', False)
        # Obtaining the member 'cp' of a type (line 486)
        cp_46023 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 486, 39), self_46022, 'cp')
        # Obtaining the member 'getboolean' of a type (line 486)
        getboolean_46024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 486, 39), cp_46023, 'getboolean')
        # Calling getboolean(args, kwargs) (line 486)
        getboolean_call_result_46029 = invoke(stypy.reporting.localization.Localization(__file__, 486, 39), getboolean_46024, *[section_46026, str_46027], **kwargs_46028)
        
        # Getting the type of 'self' (line 486)
        self_46030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 12), 'self')
        # Setting the type of the member 'search_static_first' of a type (line 486)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 486, 12), self_46030, 'search_static_first', getboolean_call_result_46029)
        # SSA join for if statement (line 485)
        module_type_store = module_type_store.join_ssa_context()
        
        # Evaluating assert statement condition
        
        # Call to isinstance(...): (line 488)
        # Processing the call arguments (line 488)
        # Getting the type of 'self' (line 488)
        self_46032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 26), 'self', False)
        # Obtaining the member 'search_static_first' of a type (line 488)
        search_static_first_46033 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 488, 26), self_46032, 'search_static_first')
        # Getting the type of 'int' (line 488)
        int_46034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 52), 'int', False)
        # Processing the call keyword arguments (line 488)
        kwargs_46035 = {}
        # Getting the type of 'isinstance' (line 488)
        isinstance_46031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 488)
        isinstance_call_result_46036 = invoke(stypy.reporting.localization.Localization(__file__, 488, 15), isinstance_46031, *[search_static_first_46033, int_46034], **kwargs_46035)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def parse_config_files(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'parse_config_files'
        module_type_store = module_type_store.open_function_context('parse_config_files', 490, 4, False)
        # Assigning a type to the variable 'self' (line 491)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 491, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        system_info.parse_config_files.__dict__.__setitem__('stypy_localization', localization)
        system_info.parse_config_files.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        system_info.parse_config_files.__dict__.__setitem__('stypy_type_store', module_type_store)
        system_info.parse_config_files.__dict__.__setitem__('stypy_function_name', 'system_info.parse_config_files')
        system_info.parse_config_files.__dict__.__setitem__('stypy_param_names_list', [])
        system_info.parse_config_files.__dict__.__setitem__('stypy_varargs_param_name', None)
        system_info.parse_config_files.__dict__.__setitem__('stypy_kwargs_param_name', None)
        system_info.parse_config_files.__dict__.__setitem__('stypy_call_defaults', defaults)
        system_info.parse_config_files.__dict__.__setitem__('stypy_call_varargs', varargs)
        system_info.parse_config_files.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        system_info.parse_config_files.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'system_info.parse_config_files', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'parse_config_files', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'parse_config_files(...)' code ##################

        
        # Call to read(...): (line 491)
        # Processing the call arguments (line 491)
        # Getting the type of 'self' (line 491)
        self_46040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 21), 'self', False)
        # Obtaining the member 'files' of a type (line 491)
        files_46041 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 491, 21), self_46040, 'files')
        # Processing the call keyword arguments (line 491)
        kwargs_46042 = {}
        # Getting the type of 'self' (line 491)
        self_46037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 8), 'self', False)
        # Obtaining the member 'cp' of a type (line 491)
        cp_46038 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 491, 8), self_46037, 'cp')
        # Obtaining the member 'read' of a type (line 491)
        read_46039 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 491, 8), cp_46038, 'read')
        # Calling read(args, kwargs) (line 491)
        read_call_result_46043 = invoke(stypy.reporting.localization.Localization(__file__, 491, 8), read_46039, *[files_46041], **kwargs_46042)
        
        
        
        
        # Call to has_section(...): (line 492)
        # Processing the call arguments (line 492)
        # Getting the type of 'self' (line 492)
        self_46047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 35), 'self', False)
        # Obtaining the member 'section' of a type (line 492)
        section_46048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 492, 35), self_46047, 'section')
        # Processing the call keyword arguments (line 492)
        kwargs_46049 = {}
        # Getting the type of 'self' (line 492)
        self_46044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 15), 'self', False)
        # Obtaining the member 'cp' of a type (line 492)
        cp_46045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 492, 15), self_46044, 'cp')
        # Obtaining the member 'has_section' of a type (line 492)
        has_section_46046 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 492, 15), cp_46045, 'has_section')
        # Calling has_section(args, kwargs) (line 492)
        has_section_call_result_46050 = invoke(stypy.reporting.localization.Localization(__file__, 492, 15), has_section_46046, *[section_46048], **kwargs_46049)
        
        # Applying the 'not' unary operator (line 492)
        result_not__46051 = python_operator(stypy.reporting.localization.Localization(__file__, 492, 11), 'not', has_section_call_result_46050)
        
        # Testing the type of an if condition (line 492)
        if_condition_46052 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 492, 8), result_not__46051)
        # Assigning a type to the variable 'if_condition_46052' (line 492)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 492, 8), 'if_condition_46052', if_condition_46052)
        # SSA begins for if statement (line 492)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'self' (line 493)
        self_46053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 15), 'self')
        # Obtaining the member 'section' of a type (line 493)
        section_46054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 493, 15), self_46053, 'section')
        # Getting the type of 'None' (line 493)
        None_46055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 35), 'None')
        # Applying the binary operator 'isnot' (line 493)
        result_is_not_46056 = python_operator(stypy.reporting.localization.Localization(__file__, 493, 15), 'isnot', section_46054, None_46055)
        
        # Testing the type of an if condition (line 493)
        if_condition_46057 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 493, 12), result_is_not_46056)
        # Assigning a type to the variable 'if_condition_46057' (line 493)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 493, 12), 'if_condition_46057', if_condition_46057)
        # SSA begins for if statement (line 493)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to add_section(...): (line 494)
        # Processing the call arguments (line 494)
        # Getting the type of 'self' (line 494)
        self_46061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 36), 'self', False)
        # Obtaining the member 'section' of a type (line 494)
        section_46062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 494, 36), self_46061, 'section')
        # Processing the call keyword arguments (line 494)
        kwargs_46063 = {}
        # Getting the type of 'self' (line 494)
        self_46058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 16), 'self', False)
        # Obtaining the member 'cp' of a type (line 494)
        cp_46059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 494, 16), self_46058, 'cp')
        # Obtaining the member 'add_section' of a type (line 494)
        add_section_46060 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 494, 16), cp_46059, 'add_section')
        # Calling add_section(args, kwargs) (line 494)
        add_section_call_result_46064 = invoke(stypy.reporting.localization.Localization(__file__, 494, 16), add_section_46060, *[section_46062], **kwargs_46063)
        
        # SSA join for if statement (line 493)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 492)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'parse_config_files(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'parse_config_files' in the type store
        # Getting the type of 'stypy_return_type' (line 490)
        stypy_return_type_46065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_46065)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'parse_config_files'
        return stypy_return_type_46065


    @norecursion
    def calc_libraries_info(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'calc_libraries_info'
        module_type_store = module_type_store.open_function_context('calc_libraries_info', 496, 4, False)
        # Assigning a type to the variable 'self' (line 497)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 497, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        system_info.calc_libraries_info.__dict__.__setitem__('stypy_localization', localization)
        system_info.calc_libraries_info.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        system_info.calc_libraries_info.__dict__.__setitem__('stypy_type_store', module_type_store)
        system_info.calc_libraries_info.__dict__.__setitem__('stypy_function_name', 'system_info.calc_libraries_info')
        system_info.calc_libraries_info.__dict__.__setitem__('stypy_param_names_list', [])
        system_info.calc_libraries_info.__dict__.__setitem__('stypy_varargs_param_name', None)
        system_info.calc_libraries_info.__dict__.__setitem__('stypy_kwargs_param_name', None)
        system_info.calc_libraries_info.__dict__.__setitem__('stypy_call_defaults', defaults)
        system_info.calc_libraries_info.__dict__.__setitem__('stypy_call_varargs', varargs)
        system_info.calc_libraries_info.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        system_info.calc_libraries_info.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'system_info.calc_libraries_info', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'calc_libraries_info', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'calc_libraries_info(...)' code ##################

        
        # Assigning a Call to a Name (line 497):
        
        # Assigning a Call to a Name (line 497):
        
        # Call to get_libraries(...): (line 497)
        # Processing the call keyword arguments (line 497)
        kwargs_46068 = {}
        # Getting the type of 'self' (line 497)
        self_46066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 15), 'self', False)
        # Obtaining the member 'get_libraries' of a type (line 497)
        get_libraries_46067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 497, 15), self_46066, 'get_libraries')
        # Calling get_libraries(args, kwargs) (line 497)
        get_libraries_call_result_46069 = invoke(stypy.reporting.localization.Localization(__file__, 497, 15), get_libraries_46067, *[], **kwargs_46068)
        
        # Assigning a type to the variable 'libs' (line 497)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 497, 8), 'libs', get_libraries_call_result_46069)
        
        # Assigning a Call to a Name (line 498):
        
        # Assigning a Call to a Name (line 498):
        
        # Call to get_lib_dirs(...): (line 498)
        # Processing the call keyword arguments (line 498)
        kwargs_46072 = {}
        # Getting the type of 'self' (line 498)
        self_46070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 15), 'self', False)
        # Obtaining the member 'get_lib_dirs' of a type (line 498)
        get_lib_dirs_46071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 498, 15), self_46070, 'get_lib_dirs')
        # Calling get_lib_dirs(args, kwargs) (line 498)
        get_lib_dirs_call_result_46073 = invoke(stypy.reporting.localization.Localization(__file__, 498, 15), get_lib_dirs_46071, *[], **kwargs_46072)
        
        # Assigning a type to the variable 'dirs' (line 498)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 498, 8), 'dirs', get_lib_dirs_call_result_46073)
        
        # Assigning a Call to a Name (line 500):
        
        # Assigning a Call to a Name (line 500):
        
        # Call to get_runtime_lib_dirs(...): (line 500)
        # Processing the call keyword arguments (line 500)
        kwargs_46076 = {}
        # Getting the type of 'self' (line 500)
        self_46074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 17), 'self', False)
        # Obtaining the member 'get_runtime_lib_dirs' of a type (line 500)
        get_runtime_lib_dirs_46075 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 500, 17), self_46074, 'get_runtime_lib_dirs')
        # Calling get_runtime_lib_dirs(args, kwargs) (line 500)
        get_runtime_lib_dirs_call_result_46077 = invoke(stypy.reporting.localization.Localization(__file__, 500, 17), get_runtime_lib_dirs_46075, *[], **kwargs_46076)
        
        # Assigning a type to the variable 'r_dirs' (line 500)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 500, 8), 'r_dirs', get_runtime_lib_dirs_call_result_46077)
        
        # Call to extend(...): (line 503)
        # Processing the call arguments (line 503)
        
        # Call to get_runtime_lib_dirs(...): (line 503)
        # Processing the call keyword arguments (line 503)
        str_46082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 503, 52), 'str', 'rpath')
        keyword_46083 = str_46082
        kwargs_46084 = {'key': keyword_46083}
        # Getting the type of 'self' (line 503)
        self_46080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 22), 'self', False)
        # Obtaining the member 'get_runtime_lib_dirs' of a type (line 503)
        get_runtime_lib_dirs_46081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 503, 22), self_46080, 'get_runtime_lib_dirs')
        # Calling get_runtime_lib_dirs(args, kwargs) (line 503)
        get_runtime_lib_dirs_call_result_46085 = invoke(stypy.reporting.localization.Localization(__file__, 503, 22), get_runtime_lib_dirs_46081, *[], **kwargs_46084)
        
        # Processing the call keyword arguments (line 503)
        kwargs_46086 = {}
        # Getting the type of 'r_dirs' (line 503)
        r_dirs_46078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 8), 'r_dirs', False)
        # Obtaining the member 'extend' of a type (line 503)
        extend_46079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 503, 8), r_dirs_46078, 'extend')
        # Calling extend(args, kwargs) (line 503)
        extend_call_result_46087 = invoke(stypy.reporting.localization.Localization(__file__, 503, 8), extend_46079, *[get_runtime_lib_dirs_call_result_46085], **kwargs_46086)
        
        
        # Assigning a Dict to a Name (line 504):
        
        # Assigning a Dict to a Name (line 504):
        
        # Obtaining an instance of the builtin type 'dict' (line 504)
        dict_46088 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 504, 15), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 504)
        
        # Assigning a type to the variable 'info' (line 504)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 504, 8), 'info', dict_46088)
        
        # Getting the type of 'libs' (line 505)
        libs_46089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 505, 19), 'libs')
        # Testing the type of a for loop iterable (line 505)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 505, 8), libs_46089)
        # Getting the type of the for loop variable (line 505)
        for_loop_var_46090 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 505, 8), libs_46089)
        # Assigning a type to the variable 'lib' (line 505)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 505, 8), 'lib', for_loop_var_46090)
        # SSA begins for a for statement (line 505)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 506):
        
        # Assigning a Call to a Name (line 506):
        
        # Call to check_libs(...): (line 506)
        # Processing the call arguments (line 506)
        # Getting the type of 'dirs' (line 506)
        dirs_46093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 32), 'dirs', False)
        
        # Obtaining an instance of the builtin type 'list' (line 506)
        list_46094 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 506, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 506)
        # Adding element type (line 506)
        # Getting the type of 'lib' (line 506)
        lib_46095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 39), 'lib', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 506, 38), list_46094, lib_46095)
        
        # Processing the call keyword arguments (line 506)
        kwargs_46096 = {}
        # Getting the type of 'self' (line 506)
        self_46091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 16), 'self', False)
        # Obtaining the member 'check_libs' of a type (line 506)
        check_libs_46092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 506, 16), self_46091, 'check_libs')
        # Calling check_libs(args, kwargs) (line 506)
        check_libs_call_result_46097 = invoke(stypy.reporting.localization.Localization(__file__, 506, 16), check_libs_46092, *[dirs_46093, list_46094], **kwargs_46096)
        
        # Assigning a type to the variable 'i' (line 506)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 506, 12), 'i', check_libs_call_result_46097)
        
        # Type idiom detected: calculating its left and rigth part (line 507)
        # Getting the type of 'i' (line 507)
        i_46098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 507, 12), 'i')
        # Getting the type of 'None' (line 507)
        None_46099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 507, 24), 'None')
        
        (may_be_46100, more_types_in_union_46101) = may_not_be_none(i_46098, None_46099)

        if may_be_46100:

            if more_types_in_union_46101:
                # Runtime conditional SSA (line 507)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to dict_append(...): (line 508)
            # Processing the call arguments (line 508)
            # Getting the type of 'info' (line 508)
            info_46103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 28), 'info', False)
            # Processing the call keyword arguments (line 508)
            # Getting the type of 'i' (line 508)
            i_46104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 36), 'i', False)
            kwargs_46105 = {'i_46104': i_46104}
            # Getting the type of 'dict_append' (line 508)
            dict_append_46102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 16), 'dict_append', False)
            # Calling dict_append(args, kwargs) (line 508)
            dict_append_call_result_46106 = invoke(stypy.reporting.localization.Localization(__file__, 508, 16), dict_append_46102, *[info_46103], **kwargs_46105)
            

            if more_types_in_union_46101:
                # Runtime conditional SSA for else branch (line 507)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_46100) or more_types_in_union_46101):
            
            # Call to info(...): (line 510)
            # Processing the call arguments (line 510)
            str_46109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 510, 25), 'str', 'Library %s was not found. Ignoring')
            # Getting the type of 'lib' (line 510)
            lib_46110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 65), 'lib', False)
            # Applying the binary operator '%' (line 510)
            result_mod_46111 = python_operator(stypy.reporting.localization.Localization(__file__, 510, 25), '%', str_46109, lib_46110)
            
            # Processing the call keyword arguments (line 510)
            kwargs_46112 = {}
            # Getting the type of 'log' (line 510)
            log_46107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 16), 'log', False)
            # Obtaining the member 'info' of a type (line 510)
            info_46108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 510, 16), log_46107, 'info')
            # Calling info(args, kwargs) (line 510)
            info_call_result_46113 = invoke(stypy.reporting.localization.Localization(__file__, 510, 16), info_46108, *[result_mod_46111], **kwargs_46112)
            

            if (may_be_46100 and more_types_in_union_46101):
                # SSA join for if statement (line 507)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 511):
        
        # Assigning a Call to a Name (line 511):
        
        # Call to check_libs(...): (line 511)
        # Processing the call arguments (line 511)
        # Getting the type of 'r_dirs' (line 511)
        r_dirs_46116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 32), 'r_dirs', False)
        
        # Obtaining an instance of the builtin type 'list' (line 511)
        list_46117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 511, 40), 'list')
        # Adding type elements to the builtin type 'list' instance (line 511)
        # Adding element type (line 511)
        # Getting the type of 'lib' (line 511)
        lib_46118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 41), 'lib', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 511, 40), list_46117, lib_46118)
        
        # Processing the call keyword arguments (line 511)
        kwargs_46119 = {}
        # Getting the type of 'self' (line 511)
        self_46114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 16), 'self', False)
        # Obtaining the member 'check_libs' of a type (line 511)
        check_libs_46115 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 511, 16), self_46114, 'check_libs')
        # Calling check_libs(args, kwargs) (line 511)
        check_libs_call_result_46120 = invoke(stypy.reporting.localization.Localization(__file__, 511, 16), check_libs_46115, *[r_dirs_46116, list_46117], **kwargs_46119)
        
        # Assigning a type to the variable 'i' (line 511)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 511, 12), 'i', check_libs_call_result_46120)
        
        # Type idiom detected: calculating its left and rigth part (line 512)
        # Getting the type of 'i' (line 512)
        i_46121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 12), 'i')
        # Getting the type of 'None' (line 512)
        None_46122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 24), 'None')
        
        (may_be_46123, more_types_in_union_46124) = may_not_be_none(i_46121, None_46122)

        if may_be_46123:

            if more_types_in_union_46124:
                # Runtime conditional SSA (line 512)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Deleting a member
            # Getting the type of 'i' (line 517)
            i_46125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 20), 'i')
            
            # Obtaining the type of the subscript
            str_46126 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 517, 22), 'str', 'libraries')
            # Getting the type of 'i' (line 517)
            i_46127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 20), 'i')
            # Obtaining the member '__getitem__' of a type (line 517)
            getitem___46128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 517, 20), i_46127, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 517)
            subscript_call_result_46129 = invoke(stypy.reporting.localization.Localization(__file__, 517, 20), getitem___46128, str_46126)
            
            del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 517, 16), i_46125, subscript_call_result_46129)
            
            # Assigning a Call to a Subscript (line 518):
            
            # Assigning a Call to a Subscript (line 518):
            
            # Call to pop(...): (line 518)
            # Processing the call arguments (line 518)
            str_46132 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 518, 50), 'str', 'library_dirs')
            # Processing the call keyword arguments (line 518)
            kwargs_46133 = {}
            # Getting the type of 'i' (line 518)
            i_46130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 44), 'i', False)
            # Obtaining the member 'pop' of a type (line 518)
            pop_46131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 518, 44), i_46130, 'pop')
            # Calling pop(args, kwargs) (line 518)
            pop_call_result_46134 = invoke(stypy.reporting.localization.Localization(__file__, 518, 44), pop_46131, *[str_46132], **kwargs_46133)
            
            # Getting the type of 'i' (line 518)
            i_46135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 16), 'i')
            str_46136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 518, 18), 'str', 'runtime_library_dirs')
            # Storing an element on a container (line 518)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 518, 16), i_46135, (str_46136, pop_call_result_46134))
            
            # Call to dict_append(...): (line 519)
            # Processing the call arguments (line 519)
            # Getting the type of 'info' (line 519)
            info_46138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 28), 'info', False)
            # Processing the call keyword arguments (line 519)
            # Getting the type of 'i' (line 519)
            i_46139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 36), 'i', False)
            kwargs_46140 = {'i_46139': i_46139}
            # Getting the type of 'dict_append' (line 519)
            dict_append_46137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 16), 'dict_append', False)
            # Calling dict_append(args, kwargs) (line 519)
            dict_append_call_result_46141 = invoke(stypy.reporting.localization.Localization(__file__, 519, 16), dict_append_46137, *[info_46138], **kwargs_46140)
            

            if more_types_in_union_46124:
                # Runtime conditional SSA for else branch (line 512)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_46123) or more_types_in_union_46124):
            
            # Call to info(...): (line 521)
            # Processing the call arguments (line 521)
            str_46144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 521, 25), 'str', 'Runtime library %s was not found. Ignoring')
            # Getting the type of 'lib' (line 521)
            lib_46145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 73), 'lib', False)
            # Applying the binary operator '%' (line 521)
            result_mod_46146 = python_operator(stypy.reporting.localization.Localization(__file__, 521, 25), '%', str_46144, lib_46145)
            
            # Processing the call keyword arguments (line 521)
            kwargs_46147 = {}
            # Getting the type of 'log' (line 521)
            log_46142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 16), 'log', False)
            # Obtaining the member 'info' of a type (line 521)
            info_46143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 521, 16), log_46142, 'info')
            # Calling info(args, kwargs) (line 521)
            info_call_result_46148 = invoke(stypy.reporting.localization.Localization(__file__, 521, 16), info_46143, *[result_mod_46146], **kwargs_46147)
            

            if (may_be_46123 and more_types_in_union_46124):
                # SSA join for if statement (line 512)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'info' (line 522)
        info_46149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 15), 'info')
        # Assigning a type to the variable 'stypy_return_type' (line 522)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 522, 8), 'stypy_return_type', info_46149)
        
        # ################# End of 'calc_libraries_info(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'calc_libraries_info' in the type store
        # Getting the type of 'stypy_return_type' (line 496)
        stypy_return_type_46150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_46150)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'calc_libraries_info'
        return stypy_return_type_46150


    @norecursion
    def set_info(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_info'
        module_type_store = module_type_store.open_function_context('set_info', 524, 4, False)
        # Assigning a type to the variable 'self' (line 525)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 525, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        system_info.set_info.__dict__.__setitem__('stypy_localization', localization)
        system_info.set_info.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        system_info.set_info.__dict__.__setitem__('stypy_type_store', module_type_store)
        system_info.set_info.__dict__.__setitem__('stypy_function_name', 'system_info.set_info')
        system_info.set_info.__dict__.__setitem__('stypy_param_names_list', [])
        system_info.set_info.__dict__.__setitem__('stypy_varargs_param_name', None)
        system_info.set_info.__dict__.__setitem__('stypy_kwargs_param_name', 'info')
        system_info.set_info.__dict__.__setitem__('stypy_call_defaults', defaults)
        system_info.set_info.__dict__.__setitem__('stypy_call_varargs', varargs)
        system_info.set_info.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        system_info.set_info.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'system_info.set_info', [], None, 'info', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_info', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_info(...)' code ##################

        
        # Getting the type of 'info' (line 525)
        info_46151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 11), 'info')
        # Testing the type of an if condition (line 525)
        if_condition_46152 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 525, 8), info_46151)
        # Assigning a type to the variable 'if_condition_46152' (line 525)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 525, 8), 'if_condition_46152', if_condition_46152)
        # SSA begins for if statement (line 525)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 526):
        
        # Assigning a Call to a Name (line 526):
        
        # Call to calc_libraries_info(...): (line 526)
        # Processing the call keyword arguments (line 526)
        kwargs_46155 = {}
        # Getting the type of 'self' (line 526)
        self_46153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 526, 23), 'self', False)
        # Obtaining the member 'calc_libraries_info' of a type (line 526)
        calc_libraries_info_46154 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 526, 23), self_46153, 'calc_libraries_info')
        # Calling calc_libraries_info(args, kwargs) (line 526)
        calc_libraries_info_call_result_46156 = invoke(stypy.reporting.localization.Localization(__file__, 526, 23), calc_libraries_info_46154, *[], **kwargs_46155)
        
        # Assigning a type to the variable 'lib_info' (line 526)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 526, 12), 'lib_info', calc_libraries_info_call_result_46156)
        
        # Call to dict_append(...): (line 527)
        # Processing the call arguments (line 527)
        # Getting the type of 'info' (line 527)
        info_46158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 24), 'info', False)
        # Processing the call keyword arguments (line 527)
        # Getting the type of 'lib_info' (line 527)
        lib_info_46159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 32), 'lib_info', False)
        kwargs_46160 = {'lib_info_46159': lib_info_46159}
        # Getting the type of 'dict_append' (line 527)
        dict_append_46157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 12), 'dict_append', False)
        # Calling dict_append(args, kwargs) (line 527)
        dict_append_call_result_46161 = invoke(stypy.reporting.localization.Localization(__file__, 527, 12), dict_append_46157, *[info_46158], **kwargs_46160)
        
        
        # Assigning a Call to a Name (line 529):
        
        # Assigning a Call to a Name (line 529):
        
        # Call to calc_extra_info(...): (line 529)
        # Processing the call keyword arguments (line 529)
        kwargs_46164 = {}
        # Getting the type of 'self' (line 529)
        self_46162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 25), 'self', False)
        # Obtaining the member 'calc_extra_info' of a type (line 529)
        calc_extra_info_46163 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 529, 25), self_46162, 'calc_extra_info')
        # Calling calc_extra_info(args, kwargs) (line 529)
        calc_extra_info_call_result_46165 = invoke(stypy.reporting.localization.Localization(__file__, 529, 25), calc_extra_info_46163, *[], **kwargs_46164)
        
        # Assigning a type to the variable 'extra_info' (line 529)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 529, 12), 'extra_info', calc_extra_info_call_result_46165)
        
        # Call to dict_append(...): (line 530)
        # Processing the call arguments (line 530)
        # Getting the type of 'info' (line 530)
        info_46167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 24), 'info', False)
        # Processing the call keyword arguments (line 530)
        # Getting the type of 'extra_info' (line 530)
        extra_info_46168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 32), 'extra_info', False)
        kwargs_46169 = {'extra_info_46168': extra_info_46168}
        # Getting the type of 'dict_append' (line 530)
        dict_append_46166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 12), 'dict_append', False)
        # Calling dict_append(args, kwargs) (line 530)
        dict_append_call_result_46170 = invoke(stypy.reporting.localization.Localization(__file__, 530, 12), dict_append_46166, *[info_46167], **kwargs_46169)
        
        # SSA join for if statement (line 525)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Subscript (line 531):
        
        # Assigning a Name to a Subscript (line 531):
        # Getting the type of 'info' (line 531)
        info_46171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 54), 'info')
        # Getting the type of 'self' (line 531)
        self_46172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 8), 'self')
        # Obtaining the member 'saved_results' of a type (line 531)
        saved_results_46173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 531, 8), self_46172, 'saved_results')
        # Getting the type of 'self' (line 531)
        self_46174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 27), 'self')
        # Obtaining the member '__class__' of a type (line 531)
        class___46175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 531, 27), self_46174, '__class__')
        # Obtaining the member '__name__' of a type (line 531)
        name___46176 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 531, 27), class___46175, '__name__')
        # Storing an element on a container (line 531)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 531, 8), saved_results_46173, (name___46176, info_46171))
        
        # ################# End of 'set_info(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_info' in the type store
        # Getting the type of 'stypy_return_type' (line 524)
        stypy_return_type_46177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_46177)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_info'
        return stypy_return_type_46177


    @norecursion
    def has_info(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'has_info'
        module_type_store = module_type_store.open_function_context('has_info', 533, 4, False)
        # Assigning a type to the variable 'self' (line 534)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 534, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        system_info.has_info.__dict__.__setitem__('stypy_localization', localization)
        system_info.has_info.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        system_info.has_info.__dict__.__setitem__('stypy_type_store', module_type_store)
        system_info.has_info.__dict__.__setitem__('stypy_function_name', 'system_info.has_info')
        system_info.has_info.__dict__.__setitem__('stypy_param_names_list', [])
        system_info.has_info.__dict__.__setitem__('stypy_varargs_param_name', None)
        system_info.has_info.__dict__.__setitem__('stypy_kwargs_param_name', None)
        system_info.has_info.__dict__.__setitem__('stypy_call_defaults', defaults)
        system_info.has_info.__dict__.__setitem__('stypy_call_varargs', varargs)
        system_info.has_info.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        system_info.has_info.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'system_info.has_info', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'has_info', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'has_info(...)' code ##################

        
        # Getting the type of 'self' (line 534)
        self_46178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 15), 'self')
        # Obtaining the member '__class__' of a type (line 534)
        class___46179 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 534, 15), self_46178, '__class__')
        # Obtaining the member '__name__' of a type (line 534)
        name___46180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 534, 15), class___46179, '__name__')
        # Getting the type of 'self' (line 534)
        self_46181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 42), 'self')
        # Obtaining the member 'saved_results' of a type (line 534)
        saved_results_46182 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 534, 42), self_46181, 'saved_results')
        # Applying the binary operator 'in' (line 534)
        result_contains_46183 = python_operator(stypy.reporting.localization.Localization(__file__, 534, 15), 'in', name___46180, saved_results_46182)
        
        # Assigning a type to the variable 'stypy_return_type' (line 534)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 534, 8), 'stypy_return_type', result_contains_46183)
        
        # ################# End of 'has_info(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'has_info' in the type store
        # Getting the type of 'stypy_return_type' (line 533)
        stypy_return_type_46184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_46184)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'has_info'
        return stypy_return_type_46184


    @norecursion
    def calc_extra_info(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'calc_extra_info'
        module_type_store = module_type_store.open_function_context('calc_extra_info', 536, 4, False)
        # Assigning a type to the variable 'self' (line 537)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 537, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        system_info.calc_extra_info.__dict__.__setitem__('stypy_localization', localization)
        system_info.calc_extra_info.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        system_info.calc_extra_info.__dict__.__setitem__('stypy_type_store', module_type_store)
        system_info.calc_extra_info.__dict__.__setitem__('stypy_function_name', 'system_info.calc_extra_info')
        system_info.calc_extra_info.__dict__.__setitem__('stypy_param_names_list', [])
        system_info.calc_extra_info.__dict__.__setitem__('stypy_varargs_param_name', None)
        system_info.calc_extra_info.__dict__.__setitem__('stypy_kwargs_param_name', None)
        system_info.calc_extra_info.__dict__.__setitem__('stypy_call_defaults', defaults)
        system_info.calc_extra_info.__dict__.__setitem__('stypy_call_varargs', varargs)
        system_info.calc_extra_info.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        system_info.calc_extra_info.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'system_info.calc_extra_info', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'calc_extra_info', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'calc_extra_info(...)' code ##################

        str_46185 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 541, (-1)), 'str', ' Updates the information in the current information with\n        respect to these flags:\n          extra_compile_args\n          extra_link_args\n        ')
        
        # Assigning a Dict to a Name (line 542):
        
        # Assigning a Dict to a Name (line 542):
        
        # Obtaining an instance of the builtin type 'dict' (line 542)
        dict_46186 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 542, 15), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 542)
        
        # Assigning a type to the variable 'info' (line 542)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 542, 8), 'info', dict_46186)
        
        
        # Obtaining an instance of the builtin type 'list' (line 543)
        list_46187 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 543, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 543)
        # Adding element type (line 543)
        str_46188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 543, 20), 'str', 'extra_compile_args')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 543, 19), list_46187, str_46188)
        # Adding element type (line 543)
        str_46189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 543, 42), 'str', 'extra_link_args')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 543, 19), list_46187, str_46189)
        
        # Testing the type of a for loop iterable (line 543)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 543, 8), list_46187)
        # Getting the type of the for loop variable (line 543)
        for_loop_var_46190 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 543, 8), list_46187)
        # Assigning a type to the variable 'key' (line 543)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 543, 8), 'key', for_loop_var_46190)
        # SSA begins for a for statement (line 543)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 545):
        
        # Assigning a Call to a Name (line 545):
        
        # Call to get(...): (line 545)
        # Processing the call arguments (line 545)
        # Getting the type of 'self' (line 545)
        self_46194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 545, 30), 'self', False)
        # Obtaining the member 'section' of a type (line 545)
        section_46195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 545, 30), self_46194, 'section')
        # Getting the type of 'key' (line 545)
        key_46196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 545, 44), 'key', False)
        # Processing the call keyword arguments (line 545)
        kwargs_46197 = {}
        # Getting the type of 'self' (line 545)
        self_46191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 545, 18), 'self', False)
        # Obtaining the member 'cp' of a type (line 545)
        cp_46192 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 545, 18), self_46191, 'cp')
        # Obtaining the member 'get' of a type (line 545)
        get_46193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 545, 18), cp_46192, 'get')
        # Calling get(args, kwargs) (line 545)
        get_call_result_46198 = invoke(stypy.reporting.localization.Localization(__file__, 545, 18), get_46193, *[section_46195, key_46196], **kwargs_46197)
        
        # Assigning a type to the variable 'opt' (line 545)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 545, 12), 'opt', get_call_result_46198)
        
        # Getting the type of 'opt' (line 546)
        opt_46199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 15), 'opt')
        # Testing the type of an if condition (line 546)
        if_condition_46200 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 546, 12), opt_46199)
        # Assigning a type to the variable 'if_condition_46200' (line 546)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 546, 12), 'if_condition_46200', if_condition_46200)
        # SSA begins for if statement (line 546)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Dict to a Name (line 547):
        
        # Assigning a Dict to a Name (line 547):
        
        # Obtaining an instance of the builtin type 'dict' (line 547)
        dict_46201 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 547, 22), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 547)
        # Adding element type (key, value) (line 547)
        # Getting the type of 'key' (line 547)
        key_46202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 23), 'key')
        
        # Obtaining an instance of the builtin type 'list' (line 547)
        list_46203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 547, 29), 'list')
        # Adding type elements to the builtin type 'list' instance (line 547)
        # Adding element type (line 547)
        # Getting the type of 'opt' (line 547)
        opt_46204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 30), 'opt')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 547, 29), list_46203, opt_46204)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 547, 22), dict_46201, (key_46202, list_46203))
        
        # Assigning a type to the variable 'tmp' (line 547)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 547, 16), 'tmp', dict_46201)
        
        # Call to dict_append(...): (line 548)
        # Processing the call arguments (line 548)
        # Getting the type of 'info' (line 548)
        info_46206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 28), 'info', False)
        # Processing the call keyword arguments (line 548)
        # Getting the type of 'tmp' (line 548)
        tmp_46207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 36), 'tmp', False)
        kwargs_46208 = {'tmp_46207': tmp_46207}
        # Getting the type of 'dict_append' (line 548)
        dict_append_46205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 16), 'dict_append', False)
        # Calling dict_append(args, kwargs) (line 548)
        dict_append_call_result_46209 = invoke(stypy.reporting.localization.Localization(__file__, 548, 16), dict_append_46205, *[info_46206], **kwargs_46208)
        
        # SSA join for if statement (line 546)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'info' (line 549)
        info_46210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 15), 'info')
        # Assigning a type to the variable 'stypy_return_type' (line 549)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 549, 8), 'stypy_return_type', info_46210)
        
        # ################# End of 'calc_extra_info(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'calc_extra_info' in the type store
        # Getting the type of 'stypy_return_type' (line 536)
        stypy_return_type_46211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 536, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_46211)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'calc_extra_info'
        return stypy_return_type_46211


    @norecursion
    def get_info(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_46212 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 551, 39), 'int')
        defaults = [int_46212]
        # Create a new context for function 'get_info'
        module_type_store = module_type_store.open_function_context('get_info', 551, 4, False)
        # Assigning a type to the variable 'self' (line 552)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 552, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        system_info.get_info.__dict__.__setitem__('stypy_localization', localization)
        system_info.get_info.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        system_info.get_info.__dict__.__setitem__('stypy_type_store', module_type_store)
        system_info.get_info.__dict__.__setitem__('stypy_function_name', 'system_info.get_info')
        system_info.get_info.__dict__.__setitem__('stypy_param_names_list', ['notfound_action'])
        system_info.get_info.__dict__.__setitem__('stypy_varargs_param_name', None)
        system_info.get_info.__dict__.__setitem__('stypy_kwargs_param_name', None)
        system_info.get_info.__dict__.__setitem__('stypy_call_defaults', defaults)
        system_info.get_info.__dict__.__setitem__('stypy_call_varargs', varargs)
        system_info.get_info.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        system_info.get_info.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'system_info.get_info', ['notfound_action'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_info', localization, ['notfound_action'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_info(...)' code ##################

        str_46213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 554, (-1)), 'str', ' Return a dictonary with items that are compatible\n            with numpy.distutils.setup keyword arguments.\n        ')
        
        # Assigning a Num to a Name (line 555):
        
        # Assigning a Num to a Name (line 555):
        int_46214 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 555, 15), 'int')
        # Assigning a type to the variable 'flag' (line 555)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 555, 8), 'flag', int_46214)
        
        
        
        # Call to has_info(...): (line 556)
        # Processing the call keyword arguments (line 556)
        kwargs_46217 = {}
        # Getting the type of 'self' (line 556)
        self_46215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 15), 'self', False)
        # Obtaining the member 'has_info' of a type (line 556)
        has_info_46216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 556, 15), self_46215, 'has_info')
        # Calling has_info(args, kwargs) (line 556)
        has_info_call_result_46218 = invoke(stypy.reporting.localization.Localization(__file__, 556, 15), has_info_46216, *[], **kwargs_46217)
        
        # Applying the 'not' unary operator (line 556)
        result_not__46219 = python_operator(stypy.reporting.localization.Localization(__file__, 556, 11), 'not', has_info_call_result_46218)
        
        # Testing the type of an if condition (line 556)
        if_condition_46220 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 556, 8), result_not__46219)
        # Assigning a type to the variable 'if_condition_46220' (line 556)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 556, 8), 'if_condition_46220', if_condition_46220)
        # SSA begins for if statement (line 556)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 557):
        
        # Assigning a Num to a Name (line 557):
        int_46221 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 557, 19), 'int')
        # Assigning a type to the variable 'flag' (line 557)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 557, 12), 'flag', int_46221)
        
        # Call to info(...): (line 558)
        # Processing the call arguments (line 558)
        # Getting the type of 'self' (line 558)
        self_46224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 558, 21), 'self', False)
        # Obtaining the member '__class__' of a type (line 558)
        class___46225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 558, 21), self_46224, '__class__')
        # Obtaining the member '__name__' of a type (line 558)
        name___46226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 558, 21), class___46225, '__name__')
        str_46227 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 558, 47), 'str', ':')
        # Applying the binary operator '+' (line 558)
        result_add_46228 = python_operator(stypy.reporting.localization.Localization(__file__, 558, 21), '+', name___46226, str_46227)
        
        # Processing the call keyword arguments (line 558)
        kwargs_46229 = {}
        # Getting the type of 'log' (line 558)
        log_46222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 558, 12), 'log', False)
        # Obtaining the member 'info' of a type (line 558)
        info_46223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 558, 12), log_46222, 'info')
        # Calling info(args, kwargs) (line 558)
        info_call_result_46230 = invoke(stypy.reporting.localization.Localization(__file__, 558, 12), info_46223, *[result_add_46228], **kwargs_46229)
        
        
        # Type idiom detected: calculating its left and rigth part (line 559)
        str_46231 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 559, 29), 'str', 'calc_info')
        # Getting the type of 'self' (line 559)
        self_46232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 23), 'self')
        
        (may_be_46233, more_types_in_union_46234) = may_provide_member(str_46231, self_46232)

        if may_be_46233:

            if more_types_in_union_46234:
                # Runtime conditional SSA (line 559)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'self' (line 559)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 559, 12), 'self', remove_not_member_provider_from_union(self_46232, 'calc_info'))
            
            # Call to calc_info(...): (line 560)
            # Processing the call keyword arguments (line 560)
            kwargs_46237 = {}
            # Getting the type of 'self' (line 560)
            self_46235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 16), 'self', False)
            # Obtaining the member 'calc_info' of a type (line 560)
            calc_info_46236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 560, 16), self_46235, 'calc_info')
            # Calling calc_info(args, kwargs) (line 560)
            calc_info_call_result_46238 = invoke(stypy.reporting.localization.Localization(__file__, 560, 16), calc_info_46236, *[], **kwargs_46237)
            

            if more_types_in_union_46234:
                # SSA join for if statement (line 559)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Getting the type of 'notfound_action' (line 561)
        notfound_action_46239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 15), 'notfound_action')
        # Testing the type of an if condition (line 561)
        if_condition_46240 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 561, 12), notfound_action_46239)
        # Assigning a type to the variable 'if_condition_46240' (line 561)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 561, 12), 'if_condition_46240', if_condition_46240)
        # SSA begins for if statement (line 561)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        
        # Call to has_info(...): (line 562)
        # Processing the call keyword arguments (line 562)
        kwargs_46243 = {}
        # Getting the type of 'self' (line 562)
        self_46241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 23), 'self', False)
        # Obtaining the member 'has_info' of a type (line 562)
        has_info_46242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 562, 23), self_46241, 'has_info')
        # Calling has_info(args, kwargs) (line 562)
        has_info_call_result_46244 = invoke(stypy.reporting.localization.Localization(__file__, 562, 23), has_info_46242, *[], **kwargs_46243)
        
        # Applying the 'not' unary operator (line 562)
        result_not__46245 = python_operator(stypy.reporting.localization.Localization(__file__, 562, 19), 'not', has_info_call_result_46244)
        
        # Testing the type of an if condition (line 562)
        if_condition_46246 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 562, 16), result_not__46245)
        # Assigning a type to the variable 'if_condition_46246' (line 562)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 562, 16), 'if_condition_46246', if_condition_46246)
        # SSA begins for if statement (line 562)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'notfound_action' (line 563)
        notfound_action_46247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 563, 23), 'notfound_action')
        int_46248 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 563, 42), 'int')
        # Applying the binary operator '==' (line 563)
        result_eq_46249 = python_operator(stypy.reporting.localization.Localization(__file__, 563, 23), '==', notfound_action_46247, int_46248)
        
        # Testing the type of an if condition (line 563)
        if_condition_46250 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 563, 20), result_eq_46249)
        # Assigning a type to the variable 'if_condition_46250' (line 563)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 563, 20), 'if_condition_46250', if_condition_46250)
        # SSA begins for if statement (line 563)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 564)
        # Processing the call arguments (line 564)
        # Getting the type of 'self' (line 564)
        self_46253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 38), 'self', False)
        # Obtaining the member 'notfounderror' of a type (line 564)
        notfounderror_46254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 564, 38), self_46253, 'notfounderror')
        # Obtaining the member '__doc__' of a type (line 564)
        doc___46255 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 564, 38), notfounderror_46254, '__doc__')
        # Processing the call keyword arguments (line 564)
        kwargs_46256 = {}
        # Getting the type of 'warnings' (line 564)
        warnings_46251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 24), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 564)
        warn_46252 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 564, 24), warnings_46251, 'warn')
        # Calling warn(args, kwargs) (line 564)
        warn_call_result_46257 = invoke(stypy.reporting.localization.Localization(__file__, 564, 24), warn_46252, *[doc___46255], **kwargs_46256)
        
        # SSA branch for the else part of an if statement (line 563)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'notfound_action' (line 565)
        notfound_action_46258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 25), 'notfound_action')
        int_46259 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 565, 44), 'int')
        # Applying the binary operator '==' (line 565)
        result_eq_46260 = python_operator(stypy.reporting.localization.Localization(__file__, 565, 25), '==', notfound_action_46258, int_46259)
        
        # Testing the type of an if condition (line 565)
        if_condition_46261 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 565, 25), result_eq_46260)
        # Assigning a type to the variable 'if_condition_46261' (line 565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 565, 25), 'if_condition_46261', if_condition_46261)
        # SSA begins for if statement (line 565)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to notfounderror(...): (line 566)
        # Processing the call arguments (line 566)
        # Getting the type of 'self' (line 566)
        self_46264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 49), 'self', False)
        # Obtaining the member 'notfounderror' of a type (line 566)
        notfounderror_46265 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 566, 49), self_46264, 'notfounderror')
        # Obtaining the member '__doc__' of a type (line 566)
        doc___46266 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 566, 49), notfounderror_46265, '__doc__')
        # Processing the call keyword arguments (line 566)
        kwargs_46267 = {}
        # Getting the type of 'self' (line 566)
        self_46262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 30), 'self', False)
        # Obtaining the member 'notfounderror' of a type (line 566)
        notfounderror_46263 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 566, 30), self_46262, 'notfounderror')
        # Calling notfounderror(args, kwargs) (line 566)
        notfounderror_call_result_46268 = invoke(stypy.reporting.localization.Localization(__file__, 566, 30), notfounderror_46263, *[doc___46266], **kwargs_46267)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 566, 24), notfounderror_call_result_46268, 'raise parameter', BaseException)
        # SSA branch for the else part of an if statement (line 565)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 568)
        # Processing the call arguments (line 568)
        
        # Call to repr(...): (line 568)
        # Processing the call arguments (line 568)
        # Getting the type of 'notfound_action' (line 568)
        notfound_action_46271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 46), 'notfound_action', False)
        # Processing the call keyword arguments (line 568)
        kwargs_46272 = {}
        # Getting the type of 'repr' (line 568)
        repr_46270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 41), 'repr', False)
        # Calling repr(args, kwargs) (line 568)
        repr_call_result_46273 = invoke(stypy.reporting.localization.Localization(__file__, 568, 41), repr_46270, *[notfound_action_46271], **kwargs_46272)
        
        # Processing the call keyword arguments (line 568)
        kwargs_46274 = {}
        # Getting the type of 'ValueError' (line 568)
        ValueError_46269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 30), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 568)
        ValueError_call_result_46275 = invoke(stypy.reporting.localization.Localization(__file__, 568, 30), ValueError_46269, *[repr_call_result_46273], **kwargs_46274)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 568, 24), ValueError_call_result_46275, 'raise parameter', BaseException)
        # SSA join for if statement (line 565)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 563)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 562)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 561)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to has_info(...): (line 570)
        # Processing the call keyword arguments (line 570)
        kwargs_46278 = {}
        # Getting the type of 'self' (line 570)
        self_46276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 570, 19), 'self', False)
        # Obtaining the member 'has_info' of a type (line 570)
        has_info_46277 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 570, 19), self_46276, 'has_info')
        # Calling has_info(args, kwargs) (line 570)
        has_info_call_result_46279 = invoke(stypy.reporting.localization.Localization(__file__, 570, 19), has_info_46277, *[], **kwargs_46278)
        
        # Applying the 'not' unary operator (line 570)
        result_not__46280 = python_operator(stypy.reporting.localization.Localization(__file__, 570, 15), 'not', has_info_call_result_46279)
        
        # Testing the type of an if condition (line 570)
        if_condition_46281 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 570, 12), result_not__46280)
        # Assigning a type to the variable 'if_condition_46281' (line 570)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 570, 12), 'if_condition_46281', if_condition_46281)
        # SSA begins for if statement (line 570)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to info(...): (line 571)
        # Processing the call arguments (line 571)
        str_46284 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 571, 25), 'str', '  NOT AVAILABLE')
        # Processing the call keyword arguments (line 571)
        kwargs_46285 = {}
        # Getting the type of 'log' (line 571)
        log_46282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 16), 'log', False)
        # Obtaining the member 'info' of a type (line 571)
        info_46283 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 571, 16), log_46282, 'info')
        # Calling info(args, kwargs) (line 571)
        info_call_result_46286 = invoke(stypy.reporting.localization.Localization(__file__, 571, 16), info_46283, *[str_46284], **kwargs_46285)
        
        
        # Call to set_info(...): (line 572)
        # Processing the call keyword arguments (line 572)
        kwargs_46289 = {}
        # Getting the type of 'self' (line 572)
        self_46287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 16), 'self', False)
        # Obtaining the member 'set_info' of a type (line 572)
        set_info_46288 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 572, 16), self_46287, 'set_info')
        # Calling set_info(args, kwargs) (line 572)
        set_info_call_result_46290 = invoke(stypy.reporting.localization.Localization(__file__, 572, 16), set_info_46288, *[], **kwargs_46289)
        
        # SSA branch for the else part of an if statement (line 570)
        module_type_store.open_ssa_branch('else')
        
        # Call to info(...): (line 574)
        # Processing the call arguments (line 574)
        str_46293 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 574, 25), 'str', '  FOUND:')
        # Processing the call keyword arguments (line 574)
        kwargs_46294 = {}
        # Getting the type of 'log' (line 574)
        log_46291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 16), 'log', False)
        # Obtaining the member 'info' of a type (line 574)
        info_46292 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 574, 16), log_46291, 'info')
        # Calling info(args, kwargs) (line 574)
        info_call_result_46295 = invoke(stypy.reporting.localization.Localization(__file__, 574, 16), info_46292, *[str_46293], **kwargs_46294)
        
        # SSA join for if statement (line 570)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 556)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 576):
        
        # Assigning a Call to a Name (line 576):
        
        # Call to get(...): (line 576)
        # Processing the call arguments (line 576)
        # Getting the type of 'self' (line 576)
        self_46299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 576, 37), 'self', False)
        # Obtaining the member '__class__' of a type (line 576)
        class___46300 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 576, 37), self_46299, '__class__')
        # Obtaining the member '__name__' of a type (line 576)
        name___46301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 576, 37), class___46300, '__name__')
        # Processing the call keyword arguments (line 576)
        kwargs_46302 = {}
        # Getting the type of 'self' (line 576)
        self_46296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 576, 14), 'self', False)
        # Obtaining the member 'saved_results' of a type (line 576)
        saved_results_46297 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 576, 14), self_46296, 'saved_results')
        # Obtaining the member 'get' of a type (line 576)
        get_46298 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 576, 14), saved_results_46297, 'get')
        # Calling get(args, kwargs) (line 576)
        get_call_result_46303 = invoke(stypy.reporting.localization.Localization(__file__, 576, 14), get_46298, *[name___46301], **kwargs_46302)
        
        # Assigning a type to the variable 'res' (line 576)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 576, 8), 'res', get_call_result_46303)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 577)
        self_46304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 11), 'self')
        # Obtaining the member 'verbosity' of a type (line 577)
        verbosity_46305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 577, 11), self_46304, 'verbosity')
        int_46306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 577, 28), 'int')
        # Applying the binary operator '>' (line 577)
        result_gt_46307 = python_operator(stypy.reporting.localization.Localization(__file__, 577, 11), '>', verbosity_46305, int_46306)
        
        # Getting the type of 'flag' (line 577)
        flag_46308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 34), 'flag')
        # Applying the binary operator 'and' (line 577)
        result_and_keyword_46309 = python_operator(stypy.reporting.localization.Localization(__file__, 577, 11), 'and', result_gt_46307, flag_46308)
        
        # Testing the type of an if condition (line 577)
        if_condition_46310 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 577, 8), result_and_keyword_46309)
        # Assigning a type to the variable 'if_condition_46310' (line 577)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 577, 8), 'if_condition_46310', if_condition_46310)
        # SSA begins for if statement (line 577)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to items(...): (line 578)
        # Processing the call keyword arguments (line 578)
        kwargs_46313 = {}
        # Getting the type of 'res' (line 578)
        res_46311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 24), 'res', False)
        # Obtaining the member 'items' of a type (line 578)
        items_46312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 578, 24), res_46311, 'items')
        # Calling items(args, kwargs) (line 578)
        items_call_result_46314 = invoke(stypy.reporting.localization.Localization(__file__, 578, 24), items_46312, *[], **kwargs_46313)
        
        # Testing the type of a for loop iterable (line 578)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 578, 12), items_call_result_46314)
        # Getting the type of the for loop variable (line 578)
        for_loop_var_46315 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 578, 12), items_call_result_46314)
        # Assigning a type to the variable 'k' (line 578)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 578, 12), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 578, 12), for_loop_var_46315))
        # Assigning a type to the variable 'v' (line 578)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 578, 12), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 578, 12), for_loop_var_46315))
        # SSA begins for a for statement (line 578)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 579):
        
        # Assigning a Call to a Name (line 579):
        
        # Call to str(...): (line 579)
        # Processing the call arguments (line 579)
        # Getting the type of 'v' (line 579)
        v_46317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 24), 'v', False)
        # Processing the call keyword arguments (line 579)
        kwargs_46318 = {}
        # Getting the type of 'str' (line 579)
        str_46316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 20), 'str', False)
        # Calling str(args, kwargs) (line 579)
        str_call_result_46319 = invoke(stypy.reporting.localization.Localization(__file__, 579, 20), str_46316, *[v_46317], **kwargs_46318)
        
        # Assigning a type to the variable 'v' (line 579)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 579, 16), 'v', str_call_result_46319)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'k' (line 580)
        k_46320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 19), 'k')
        
        # Obtaining an instance of the builtin type 'list' (line 580)
        list_46321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 580, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 580)
        # Adding element type (line 580)
        str_46322 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 580, 25), 'str', 'sources')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 580, 24), list_46321, str_46322)
        # Adding element type (line 580)
        str_46323 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 580, 36), 'str', 'libraries')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 580, 24), list_46321, str_46323)
        
        # Applying the binary operator 'in' (line 580)
        result_contains_46324 = python_operator(stypy.reporting.localization.Localization(__file__, 580, 19), 'in', k_46320, list_46321)
        
        
        
        # Call to len(...): (line 580)
        # Processing the call arguments (line 580)
        # Getting the type of 'v' (line 580)
        v_46326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 57), 'v', False)
        # Processing the call keyword arguments (line 580)
        kwargs_46327 = {}
        # Getting the type of 'len' (line 580)
        len_46325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 53), 'len', False)
        # Calling len(args, kwargs) (line 580)
        len_call_result_46328 = invoke(stypy.reporting.localization.Localization(__file__, 580, 53), len_46325, *[v_46326], **kwargs_46327)
        
        int_46329 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 580, 62), 'int')
        # Applying the binary operator '>' (line 580)
        result_gt_46330 = python_operator(stypy.reporting.localization.Localization(__file__, 580, 53), '>', len_call_result_46328, int_46329)
        
        # Applying the binary operator 'and' (line 580)
        result_and_keyword_46331 = python_operator(stypy.reporting.localization.Localization(__file__, 580, 19), 'and', result_contains_46324, result_gt_46330)
        
        # Testing the type of an if condition (line 580)
        if_condition_46332 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 580, 16), result_and_keyword_46331)
        # Assigning a type to the variable 'if_condition_46332' (line 580)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 580, 16), 'if_condition_46332', if_condition_46332)
        # SSA begins for if statement (line 580)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 581):
        
        # Assigning a BinOp to a Name (line 581):
        
        # Obtaining the type of the subscript
        int_46333 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 581, 27), 'int')
        slice_46334 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 581, 24), None, int_46333, None)
        # Getting the type of 'v' (line 581)
        v_46335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 24), 'v')
        # Obtaining the member '__getitem__' of a type (line 581)
        getitem___46336 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 581, 24), v_46335, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 581)
        subscript_call_result_46337 = invoke(stypy.reporting.localization.Localization(__file__, 581, 24), getitem___46336, slice_46334)
        
        str_46338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 581, 34), 'str', '...\n...\n...')
        # Applying the binary operator '+' (line 581)
        result_add_46339 = python_operator(stypy.reporting.localization.Localization(__file__, 581, 24), '+', subscript_call_result_46337, str_46338)
        
        
        # Obtaining the type of the subscript
        int_46340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 581, 54), 'int')
        slice_46341 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 581, 52), int_46340, None, None)
        # Getting the type of 'v' (line 581)
        v_46342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 52), 'v')
        # Obtaining the member '__getitem__' of a type (line 581)
        getitem___46343 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 581, 52), v_46342, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 581)
        subscript_call_result_46344 = invoke(stypy.reporting.localization.Localization(__file__, 581, 52), getitem___46343, slice_46341)
        
        # Applying the binary operator '+' (line 581)
        result_add_46345 = python_operator(stypy.reporting.localization.Localization(__file__, 581, 50), '+', result_add_46339, subscript_call_result_46344)
        
        # Assigning a type to the variable 'v' (line 581)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 581, 20), 'v', result_add_46345)
        # SSA join for if statement (line 580)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to info(...): (line 582)
        # Processing the call arguments (line 582)
        str_46348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 582, 25), 'str', '    %s = %s')
        # Getting the type of 'k' (line 582)
        k_46349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 40), 'k', False)
        # Getting the type of 'v' (line 582)
        v_46350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 43), 'v', False)
        # Processing the call keyword arguments (line 582)
        kwargs_46351 = {}
        # Getting the type of 'log' (line 582)
        log_46346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 16), 'log', False)
        # Obtaining the member 'info' of a type (line 582)
        info_46347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 582, 16), log_46346, 'info')
        # Calling info(args, kwargs) (line 582)
        info_call_result_46352 = invoke(stypy.reporting.localization.Localization(__file__, 582, 16), info_46347, *[str_46348, k_46349, v_46350], **kwargs_46351)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to info(...): (line 583)
        # Processing the call arguments (line 583)
        str_46355 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 583, 21), 'str', '')
        # Processing the call keyword arguments (line 583)
        kwargs_46356 = {}
        # Getting the type of 'log' (line 583)
        log_46353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 583, 12), 'log', False)
        # Obtaining the member 'info' of a type (line 583)
        info_46354 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 583, 12), log_46353, 'info')
        # Calling info(args, kwargs) (line 583)
        info_call_result_46357 = invoke(stypy.reporting.localization.Localization(__file__, 583, 12), info_46354, *[str_46355], **kwargs_46356)
        
        # SSA join for if statement (line 577)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to deepcopy(...): (line 585)
        # Processing the call arguments (line 585)
        # Getting the type of 'res' (line 585)
        res_46360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 29), 'res', False)
        # Processing the call keyword arguments (line 585)
        kwargs_46361 = {}
        # Getting the type of 'copy' (line 585)
        copy_46358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 15), 'copy', False)
        # Obtaining the member 'deepcopy' of a type (line 585)
        deepcopy_46359 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 585, 15), copy_46358, 'deepcopy')
        # Calling deepcopy(args, kwargs) (line 585)
        deepcopy_call_result_46362 = invoke(stypy.reporting.localization.Localization(__file__, 585, 15), deepcopy_46359, *[res_46360], **kwargs_46361)
        
        # Assigning a type to the variable 'stypy_return_type' (line 585)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 585, 8), 'stypy_return_type', deepcopy_call_result_46362)
        
        # ################# End of 'get_info(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_info' in the type store
        # Getting the type of 'stypy_return_type' (line 551)
        stypy_return_type_46363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_46363)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_info'
        return stypy_return_type_46363


    @norecursion
    def get_paths(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_paths'
        module_type_store = module_type_store.open_function_context('get_paths', 587, 4, False)
        # Assigning a type to the variable 'self' (line 588)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 588, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        system_info.get_paths.__dict__.__setitem__('stypy_localization', localization)
        system_info.get_paths.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        system_info.get_paths.__dict__.__setitem__('stypy_type_store', module_type_store)
        system_info.get_paths.__dict__.__setitem__('stypy_function_name', 'system_info.get_paths')
        system_info.get_paths.__dict__.__setitem__('stypy_param_names_list', ['section', 'key'])
        system_info.get_paths.__dict__.__setitem__('stypy_varargs_param_name', None)
        system_info.get_paths.__dict__.__setitem__('stypy_kwargs_param_name', None)
        system_info.get_paths.__dict__.__setitem__('stypy_call_defaults', defaults)
        system_info.get_paths.__dict__.__setitem__('stypy_call_varargs', varargs)
        system_info.get_paths.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        system_info.get_paths.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'system_info.get_paths', ['section', 'key'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_paths', localization, ['section', 'key'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_paths(...)' code ##################

        
        # Assigning a Call to a Name (line 588):
        
        # Assigning a Call to a Name (line 588):
        
        # Call to split(...): (line 588)
        # Processing the call arguments (line 588)
        # Getting the type of 'os' (line 588)
        os_46372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 47), 'os', False)
        # Obtaining the member 'pathsep' of a type (line 588)
        pathsep_46373 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 588, 47), os_46372, 'pathsep')
        # Processing the call keyword arguments (line 588)
        kwargs_46374 = {}
        
        # Call to get(...): (line 588)
        # Processing the call arguments (line 588)
        # Getting the type of 'section' (line 588)
        section_46367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 27), 'section', False)
        # Getting the type of 'key' (line 588)
        key_46368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 36), 'key', False)
        # Processing the call keyword arguments (line 588)
        kwargs_46369 = {}
        # Getting the type of 'self' (line 588)
        self_46364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 15), 'self', False)
        # Obtaining the member 'cp' of a type (line 588)
        cp_46365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 588, 15), self_46364, 'cp')
        # Obtaining the member 'get' of a type (line 588)
        get_46366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 588, 15), cp_46365, 'get')
        # Calling get(args, kwargs) (line 588)
        get_call_result_46370 = invoke(stypy.reporting.localization.Localization(__file__, 588, 15), get_46366, *[section_46367, key_46368], **kwargs_46369)
        
        # Obtaining the member 'split' of a type (line 588)
        split_46371 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 588, 15), get_call_result_46370, 'split')
        # Calling split(args, kwargs) (line 588)
        split_call_result_46375 = invoke(stypy.reporting.localization.Localization(__file__, 588, 15), split_46371, *[pathsep_46373], **kwargs_46374)
        
        # Assigning a type to the variable 'dirs' (line 588)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 588, 8), 'dirs', split_call_result_46375)
        
        # Assigning a Attribute to a Name (line 589):
        
        # Assigning a Attribute to a Name (line 589):
        # Getting the type of 'self' (line 589)
        self_46376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 18), 'self')
        # Obtaining the member 'dir_env_var' of a type (line 589)
        dir_env_var_46377 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 589, 18), self_46376, 'dir_env_var')
        # Assigning a type to the variable 'env_var' (line 589)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 589, 8), 'env_var', dir_env_var_46377)
        
        # Getting the type of 'env_var' (line 590)
        env_var_46378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 11), 'env_var')
        # Testing the type of an if condition (line 590)
        if_condition_46379 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 590, 8), env_var_46378)
        # Assigning a type to the variable 'if_condition_46379' (line 590)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 590, 8), 'if_condition_46379', if_condition_46379)
        # SSA begins for if statement (line 590)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to is_sequence(...): (line 591)
        # Processing the call arguments (line 591)
        # Getting the type of 'env_var' (line 591)
        env_var_46381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 27), 'env_var', False)
        # Processing the call keyword arguments (line 591)
        kwargs_46382 = {}
        # Getting the type of 'is_sequence' (line 591)
        is_sequence_46380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 15), 'is_sequence', False)
        # Calling is_sequence(args, kwargs) (line 591)
        is_sequence_call_result_46383 = invoke(stypy.reporting.localization.Localization(__file__, 591, 15), is_sequence_46380, *[env_var_46381], **kwargs_46382)
        
        # Testing the type of an if condition (line 591)
        if_condition_46384 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 591, 12), is_sequence_call_result_46383)
        # Assigning a type to the variable 'if_condition_46384' (line 591)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 591, 12), 'if_condition_46384', if_condition_46384)
        # SSA begins for if statement (line 591)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 592):
        
        # Assigning a Subscript to a Name (line 592):
        
        # Obtaining the type of the subscript
        int_46385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 592, 29), 'int')
        # Getting the type of 'env_var' (line 592)
        env_var_46386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 21), 'env_var')
        # Obtaining the member '__getitem__' of a type (line 592)
        getitem___46387 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 592, 21), env_var_46386, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 592)
        subscript_call_result_46388 = invoke(stypy.reporting.localization.Localization(__file__, 592, 21), getitem___46387, int_46385)
        
        # Assigning a type to the variable 'e0' (line 592)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 592, 16), 'e0', subscript_call_result_46388)
        
        # Getting the type of 'env_var' (line 593)
        env_var_46389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 25), 'env_var')
        # Testing the type of a for loop iterable (line 593)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 593, 16), env_var_46389)
        # Getting the type of the for loop variable (line 593)
        for_loop_var_46390 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 593, 16), env_var_46389)
        # Assigning a type to the variable 'e' (line 593)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 593, 16), 'e', for_loop_var_46390)
        # SSA begins for a for statement (line 593)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'e' (line 594)
        e_46391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 23), 'e')
        # Getting the type of 'os' (line 594)
        os_46392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 28), 'os')
        # Obtaining the member 'environ' of a type (line 594)
        environ_46393 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 594, 28), os_46392, 'environ')
        # Applying the binary operator 'in' (line 594)
        result_contains_46394 = python_operator(stypy.reporting.localization.Localization(__file__, 594, 23), 'in', e_46391, environ_46393)
        
        # Testing the type of an if condition (line 594)
        if_condition_46395 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 594, 20), result_contains_46394)
        # Assigning a type to the variable 'if_condition_46395' (line 594)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 594, 20), 'if_condition_46395', if_condition_46395)
        # SSA begins for if statement (line 594)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 595):
        
        # Assigning a Name to a Name (line 595):
        # Getting the type of 'e' (line 595)
        e_46396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 29), 'e')
        # Assigning a type to the variable 'e0' (line 595)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 595, 24), 'e0', e_46396)
        # SSA join for if statement (line 594)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        
        # Obtaining the type of the subscript
        int_46397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 597, 31), 'int')
        # Getting the type of 'env_var' (line 597)
        env_var_46398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 23), 'env_var')
        # Obtaining the member '__getitem__' of a type (line 597)
        getitem___46399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 597, 23), env_var_46398, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 597)
        subscript_call_result_46400 = invoke(stypy.reporting.localization.Localization(__file__, 597, 23), getitem___46399, int_46397)
        
        # Getting the type of 'e0' (line 597)
        e0_46401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 37), 'e0')
        # Applying the binary operator '==' (line 597)
        result_eq_46402 = python_operator(stypy.reporting.localization.Localization(__file__, 597, 23), '==', subscript_call_result_46400, e0_46401)
        
        # Applying the 'not' unary operator (line 597)
        result_not__46403 = python_operator(stypy.reporting.localization.Localization(__file__, 597, 19), 'not', result_eq_46402)
        
        # Testing the type of an if condition (line 597)
        if_condition_46404 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 597, 16), result_not__46403)
        # Assigning a type to the variable 'if_condition_46404' (line 597)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 597, 16), 'if_condition_46404', if_condition_46404)
        # SSA begins for if statement (line 597)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to info(...): (line 598)
        # Processing the call arguments (line 598)
        str_46407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 598, 29), 'str', 'Setting %s=%s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 598)
        tuple_46408 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 598, 48), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 598)
        # Adding element type (line 598)
        
        # Obtaining the type of the subscript
        int_46409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 598, 56), 'int')
        # Getting the type of 'env_var' (line 598)
        env_var_46410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 48), 'env_var', False)
        # Obtaining the member '__getitem__' of a type (line 598)
        getitem___46411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 598, 48), env_var_46410, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 598)
        subscript_call_result_46412 = invoke(stypy.reporting.localization.Localization(__file__, 598, 48), getitem___46411, int_46409)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 598, 48), tuple_46408, subscript_call_result_46412)
        # Adding element type (line 598)
        # Getting the type of 'e0' (line 598)
        e0_46413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 60), 'e0', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 598, 48), tuple_46408, e0_46413)
        
        # Applying the binary operator '%' (line 598)
        result_mod_46414 = python_operator(stypy.reporting.localization.Localization(__file__, 598, 29), '%', str_46407, tuple_46408)
        
        # Processing the call keyword arguments (line 598)
        kwargs_46415 = {}
        # Getting the type of 'log' (line 598)
        log_46405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 20), 'log', False)
        # Obtaining the member 'info' of a type (line 598)
        info_46406 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 598, 20), log_46405, 'info')
        # Calling info(args, kwargs) (line 598)
        info_call_result_46416 = invoke(stypy.reporting.localization.Localization(__file__, 598, 20), info_46406, *[result_mod_46414], **kwargs_46415)
        
        # SSA join for if statement (line 597)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 599):
        
        # Assigning a Name to a Name (line 599):
        # Getting the type of 'e0' (line 599)
        e0_46417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 26), 'e0')
        # Assigning a type to the variable 'env_var' (line 599)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 599, 16), 'env_var', e0_46417)
        # SSA join for if statement (line 591)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 590)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        # Getting the type of 'env_var' (line 600)
        env_var_46418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 11), 'env_var')
        
        # Getting the type of 'env_var' (line 600)
        env_var_46419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 23), 'env_var')
        # Getting the type of 'os' (line 600)
        os_46420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 34), 'os')
        # Obtaining the member 'environ' of a type (line 600)
        environ_46421 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 600, 34), os_46420, 'environ')
        # Applying the binary operator 'in' (line 600)
        result_contains_46422 = python_operator(stypy.reporting.localization.Localization(__file__, 600, 23), 'in', env_var_46419, environ_46421)
        
        # Applying the binary operator 'and' (line 600)
        result_and_keyword_46423 = python_operator(stypy.reporting.localization.Localization(__file__, 600, 11), 'and', env_var_46418, result_contains_46422)
        
        # Testing the type of an if condition (line 600)
        if_condition_46424 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 600, 8), result_and_keyword_46423)
        # Assigning a type to the variable 'if_condition_46424' (line 600)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 600, 8), 'if_condition_46424', if_condition_46424)
        # SSA begins for if statement (line 600)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 601):
        
        # Assigning a Subscript to a Name (line 601):
        
        # Obtaining the type of the subscript
        # Getting the type of 'env_var' (line 601)
        env_var_46425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 27), 'env_var')
        # Getting the type of 'os' (line 601)
        os_46426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 16), 'os')
        # Obtaining the member 'environ' of a type (line 601)
        environ_46427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 601, 16), os_46426, 'environ')
        # Obtaining the member '__getitem__' of a type (line 601)
        getitem___46428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 601, 16), environ_46427, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 601)
        subscript_call_result_46429 = invoke(stypy.reporting.localization.Localization(__file__, 601, 16), getitem___46428, env_var_46425)
        
        # Assigning a type to the variable 'd' (line 601)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 601, 12), 'd', subscript_call_result_46429)
        
        
        # Getting the type of 'd' (line 602)
        d_46430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 15), 'd')
        str_46431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 602, 20), 'str', 'None')
        # Applying the binary operator '==' (line 602)
        result_eq_46432 = python_operator(stypy.reporting.localization.Localization(__file__, 602, 15), '==', d_46430, str_46431)
        
        # Testing the type of an if condition (line 602)
        if_condition_46433 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 602, 12), result_eq_46432)
        # Assigning a type to the variable 'if_condition_46433' (line 602)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 602, 12), 'if_condition_46433', if_condition_46433)
        # SSA begins for if statement (line 602)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to info(...): (line 603)
        # Processing the call arguments (line 603)
        str_46436 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 603, 25), 'str', 'Disabled %s: %s')
        # Getting the type of 'self' (line 604)
        self_46437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 25), 'self', False)
        # Obtaining the member '__class__' of a type (line 604)
        class___46438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 604, 25), self_46437, '__class__')
        # Obtaining the member '__name__' of a type (line 604)
        name___46439 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 604, 25), class___46438, '__name__')
        str_46440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 604, 50), 'str', '(%s is None)')
        
        # Obtaining an instance of the builtin type 'tuple' (line 605)
        tuple_46441 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 605, 28), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 605)
        # Adding element type (line 605)
        # Getting the type of 'env_var' (line 605)
        env_var_46442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 28), 'env_var', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 605, 28), tuple_46441, env_var_46442)
        
        # Applying the binary operator '%' (line 604)
        result_mod_46443 = python_operator(stypy.reporting.localization.Localization(__file__, 604, 50), '%', str_46440, tuple_46441)
        
        # Processing the call keyword arguments (line 603)
        kwargs_46444 = {}
        # Getting the type of 'log' (line 603)
        log_46434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 16), 'log', False)
        # Obtaining the member 'info' of a type (line 603)
        info_46435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 603, 16), log_46434, 'info')
        # Calling info(args, kwargs) (line 603)
        info_call_result_46445 = invoke(stypy.reporting.localization.Localization(__file__, 603, 16), info_46435, *[str_46436, name___46439, result_mod_46443], **kwargs_46444)
        
        
        # Obtaining an instance of the builtin type 'list' (line 606)
        list_46446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 606, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 606)
        
        # Assigning a type to the variable 'stypy_return_type' (line 606)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 606, 16), 'stypy_return_type', list_46446)
        # SSA join for if statement (line 602)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to isfile(...): (line 607)
        # Processing the call arguments (line 607)
        # Getting the type of 'd' (line 607)
        d_46450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 30), 'd', False)
        # Processing the call keyword arguments (line 607)
        kwargs_46451 = {}
        # Getting the type of 'os' (line 607)
        os_46447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 15), 'os', False)
        # Obtaining the member 'path' of a type (line 607)
        path_46448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 607, 15), os_46447, 'path')
        # Obtaining the member 'isfile' of a type (line 607)
        isfile_46449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 607, 15), path_46448, 'isfile')
        # Calling isfile(args, kwargs) (line 607)
        isfile_call_result_46452 = invoke(stypy.reporting.localization.Localization(__file__, 607, 15), isfile_46449, *[d_46450], **kwargs_46451)
        
        # Testing the type of an if condition (line 607)
        if_condition_46453 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 607, 12), isfile_call_result_46452)
        # Assigning a type to the variable 'if_condition_46453' (line 607)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 607, 12), 'if_condition_46453', if_condition_46453)
        # SSA begins for if statement (line 607)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 608):
        
        # Assigning a BinOp to a Name (line 608):
        
        # Obtaining an instance of the builtin type 'list' (line 608)
        list_46454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 608, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 608)
        # Adding element type (line 608)
        
        # Call to dirname(...): (line 608)
        # Processing the call arguments (line 608)
        # Getting the type of 'd' (line 608)
        d_46458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 40), 'd', False)
        # Processing the call keyword arguments (line 608)
        kwargs_46459 = {}
        # Getting the type of 'os' (line 608)
        os_46455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 24), 'os', False)
        # Obtaining the member 'path' of a type (line 608)
        path_46456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 608, 24), os_46455, 'path')
        # Obtaining the member 'dirname' of a type (line 608)
        dirname_46457 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 608, 24), path_46456, 'dirname')
        # Calling dirname(args, kwargs) (line 608)
        dirname_call_result_46460 = invoke(stypy.reporting.localization.Localization(__file__, 608, 24), dirname_46457, *[d_46458], **kwargs_46459)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 608, 23), list_46454, dirname_call_result_46460)
        
        # Getting the type of 'dirs' (line 608)
        dirs_46461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 46), 'dirs')
        # Applying the binary operator '+' (line 608)
        result_add_46462 = python_operator(stypy.reporting.localization.Localization(__file__, 608, 23), '+', list_46454, dirs_46461)
        
        # Assigning a type to the variable 'dirs' (line 608)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 608, 16), 'dirs', result_add_46462)
        
        # Assigning a Call to a Name (line 609):
        
        # Assigning a Call to a Name (line 609):
        
        # Call to getattr(...): (line 609)
        # Processing the call arguments (line 609)
        # Getting the type of 'self' (line 609)
        self_46464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 28), 'self', False)
        str_46465 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 609, 34), 'str', '_lib_names')
        
        # Obtaining an instance of the builtin type 'list' (line 609)
        list_46466 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 609, 48), 'list')
        # Adding type elements to the builtin type 'list' instance (line 609)
        
        # Processing the call keyword arguments (line 609)
        kwargs_46467 = {}
        # Getting the type of 'getattr' (line 609)
        getattr_46463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 20), 'getattr', False)
        # Calling getattr(args, kwargs) (line 609)
        getattr_call_result_46468 = invoke(stypy.reporting.localization.Localization(__file__, 609, 20), getattr_46463, *[self_46464, str_46465, list_46466], **kwargs_46467)
        
        # Assigning a type to the variable 'l' (line 609)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 609, 16), 'l', getattr_call_result_46468)
        
        
        
        # Call to len(...): (line 610)
        # Processing the call arguments (line 610)
        # Getting the type of 'l' (line 610)
        l_46470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 23), 'l', False)
        # Processing the call keyword arguments (line 610)
        kwargs_46471 = {}
        # Getting the type of 'len' (line 610)
        len_46469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 19), 'len', False)
        # Calling len(args, kwargs) (line 610)
        len_call_result_46472 = invoke(stypy.reporting.localization.Localization(__file__, 610, 19), len_46469, *[l_46470], **kwargs_46471)
        
        int_46473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 610, 29), 'int')
        # Applying the binary operator '==' (line 610)
        result_eq_46474 = python_operator(stypy.reporting.localization.Localization(__file__, 610, 19), '==', len_call_result_46472, int_46473)
        
        # Testing the type of an if condition (line 610)
        if_condition_46475 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 610, 16), result_eq_46474)
        # Assigning a type to the variable 'if_condition_46475' (line 610)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 610, 16), 'if_condition_46475', if_condition_46475)
        # SSA begins for if statement (line 610)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 611):
        
        # Assigning a Call to a Name (line 611):
        
        # Call to basename(...): (line 611)
        # Processing the call arguments (line 611)
        # Getting the type of 'd' (line 611)
        d_46479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 41), 'd', False)
        # Processing the call keyword arguments (line 611)
        kwargs_46480 = {}
        # Getting the type of 'os' (line 611)
        os_46476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 24), 'os', False)
        # Obtaining the member 'path' of a type (line 611)
        path_46477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 611, 24), os_46476, 'path')
        # Obtaining the member 'basename' of a type (line 611)
        basename_46478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 611, 24), path_46477, 'basename')
        # Calling basename(args, kwargs) (line 611)
        basename_call_result_46481 = invoke(stypy.reporting.localization.Localization(__file__, 611, 24), basename_46478, *[d_46479], **kwargs_46480)
        
        # Assigning a type to the variable 'b' (line 611)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 611, 20), 'b', basename_call_result_46481)
        
        # Assigning a Subscript to a Name (line 612):
        
        # Assigning a Subscript to a Name (line 612):
        
        # Obtaining the type of the subscript
        int_46482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 612, 44), 'int')
        
        # Call to splitext(...): (line 612)
        # Processing the call arguments (line 612)
        # Getting the type of 'b' (line 612)
        b_46486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 41), 'b', False)
        # Processing the call keyword arguments (line 612)
        kwargs_46487 = {}
        # Getting the type of 'os' (line 612)
        os_46483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 24), 'os', False)
        # Obtaining the member 'path' of a type (line 612)
        path_46484 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 612, 24), os_46483, 'path')
        # Obtaining the member 'splitext' of a type (line 612)
        splitext_46485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 612, 24), path_46484, 'splitext')
        # Calling splitext(args, kwargs) (line 612)
        splitext_call_result_46488 = invoke(stypy.reporting.localization.Localization(__file__, 612, 24), splitext_46485, *[b_46486], **kwargs_46487)
        
        # Obtaining the member '__getitem__' of a type (line 612)
        getitem___46489 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 612, 24), splitext_call_result_46488, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 612)
        subscript_call_result_46490 = invoke(stypy.reporting.localization.Localization(__file__, 612, 24), getitem___46489, int_46482)
        
        # Assigning a type to the variable 'b' (line 612)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 612, 20), 'b', subscript_call_result_46490)
        
        
        
        # Obtaining the type of the subscript
        int_46491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 613, 26), 'int')
        slice_46492 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 613, 23), None, int_46491, None)
        # Getting the type of 'b' (line 613)
        b_46493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 23), 'b')
        # Obtaining the member '__getitem__' of a type (line 613)
        getitem___46494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 613, 23), b_46493, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 613)
        subscript_call_result_46495 = invoke(stypy.reporting.localization.Localization(__file__, 613, 23), getitem___46494, slice_46492)
        
        str_46496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 613, 32), 'str', 'lib')
        # Applying the binary operator '==' (line 613)
        result_eq_46497 = python_operator(stypy.reporting.localization.Localization(__file__, 613, 23), '==', subscript_call_result_46495, str_46496)
        
        # Testing the type of an if condition (line 613)
        if_condition_46498 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 613, 20), result_eq_46497)
        # Assigning a type to the variable 'if_condition_46498' (line 613)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 613, 20), 'if_condition_46498', if_condition_46498)
        # SSA begins for if statement (line 613)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to info(...): (line 614)
        # Processing the call arguments (line 614)
        str_46501 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 614, 33), 'str', 'Replacing _lib_names[0]==%r with %r')
        
        # Obtaining an instance of the builtin type 'tuple' (line 615)
        tuple_46502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 615, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 615)
        # Adding element type (line 615)
        
        # Obtaining the type of the subscript
        int_46503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 615, 49), 'int')
        # Getting the type of 'self' (line 615)
        self_46504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 33), 'self', False)
        # Obtaining the member '_lib_names' of a type (line 615)
        _lib_names_46505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 615, 33), self_46504, '_lib_names')
        # Obtaining the member '__getitem__' of a type (line 615)
        getitem___46506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 615, 33), _lib_names_46505, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 615)
        subscript_call_result_46507 = invoke(stypy.reporting.localization.Localization(__file__, 615, 33), getitem___46506, int_46503)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 615, 33), tuple_46502, subscript_call_result_46507)
        # Adding element type (line 615)
        
        # Obtaining the type of the subscript
        int_46508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 615, 55), 'int')
        slice_46509 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 615, 53), int_46508, None, None)
        # Getting the type of 'b' (line 615)
        b_46510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 53), 'b', False)
        # Obtaining the member '__getitem__' of a type (line 615)
        getitem___46511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 615, 53), b_46510, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 615)
        subscript_call_result_46512 = invoke(stypy.reporting.localization.Localization(__file__, 615, 53), getitem___46511, slice_46509)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 615, 33), tuple_46502, subscript_call_result_46512)
        
        # Applying the binary operator '%' (line 614)
        result_mod_46513 = python_operator(stypy.reporting.localization.Localization(__file__, 614, 33), '%', str_46501, tuple_46502)
        
        # Processing the call keyword arguments (line 614)
        kwargs_46514 = {}
        # Getting the type of 'log' (line 614)
        log_46499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 24), 'log', False)
        # Obtaining the member 'info' of a type (line 614)
        info_46500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 614, 24), log_46499, 'info')
        # Calling info(args, kwargs) (line 614)
        info_call_result_46515 = invoke(stypy.reporting.localization.Localization(__file__, 614, 24), info_46500, *[result_mod_46513], **kwargs_46514)
        
        
        # Assigning a Subscript to a Subscript (line 616):
        
        # Assigning a Subscript to a Subscript (line 616):
        
        # Obtaining the type of the subscript
        int_46516 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 616, 47), 'int')
        slice_46517 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 616, 45), int_46516, None, None)
        # Getting the type of 'b' (line 616)
        b_46518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 45), 'b')
        # Obtaining the member '__getitem__' of a type (line 616)
        getitem___46519 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 616, 45), b_46518, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 616)
        subscript_call_result_46520 = invoke(stypy.reporting.localization.Localization(__file__, 616, 45), getitem___46519, slice_46517)
        
        # Getting the type of 'self' (line 616)
        self_46521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 24), 'self')
        # Obtaining the member '_lib_names' of a type (line 616)
        _lib_names_46522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 616, 24), self_46521, '_lib_names')
        int_46523 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 616, 40), 'int')
        # Storing an element on a container (line 616)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 616, 24), _lib_names_46522, (int_46523, subscript_call_result_46520))
        # SSA join for if statement (line 613)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 610)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 607)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 618):
        
        # Assigning a Call to a Name (line 618):
        
        # Call to split(...): (line 618)
        # Processing the call arguments (line 618)
        # Getting the type of 'os' (line 618)
        os_46526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 29), 'os', False)
        # Obtaining the member 'pathsep' of a type (line 618)
        pathsep_46527 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 618, 29), os_46526, 'pathsep')
        # Processing the call keyword arguments (line 618)
        kwargs_46528 = {}
        # Getting the type of 'd' (line 618)
        d_46524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 21), 'd', False)
        # Obtaining the member 'split' of a type (line 618)
        split_46525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 618, 21), d_46524, 'split')
        # Calling split(args, kwargs) (line 618)
        split_call_result_46529 = invoke(stypy.reporting.localization.Localization(__file__, 618, 21), split_46525, *[pathsep_46527], **kwargs_46528)
        
        # Assigning a type to the variable 'ds' (line 618)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 618, 16), 'ds', split_call_result_46529)
        
        # Assigning a List to a Name (line 619):
        
        # Assigning a List to a Name (line 619):
        
        # Obtaining an instance of the builtin type 'list' (line 619)
        list_46530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 619, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 619)
        
        # Assigning a type to the variable 'ds2' (line 619)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 619, 16), 'ds2', list_46530)
        
        # Getting the type of 'ds' (line 620)
        ds_46531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 25), 'ds')
        # Testing the type of a for loop iterable (line 620)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 620, 16), ds_46531)
        # Getting the type of the for loop variable (line 620)
        for_loop_var_46532 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 620, 16), ds_46531)
        # Assigning a type to the variable 'd' (line 620)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 620, 16), 'd', for_loop_var_46532)
        # SSA begins for a for statement (line 620)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to isdir(...): (line 621)
        # Processing the call arguments (line 621)
        # Getting the type of 'd' (line 621)
        d_46536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 37), 'd', False)
        # Processing the call keyword arguments (line 621)
        kwargs_46537 = {}
        # Getting the type of 'os' (line 621)
        os_46533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 23), 'os', False)
        # Obtaining the member 'path' of a type (line 621)
        path_46534 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 621, 23), os_46533, 'path')
        # Obtaining the member 'isdir' of a type (line 621)
        isdir_46535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 621, 23), path_46534, 'isdir')
        # Calling isdir(args, kwargs) (line 621)
        isdir_call_result_46538 = invoke(stypy.reporting.localization.Localization(__file__, 621, 23), isdir_46535, *[d_46536], **kwargs_46537)
        
        # Testing the type of an if condition (line 621)
        if_condition_46539 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 621, 20), isdir_call_result_46538)
        # Assigning a type to the variable 'if_condition_46539' (line 621)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 621, 20), 'if_condition_46539', if_condition_46539)
        # SSA begins for if statement (line 621)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 622)
        # Processing the call arguments (line 622)
        # Getting the type of 'd' (line 622)
        d_46542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 35), 'd', False)
        # Processing the call keyword arguments (line 622)
        kwargs_46543 = {}
        # Getting the type of 'ds2' (line 622)
        ds2_46540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 24), 'ds2', False)
        # Obtaining the member 'append' of a type (line 622)
        append_46541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 622, 24), ds2_46540, 'append')
        # Calling append(args, kwargs) (line 622)
        append_call_result_46544 = invoke(stypy.reporting.localization.Localization(__file__, 622, 24), append_46541, *[d_46542], **kwargs_46543)
        
        
        
        # Obtaining an instance of the builtin type 'list' (line 623)
        list_46545 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 623, 34), 'list')
        # Adding type elements to the builtin type 'list' instance (line 623)
        # Adding element type (line 623)
        str_46546 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 623, 35), 'str', 'include')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 623, 34), list_46545, str_46546)
        # Adding element type (line 623)
        str_46547 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 623, 46), 'str', 'lib')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 623, 34), list_46545, str_46547)
        
        # Testing the type of a for loop iterable (line 623)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 623, 24), list_46545)
        # Getting the type of the for loop variable (line 623)
        for_loop_var_46548 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 623, 24), list_46545)
        # Assigning a type to the variable 'dd' (line 623)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 623, 24), 'dd', for_loop_var_46548)
        # SSA begins for a for statement (line 623)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 624):
        
        # Assigning a Call to a Name (line 624):
        
        # Call to join(...): (line 624)
        # Processing the call arguments (line 624)
        # Getting the type of 'd' (line 624)
        d_46552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 46), 'd', False)
        # Getting the type of 'dd' (line 624)
        dd_46553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 49), 'dd', False)
        # Processing the call keyword arguments (line 624)
        kwargs_46554 = {}
        # Getting the type of 'os' (line 624)
        os_46549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 33), 'os', False)
        # Obtaining the member 'path' of a type (line 624)
        path_46550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 624, 33), os_46549, 'path')
        # Obtaining the member 'join' of a type (line 624)
        join_46551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 624, 33), path_46550, 'join')
        # Calling join(args, kwargs) (line 624)
        join_call_result_46555 = invoke(stypy.reporting.localization.Localization(__file__, 624, 33), join_46551, *[d_46552, dd_46553], **kwargs_46554)
        
        # Assigning a type to the variable 'd1' (line 624)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 624, 28), 'd1', join_call_result_46555)
        
        
        # Call to isdir(...): (line 625)
        # Processing the call arguments (line 625)
        # Getting the type of 'd1' (line 625)
        d1_46559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 45), 'd1', False)
        # Processing the call keyword arguments (line 625)
        kwargs_46560 = {}
        # Getting the type of 'os' (line 625)
        os_46556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 31), 'os', False)
        # Obtaining the member 'path' of a type (line 625)
        path_46557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 625, 31), os_46556, 'path')
        # Obtaining the member 'isdir' of a type (line 625)
        isdir_46558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 625, 31), path_46557, 'isdir')
        # Calling isdir(args, kwargs) (line 625)
        isdir_call_result_46561 = invoke(stypy.reporting.localization.Localization(__file__, 625, 31), isdir_46558, *[d1_46559], **kwargs_46560)
        
        # Testing the type of an if condition (line 625)
        if_condition_46562 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 625, 28), isdir_call_result_46561)
        # Assigning a type to the variable 'if_condition_46562' (line 625)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 625, 28), 'if_condition_46562', if_condition_46562)
        # SSA begins for if statement (line 625)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 626)
        # Processing the call arguments (line 626)
        # Getting the type of 'd1' (line 626)
        d1_46565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 43), 'd1', False)
        # Processing the call keyword arguments (line 626)
        kwargs_46566 = {}
        # Getting the type of 'ds2' (line 626)
        ds2_46563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 32), 'ds2', False)
        # Obtaining the member 'append' of a type (line 626)
        append_46564 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 626, 32), ds2_46563, 'append')
        # Calling append(args, kwargs) (line 626)
        append_call_result_46567 = invoke(stypy.reporting.localization.Localization(__file__, 626, 32), append_46564, *[d1_46565], **kwargs_46566)
        
        # SSA join for if statement (line 625)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 621)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 627):
        
        # Assigning a BinOp to a Name (line 627):
        # Getting the type of 'ds2' (line 627)
        ds2_46568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 23), 'ds2')
        # Getting the type of 'dirs' (line 627)
        dirs_46569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 29), 'dirs')
        # Applying the binary operator '+' (line 627)
        result_add_46570 = python_operator(stypy.reporting.localization.Localization(__file__, 627, 23), '+', ds2_46568, dirs_46569)
        
        # Assigning a type to the variable 'dirs' (line 627)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 627, 16), 'dirs', result_add_46570)
        # SSA join for if statement (line 607)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 600)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 628):
        
        # Assigning a Call to a Name (line 628):
        
        # Call to split(...): (line 628)
        # Processing the call arguments (line 628)
        # Getting the type of 'os' (line 628)
        os_46580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 60), 'os', False)
        # Obtaining the member 'pathsep' of a type (line 628)
        pathsep_46581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 628, 60), os_46580, 'pathsep')
        # Processing the call keyword arguments (line 628)
        kwargs_46582 = {}
        
        # Call to get(...): (line 628)
        # Processing the call arguments (line 628)
        # Getting the type of 'self' (line 628)
        self_46574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 35), 'self', False)
        # Obtaining the member 'section' of a type (line 628)
        section_46575 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 628, 35), self_46574, 'section')
        # Getting the type of 'key' (line 628)
        key_46576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 49), 'key', False)
        # Processing the call keyword arguments (line 628)
        kwargs_46577 = {}
        # Getting the type of 'self' (line 628)
        self_46571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 23), 'self', False)
        # Obtaining the member 'cp' of a type (line 628)
        cp_46572 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 628, 23), self_46571, 'cp')
        # Obtaining the member 'get' of a type (line 628)
        get_46573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 628, 23), cp_46572, 'get')
        # Calling get(args, kwargs) (line 628)
        get_call_result_46578 = invoke(stypy.reporting.localization.Localization(__file__, 628, 23), get_46573, *[section_46575, key_46576], **kwargs_46577)
        
        # Obtaining the member 'split' of a type (line 628)
        split_46579 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 628, 23), get_call_result_46578, 'split')
        # Calling split(args, kwargs) (line 628)
        split_call_result_46583 = invoke(stypy.reporting.localization.Localization(__file__, 628, 23), split_46579, *[pathsep_46581], **kwargs_46582)
        
        # Assigning a type to the variable 'default_dirs' (line 628)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 628, 8), 'default_dirs', split_call_result_46583)
        
        # Call to extend(...): (line 629)
        # Processing the call arguments (line 629)
        # Getting the type of 'default_dirs' (line 629)
        default_dirs_46586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 629, 20), 'default_dirs', False)
        # Processing the call keyword arguments (line 629)
        kwargs_46587 = {}
        # Getting the type of 'dirs' (line 629)
        dirs_46584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 629, 8), 'dirs', False)
        # Obtaining the member 'extend' of a type (line 629)
        extend_46585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 629, 8), dirs_46584, 'extend')
        # Calling extend(args, kwargs) (line 629)
        extend_call_result_46588 = invoke(stypy.reporting.localization.Localization(__file__, 629, 8), extend_46585, *[default_dirs_46586], **kwargs_46587)
        
        
        # Assigning a List to a Name (line 630):
        
        # Assigning a List to a Name (line 630):
        
        # Obtaining an instance of the builtin type 'list' (line 630)
        list_46589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 630, 14), 'list')
        # Adding type elements to the builtin type 'list' instance (line 630)
        
        # Assigning a type to the variable 'ret' (line 630)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 630, 8), 'ret', list_46589)
        
        # Getting the type of 'dirs' (line 631)
        dirs_46590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 631, 17), 'dirs')
        # Testing the type of a for loop iterable (line 631)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 631, 8), dirs_46590)
        # Getting the type of the for loop variable (line 631)
        for_loop_var_46591 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 631, 8), dirs_46590)
        # Assigning a type to the variable 'd' (line 631)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 631, 8), 'd', for_loop_var_46591)
        # SSA begins for a for statement (line 631)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Evaluating a boolean operation
        
        
        # Call to len(...): (line 632)
        # Processing the call arguments (line 632)
        # Getting the type of 'd' (line 632)
        d_46593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 632, 19), 'd', False)
        # Processing the call keyword arguments (line 632)
        kwargs_46594 = {}
        # Getting the type of 'len' (line 632)
        len_46592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 632, 15), 'len', False)
        # Calling len(args, kwargs) (line 632)
        len_call_result_46595 = invoke(stypy.reporting.localization.Localization(__file__, 632, 15), len_46592, *[d_46593], **kwargs_46594)
        
        int_46596 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 632, 24), 'int')
        # Applying the binary operator '>' (line 632)
        result_gt_46597 = python_operator(stypy.reporting.localization.Localization(__file__, 632, 15), '>', len_call_result_46595, int_46596)
        
        
        
        # Call to isdir(...): (line 632)
        # Processing the call arguments (line 632)
        # Getting the type of 'd' (line 632)
        d_46601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 632, 48), 'd', False)
        # Processing the call keyword arguments (line 632)
        kwargs_46602 = {}
        # Getting the type of 'os' (line 632)
        os_46598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 632, 34), 'os', False)
        # Obtaining the member 'path' of a type (line 632)
        path_46599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 632, 34), os_46598, 'path')
        # Obtaining the member 'isdir' of a type (line 632)
        isdir_46600 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 632, 34), path_46599, 'isdir')
        # Calling isdir(args, kwargs) (line 632)
        isdir_call_result_46603 = invoke(stypy.reporting.localization.Localization(__file__, 632, 34), isdir_46600, *[d_46601], **kwargs_46602)
        
        # Applying the 'not' unary operator (line 632)
        result_not__46604 = python_operator(stypy.reporting.localization.Localization(__file__, 632, 30), 'not', isdir_call_result_46603)
        
        # Applying the binary operator 'and' (line 632)
        result_and_keyword_46605 = python_operator(stypy.reporting.localization.Localization(__file__, 632, 15), 'and', result_gt_46597, result_not__46604)
        
        # Testing the type of an if condition (line 632)
        if_condition_46606 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 632, 12), result_and_keyword_46605)
        # Assigning a type to the variable 'if_condition_46606' (line 632)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 632, 12), 'if_condition_46606', if_condition_46606)
        # SSA begins for if statement (line 632)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 633)
        # Processing the call arguments (line 633)
        str_46609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 633, 30), 'str', 'Specified path %s is invalid.')
        # Getting the type of 'd' (line 633)
        d_46610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 633, 64), 'd', False)
        # Applying the binary operator '%' (line 633)
        result_mod_46611 = python_operator(stypy.reporting.localization.Localization(__file__, 633, 30), '%', str_46609, d_46610)
        
        # Processing the call keyword arguments (line 633)
        kwargs_46612 = {}
        # Getting the type of 'warnings' (line 633)
        warnings_46607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 633, 16), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 633)
        warn_46608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 633, 16), warnings_46607, 'warn')
        # Calling warn(args, kwargs) (line 633)
        warn_call_result_46613 = invoke(stypy.reporting.localization.Localization(__file__, 633, 16), warn_46608, *[result_mod_46611], **kwargs_46612)
        
        # SSA join for if statement (line 632)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'd' (line 636)
        d_46614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 15), 'd')
        # Getting the type of 'ret' (line 636)
        ret_46615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 24), 'ret')
        # Applying the binary operator 'notin' (line 636)
        result_contains_46616 = python_operator(stypy.reporting.localization.Localization(__file__, 636, 15), 'notin', d_46614, ret_46615)
        
        # Testing the type of an if condition (line 636)
        if_condition_46617 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 636, 12), result_contains_46616)
        # Assigning a type to the variable 'if_condition_46617' (line 636)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 636, 12), 'if_condition_46617', if_condition_46617)
        # SSA begins for if statement (line 636)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 637)
        # Processing the call arguments (line 637)
        # Getting the type of 'd' (line 637)
        d_46620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 27), 'd', False)
        # Processing the call keyword arguments (line 637)
        kwargs_46621 = {}
        # Getting the type of 'ret' (line 637)
        ret_46618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 16), 'ret', False)
        # Obtaining the member 'append' of a type (line 637)
        append_46619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 637, 16), ret_46618, 'append')
        # Calling append(args, kwargs) (line 637)
        append_call_result_46622 = invoke(stypy.reporting.localization.Localization(__file__, 637, 16), append_46619, *[d_46620], **kwargs_46621)
        
        # SSA join for if statement (line 636)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to debug(...): (line 639)
        # Processing the call arguments (line 639)
        str_46625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 639, 18), 'str', '( %s = %s )')
        # Getting the type of 'key' (line 639)
        key_46626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 33), 'key', False)
        
        # Call to join(...): (line 639)
        # Processing the call arguments (line 639)
        # Getting the type of 'ret' (line 639)
        ret_46629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 47), 'ret', False)
        # Processing the call keyword arguments (line 639)
        kwargs_46630 = {}
        str_46627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 639, 38), 'str', ':')
        # Obtaining the member 'join' of a type (line 639)
        join_46628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 639, 38), str_46627, 'join')
        # Calling join(args, kwargs) (line 639)
        join_call_result_46631 = invoke(stypy.reporting.localization.Localization(__file__, 639, 38), join_46628, *[ret_46629], **kwargs_46630)
        
        # Processing the call keyword arguments (line 639)
        kwargs_46632 = {}
        # Getting the type of 'log' (line 639)
        log_46623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 8), 'log', False)
        # Obtaining the member 'debug' of a type (line 639)
        debug_46624 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 639, 8), log_46623, 'debug')
        # Calling debug(args, kwargs) (line 639)
        debug_call_result_46633 = invoke(stypy.reporting.localization.Localization(__file__, 639, 8), debug_46624, *[str_46625, key_46626, join_call_result_46631], **kwargs_46632)
        
        # Getting the type of 'ret' (line 640)
        ret_46634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 15), 'ret')
        # Assigning a type to the variable 'stypy_return_type' (line 640)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 640, 8), 'stypy_return_type', ret_46634)
        
        # ################# End of 'get_paths(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_paths' in the type store
        # Getting the type of 'stypy_return_type' (line 587)
        stypy_return_type_46635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_46635)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_paths'
        return stypy_return_type_46635


    @norecursion
    def get_lib_dirs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        str_46636 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 642, 31), 'str', 'library_dirs')
        defaults = [str_46636]
        # Create a new context for function 'get_lib_dirs'
        module_type_store = module_type_store.open_function_context('get_lib_dirs', 642, 4, False)
        # Assigning a type to the variable 'self' (line 643)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 643, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        system_info.get_lib_dirs.__dict__.__setitem__('stypy_localization', localization)
        system_info.get_lib_dirs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        system_info.get_lib_dirs.__dict__.__setitem__('stypy_type_store', module_type_store)
        system_info.get_lib_dirs.__dict__.__setitem__('stypy_function_name', 'system_info.get_lib_dirs')
        system_info.get_lib_dirs.__dict__.__setitem__('stypy_param_names_list', ['key'])
        system_info.get_lib_dirs.__dict__.__setitem__('stypy_varargs_param_name', None)
        system_info.get_lib_dirs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        system_info.get_lib_dirs.__dict__.__setitem__('stypy_call_defaults', defaults)
        system_info.get_lib_dirs.__dict__.__setitem__('stypy_call_varargs', varargs)
        system_info.get_lib_dirs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        system_info.get_lib_dirs.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'system_info.get_lib_dirs', ['key'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_lib_dirs', localization, ['key'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_lib_dirs(...)' code ##################

        
        # Call to get_paths(...): (line 643)
        # Processing the call arguments (line 643)
        # Getting the type of 'self' (line 643)
        self_46639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 30), 'self', False)
        # Obtaining the member 'section' of a type (line 643)
        section_46640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 643, 30), self_46639, 'section')
        # Getting the type of 'key' (line 643)
        key_46641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 44), 'key', False)
        # Processing the call keyword arguments (line 643)
        kwargs_46642 = {}
        # Getting the type of 'self' (line 643)
        self_46637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 15), 'self', False)
        # Obtaining the member 'get_paths' of a type (line 643)
        get_paths_46638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 643, 15), self_46637, 'get_paths')
        # Calling get_paths(args, kwargs) (line 643)
        get_paths_call_result_46643 = invoke(stypy.reporting.localization.Localization(__file__, 643, 15), get_paths_46638, *[section_46640, key_46641], **kwargs_46642)
        
        # Assigning a type to the variable 'stypy_return_type' (line 643)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 643, 8), 'stypy_return_type', get_paths_call_result_46643)
        
        # ################# End of 'get_lib_dirs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_lib_dirs' in the type store
        # Getting the type of 'stypy_return_type' (line 642)
        stypy_return_type_46644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_46644)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_lib_dirs'
        return stypy_return_type_46644


    @norecursion
    def get_runtime_lib_dirs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        str_46645 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 645, 39), 'str', 'runtime_library_dirs')
        defaults = [str_46645]
        # Create a new context for function 'get_runtime_lib_dirs'
        module_type_store = module_type_store.open_function_context('get_runtime_lib_dirs', 645, 4, False)
        # Assigning a type to the variable 'self' (line 646)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 646, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        system_info.get_runtime_lib_dirs.__dict__.__setitem__('stypy_localization', localization)
        system_info.get_runtime_lib_dirs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        system_info.get_runtime_lib_dirs.__dict__.__setitem__('stypy_type_store', module_type_store)
        system_info.get_runtime_lib_dirs.__dict__.__setitem__('stypy_function_name', 'system_info.get_runtime_lib_dirs')
        system_info.get_runtime_lib_dirs.__dict__.__setitem__('stypy_param_names_list', ['key'])
        system_info.get_runtime_lib_dirs.__dict__.__setitem__('stypy_varargs_param_name', None)
        system_info.get_runtime_lib_dirs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        system_info.get_runtime_lib_dirs.__dict__.__setitem__('stypy_call_defaults', defaults)
        system_info.get_runtime_lib_dirs.__dict__.__setitem__('stypy_call_varargs', varargs)
        system_info.get_runtime_lib_dirs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        system_info.get_runtime_lib_dirs.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'system_info.get_runtime_lib_dirs', ['key'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_runtime_lib_dirs', localization, ['key'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_runtime_lib_dirs(...)' code ##################

        
        # Call to get_paths(...): (line 646)
        # Processing the call arguments (line 646)
        # Getting the type of 'self' (line 646)
        self_46648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 646, 30), 'self', False)
        # Obtaining the member 'section' of a type (line 646)
        section_46649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 646, 30), self_46648, 'section')
        # Getting the type of 'key' (line 646)
        key_46650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 646, 44), 'key', False)
        # Processing the call keyword arguments (line 646)
        kwargs_46651 = {}
        # Getting the type of 'self' (line 646)
        self_46646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 646, 15), 'self', False)
        # Obtaining the member 'get_paths' of a type (line 646)
        get_paths_46647 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 646, 15), self_46646, 'get_paths')
        # Calling get_paths(args, kwargs) (line 646)
        get_paths_call_result_46652 = invoke(stypy.reporting.localization.Localization(__file__, 646, 15), get_paths_46647, *[section_46649, key_46650], **kwargs_46651)
        
        # Assigning a type to the variable 'stypy_return_type' (line 646)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 646, 8), 'stypy_return_type', get_paths_call_result_46652)
        
        # ################# End of 'get_runtime_lib_dirs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_runtime_lib_dirs' in the type store
        # Getting the type of 'stypy_return_type' (line 645)
        stypy_return_type_46653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 645, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_46653)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_runtime_lib_dirs'
        return stypy_return_type_46653


    @norecursion
    def get_include_dirs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        str_46654 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 648, 35), 'str', 'include_dirs')
        defaults = [str_46654]
        # Create a new context for function 'get_include_dirs'
        module_type_store = module_type_store.open_function_context('get_include_dirs', 648, 4, False)
        # Assigning a type to the variable 'self' (line 649)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 649, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        system_info.get_include_dirs.__dict__.__setitem__('stypy_localization', localization)
        system_info.get_include_dirs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        system_info.get_include_dirs.__dict__.__setitem__('stypy_type_store', module_type_store)
        system_info.get_include_dirs.__dict__.__setitem__('stypy_function_name', 'system_info.get_include_dirs')
        system_info.get_include_dirs.__dict__.__setitem__('stypy_param_names_list', ['key'])
        system_info.get_include_dirs.__dict__.__setitem__('stypy_varargs_param_name', None)
        system_info.get_include_dirs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        system_info.get_include_dirs.__dict__.__setitem__('stypy_call_defaults', defaults)
        system_info.get_include_dirs.__dict__.__setitem__('stypy_call_varargs', varargs)
        system_info.get_include_dirs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        system_info.get_include_dirs.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'system_info.get_include_dirs', ['key'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_include_dirs', localization, ['key'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_include_dirs(...)' code ##################

        
        # Call to get_paths(...): (line 649)
        # Processing the call arguments (line 649)
        # Getting the type of 'self' (line 649)
        self_46657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 30), 'self', False)
        # Obtaining the member 'section' of a type (line 649)
        section_46658 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 649, 30), self_46657, 'section')
        # Getting the type of 'key' (line 649)
        key_46659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 44), 'key', False)
        # Processing the call keyword arguments (line 649)
        kwargs_46660 = {}
        # Getting the type of 'self' (line 649)
        self_46655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 15), 'self', False)
        # Obtaining the member 'get_paths' of a type (line 649)
        get_paths_46656 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 649, 15), self_46655, 'get_paths')
        # Calling get_paths(args, kwargs) (line 649)
        get_paths_call_result_46661 = invoke(stypy.reporting.localization.Localization(__file__, 649, 15), get_paths_46656, *[section_46658, key_46659], **kwargs_46660)
        
        # Assigning a type to the variable 'stypy_return_type' (line 649)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 649, 8), 'stypy_return_type', get_paths_call_result_46661)
        
        # ################# End of 'get_include_dirs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_include_dirs' in the type store
        # Getting the type of 'stypy_return_type' (line 648)
        stypy_return_type_46662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_46662)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_include_dirs'
        return stypy_return_type_46662


    @norecursion
    def get_src_dirs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        str_46663 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 651, 31), 'str', 'src_dirs')
        defaults = [str_46663]
        # Create a new context for function 'get_src_dirs'
        module_type_store = module_type_store.open_function_context('get_src_dirs', 651, 4, False)
        # Assigning a type to the variable 'self' (line 652)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 652, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        system_info.get_src_dirs.__dict__.__setitem__('stypy_localization', localization)
        system_info.get_src_dirs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        system_info.get_src_dirs.__dict__.__setitem__('stypy_type_store', module_type_store)
        system_info.get_src_dirs.__dict__.__setitem__('stypy_function_name', 'system_info.get_src_dirs')
        system_info.get_src_dirs.__dict__.__setitem__('stypy_param_names_list', ['key'])
        system_info.get_src_dirs.__dict__.__setitem__('stypy_varargs_param_name', None)
        system_info.get_src_dirs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        system_info.get_src_dirs.__dict__.__setitem__('stypy_call_defaults', defaults)
        system_info.get_src_dirs.__dict__.__setitem__('stypy_call_varargs', varargs)
        system_info.get_src_dirs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        system_info.get_src_dirs.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'system_info.get_src_dirs', ['key'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_src_dirs', localization, ['key'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_src_dirs(...)' code ##################

        
        # Call to get_paths(...): (line 652)
        # Processing the call arguments (line 652)
        # Getting the type of 'self' (line 652)
        self_46666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 30), 'self', False)
        # Obtaining the member 'section' of a type (line 652)
        section_46667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 652, 30), self_46666, 'section')
        # Getting the type of 'key' (line 652)
        key_46668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 44), 'key', False)
        # Processing the call keyword arguments (line 652)
        kwargs_46669 = {}
        # Getting the type of 'self' (line 652)
        self_46664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 15), 'self', False)
        # Obtaining the member 'get_paths' of a type (line 652)
        get_paths_46665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 652, 15), self_46664, 'get_paths')
        # Calling get_paths(args, kwargs) (line 652)
        get_paths_call_result_46670 = invoke(stypy.reporting.localization.Localization(__file__, 652, 15), get_paths_46665, *[section_46667, key_46668], **kwargs_46669)
        
        # Assigning a type to the variable 'stypy_return_type' (line 652)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 652, 8), 'stypy_return_type', get_paths_call_result_46670)
        
        # ################# End of 'get_src_dirs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_src_dirs' in the type store
        # Getting the type of 'stypy_return_type' (line 651)
        stypy_return_type_46671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_46671)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_src_dirs'
        return stypy_return_type_46671


    @norecursion
    def get_libs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_libs'
        module_type_store = module_type_store.open_function_context('get_libs', 654, 4, False)
        # Assigning a type to the variable 'self' (line 655)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 655, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        system_info.get_libs.__dict__.__setitem__('stypy_localization', localization)
        system_info.get_libs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        system_info.get_libs.__dict__.__setitem__('stypy_type_store', module_type_store)
        system_info.get_libs.__dict__.__setitem__('stypy_function_name', 'system_info.get_libs')
        system_info.get_libs.__dict__.__setitem__('stypy_param_names_list', ['key', 'default'])
        system_info.get_libs.__dict__.__setitem__('stypy_varargs_param_name', None)
        system_info.get_libs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        system_info.get_libs.__dict__.__setitem__('stypy_call_defaults', defaults)
        system_info.get_libs.__dict__.__setitem__('stypy_call_varargs', varargs)
        system_info.get_libs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        system_info.get_libs.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'system_info.get_libs', ['key', 'default'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_libs', localization, ['key', 'default'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_libs(...)' code ##################

        
        
        # SSA begins for try-except statement (line 655)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 656):
        
        # Assigning a Call to a Name (line 656):
        
        # Call to get(...): (line 656)
        # Processing the call arguments (line 656)
        # Getting the type of 'self' (line 656)
        self_46675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 31), 'self', False)
        # Obtaining the member 'section' of a type (line 656)
        section_46676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 656, 31), self_46675, 'section')
        # Getting the type of 'key' (line 656)
        key_46677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 45), 'key', False)
        # Processing the call keyword arguments (line 656)
        kwargs_46678 = {}
        # Getting the type of 'self' (line 656)
        self_46672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 19), 'self', False)
        # Obtaining the member 'cp' of a type (line 656)
        cp_46673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 656, 19), self_46672, 'cp')
        # Obtaining the member 'get' of a type (line 656)
        get_46674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 656, 19), cp_46673, 'get')
        # Calling get(args, kwargs) (line 656)
        get_call_result_46679 = invoke(stypy.reporting.localization.Localization(__file__, 656, 19), get_46674, *[section_46676, key_46677], **kwargs_46678)
        
        # Assigning a type to the variable 'libs' (line 656)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 656, 12), 'libs', get_call_result_46679)
        # SSA branch for the except part of a try statement (line 655)
        # SSA branch for the except 'NoOptionError' branch of a try statement (line 655)
        module_type_store.open_ssa_branch('except')
        
        
        # Getting the type of 'default' (line 658)
        default_46680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 19), 'default')
        # Applying the 'not' unary operator (line 658)
        result_not__46681 = python_operator(stypy.reporting.localization.Localization(__file__, 658, 15), 'not', default_46680)
        
        # Testing the type of an if condition (line 658)
        if_condition_46682 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 658, 12), result_not__46681)
        # Assigning a type to the variable 'if_condition_46682' (line 658)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 658, 12), 'if_condition_46682', if_condition_46682)
        # SSA begins for if statement (line 658)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'list' (line 659)
        list_46683 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 659, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 659)
        
        # Assigning a type to the variable 'stypy_return_type' (line 659)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 659, 16), 'stypy_return_type', list_46683)
        # SSA join for if statement (line 658)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to is_string(...): (line 660)
        # Processing the call arguments (line 660)
        # Getting the type of 'default' (line 660)
        default_46685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 25), 'default', False)
        # Processing the call keyword arguments (line 660)
        kwargs_46686 = {}
        # Getting the type of 'is_string' (line 660)
        is_string_46684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 15), 'is_string', False)
        # Calling is_string(args, kwargs) (line 660)
        is_string_call_result_46687 = invoke(stypy.reporting.localization.Localization(__file__, 660, 15), is_string_46684, *[default_46685], **kwargs_46686)
        
        # Testing the type of an if condition (line 660)
        if_condition_46688 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 660, 12), is_string_call_result_46687)
        # Assigning a type to the variable 'if_condition_46688' (line 660)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 660, 12), 'if_condition_46688', if_condition_46688)
        # SSA begins for if statement (line 660)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'list' (line 661)
        list_46689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 661, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 661)
        # Adding element type (line 661)
        # Getting the type of 'default' (line 661)
        default_46690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 24), 'default')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 661, 23), list_46689, default_46690)
        
        # Assigning a type to the variable 'stypy_return_type' (line 661)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 661, 16), 'stypy_return_type', list_46689)
        # SSA join for if statement (line 660)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'default' (line 662)
        default_46691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 19), 'default')
        # Assigning a type to the variable 'stypy_return_type' (line 662)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 662, 12), 'stypy_return_type', default_46691)
        # SSA join for try-except statement (line 655)
        module_type_store = module_type_store.join_ssa_context()
        
        # Calculating list comprehension
        # Calculating comprehension expression
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to split(...): (line 663)
        # Processing the call arguments (line 663)
        str_46700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 663, 58), 'str', ',')
        # Processing the call keyword arguments (line 663)
        kwargs_46701 = {}
        # Getting the type of 'libs' (line 663)
        libs_46698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 663, 47), 'libs', False)
        # Obtaining the member 'split' of a type (line 663)
        split_46699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 663, 47), libs_46698, 'split')
        # Calling split(args, kwargs) (line 663)
        split_call_result_46702 = invoke(stypy.reporting.localization.Localization(__file__, 663, 47), split_46699, *[str_46700], **kwargs_46701)
        
        comprehension_46703 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 663, 28), split_call_result_46702)
        # Assigning a type to the variable 'a' (line 663)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 663, 28), 'a', comprehension_46703)
        
        # Call to strip(...): (line 663)
        # Processing the call keyword arguments (line 663)
        kwargs_46696 = {}
        # Getting the type of 'a' (line 663)
        a_46694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 663, 28), 'a', False)
        # Obtaining the member 'strip' of a type (line 663)
        strip_46695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 663, 28), a_46694, 'strip')
        # Calling strip(args, kwargs) (line 663)
        strip_call_result_46697 = invoke(stypy.reporting.localization.Localization(__file__, 663, 28), strip_46695, *[], **kwargs_46696)
        
        list_46704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 663, 28), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 663, 28), list_46704, strip_call_result_46697)
        comprehension_46705 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 663, 16), list_46704)
        # Assigning a type to the variable 'b' (line 663)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 663, 16), 'b', comprehension_46705)
        # Getting the type of 'b' (line 663)
        b_46693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 663, 67), 'b')
        # Getting the type of 'b' (line 663)
        b_46692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 663, 16), 'b')
        list_46706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 663, 16), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 663, 16), list_46706, b_46692)
        # Assigning a type to the variable 'stypy_return_type' (line 663)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 663, 8), 'stypy_return_type', list_46706)
        
        # ################# End of 'get_libs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_libs' in the type store
        # Getting the type of 'stypy_return_type' (line 654)
        stypy_return_type_46707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 654, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_46707)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_libs'
        return stypy_return_type_46707


    @norecursion
    def get_libraries(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        str_46708 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 665, 32), 'str', 'libraries')
        defaults = [str_46708]
        # Create a new context for function 'get_libraries'
        module_type_store = module_type_store.open_function_context('get_libraries', 665, 4, False)
        # Assigning a type to the variable 'self' (line 666)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 666, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        system_info.get_libraries.__dict__.__setitem__('stypy_localization', localization)
        system_info.get_libraries.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        system_info.get_libraries.__dict__.__setitem__('stypy_type_store', module_type_store)
        system_info.get_libraries.__dict__.__setitem__('stypy_function_name', 'system_info.get_libraries')
        system_info.get_libraries.__dict__.__setitem__('stypy_param_names_list', ['key'])
        system_info.get_libraries.__dict__.__setitem__('stypy_varargs_param_name', None)
        system_info.get_libraries.__dict__.__setitem__('stypy_kwargs_param_name', None)
        system_info.get_libraries.__dict__.__setitem__('stypy_call_defaults', defaults)
        system_info.get_libraries.__dict__.__setitem__('stypy_call_varargs', varargs)
        system_info.get_libraries.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        system_info.get_libraries.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'system_info.get_libraries', ['key'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_libraries', localization, ['key'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_libraries(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 666)
        str_46709 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 666, 25), 'str', '_lib_names')
        # Getting the type of 'self' (line 666)
        self_46710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 19), 'self')
        
        (may_be_46711, more_types_in_union_46712) = may_provide_member(str_46709, self_46710)

        if may_be_46711:

            if more_types_in_union_46712:
                # Runtime conditional SSA (line 666)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'self' (line 666)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 666, 8), 'self', remove_not_member_provider_from_union(self_46710, '_lib_names'))
            
            # Call to get_libs(...): (line 667)
            # Processing the call arguments (line 667)
            # Getting the type of 'key' (line 667)
            key_46715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 33), 'key', False)
            # Processing the call keyword arguments (line 667)
            # Getting the type of 'self' (line 667)
            self_46716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 46), 'self', False)
            # Obtaining the member '_lib_names' of a type (line 667)
            _lib_names_46717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 667, 46), self_46716, '_lib_names')
            keyword_46718 = _lib_names_46717
            kwargs_46719 = {'default': keyword_46718}
            # Getting the type of 'self' (line 667)
            self_46713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 19), 'self', False)
            # Obtaining the member 'get_libs' of a type (line 667)
            get_libs_46714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 667, 19), self_46713, 'get_libs')
            # Calling get_libs(args, kwargs) (line 667)
            get_libs_call_result_46720 = invoke(stypy.reporting.localization.Localization(__file__, 667, 19), get_libs_46714, *[key_46715], **kwargs_46719)
            
            # Assigning a type to the variable 'stypy_return_type' (line 667)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 667, 12), 'stypy_return_type', get_libs_call_result_46720)

            if more_types_in_union_46712:
                # Runtime conditional SSA for else branch (line 666)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_46711) or more_types_in_union_46712):
            # Assigning a type to the variable 'self' (line 666)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 666, 8), 'self', remove_member_provider_from_union(self_46710, '_lib_names'))
            
            # Call to get_libs(...): (line 669)
            # Processing the call arguments (line 669)
            # Getting the type of 'key' (line 669)
            key_46723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 33), 'key', False)
            str_46724 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 669, 38), 'str', '')
            # Processing the call keyword arguments (line 669)
            kwargs_46725 = {}
            # Getting the type of 'self' (line 669)
            self_46721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 19), 'self', False)
            # Obtaining the member 'get_libs' of a type (line 669)
            get_libs_46722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 669, 19), self_46721, 'get_libs')
            # Calling get_libs(args, kwargs) (line 669)
            get_libs_call_result_46726 = invoke(stypy.reporting.localization.Localization(__file__, 669, 19), get_libs_46722, *[key_46723, str_46724], **kwargs_46725)
            
            # Assigning a type to the variable 'stypy_return_type' (line 669)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 669, 12), 'stypy_return_type', get_libs_call_result_46726)

            if (may_be_46711 and more_types_in_union_46712):
                # SSA join for if statement (line 666)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'get_libraries(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_libraries' in the type store
        # Getting the type of 'stypy_return_type' (line 665)
        stypy_return_type_46727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_46727)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_libraries'
        return stypy_return_type_46727


    @norecursion
    def library_extensions(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'library_extensions'
        module_type_store = module_type_store.open_function_context('library_extensions', 671, 4, False)
        # Assigning a type to the variable 'self' (line 672)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 672, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        system_info.library_extensions.__dict__.__setitem__('stypy_localization', localization)
        system_info.library_extensions.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        system_info.library_extensions.__dict__.__setitem__('stypy_type_store', module_type_store)
        system_info.library_extensions.__dict__.__setitem__('stypy_function_name', 'system_info.library_extensions')
        system_info.library_extensions.__dict__.__setitem__('stypy_param_names_list', [])
        system_info.library_extensions.__dict__.__setitem__('stypy_varargs_param_name', None)
        system_info.library_extensions.__dict__.__setitem__('stypy_kwargs_param_name', None)
        system_info.library_extensions.__dict__.__setitem__('stypy_call_defaults', defaults)
        system_info.library_extensions.__dict__.__setitem__('stypy_call_varargs', varargs)
        system_info.library_extensions.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        system_info.library_extensions.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'system_info.library_extensions', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'library_extensions', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'library_extensions(...)' code ##################

        
        # Assigning a List to a Name (line 672):
        
        # Assigning a List to a Name (line 672):
        
        # Obtaining an instance of the builtin type 'list' (line 672)
        list_46728 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 672, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 672)
        # Adding element type (line 672)
        str_46729 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 672, 23), 'str', '.a')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 672, 22), list_46728, str_46729)
        
        # Assigning a type to the variable 'static_exts' (line 672)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 672, 8), 'static_exts', list_46728)
        
        
        # Getting the type of 'sys' (line 673)
        sys_46730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 11), 'sys')
        # Obtaining the member 'platform' of a type (line 673)
        platform_46731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 673, 11), sys_46730, 'platform')
        str_46732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 673, 27), 'str', 'win32')
        # Applying the binary operator '==' (line 673)
        result_eq_46733 = python_operator(stypy.reporting.localization.Localization(__file__, 673, 11), '==', platform_46731, str_46732)
        
        # Testing the type of an if condition (line 673)
        if_condition_46734 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 673, 8), result_eq_46733)
        # Assigning a type to the variable 'if_condition_46734' (line 673)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 673, 8), 'if_condition_46734', if_condition_46734)
        # SSA begins for if statement (line 673)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 674)
        # Processing the call arguments (line 674)
        str_46737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 674, 31), 'str', '.lib')
        # Processing the call keyword arguments (line 674)
        kwargs_46738 = {}
        # Getting the type of 'static_exts' (line 674)
        static_exts_46735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 12), 'static_exts', False)
        # Obtaining the member 'append' of a type (line 674)
        append_46736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 674, 12), static_exts_46735, 'append')
        # Calling append(args, kwargs) (line 674)
        append_call_result_46739 = invoke(stypy.reporting.localization.Localization(__file__, 674, 12), append_46736, *[str_46737], **kwargs_46738)
        
        # SSA join for if statement (line 673)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 675)
        self_46740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 11), 'self')
        # Obtaining the member 'search_static_first' of a type (line 675)
        search_static_first_46741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 675, 11), self_46740, 'search_static_first')
        # Testing the type of an if condition (line 675)
        if_condition_46742 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 675, 8), search_static_first_46741)
        # Assigning a type to the variable 'if_condition_46742' (line 675)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 675, 8), 'if_condition_46742', if_condition_46742)
        # SSA begins for if statement (line 675)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 676):
        
        # Assigning a BinOp to a Name (line 676):
        # Getting the type of 'static_exts' (line 676)
        static_exts_46743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 19), 'static_exts')
        
        # Obtaining an instance of the builtin type 'list' (line 676)
        list_46744 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 676, 33), 'list')
        # Adding type elements to the builtin type 'list' instance (line 676)
        # Adding element type (line 676)
        # Getting the type of 'so_ext' (line 676)
        so_ext_46745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 34), 'so_ext')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 676, 33), list_46744, so_ext_46745)
        
        # Applying the binary operator '+' (line 676)
        result_add_46746 = python_operator(stypy.reporting.localization.Localization(__file__, 676, 19), '+', static_exts_46743, list_46744)
        
        # Assigning a type to the variable 'exts' (line 676)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 676, 12), 'exts', result_add_46746)
        # SSA branch for the else part of an if statement (line 675)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 678):
        
        # Assigning a BinOp to a Name (line 678):
        
        # Obtaining an instance of the builtin type 'list' (line 678)
        list_46747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 678, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 678)
        # Adding element type (line 678)
        # Getting the type of 'so_ext' (line 678)
        so_ext_46748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 678, 20), 'so_ext')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 678, 19), list_46747, so_ext_46748)
        
        # Getting the type of 'static_exts' (line 678)
        static_exts_46749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 678, 30), 'static_exts')
        # Applying the binary operator '+' (line 678)
        result_add_46750 = python_operator(stypy.reporting.localization.Localization(__file__, 678, 19), '+', list_46747, static_exts_46749)
        
        # Assigning a type to the variable 'exts' (line 678)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 678, 12), 'exts', result_add_46750)
        # SSA join for if statement (line 675)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'sys' (line 679)
        sys_46751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 11), 'sys')
        # Obtaining the member 'platform' of a type (line 679)
        platform_46752 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 679, 11), sys_46751, 'platform')
        str_46753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 679, 27), 'str', 'cygwin')
        # Applying the binary operator '==' (line 679)
        result_eq_46754 = python_operator(stypy.reporting.localization.Localization(__file__, 679, 11), '==', platform_46752, str_46753)
        
        # Testing the type of an if condition (line 679)
        if_condition_46755 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 679, 8), result_eq_46754)
        # Assigning a type to the variable 'if_condition_46755' (line 679)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 679, 8), 'if_condition_46755', if_condition_46755)
        # SSA begins for if statement (line 679)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 680)
        # Processing the call arguments (line 680)
        str_46758 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 680, 24), 'str', '.dll.a')
        # Processing the call keyword arguments (line 680)
        kwargs_46759 = {}
        # Getting the type of 'exts' (line 680)
        exts_46756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 12), 'exts', False)
        # Obtaining the member 'append' of a type (line 680)
        append_46757 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 680, 12), exts_46756, 'append')
        # Calling append(args, kwargs) (line 680)
        append_call_result_46760 = invoke(stypy.reporting.localization.Localization(__file__, 680, 12), append_46757, *[str_46758], **kwargs_46759)
        
        # SSA join for if statement (line 679)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'sys' (line 681)
        sys_46761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 681, 11), 'sys')
        # Obtaining the member 'platform' of a type (line 681)
        platform_46762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 681, 11), sys_46761, 'platform')
        str_46763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 681, 27), 'str', 'darwin')
        # Applying the binary operator '==' (line 681)
        result_eq_46764 = python_operator(stypy.reporting.localization.Localization(__file__, 681, 11), '==', platform_46762, str_46763)
        
        # Testing the type of an if condition (line 681)
        if_condition_46765 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 681, 8), result_eq_46764)
        # Assigning a type to the variable 'if_condition_46765' (line 681)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 681, 8), 'if_condition_46765', if_condition_46765)
        # SSA begins for if statement (line 681)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 682)
        # Processing the call arguments (line 682)
        str_46768 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 682, 24), 'str', '.dylib')
        # Processing the call keyword arguments (line 682)
        kwargs_46769 = {}
        # Getting the type of 'exts' (line 682)
        exts_46766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 682, 12), 'exts', False)
        # Obtaining the member 'append' of a type (line 682)
        append_46767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 682, 12), exts_46766, 'append')
        # Calling append(args, kwargs) (line 682)
        append_call_result_46770 = invoke(stypy.reporting.localization.Localization(__file__, 682, 12), append_46767, *[str_46768], **kwargs_46769)
        
        # SSA join for if statement (line 681)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'exts' (line 683)
        exts_46771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 683, 15), 'exts')
        # Assigning a type to the variable 'stypy_return_type' (line 683)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 683, 8), 'stypy_return_type', exts_46771)
        
        # ################# End of 'library_extensions(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'library_extensions' in the type store
        # Getting the type of 'stypy_return_type' (line 671)
        stypy_return_type_46772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_46772)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'library_extensions'
        return stypy_return_type_46772


    @norecursion
    def check_libs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        
        # Obtaining an instance of the builtin type 'list' (line 685)
        list_46773 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 685, 50), 'list')
        # Adding type elements to the builtin type 'list' instance (line 685)
        
        defaults = [list_46773]
        # Create a new context for function 'check_libs'
        module_type_store = module_type_store.open_function_context('check_libs', 685, 4, False)
        # Assigning a type to the variable 'self' (line 686)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 686, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        system_info.check_libs.__dict__.__setitem__('stypy_localization', localization)
        system_info.check_libs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        system_info.check_libs.__dict__.__setitem__('stypy_type_store', module_type_store)
        system_info.check_libs.__dict__.__setitem__('stypy_function_name', 'system_info.check_libs')
        system_info.check_libs.__dict__.__setitem__('stypy_param_names_list', ['lib_dirs', 'libs', 'opt_libs'])
        system_info.check_libs.__dict__.__setitem__('stypy_varargs_param_name', None)
        system_info.check_libs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        system_info.check_libs.__dict__.__setitem__('stypy_call_defaults', defaults)
        system_info.check_libs.__dict__.__setitem__('stypy_call_varargs', varargs)
        system_info.check_libs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        system_info.check_libs.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'system_info.check_libs', ['lib_dirs', 'libs', 'opt_libs'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'check_libs', localization, ['lib_dirs', 'libs', 'opt_libs'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'check_libs(...)' code ##################

        str_46774 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 691, (-1)), 'str', 'If static or shared libraries are available then return\n        their info dictionary.\n\n        Checks for all libraries as shared libraries first, then\n        static (or vice versa if self.search_static_first is True).\n        ')
        
        # Assigning a Call to a Name (line 692):
        
        # Assigning a Call to a Name (line 692):
        
        # Call to library_extensions(...): (line 692)
        # Processing the call keyword arguments (line 692)
        kwargs_46777 = {}
        # Getting the type of 'self' (line 692)
        self_46775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 15), 'self', False)
        # Obtaining the member 'library_extensions' of a type (line 692)
        library_extensions_46776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 692, 15), self_46775, 'library_extensions')
        # Calling library_extensions(args, kwargs) (line 692)
        library_extensions_call_result_46778 = invoke(stypy.reporting.localization.Localization(__file__, 692, 15), library_extensions_46776, *[], **kwargs_46777)
        
        # Assigning a type to the variable 'exts' (line 692)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 692, 8), 'exts', library_extensions_call_result_46778)
        
        # Assigning a Name to a Name (line 693):
        
        # Assigning a Name to a Name (line 693):
        # Getting the type of 'None' (line 693)
        None_46779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 15), 'None')
        # Assigning a type to the variable 'info' (line 693)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 693, 8), 'info', None_46779)
        
        # Getting the type of 'exts' (line 694)
        exts_46780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 19), 'exts')
        # Testing the type of a for loop iterable (line 694)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 694, 8), exts_46780)
        # Getting the type of the for loop variable (line 694)
        for_loop_var_46781 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 694, 8), exts_46780)
        # Assigning a type to the variable 'ext' (line 694)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 694, 8), 'ext', for_loop_var_46781)
        # SSA begins for a for statement (line 694)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 695):
        
        # Assigning a Call to a Name (line 695):
        
        # Call to _check_libs(...): (line 695)
        # Processing the call arguments (line 695)
        # Getting the type of 'lib_dirs' (line 695)
        lib_dirs_46784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 36), 'lib_dirs', False)
        # Getting the type of 'libs' (line 695)
        libs_46785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 46), 'libs', False)
        # Getting the type of 'opt_libs' (line 695)
        opt_libs_46786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 52), 'opt_libs', False)
        
        # Obtaining an instance of the builtin type 'list' (line 695)
        list_46787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 695, 62), 'list')
        # Adding type elements to the builtin type 'list' instance (line 695)
        # Adding element type (line 695)
        # Getting the type of 'ext' (line 695)
        ext_46788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 63), 'ext', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 695, 62), list_46787, ext_46788)
        
        # Processing the call keyword arguments (line 695)
        kwargs_46789 = {}
        # Getting the type of 'self' (line 695)
        self_46782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 19), 'self', False)
        # Obtaining the member '_check_libs' of a type (line 695)
        _check_libs_46783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 695, 19), self_46782, '_check_libs')
        # Calling _check_libs(args, kwargs) (line 695)
        _check_libs_call_result_46790 = invoke(stypy.reporting.localization.Localization(__file__, 695, 19), _check_libs_46783, *[lib_dirs_46784, libs_46785, opt_libs_46786, list_46787], **kwargs_46789)
        
        # Assigning a type to the variable 'info' (line 695)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 695, 12), 'info', _check_libs_call_result_46790)
        
        # Type idiom detected: calculating its left and rigth part (line 696)
        # Getting the type of 'info' (line 696)
        info_46791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 696, 12), 'info')
        # Getting the type of 'None' (line 696)
        None_46792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 696, 27), 'None')
        
        (may_be_46793, more_types_in_union_46794) = may_not_be_none(info_46791, None_46792)

        if may_be_46793:

            if more_types_in_union_46794:
                # Runtime conditional SSA (line 696)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store


            if more_types_in_union_46794:
                # SSA join for if statement (line 696)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'info' (line 698)
        info_46795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 15), 'info')
        # Applying the 'not' unary operator (line 698)
        result_not__46796 = python_operator(stypy.reporting.localization.Localization(__file__, 698, 11), 'not', info_46795)
        
        # Testing the type of an if condition (line 698)
        if_condition_46797 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 698, 8), result_not__46796)
        # Assigning a type to the variable 'if_condition_46797' (line 698)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 698, 8), 'if_condition_46797', if_condition_46797)
        # SSA begins for if statement (line 698)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to info(...): (line 699)
        # Processing the call arguments (line 699)
        str_46800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 699, 21), 'str', '  libraries %s not found in %s')
        
        # Call to join(...): (line 699)
        # Processing the call arguments (line 699)
        # Getting the type of 'libs' (line 699)
        libs_46803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 64), 'libs', False)
        # Processing the call keyword arguments (line 699)
        kwargs_46804 = {}
        str_46801 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 699, 55), 'str', ',')
        # Obtaining the member 'join' of a type (line 699)
        join_46802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 699, 55), str_46801, 'join')
        # Calling join(args, kwargs) (line 699)
        join_call_result_46805 = invoke(stypy.reporting.localization.Localization(__file__, 699, 55), join_46802, *[libs_46803], **kwargs_46804)
        
        # Getting the type of 'lib_dirs' (line 700)
        lib_dirs_46806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 21), 'lib_dirs', False)
        # Processing the call keyword arguments (line 699)
        kwargs_46807 = {}
        # Getting the type of 'log' (line 699)
        log_46798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 12), 'log', False)
        # Obtaining the member 'info' of a type (line 699)
        info_46799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 699, 12), log_46798, 'info')
        # Calling info(args, kwargs) (line 699)
        info_call_result_46808 = invoke(stypy.reporting.localization.Localization(__file__, 699, 12), info_46799, *[str_46800, join_call_result_46805, lib_dirs_46806], **kwargs_46807)
        
        # SSA join for if statement (line 698)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'info' (line 701)
        info_46809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 15), 'info')
        # Assigning a type to the variable 'stypy_return_type' (line 701)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 701, 8), 'stypy_return_type', info_46809)
        
        # ################# End of 'check_libs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'check_libs' in the type store
        # Getting the type of 'stypy_return_type' (line 685)
        stypy_return_type_46810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 685, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_46810)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'check_libs'
        return stypy_return_type_46810


    @norecursion
    def check_libs2(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        
        # Obtaining an instance of the builtin type 'list' (line 703)
        list_46811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 703, 51), 'list')
        # Adding type elements to the builtin type 'list' instance (line 703)
        
        defaults = [list_46811]
        # Create a new context for function 'check_libs2'
        module_type_store = module_type_store.open_function_context('check_libs2', 703, 4, False)
        # Assigning a type to the variable 'self' (line 704)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 704, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        system_info.check_libs2.__dict__.__setitem__('stypy_localization', localization)
        system_info.check_libs2.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        system_info.check_libs2.__dict__.__setitem__('stypy_type_store', module_type_store)
        system_info.check_libs2.__dict__.__setitem__('stypy_function_name', 'system_info.check_libs2')
        system_info.check_libs2.__dict__.__setitem__('stypy_param_names_list', ['lib_dirs', 'libs', 'opt_libs'])
        system_info.check_libs2.__dict__.__setitem__('stypy_varargs_param_name', None)
        system_info.check_libs2.__dict__.__setitem__('stypy_kwargs_param_name', None)
        system_info.check_libs2.__dict__.__setitem__('stypy_call_defaults', defaults)
        system_info.check_libs2.__dict__.__setitem__('stypy_call_varargs', varargs)
        system_info.check_libs2.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        system_info.check_libs2.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'system_info.check_libs2', ['lib_dirs', 'libs', 'opt_libs'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'check_libs2', localization, ['lib_dirs', 'libs', 'opt_libs'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'check_libs2(...)' code ##################

        str_46812 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 708, (-1)), 'str', 'If static or shared libraries are available then return\n        their info dictionary.\n\n        Checks each library for shared or static.\n        ')
        
        # Assigning a Call to a Name (line 709):
        
        # Assigning a Call to a Name (line 709):
        
        # Call to library_extensions(...): (line 709)
        # Processing the call keyword arguments (line 709)
        kwargs_46815 = {}
        # Getting the type of 'self' (line 709)
        self_46813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 15), 'self', False)
        # Obtaining the member 'library_extensions' of a type (line 709)
        library_extensions_46814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 709, 15), self_46813, 'library_extensions')
        # Calling library_extensions(args, kwargs) (line 709)
        library_extensions_call_result_46816 = invoke(stypy.reporting.localization.Localization(__file__, 709, 15), library_extensions_46814, *[], **kwargs_46815)
        
        # Assigning a type to the variable 'exts' (line 709)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 709, 8), 'exts', library_extensions_call_result_46816)
        
        # Assigning a Call to a Name (line 710):
        
        # Assigning a Call to a Name (line 710):
        
        # Call to _check_libs(...): (line 710)
        # Processing the call arguments (line 710)
        # Getting the type of 'lib_dirs' (line 710)
        lib_dirs_46819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 32), 'lib_dirs', False)
        # Getting the type of 'libs' (line 710)
        libs_46820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 42), 'libs', False)
        # Getting the type of 'opt_libs' (line 710)
        opt_libs_46821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 48), 'opt_libs', False)
        # Getting the type of 'exts' (line 710)
        exts_46822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 58), 'exts', False)
        # Processing the call keyword arguments (line 710)
        kwargs_46823 = {}
        # Getting the type of 'self' (line 710)
        self_46817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 15), 'self', False)
        # Obtaining the member '_check_libs' of a type (line 710)
        _check_libs_46818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 710, 15), self_46817, '_check_libs')
        # Calling _check_libs(args, kwargs) (line 710)
        _check_libs_call_result_46824 = invoke(stypy.reporting.localization.Localization(__file__, 710, 15), _check_libs_46818, *[lib_dirs_46819, libs_46820, opt_libs_46821, exts_46822], **kwargs_46823)
        
        # Assigning a type to the variable 'info' (line 710)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 710, 8), 'info', _check_libs_call_result_46824)
        
        
        # Getting the type of 'info' (line 711)
        info_46825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 15), 'info')
        # Applying the 'not' unary operator (line 711)
        result_not__46826 = python_operator(stypy.reporting.localization.Localization(__file__, 711, 11), 'not', info_46825)
        
        # Testing the type of an if condition (line 711)
        if_condition_46827 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 711, 8), result_not__46826)
        # Assigning a type to the variable 'if_condition_46827' (line 711)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 711, 8), 'if_condition_46827', if_condition_46827)
        # SSA begins for if statement (line 711)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to info(...): (line 712)
        # Processing the call arguments (line 712)
        str_46830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 712, 21), 'str', '  libraries %s not found in %s')
        
        # Call to join(...): (line 712)
        # Processing the call arguments (line 712)
        # Getting the type of 'libs' (line 712)
        libs_46833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 64), 'libs', False)
        # Processing the call keyword arguments (line 712)
        kwargs_46834 = {}
        str_46831 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 712, 55), 'str', ',')
        # Obtaining the member 'join' of a type (line 712)
        join_46832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 712, 55), str_46831, 'join')
        # Calling join(args, kwargs) (line 712)
        join_call_result_46835 = invoke(stypy.reporting.localization.Localization(__file__, 712, 55), join_46832, *[libs_46833], **kwargs_46834)
        
        # Getting the type of 'lib_dirs' (line 713)
        lib_dirs_46836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 21), 'lib_dirs', False)
        # Processing the call keyword arguments (line 712)
        kwargs_46837 = {}
        # Getting the type of 'log' (line 712)
        log_46828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 12), 'log', False)
        # Obtaining the member 'info' of a type (line 712)
        info_46829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 712, 12), log_46828, 'info')
        # Calling info(args, kwargs) (line 712)
        info_call_result_46838 = invoke(stypy.reporting.localization.Localization(__file__, 712, 12), info_46829, *[str_46830, join_call_result_46835, lib_dirs_46836], **kwargs_46837)
        
        # SSA join for if statement (line 711)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'info' (line 714)
        info_46839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 15), 'info')
        # Assigning a type to the variable 'stypy_return_type' (line 714)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 714, 8), 'stypy_return_type', info_46839)
        
        # ################# End of 'check_libs2(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'check_libs2' in the type store
        # Getting the type of 'stypy_return_type' (line 703)
        stypy_return_type_46840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_46840)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'check_libs2'
        return stypy_return_type_46840


    @norecursion
    def _lib_list(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_lib_list'
        module_type_store = module_type_store.open_function_context('_lib_list', 716, 4, False)
        # Assigning a type to the variable 'self' (line 717)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 717, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        system_info._lib_list.__dict__.__setitem__('stypy_localization', localization)
        system_info._lib_list.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        system_info._lib_list.__dict__.__setitem__('stypy_type_store', module_type_store)
        system_info._lib_list.__dict__.__setitem__('stypy_function_name', 'system_info._lib_list')
        system_info._lib_list.__dict__.__setitem__('stypy_param_names_list', ['lib_dir', 'libs', 'exts'])
        system_info._lib_list.__dict__.__setitem__('stypy_varargs_param_name', None)
        system_info._lib_list.__dict__.__setitem__('stypy_kwargs_param_name', None)
        system_info._lib_list.__dict__.__setitem__('stypy_call_defaults', defaults)
        system_info._lib_list.__dict__.__setitem__('stypy_call_varargs', varargs)
        system_info._lib_list.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        system_info._lib_list.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'system_info._lib_list', ['lib_dir', 'libs', 'exts'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_lib_list', localization, ['lib_dir', 'libs', 'exts'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_lib_list(...)' code ##################

        # Evaluating assert statement condition
        
        # Call to is_string(...): (line 717)
        # Processing the call arguments (line 717)
        # Getting the type of 'lib_dir' (line 717)
        lib_dir_46842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 25), 'lib_dir', False)
        # Processing the call keyword arguments (line 717)
        kwargs_46843 = {}
        # Getting the type of 'is_string' (line 717)
        is_string_46841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 15), 'is_string', False)
        # Calling is_string(args, kwargs) (line 717)
        is_string_call_result_46844 = invoke(stypy.reporting.localization.Localization(__file__, 717, 15), is_string_46841, *[lib_dir_46842], **kwargs_46843)
        
        
        # Assigning a List to a Name (line 718):
        
        # Assigning a List to a Name (line 718):
        
        # Obtaining an instance of the builtin type 'list' (line 718)
        list_46845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 718, 18), 'list')
        # Adding type elements to the builtin type 'list' instance (line 718)
        
        # Assigning a type to the variable 'liblist' (line 718)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 718, 8), 'liblist', list_46845)
        
        
        # Getting the type of 'sys' (line 720)
        sys_46846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 720, 11), 'sys')
        # Obtaining the member 'platform' of a type (line 720)
        platform_46847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 720, 11), sys_46846, 'platform')
        str_46848 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 720, 27), 'str', 'win32')
        # Applying the binary operator '==' (line 720)
        result_eq_46849 = python_operator(stypy.reporting.localization.Localization(__file__, 720, 11), '==', platform_46847, str_46848)
        
        # Testing the type of an if condition (line 720)
        if_condition_46850 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 720, 8), result_eq_46849)
        # Assigning a type to the variable 'if_condition_46850' (line 720)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 720, 8), 'if_condition_46850', if_condition_46850)
        # SSA begins for if statement (line 720)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a List to a Name (line 721):
        
        # Assigning a List to a Name (line 721):
        
        # Obtaining an instance of the builtin type 'list' (line 721)
        list_46851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 721, 27), 'list')
        # Adding type elements to the builtin type 'list' instance (line 721)
        # Adding element type (line 721)
        str_46852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 721, 28), 'str', '')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 721, 27), list_46851, str_46852)
        # Adding element type (line 721)
        str_46853 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 721, 32), 'str', 'lib')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 721, 27), list_46851, str_46853)
        
        # Assigning a type to the variable 'lib_prefixes' (line 721)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 721, 12), 'lib_prefixes', list_46851)
        # SSA branch for the else part of an if statement (line 720)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a List to a Name (line 723):
        
        # Assigning a List to a Name (line 723):
        
        # Obtaining an instance of the builtin type 'list' (line 723)
        list_46854 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 723, 27), 'list')
        # Adding type elements to the builtin type 'list' instance (line 723)
        # Adding element type (line 723)
        str_46855 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 723, 28), 'str', 'lib')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 723, 27), list_46854, str_46855)
        
        # Assigning a type to the variable 'lib_prefixes' (line 723)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 723, 12), 'lib_prefixes', list_46854)
        # SSA join for if statement (line 720)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'libs' (line 725)
        libs_46856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 17), 'libs')
        # Testing the type of a for loop iterable (line 725)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 725, 8), libs_46856)
        # Getting the type of the for loop variable (line 725)
        for_loop_var_46857 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 725, 8), libs_46856)
        # Assigning a type to the variable 'l' (line 725)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 725, 8), 'l', for_loop_var_46857)
        # SSA begins for a for statement (line 725)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Getting the type of 'exts' (line 726)
        exts_46858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 23), 'exts')
        # Testing the type of a for loop iterable (line 726)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 726, 12), exts_46858)
        # Getting the type of the for loop variable (line 726)
        for_loop_var_46859 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 726, 12), exts_46858)
        # Assigning a type to the variable 'ext' (line 726)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 726, 12), 'ext', for_loop_var_46859)
        # SSA begins for a for statement (line 726)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Getting the type of 'lib_prefixes' (line 727)
        lib_prefixes_46860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 30), 'lib_prefixes')
        # Testing the type of a for loop iterable (line 727)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 727, 16), lib_prefixes_46860)
        # Getting the type of the for loop variable (line 727)
        for_loop_var_46861 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 727, 16), lib_prefixes_46860)
        # Assigning a type to the variable 'prefix' (line 727)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 727, 16), 'prefix', for_loop_var_46861)
        # SSA begins for a for statement (line 727)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 728):
        
        # Assigning a Call to a Name (line 728):
        
        # Call to combine_paths(...): (line 728)
        # Processing the call arguments (line 728)
        # Getting the type of 'lib_dir' (line 728)
        lib_dir_46864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 43), 'lib_dir', False)
        # Getting the type of 'prefix' (line 728)
        prefix_46865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 52), 'prefix', False)
        # Getting the type of 'l' (line 728)
        l_46866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 61), 'l', False)
        # Applying the binary operator '+' (line 728)
        result_add_46867 = python_operator(stypy.reporting.localization.Localization(__file__, 728, 52), '+', prefix_46865, l_46866)
        
        # Getting the type of 'ext' (line 728)
        ext_46868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 65), 'ext', False)
        # Applying the binary operator '+' (line 728)
        result_add_46869 = python_operator(stypy.reporting.localization.Localization(__file__, 728, 63), '+', result_add_46867, ext_46868)
        
        # Processing the call keyword arguments (line 728)
        kwargs_46870 = {}
        # Getting the type of 'self' (line 728)
        self_46862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 24), 'self', False)
        # Obtaining the member 'combine_paths' of a type (line 728)
        combine_paths_46863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 728, 24), self_46862, 'combine_paths')
        # Calling combine_paths(args, kwargs) (line 728)
        combine_paths_call_result_46871 = invoke(stypy.reporting.localization.Localization(__file__, 728, 24), combine_paths_46863, *[lib_dir_46864, result_add_46869], **kwargs_46870)
        
        # Assigning a type to the variable 'p' (line 728)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 728, 20), 'p', combine_paths_call_result_46871)
        
        # Getting the type of 'p' (line 729)
        p_46872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 23), 'p')
        # Testing the type of an if condition (line 729)
        if_condition_46873 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 729, 20), p_46872)
        # Assigning a type to the variable 'if_condition_46873' (line 729)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 729, 20), 'if_condition_46873', if_condition_46873)
        # SSA begins for if statement (line 729)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA join for if statement (line 729)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'p' (line 731)
        p_46874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 19), 'p')
        # Testing the type of an if condition (line 731)
        if_condition_46875 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 731, 16), p_46874)
        # Assigning a type to the variable 'if_condition_46875' (line 731)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 731, 16), 'if_condition_46875', if_condition_46875)
        # SSA begins for if statement (line 731)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Evaluating assert statement condition
        
        
        # Call to len(...): (line 732)
        # Processing the call arguments (line 732)
        # Getting the type of 'p' (line 732)
        p_46877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 31), 'p', False)
        # Processing the call keyword arguments (line 732)
        kwargs_46878 = {}
        # Getting the type of 'len' (line 732)
        len_46876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 27), 'len', False)
        # Calling len(args, kwargs) (line 732)
        len_call_result_46879 = invoke(stypy.reporting.localization.Localization(__file__, 732, 27), len_46876, *[p_46877], **kwargs_46878)
        
        int_46880 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 732, 37), 'int')
        # Applying the binary operator '==' (line 732)
        result_eq_46881 = python_operator(stypy.reporting.localization.Localization(__file__, 732, 27), '==', len_call_result_46879, int_46880)
        
        
        
        # Getting the type of 'ext' (line 735)
        ext_46882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 735, 23), 'ext')
        str_46883 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 735, 30), 'str', '.dll.a')
        # Applying the binary operator '==' (line 735)
        result_eq_46884 = python_operator(stypy.reporting.localization.Localization(__file__, 735, 23), '==', ext_46882, str_46883)
        
        # Testing the type of an if condition (line 735)
        if_condition_46885 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 735, 20), result_eq_46884)
        # Assigning a type to the variable 'if_condition_46885' (line 735)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 735, 20), 'if_condition_46885', if_condition_46885)
        # SSA begins for if statement (line 735)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'l' (line 736)
        l_46886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 24), 'l')
        str_46887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 736, 29), 'str', '.dll')
        # Applying the binary operator '+=' (line 736)
        result_iadd_46888 = python_operator(stypy.reporting.localization.Localization(__file__, 736, 24), '+=', l_46886, str_46887)
        # Assigning a type to the variable 'l' (line 736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 736, 24), 'l', result_iadd_46888)
        
        # SSA join for if statement (line 735)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to append(...): (line 737)
        # Processing the call arguments (line 737)
        # Getting the type of 'l' (line 737)
        l_46891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 35), 'l', False)
        # Processing the call keyword arguments (line 737)
        kwargs_46892 = {}
        # Getting the type of 'liblist' (line 737)
        liblist_46889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 20), 'liblist', False)
        # Obtaining the member 'append' of a type (line 737)
        append_46890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 737, 20), liblist_46889, 'append')
        # Calling append(args, kwargs) (line 737)
        append_call_result_46893 = invoke(stypy.reporting.localization.Localization(__file__, 737, 20), append_46890, *[l_46891], **kwargs_46892)
        
        # SSA join for if statement (line 731)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'liblist' (line 739)
        liblist_46894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 15), 'liblist')
        # Assigning a type to the variable 'stypy_return_type' (line 739)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 739, 8), 'stypy_return_type', liblist_46894)
        
        # ################# End of '_lib_list(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_lib_list' in the type store
        # Getting the type of 'stypy_return_type' (line 716)
        stypy_return_type_46895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_46895)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_lib_list'
        return stypy_return_type_46895


    @norecursion
    def _check_libs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_check_libs'
        module_type_store = module_type_store.open_function_context('_check_libs', 741, 4, False)
        # Assigning a type to the variable 'self' (line 742)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 742, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        system_info._check_libs.__dict__.__setitem__('stypy_localization', localization)
        system_info._check_libs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        system_info._check_libs.__dict__.__setitem__('stypy_type_store', module_type_store)
        system_info._check_libs.__dict__.__setitem__('stypy_function_name', 'system_info._check_libs')
        system_info._check_libs.__dict__.__setitem__('stypy_param_names_list', ['lib_dirs', 'libs', 'opt_libs', 'exts'])
        system_info._check_libs.__dict__.__setitem__('stypy_varargs_param_name', None)
        system_info._check_libs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        system_info._check_libs.__dict__.__setitem__('stypy_call_defaults', defaults)
        system_info._check_libs.__dict__.__setitem__('stypy_call_varargs', varargs)
        system_info._check_libs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        system_info._check_libs.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'system_info._check_libs', ['lib_dirs', 'libs', 'opt_libs', 'exts'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_check_libs', localization, ['lib_dirs', 'libs', 'opt_libs', 'exts'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_check_libs(...)' code ##################

        str_46896 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 745, (-1)), 'str', 'Find mandatory and optional libs in expected paths.\n\n        Missing optional libraries are silently forgotten.\n        ')
        
        
        # Call to is_sequence(...): (line 747)
        # Processing the call arguments (line 747)
        # Getting the type of 'lib_dirs' (line 747)
        lib_dirs_46898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 747, 23), 'lib_dirs', False)
        # Processing the call keyword arguments (line 747)
        kwargs_46899 = {}
        # Getting the type of 'is_sequence' (line 747)
        is_sequence_46897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 747, 11), 'is_sequence', False)
        # Calling is_sequence(args, kwargs) (line 747)
        is_sequence_call_result_46900 = invoke(stypy.reporting.localization.Localization(__file__, 747, 11), is_sequence_46897, *[lib_dirs_46898], **kwargs_46899)
        
        # Testing the type of an if condition (line 747)
        if_condition_46901 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 747, 8), is_sequence_call_result_46900)
        # Assigning a type to the variable 'if_condition_46901' (line 747)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 747, 8), 'if_condition_46901', if_condition_46901)
        # SSA begins for if statement (line 747)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 748):
        
        # Assigning a List to a Name (line 748):
        
        # Obtaining an instance of the builtin type 'list' (line 748)
        list_46902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 748, 37), 'list')
        # Adding type elements to the builtin type 'list' instance (line 748)
        
        # Assigning a type to the variable 'tuple_assignment_45334' (line 748)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 748, 12), 'tuple_assignment_45334', list_46902)
        
        # Assigning a List to a Name (line 748):
        
        # Obtaining an instance of the builtin type 'list' (line 748)
        list_46903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 748, 41), 'list')
        # Adding type elements to the builtin type 'list' instance (line 748)
        
        # Assigning a type to the variable 'tuple_assignment_45335' (line 748)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 748, 12), 'tuple_assignment_45335', list_46903)
        
        # Assigning a Name to a Name (line 748):
        # Getting the type of 'tuple_assignment_45334' (line 748)
        tuple_assignment_45334_46904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 12), 'tuple_assignment_45334')
        # Assigning a type to the variable 'found_libs' (line 748)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 748, 12), 'found_libs', tuple_assignment_45334_46904)
        
        # Assigning a Name to a Name (line 748):
        # Getting the type of 'tuple_assignment_45335' (line 748)
        tuple_assignment_45335_46905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 12), 'tuple_assignment_45335')
        # Assigning a type to the variable 'found_dirs' (line 748)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 748, 24), 'found_dirs', tuple_assignment_45335_46905)
        
        # Getting the type of 'lib_dirs' (line 749)
        lib_dirs_46906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 749, 24), 'lib_dirs')
        # Testing the type of a for loop iterable (line 749)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 749, 12), lib_dirs_46906)
        # Getting the type of the for loop variable (line 749)
        for_loop_var_46907 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 749, 12), lib_dirs_46906)
        # Assigning a type to the variable 'dir_' (line 749)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 749, 12), 'dir_', for_loop_var_46907)
        # SSA begins for a for statement (line 749)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 750):
        
        # Assigning a Call to a Name (line 750):
        
        # Call to _lib_list(...): (line 750)
        # Processing the call arguments (line 750)
        # Getting the type of 'dir_' (line 750)
        dir__46910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 45), 'dir_', False)
        # Getting the type of 'libs' (line 750)
        libs_46911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 51), 'libs', False)
        # Getting the type of 'exts' (line 750)
        exts_46912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 57), 'exts', False)
        # Processing the call keyword arguments (line 750)
        kwargs_46913 = {}
        # Getting the type of 'self' (line 750)
        self_46908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 30), 'self', False)
        # Obtaining the member '_lib_list' of a type (line 750)
        _lib_list_46909 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 750, 30), self_46908, '_lib_list')
        # Calling _lib_list(args, kwargs) (line 750)
        _lib_list_call_result_46914 = invoke(stypy.reporting.localization.Localization(__file__, 750, 30), _lib_list_46909, *[dir__46910, libs_46911, exts_46912], **kwargs_46913)
        
        # Assigning a type to the variable 'found_libs1' (line 750)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 750, 16), 'found_libs1', _lib_list_call_result_46914)
        
        # Getting the type of 'found_libs1' (line 756)
        found_libs1_46915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 33), 'found_libs1')
        # Testing the type of a for loop iterable (line 756)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 756, 16), found_libs1_46915)
        # Getting the type of the for loop variable (line 756)
        for_loop_var_46916 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 756, 16), found_libs1_46915)
        # Assigning a type to the variable 'found_lib' (line 756)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 756, 16), 'found_lib', for_loop_var_46916)
        # SSA begins for a for statement (line 756)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'found_lib' (line 757)
        found_lib_46917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 23), 'found_lib')
        # Getting the type of 'found_libs' (line 757)
        found_libs_46918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 40), 'found_libs')
        # Applying the binary operator 'notin' (line 757)
        result_contains_46919 = python_operator(stypy.reporting.localization.Localization(__file__, 757, 23), 'notin', found_lib_46917, found_libs_46918)
        
        # Testing the type of an if condition (line 757)
        if_condition_46920 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 757, 20), result_contains_46919)
        # Assigning a type to the variable 'if_condition_46920' (line 757)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 757, 20), 'if_condition_46920', if_condition_46920)
        # SSA begins for if statement (line 757)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 758)
        # Processing the call arguments (line 758)
        # Getting the type of 'found_lib' (line 758)
        found_lib_46923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 42), 'found_lib', False)
        # Processing the call keyword arguments (line 758)
        kwargs_46924 = {}
        # Getting the type of 'found_libs' (line 758)
        found_libs_46921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 24), 'found_libs', False)
        # Obtaining the member 'append' of a type (line 758)
        append_46922 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 758, 24), found_libs_46921, 'append')
        # Calling append(args, kwargs) (line 758)
        append_call_result_46925 = invoke(stypy.reporting.localization.Localization(__file__, 758, 24), append_46922, *[found_lib_46923], **kwargs_46924)
        
        
        
        # Getting the type of 'dir_' (line 759)
        dir__46926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 27), 'dir_')
        # Getting the type of 'found_dirs' (line 759)
        found_dirs_46927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 39), 'found_dirs')
        # Applying the binary operator 'notin' (line 759)
        result_contains_46928 = python_operator(stypy.reporting.localization.Localization(__file__, 759, 27), 'notin', dir__46926, found_dirs_46927)
        
        # Testing the type of an if condition (line 759)
        if_condition_46929 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 759, 24), result_contains_46928)
        # Assigning a type to the variable 'if_condition_46929' (line 759)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 759, 24), 'if_condition_46929', if_condition_46929)
        # SSA begins for if statement (line 759)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 760)
        # Processing the call arguments (line 760)
        # Getting the type of 'dir_' (line 760)
        dir__46932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 760, 46), 'dir_', False)
        # Processing the call keyword arguments (line 760)
        kwargs_46933 = {}
        # Getting the type of 'found_dirs' (line 760)
        found_dirs_46930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 760, 28), 'found_dirs', False)
        # Obtaining the member 'append' of a type (line 760)
        append_46931 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 760, 28), found_dirs_46930, 'append')
        # Calling append(args, kwargs) (line 760)
        append_call_result_46934 = invoke(stypy.reporting.localization.Localization(__file__, 760, 28), append_46931, *[dir__46932], **kwargs_46933)
        
        # SSA join for if statement (line 759)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 757)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 747)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 762):
        
        # Assigning a Call to a Name (line 762):
        
        # Call to _lib_list(...): (line 762)
        # Processing the call arguments (line 762)
        # Getting the type of 'lib_dirs' (line 762)
        lib_dirs_46937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 40), 'lib_dirs', False)
        # Getting the type of 'libs' (line 762)
        libs_46938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 50), 'libs', False)
        # Getting the type of 'exts' (line 762)
        exts_46939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 56), 'exts', False)
        # Processing the call keyword arguments (line 762)
        kwargs_46940 = {}
        # Getting the type of 'self' (line 762)
        self_46935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 25), 'self', False)
        # Obtaining the member '_lib_list' of a type (line 762)
        _lib_list_46936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 762, 25), self_46935, '_lib_list')
        # Calling _lib_list(args, kwargs) (line 762)
        _lib_list_call_result_46941 = invoke(stypy.reporting.localization.Localization(__file__, 762, 25), _lib_list_46936, *[lib_dirs_46937, libs_46938, exts_46939], **kwargs_46940)
        
        # Assigning a type to the variable 'found_libs' (line 762)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 762, 12), 'found_libs', _lib_list_call_result_46941)
        
        # Assigning a List to a Name (line 763):
        
        # Assigning a List to a Name (line 763):
        
        # Obtaining an instance of the builtin type 'list' (line 763)
        list_46942 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 763, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 763)
        # Adding element type (line 763)
        # Getting the type of 'lib_dirs' (line 763)
        lib_dirs_46943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 26), 'lib_dirs')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 763, 25), list_46942, lib_dirs_46943)
        
        # Assigning a type to the variable 'found_dirs' (line 763)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 763, 12), 'found_dirs', list_46942)
        # SSA join for if statement (line 747)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        
        # Call to len(...): (line 764)
        # Processing the call arguments (line 764)
        # Getting the type of 'found_libs' (line 764)
        found_libs_46945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 15), 'found_libs', False)
        # Processing the call keyword arguments (line 764)
        kwargs_46946 = {}
        # Getting the type of 'len' (line 764)
        len_46944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 11), 'len', False)
        # Calling len(args, kwargs) (line 764)
        len_call_result_46947 = invoke(stypy.reporting.localization.Localization(__file__, 764, 11), len_46944, *[found_libs_46945], **kwargs_46946)
        
        int_46948 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 764, 29), 'int')
        # Applying the binary operator '>' (line 764)
        result_gt_46949 = python_operator(stypy.reporting.localization.Localization(__file__, 764, 11), '>', len_call_result_46947, int_46948)
        
        
        
        # Call to len(...): (line 764)
        # Processing the call arguments (line 764)
        # Getting the type of 'found_libs' (line 764)
        found_libs_46951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 39), 'found_libs', False)
        # Processing the call keyword arguments (line 764)
        kwargs_46952 = {}
        # Getting the type of 'len' (line 764)
        len_46950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 35), 'len', False)
        # Calling len(args, kwargs) (line 764)
        len_call_result_46953 = invoke(stypy.reporting.localization.Localization(__file__, 764, 35), len_46950, *[found_libs_46951], **kwargs_46952)
        
        
        # Call to len(...): (line 764)
        # Processing the call arguments (line 764)
        # Getting the type of 'libs' (line 764)
        libs_46955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 58), 'libs', False)
        # Processing the call keyword arguments (line 764)
        kwargs_46956 = {}
        # Getting the type of 'len' (line 764)
        len_46954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 764, 54), 'len', False)
        # Calling len(args, kwargs) (line 764)
        len_call_result_46957 = invoke(stypy.reporting.localization.Localization(__file__, 764, 54), len_46954, *[libs_46955], **kwargs_46956)
        
        # Applying the binary operator '==' (line 764)
        result_eq_46958 = python_operator(stypy.reporting.localization.Localization(__file__, 764, 35), '==', len_call_result_46953, len_call_result_46957)
        
        # Applying the binary operator 'and' (line 764)
        result_and_keyword_46959 = python_operator(stypy.reporting.localization.Localization(__file__, 764, 11), 'and', result_gt_46949, result_eq_46958)
        
        # Testing the type of an if condition (line 764)
        if_condition_46960 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 764, 8), result_and_keyword_46959)
        # Assigning a type to the variable 'if_condition_46960' (line 764)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 764, 8), 'if_condition_46960', if_condition_46960)
        # SSA begins for if statement (line 764)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Dict to a Name (line 765):
        
        # Assigning a Dict to a Name (line 765):
        
        # Obtaining an instance of the builtin type 'dict' (line 765)
        dict_46961 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 765, 19), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 765)
        # Adding element type (key, value) (line 765)
        str_46962 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 765, 20), 'str', 'libraries')
        # Getting the type of 'found_libs' (line 765)
        found_libs_46963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 33), 'found_libs')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 765, 19), dict_46961, (str_46962, found_libs_46963))
        # Adding element type (key, value) (line 765)
        str_46964 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 765, 45), 'str', 'library_dirs')
        # Getting the type of 'found_dirs' (line 765)
        found_dirs_46965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 61), 'found_dirs')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 765, 19), dict_46961, (str_46964, found_dirs_46965))
        
        # Assigning a type to the variable 'info' (line 765)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 765, 12), 'info', dict_46961)
        
        
        # Call to is_sequence(...): (line 767)
        # Processing the call arguments (line 767)
        # Getting the type of 'lib_dirs' (line 767)
        lib_dirs_46967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 27), 'lib_dirs', False)
        # Processing the call keyword arguments (line 767)
        kwargs_46968 = {}
        # Getting the type of 'is_sequence' (line 767)
        is_sequence_46966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 15), 'is_sequence', False)
        # Calling is_sequence(args, kwargs) (line 767)
        is_sequence_call_result_46969 = invoke(stypy.reporting.localization.Localization(__file__, 767, 15), is_sequence_46966, *[lib_dirs_46967], **kwargs_46968)
        
        # Testing the type of an if condition (line 767)
        if_condition_46970 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 767, 12), is_sequence_call_result_46969)
        # Assigning a type to the variable 'if_condition_46970' (line 767)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 767, 12), 'if_condition_46970', if_condition_46970)
        # SSA begins for if statement (line 767)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'lib_dirs' (line 768)
        lib_dirs_46971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 28), 'lib_dirs')
        # Testing the type of a for loop iterable (line 768)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 768, 16), lib_dirs_46971)
        # Getting the type of the for loop variable (line 768)
        for_loop_var_46972 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 768, 16), lib_dirs_46971)
        # Assigning a type to the variable 'dir_' (line 768)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 768, 16), 'dir_', for_loop_var_46972)
        # SSA begins for a for statement (line 768)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 769):
        
        # Assigning a Call to a Name (line 769):
        
        # Call to _lib_list(...): (line 769)
        # Processing the call arguments (line 769)
        # Getting the type of 'dir_' (line 769)
        dir__46975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 52), 'dir_', False)
        # Getting the type of 'opt_libs' (line 769)
        opt_libs_46976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 58), 'opt_libs', False)
        # Getting the type of 'exts' (line 769)
        exts_46977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 68), 'exts', False)
        # Processing the call keyword arguments (line 769)
        kwargs_46978 = {}
        # Getting the type of 'self' (line 769)
        self_46973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 37), 'self', False)
        # Obtaining the member '_lib_list' of a type (line 769)
        _lib_list_46974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 769, 37), self_46973, '_lib_list')
        # Calling _lib_list(args, kwargs) (line 769)
        _lib_list_call_result_46979 = invoke(stypy.reporting.localization.Localization(__file__, 769, 37), _lib_list_46974, *[dir__46975, opt_libs_46976, exts_46977], **kwargs_46978)
        
        # Assigning a type to the variable 'opt_found_libs' (line 769)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 769, 20), 'opt_found_libs', _lib_list_call_result_46979)
        
        # Getting the type of 'opt_found_libs' (line 770)
        opt_found_libs_46980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 23), 'opt_found_libs')
        # Testing the type of an if condition (line 770)
        if_condition_46981 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 770, 20), opt_found_libs_46980)
        # Assigning a type to the variable 'if_condition_46981' (line 770)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 770, 20), 'if_condition_46981', if_condition_46981)
        # SSA begins for if statement (line 770)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'dir_' (line 771)
        dir__46982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 27), 'dir_')
        # Getting the type of 'found_dirs' (line 771)
        found_dirs_46983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 39), 'found_dirs')
        # Applying the binary operator 'notin' (line 771)
        result_contains_46984 = python_operator(stypy.reporting.localization.Localization(__file__, 771, 27), 'notin', dir__46982, found_dirs_46983)
        
        # Testing the type of an if condition (line 771)
        if_condition_46985 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 771, 24), result_contains_46984)
        # Assigning a type to the variable 'if_condition_46985' (line 771)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 771, 24), 'if_condition_46985', if_condition_46985)
        # SSA begins for if statement (line 771)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to extend(...): (line 772)
        # Processing the call arguments (line 772)
        # Getting the type of 'dir_' (line 772)
        dir__46988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 772, 46), 'dir_', False)
        # Processing the call keyword arguments (line 772)
        kwargs_46989 = {}
        # Getting the type of 'found_dirs' (line 772)
        found_dirs_46986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 772, 28), 'found_dirs', False)
        # Obtaining the member 'extend' of a type (line 772)
        extend_46987 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 772, 28), found_dirs_46986, 'extend')
        # Calling extend(args, kwargs) (line 772)
        extend_call_result_46990 = invoke(stypy.reporting.localization.Localization(__file__, 772, 28), extend_46987, *[dir__46988], **kwargs_46989)
        
        # SSA join for if statement (line 771)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to extend(...): (line 773)
        # Processing the call arguments (line 773)
        # Getting the type of 'opt_found_libs' (line 773)
        opt_found_libs_46993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 42), 'opt_found_libs', False)
        # Processing the call keyword arguments (line 773)
        kwargs_46994 = {}
        # Getting the type of 'found_libs' (line 773)
        found_libs_46991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 24), 'found_libs', False)
        # Obtaining the member 'extend' of a type (line 773)
        extend_46992 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 773, 24), found_libs_46991, 'extend')
        # Calling extend(args, kwargs) (line 773)
        extend_call_result_46995 = invoke(stypy.reporting.localization.Localization(__file__, 773, 24), extend_46992, *[opt_found_libs_46993], **kwargs_46994)
        
        # SSA join for if statement (line 770)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 767)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 775):
        
        # Assigning a Call to a Name (line 775):
        
        # Call to _lib_list(...): (line 775)
        # Processing the call arguments (line 775)
        # Getting the type of 'lib_dirs' (line 775)
        lib_dirs_46998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 48), 'lib_dirs', False)
        # Getting the type of 'opt_libs' (line 775)
        opt_libs_46999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 58), 'opt_libs', False)
        # Getting the type of 'exts' (line 775)
        exts_47000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 68), 'exts', False)
        # Processing the call keyword arguments (line 775)
        kwargs_47001 = {}
        # Getting the type of 'self' (line 775)
        self_46996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 33), 'self', False)
        # Obtaining the member '_lib_list' of a type (line 775)
        _lib_list_46997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 775, 33), self_46996, '_lib_list')
        # Calling _lib_list(args, kwargs) (line 775)
        _lib_list_call_result_47002 = invoke(stypy.reporting.localization.Localization(__file__, 775, 33), _lib_list_46997, *[lib_dirs_46998, opt_libs_46999, exts_47000], **kwargs_47001)
        
        # Assigning a type to the variable 'opt_found_libs' (line 775)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 775, 16), 'opt_found_libs', _lib_list_call_result_47002)
        
        # Getting the type of 'opt_found_libs' (line 776)
        opt_found_libs_47003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 19), 'opt_found_libs')
        # Testing the type of an if condition (line 776)
        if_condition_47004 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 776, 16), opt_found_libs_47003)
        # Assigning a type to the variable 'if_condition_47004' (line 776)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 776, 16), 'if_condition_47004', if_condition_47004)
        # SSA begins for if statement (line 776)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to extend(...): (line 777)
        # Processing the call arguments (line 777)
        # Getting the type of 'opt_found_libs' (line 777)
        opt_found_libs_47007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 38), 'opt_found_libs', False)
        # Processing the call keyword arguments (line 777)
        kwargs_47008 = {}
        # Getting the type of 'found_libs' (line 777)
        found_libs_47005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 20), 'found_libs', False)
        # Obtaining the member 'extend' of a type (line 777)
        extend_47006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 777, 20), found_libs_47005, 'extend')
        # Calling extend(args, kwargs) (line 777)
        extend_call_result_47009 = invoke(stypy.reporting.localization.Localization(__file__, 777, 20), extend_47006, *[opt_found_libs_47007], **kwargs_47008)
        
        # SSA join for if statement (line 776)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 767)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'info' (line 778)
        info_47010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 19), 'info')
        # Assigning a type to the variable 'stypy_return_type' (line 778)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 778, 12), 'stypy_return_type', info_47010)
        # SSA branch for the else part of an if statement (line 764)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'None' (line 780)
        None_47011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 780, 19), 'None')
        # Assigning a type to the variable 'stypy_return_type' (line 780)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 780, 12), 'stypy_return_type', None_47011)
        # SSA join for if statement (line 764)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_check_libs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_check_libs' in the type store
        # Getting the type of 'stypy_return_type' (line 741)
        stypy_return_type_47012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_47012)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_check_libs'
        return stypy_return_type_47012


    @norecursion
    def combine_paths(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'combine_paths'
        module_type_store = module_type_store.open_function_context('combine_paths', 782, 4, False)
        # Assigning a type to the variable 'self' (line 783)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 783, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        system_info.combine_paths.__dict__.__setitem__('stypy_localization', localization)
        system_info.combine_paths.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        system_info.combine_paths.__dict__.__setitem__('stypy_type_store', module_type_store)
        system_info.combine_paths.__dict__.__setitem__('stypy_function_name', 'system_info.combine_paths')
        system_info.combine_paths.__dict__.__setitem__('stypy_param_names_list', [])
        system_info.combine_paths.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        system_info.combine_paths.__dict__.__setitem__('stypy_kwargs_param_name', None)
        system_info.combine_paths.__dict__.__setitem__('stypy_call_defaults', defaults)
        system_info.combine_paths.__dict__.__setitem__('stypy_call_varargs', varargs)
        system_info.combine_paths.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        system_info.combine_paths.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'system_info.combine_paths', [], 'args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'combine_paths', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'combine_paths(...)' code ##################

        str_47013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 785, (-1)), 'str', 'Return a list of existing paths composed by all combinations\n        of items from the arguments.\n        ')
        
        # Call to combine_paths(...): (line 786)
        # Getting the type of 'args' (line 786)
        args_47015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 30), 'args', False)
        # Processing the call keyword arguments (line 786)
        
        # Obtaining an instance of the builtin type 'dict' (line 786)
        dict_47016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 786, 38), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 786)
        # Adding element type (key, value) (line 786)
        str_47017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 786, 39), 'str', 'verbosity')
        # Getting the type of 'self' (line 786)
        self_47018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 52), 'self', False)
        # Obtaining the member 'verbosity' of a type (line 786)
        verbosity_47019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 786, 52), self_47018, 'verbosity')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 786, 38), dict_47016, (str_47017, verbosity_47019))
        
        kwargs_47020 = {'dict_47016': dict_47016}
        # Getting the type of 'combine_paths' (line 786)
        combine_paths_47014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 15), 'combine_paths', False)
        # Calling combine_paths(args, kwargs) (line 786)
        combine_paths_call_result_47021 = invoke(stypy.reporting.localization.Localization(__file__, 786, 15), combine_paths_47014, *[args_47015], **kwargs_47020)
        
        # Assigning a type to the variable 'stypy_return_type' (line 786)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 786, 8), 'stypy_return_type', combine_paths_call_result_47021)
        
        # ################# End of 'combine_paths(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'combine_paths' in the type store
        # Getting the type of 'stypy_return_type' (line 782)
        stypy_return_type_47022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_47022)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'combine_paths'
        return stypy_return_type_47022


# Assigning a type to the variable 'system_info' (line 453)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 453, 0), 'system_info', system_info)

# Assigning a Str to a Name (line 457):
str_47023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 457, 14), 'str', 'ALL')
# Getting the type of 'system_info'
system_info_47024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'system_info')
# Setting the type of the member 'section' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), system_info_47024, 'section', str_47023)

# Assigning a Name to a Name (line 458):
# Getting the type of 'None' (line 458)
None_47025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 458, 18), 'None')
# Getting the type of 'system_info'
system_info_47026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'system_info')
# Setting the type of the member 'dir_env_var' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), system_info_47026, 'dir_env_var', None_47025)

# Assigning a Num to a Name (line 459):
int_47027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 459, 26), 'int')
# Getting the type of 'system_info'
system_info_47028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'system_info')
# Setting the type of the member 'search_static_first' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), system_info_47028, 'search_static_first', int_47027)

# Assigning a Num to a Name (line 461):
int_47029 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 461, 16), 'int')
# Getting the type of 'system_info'
system_info_47030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'system_info')
# Setting the type of the member 'verbosity' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), system_info_47030, 'verbosity', int_47029)

# Assigning a Dict to a Name (line 462):

# Obtaining an instance of the builtin type 'dict' (line 462)
dict_47031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 462, 20), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 462)

# Getting the type of 'system_info'
system_info_47032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'system_info')
# Setting the type of the member 'saved_results' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), system_info_47032, 'saved_results', dict_47031)

# Assigning a Name to a Name (line 464):
# Getting the type of 'NotFoundError' (line 464)
NotFoundError_47033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 20), 'NotFoundError')
# Getting the type of 'system_info'
system_info_47034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'system_info')
# Setting the type of the member 'notfounderror' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), system_info_47034, 'notfounderror', NotFoundError_47033)
# Declaration of the 'fft_opt_info' class
# Getting the type of 'system_info' (line 789)
system_info_47035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 19), 'system_info')

class fft_opt_info(system_info_47035, ):

    @norecursion
    def calc_info(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'calc_info'
        module_type_store = module_type_store.open_function_context('calc_info', 791, 4, False)
        # Assigning a type to the variable 'self' (line 792)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 792, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        fft_opt_info.calc_info.__dict__.__setitem__('stypy_localization', localization)
        fft_opt_info.calc_info.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        fft_opt_info.calc_info.__dict__.__setitem__('stypy_type_store', module_type_store)
        fft_opt_info.calc_info.__dict__.__setitem__('stypy_function_name', 'fft_opt_info.calc_info')
        fft_opt_info.calc_info.__dict__.__setitem__('stypy_param_names_list', [])
        fft_opt_info.calc_info.__dict__.__setitem__('stypy_varargs_param_name', None)
        fft_opt_info.calc_info.__dict__.__setitem__('stypy_kwargs_param_name', None)
        fft_opt_info.calc_info.__dict__.__setitem__('stypy_call_defaults', defaults)
        fft_opt_info.calc_info.__dict__.__setitem__('stypy_call_varargs', varargs)
        fft_opt_info.calc_info.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        fft_opt_info.calc_info.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'fft_opt_info.calc_info', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'calc_info', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'calc_info(...)' code ##################

        
        # Assigning a Dict to a Name (line 792):
        
        # Assigning a Dict to a Name (line 792):
        
        # Obtaining an instance of the builtin type 'dict' (line 792)
        dict_47036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 792, 15), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 792)
        
        # Assigning a type to the variable 'info' (line 792)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 792, 8), 'info', dict_47036)
        
        # Assigning a BoolOp to a Name (line 793):
        
        # Assigning a BoolOp to a Name (line 793):
        
        # Evaluating a boolean operation
        
        # Call to get_info(...): (line 793)
        # Processing the call arguments (line 793)
        str_47038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 793, 29), 'str', 'fftw3')
        # Processing the call keyword arguments (line 793)
        kwargs_47039 = {}
        # Getting the type of 'get_info' (line 793)
        get_info_47037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 20), 'get_info', False)
        # Calling get_info(args, kwargs) (line 793)
        get_info_call_result_47040 = invoke(stypy.reporting.localization.Localization(__file__, 793, 20), get_info_47037, *[str_47038], **kwargs_47039)
        
        
        # Call to get_info(...): (line 793)
        # Processing the call arguments (line 793)
        str_47042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 793, 50), 'str', 'fftw2')
        # Processing the call keyword arguments (line 793)
        kwargs_47043 = {}
        # Getting the type of 'get_info' (line 793)
        get_info_47041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 41), 'get_info', False)
        # Calling get_info(args, kwargs) (line 793)
        get_info_call_result_47044 = invoke(stypy.reporting.localization.Localization(__file__, 793, 41), get_info_47041, *[str_47042], **kwargs_47043)
        
        # Applying the binary operator 'or' (line 793)
        result_or_keyword_47045 = python_operator(stypy.reporting.localization.Localization(__file__, 793, 20), 'or', get_info_call_result_47040, get_info_call_result_47044)
        
        # Call to get_info(...): (line 793)
        # Processing the call arguments (line 793)
        str_47047 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 793, 71), 'str', 'dfftw')
        # Processing the call keyword arguments (line 793)
        kwargs_47048 = {}
        # Getting the type of 'get_info' (line 793)
        get_info_47046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 62), 'get_info', False)
        # Calling get_info(args, kwargs) (line 793)
        get_info_call_result_47049 = invoke(stypy.reporting.localization.Localization(__file__, 793, 62), get_info_47046, *[str_47047], **kwargs_47048)
        
        # Applying the binary operator 'or' (line 793)
        result_or_keyword_47050 = python_operator(stypy.reporting.localization.Localization(__file__, 793, 20), 'or', result_or_keyword_47045, get_info_call_result_47049)
        
        # Assigning a type to the variable 'fftw_info' (line 793)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 793, 8), 'fftw_info', result_or_keyword_47050)
        
        # Assigning a Call to a Name (line 794):
        
        # Assigning a Call to a Name (line 794):
        
        # Call to get_info(...): (line 794)
        # Processing the call arguments (line 794)
        str_47052 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 794, 31), 'str', 'djbfft')
        # Processing the call keyword arguments (line 794)
        kwargs_47053 = {}
        # Getting the type of 'get_info' (line 794)
        get_info_47051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 22), 'get_info', False)
        # Calling get_info(args, kwargs) (line 794)
        get_info_call_result_47054 = invoke(stypy.reporting.localization.Localization(__file__, 794, 22), get_info_47051, *[str_47052], **kwargs_47053)
        
        # Assigning a type to the variable 'djbfft_info' (line 794)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 794, 8), 'djbfft_info', get_info_call_result_47054)
        
        # Getting the type of 'fftw_info' (line 795)
        fftw_info_47055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 795, 11), 'fftw_info')
        # Testing the type of an if condition (line 795)
        if_condition_47056 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 795, 8), fftw_info_47055)
        # Assigning a type to the variable 'if_condition_47056' (line 795)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 795, 8), 'if_condition_47056', if_condition_47056)
        # SSA begins for if statement (line 795)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to dict_append(...): (line 796)
        # Processing the call arguments (line 796)
        # Getting the type of 'info' (line 796)
        info_47058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 24), 'info', False)
        # Processing the call keyword arguments (line 796)
        # Getting the type of 'fftw_info' (line 796)
        fftw_info_47059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 32), 'fftw_info', False)
        kwargs_47060 = {'fftw_info_47059': fftw_info_47059}
        # Getting the type of 'dict_append' (line 796)
        dict_append_47057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 12), 'dict_append', False)
        # Calling dict_append(args, kwargs) (line 796)
        dict_append_call_result_47061 = invoke(stypy.reporting.localization.Localization(__file__, 796, 12), dict_append_47057, *[info_47058], **kwargs_47060)
        
        
        # Getting the type of 'djbfft_info' (line 797)
        djbfft_info_47062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 15), 'djbfft_info')
        # Testing the type of an if condition (line 797)
        if_condition_47063 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 797, 12), djbfft_info_47062)
        # Assigning a type to the variable 'if_condition_47063' (line 797)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 797, 12), 'if_condition_47063', if_condition_47063)
        # SSA begins for if statement (line 797)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to dict_append(...): (line 798)
        # Processing the call arguments (line 798)
        # Getting the type of 'info' (line 798)
        info_47065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 28), 'info', False)
        # Processing the call keyword arguments (line 798)
        # Getting the type of 'djbfft_info' (line 798)
        djbfft_info_47066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 36), 'djbfft_info', False)
        kwargs_47067 = {'djbfft_info_47066': djbfft_info_47066}
        # Getting the type of 'dict_append' (line 798)
        dict_append_47064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 16), 'dict_append', False)
        # Calling dict_append(args, kwargs) (line 798)
        dict_append_call_result_47068 = invoke(stypy.reporting.localization.Localization(__file__, 798, 16), dict_append_47064, *[info_47065], **kwargs_47067)
        
        # SSA join for if statement (line 797)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_info(...): (line 799)
        # Processing the call keyword arguments (line 799)
        # Getting the type of 'info' (line 799)
        info_47071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 28), 'info', False)
        kwargs_47072 = {'info_47071': info_47071}
        # Getting the type of 'self' (line 799)
        self_47069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 12), 'self', False)
        # Obtaining the member 'set_info' of a type (line 799)
        set_info_47070 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 799, 12), self_47069, 'set_info')
        # Calling set_info(args, kwargs) (line 799)
        set_info_call_result_47073 = invoke(stypy.reporting.localization.Localization(__file__, 799, 12), set_info_47070, *[], **kwargs_47072)
        
        # Assigning a type to the variable 'stypy_return_type' (line 800)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 800, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 795)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'calc_info(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'calc_info' in the type store
        # Getting the type of 'stypy_return_type' (line 791)
        stypy_return_type_47074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_47074)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'calc_info'
        return stypy_return_type_47074


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 789, 0, False)
        # Assigning a type to the variable 'self' (line 790)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 790, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'fft_opt_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'fft_opt_info' (line 789)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 789, 0), 'fft_opt_info', fft_opt_info)
# Declaration of the 'fftw_info' class
# Getting the type of 'system_info' (line 803)
system_info_47075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 16), 'system_info')

class fftw_info(system_info_47075, ):
    
    # Assigning a Str to a Name (line 805):
    
    # Assigning a Str to a Name (line 806):
    
    # Assigning a Name to a Name (line 807):
    
    # Assigning a List to a Name (line 808):

    @norecursion
    def calc_ver_info(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'calc_ver_info'
        module_type_store = module_type_store.open_function_context('calc_ver_info', 817, 4, False)
        # Assigning a type to the variable 'self' (line 818)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 818, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        fftw_info.calc_ver_info.__dict__.__setitem__('stypy_localization', localization)
        fftw_info.calc_ver_info.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        fftw_info.calc_ver_info.__dict__.__setitem__('stypy_type_store', module_type_store)
        fftw_info.calc_ver_info.__dict__.__setitem__('stypy_function_name', 'fftw_info.calc_ver_info')
        fftw_info.calc_ver_info.__dict__.__setitem__('stypy_param_names_list', ['ver_param'])
        fftw_info.calc_ver_info.__dict__.__setitem__('stypy_varargs_param_name', None)
        fftw_info.calc_ver_info.__dict__.__setitem__('stypy_kwargs_param_name', None)
        fftw_info.calc_ver_info.__dict__.__setitem__('stypy_call_defaults', defaults)
        fftw_info.calc_ver_info.__dict__.__setitem__('stypy_call_varargs', varargs)
        fftw_info.calc_ver_info.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        fftw_info.calc_ver_info.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'fftw_info.calc_ver_info', ['ver_param'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'calc_ver_info', localization, ['ver_param'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'calc_ver_info(...)' code ##################

        str_47076 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 818, 8), 'str', 'Returns True on successful version detection, else False')
        
        # Assigning a Call to a Name (line 819):
        
        # Assigning a Call to a Name (line 819):
        
        # Call to get_lib_dirs(...): (line 819)
        # Processing the call keyword arguments (line 819)
        kwargs_47079 = {}
        # Getting the type of 'self' (line 819)
        self_47077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 19), 'self', False)
        # Obtaining the member 'get_lib_dirs' of a type (line 819)
        get_lib_dirs_47078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 819, 19), self_47077, 'get_lib_dirs')
        # Calling get_lib_dirs(args, kwargs) (line 819)
        get_lib_dirs_call_result_47080 = invoke(stypy.reporting.localization.Localization(__file__, 819, 19), get_lib_dirs_47078, *[], **kwargs_47079)
        
        # Assigning a type to the variable 'lib_dirs' (line 819)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 819, 8), 'lib_dirs', get_lib_dirs_call_result_47080)
        
        # Assigning a Call to a Name (line 820):
        
        # Assigning a Call to a Name (line 820):
        
        # Call to get_include_dirs(...): (line 820)
        # Processing the call keyword arguments (line 820)
        kwargs_47083 = {}
        # Getting the type of 'self' (line 820)
        self_47081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 20), 'self', False)
        # Obtaining the member 'get_include_dirs' of a type (line 820)
        get_include_dirs_47082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 820, 20), self_47081, 'get_include_dirs')
        # Calling get_include_dirs(args, kwargs) (line 820)
        get_include_dirs_call_result_47084 = invoke(stypy.reporting.localization.Localization(__file__, 820, 20), get_include_dirs_47082, *[], **kwargs_47083)
        
        # Assigning a type to the variable 'incl_dirs' (line 820)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 820, 8), 'incl_dirs', get_include_dirs_call_result_47084)
        
        # Assigning a Name to a Name (line 821):
        
        # Assigning a Name to a Name (line 821):
        # Getting the type of 'None' (line 821)
        None_47085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 19), 'None')
        # Assigning a type to the variable 'incl_dir' (line 821)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 821, 8), 'incl_dir', None_47085)
        
        # Assigning a Call to a Name (line 822):
        
        # Assigning a Call to a Name (line 822):
        
        # Call to get_libs(...): (line 822)
        # Processing the call arguments (line 822)
        # Getting the type of 'self' (line 822)
        self_47088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 29), 'self', False)
        # Obtaining the member 'section' of a type (line 822)
        section_47089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 822, 29), self_47088, 'section')
        str_47090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 822, 44), 'str', '_libs')
        # Applying the binary operator '+' (line 822)
        result_add_47091 = python_operator(stypy.reporting.localization.Localization(__file__, 822, 29), '+', section_47089, str_47090)
        
        
        # Obtaining the type of the subscript
        str_47092 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 822, 63), 'str', 'libs')
        # Getting the type of 'ver_param' (line 822)
        ver_param_47093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 53), 'ver_param', False)
        # Obtaining the member '__getitem__' of a type (line 822)
        getitem___47094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 822, 53), ver_param_47093, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 822)
        subscript_call_result_47095 = invoke(stypy.reporting.localization.Localization(__file__, 822, 53), getitem___47094, str_47092)
        
        # Processing the call keyword arguments (line 822)
        kwargs_47096 = {}
        # Getting the type of 'self' (line 822)
        self_47086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 15), 'self', False)
        # Obtaining the member 'get_libs' of a type (line 822)
        get_libs_47087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 822, 15), self_47086, 'get_libs')
        # Calling get_libs(args, kwargs) (line 822)
        get_libs_call_result_47097 = invoke(stypy.reporting.localization.Localization(__file__, 822, 15), get_libs_47087, *[result_add_47091, subscript_call_result_47095], **kwargs_47096)
        
        # Assigning a type to the variable 'libs' (line 822)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 822, 8), 'libs', get_libs_call_result_47097)
        
        # Assigning a Call to a Name (line 823):
        
        # Assigning a Call to a Name (line 823):
        
        # Call to check_libs(...): (line 823)
        # Processing the call arguments (line 823)
        # Getting the type of 'lib_dirs' (line 823)
        lib_dirs_47100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 31), 'lib_dirs', False)
        # Getting the type of 'libs' (line 823)
        libs_47101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 41), 'libs', False)
        # Processing the call keyword arguments (line 823)
        kwargs_47102 = {}
        # Getting the type of 'self' (line 823)
        self_47098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 15), 'self', False)
        # Obtaining the member 'check_libs' of a type (line 823)
        check_libs_47099 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 823, 15), self_47098, 'check_libs')
        # Calling check_libs(args, kwargs) (line 823)
        check_libs_call_result_47103 = invoke(stypy.reporting.localization.Localization(__file__, 823, 15), check_libs_47099, *[lib_dirs_47100, libs_47101], **kwargs_47102)
        
        # Assigning a type to the variable 'info' (line 823)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 823, 8), 'info', check_libs_call_result_47103)
        
        # Type idiom detected: calculating its left and rigth part (line 824)
        # Getting the type of 'info' (line 824)
        info_47104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 824, 8), 'info')
        # Getting the type of 'None' (line 824)
        None_47105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 824, 23), 'None')
        
        (may_be_47106, more_types_in_union_47107) = may_not_be_none(info_47104, None_47105)

        if may_be_47106:

            if more_types_in_union_47107:
                # Runtime conditional SSA (line 824)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Num to a Name (line 825):
            
            # Assigning a Num to a Name (line 825):
            int_47108 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 825, 19), 'int')
            # Assigning a type to the variable 'flag' (line 825)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 825, 12), 'flag', int_47108)
            
            # Getting the type of 'incl_dirs' (line 826)
            incl_dirs_47109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 21), 'incl_dirs')
            # Testing the type of a for loop iterable (line 826)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 826, 12), incl_dirs_47109)
            # Getting the type of the for loop variable (line 826)
            for_loop_var_47110 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 826, 12), incl_dirs_47109)
            # Assigning a type to the variable 'd' (line 826)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 826, 12), 'd', for_loop_var_47110)
            # SSA begins for a for statement (line 826)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            
            
            # Call to len(...): (line 827)
            # Processing the call arguments (line 827)
            
            # Call to combine_paths(...): (line 827)
            # Processing the call arguments (line 827)
            # Getting the type of 'd' (line 827)
            d_47114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 827, 42), 'd', False)
            
            # Obtaining the type of the subscript
            str_47115 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 827, 55), 'str', 'includes')
            # Getting the type of 'ver_param' (line 827)
            ver_param_47116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 827, 45), 'ver_param', False)
            # Obtaining the member '__getitem__' of a type (line 827)
            getitem___47117 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 827, 45), ver_param_47116, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 827)
            subscript_call_result_47118 = invoke(stypy.reporting.localization.Localization(__file__, 827, 45), getitem___47117, str_47115)
            
            # Processing the call keyword arguments (line 827)
            kwargs_47119 = {}
            # Getting the type of 'self' (line 827)
            self_47112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 827, 23), 'self', False)
            # Obtaining the member 'combine_paths' of a type (line 827)
            combine_paths_47113 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 827, 23), self_47112, 'combine_paths')
            # Calling combine_paths(args, kwargs) (line 827)
            combine_paths_call_result_47120 = invoke(stypy.reporting.localization.Localization(__file__, 827, 23), combine_paths_47113, *[d_47114, subscript_call_result_47118], **kwargs_47119)
            
            # Processing the call keyword arguments (line 827)
            kwargs_47121 = {}
            # Getting the type of 'len' (line 827)
            len_47111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 827, 19), 'len', False)
            # Calling len(args, kwargs) (line 827)
            len_call_result_47122 = invoke(stypy.reporting.localization.Localization(__file__, 827, 19), len_47111, *[combine_paths_call_result_47120], **kwargs_47121)
            
            
            # Call to len(...): (line 828)
            # Processing the call arguments (line 828)
            
            # Obtaining the type of the subscript
            str_47124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 828, 36), 'str', 'includes')
            # Getting the type of 'ver_param' (line 828)
            ver_param_47125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 26), 'ver_param', False)
            # Obtaining the member '__getitem__' of a type (line 828)
            getitem___47126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 828, 26), ver_param_47125, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 828)
            subscript_call_result_47127 = invoke(stypy.reporting.localization.Localization(__file__, 828, 26), getitem___47126, str_47124)
            
            # Processing the call keyword arguments (line 828)
            kwargs_47128 = {}
            # Getting the type of 'len' (line 828)
            len_47123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 22), 'len', False)
            # Calling len(args, kwargs) (line 828)
            len_call_result_47129 = invoke(stypy.reporting.localization.Localization(__file__, 828, 22), len_47123, *[subscript_call_result_47127], **kwargs_47128)
            
            # Applying the binary operator '==' (line 827)
            result_eq_47130 = python_operator(stypy.reporting.localization.Localization(__file__, 827, 19), '==', len_call_result_47122, len_call_result_47129)
            
            # Testing the type of an if condition (line 827)
            if_condition_47131 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 827, 16), result_eq_47130)
            # Assigning a type to the variable 'if_condition_47131' (line 827)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 827, 16), 'if_condition_47131', if_condition_47131)
            # SSA begins for if statement (line 827)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to dict_append(...): (line 829)
            # Processing the call arguments (line 829)
            # Getting the type of 'info' (line 829)
            info_47133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 32), 'info', False)
            # Processing the call keyword arguments (line 829)
            
            # Obtaining an instance of the builtin type 'list' (line 829)
            list_47134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 829, 51), 'list')
            # Adding type elements to the builtin type 'list' instance (line 829)
            # Adding element type (line 829)
            # Getting the type of 'd' (line 829)
            d_47135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 52), 'd', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 829, 51), list_47134, d_47135)
            
            keyword_47136 = list_47134
            kwargs_47137 = {'include_dirs': keyword_47136}
            # Getting the type of 'dict_append' (line 829)
            dict_append_47132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 20), 'dict_append', False)
            # Calling dict_append(args, kwargs) (line 829)
            dict_append_call_result_47138 = invoke(stypy.reporting.localization.Localization(__file__, 829, 20), dict_append_47132, *[info_47133], **kwargs_47137)
            
            
            # Assigning a Num to a Name (line 830):
            
            # Assigning a Num to a Name (line 830):
            int_47139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 830, 27), 'int')
            # Assigning a type to the variable 'flag' (line 830)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 830, 20), 'flag', int_47139)
            
            # Assigning a List to a Name (line 831):
            
            # Assigning a List to a Name (line 831):
            
            # Obtaining an instance of the builtin type 'list' (line 831)
            list_47140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 831, 32), 'list')
            # Adding type elements to the builtin type 'list' instance (line 831)
            # Adding element type (line 831)
            # Getting the type of 'd' (line 831)
            d_47141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 831, 33), 'd')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 831, 32), list_47140, d_47141)
            
            # Assigning a type to the variable 'incl_dirs' (line 831)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 831, 20), 'incl_dirs', list_47140)
            # SSA join for if statement (line 827)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Getting the type of 'flag' (line 833)
            flag_47142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 15), 'flag')
            # Testing the type of an if condition (line 833)
            if_condition_47143 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 833, 12), flag_47142)
            # Assigning a type to the variable 'if_condition_47143' (line 833)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 833, 12), 'if_condition_47143', if_condition_47143)
            # SSA begins for if statement (line 833)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to dict_append(...): (line 834)
            # Processing the call arguments (line 834)
            # Getting the type of 'info' (line 834)
            info_47145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 28), 'info', False)
            # Processing the call keyword arguments (line 834)
            
            # Obtaining the type of the subscript
            str_47146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 834, 58), 'str', 'macros')
            # Getting the type of 'ver_param' (line 834)
            ver_param_47147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 48), 'ver_param', False)
            # Obtaining the member '__getitem__' of a type (line 834)
            getitem___47148 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 834, 48), ver_param_47147, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 834)
            subscript_call_result_47149 = invoke(stypy.reporting.localization.Localization(__file__, 834, 48), getitem___47148, str_47146)
            
            keyword_47150 = subscript_call_result_47149
            kwargs_47151 = {'define_macros': keyword_47150}
            # Getting the type of 'dict_append' (line 834)
            dict_append_47144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 16), 'dict_append', False)
            # Calling dict_append(args, kwargs) (line 834)
            dict_append_call_result_47152 = invoke(stypy.reporting.localization.Localization(__file__, 834, 16), dict_append_47144, *[info_47145], **kwargs_47151)
            
            # SSA branch for the else part of an if statement (line 833)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Name to a Name (line 836):
            
            # Assigning a Name to a Name (line 836):
            # Getting the type of 'None' (line 836)
            None_47153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 23), 'None')
            # Assigning a type to the variable 'info' (line 836)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 836, 16), 'info', None_47153)
            # SSA join for if statement (line 833)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_47107:
                # SSA join for if statement (line 824)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 837)
        # Getting the type of 'info' (line 837)
        info_47154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 8), 'info')
        # Getting the type of 'None' (line 837)
        None_47155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 23), 'None')
        
        (may_be_47156, more_types_in_union_47157) = may_not_be_none(info_47154, None_47155)

        if may_be_47156:

            if more_types_in_union_47157:
                # Runtime conditional SSA (line 837)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to set_info(...): (line 838)
            # Processing the call keyword arguments (line 838)
            # Getting the type of 'info' (line 838)
            info_47160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 28), 'info', False)
            kwargs_47161 = {'info_47160': info_47160}
            # Getting the type of 'self' (line 838)
            self_47158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 12), 'self', False)
            # Obtaining the member 'set_info' of a type (line 838)
            set_info_47159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 838, 12), self_47158, 'set_info')
            # Calling set_info(args, kwargs) (line 838)
            set_info_call_result_47162 = invoke(stypy.reporting.localization.Localization(__file__, 838, 12), set_info_47159, *[], **kwargs_47161)
            
            # Getting the type of 'True' (line 839)
            True_47163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 19), 'True')
            # Assigning a type to the variable 'stypy_return_type' (line 839)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 839, 12), 'stypy_return_type', True_47163)

            if more_types_in_union_47157:
                # Runtime conditional SSA for else branch (line 837)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_47156) or more_types_in_union_47157):
            
            # Call to info(...): (line 841)
            # Processing the call arguments (line 841)
            str_47166 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 841, 21), 'str', '  %s not found')
            
            # Obtaining the type of the subscript
            str_47167 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 841, 51), 'str', 'name')
            # Getting the type of 'ver_param' (line 841)
            ver_param_47168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 41), 'ver_param', False)
            # Obtaining the member '__getitem__' of a type (line 841)
            getitem___47169 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 841, 41), ver_param_47168, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 841)
            subscript_call_result_47170 = invoke(stypy.reporting.localization.Localization(__file__, 841, 41), getitem___47169, str_47167)
            
            # Applying the binary operator '%' (line 841)
            result_mod_47171 = python_operator(stypy.reporting.localization.Localization(__file__, 841, 21), '%', str_47166, subscript_call_result_47170)
            
            # Processing the call keyword arguments (line 841)
            kwargs_47172 = {}
            # Getting the type of 'log' (line 841)
            log_47164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 12), 'log', False)
            # Obtaining the member 'info' of a type (line 841)
            info_47165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 841, 12), log_47164, 'info')
            # Calling info(args, kwargs) (line 841)
            info_call_result_47173 = invoke(stypy.reporting.localization.Localization(__file__, 841, 12), info_47165, *[result_mod_47171], **kwargs_47172)
            
            # Getting the type of 'False' (line 842)
            False_47174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 19), 'False')
            # Assigning a type to the variable 'stypy_return_type' (line 842)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 842, 12), 'stypy_return_type', False_47174)

            if (may_be_47156 and more_types_in_union_47157):
                # SSA join for if statement (line 837)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'calc_ver_info(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'calc_ver_info' in the type store
        # Getting the type of 'stypy_return_type' (line 817)
        stypy_return_type_47175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_47175)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'calc_ver_info'
        return stypy_return_type_47175


    @norecursion
    def calc_info(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'calc_info'
        module_type_store = module_type_store.open_function_context('calc_info', 844, 4, False)
        # Assigning a type to the variable 'self' (line 845)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 845, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        fftw_info.calc_info.__dict__.__setitem__('stypy_localization', localization)
        fftw_info.calc_info.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        fftw_info.calc_info.__dict__.__setitem__('stypy_type_store', module_type_store)
        fftw_info.calc_info.__dict__.__setitem__('stypy_function_name', 'fftw_info.calc_info')
        fftw_info.calc_info.__dict__.__setitem__('stypy_param_names_list', [])
        fftw_info.calc_info.__dict__.__setitem__('stypy_varargs_param_name', None)
        fftw_info.calc_info.__dict__.__setitem__('stypy_kwargs_param_name', None)
        fftw_info.calc_info.__dict__.__setitem__('stypy_call_defaults', defaults)
        fftw_info.calc_info.__dict__.__setitem__('stypy_call_varargs', varargs)
        fftw_info.calc_info.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        fftw_info.calc_info.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'fftw_info.calc_info', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'calc_info', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'calc_info(...)' code ##################

        
        # Getting the type of 'self' (line 845)
        self_47176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 845, 17), 'self')
        # Obtaining the member 'ver_info' of a type (line 845)
        ver_info_47177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 845, 17), self_47176, 'ver_info')
        # Testing the type of a for loop iterable (line 845)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 845, 8), ver_info_47177)
        # Getting the type of the for loop variable (line 845)
        for_loop_var_47178 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 845, 8), ver_info_47177)
        # Assigning a type to the variable 'i' (line 845)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 845, 8), 'i', for_loop_var_47178)
        # SSA begins for a for statement (line 845)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to calc_ver_info(...): (line 846)
        # Processing the call arguments (line 846)
        # Getting the type of 'i' (line 846)
        i_47181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 34), 'i', False)
        # Processing the call keyword arguments (line 846)
        kwargs_47182 = {}
        # Getting the type of 'self' (line 846)
        self_47179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 15), 'self', False)
        # Obtaining the member 'calc_ver_info' of a type (line 846)
        calc_ver_info_47180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 846, 15), self_47179, 'calc_ver_info')
        # Calling calc_ver_info(args, kwargs) (line 846)
        calc_ver_info_call_result_47183 = invoke(stypy.reporting.localization.Localization(__file__, 846, 15), calc_ver_info_47180, *[i_47181], **kwargs_47182)
        
        # Testing the type of an if condition (line 846)
        if_condition_47184 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 846, 12), calc_ver_info_call_result_47183)
        # Assigning a type to the variable 'if_condition_47184' (line 846)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 846, 12), 'if_condition_47184', if_condition_47184)
        # SSA begins for if statement (line 846)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA join for if statement (line 846)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'calc_info(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'calc_info' in the type store
        # Getting the type of 'stypy_return_type' (line 844)
        stypy_return_type_47185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 844, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_47185)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'calc_info'
        return stypy_return_type_47185


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 803, 0, False)
        # Assigning a type to the variable 'self' (line 804)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 804, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'fftw_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'fftw_info' (line 803)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 803, 0), 'fftw_info', fftw_info)

# Assigning a Str to a Name (line 805):
str_47186 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 805, 14), 'str', 'fftw')
# Getting the type of 'fftw_info'
fftw_info_47187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'fftw_info')
# Setting the type of the member 'section' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), fftw_info_47187, 'section', str_47186)

# Assigning a Str to a Name (line 806):
str_47188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 806, 18), 'str', 'FFTW')
# Getting the type of 'fftw_info'
fftw_info_47189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'fftw_info')
# Setting the type of the member 'dir_env_var' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), fftw_info_47189, 'dir_env_var', str_47188)

# Assigning a Name to a Name (line 807):
# Getting the type of 'FFTWNotFoundError' (line 807)
FFTWNotFoundError_47190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 20), 'FFTWNotFoundError')
# Getting the type of 'fftw_info'
fftw_info_47191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'fftw_info')
# Setting the type of the member 'notfounderror' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), fftw_info_47191, 'notfounderror', FFTWNotFoundError_47190)

# Assigning a List to a Name (line 808):

# Obtaining an instance of the builtin type 'list' (line 808)
list_47192 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 808, 15), 'list')
# Adding type elements to the builtin type 'list' instance (line 808)
# Adding element type (line 808)

# Obtaining an instance of the builtin type 'dict' (line 808)
dict_47193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 808, 16), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 808)
# Adding element type (key, value) (line 808)
str_47194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 808, 17), 'str', 'name')
str_47195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 808, 24), 'str', 'fftw3')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 808, 16), dict_47193, (str_47194, str_47195))
# Adding element type (key, value) (line 808)
str_47196 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 809, 20), 'str', 'libs')

# Obtaining an instance of the builtin type 'list' (line 809)
list_47197 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 809, 27), 'list')
# Adding type elements to the builtin type 'list' instance (line 809)
# Adding element type (line 809)
str_47198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 809, 28), 'str', 'fftw3')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 809, 27), list_47197, str_47198)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 808, 16), dict_47193, (str_47196, list_47197))
# Adding element type (key, value) (line 808)
str_47199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 810, 20), 'str', 'includes')

# Obtaining an instance of the builtin type 'list' (line 810)
list_47200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 810, 31), 'list')
# Adding type elements to the builtin type 'list' instance (line 810)
# Adding element type (line 810)
str_47201 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 810, 32), 'str', 'fftw3.h')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 810, 31), list_47200, str_47201)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 808, 16), dict_47193, (str_47199, list_47200))
# Adding element type (key, value) (line 808)
str_47202 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 811, 20), 'str', 'macros')

# Obtaining an instance of the builtin type 'list' (line 811)
list_47203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 811, 29), 'list')
# Adding type elements to the builtin type 'list' instance (line 811)
# Adding element type (line 811)

# Obtaining an instance of the builtin type 'tuple' (line 811)
tuple_47204 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 811, 31), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 811)
# Adding element type (line 811)
str_47205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 811, 31), 'str', 'SCIPY_FFTW3_H')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 811, 31), tuple_47204, str_47205)
# Adding element type (line 811)
# Getting the type of 'None' (line 811)
None_47206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 48), 'None')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 811, 31), tuple_47204, None_47206)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 811, 29), list_47203, tuple_47204)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 808, 16), dict_47193, (str_47202, list_47203))

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 808, 15), list_47192, dict_47193)
# Adding element type (line 808)

# Obtaining an instance of the builtin type 'dict' (line 812)
dict_47207 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 812, 18), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 812)
# Adding element type (key, value) (line 812)
str_47208 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 812, 19), 'str', 'name')
str_47209 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 812, 26), 'str', 'fftw2')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 812, 18), dict_47207, (str_47208, str_47209))
# Adding element type (key, value) (line 812)
str_47210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 813, 20), 'str', 'libs')

# Obtaining an instance of the builtin type 'list' (line 813)
list_47211 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 813, 27), 'list')
# Adding type elements to the builtin type 'list' instance (line 813)
# Adding element type (line 813)
str_47212 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 813, 28), 'str', 'rfftw')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 813, 27), list_47211, str_47212)
# Adding element type (line 813)
str_47213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 813, 37), 'str', 'fftw')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 813, 27), list_47211, str_47213)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 812, 18), dict_47207, (str_47210, list_47211))
# Adding element type (key, value) (line 812)
str_47214 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 814, 20), 'str', 'includes')

# Obtaining an instance of the builtin type 'list' (line 814)
list_47215 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 814, 31), 'list')
# Adding type elements to the builtin type 'list' instance (line 814)
# Adding element type (line 814)
str_47216 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 814, 32), 'str', 'fftw.h')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 814, 31), list_47215, str_47216)
# Adding element type (line 814)
str_47217 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 814, 42), 'str', 'rfftw.h')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 814, 31), list_47215, str_47217)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 812, 18), dict_47207, (str_47214, list_47215))
# Adding element type (key, value) (line 812)
str_47218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 815, 20), 'str', 'macros')

# Obtaining an instance of the builtin type 'list' (line 815)
list_47219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 815, 29), 'list')
# Adding type elements to the builtin type 'list' instance (line 815)
# Adding element type (line 815)

# Obtaining an instance of the builtin type 'tuple' (line 815)
tuple_47220 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 815, 31), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 815)
# Adding element type (line 815)
str_47221 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 815, 31), 'str', 'SCIPY_FFTW_H')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 815, 31), tuple_47220, str_47221)
# Adding element type (line 815)
# Getting the type of 'None' (line 815)
None_47222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 47), 'None')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 815, 31), tuple_47220, None_47222)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 815, 29), list_47219, tuple_47220)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 812, 18), dict_47207, (str_47218, list_47219))

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 808, 15), list_47192, dict_47207)

# Getting the type of 'fftw_info'
fftw_info_47223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'fftw_info')
# Setting the type of the member 'ver_info' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), fftw_info_47223, 'ver_info', list_47192)
# Declaration of the 'fftw2_info' class
# Getting the type of 'fftw_info' (line 850)
fftw_info_47224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 850, 17), 'fftw_info')

class fftw2_info(fftw_info_47224, ):
    
    # Assigning a Str to a Name (line 852):
    
    # Assigning a Str to a Name (line 853):
    
    # Assigning a Name to a Name (line 854):
    
    # Assigning a List to a Name (line 855):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 850, 0, False)
        # Assigning a type to the variable 'self' (line 851)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 851, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'fftw2_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'fftw2_info' (line 850)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 850, 0), 'fftw2_info', fftw2_info)

# Assigning a Str to a Name (line 852):
str_47225 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 852, 14), 'str', 'fftw')
# Getting the type of 'fftw2_info'
fftw2_info_47226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'fftw2_info')
# Setting the type of the member 'section' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), fftw2_info_47226, 'section', str_47225)

# Assigning a Str to a Name (line 853):
str_47227 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 853, 18), 'str', 'FFTW')
# Getting the type of 'fftw2_info'
fftw2_info_47228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'fftw2_info')
# Setting the type of the member 'dir_env_var' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), fftw2_info_47228, 'dir_env_var', str_47227)

# Assigning a Name to a Name (line 854):
# Getting the type of 'FFTWNotFoundError' (line 854)
FFTWNotFoundError_47229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 854, 20), 'FFTWNotFoundError')
# Getting the type of 'fftw2_info'
fftw2_info_47230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'fftw2_info')
# Setting the type of the member 'notfounderror' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), fftw2_info_47230, 'notfounderror', FFTWNotFoundError_47229)

# Assigning a List to a Name (line 855):

# Obtaining an instance of the builtin type 'list' (line 855)
list_47231 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 855, 15), 'list')
# Adding type elements to the builtin type 'list' instance (line 855)
# Adding element type (line 855)

# Obtaining an instance of the builtin type 'dict' (line 855)
dict_47232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 855, 16), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 855)
# Adding element type (key, value) (line 855)
str_47233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 855, 17), 'str', 'name')
str_47234 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 855, 24), 'str', 'fftw2')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 855, 16), dict_47232, (str_47233, str_47234))
# Adding element type (key, value) (line 855)
str_47235 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 856, 20), 'str', 'libs')

# Obtaining an instance of the builtin type 'list' (line 856)
list_47236 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 856, 27), 'list')
# Adding type elements to the builtin type 'list' instance (line 856)
# Adding element type (line 856)
str_47237 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 856, 28), 'str', 'rfftw')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 856, 27), list_47236, str_47237)
# Adding element type (line 856)
str_47238 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 856, 37), 'str', 'fftw')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 856, 27), list_47236, str_47238)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 855, 16), dict_47232, (str_47235, list_47236))
# Adding element type (key, value) (line 855)
str_47239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 857, 20), 'str', 'includes')

# Obtaining an instance of the builtin type 'list' (line 857)
list_47240 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 857, 31), 'list')
# Adding type elements to the builtin type 'list' instance (line 857)
# Adding element type (line 857)
str_47241 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 857, 32), 'str', 'fftw.h')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 857, 31), list_47240, str_47241)
# Adding element type (line 857)
str_47242 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 857, 42), 'str', 'rfftw.h')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 857, 31), list_47240, str_47242)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 855, 16), dict_47232, (str_47239, list_47240))
# Adding element type (key, value) (line 855)
str_47243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 858, 20), 'str', 'macros')

# Obtaining an instance of the builtin type 'list' (line 858)
list_47244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 858, 29), 'list')
# Adding type elements to the builtin type 'list' instance (line 858)
# Adding element type (line 858)

# Obtaining an instance of the builtin type 'tuple' (line 858)
tuple_47245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 858, 31), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 858)
# Adding element type (line 858)
str_47246 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 858, 31), 'str', 'SCIPY_FFTW_H')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 858, 31), tuple_47245, str_47246)
# Adding element type (line 858)
# Getting the type of 'None' (line 858)
None_47247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 858, 47), 'None')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 858, 31), tuple_47245, None_47247)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 858, 29), list_47244, tuple_47245)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 855, 16), dict_47232, (str_47243, list_47244))

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 855, 15), list_47231, dict_47232)

# Getting the type of 'fftw2_info'
fftw2_info_47248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'fftw2_info')
# Setting the type of the member 'ver_info' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), fftw2_info_47248, 'ver_info', list_47231)
# Declaration of the 'fftw3_info' class
# Getting the type of 'fftw_info' (line 862)
fftw_info_47249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 862, 17), 'fftw_info')

class fftw3_info(fftw_info_47249, ):
    
    # Assigning a Str to a Name (line 864):
    
    # Assigning a Str to a Name (line 865):
    
    # Assigning a Name to a Name (line 866):
    
    # Assigning a List to a Name (line 867):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 862, 0, False)
        # Assigning a type to the variable 'self' (line 863)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 863, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'fftw3_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'fftw3_info' (line 862)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 862, 0), 'fftw3_info', fftw3_info)

# Assigning a Str to a Name (line 864):
str_47250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 864, 14), 'str', 'fftw3')
# Getting the type of 'fftw3_info'
fftw3_info_47251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'fftw3_info')
# Setting the type of the member 'section' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), fftw3_info_47251, 'section', str_47250)

# Assigning a Str to a Name (line 865):
str_47252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 865, 18), 'str', 'FFTW3')
# Getting the type of 'fftw3_info'
fftw3_info_47253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'fftw3_info')
# Setting the type of the member 'dir_env_var' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), fftw3_info_47253, 'dir_env_var', str_47252)

# Assigning a Name to a Name (line 866):
# Getting the type of 'FFTWNotFoundError' (line 866)
FFTWNotFoundError_47254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 866, 20), 'FFTWNotFoundError')
# Getting the type of 'fftw3_info'
fftw3_info_47255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'fftw3_info')
# Setting the type of the member 'notfounderror' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), fftw3_info_47255, 'notfounderror', FFTWNotFoundError_47254)

# Assigning a List to a Name (line 867):

# Obtaining an instance of the builtin type 'list' (line 867)
list_47256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 867, 15), 'list')
# Adding type elements to the builtin type 'list' instance (line 867)
# Adding element type (line 867)

# Obtaining an instance of the builtin type 'dict' (line 867)
dict_47257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 867, 16), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 867)
# Adding element type (key, value) (line 867)
str_47258 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 867, 17), 'str', 'name')
str_47259 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 867, 24), 'str', 'fftw3')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 867, 16), dict_47257, (str_47258, str_47259))
# Adding element type (key, value) (line 867)
str_47260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 868, 20), 'str', 'libs')

# Obtaining an instance of the builtin type 'list' (line 868)
list_47261 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 868, 27), 'list')
# Adding type elements to the builtin type 'list' instance (line 868)
# Adding element type (line 868)
str_47262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 868, 28), 'str', 'fftw3')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 868, 27), list_47261, str_47262)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 867, 16), dict_47257, (str_47260, list_47261))
# Adding element type (key, value) (line 867)
str_47263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 869, 20), 'str', 'includes')

# Obtaining an instance of the builtin type 'list' (line 869)
list_47264 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 869, 31), 'list')
# Adding type elements to the builtin type 'list' instance (line 869)
# Adding element type (line 869)
str_47265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 869, 32), 'str', 'fftw3.h')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 869, 31), list_47264, str_47265)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 867, 16), dict_47257, (str_47263, list_47264))
# Adding element type (key, value) (line 867)
str_47266 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 870, 20), 'str', 'macros')

# Obtaining an instance of the builtin type 'list' (line 870)
list_47267 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 870, 29), 'list')
# Adding type elements to the builtin type 'list' instance (line 870)
# Adding element type (line 870)

# Obtaining an instance of the builtin type 'tuple' (line 870)
tuple_47268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 870, 31), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 870)
# Adding element type (line 870)
str_47269 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 870, 31), 'str', 'SCIPY_FFTW3_H')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 870, 31), tuple_47268, str_47269)
# Adding element type (line 870)
# Getting the type of 'None' (line 870)
None_47270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 48), 'None')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 870, 31), tuple_47268, None_47270)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 870, 29), list_47267, tuple_47268)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 867, 16), dict_47257, (str_47266, list_47267))

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 867, 15), list_47256, dict_47257)

# Getting the type of 'fftw3_info'
fftw3_info_47271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'fftw3_info')
# Setting the type of the member 'ver_info' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), fftw3_info_47271, 'ver_info', list_47256)
# Declaration of the 'dfftw_info' class
# Getting the type of 'fftw_info' (line 874)
fftw_info_47272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 874, 17), 'fftw_info')

class dfftw_info(fftw_info_47272, ):
    
    # Assigning a Str to a Name (line 875):
    
    # Assigning a Str to a Name (line 876):
    
    # Assigning a List to a Name (line 877):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 874, 0, False)
        # Assigning a type to the variable 'self' (line 875)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 875, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'dfftw_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'dfftw_info' (line 874)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 874, 0), 'dfftw_info', dfftw_info)

# Assigning a Str to a Name (line 875):
str_47273 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 875, 14), 'str', 'fftw')
# Getting the type of 'dfftw_info'
dfftw_info_47274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'dfftw_info')
# Setting the type of the member 'section' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), dfftw_info_47274, 'section', str_47273)

# Assigning a Str to a Name (line 876):
str_47275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 876, 18), 'str', 'FFTW')
# Getting the type of 'dfftw_info'
dfftw_info_47276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'dfftw_info')
# Setting the type of the member 'dir_env_var' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), dfftw_info_47276, 'dir_env_var', str_47275)

# Assigning a List to a Name (line 877):

# Obtaining an instance of the builtin type 'list' (line 877)
list_47277 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 877, 15), 'list')
# Adding type elements to the builtin type 'list' instance (line 877)
# Adding element type (line 877)

# Obtaining an instance of the builtin type 'dict' (line 877)
dict_47278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 877, 16), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 877)
# Adding element type (key, value) (line 877)
str_47279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 877, 17), 'str', 'name')
str_47280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 877, 24), 'str', 'dfftw')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 877, 16), dict_47278, (str_47279, str_47280))
# Adding element type (key, value) (line 877)
str_47281 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 878, 20), 'str', 'libs')

# Obtaining an instance of the builtin type 'list' (line 878)
list_47282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 878, 27), 'list')
# Adding type elements to the builtin type 'list' instance (line 878)
# Adding element type (line 878)
str_47283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 878, 28), 'str', 'drfftw')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 878, 27), list_47282, str_47283)
# Adding element type (line 878)
str_47284 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 878, 38), 'str', 'dfftw')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 878, 27), list_47282, str_47284)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 877, 16), dict_47278, (str_47281, list_47282))
# Adding element type (key, value) (line 877)
str_47285 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 879, 20), 'str', 'includes')

# Obtaining an instance of the builtin type 'list' (line 879)
list_47286 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 879, 31), 'list')
# Adding type elements to the builtin type 'list' instance (line 879)
# Adding element type (line 879)
str_47287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 879, 32), 'str', 'dfftw.h')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 879, 31), list_47286, str_47287)
# Adding element type (line 879)
str_47288 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 879, 43), 'str', 'drfftw.h')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 879, 31), list_47286, str_47288)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 877, 16), dict_47278, (str_47285, list_47286))
# Adding element type (key, value) (line 877)
str_47289 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 880, 20), 'str', 'macros')

# Obtaining an instance of the builtin type 'list' (line 880)
list_47290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 880, 29), 'list')
# Adding type elements to the builtin type 'list' instance (line 880)
# Adding element type (line 880)

# Obtaining an instance of the builtin type 'tuple' (line 880)
tuple_47291 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 880, 31), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 880)
# Adding element type (line 880)
str_47292 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 880, 31), 'str', 'SCIPY_DFFTW_H')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 880, 31), tuple_47291, str_47292)
# Adding element type (line 880)
# Getting the type of 'None' (line 880)
None_47293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 880, 48), 'None')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 880, 31), tuple_47291, None_47293)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 880, 29), list_47290, tuple_47291)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 877, 16), dict_47278, (str_47289, list_47290))

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 877, 15), list_47277, dict_47278)

# Getting the type of 'dfftw_info'
dfftw_info_47294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'dfftw_info')
# Setting the type of the member 'ver_info' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), dfftw_info_47294, 'ver_info', list_47277)
# Declaration of the 'sfftw_info' class
# Getting the type of 'fftw_info' (line 883)
fftw_info_47295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 17), 'fftw_info')

class sfftw_info(fftw_info_47295, ):
    
    # Assigning a Str to a Name (line 884):
    
    # Assigning a Str to a Name (line 885):
    
    # Assigning a List to a Name (line 886):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 883, 0, False)
        # Assigning a type to the variable 'self' (line 884)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 884, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'sfftw_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'sfftw_info' (line 883)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 883, 0), 'sfftw_info', sfftw_info)

# Assigning a Str to a Name (line 884):
str_47296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 884, 14), 'str', 'fftw')
# Getting the type of 'sfftw_info'
sfftw_info_47297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'sfftw_info')
# Setting the type of the member 'section' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), sfftw_info_47297, 'section', str_47296)

# Assigning a Str to a Name (line 885):
str_47298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 885, 18), 'str', 'FFTW')
# Getting the type of 'sfftw_info'
sfftw_info_47299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'sfftw_info')
# Setting the type of the member 'dir_env_var' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), sfftw_info_47299, 'dir_env_var', str_47298)

# Assigning a List to a Name (line 886):

# Obtaining an instance of the builtin type 'list' (line 886)
list_47300 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 886, 15), 'list')
# Adding type elements to the builtin type 'list' instance (line 886)
# Adding element type (line 886)

# Obtaining an instance of the builtin type 'dict' (line 886)
dict_47301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 886, 16), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 886)
# Adding element type (key, value) (line 886)
str_47302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 886, 17), 'str', 'name')
str_47303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 886, 24), 'str', 'sfftw')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 886, 16), dict_47301, (str_47302, str_47303))
# Adding element type (key, value) (line 886)
str_47304 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 887, 20), 'str', 'libs')

# Obtaining an instance of the builtin type 'list' (line 887)
list_47305 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 887, 27), 'list')
# Adding type elements to the builtin type 'list' instance (line 887)
# Adding element type (line 887)
str_47306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 887, 28), 'str', 'srfftw')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 887, 27), list_47305, str_47306)
# Adding element type (line 887)
str_47307 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 887, 38), 'str', 'sfftw')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 887, 27), list_47305, str_47307)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 886, 16), dict_47301, (str_47304, list_47305))
# Adding element type (key, value) (line 886)
str_47308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 888, 20), 'str', 'includes')

# Obtaining an instance of the builtin type 'list' (line 888)
list_47309 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 888, 31), 'list')
# Adding type elements to the builtin type 'list' instance (line 888)
# Adding element type (line 888)
str_47310 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 888, 32), 'str', 'sfftw.h')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 888, 31), list_47309, str_47310)
# Adding element type (line 888)
str_47311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 888, 43), 'str', 'srfftw.h')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 888, 31), list_47309, str_47311)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 886, 16), dict_47301, (str_47308, list_47309))
# Adding element type (key, value) (line 886)
str_47312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 889, 20), 'str', 'macros')

# Obtaining an instance of the builtin type 'list' (line 889)
list_47313 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 889, 29), 'list')
# Adding type elements to the builtin type 'list' instance (line 889)
# Adding element type (line 889)

# Obtaining an instance of the builtin type 'tuple' (line 889)
tuple_47314 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 889, 31), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 889)
# Adding element type (line 889)
str_47315 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 889, 31), 'str', 'SCIPY_SFFTW_H')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 889, 31), tuple_47314, str_47315)
# Adding element type (line 889)
# Getting the type of 'None' (line 889)
None_47316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 889, 48), 'None')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 889, 31), tuple_47314, None_47316)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 889, 29), list_47313, tuple_47314)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 886, 16), dict_47301, (str_47312, list_47313))

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 886, 15), list_47300, dict_47301)

# Getting the type of 'sfftw_info'
sfftw_info_47317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'sfftw_info')
# Setting the type of the member 'ver_info' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), sfftw_info_47317, 'ver_info', list_47300)
# Declaration of the 'fftw_threads_info' class
# Getting the type of 'fftw_info' (line 892)
fftw_info_47318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 24), 'fftw_info')

class fftw_threads_info(fftw_info_47318, ):
    
    # Assigning a Str to a Name (line 893):
    
    # Assigning a Str to a Name (line 894):
    
    # Assigning a List to a Name (line 895):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 892, 0, False)
        # Assigning a type to the variable 'self' (line 893)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 893, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'fftw_threads_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'fftw_threads_info' (line 892)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 892, 0), 'fftw_threads_info', fftw_threads_info)

# Assigning a Str to a Name (line 893):
str_47319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 893, 14), 'str', 'fftw')
# Getting the type of 'fftw_threads_info'
fftw_threads_info_47320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'fftw_threads_info')
# Setting the type of the member 'section' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), fftw_threads_info_47320, 'section', str_47319)

# Assigning a Str to a Name (line 894):
str_47321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 894, 18), 'str', 'FFTW')
# Getting the type of 'fftw_threads_info'
fftw_threads_info_47322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'fftw_threads_info')
# Setting the type of the member 'dir_env_var' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), fftw_threads_info_47322, 'dir_env_var', str_47321)

# Assigning a List to a Name (line 895):

# Obtaining an instance of the builtin type 'list' (line 895)
list_47323 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 895, 15), 'list')
# Adding type elements to the builtin type 'list' instance (line 895)
# Adding element type (line 895)

# Obtaining an instance of the builtin type 'dict' (line 895)
dict_47324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 895, 16), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 895)
# Adding element type (key, value) (line 895)
str_47325 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 895, 17), 'str', 'name')
str_47326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 895, 24), 'str', 'fftw threads')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 895, 16), dict_47324, (str_47325, str_47326))
# Adding element type (key, value) (line 895)
str_47327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 896, 20), 'str', 'libs')

# Obtaining an instance of the builtin type 'list' (line 896)
list_47328 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 896, 27), 'list')
# Adding type elements to the builtin type 'list' instance (line 896)
# Adding element type (line 896)
str_47329 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 896, 28), 'str', 'rfftw_threads')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 896, 27), list_47328, str_47329)
# Adding element type (line 896)
str_47330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 896, 45), 'str', 'fftw_threads')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 896, 27), list_47328, str_47330)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 895, 16), dict_47324, (str_47327, list_47328))
# Adding element type (key, value) (line 895)
str_47331 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 897, 20), 'str', 'includes')

# Obtaining an instance of the builtin type 'list' (line 897)
list_47332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 897, 31), 'list')
# Adding type elements to the builtin type 'list' instance (line 897)
# Adding element type (line 897)
str_47333 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 897, 32), 'str', 'fftw_threads.h')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 897, 31), list_47332, str_47333)
# Adding element type (line 897)
str_47334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 897, 50), 'str', 'rfftw_threads.h')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 897, 31), list_47332, str_47334)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 895, 16), dict_47324, (str_47331, list_47332))
# Adding element type (key, value) (line 895)
str_47335 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 898, 20), 'str', 'macros')

# Obtaining an instance of the builtin type 'list' (line 898)
list_47336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 898, 29), 'list')
# Adding type elements to the builtin type 'list' instance (line 898)
# Adding element type (line 898)

# Obtaining an instance of the builtin type 'tuple' (line 898)
tuple_47337 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 898, 31), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 898)
# Adding element type (line 898)
str_47338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 898, 31), 'str', 'SCIPY_FFTW_THREADS_H')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 898, 31), tuple_47337, str_47338)
# Adding element type (line 898)
# Getting the type of 'None' (line 898)
None_47339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 898, 55), 'None')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 898, 31), tuple_47337, None_47339)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 898, 29), list_47336, tuple_47337)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 895, 16), dict_47324, (str_47335, list_47336))

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 895, 15), list_47323, dict_47324)

# Getting the type of 'fftw_threads_info'
fftw_threads_info_47340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'fftw_threads_info')
# Setting the type of the member 'ver_info' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), fftw_threads_info_47340, 'ver_info', list_47323)
# Declaration of the 'dfftw_threads_info' class
# Getting the type of 'fftw_info' (line 901)
fftw_info_47341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 901, 25), 'fftw_info')

class dfftw_threads_info(fftw_info_47341, ):
    
    # Assigning a Str to a Name (line 902):
    
    # Assigning a Str to a Name (line 903):
    
    # Assigning a List to a Name (line 904):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 901, 0, False)
        # Assigning a type to the variable 'self' (line 902)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 902, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'dfftw_threads_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'dfftw_threads_info' (line 901)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 901, 0), 'dfftw_threads_info', dfftw_threads_info)

# Assigning a Str to a Name (line 902):
str_47342 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 902, 14), 'str', 'fftw')
# Getting the type of 'dfftw_threads_info'
dfftw_threads_info_47343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'dfftw_threads_info')
# Setting the type of the member 'section' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), dfftw_threads_info_47343, 'section', str_47342)

# Assigning a Str to a Name (line 903):
str_47344 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 903, 18), 'str', 'FFTW')
# Getting the type of 'dfftw_threads_info'
dfftw_threads_info_47345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'dfftw_threads_info')
# Setting the type of the member 'dir_env_var' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), dfftw_threads_info_47345, 'dir_env_var', str_47344)

# Assigning a List to a Name (line 904):

# Obtaining an instance of the builtin type 'list' (line 904)
list_47346 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 904, 15), 'list')
# Adding type elements to the builtin type 'list' instance (line 904)
# Adding element type (line 904)

# Obtaining an instance of the builtin type 'dict' (line 904)
dict_47347 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 904, 16), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 904)
# Adding element type (key, value) (line 904)
str_47348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 904, 17), 'str', 'name')
str_47349 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 904, 24), 'str', 'dfftw threads')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 904, 16), dict_47347, (str_47348, str_47349))
# Adding element type (key, value) (line 904)
str_47350 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 905, 20), 'str', 'libs')

# Obtaining an instance of the builtin type 'list' (line 905)
list_47351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 905, 27), 'list')
# Adding type elements to the builtin type 'list' instance (line 905)
# Adding element type (line 905)
str_47352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 905, 28), 'str', 'drfftw_threads')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 905, 27), list_47351, str_47352)
# Adding element type (line 905)
str_47353 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 905, 46), 'str', 'dfftw_threads')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 905, 27), list_47351, str_47353)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 904, 16), dict_47347, (str_47350, list_47351))
# Adding element type (key, value) (line 904)
str_47354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 906, 20), 'str', 'includes')

# Obtaining an instance of the builtin type 'list' (line 906)
list_47355 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 906, 31), 'list')
# Adding type elements to the builtin type 'list' instance (line 906)
# Adding element type (line 906)
str_47356 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 906, 32), 'str', 'dfftw_threads.h')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 906, 31), list_47355, str_47356)
# Adding element type (line 906)
str_47357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 906, 51), 'str', 'drfftw_threads.h')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 906, 31), list_47355, str_47357)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 904, 16), dict_47347, (str_47354, list_47355))
# Adding element type (key, value) (line 904)
str_47358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 907, 20), 'str', 'macros')

# Obtaining an instance of the builtin type 'list' (line 907)
list_47359 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 907, 29), 'list')
# Adding type elements to the builtin type 'list' instance (line 907)
# Adding element type (line 907)

# Obtaining an instance of the builtin type 'tuple' (line 907)
tuple_47360 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 907, 31), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 907)
# Adding element type (line 907)
str_47361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 907, 31), 'str', 'SCIPY_DFFTW_THREADS_H')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 907, 31), tuple_47360, str_47361)
# Adding element type (line 907)
# Getting the type of 'None' (line 907)
None_47362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 907, 56), 'None')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 907, 31), tuple_47360, None_47362)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 907, 29), list_47359, tuple_47360)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 904, 16), dict_47347, (str_47358, list_47359))

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 904, 15), list_47346, dict_47347)

# Getting the type of 'dfftw_threads_info'
dfftw_threads_info_47363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'dfftw_threads_info')
# Setting the type of the member 'ver_info' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), dfftw_threads_info_47363, 'ver_info', list_47346)
# Declaration of the 'sfftw_threads_info' class
# Getting the type of 'fftw_info' (line 910)
fftw_info_47364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 25), 'fftw_info')

class sfftw_threads_info(fftw_info_47364, ):
    
    # Assigning a Str to a Name (line 911):
    
    # Assigning a Str to a Name (line 912):
    
    # Assigning a List to a Name (line 913):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 910, 0, False)
        # Assigning a type to the variable 'self' (line 911)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 911, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'sfftw_threads_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'sfftw_threads_info' (line 910)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 910, 0), 'sfftw_threads_info', sfftw_threads_info)

# Assigning a Str to a Name (line 911):
str_47365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 911, 14), 'str', 'fftw')
# Getting the type of 'sfftw_threads_info'
sfftw_threads_info_47366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'sfftw_threads_info')
# Setting the type of the member 'section' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), sfftw_threads_info_47366, 'section', str_47365)

# Assigning a Str to a Name (line 912):
str_47367 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 912, 18), 'str', 'FFTW')
# Getting the type of 'sfftw_threads_info'
sfftw_threads_info_47368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'sfftw_threads_info')
# Setting the type of the member 'dir_env_var' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), sfftw_threads_info_47368, 'dir_env_var', str_47367)

# Assigning a List to a Name (line 913):

# Obtaining an instance of the builtin type 'list' (line 913)
list_47369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 913, 15), 'list')
# Adding type elements to the builtin type 'list' instance (line 913)
# Adding element type (line 913)

# Obtaining an instance of the builtin type 'dict' (line 913)
dict_47370 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 913, 16), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 913)
# Adding element type (key, value) (line 913)
str_47371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 913, 17), 'str', 'name')
str_47372 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 913, 24), 'str', 'sfftw threads')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 913, 16), dict_47370, (str_47371, str_47372))
# Adding element type (key, value) (line 913)
str_47373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 914, 20), 'str', 'libs')

# Obtaining an instance of the builtin type 'list' (line 914)
list_47374 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 914, 27), 'list')
# Adding type elements to the builtin type 'list' instance (line 914)
# Adding element type (line 914)
str_47375 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 914, 28), 'str', 'srfftw_threads')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 914, 27), list_47374, str_47375)
# Adding element type (line 914)
str_47376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 914, 46), 'str', 'sfftw_threads')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 914, 27), list_47374, str_47376)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 913, 16), dict_47370, (str_47373, list_47374))
# Adding element type (key, value) (line 913)
str_47377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 915, 20), 'str', 'includes')

# Obtaining an instance of the builtin type 'list' (line 915)
list_47378 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 915, 31), 'list')
# Adding type elements to the builtin type 'list' instance (line 915)
# Adding element type (line 915)
str_47379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 915, 32), 'str', 'sfftw_threads.h')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 915, 31), list_47378, str_47379)
# Adding element type (line 915)
str_47380 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 915, 51), 'str', 'srfftw_threads.h')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 915, 31), list_47378, str_47380)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 913, 16), dict_47370, (str_47377, list_47378))
# Adding element type (key, value) (line 913)
str_47381 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 916, 20), 'str', 'macros')

# Obtaining an instance of the builtin type 'list' (line 916)
list_47382 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 916, 29), 'list')
# Adding type elements to the builtin type 'list' instance (line 916)
# Adding element type (line 916)

# Obtaining an instance of the builtin type 'tuple' (line 916)
tuple_47383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 916, 31), 'tuple')
# Adding type elements to the builtin type 'tuple' instance (line 916)
# Adding element type (line 916)
str_47384 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 916, 31), 'str', 'SCIPY_SFFTW_THREADS_H')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 916, 31), tuple_47383, str_47384)
# Adding element type (line 916)
# Getting the type of 'None' (line 916)
None_47385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 56), 'None')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 916, 31), tuple_47383, None_47385)

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 916, 29), list_47382, tuple_47383)

set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 913, 16), dict_47370, (str_47381, list_47382))

add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 913, 15), list_47369, dict_47370)

# Getting the type of 'sfftw_threads_info'
sfftw_threads_info_47386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'sfftw_threads_info')
# Setting the type of the member 'ver_info' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), sfftw_threads_info_47386, 'ver_info', list_47369)
# Declaration of the 'djbfft_info' class
# Getting the type of 'system_info' (line 919)
system_info_47387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 919, 18), 'system_info')

class djbfft_info(system_info_47387, ):
    
    # Assigning a Str to a Name (line 920):
    
    # Assigning a Str to a Name (line 921):
    
    # Assigning a Name to a Name (line 922):

    @norecursion
    def get_paths(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_paths'
        module_type_store = module_type_store.open_function_context('get_paths', 924, 4, False)
        # Assigning a type to the variable 'self' (line 925)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 925, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        djbfft_info.get_paths.__dict__.__setitem__('stypy_localization', localization)
        djbfft_info.get_paths.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        djbfft_info.get_paths.__dict__.__setitem__('stypy_type_store', module_type_store)
        djbfft_info.get_paths.__dict__.__setitem__('stypy_function_name', 'djbfft_info.get_paths')
        djbfft_info.get_paths.__dict__.__setitem__('stypy_param_names_list', ['section', 'key'])
        djbfft_info.get_paths.__dict__.__setitem__('stypy_varargs_param_name', None)
        djbfft_info.get_paths.__dict__.__setitem__('stypy_kwargs_param_name', None)
        djbfft_info.get_paths.__dict__.__setitem__('stypy_call_defaults', defaults)
        djbfft_info.get_paths.__dict__.__setitem__('stypy_call_varargs', varargs)
        djbfft_info.get_paths.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        djbfft_info.get_paths.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'djbfft_info.get_paths', ['section', 'key'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_paths', localization, ['section', 'key'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_paths(...)' code ##################

        
        # Assigning a Call to a Name (line 925):
        
        # Assigning a Call to a Name (line 925):
        
        # Call to get_paths(...): (line 925)
        # Processing the call arguments (line 925)
        # Getting the type of 'self' (line 925)
        self_47390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 41), 'self', False)
        # Getting the type of 'section' (line 925)
        section_47391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 47), 'section', False)
        # Getting the type of 'key' (line 925)
        key_47392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 56), 'key', False)
        # Processing the call keyword arguments (line 925)
        kwargs_47393 = {}
        # Getting the type of 'system_info' (line 925)
        system_info_47388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 19), 'system_info', False)
        # Obtaining the member 'get_paths' of a type (line 925)
        get_paths_47389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 925, 19), system_info_47388, 'get_paths')
        # Calling get_paths(args, kwargs) (line 925)
        get_paths_call_result_47394 = invoke(stypy.reporting.localization.Localization(__file__, 925, 19), get_paths_47389, *[self_47390, section_47391, key_47392], **kwargs_47393)
        
        # Assigning a type to the variable 'pre_dirs' (line 925)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 925, 8), 'pre_dirs', get_paths_call_result_47394)
        
        # Assigning a List to a Name (line 926):
        
        # Assigning a List to a Name (line 926):
        
        # Obtaining an instance of the builtin type 'list' (line 926)
        list_47395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 926, 15), 'list')
        # Adding type elements to the builtin type 'list' instance (line 926)
        
        # Assigning a type to the variable 'dirs' (line 926)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 926, 8), 'dirs', list_47395)
        
        # Getting the type of 'pre_dirs' (line 927)
        pre_dirs_47396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 927, 17), 'pre_dirs')
        # Testing the type of a for loop iterable (line 927)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 927, 8), pre_dirs_47396)
        # Getting the type of the for loop variable (line 927)
        for_loop_var_47397 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 927, 8), pre_dirs_47396)
        # Assigning a type to the variable 'd' (line 927)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 927, 8), 'd', for_loop_var_47397)
        # SSA begins for a for statement (line 927)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to extend(...): (line 928)
        # Processing the call arguments (line 928)
        
        # Call to combine_paths(...): (line 928)
        # Processing the call arguments (line 928)
        # Getting the type of 'd' (line 928)
        d_47402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 928, 43), 'd', False)
        
        # Obtaining an instance of the builtin type 'list' (line 928)
        list_47403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 928, 46), 'list')
        # Adding type elements to the builtin type 'list' instance (line 928)
        # Adding element type (line 928)
        str_47404 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 928, 47), 'str', 'djbfft')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 928, 46), list_47403, str_47404)
        
        # Processing the call keyword arguments (line 928)
        kwargs_47405 = {}
        # Getting the type of 'self' (line 928)
        self_47400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 928, 24), 'self', False)
        # Obtaining the member 'combine_paths' of a type (line 928)
        combine_paths_47401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 928, 24), self_47400, 'combine_paths')
        # Calling combine_paths(args, kwargs) (line 928)
        combine_paths_call_result_47406 = invoke(stypy.reporting.localization.Localization(__file__, 928, 24), combine_paths_47401, *[d_47402, list_47403], **kwargs_47405)
        
        
        # Obtaining an instance of the builtin type 'list' (line 928)
        list_47407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 928, 60), 'list')
        # Adding type elements to the builtin type 'list' instance (line 928)
        # Adding element type (line 928)
        # Getting the type of 'd' (line 928)
        d_47408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 928, 61), 'd', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 928, 60), list_47407, d_47408)
        
        # Applying the binary operator '+' (line 928)
        result_add_47409 = python_operator(stypy.reporting.localization.Localization(__file__, 928, 24), '+', combine_paths_call_result_47406, list_47407)
        
        # Processing the call keyword arguments (line 928)
        kwargs_47410 = {}
        # Getting the type of 'dirs' (line 928)
        dirs_47398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 928, 12), 'dirs', False)
        # Obtaining the member 'extend' of a type (line 928)
        extend_47399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 928, 12), dirs_47398, 'extend')
        # Calling extend(args, kwargs) (line 928)
        extend_call_result_47411 = invoke(stypy.reporting.localization.Localization(__file__, 928, 12), extend_47399, *[result_add_47409], **kwargs_47410)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'dirs' (line 929)
        dirs_47419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 27), 'dirs')
        comprehension_47420 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 929, 16), dirs_47419)
        # Assigning a type to the variable 'd' (line 929)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 929, 16), 'd', comprehension_47420)
        
        # Call to isdir(...): (line 929)
        # Processing the call arguments (line 929)
        # Getting the type of 'd' (line 929)
        d_47416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 49), 'd', False)
        # Processing the call keyword arguments (line 929)
        kwargs_47417 = {}
        # Getting the type of 'os' (line 929)
        os_47413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 35), 'os', False)
        # Obtaining the member 'path' of a type (line 929)
        path_47414 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 929, 35), os_47413, 'path')
        # Obtaining the member 'isdir' of a type (line 929)
        isdir_47415 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 929, 35), path_47414, 'isdir')
        # Calling isdir(args, kwargs) (line 929)
        isdir_call_result_47418 = invoke(stypy.reporting.localization.Localization(__file__, 929, 35), isdir_47415, *[d_47416], **kwargs_47417)
        
        # Getting the type of 'd' (line 929)
        d_47412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 16), 'd')
        list_47421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 929, 16), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 929, 16), list_47421, d_47412)
        # Assigning a type to the variable 'stypy_return_type' (line 929)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 929, 8), 'stypy_return_type', list_47421)
        
        # ################# End of 'get_paths(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_paths' in the type store
        # Getting the type of 'stypy_return_type' (line 924)
        stypy_return_type_47422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_47422)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_paths'
        return stypy_return_type_47422


    @norecursion
    def calc_info(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'calc_info'
        module_type_store = module_type_store.open_function_context('calc_info', 931, 4, False)
        # Assigning a type to the variable 'self' (line 932)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 932, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        djbfft_info.calc_info.__dict__.__setitem__('stypy_localization', localization)
        djbfft_info.calc_info.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        djbfft_info.calc_info.__dict__.__setitem__('stypy_type_store', module_type_store)
        djbfft_info.calc_info.__dict__.__setitem__('stypy_function_name', 'djbfft_info.calc_info')
        djbfft_info.calc_info.__dict__.__setitem__('stypy_param_names_list', [])
        djbfft_info.calc_info.__dict__.__setitem__('stypy_varargs_param_name', None)
        djbfft_info.calc_info.__dict__.__setitem__('stypy_kwargs_param_name', None)
        djbfft_info.calc_info.__dict__.__setitem__('stypy_call_defaults', defaults)
        djbfft_info.calc_info.__dict__.__setitem__('stypy_call_varargs', varargs)
        djbfft_info.calc_info.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        djbfft_info.calc_info.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'djbfft_info.calc_info', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'calc_info', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'calc_info(...)' code ##################

        
        # Assigning a Call to a Name (line 932):
        
        # Assigning a Call to a Name (line 932):
        
        # Call to get_lib_dirs(...): (line 932)
        # Processing the call keyword arguments (line 932)
        kwargs_47425 = {}
        # Getting the type of 'self' (line 932)
        self_47423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 932, 19), 'self', False)
        # Obtaining the member 'get_lib_dirs' of a type (line 932)
        get_lib_dirs_47424 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 932, 19), self_47423, 'get_lib_dirs')
        # Calling get_lib_dirs(args, kwargs) (line 932)
        get_lib_dirs_call_result_47426 = invoke(stypy.reporting.localization.Localization(__file__, 932, 19), get_lib_dirs_47424, *[], **kwargs_47425)
        
        # Assigning a type to the variable 'lib_dirs' (line 932)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 932, 8), 'lib_dirs', get_lib_dirs_call_result_47426)
        
        # Assigning a Call to a Name (line 933):
        
        # Assigning a Call to a Name (line 933):
        
        # Call to get_include_dirs(...): (line 933)
        # Processing the call keyword arguments (line 933)
        kwargs_47429 = {}
        # Getting the type of 'self' (line 933)
        self_47427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 933, 20), 'self', False)
        # Obtaining the member 'get_include_dirs' of a type (line 933)
        get_include_dirs_47428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 933, 20), self_47427, 'get_include_dirs')
        # Calling get_include_dirs(args, kwargs) (line 933)
        get_include_dirs_call_result_47430 = invoke(stypy.reporting.localization.Localization(__file__, 933, 20), get_include_dirs_47428, *[], **kwargs_47429)
        
        # Assigning a type to the variable 'incl_dirs' (line 933)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 933, 8), 'incl_dirs', get_include_dirs_call_result_47430)
        
        # Assigning a Name to a Name (line 934):
        
        # Assigning a Name to a Name (line 934):
        # Getting the type of 'None' (line 934)
        None_47431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 934, 15), 'None')
        # Assigning a type to the variable 'info' (line 934)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 934, 8), 'info', None_47431)
        
        # Getting the type of 'lib_dirs' (line 935)
        lib_dirs_47432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 17), 'lib_dirs')
        # Testing the type of a for loop iterable (line 935)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 935, 8), lib_dirs_47432)
        # Getting the type of the for loop variable (line 935)
        for_loop_var_47433 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 935, 8), lib_dirs_47432)
        # Assigning a type to the variable 'd' (line 935)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 935, 8), 'd', for_loop_var_47433)
        # SSA begins for a for statement (line 935)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 936):
        
        # Assigning a Call to a Name (line 936):
        
        # Call to combine_paths(...): (line 936)
        # Processing the call arguments (line 936)
        # Getting the type of 'd' (line 936)
        d_47436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 35), 'd', False)
        
        # Obtaining an instance of the builtin type 'list' (line 936)
        list_47437 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 936, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 936)
        # Adding element type (line 936)
        str_47438 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 936, 39), 'str', 'djbfft.a')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 936, 38), list_47437, str_47438)
        
        # Processing the call keyword arguments (line 936)
        kwargs_47439 = {}
        # Getting the type of 'self' (line 936)
        self_47434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 16), 'self', False)
        # Obtaining the member 'combine_paths' of a type (line 936)
        combine_paths_47435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 936, 16), self_47434, 'combine_paths')
        # Calling combine_paths(args, kwargs) (line 936)
        combine_paths_call_result_47440 = invoke(stypy.reporting.localization.Localization(__file__, 936, 16), combine_paths_47435, *[d_47436, list_47437], **kwargs_47439)
        
        # Assigning a type to the variable 'p' (line 936)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 936, 12), 'p', combine_paths_call_result_47440)
        
        # Getting the type of 'p' (line 937)
        p_47441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 15), 'p')
        # Testing the type of an if condition (line 937)
        if_condition_47442 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 937, 12), p_47441)
        # Assigning a type to the variable 'if_condition_47442' (line 937)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 937, 12), 'if_condition_47442', if_condition_47442)
        # SSA begins for if statement (line 937)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Dict to a Name (line 938):
        
        # Assigning a Dict to a Name (line 938):
        
        # Obtaining an instance of the builtin type 'dict' (line 938)
        dict_47443 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 938, 23), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 938)
        # Adding element type (key, value) (line 938)
        str_47444 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 938, 24), 'str', 'extra_objects')
        # Getting the type of 'p' (line 938)
        p_47445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 41), 'p')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 938, 23), dict_47443, (str_47444, p_47445))
        
        # Assigning a type to the variable 'info' (line 938)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 938, 16), 'info', dict_47443)
        # SSA join for if statement (line 937)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 940):
        
        # Assigning a Call to a Name (line 940):
        
        # Call to combine_paths(...): (line 940)
        # Processing the call arguments (line 940)
        # Getting the type of 'd' (line 940)
        d_47448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 35), 'd', False)
        
        # Obtaining an instance of the builtin type 'list' (line 940)
        list_47449 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 940, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 940)
        # Adding element type (line 940)
        str_47450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 940, 39), 'str', 'libdjbfft.a')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 940, 38), list_47449, str_47450)
        # Adding element type (line 940)
        str_47451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 940, 54), 'str', 'libdjbfft')
        # Getting the type of 'so_ext' (line 940)
        so_ext_47452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 68), 'so_ext', False)
        # Applying the binary operator '+' (line 940)
        result_add_47453 = python_operator(stypy.reporting.localization.Localization(__file__, 940, 54), '+', str_47451, so_ext_47452)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 940, 38), list_47449, result_add_47453)
        
        # Processing the call keyword arguments (line 940)
        kwargs_47454 = {}
        # Getting the type of 'self' (line 940)
        self_47446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 16), 'self', False)
        # Obtaining the member 'combine_paths' of a type (line 940)
        combine_paths_47447 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 940, 16), self_47446, 'combine_paths')
        # Calling combine_paths(args, kwargs) (line 940)
        combine_paths_call_result_47455 = invoke(stypy.reporting.localization.Localization(__file__, 940, 16), combine_paths_47447, *[d_47448, list_47449], **kwargs_47454)
        
        # Assigning a type to the variable 'p' (line 940)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 940, 12), 'p', combine_paths_call_result_47455)
        
        # Getting the type of 'p' (line 941)
        p_47456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 941, 15), 'p')
        # Testing the type of an if condition (line 941)
        if_condition_47457 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 941, 12), p_47456)
        # Assigning a type to the variable 'if_condition_47457' (line 941)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 941, 12), 'if_condition_47457', if_condition_47457)
        # SSA begins for if statement (line 941)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Dict to a Name (line 942):
        
        # Assigning a Dict to a Name (line 942):
        
        # Obtaining an instance of the builtin type 'dict' (line 942)
        dict_47458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 942, 23), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 942)
        # Adding element type (key, value) (line 942)
        str_47459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 942, 24), 'str', 'libraries')
        
        # Obtaining an instance of the builtin type 'list' (line 942)
        list_47460 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 942, 37), 'list')
        # Adding type elements to the builtin type 'list' instance (line 942)
        # Adding element type (line 942)
        str_47461 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 942, 38), 'str', 'djbfft')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 942, 37), list_47460, str_47461)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 942, 23), dict_47458, (str_47459, list_47460))
        # Adding element type (key, value) (line 942)
        str_47462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 942, 49), 'str', 'library_dirs')
        
        # Obtaining an instance of the builtin type 'list' (line 942)
        list_47463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 942, 65), 'list')
        # Adding type elements to the builtin type 'list' instance (line 942)
        # Adding element type (line 942)
        # Getting the type of 'd' (line 942)
        d_47464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 66), 'd')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 942, 65), list_47463, d_47464)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 942, 23), dict_47458, (str_47462, list_47463))
        
        # Assigning a type to the variable 'info' (line 942)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 942, 16), 'info', dict_47458)
        # SSA join for if statement (line 941)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 944)
        # Getting the type of 'info' (line 944)
        info_47465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 11), 'info')
        # Getting the type of 'None' (line 944)
        None_47466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 19), 'None')
        
        (may_be_47467, more_types_in_union_47468) = may_be_none(info_47465, None_47466)

        if may_be_47467:

            if more_types_in_union_47468:
                # Runtime conditional SSA (line 944)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'stypy_return_type' (line 945)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 945, 12), 'stypy_return_type', types.NoneType)

            if more_types_in_union_47468:
                # SSA join for if statement (line 944)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Getting the type of 'incl_dirs' (line 946)
        incl_dirs_47469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 17), 'incl_dirs')
        # Testing the type of a for loop iterable (line 946)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 946, 8), incl_dirs_47469)
        # Getting the type of the for loop variable (line 946)
        for_loop_var_47470 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 946, 8), incl_dirs_47469)
        # Assigning a type to the variable 'd' (line 946)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 946, 8), 'd', for_loop_var_47470)
        # SSA begins for a for statement (line 946)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        
        # Call to len(...): (line 947)
        # Processing the call arguments (line 947)
        
        # Call to combine_paths(...): (line 947)
        # Processing the call arguments (line 947)
        # Getting the type of 'd' (line 947)
        d_47474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 38), 'd', False)
        
        # Obtaining an instance of the builtin type 'list' (line 947)
        list_47475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 947, 41), 'list')
        # Adding type elements to the builtin type 'list' instance (line 947)
        # Adding element type (line 947)
        str_47476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 947, 42), 'str', 'fftc8.h')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 947, 41), list_47475, str_47476)
        # Adding element type (line 947)
        str_47477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 947, 53), 'str', 'fftfreq.h')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 947, 41), list_47475, str_47477)
        
        # Processing the call keyword arguments (line 947)
        kwargs_47478 = {}
        # Getting the type of 'self' (line 947)
        self_47472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 19), 'self', False)
        # Obtaining the member 'combine_paths' of a type (line 947)
        combine_paths_47473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 947, 19), self_47472, 'combine_paths')
        # Calling combine_paths(args, kwargs) (line 947)
        combine_paths_call_result_47479 = invoke(stypy.reporting.localization.Localization(__file__, 947, 19), combine_paths_47473, *[d_47474, list_47475], **kwargs_47478)
        
        # Processing the call keyword arguments (line 947)
        kwargs_47480 = {}
        # Getting the type of 'len' (line 947)
        len_47471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 15), 'len', False)
        # Calling len(args, kwargs) (line 947)
        len_call_result_47481 = invoke(stypy.reporting.localization.Localization(__file__, 947, 15), len_47471, *[combine_paths_call_result_47479], **kwargs_47480)
        
        int_47482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 947, 71), 'int')
        # Applying the binary operator '==' (line 947)
        result_eq_47483 = python_operator(stypy.reporting.localization.Localization(__file__, 947, 15), '==', len_call_result_47481, int_47482)
        
        # Testing the type of an if condition (line 947)
        if_condition_47484 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 947, 12), result_eq_47483)
        # Assigning a type to the variable 'if_condition_47484' (line 947)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 947, 12), 'if_condition_47484', if_condition_47484)
        # SSA begins for if statement (line 947)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to dict_append(...): (line 948)
        # Processing the call arguments (line 948)
        # Getting the type of 'info' (line 948)
        info_47486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 28), 'info', False)
        # Processing the call keyword arguments (line 948)
        
        # Obtaining an instance of the builtin type 'list' (line 948)
        list_47487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 948, 47), 'list')
        # Adding type elements to the builtin type 'list' instance (line 948)
        # Adding element type (line 948)
        # Getting the type of 'd' (line 948)
        d_47488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 48), 'd', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 948, 47), list_47487, d_47488)
        
        keyword_47489 = list_47487
        
        # Obtaining an instance of the builtin type 'list' (line 949)
        list_47490 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 949, 42), 'list')
        # Adding type elements to the builtin type 'list' instance (line 949)
        # Adding element type (line 949)
        
        # Obtaining an instance of the builtin type 'tuple' (line 949)
        tuple_47491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 949, 44), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 949)
        # Adding element type (line 949)
        str_47492 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 949, 44), 'str', 'SCIPY_DJBFFT_H')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 949, 44), tuple_47491, str_47492)
        # Adding element type (line 949)
        # Getting the type of 'None' (line 949)
        None_47493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 62), 'None', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 949, 44), tuple_47491, None_47493)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 949, 42), list_47490, tuple_47491)
        
        keyword_47494 = list_47490
        kwargs_47495 = {'define_macros': keyword_47494, 'include_dirs': keyword_47489}
        # Getting the type of 'dict_append' (line 948)
        dict_append_47485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 16), 'dict_append', False)
        # Calling dict_append(args, kwargs) (line 948)
        dict_append_call_result_47496 = invoke(stypy.reporting.localization.Localization(__file__, 948, 16), dict_append_47485, *[info_47486], **kwargs_47495)
        
        
        # Call to set_info(...): (line 950)
        # Processing the call keyword arguments (line 950)
        # Getting the type of 'info' (line 950)
        info_47499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 32), 'info', False)
        kwargs_47500 = {'info_47499': info_47499}
        # Getting the type of 'self' (line 950)
        self_47497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 16), 'self', False)
        # Obtaining the member 'set_info' of a type (line 950)
        set_info_47498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 950, 16), self_47497, 'set_info')
        # Calling set_info(args, kwargs) (line 950)
        set_info_call_result_47501 = invoke(stypy.reporting.localization.Localization(__file__, 950, 16), set_info_47498, *[], **kwargs_47500)
        
        # Assigning a type to the variable 'stypy_return_type' (line 951)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 951, 16), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 947)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Assigning a type to the variable 'stypy_return_type' (line 952)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 952, 8), 'stypy_return_type', types.NoneType)
        
        # ################# End of 'calc_info(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'calc_info' in the type store
        # Getting the type of 'stypy_return_type' (line 931)
        stypy_return_type_47502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 931, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_47502)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'calc_info'
        return stypy_return_type_47502


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 919, 0, False)
        # Assigning a type to the variable 'self' (line 920)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 920, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'djbfft_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'djbfft_info' (line 919)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 919, 0), 'djbfft_info', djbfft_info)

# Assigning a Str to a Name (line 920):
str_47503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 920, 14), 'str', 'djbfft')
# Getting the type of 'djbfft_info'
djbfft_info_47504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'djbfft_info')
# Setting the type of the member 'section' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), djbfft_info_47504, 'section', str_47503)

# Assigning a Str to a Name (line 921):
str_47505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 921, 18), 'str', 'DJBFFT')
# Getting the type of 'djbfft_info'
djbfft_info_47506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'djbfft_info')
# Setting the type of the member 'dir_env_var' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), djbfft_info_47506, 'dir_env_var', str_47505)

# Assigning a Name to a Name (line 922):
# Getting the type of 'DJBFFTNotFoundError' (line 922)
DJBFFTNotFoundError_47507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 20), 'DJBFFTNotFoundError')
# Getting the type of 'djbfft_info'
djbfft_info_47508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'djbfft_info')
# Setting the type of the member 'notfounderror' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), djbfft_info_47508, 'notfounderror', DJBFFTNotFoundError_47507)
# Declaration of the 'mkl_info' class
# Getting the type of 'system_info' (line 955)
system_info_47509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 955, 15), 'system_info')

class mkl_info(system_info_47509, ):
    
    # Assigning a Str to a Name (line 956):
    
    # Assigning a Str to a Name (line 957):
    
    # Assigning a List to a Name (line 958):

    @norecursion
    def get_mkl_rootdir(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_mkl_rootdir'
        module_type_store = module_type_store.open_function_context('get_mkl_rootdir', 960, 4, False)
        # Assigning a type to the variable 'self' (line 961)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 961, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        mkl_info.get_mkl_rootdir.__dict__.__setitem__('stypy_localization', localization)
        mkl_info.get_mkl_rootdir.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        mkl_info.get_mkl_rootdir.__dict__.__setitem__('stypy_type_store', module_type_store)
        mkl_info.get_mkl_rootdir.__dict__.__setitem__('stypy_function_name', 'mkl_info.get_mkl_rootdir')
        mkl_info.get_mkl_rootdir.__dict__.__setitem__('stypy_param_names_list', [])
        mkl_info.get_mkl_rootdir.__dict__.__setitem__('stypy_varargs_param_name', None)
        mkl_info.get_mkl_rootdir.__dict__.__setitem__('stypy_kwargs_param_name', None)
        mkl_info.get_mkl_rootdir.__dict__.__setitem__('stypy_call_defaults', defaults)
        mkl_info.get_mkl_rootdir.__dict__.__setitem__('stypy_call_varargs', varargs)
        mkl_info.get_mkl_rootdir.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        mkl_info.get_mkl_rootdir.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'mkl_info.get_mkl_rootdir', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_mkl_rootdir', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_mkl_rootdir(...)' code ##################

        
        # Assigning a Call to a Name (line 961):
        
        # Assigning a Call to a Name (line 961):
        
        # Call to get(...): (line 961)
        # Processing the call arguments (line 961)
        str_47513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 961, 33), 'str', 'MKLROOT')
        # Getting the type of 'None' (line 961)
        None_47514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 44), 'None', False)
        # Processing the call keyword arguments (line 961)
        kwargs_47515 = {}
        # Getting the type of 'os' (line 961)
        os_47510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 18), 'os', False)
        # Obtaining the member 'environ' of a type (line 961)
        environ_47511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 961, 18), os_47510, 'environ')
        # Obtaining the member 'get' of a type (line 961)
        get_47512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 961, 18), environ_47511, 'get')
        # Calling get(args, kwargs) (line 961)
        get_call_result_47516 = invoke(stypy.reporting.localization.Localization(__file__, 961, 18), get_47512, *[str_47513, None_47514], **kwargs_47515)
        
        # Assigning a type to the variable 'mklroot' (line 961)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 961, 8), 'mklroot', get_call_result_47516)
        
        # Type idiom detected: calculating its left and rigth part (line 962)
        # Getting the type of 'mklroot' (line 962)
        mklroot_47517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 8), 'mklroot')
        # Getting the type of 'None' (line 962)
        None_47518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 26), 'None')
        
        (may_be_47519, more_types_in_union_47520) = may_not_be_none(mklroot_47517, None_47518)

        if may_be_47519:

            if more_types_in_union_47520:
                # Runtime conditional SSA (line 962)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Getting the type of 'mklroot' (line 963)
            mklroot_47521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 19), 'mklroot')
            # Assigning a type to the variable 'stypy_return_type' (line 963)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 963, 12), 'stypy_return_type', mklroot_47521)

            if more_types_in_union_47520:
                # SSA join for if statement (line 962)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 964):
        
        # Assigning a Call to a Name (line 964):
        
        # Call to split(...): (line 964)
        # Processing the call arguments (line 964)
        # Getting the type of 'os' (line 964)
        os_47530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 60), 'os', False)
        # Obtaining the member 'pathsep' of a type (line 964)
        pathsep_47531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 964, 60), os_47530, 'pathsep')
        # Processing the call keyword arguments (line 964)
        kwargs_47532 = {}
        
        # Call to get(...): (line 964)
        # Processing the call arguments (line 964)
        str_47525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 964, 31), 'str', 'LD_LIBRARY_PATH')
        str_47526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 964, 50), 'str', '')
        # Processing the call keyword arguments (line 964)
        kwargs_47527 = {}
        # Getting the type of 'os' (line 964)
        os_47522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 16), 'os', False)
        # Obtaining the member 'environ' of a type (line 964)
        environ_47523 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 964, 16), os_47522, 'environ')
        # Obtaining the member 'get' of a type (line 964)
        get_47524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 964, 16), environ_47523, 'get')
        # Calling get(args, kwargs) (line 964)
        get_call_result_47528 = invoke(stypy.reporting.localization.Localization(__file__, 964, 16), get_47524, *[str_47525, str_47526], **kwargs_47527)
        
        # Obtaining the member 'split' of a type (line 964)
        split_47529 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 964, 16), get_call_result_47528, 'split')
        # Calling split(args, kwargs) (line 964)
        split_call_result_47533 = invoke(stypy.reporting.localization.Localization(__file__, 964, 16), split_47529, *[pathsep_47531], **kwargs_47532)
        
        # Assigning a type to the variable 'paths' (line 964)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 964, 8), 'paths', split_call_result_47533)
        
        # Assigning a Str to a Name (line 965):
        
        # Assigning a Str to a Name (line 965):
        str_47534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 965, 21), 'str', '/etc/ld.so.conf')
        # Assigning a type to the variable 'ld_so_conf' (line 965)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 965, 8), 'ld_so_conf', str_47534)
        
        
        # Call to isfile(...): (line 966)
        # Processing the call arguments (line 966)
        # Getting the type of 'ld_so_conf' (line 966)
        ld_so_conf_47538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 26), 'ld_so_conf', False)
        # Processing the call keyword arguments (line 966)
        kwargs_47539 = {}
        # Getting the type of 'os' (line 966)
        os_47535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 11), 'os', False)
        # Obtaining the member 'path' of a type (line 966)
        path_47536 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 966, 11), os_47535, 'path')
        # Obtaining the member 'isfile' of a type (line 966)
        isfile_47537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 966, 11), path_47536, 'isfile')
        # Calling isfile(args, kwargs) (line 966)
        isfile_call_result_47540 = invoke(stypy.reporting.localization.Localization(__file__, 966, 11), isfile_47537, *[ld_so_conf_47538], **kwargs_47539)
        
        # Testing the type of an if condition (line 966)
        if_condition_47541 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 966, 8), isfile_call_result_47540)
        # Assigning a type to the variable 'if_condition_47541' (line 966)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 966, 8), 'if_condition_47541', if_condition_47541)
        # SSA begins for if statement (line 966)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to open(...): (line 967)
        # Processing the call arguments (line 967)
        # Getting the type of 'ld_so_conf' (line 967)
        ld_so_conf_47543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 26), 'ld_so_conf', False)
        str_47544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 967, 38), 'str', 'r')
        # Processing the call keyword arguments (line 967)
        kwargs_47545 = {}
        # Getting the type of 'open' (line 967)
        open_47542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 21), 'open', False)
        # Calling open(args, kwargs) (line 967)
        open_call_result_47546 = invoke(stypy.reporting.localization.Localization(__file__, 967, 21), open_47542, *[ld_so_conf_47543, str_47544], **kwargs_47545)
        
        # Testing the type of a for loop iterable (line 967)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 967, 12), open_call_result_47546)
        # Getting the type of the for loop variable (line 967)
        for_loop_var_47547 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 967, 12), open_call_result_47546)
        # Assigning a type to the variable 'd' (line 967)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 967, 12), 'd', for_loop_var_47547)
        # SSA begins for a for statement (line 967)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 968):
        
        # Assigning a Call to a Name (line 968):
        
        # Call to strip(...): (line 968)
        # Processing the call keyword arguments (line 968)
        kwargs_47550 = {}
        # Getting the type of 'd' (line 968)
        d_47548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 968, 20), 'd', False)
        # Obtaining the member 'strip' of a type (line 968)
        strip_47549 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 968, 20), d_47548, 'strip')
        # Calling strip(args, kwargs) (line 968)
        strip_call_result_47551 = invoke(stypy.reporting.localization.Localization(__file__, 968, 20), strip_47549, *[], **kwargs_47550)
        
        # Assigning a type to the variable 'd' (line 968)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 968, 16), 'd', strip_call_result_47551)
        
        # Getting the type of 'd' (line 969)
        d_47552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 969, 19), 'd')
        # Testing the type of an if condition (line 969)
        if_condition_47553 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 969, 16), d_47552)
        # Assigning a type to the variable 'if_condition_47553' (line 969)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 969, 16), 'if_condition_47553', if_condition_47553)
        # SSA begins for if statement (line 969)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 970)
        # Processing the call arguments (line 970)
        # Getting the type of 'd' (line 970)
        d_47556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 33), 'd', False)
        # Processing the call keyword arguments (line 970)
        kwargs_47557 = {}
        # Getting the type of 'paths' (line 970)
        paths_47554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 970, 20), 'paths', False)
        # Obtaining the member 'append' of a type (line 970)
        append_47555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 970, 20), paths_47554, 'append')
        # Calling append(args, kwargs) (line 970)
        append_call_result_47558 = invoke(stypy.reporting.localization.Localization(__file__, 970, 20), append_47555, *[d_47556], **kwargs_47557)
        
        # SSA join for if statement (line 969)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 966)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a List to a Name (line 971):
        
        # Assigning a List to a Name (line 971):
        
        # Obtaining an instance of the builtin type 'list' (line 971)
        list_47559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 971, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 971)
        
        # Assigning a type to the variable 'intel_mkl_dirs' (line 971)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 971, 8), 'intel_mkl_dirs', list_47559)
        
        # Getting the type of 'paths' (line 972)
        paths_47560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 972, 20), 'paths')
        # Testing the type of a for loop iterable (line 972)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 972, 8), paths_47560)
        # Getting the type of the for loop variable (line 972)
        for_loop_var_47561 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 972, 8), paths_47560)
        # Assigning a type to the variable 'path' (line 972)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 972, 8), 'path', for_loop_var_47561)
        # SSA begins for a for statement (line 972)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 973):
        
        # Assigning a Call to a Name (line 973):
        
        # Call to split(...): (line 973)
        # Processing the call arguments (line 973)
        # Getting the type of 'os' (line 973)
        os_47564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 36), 'os', False)
        # Obtaining the member 'sep' of a type (line 973)
        sep_47565 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 973, 36), os_47564, 'sep')
        # Processing the call keyword arguments (line 973)
        kwargs_47566 = {}
        # Getting the type of 'path' (line 973)
        path_47562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 25), 'path', False)
        # Obtaining the member 'split' of a type (line 973)
        split_47563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 973, 25), path_47562, 'split')
        # Calling split(args, kwargs) (line 973)
        split_call_result_47567 = invoke(stypy.reporting.localization.Localization(__file__, 973, 25), split_47563, *[sep_47565], **kwargs_47566)
        
        # Assigning a type to the variable 'path_atoms' (line 973)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 973, 12), 'path_atoms', split_call_result_47567)
        
        # Getting the type of 'path_atoms' (line 974)
        path_atoms_47568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 21), 'path_atoms')
        # Testing the type of a for loop iterable (line 974)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 974, 12), path_atoms_47568)
        # Getting the type of the for loop variable (line 974)
        for_loop_var_47569 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 974, 12), path_atoms_47568)
        # Assigning a type to the variable 'm' (line 974)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 974, 12), 'm', for_loop_var_47569)
        # SSA begins for a for statement (line 974)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to startswith(...): (line 975)
        # Processing the call arguments (line 975)
        str_47572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 975, 32), 'str', 'mkl')
        # Processing the call keyword arguments (line 975)
        kwargs_47573 = {}
        # Getting the type of 'm' (line 975)
        m_47570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 19), 'm', False)
        # Obtaining the member 'startswith' of a type (line 975)
        startswith_47571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 975, 19), m_47570, 'startswith')
        # Calling startswith(args, kwargs) (line 975)
        startswith_call_result_47574 = invoke(stypy.reporting.localization.Localization(__file__, 975, 19), startswith_47571, *[str_47572], **kwargs_47573)
        
        # Testing the type of an if condition (line 975)
        if_condition_47575 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 975, 16), startswith_call_result_47574)
        # Assigning a type to the variable 'if_condition_47575' (line 975)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 975, 16), 'if_condition_47575', if_condition_47575)
        # SSA begins for if statement (line 975)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 976):
        
        # Assigning a Call to a Name (line 976):
        
        # Call to join(...): (line 976)
        # Processing the call arguments (line 976)
        
        # Obtaining the type of the subscript
        
        # Call to index(...): (line 976)
        # Processing the call arguments (line 976)
        # Getting the type of 'm' (line 976)
        m_47581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 65), 'm', False)
        # Processing the call keyword arguments (line 976)
        kwargs_47582 = {}
        # Getting the type of 'path_atoms' (line 976)
        path_atoms_47579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 48), 'path_atoms', False)
        # Obtaining the member 'index' of a type (line 976)
        index_47580 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 976, 48), path_atoms_47579, 'index')
        # Calling index(args, kwargs) (line 976)
        index_call_result_47583 = invoke(stypy.reporting.localization.Localization(__file__, 976, 48), index_47580, *[m_47581], **kwargs_47582)
        
        int_47584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 976, 70), 'int')
        # Applying the binary operator '+' (line 976)
        result_add_47585 = python_operator(stypy.reporting.localization.Localization(__file__, 976, 48), '+', index_call_result_47583, int_47584)
        
        slice_47586 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 976, 36), None, result_add_47585, None)
        # Getting the type of 'path_atoms' (line 976)
        path_atoms_47587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 36), 'path_atoms', False)
        # Obtaining the member '__getitem__' of a type (line 976)
        getitem___47588 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 976, 36), path_atoms_47587, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 976)
        subscript_call_result_47589 = invoke(stypy.reporting.localization.Localization(__file__, 976, 36), getitem___47588, slice_47586)
        
        # Processing the call keyword arguments (line 976)
        kwargs_47590 = {}
        # Getting the type of 'os' (line 976)
        os_47576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 24), 'os', False)
        # Obtaining the member 'sep' of a type (line 976)
        sep_47577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 976, 24), os_47576, 'sep')
        # Obtaining the member 'join' of a type (line 976)
        join_47578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 976, 24), sep_47577, 'join')
        # Calling join(args, kwargs) (line 976)
        join_call_result_47591 = invoke(stypy.reporting.localization.Localization(__file__, 976, 24), join_47578, *[subscript_call_result_47589], **kwargs_47590)
        
        # Assigning a type to the variable 'd' (line 976)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 976, 20), 'd', join_call_result_47591)
        
        # Call to append(...): (line 977)
        # Processing the call arguments (line 977)
        # Getting the type of 'd' (line 977)
        d_47594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 42), 'd', False)
        # Processing the call keyword arguments (line 977)
        kwargs_47595 = {}
        # Getting the type of 'intel_mkl_dirs' (line 977)
        intel_mkl_dirs_47592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 20), 'intel_mkl_dirs', False)
        # Obtaining the member 'append' of a type (line 977)
        append_47593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 977, 20), intel_mkl_dirs_47592, 'append')
        # Calling append(args, kwargs) (line 977)
        append_call_result_47596 = invoke(stypy.reporting.localization.Localization(__file__, 977, 20), append_47593, *[d_47594], **kwargs_47595)
        
        # SSA join for if statement (line 975)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'paths' (line 979)
        paths_47597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 979, 17), 'paths')
        # Testing the type of a for loop iterable (line 979)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 979, 8), paths_47597)
        # Getting the type of the for loop variable (line 979)
        for_loop_var_47598 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 979, 8), paths_47597)
        # Assigning a type to the variable 'd' (line 979)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 979, 8), 'd', for_loop_var_47598)
        # SSA begins for a for statement (line 979)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 980):
        
        # Assigning a Call to a Name (line 980):
        
        # Call to glob(...): (line 980)
        # Processing the call arguments (line 980)
        
        # Call to join(...): (line 980)
        # Processing the call arguments (line 980)
        # Getting the type of 'd' (line 980)
        d_47603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 980, 37), 'd', False)
        str_47604 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 980, 40), 'str', 'mkl')
        str_47605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 980, 47), 'str', '*')
        # Processing the call keyword arguments (line 980)
        kwargs_47606 = {}
        # Getting the type of 'os' (line 980)
        os_47600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 980, 24), 'os', False)
        # Obtaining the member 'path' of a type (line 980)
        path_47601 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 980, 24), os_47600, 'path')
        # Obtaining the member 'join' of a type (line 980)
        join_47602 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 980, 24), path_47601, 'join')
        # Calling join(args, kwargs) (line 980)
        join_call_result_47607 = invoke(stypy.reporting.localization.Localization(__file__, 980, 24), join_47602, *[d_47603, str_47604, str_47605], **kwargs_47606)
        
        # Processing the call keyword arguments (line 980)
        kwargs_47608 = {}
        # Getting the type of 'glob' (line 980)
        glob_47599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 980, 19), 'glob', False)
        # Calling glob(args, kwargs) (line 980)
        glob_call_result_47609 = invoke(stypy.reporting.localization.Localization(__file__, 980, 19), glob_47599, *[join_call_result_47607], **kwargs_47608)
        
        # Assigning a type to the variable 'dirs' (line 980)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 980, 12), 'dirs', glob_call_result_47609)
        
        # Getting the type of 'dirs' (line 981)
        dirs_47610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 981, 12), 'dirs')
        
        # Call to glob(...): (line 981)
        # Processing the call arguments (line 981)
        
        # Call to join(...): (line 981)
        # Processing the call arguments (line 981)
        # Getting the type of 'd' (line 981)
        d_47615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 981, 38), 'd', False)
        str_47616 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 981, 41), 'str', 'mkl*')
        # Processing the call keyword arguments (line 981)
        kwargs_47617 = {}
        # Getting the type of 'os' (line 981)
        os_47612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 981, 25), 'os', False)
        # Obtaining the member 'path' of a type (line 981)
        path_47613 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 981, 25), os_47612, 'path')
        # Obtaining the member 'join' of a type (line 981)
        join_47614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 981, 25), path_47613, 'join')
        # Calling join(args, kwargs) (line 981)
        join_call_result_47618 = invoke(stypy.reporting.localization.Localization(__file__, 981, 25), join_47614, *[d_47615, str_47616], **kwargs_47617)
        
        # Processing the call keyword arguments (line 981)
        kwargs_47619 = {}
        # Getting the type of 'glob' (line 981)
        glob_47611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 981, 20), 'glob', False)
        # Calling glob(args, kwargs) (line 981)
        glob_call_result_47620 = invoke(stypy.reporting.localization.Localization(__file__, 981, 20), glob_47611, *[join_call_result_47618], **kwargs_47619)
        
        # Applying the binary operator '+=' (line 981)
        result_iadd_47621 = python_operator(stypy.reporting.localization.Localization(__file__, 981, 12), '+=', dirs_47610, glob_call_result_47620)
        # Assigning a type to the variable 'dirs' (line 981)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 981, 12), 'dirs', result_iadd_47621)
        
        
        # Getting the type of 'dirs' (line 982)
        dirs_47622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 21), 'dirs')
        # Testing the type of a for loop iterable (line 982)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 982, 12), dirs_47622)
        # Getting the type of the for loop variable (line 982)
        for_loop_var_47623 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 982, 12), dirs_47622)
        # Assigning a type to the variable 'd' (line 982)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 982, 12), 'd', for_loop_var_47623)
        # SSA begins for a for statement (line 982)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to isdir(...): (line 983)
        # Processing the call arguments (line 983)
        
        # Call to join(...): (line 983)
        # Processing the call arguments (line 983)
        # Getting the type of 'd' (line 983)
        d_47630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 983, 46), 'd', False)
        str_47631 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 983, 49), 'str', 'lib')
        # Processing the call keyword arguments (line 983)
        kwargs_47632 = {}
        # Getting the type of 'os' (line 983)
        os_47627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 983, 33), 'os', False)
        # Obtaining the member 'path' of a type (line 983)
        path_47628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 983, 33), os_47627, 'path')
        # Obtaining the member 'join' of a type (line 983)
        join_47629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 983, 33), path_47628, 'join')
        # Calling join(args, kwargs) (line 983)
        join_call_result_47633 = invoke(stypy.reporting.localization.Localization(__file__, 983, 33), join_47629, *[d_47630, str_47631], **kwargs_47632)
        
        # Processing the call keyword arguments (line 983)
        kwargs_47634 = {}
        # Getting the type of 'os' (line 983)
        os_47624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 983, 19), 'os', False)
        # Obtaining the member 'path' of a type (line 983)
        path_47625 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 983, 19), os_47624, 'path')
        # Obtaining the member 'isdir' of a type (line 983)
        isdir_47626 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 983, 19), path_47625, 'isdir')
        # Calling isdir(args, kwargs) (line 983)
        isdir_call_result_47635 = invoke(stypy.reporting.localization.Localization(__file__, 983, 19), isdir_47626, *[join_call_result_47633], **kwargs_47634)
        
        # Testing the type of an if condition (line 983)
        if_condition_47636 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 983, 16), isdir_call_result_47635)
        # Assigning a type to the variable 'if_condition_47636' (line 983)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 983, 16), 'if_condition_47636', if_condition_47636)
        # SSA begins for if statement (line 983)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'd' (line 984)
        d_47637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 984, 27), 'd')
        # Assigning a type to the variable 'stypy_return_type' (line 984)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 984, 20), 'stypy_return_type', d_47637)
        # SSA join for if statement (line 983)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'None' (line 985)
        None_47638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 985, 15), 'None')
        # Assigning a type to the variable 'stypy_return_type' (line 985)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 985, 8), 'stypy_return_type', None_47638)
        
        # ################# End of 'get_mkl_rootdir(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_mkl_rootdir' in the type store
        # Getting the type of 'stypy_return_type' (line 960)
        stypy_return_type_47639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_47639)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_mkl_rootdir'
        return stypy_return_type_47639


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 987, 4, False)
        # Assigning a type to the variable 'self' (line 988)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 988, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'mkl_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Call to a Name (line 988):
        
        # Assigning a Call to a Name (line 988):
        
        # Call to get_mkl_rootdir(...): (line 988)
        # Processing the call keyword arguments (line 988)
        kwargs_47642 = {}
        # Getting the type of 'self' (line 988)
        self_47640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 988, 18), 'self', False)
        # Obtaining the member 'get_mkl_rootdir' of a type (line 988)
        get_mkl_rootdir_47641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 988, 18), self_47640, 'get_mkl_rootdir')
        # Calling get_mkl_rootdir(args, kwargs) (line 988)
        get_mkl_rootdir_call_result_47643 = invoke(stypy.reporting.localization.Localization(__file__, 988, 18), get_mkl_rootdir_47641, *[], **kwargs_47642)
        
        # Assigning a type to the variable 'mklroot' (line 988)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 988, 8), 'mklroot', get_mkl_rootdir_call_result_47643)
        
        # Type idiom detected: calculating its left and rigth part (line 989)
        # Getting the type of 'mklroot' (line 989)
        mklroot_47644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 989, 11), 'mklroot')
        # Getting the type of 'None' (line 989)
        None_47645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 989, 22), 'None')
        
        (may_be_47646, more_types_in_union_47647) = may_be_none(mklroot_47644, None_47645)

        if may_be_47646:

            if more_types_in_union_47647:
                # Runtime conditional SSA (line 989)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to __init__(...): (line 990)
            # Processing the call arguments (line 990)
            # Getting the type of 'self' (line 990)
            self_47650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 33), 'self', False)
            # Processing the call keyword arguments (line 990)
            kwargs_47651 = {}
            # Getting the type of 'system_info' (line 990)
            system_info_47648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 12), 'system_info', False)
            # Obtaining the member '__init__' of a type (line 990)
            init___47649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 990, 12), system_info_47648, '__init__')
            # Calling __init__(args, kwargs) (line 990)
            init___call_result_47652 = invoke(stypy.reporting.localization.Localization(__file__, 990, 12), init___47649, *[self_47650], **kwargs_47651)
            

            if more_types_in_union_47647:
                # Runtime conditional SSA for else branch (line 989)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_47646) or more_types_in_union_47647):
            stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 992, 12))
            
            # 'from numpy.distutils.cpuinfo import cpu' statement (line 992)
            update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/distutils/')
            import_47653 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 992, 12), 'numpy.distutils.cpuinfo')

            if (type(import_47653) is not StypyTypeError):

                if (import_47653 != 'pyd_module'):
                    __import__(import_47653)
                    sys_modules_47654 = sys.modules[import_47653]
                    import_from_module(stypy.reporting.localization.Localization(__file__, 992, 12), 'numpy.distutils.cpuinfo', sys_modules_47654.module_type_store, module_type_store, ['cpu'])
                    nest_module(stypy.reporting.localization.Localization(__file__, 992, 12), __file__, sys_modules_47654, sys_modules_47654.module_type_store, module_type_store)
                else:
                    from numpy.distutils.cpuinfo import cpu

                    import_from_module(stypy.reporting.localization.Localization(__file__, 992, 12), 'numpy.distutils.cpuinfo', None, module_type_store, ['cpu'], [cpu])

            else:
                # Assigning a type to the variable 'numpy.distutils.cpuinfo' (line 992)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 992, 12), 'numpy.distutils.cpuinfo', import_47653)

            remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/distutils/')
            
            
            # Assigning a Str to a Name (line 993):
            
            # Assigning a Str to a Name (line 993):
            str_47655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 993, 16), 'str', 'mkl')
            # Assigning a type to the variable 'l' (line 993)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 993, 12), 'l', str_47655)
            
            
            # Call to is_Itanium(...): (line 994)
            # Processing the call keyword arguments (line 994)
            kwargs_47658 = {}
            # Getting the type of 'cpu' (line 994)
            cpu_47656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 15), 'cpu', False)
            # Obtaining the member 'is_Itanium' of a type (line 994)
            is_Itanium_47657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 994, 15), cpu_47656, 'is_Itanium')
            # Calling is_Itanium(args, kwargs) (line 994)
            is_Itanium_call_result_47659 = invoke(stypy.reporting.localization.Localization(__file__, 994, 15), is_Itanium_47657, *[], **kwargs_47658)
            
            # Testing the type of an if condition (line 994)
            if_condition_47660 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 994, 12), is_Itanium_call_result_47659)
            # Assigning a type to the variable 'if_condition_47660' (line 994)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 994, 12), 'if_condition_47660', if_condition_47660)
            # SSA begins for if statement (line 994)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Str to a Name (line 995):
            
            # Assigning a Str to a Name (line 995):
            str_47661 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 995, 22), 'str', '64')
            # Assigning a type to the variable 'plt' (line 995)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 995, 16), 'plt', str_47661)
            # SSA branch for the else part of an if statement (line 994)
            module_type_store.open_ssa_branch('else')
            
            
            # Call to is_Xeon(...): (line 996)
            # Processing the call keyword arguments (line 996)
            kwargs_47664 = {}
            # Getting the type of 'cpu' (line 996)
            cpu_47662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 17), 'cpu', False)
            # Obtaining the member 'is_Xeon' of a type (line 996)
            is_Xeon_47663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 996, 17), cpu_47662, 'is_Xeon')
            # Calling is_Xeon(args, kwargs) (line 996)
            is_Xeon_call_result_47665 = invoke(stypy.reporting.localization.Localization(__file__, 996, 17), is_Xeon_47663, *[], **kwargs_47664)
            
            # Testing the type of an if condition (line 996)
            if_condition_47666 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 996, 17), is_Xeon_call_result_47665)
            # Assigning a type to the variable 'if_condition_47666' (line 996)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 996, 17), 'if_condition_47666', if_condition_47666)
            # SSA begins for if statement (line 996)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Str to a Name (line 997):
            
            # Assigning a Str to a Name (line 997):
            str_47667 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 997, 22), 'str', 'intel64')
            # Assigning a type to the variable 'plt' (line 997)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 997, 16), 'plt', str_47667)
            # SSA branch for the else part of an if statement (line 996)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Str to a Name (line 999):
            
            # Assigning a Str to a Name (line 999):
            str_47668 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 999, 22), 'str', '32')
            # Assigning a type to the variable 'plt' (line 999)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 999, 16), 'plt', str_47668)
            # SSA join for if statement (line 996)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 994)
            module_type_store = module_type_store.join_ssa_context()
            
            
            
            # Getting the type of 'l' (line 1000)
            l_47669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 15), 'l')
            # Getting the type of 'self' (line 1000)
            self_47670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 24), 'self')
            # Obtaining the member '_lib_mkl' of a type (line 1000)
            _lib_mkl_47671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1000, 24), self_47670, '_lib_mkl')
            # Applying the binary operator 'notin' (line 1000)
            result_contains_47672 = python_operator(stypy.reporting.localization.Localization(__file__, 1000, 15), 'notin', l_47669, _lib_mkl_47671)
            
            # Testing the type of an if condition (line 1000)
            if_condition_47673 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1000, 12), result_contains_47672)
            # Assigning a type to the variable 'if_condition_47673' (line 1000)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1000, 12), 'if_condition_47673', if_condition_47673)
            # SSA begins for if statement (line 1000)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to insert(...): (line 1001)
            # Processing the call arguments (line 1001)
            int_47677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1001, 37), 'int')
            # Getting the type of 'l' (line 1001)
            l_47678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1001, 40), 'l', False)
            # Processing the call keyword arguments (line 1001)
            kwargs_47679 = {}
            # Getting the type of 'self' (line 1001)
            self_47674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1001, 16), 'self', False)
            # Obtaining the member '_lib_mkl' of a type (line 1001)
            _lib_mkl_47675 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1001, 16), self_47674, '_lib_mkl')
            # Obtaining the member 'insert' of a type (line 1001)
            insert_47676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1001, 16), _lib_mkl_47675, 'insert')
            # Calling insert(args, kwargs) (line 1001)
            insert_call_result_47680 = invoke(stypy.reporting.localization.Localization(__file__, 1001, 16), insert_47676, *[int_47677, l_47678], **kwargs_47679)
            
            # SSA join for if statement (line 1000)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Call to __init__(...): (line 1002)
            # Processing the call arguments (line 1002)
            # Getting the type of 'self' (line 1003)
            self_47683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 16), 'self', False)
            # Processing the call keyword arguments (line 1002)
            
            # Obtaining an instance of the builtin type 'list' (line 1004)
            list_47684 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1004, 33), 'list')
            # Adding type elements to the builtin type 'list' instance (line 1004)
            # Adding element type (line 1004)
            
            # Call to join(...): (line 1004)
            # Processing the call arguments (line 1004)
            # Getting the type of 'mklroot' (line 1004)
            mklroot_47688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 47), 'mklroot', False)
            str_47689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1004, 56), 'str', 'lib')
            # Getting the type of 'plt' (line 1004)
            plt_47690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 63), 'plt', False)
            # Processing the call keyword arguments (line 1004)
            kwargs_47691 = {}
            # Getting the type of 'os' (line 1004)
            os_47685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 34), 'os', False)
            # Obtaining the member 'path' of a type (line 1004)
            path_47686 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1004, 34), os_47685, 'path')
            # Obtaining the member 'join' of a type (line 1004)
            join_47687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1004, 34), path_47686, 'join')
            # Calling join(args, kwargs) (line 1004)
            join_call_result_47692 = invoke(stypy.reporting.localization.Localization(__file__, 1004, 34), join_47687, *[mklroot_47688, str_47689, plt_47690], **kwargs_47691)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1004, 33), list_47684, join_call_result_47692)
            
            keyword_47693 = list_47684
            
            # Obtaining an instance of the builtin type 'list' (line 1005)
            list_47694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1005, 37), 'list')
            # Adding type elements to the builtin type 'list' instance (line 1005)
            # Adding element type (line 1005)
            
            # Call to join(...): (line 1005)
            # Processing the call arguments (line 1005)
            # Getting the type of 'mklroot' (line 1005)
            mklroot_47698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 51), 'mklroot', False)
            str_47699 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1005, 60), 'str', 'include')
            # Processing the call keyword arguments (line 1005)
            kwargs_47700 = {}
            # Getting the type of 'os' (line 1005)
            os_47695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 38), 'os', False)
            # Obtaining the member 'path' of a type (line 1005)
            path_47696 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1005, 38), os_47695, 'path')
            # Obtaining the member 'join' of a type (line 1005)
            join_47697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1005, 38), path_47696, 'join')
            # Calling join(args, kwargs) (line 1005)
            join_call_result_47701 = invoke(stypy.reporting.localization.Localization(__file__, 1005, 38), join_47697, *[mklroot_47698, str_47699], **kwargs_47700)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1005, 37), list_47694, join_call_result_47701)
            
            keyword_47702 = list_47694
            kwargs_47703 = {'default_include_dirs': keyword_47702, 'default_lib_dirs': keyword_47693}
            # Getting the type of 'system_info' (line 1002)
            system_info_47681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1002, 12), 'system_info', False)
            # Obtaining the member '__init__' of a type (line 1002)
            init___47682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1002, 12), system_info_47681, '__init__')
            # Calling __init__(args, kwargs) (line 1002)
            init___call_result_47704 = invoke(stypy.reporting.localization.Localization(__file__, 1002, 12), init___47682, *[self_47683], **kwargs_47703)
            

            if (may_be_47646 and more_types_in_union_47647):
                # SSA join for if statement (line 989)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def calc_info(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'calc_info'
        module_type_store = module_type_store.open_function_context('calc_info', 1007, 4, False)
        # Assigning a type to the variable 'self' (line 1008)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1008, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        mkl_info.calc_info.__dict__.__setitem__('stypy_localization', localization)
        mkl_info.calc_info.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        mkl_info.calc_info.__dict__.__setitem__('stypy_type_store', module_type_store)
        mkl_info.calc_info.__dict__.__setitem__('stypy_function_name', 'mkl_info.calc_info')
        mkl_info.calc_info.__dict__.__setitem__('stypy_param_names_list', [])
        mkl_info.calc_info.__dict__.__setitem__('stypy_varargs_param_name', None)
        mkl_info.calc_info.__dict__.__setitem__('stypy_kwargs_param_name', None)
        mkl_info.calc_info.__dict__.__setitem__('stypy_call_defaults', defaults)
        mkl_info.calc_info.__dict__.__setitem__('stypy_call_varargs', varargs)
        mkl_info.calc_info.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        mkl_info.calc_info.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'mkl_info.calc_info', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'calc_info', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'calc_info(...)' code ##################

        
        # Assigning a Call to a Name (line 1008):
        
        # Assigning a Call to a Name (line 1008):
        
        # Call to get_lib_dirs(...): (line 1008)
        # Processing the call keyword arguments (line 1008)
        kwargs_47707 = {}
        # Getting the type of 'self' (line 1008)
        self_47705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1008, 19), 'self', False)
        # Obtaining the member 'get_lib_dirs' of a type (line 1008)
        get_lib_dirs_47706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1008, 19), self_47705, 'get_lib_dirs')
        # Calling get_lib_dirs(args, kwargs) (line 1008)
        get_lib_dirs_call_result_47708 = invoke(stypy.reporting.localization.Localization(__file__, 1008, 19), get_lib_dirs_47706, *[], **kwargs_47707)
        
        # Assigning a type to the variable 'lib_dirs' (line 1008)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1008, 8), 'lib_dirs', get_lib_dirs_call_result_47708)
        
        # Assigning a Call to a Name (line 1009):
        
        # Assigning a Call to a Name (line 1009):
        
        # Call to get_include_dirs(...): (line 1009)
        # Processing the call keyword arguments (line 1009)
        kwargs_47711 = {}
        # Getting the type of 'self' (line 1009)
        self_47709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 20), 'self', False)
        # Obtaining the member 'get_include_dirs' of a type (line 1009)
        get_include_dirs_47710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1009, 20), self_47709, 'get_include_dirs')
        # Calling get_include_dirs(args, kwargs) (line 1009)
        get_include_dirs_call_result_47712 = invoke(stypy.reporting.localization.Localization(__file__, 1009, 20), get_include_dirs_47710, *[], **kwargs_47711)
        
        # Assigning a type to the variable 'incl_dirs' (line 1009)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1009, 8), 'incl_dirs', get_include_dirs_call_result_47712)
        
        # Assigning a Call to a Name (line 1010):
        
        # Assigning a Call to a Name (line 1010):
        
        # Call to get_libs(...): (line 1010)
        # Processing the call arguments (line 1010)
        str_47715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1010, 33), 'str', 'mkl_libs')
        # Getting the type of 'self' (line 1010)
        self_47716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 45), 'self', False)
        # Obtaining the member '_lib_mkl' of a type (line 1010)
        _lib_mkl_47717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1010, 45), self_47716, '_lib_mkl')
        # Processing the call keyword arguments (line 1010)
        kwargs_47718 = {}
        # Getting the type of 'self' (line 1010)
        self_47713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 19), 'self', False)
        # Obtaining the member 'get_libs' of a type (line 1010)
        get_libs_47714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1010, 19), self_47713, 'get_libs')
        # Calling get_libs(args, kwargs) (line 1010)
        get_libs_call_result_47719 = invoke(stypy.reporting.localization.Localization(__file__, 1010, 19), get_libs_47714, *[str_47715, _lib_mkl_47717], **kwargs_47718)
        
        # Assigning a type to the variable 'mkl_libs' (line 1010)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1010, 8), 'mkl_libs', get_libs_call_result_47719)
        
        # Assigning a Call to a Name (line 1011):
        
        # Assigning a Call to a Name (line 1011):
        
        # Call to check_libs2(...): (line 1011)
        # Processing the call arguments (line 1011)
        # Getting the type of 'lib_dirs' (line 1011)
        lib_dirs_47722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1011, 32), 'lib_dirs', False)
        # Getting the type of 'mkl_libs' (line 1011)
        mkl_libs_47723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1011, 42), 'mkl_libs', False)
        # Processing the call keyword arguments (line 1011)
        kwargs_47724 = {}
        # Getting the type of 'self' (line 1011)
        self_47720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1011, 15), 'self', False)
        # Obtaining the member 'check_libs2' of a type (line 1011)
        check_libs2_47721 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1011, 15), self_47720, 'check_libs2')
        # Calling check_libs2(args, kwargs) (line 1011)
        check_libs2_call_result_47725 = invoke(stypy.reporting.localization.Localization(__file__, 1011, 15), check_libs2_47721, *[lib_dirs_47722, mkl_libs_47723], **kwargs_47724)
        
        # Assigning a type to the variable 'info' (line 1011)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1011, 8), 'info', check_libs2_call_result_47725)
        
        # Type idiom detected: calculating its left and rigth part (line 1012)
        # Getting the type of 'info' (line 1012)
        info_47726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1012, 11), 'info')
        # Getting the type of 'None' (line 1012)
        None_47727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1012, 19), 'None')
        
        (may_be_47728, more_types_in_union_47729) = may_be_none(info_47726, None_47727)

        if may_be_47728:

            if more_types_in_union_47729:
                # Runtime conditional SSA (line 1012)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'stypy_return_type' (line 1013)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1013, 12), 'stypy_return_type', types.NoneType)

            if more_types_in_union_47729:
                # SSA join for if statement (line 1012)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to dict_append(...): (line 1014)
        # Processing the call arguments (line 1014)
        # Getting the type of 'info' (line 1014)
        info_47731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1014, 20), 'info', False)
        # Processing the call keyword arguments (line 1014)
        
        # Obtaining an instance of the builtin type 'list' (line 1015)
        list_47732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1015, 34), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1015)
        # Adding element type (line 1015)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1015)
        tuple_47733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1015, 36), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1015)
        # Adding element type (line 1015)
        str_47734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1015, 36), 'str', 'SCIPY_MKL_H')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1015, 36), tuple_47733, str_47734)
        # Adding element type (line 1015)
        # Getting the type of 'None' (line 1015)
        None_47735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1015, 51), 'None', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1015, 36), tuple_47733, None_47735)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1015, 34), list_47732, tuple_47733)
        # Adding element type (line 1015)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1016)
        tuple_47736 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1016, 36), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1016)
        # Adding element type (line 1016)
        str_47737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1016, 36), 'str', 'HAVE_CBLAS')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1016, 36), tuple_47736, str_47737)
        # Adding element type (line 1016)
        # Getting the type of 'None' (line 1016)
        None_47738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1016, 50), 'None', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1016, 36), tuple_47736, None_47738)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1015, 34), list_47732, tuple_47736)
        
        keyword_47739 = list_47732
        # Getting the type of 'incl_dirs' (line 1017)
        incl_dirs_47740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 33), 'incl_dirs', False)
        keyword_47741 = incl_dirs_47740
        kwargs_47742 = {'define_macros': keyword_47739, 'include_dirs': keyword_47741}
        # Getting the type of 'dict_append' (line 1014)
        dict_append_47730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1014, 8), 'dict_append', False)
        # Calling dict_append(args, kwargs) (line 1014)
        dict_append_call_result_47743 = invoke(stypy.reporting.localization.Localization(__file__, 1014, 8), dict_append_47730, *[info_47731], **kwargs_47742)
        
        
        
        # Getting the type of 'sys' (line 1018)
        sys_47744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 11), 'sys')
        # Obtaining the member 'platform' of a type (line 1018)
        platform_47745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1018, 11), sys_47744, 'platform')
        str_47746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1018, 27), 'str', 'win32')
        # Applying the binary operator '==' (line 1018)
        result_eq_47747 = python_operator(stypy.reporting.localization.Localization(__file__, 1018, 11), '==', platform_47745, str_47746)
        
        # Testing the type of an if condition (line 1018)
        if_condition_47748 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1018, 8), result_eq_47747)
        # Assigning a type to the variable 'if_condition_47748' (line 1018)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1018, 8), 'if_condition_47748', if_condition_47748)
        # SSA begins for if statement (line 1018)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        pass
        # SSA branch for the else part of an if statement (line 1018)
        module_type_store.open_ssa_branch('else')
        
        # Call to dict_append(...): (line 1021)
        # Processing the call arguments (line 1021)
        # Getting the type of 'info' (line 1021)
        info_47750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 24), 'info', False)
        # Processing the call keyword arguments (line 1021)
        
        # Obtaining an instance of the builtin type 'list' (line 1021)
        list_47751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1021, 40), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1021)
        # Adding element type (line 1021)
        str_47752 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1021, 41), 'str', 'pthread')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1021, 40), list_47751, str_47752)
        
        keyword_47753 = list_47751
        kwargs_47754 = {'libraries': keyword_47753}
        # Getting the type of 'dict_append' (line 1021)
        dict_append_47749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 12), 'dict_append', False)
        # Calling dict_append(args, kwargs) (line 1021)
        dict_append_call_result_47755 = invoke(stypy.reporting.localization.Localization(__file__, 1021, 12), dict_append_47749, *[info_47750], **kwargs_47754)
        
        # SSA join for if statement (line 1018)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_info(...): (line 1022)
        # Processing the call keyword arguments (line 1022)
        # Getting the type of 'info' (line 1022)
        info_47758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1022, 24), 'info', False)
        kwargs_47759 = {'info_47758': info_47758}
        # Getting the type of 'self' (line 1022)
        self_47756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1022, 8), 'self', False)
        # Obtaining the member 'set_info' of a type (line 1022)
        set_info_47757 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1022, 8), self_47756, 'set_info')
        # Calling set_info(args, kwargs) (line 1022)
        set_info_call_result_47760 = invoke(stypy.reporting.localization.Localization(__file__, 1022, 8), set_info_47757, *[], **kwargs_47759)
        
        
        # ################# End of 'calc_info(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'calc_info' in the type store
        # Getting the type of 'stypy_return_type' (line 1007)
        stypy_return_type_47761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1007, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_47761)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'calc_info'
        return stypy_return_type_47761


# Assigning a type to the variable 'mkl_info' (line 955)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 955, 0), 'mkl_info', mkl_info)

# Assigning a Str to a Name (line 956):
str_47762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 956, 14), 'str', 'mkl')
# Getting the type of 'mkl_info'
mkl_info_47763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'mkl_info')
# Setting the type of the member 'section' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), mkl_info_47763, 'section', str_47762)

# Assigning a Str to a Name (line 957):
str_47764 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 957, 18), 'str', 'MKL')
# Getting the type of 'mkl_info'
mkl_info_47765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'mkl_info')
# Setting the type of the member 'dir_env_var' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), mkl_info_47765, 'dir_env_var', str_47764)

# Assigning a List to a Name (line 958):

# Obtaining an instance of the builtin type 'list' (line 958)
list_47766 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 958, 15), 'list')
# Adding type elements to the builtin type 'list' instance (line 958)
# Adding element type (line 958)
str_47767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 958, 16), 'str', 'mkl')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 958, 15), list_47766, str_47767)
# Adding element type (line 958)
str_47768 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 958, 23), 'str', 'vml')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 958, 15), list_47766, str_47768)
# Adding element type (line 958)
str_47769 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 958, 30), 'str', 'guide')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 958, 15), list_47766, str_47769)

# Getting the type of 'mkl_info'
mkl_info_47770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'mkl_info')
# Setting the type of the member '_lib_mkl' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), mkl_info_47770, '_lib_mkl', list_47766)
# Declaration of the 'lapack_mkl_info' class
# Getting the type of 'mkl_info' (line 1025)
mkl_info_47771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1025, 22), 'mkl_info')

class lapack_mkl_info(mkl_info_47771, ):

    @norecursion
    def calc_info(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'calc_info'
        module_type_store = module_type_store.open_function_context('calc_info', 1027, 4, False)
        # Assigning a type to the variable 'self' (line 1028)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1028, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        lapack_mkl_info.calc_info.__dict__.__setitem__('stypy_localization', localization)
        lapack_mkl_info.calc_info.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        lapack_mkl_info.calc_info.__dict__.__setitem__('stypy_type_store', module_type_store)
        lapack_mkl_info.calc_info.__dict__.__setitem__('stypy_function_name', 'lapack_mkl_info.calc_info')
        lapack_mkl_info.calc_info.__dict__.__setitem__('stypy_param_names_list', [])
        lapack_mkl_info.calc_info.__dict__.__setitem__('stypy_varargs_param_name', None)
        lapack_mkl_info.calc_info.__dict__.__setitem__('stypy_kwargs_param_name', None)
        lapack_mkl_info.calc_info.__dict__.__setitem__('stypy_call_defaults', defaults)
        lapack_mkl_info.calc_info.__dict__.__setitem__('stypy_call_varargs', varargs)
        lapack_mkl_info.calc_info.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        lapack_mkl_info.calc_info.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'lapack_mkl_info.calc_info', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'calc_info', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'calc_info(...)' code ##################

        
        # Assigning a Call to a Name (line 1028):
        
        # Assigning a Call to a Name (line 1028):
        
        # Call to get_info(...): (line 1028)
        # Processing the call arguments (line 1028)
        str_47773 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1028, 23), 'str', 'mkl')
        # Processing the call keyword arguments (line 1028)
        kwargs_47774 = {}
        # Getting the type of 'get_info' (line 1028)
        get_info_47772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 14), 'get_info', False)
        # Calling get_info(args, kwargs) (line 1028)
        get_info_call_result_47775 = invoke(stypy.reporting.localization.Localization(__file__, 1028, 14), get_info_47772, *[str_47773], **kwargs_47774)
        
        # Assigning a type to the variable 'mkl' (line 1028)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1028, 8), 'mkl', get_info_call_result_47775)
        
        
        # Getting the type of 'mkl' (line 1029)
        mkl_47776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 15), 'mkl')
        # Applying the 'not' unary operator (line 1029)
        result_not__47777 = python_operator(stypy.reporting.localization.Localization(__file__, 1029, 11), 'not', mkl_47776)
        
        # Testing the type of an if condition (line 1029)
        if_condition_47778 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1029, 8), result_not__47777)
        # Assigning a type to the variable 'if_condition_47778' (line 1029)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1029, 8), 'if_condition_47778', if_condition_47778)
        # SSA begins for if statement (line 1029)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1030)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1030, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1029)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'sys' (line 1031)
        sys_47779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1031, 11), 'sys')
        # Obtaining the member 'platform' of a type (line 1031)
        platform_47780 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1031, 11), sys_47779, 'platform')
        str_47781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1031, 27), 'str', 'win32')
        # Applying the binary operator '==' (line 1031)
        result_eq_47782 = python_operator(stypy.reporting.localization.Localization(__file__, 1031, 11), '==', platform_47780, str_47781)
        
        # Testing the type of an if condition (line 1031)
        if_condition_47783 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1031, 8), result_eq_47782)
        # Assigning a type to the variable 'if_condition_47783' (line 1031)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1031, 8), 'if_condition_47783', if_condition_47783)
        # SSA begins for if statement (line 1031)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1032):
        
        # Assigning a Call to a Name (line 1032):
        
        # Call to get_libs(...): (line 1032)
        # Processing the call arguments (line 1032)
        str_47786 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1032, 40), 'str', 'lapack_libs')
        
        # Obtaining an instance of the builtin type 'list' (line 1032)
        list_47787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1032, 55), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1032)
        # Adding element type (line 1032)
        str_47788 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1032, 56), 'str', 'mkl_lapack')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1032, 55), list_47787, str_47788)
        
        # Processing the call keyword arguments (line 1032)
        kwargs_47789 = {}
        # Getting the type of 'self' (line 1032)
        self_47784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1032, 26), 'self', False)
        # Obtaining the member 'get_libs' of a type (line 1032)
        get_libs_47785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1032, 26), self_47784, 'get_libs')
        # Calling get_libs(args, kwargs) (line 1032)
        get_libs_call_result_47790 = invoke(stypy.reporting.localization.Localization(__file__, 1032, 26), get_libs_47785, *[str_47786, list_47787], **kwargs_47789)
        
        # Assigning a type to the variable 'lapack_libs' (line 1032)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1032, 12), 'lapack_libs', get_libs_call_result_47790)
        # SSA branch for the else part of an if statement (line 1031)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 1034):
        
        # Assigning a Call to a Name (line 1034):
        
        # Call to get_libs(...): (line 1034)
        # Processing the call arguments (line 1034)
        str_47793 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1034, 40), 'str', 'lapack_libs')
        
        # Obtaining an instance of the builtin type 'list' (line 1035)
        list_47794 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1035, 40), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1035)
        # Adding element type (line 1035)
        str_47795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1035, 41), 'str', 'mkl_lapack32')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1035, 40), list_47794, str_47795)
        # Adding element type (line 1035)
        str_47796 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1035, 57), 'str', 'mkl_lapack64')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1035, 40), list_47794, str_47796)
        
        # Processing the call keyword arguments (line 1034)
        kwargs_47797 = {}
        # Getting the type of 'self' (line 1034)
        self_47791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 26), 'self', False)
        # Obtaining the member 'get_libs' of a type (line 1034)
        get_libs_47792 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1034, 26), self_47791, 'get_libs')
        # Calling get_libs(args, kwargs) (line 1034)
        get_libs_call_result_47798 = invoke(stypy.reporting.localization.Localization(__file__, 1034, 26), get_libs_47792, *[str_47793, list_47794], **kwargs_47797)
        
        # Assigning a type to the variable 'lapack_libs' (line 1034)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1034, 12), 'lapack_libs', get_libs_call_result_47798)
        # SSA join for if statement (line 1031)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Dict to a Name (line 1037):
        
        # Assigning a Dict to a Name (line 1037):
        
        # Obtaining an instance of the builtin type 'dict' (line 1037)
        dict_47799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1037, 15), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 1037)
        # Adding element type (key, value) (line 1037)
        str_47800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1037, 16), 'str', 'libraries')
        # Getting the type of 'lapack_libs' (line 1037)
        lapack_libs_47801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 29), 'lapack_libs')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1037, 15), dict_47799, (str_47800, lapack_libs_47801))
        
        # Assigning a type to the variable 'info' (line 1037)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1037, 8), 'info', dict_47799)
        
        # Call to dict_append(...): (line 1038)
        # Processing the call arguments (line 1038)
        # Getting the type of 'info' (line 1038)
        info_47803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 20), 'info', False)
        # Processing the call keyword arguments (line 1038)
        # Getting the type of 'mkl' (line 1038)
        mkl_47804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 28), 'mkl', False)
        kwargs_47805 = {'mkl_47804': mkl_47804}
        # Getting the type of 'dict_append' (line 1038)
        dict_append_47802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 8), 'dict_append', False)
        # Calling dict_append(args, kwargs) (line 1038)
        dict_append_call_result_47806 = invoke(stypy.reporting.localization.Localization(__file__, 1038, 8), dict_append_47802, *[info_47803], **kwargs_47805)
        
        
        # Call to set_info(...): (line 1039)
        # Processing the call keyword arguments (line 1039)
        # Getting the type of 'info' (line 1039)
        info_47809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 24), 'info', False)
        kwargs_47810 = {'info_47809': info_47809}
        # Getting the type of 'self' (line 1039)
        self_47807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 8), 'self', False)
        # Obtaining the member 'set_info' of a type (line 1039)
        set_info_47808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1039, 8), self_47807, 'set_info')
        # Calling set_info(args, kwargs) (line 1039)
        set_info_call_result_47811 = invoke(stypy.reporting.localization.Localization(__file__, 1039, 8), set_info_47808, *[], **kwargs_47810)
        
        
        # ################# End of 'calc_info(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'calc_info' in the type store
        # Getting the type of 'stypy_return_type' (line 1027)
        stypy_return_type_47812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1027, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_47812)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'calc_info'
        return stypy_return_type_47812


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1025, 0, False)
        # Assigning a type to the variable 'self' (line 1026)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1026, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'lapack_mkl_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'lapack_mkl_info' (line 1025)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1025, 0), 'lapack_mkl_info', lapack_mkl_info)
# Declaration of the 'blas_mkl_info' class
# Getting the type of 'mkl_info' (line 1042)
mkl_info_47813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 20), 'mkl_info')

class blas_mkl_info(mkl_info_47813, ):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1042, 0, False)
        # Assigning a type to the variable 'self' (line 1043)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1043, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'blas_mkl_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'blas_mkl_info' (line 1042)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1042, 0), 'blas_mkl_info', blas_mkl_info)
# Declaration of the 'atlas_info' class
# Getting the type of 'system_info' (line 1046)
system_info_47814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 17), 'system_info')

class atlas_info(system_info_47814, ):
    
    # Assigning a Str to a Name (line 1047):
    
    # Assigning a Str to a Name (line 1048):
    
    # Assigning a Name to a Name (line 1057):

    @norecursion
    def get_paths(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_paths'
        module_type_store = module_type_store.open_function_context('get_paths', 1059, 4, False)
        # Assigning a type to the variable 'self' (line 1060)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1060, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        atlas_info.get_paths.__dict__.__setitem__('stypy_localization', localization)
        atlas_info.get_paths.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        atlas_info.get_paths.__dict__.__setitem__('stypy_type_store', module_type_store)
        atlas_info.get_paths.__dict__.__setitem__('stypy_function_name', 'atlas_info.get_paths')
        atlas_info.get_paths.__dict__.__setitem__('stypy_param_names_list', ['section', 'key'])
        atlas_info.get_paths.__dict__.__setitem__('stypy_varargs_param_name', None)
        atlas_info.get_paths.__dict__.__setitem__('stypy_kwargs_param_name', None)
        atlas_info.get_paths.__dict__.__setitem__('stypy_call_defaults', defaults)
        atlas_info.get_paths.__dict__.__setitem__('stypy_call_varargs', varargs)
        atlas_info.get_paths.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        atlas_info.get_paths.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'atlas_info.get_paths', ['section', 'key'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_paths', localization, ['section', 'key'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_paths(...)' code ##################

        
        # Assigning a Call to a Name (line 1060):
        
        # Assigning a Call to a Name (line 1060):
        
        # Call to get_paths(...): (line 1060)
        # Processing the call arguments (line 1060)
        # Getting the type of 'self' (line 1060)
        self_47817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 41), 'self', False)
        # Getting the type of 'section' (line 1060)
        section_47818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 47), 'section', False)
        # Getting the type of 'key' (line 1060)
        key_47819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 56), 'key', False)
        # Processing the call keyword arguments (line 1060)
        kwargs_47820 = {}
        # Getting the type of 'system_info' (line 1060)
        system_info_47815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 19), 'system_info', False)
        # Obtaining the member 'get_paths' of a type (line 1060)
        get_paths_47816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1060, 19), system_info_47815, 'get_paths')
        # Calling get_paths(args, kwargs) (line 1060)
        get_paths_call_result_47821 = invoke(stypy.reporting.localization.Localization(__file__, 1060, 19), get_paths_47816, *[self_47817, section_47818, key_47819], **kwargs_47820)
        
        # Assigning a type to the variable 'pre_dirs' (line 1060)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1060, 8), 'pre_dirs', get_paths_call_result_47821)
        
        # Assigning a List to a Name (line 1061):
        
        # Assigning a List to a Name (line 1061):
        
        # Obtaining an instance of the builtin type 'list' (line 1061)
        list_47822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1061, 15), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1061)
        
        # Assigning a type to the variable 'dirs' (line 1061)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1061, 8), 'dirs', list_47822)
        
        # Getting the type of 'pre_dirs' (line 1062)
        pre_dirs_47823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1062, 17), 'pre_dirs')
        # Testing the type of a for loop iterable (line 1062)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1062, 8), pre_dirs_47823)
        # Getting the type of the for loop variable (line 1062)
        for_loop_var_47824 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1062, 8), pre_dirs_47823)
        # Assigning a type to the variable 'd' (line 1062)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1062, 8), 'd', for_loop_var_47824)
        # SSA begins for a for statement (line 1062)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to extend(...): (line 1063)
        # Processing the call arguments (line 1063)
        
        # Call to combine_paths(...): (line 1063)
        # Processing the call arguments (line 1063)
        # Getting the type of 'd' (line 1063)
        d_47829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1063, 43), 'd', False)
        
        # Obtaining an instance of the builtin type 'list' (line 1063)
        list_47830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1063, 46), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1063)
        # Adding element type (line 1063)
        str_47831 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1063, 47), 'str', 'atlas*')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1063, 46), list_47830, str_47831)
        # Adding element type (line 1063)
        str_47832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1063, 57), 'str', 'ATLAS*')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1063, 46), list_47830, str_47832)
        # Adding element type (line 1063)
        str_47833 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1064, 41), 'str', 'sse')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1063, 46), list_47830, str_47833)
        # Adding element type (line 1063)
        str_47834 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1064, 48), 'str', '3dnow')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1063, 46), list_47830, str_47834)
        # Adding element type (line 1063)
        str_47835 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1064, 57), 'str', 'sse2')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1063, 46), list_47830, str_47835)
        
        # Processing the call keyword arguments (line 1063)
        kwargs_47836 = {}
        # Getting the type of 'self' (line 1063)
        self_47827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1063, 24), 'self', False)
        # Obtaining the member 'combine_paths' of a type (line 1063)
        combine_paths_47828 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1063, 24), self_47827, 'combine_paths')
        # Calling combine_paths(args, kwargs) (line 1063)
        combine_paths_call_result_47837 = invoke(stypy.reporting.localization.Localization(__file__, 1063, 24), combine_paths_47828, *[d_47829, list_47830], **kwargs_47836)
        
        
        # Obtaining an instance of the builtin type 'list' (line 1064)
        list_47838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1064, 68), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1064)
        # Adding element type (line 1064)
        # Getting the type of 'd' (line 1064)
        d_47839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1064, 69), 'd', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1064, 68), list_47838, d_47839)
        
        # Applying the binary operator '+' (line 1063)
        result_add_47840 = python_operator(stypy.reporting.localization.Localization(__file__, 1063, 24), '+', combine_paths_call_result_47837, list_47838)
        
        # Processing the call keyword arguments (line 1063)
        kwargs_47841 = {}
        # Getting the type of 'dirs' (line 1063)
        dirs_47825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1063, 12), 'dirs', False)
        # Obtaining the member 'extend' of a type (line 1063)
        extend_47826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1063, 12), dirs_47825, 'extend')
        # Calling extend(args, kwargs) (line 1063)
        extend_call_result_47842 = invoke(stypy.reporting.localization.Localization(__file__, 1063, 12), extend_47826, *[result_add_47840], **kwargs_47841)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'dirs' (line 1065)
        dirs_47850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 27), 'dirs')
        comprehension_47851 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1065, 16), dirs_47850)
        # Assigning a type to the variable 'd' (line 1065)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1065, 16), 'd', comprehension_47851)
        
        # Call to isdir(...): (line 1065)
        # Processing the call arguments (line 1065)
        # Getting the type of 'd' (line 1065)
        d_47847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 49), 'd', False)
        # Processing the call keyword arguments (line 1065)
        kwargs_47848 = {}
        # Getting the type of 'os' (line 1065)
        os_47844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 35), 'os', False)
        # Obtaining the member 'path' of a type (line 1065)
        path_47845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1065, 35), os_47844, 'path')
        # Obtaining the member 'isdir' of a type (line 1065)
        isdir_47846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1065, 35), path_47845, 'isdir')
        # Calling isdir(args, kwargs) (line 1065)
        isdir_call_result_47849 = invoke(stypy.reporting.localization.Localization(__file__, 1065, 35), isdir_47846, *[d_47847], **kwargs_47848)
        
        # Getting the type of 'd' (line 1065)
        d_47843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 16), 'd')
        list_47852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1065, 16), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1065, 16), list_47852, d_47843)
        # Assigning a type to the variable 'stypy_return_type' (line 1065)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1065, 8), 'stypy_return_type', list_47852)
        
        # ################# End of 'get_paths(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_paths' in the type store
        # Getting the type of 'stypy_return_type' (line 1059)
        stypy_return_type_47853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_47853)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_paths'
        return stypy_return_type_47853


    @norecursion
    def calc_info(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'calc_info'
        module_type_store = module_type_store.open_function_context('calc_info', 1067, 4, False)
        # Assigning a type to the variable 'self' (line 1068)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1068, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        atlas_info.calc_info.__dict__.__setitem__('stypy_localization', localization)
        atlas_info.calc_info.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        atlas_info.calc_info.__dict__.__setitem__('stypy_type_store', module_type_store)
        atlas_info.calc_info.__dict__.__setitem__('stypy_function_name', 'atlas_info.calc_info')
        atlas_info.calc_info.__dict__.__setitem__('stypy_param_names_list', [])
        atlas_info.calc_info.__dict__.__setitem__('stypy_varargs_param_name', None)
        atlas_info.calc_info.__dict__.__setitem__('stypy_kwargs_param_name', None)
        atlas_info.calc_info.__dict__.__setitem__('stypy_call_defaults', defaults)
        atlas_info.calc_info.__dict__.__setitem__('stypy_call_varargs', varargs)
        atlas_info.calc_info.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        atlas_info.calc_info.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'atlas_info.calc_info', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'calc_info', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'calc_info(...)' code ##################

        
        # Assigning a Call to a Name (line 1068):
        
        # Assigning a Call to a Name (line 1068):
        
        # Call to get_lib_dirs(...): (line 1068)
        # Processing the call keyword arguments (line 1068)
        kwargs_47856 = {}
        # Getting the type of 'self' (line 1068)
        self_47854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1068, 19), 'self', False)
        # Obtaining the member 'get_lib_dirs' of a type (line 1068)
        get_lib_dirs_47855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1068, 19), self_47854, 'get_lib_dirs')
        # Calling get_lib_dirs(args, kwargs) (line 1068)
        get_lib_dirs_call_result_47857 = invoke(stypy.reporting.localization.Localization(__file__, 1068, 19), get_lib_dirs_47855, *[], **kwargs_47856)
        
        # Assigning a type to the variable 'lib_dirs' (line 1068)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1068, 8), 'lib_dirs', get_lib_dirs_call_result_47857)
        
        # Assigning a Dict to a Name (line 1069):
        
        # Assigning a Dict to a Name (line 1069):
        
        # Obtaining an instance of the builtin type 'dict' (line 1069)
        dict_47858 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1069, 15), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 1069)
        
        # Assigning a type to the variable 'info' (line 1069)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1069, 8), 'info', dict_47858)
        
        # Assigning a Call to a Name (line 1070):
        
        # Assigning a Call to a Name (line 1070):
        
        # Call to get_libs(...): (line 1070)
        # Processing the call arguments (line 1070)
        str_47861 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1070, 35), 'str', 'atlas_libs')
        # Getting the type of 'self' (line 1071)
        self_47862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1071, 35), 'self', False)
        # Obtaining the member '_lib_names' of a type (line 1071)
        _lib_names_47863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1071, 35), self_47862, '_lib_names')
        # Getting the type of 'self' (line 1071)
        self_47864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1071, 53), 'self', False)
        # Obtaining the member '_lib_atlas' of a type (line 1071)
        _lib_atlas_47865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1071, 53), self_47864, '_lib_atlas')
        # Applying the binary operator '+' (line 1071)
        result_add_47866 = python_operator(stypy.reporting.localization.Localization(__file__, 1071, 35), '+', _lib_names_47863, _lib_atlas_47865)
        
        # Processing the call keyword arguments (line 1070)
        kwargs_47867 = {}
        # Getting the type of 'self' (line 1070)
        self_47859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 21), 'self', False)
        # Obtaining the member 'get_libs' of a type (line 1070)
        get_libs_47860 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1070, 21), self_47859, 'get_libs')
        # Calling get_libs(args, kwargs) (line 1070)
        get_libs_call_result_47868 = invoke(stypy.reporting.localization.Localization(__file__, 1070, 21), get_libs_47860, *[str_47861, result_add_47866], **kwargs_47867)
        
        # Assigning a type to the variable 'atlas_libs' (line 1070)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1070, 8), 'atlas_libs', get_libs_call_result_47868)
        
        # Assigning a Call to a Name (line 1072):
        
        # Assigning a Call to a Name (line 1072):
        
        # Call to get_libs(...): (line 1072)
        # Processing the call arguments (line 1072)
        str_47871 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1072, 36), 'str', 'lapack_libs')
        # Getting the type of 'self' (line 1072)
        self_47872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1072, 51), 'self', False)
        # Obtaining the member '_lib_lapack' of a type (line 1072)
        _lib_lapack_47873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1072, 51), self_47872, '_lib_lapack')
        # Processing the call keyword arguments (line 1072)
        kwargs_47874 = {}
        # Getting the type of 'self' (line 1072)
        self_47869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1072, 22), 'self', False)
        # Obtaining the member 'get_libs' of a type (line 1072)
        get_libs_47870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1072, 22), self_47869, 'get_libs')
        # Calling get_libs(args, kwargs) (line 1072)
        get_libs_call_result_47875 = invoke(stypy.reporting.localization.Localization(__file__, 1072, 22), get_libs_47870, *[str_47871, _lib_lapack_47873], **kwargs_47874)
        
        # Assigning a type to the variable 'lapack_libs' (line 1072)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1072, 8), 'lapack_libs', get_libs_call_result_47875)
        
        # Assigning a Name to a Name (line 1073):
        
        # Assigning a Name to a Name (line 1073):
        # Getting the type of 'None' (line 1073)
        None_47876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1073, 16), 'None')
        # Assigning a type to the variable 'atlas' (line 1073)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1073, 8), 'atlas', None_47876)
        
        # Assigning a Name to a Name (line 1074):
        
        # Assigning a Name to a Name (line 1074):
        # Getting the type of 'None' (line 1074)
        None_47877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1074, 17), 'None')
        # Assigning a type to the variable 'lapack' (line 1074)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1074, 8), 'lapack', None_47877)
        
        # Assigning a Name to a Name (line 1075):
        
        # Assigning a Name to a Name (line 1075):
        # Getting the type of 'None' (line 1075)
        None_47878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1075, 18), 'None')
        # Assigning a type to the variable 'atlas_1' (line 1075)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1075, 8), 'atlas_1', None_47878)
        
        # Getting the type of 'lib_dirs' (line 1076)
        lib_dirs_47879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1076, 17), 'lib_dirs')
        # Testing the type of a for loop iterable (line 1076)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1076, 8), lib_dirs_47879)
        # Getting the type of the for loop variable (line 1076)
        for_loop_var_47880 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1076, 8), lib_dirs_47879)
        # Assigning a type to the variable 'd' (line 1076)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1076, 8), 'd', for_loop_var_47880)
        # SSA begins for a for statement (line 1076)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 1077):
        
        # Assigning a Call to a Name (line 1077):
        
        # Call to check_libs2(...): (line 1077)
        # Processing the call arguments (line 1077)
        # Getting the type of 'd' (line 1077)
        d_47883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1077, 37), 'd', False)
        # Getting the type of 'atlas_libs' (line 1077)
        atlas_libs_47884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1077, 40), 'atlas_libs', False)
        
        # Obtaining an instance of the builtin type 'list' (line 1077)
        list_47885 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1077, 52), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1077)
        
        # Processing the call keyword arguments (line 1077)
        kwargs_47886 = {}
        # Getting the type of 'self' (line 1077)
        self_47881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1077, 20), 'self', False)
        # Obtaining the member 'check_libs2' of a type (line 1077)
        check_libs2_47882 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1077, 20), self_47881, 'check_libs2')
        # Calling check_libs2(args, kwargs) (line 1077)
        check_libs2_call_result_47887 = invoke(stypy.reporting.localization.Localization(__file__, 1077, 20), check_libs2_47882, *[d_47883, atlas_libs_47884, list_47885], **kwargs_47886)
        
        # Assigning a type to the variable 'atlas' (line 1077)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1077, 12), 'atlas', check_libs2_call_result_47887)
        
        # Assigning a Call to a Name (line 1078):
        
        # Assigning a Call to a Name (line 1078):
        
        # Call to check_libs2(...): (line 1078)
        # Processing the call arguments (line 1078)
        # Getting the type of 'd' (line 1078)
        d_47890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1078, 44), 'd', False)
        
        # Obtaining an instance of the builtin type 'list' (line 1078)
        list_47891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1078, 47), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1078)
        # Adding element type (line 1078)
        str_47892 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1078, 48), 'str', 'lapack_atlas')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1078, 47), list_47891, str_47892)
        
        
        # Obtaining an instance of the builtin type 'list' (line 1078)
        list_47893 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1078, 65), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1078)
        
        # Processing the call keyword arguments (line 1078)
        kwargs_47894 = {}
        # Getting the type of 'self' (line 1078)
        self_47888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1078, 27), 'self', False)
        # Obtaining the member 'check_libs2' of a type (line 1078)
        check_libs2_47889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1078, 27), self_47888, 'check_libs2')
        # Calling check_libs2(args, kwargs) (line 1078)
        check_libs2_call_result_47895 = invoke(stypy.reporting.localization.Localization(__file__, 1078, 27), check_libs2_47889, *[d_47890, list_47891, list_47893], **kwargs_47894)
        
        # Assigning a type to the variable 'lapack_atlas' (line 1078)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1078, 12), 'lapack_atlas', check_libs2_call_result_47895)
        
        # Type idiom detected: calculating its left and rigth part (line 1079)
        # Getting the type of 'atlas' (line 1079)
        atlas_47896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1079, 12), 'atlas')
        # Getting the type of 'None' (line 1079)
        None_47897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1079, 28), 'None')
        
        (may_be_47898, more_types_in_union_47899) = may_not_be_none(atlas_47896, None_47897)

        if may_be_47898:

            if more_types_in_union_47899:
                # Runtime conditional SSA (line 1079)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a BinOp to a Name (line 1080):
            
            # Assigning a BinOp to a Name (line 1080):
            
            # Obtaining an instance of the builtin type 'list' (line 1080)
            list_47900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1080, 28), 'list')
            # Adding type elements to the builtin type 'list' instance (line 1080)
            # Adding element type (line 1080)
            # Getting the type of 'd' (line 1080)
            d_47901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 29), 'd')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1080, 28), list_47900, d_47901)
            
            
            # Call to combine_paths(...): (line 1080)
            # Processing the call arguments (line 1080)
            # Getting the type of 'd' (line 1080)
            d_47904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 53), 'd', False)
            
            # Obtaining an instance of the builtin type 'list' (line 1080)
            list_47905 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1080, 56), 'list')
            # Adding type elements to the builtin type 'list' instance (line 1080)
            # Adding element type (line 1080)
            str_47906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1080, 57), 'str', 'atlas*')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1080, 56), list_47905, str_47906)
            # Adding element type (line 1080)
            str_47907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1080, 67), 'str', 'ATLAS*')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1080, 56), list_47905, str_47907)
            
            # Processing the call keyword arguments (line 1080)
            kwargs_47908 = {}
            # Getting the type of 'self' (line 1080)
            self_47902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 34), 'self', False)
            # Obtaining the member 'combine_paths' of a type (line 1080)
            combine_paths_47903 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1080, 34), self_47902, 'combine_paths')
            # Calling combine_paths(args, kwargs) (line 1080)
            combine_paths_call_result_47909 = invoke(stypy.reporting.localization.Localization(__file__, 1080, 34), combine_paths_47903, *[d_47904, list_47905], **kwargs_47908)
            
            # Applying the binary operator '+' (line 1080)
            result_add_47910 = python_operator(stypy.reporting.localization.Localization(__file__, 1080, 28), '+', list_47900, combine_paths_call_result_47909)
            
            # Assigning a type to the variable 'lib_dirs2' (line 1080)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1080, 16), 'lib_dirs2', result_add_47910)
            
            # Assigning a Call to a Name (line 1081):
            
            # Assigning a Call to a Name (line 1081):
            
            # Call to check_libs2(...): (line 1081)
            # Processing the call arguments (line 1081)
            # Getting the type of 'lib_dirs2' (line 1081)
            lib_dirs2_47913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1081, 42), 'lib_dirs2', False)
            # Getting the type of 'lapack_libs' (line 1081)
            lapack_libs_47914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1081, 53), 'lapack_libs', False)
            
            # Obtaining an instance of the builtin type 'list' (line 1081)
            list_47915 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1081, 66), 'list')
            # Adding type elements to the builtin type 'list' instance (line 1081)
            
            # Processing the call keyword arguments (line 1081)
            kwargs_47916 = {}
            # Getting the type of 'self' (line 1081)
            self_47911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1081, 25), 'self', False)
            # Obtaining the member 'check_libs2' of a type (line 1081)
            check_libs2_47912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1081, 25), self_47911, 'check_libs2')
            # Calling check_libs2(args, kwargs) (line 1081)
            check_libs2_call_result_47917 = invoke(stypy.reporting.localization.Localization(__file__, 1081, 25), check_libs2_47912, *[lib_dirs2_47913, lapack_libs_47914, list_47915], **kwargs_47916)
            
            # Assigning a type to the variable 'lapack' (line 1081)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1081, 16), 'lapack', check_libs2_call_result_47917)
            
            # Type idiom detected: calculating its left and rigth part (line 1082)
            # Getting the type of 'lapack' (line 1082)
            lapack_47918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1082, 16), 'lapack')
            # Getting the type of 'None' (line 1082)
            None_47919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1082, 33), 'None')
            
            (may_be_47920, more_types_in_union_47921) = may_not_be_none(lapack_47918, None_47919)

            if may_be_47920:

                if more_types_in_union_47921:
                    # Runtime conditional SSA (line 1082)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store


                if more_types_in_union_47921:
                    # SSA join for if statement (line 1082)
                    module_type_store = module_type_store.join_ssa_context()


            

            if more_types_in_union_47899:
                # SSA join for if statement (line 1079)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Getting the type of 'atlas' (line 1084)
        atlas_47922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1084, 15), 'atlas')
        # Testing the type of an if condition (line 1084)
        if_condition_47923 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1084, 12), atlas_47922)
        # Assigning a type to the variable 'if_condition_47923' (line 1084)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1084, 12), 'if_condition_47923', if_condition_47923)
        # SSA begins for if statement (line 1084)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1085):
        
        # Assigning a Name to a Name (line 1085):
        # Getting the type of 'atlas' (line 1085)
        atlas_47924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 26), 'atlas')
        # Assigning a type to the variable 'atlas_1' (line 1085)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1085, 16), 'atlas_1', atlas_47924)
        # SSA join for if statement (line 1084)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to info(...): (line 1086)
        # Processing the call arguments (line 1086)
        # Getting the type of 'self' (line 1086)
        self_47927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1086, 17), 'self', False)
        # Obtaining the member '__class__' of a type (line 1086)
        class___47928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1086, 17), self_47927, '__class__')
        # Processing the call keyword arguments (line 1086)
        kwargs_47929 = {}
        # Getting the type of 'log' (line 1086)
        log_47925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1086, 8), 'log', False)
        # Obtaining the member 'info' of a type (line 1086)
        info_47926 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1086, 8), log_47925, 'info')
        # Calling info(args, kwargs) (line 1086)
        info_call_result_47930 = invoke(stypy.reporting.localization.Localization(__file__, 1086, 8), info_47926, *[class___47928], **kwargs_47929)
        
        
        # Type idiom detected: calculating its left and rigth part (line 1087)
        # Getting the type of 'atlas' (line 1087)
        atlas_47931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1087, 11), 'atlas')
        # Getting the type of 'None' (line 1087)
        None_47932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1087, 20), 'None')
        
        (may_be_47933, more_types_in_union_47934) = may_be_none(atlas_47931, None_47932)

        if may_be_47933:

            if more_types_in_union_47934:
                # Runtime conditional SSA (line 1087)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Name (line 1088):
            
            # Assigning a Name to a Name (line 1088):
            # Getting the type of 'atlas_1' (line 1088)
            atlas_1_47935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 20), 'atlas_1')
            # Assigning a type to the variable 'atlas' (line 1088)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1088, 12), 'atlas', atlas_1_47935)

            if more_types_in_union_47934:
                # SSA join for if statement (line 1087)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 1089)
        # Getting the type of 'atlas' (line 1089)
        atlas_47936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 11), 'atlas')
        # Getting the type of 'None' (line 1089)
        None_47937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 20), 'None')
        
        (may_be_47938, more_types_in_union_47939) = may_be_none(atlas_47936, None_47937)

        if may_be_47938:

            if more_types_in_union_47939:
                # Runtime conditional SSA (line 1089)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'stypy_return_type' (line 1090)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1090, 12), 'stypy_return_type', types.NoneType)

            if more_types_in_union_47939:
                # SSA join for if statement (line 1089)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 1091):
        
        # Assigning a Call to a Name (line 1091):
        
        # Call to get_include_dirs(...): (line 1091)
        # Processing the call keyword arguments (line 1091)
        kwargs_47942 = {}
        # Getting the type of 'self' (line 1091)
        self_47940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 23), 'self', False)
        # Obtaining the member 'get_include_dirs' of a type (line 1091)
        get_include_dirs_47941 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1091, 23), self_47940, 'get_include_dirs')
        # Calling get_include_dirs(args, kwargs) (line 1091)
        get_include_dirs_call_result_47943 = invoke(stypy.reporting.localization.Localization(__file__, 1091, 23), get_include_dirs_47941, *[], **kwargs_47942)
        
        # Assigning a type to the variable 'include_dirs' (line 1091)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1091, 8), 'include_dirs', get_include_dirs_call_result_47943)
        
        # Assigning a BoolOp to a Name (line 1092):
        
        # Assigning a BoolOp to a Name (line 1092):
        
        # Evaluating a boolean operation
        
        # Call to combine_paths(...): (line 1092)
        # Processing the call arguments (line 1092)
        # Getting the type of 'lib_dirs' (line 1092)
        lib_dirs_47946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1092, 32), 'lib_dirs', False)
        # Getting the type of 'include_dirs' (line 1092)
        include_dirs_47947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1092, 43), 'include_dirs', False)
        # Applying the binary operator '+' (line 1092)
        result_add_47948 = python_operator(stypy.reporting.localization.Localization(__file__, 1092, 32), '+', lib_dirs_47946, include_dirs_47947)
        
        str_47949 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1092, 57), 'str', 'cblas.h')
        # Processing the call keyword arguments (line 1092)
        kwargs_47950 = {}
        # Getting the type of 'self' (line 1092)
        self_47944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1092, 13), 'self', False)
        # Obtaining the member 'combine_paths' of a type (line 1092)
        combine_paths_47945 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1092, 13), self_47944, 'combine_paths')
        # Calling combine_paths(args, kwargs) (line 1092)
        combine_paths_call_result_47951 = invoke(stypy.reporting.localization.Localization(__file__, 1092, 13), combine_paths_47945, *[result_add_47948, str_47949], **kwargs_47950)
        
        
        # Obtaining an instance of the builtin type 'list' (line 1092)
        list_47952 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1092, 71), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1092)
        # Adding element type (line 1092)
        # Getting the type of 'None' (line 1092)
        None_47953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1092, 72), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1092, 71), list_47952, None_47953)
        
        # Applying the binary operator 'or' (line 1092)
        result_or_keyword_47954 = python_operator(stypy.reporting.localization.Localization(__file__, 1092, 13), 'or', combine_paths_call_result_47951, list_47952)
        
        # Assigning a type to the variable 'h' (line 1092)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1092, 8), 'h', result_or_keyword_47954)
        
        # Assigning a Subscript to a Name (line 1093):
        
        # Assigning a Subscript to a Name (line 1093):
        
        # Obtaining the type of the subscript
        int_47955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1093, 14), 'int')
        # Getting the type of 'h' (line 1093)
        h_47956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 12), 'h')
        # Obtaining the member '__getitem__' of a type (line 1093)
        getitem___47957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1093, 12), h_47956, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1093)
        subscript_call_result_47958 = invoke(stypy.reporting.localization.Localization(__file__, 1093, 12), getitem___47957, int_47955)
        
        # Assigning a type to the variable 'h' (line 1093)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1093, 8), 'h', subscript_call_result_47958)
        
        # Getting the type of 'h' (line 1094)
        h_47959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 11), 'h')
        # Testing the type of an if condition (line 1094)
        if_condition_47960 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1094, 8), h_47959)
        # Assigning a type to the variable 'if_condition_47960' (line 1094)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1094, 8), 'if_condition_47960', if_condition_47960)
        # SSA begins for if statement (line 1094)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1095):
        
        # Assigning a Call to a Name (line 1095):
        
        # Call to dirname(...): (line 1095)
        # Processing the call arguments (line 1095)
        # Getting the type of 'h' (line 1095)
        h_47964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1095, 32), 'h', False)
        # Processing the call keyword arguments (line 1095)
        kwargs_47965 = {}
        # Getting the type of 'os' (line 1095)
        os_47961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1095, 16), 'os', False)
        # Obtaining the member 'path' of a type (line 1095)
        path_47962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1095, 16), os_47961, 'path')
        # Obtaining the member 'dirname' of a type (line 1095)
        dirname_47963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1095, 16), path_47962, 'dirname')
        # Calling dirname(args, kwargs) (line 1095)
        dirname_call_result_47966 = invoke(stypy.reporting.localization.Localization(__file__, 1095, 16), dirname_47963, *[h_47964], **kwargs_47965)
        
        # Assigning a type to the variable 'h' (line 1095)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1095, 12), 'h', dirname_call_result_47966)
        
        # Call to dict_append(...): (line 1096)
        # Processing the call arguments (line 1096)
        # Getting the type of 'info' (line 1096)
        info_47968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1096, 24), 'info', False)
        # Processing the call keyword arguments (line 1096)
        
        # Obtaining an instance of the builtin type 'list' (line 1096)
        list_47969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1096, 43), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1096)
        # Adding element type (line 1096)
        # Getting the type of 'h' (line 1096)
        h_47970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1096, 44), 'h', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1096, 43), list_47969, h_47970)
        
        keyword_47971 = list_47969
        kwargs_47972 = {'include_dirs': keyword_47971}
        # Getting the type of 'dict_append' (line 1096)
        dict_append_47967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1096, 12), 'dict_append', False)
        # Calling dict_append(args, kwargs) (line 1096)
        dict_append_call_result_47973 = invoke(stypy.reporting.localization.Localization(__file__, 1096, 12), dict_append_47967, *[info_47968], **kwargs_47972)
        
        # SSA join for if statement (line 1094)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Str to a Subscript (line 1097):
        
        # Assigning a Str to a Subscript (line 1097):
        str_47974 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1097, 27), 'str', 'c')
        # Getting the type of 'info' (line 1097)
        info_47975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1097, 8), 'info')
        str_47976 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1097, 13), 'str', 'language')
        # Storing an element on a container (line 1097)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1097, 8), info_47975, (str_47976, str_47974))
        
        # Type idiom detected: calculating its left and rigth part (line 1098)
        # Getting the type of 'lapack' (line 1098)
        lapack_47977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1098, 8), 'lapack')
        # Getting the type of 'None' (line 1098)
        None_47978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1098, 25), 'None')
        
        (may_be_47979, more_types_in_union_47980) = may_not_be_none(lapack_47977, None_47978)

        if may_be_47979:

            if more_types_in_union_47980:
                # Runtime conditional SSA (line 1098)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to dict_append(...): (line 1099)
            # Processing the call arguments (line 1099)
            # Getting the type of 'info' (line 1099)
            info_47982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 24), 'info', False)
            # Processing the call keyword arguments (line 1099)
            # Getting the type of 'lapack' (line 1099)
            lapack_47983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 32), 'lapack', False)
            kwargs_47984 = {'lapack_47983': lapack_47983}
            # Getting the type of 'dict_append' (line 1099)
            dict_append_47981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 12), 'dict_append', False)
            # Calling dict_append(args, kwargs) (line 1099)
            dict_append_call_result_47985 = invoke(stypy.reporting.localization.Localization(__file__, 1099, 12), dict_append_47981, *[info_47982], **kwargs_47984)
            
            
            # Call to dict_append(...): (line 1100)
            # Processing the call arguments (line 1100)
            # Getting the type of 'info' (line 1100)
            info_47987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1100, 24), 'info', False)
            # Processing the call keyword arguments (line 1100)
            # Getting the type of 'atlas' (line 1100)
            atlas_47988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1100, 32), 'atlas', False)
            kwargs_47989 = {'atlas_47988': atlas_47988}
            # Getting the type of 'dict_append' (line 1100)
            dict_append_47986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1100, 12), 'dict_append', False)
            # Calling dict_append(args, kwargs) (line 1100)
            dict_append_call_result_47990 = invoke(stypy.reporting.localization.Localization(__file__, 1100, 12), dict_append_47986, *[info_47987], **kwargs_47989)
            

            if more_types_in_union_47980:
                # Runtime conditional SSA for else branch (line 1098)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_47979) or more_types_in_union_47980):
            
            
            str_47991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1101, 13), 'str', 'lapack_atlas')
            
            # Obtaining the type of the subscript
            str_47992 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1101, 37), 'str', 'libraries')
            # Getting the type of 'atlas' (line 1101)
            atlas_47993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1101, 31), 'atlas')
            # Obtaining the member '__getitem__' of a type (line 1101)
            getitem___47994 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1101, 31), atlas_47993, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1101)
            subscript_call_result_47995 = invoke(stypy.reporting.localization.Localization(__file__, 1101, 31), getitem___47994, str_47992)
            
            # Applying the binary operator 'in' (line 1101)
            result_contains_47996 = python_operator(stypy.reporting.localization.Localization(__file__, 1101, 13), 'in', str_47991, subscript_call_result_47995)
            
            # Testing the type of an if condition (line 1101)
            if_condition_47997 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1101, 13), result_contains_47996)
            # Assigning a type to the variable 'if_condition_47997' (line 1101)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1101, 13), 'if_condition_47997', if_condition_47997)
            # SSA begins for if statement (line 1101)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to dict_append(...): (line 1102)
            # Processing the call arguments (line 1102)
            # Getting the type of 'info' (line 1102)
            info_47999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1102, 24), 'info', False)
            # Processing the call keyword arguments (line 1102)
            # Getting the type of 'atlas' (line 1102)
            atlas_48000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1102, 32), 'atlas', False)
            kwargs_48001 = {'atlas_48000': atlas_48000}
            # Getting the type of 'dict_append' (line 1102)
            dict_append_47998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1102, 12), 'dict_append', False)
            # Calling dict_append(args, kwargs) (line 1102)
            dict_append_call_result_48002 = invoke(stypy.reporting.localization.Localization(__file__, 1102, 12), dict_append_47998, *[info_47999], **kwargs_48001)
            
            
            # Call to dict_append(...): (line 1103)
            # Processing the call arguments (line 1103)
            # Getting the type of 'info' (line 1103)
            info_48004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 24), 'info', False)
            # Processing the call keyword arguments (line 1103)
            
            # Obtaining an instance of the builtin type 'list' (line 1104)
            list_48005 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1104, 38), 'list')
            # Adding type elements to the builtin type 'list' instance (line 1104)
            # Adding element type (line 1104)
            
            # Obtaining an instance of the builtin type 'tuple' (line 1104)
            tuple_48006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1104, 40), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1104)
            # Adding element type (line 1104)
            str_48007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1104, 40), 'str', 'ATLAS_WITH_LAPACK_ATLAS')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1104, 40), tuple_48006, str_48007)
            # Adding element type (line 1104)
            # Getting the type of 'None' (line 1104)
            None_48008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 67), 'None', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1104, 40), tuple_48006, None_48008)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1104, 38), list_48005, tuple_48006)
            
            keyword_48009 = list_48005
            kwargs_48010 = {'define_macros': keyword_48009}
            # Getting the type of 'dict_append' (line 1103)
            dict_append_48003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 12), 'dict_append', False)
            # Calling dict_append(args, kwargs) (line 1103)
            dict_append_call_result_48011 = invoke(stypy.reporting.localization.Localization(__file__, 1103, 12), dict_append_48003, *[info_48004], **kwargs_48010)
            
            
            # Call to set_info(...): (line 1105)
            # Processing the call keyword arguments (line 1105)
            # Getting the type of 'info' (line 1105)
            info_48014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 28), 'info', False)
            kwargs_48015 = {'info_48014': info_48014}
            # Getting the type of 'self' (line 1105)
            self_48012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 12), 'self', False)
            # Obtaining the member 'set_info' of a type (line 1105)
            set_info_48013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1105, 12), self_48012, 'set_info')
            # Calling set_info(args, kwargs) (line 1105)
            set_info_call_result_48016 = invoke(stypy.reporting.localization.Localization(__file__, 1105, 12), set_info_48013, *[], **kwargs_48015)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1106)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1106, 12), 'stypy_return_type', types.NoneType)
            # SSA branch for the else part of an if statement (line 1101)
            module_type_store.open_ssa_branch('else')
            
            # Call to dict_append(...): (line 1108)
            # Processing the call arguments (line 1108)
            # Getting the type of 'info' (line 1108)
            info_48018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1108, 24), 'info', False)
            # Processing the call keyword arguments (line 1108)
            # Getting the type of 'atlas' (line 1108)
            atlas_48019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1108, 32), 'atlas', False)
            kwargs_48020 = {'atlas_48019': atlas_48019}
            # Getting the type of 'dict_append' (line 1108)
            dict_append_48017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1108, 12), 'dict_append', False)
            # Calling dict_append(args, kwargs) (line 1108)
            dict_append_call_result_48021 = invoke(stypy.reporting.localization.Localization(__file__, 1108, 12), dict_append_48017, *[info_48018], **kwargs_48020)
            
            
            # Call to dict_append(...): (line 1109)
            # Processing the call arguments (line 1109)
            # Getting the type of 'info' (line 1109)
            info_48023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 24), 'info', False)
            # Processing the call keyword arguments (line 1109)
            
            # Obtaining an instance of the builtin type 'list' (line 1109)
            list_48024 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1109, 44), 'list')
            # Adding type elements to the builtin type 'list' instance (line 1109)
            # Adding element type (line 1109)
            
            # Obtaining an instance of the builtin type 'tuple' (line 1109)
            tuple_48025 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1109, 46), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1109)
            # Adding element type (line 1109)
            str_48026 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1109, 46), 'str', 'ATLAS_WITHOUT_LAPACK')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1109, 46), tuple_48025, str_48026)
            # Adding element type (line 1109)
            # Getting the type of 'None' (line 1109)
            None_48027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 70), 'None', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1109, 46), tuple_48025, None_48027)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1109, 44), list_48024, tuple_48025)
            
            keyword_48028 = list_48024
            kwargs_48029 = {'define_macros': keyword_48028}
            # Getting the type of 'dict_append' (line 1109)
            dict_append_48022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 12), 'dict_append', False)
            # Calling dict_append(args, kwargs) (line 1109)
            dict_append_call_result_48030 = invoke(stypy.reporting.localization.Localization(__file__, 1109, 12), dict_append_48022, *[info_48023], **kwargs_48029)
            
            
            # Assigning a Str to a Name (line 1110):
            
            # Assigning a Str to a Name (line 1110):
            str_48031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1114, (-1)), 'str', '\n*********************************************************************\n    Could not find lapack library within the ATLAS installation.\n*********************************************************************\n')
            # Assigning a type to the variable 'message' (line 1110)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1110, 12), 'message', str_48031)
            
            # Call to warn(...): (line 1115)
            # Processing the call arguments (line 1115)
            # Getting the type of 'message' (line 1115)
            message_48034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 26), 'message', False)
            # Processing the call keyword arguments (line 1115)
            kwargs_48035 = {}
            # Getting the type of 'warnings' (line 1115)
            warnings_48032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 12), 'warnings', False)
            # Obtaining the member 'warn' of a type (line 1115)
            warn_48033 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1115, 12), warnings_48032, 'warn')
            # Calling warn(args, kwargs) (line 1115)
            warn_call_result_48036 = invoke(stypy.reporting.localization.Localization(__file__, 1115, 12), warn_48033, *[message_48034], **kwargs_48035)
            
            
            # Call to set_info(...): (line 1116)
            # Processing the call keyword arguments (line 1116)
            # Getting the type of 'info' (line 1116)
            info_48039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1116, 28), 'info', False)
            kwargs_48040 = {'info_48039': info_48039}
            # Getting the type of 'self' (line 1116)
            self_48037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1116, 12), 'self', False)
            # Obtaining the member 'set_info' of a type (line 1116)
            set_info_48038 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1116, 12), self_48037, 'set_info')
            # Calling set_info(args, kwargs) (line 1116)
            set_info_call_result_48041 = invoke(stypy.reporting.localization.Localization(__file__, 1116, 12), set_info_48038, *[], **kwargs_48040)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1117)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1117, 12), 'stypy_return_type', types.NoneType)
            # SSA join for if statement (line 1101)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_47979 and more_types_in_union_47980):
                # SSA join for if statement (line 1098)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Subscript to a Name (line 1120):
        
        # Assigning a Subscript to a Name (line 1120):
        
        # Obtaining the type of the subscript
        int_48042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1120, 44), 'int')
        
        # Obtaining the type of the subscript
        str_48043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1120, 28), 'str', 'library_dirs')
        # Getting the type of 'lapack' (line 1120)
        lapack_48044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 21), 'lapack')
        # Obtaining the member '__getitem__' of a type (line 1120)
        getitem___48045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1120, 21), lapack_48044, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1120)
        subscript_call_result_48046 = invoke(stypy.reporting.localization.Localization(__file__, 1120, 21), getitem___48045, str_48043)
        
        # Obtaining the member '__getitem__' of a type (line 1120)
        getitem___48047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1120, 21), subscript_call_result_48046, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1120)
        subscript_call_result_48048 = invoke(stypy.reporting.localization.Localization(__file__, 1120, 21), getitem___48047, int_48042)
        
        # Assigning a type to the variable 'lapack_dir' (line 1120)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1120, 8), 'lapack_dir', subscript_call_result_48048)
        
        # Assigning a Subscript to a Name (line 1121):
        
        # Assigning a Subscript to a Name (line 1121):
        
        # Obtaining the type of the subscript
        int_48049 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1121, 42), 'int')
        
        # Obtaining the type of the subscript
        str_48050 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1121, 29), 'str', 'libraries')
        # Getting the type of 'lapack' (line 1121)
        lapack_48051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1121, 22), 'lapack')
        # Obtaining the member '__getitem__' of a type (line 1121)
        getitem___48052 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1121, 22), lapack_48051, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1121)
        subscript_call_result_48053 = invoke(stypy.reporting.localization.Localization(__file__, 1121, 22), getitem___48052, str_48050)
        
        # Obtaining the member '__getitem__' of a type (line 1121)
        getitem___48054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1121, 22), subscript_call_result_48053, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1121)
        subscript_call_result_48055 = invoke(stypy.reporting.localization.Localization(__file__, 1121, 22), getitem___48054, int_48049)
        
        # Assigning a type to the variable 'lapack_name' (line 1121)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1121, 8), 'lapack_name', subscript_call_result_48055)
        
        # Assigning a Name to a Name (line 1122):
        
        # Assigning a Name to a Name (line 1122):
        # Getting the type of 'None' (line 1122)
        None_48056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 21), 'None')
        # Assigning a type to the variable 'lapack_lib' (line 1122)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1122, 8), 'lapack_lib', None_48056)
        
        # Assigning a List to a Name (line 1123):
        
        # Assigning a List to a Name (line 1123):
        
        # Obtaining an instance of the builtin type 'list' (line 1123)
        list_48057 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1123, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1123)
        # Adding element type (line 1123)
        str_48058 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1123, 24), 'str', 'lib')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1123, 23), list_48057, str_48058)
        
        # Assigning a type to the variable 'lib_prefixes' (line 1123)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1123, 8), 'lib_prefixes', list_48057)
        
        
        # Getting the type of 'sys' (line 1124)
        sys_48059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 11), 'sys')
        # Obtaining the member 'platform' of a type (line 1124)
        platform_48060 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1124, 11), sys_48059, 'platform')
        str_48061 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1124, 27), 'str', 'win32')
        # Applying the binary operator '==' (line 1124)
        result_eq_48062 = python_operator(stypy.reporting.localization.Localization(__file__, 1124, 11), '==', platform_48060, str_48061)
        
        # Testing the type of an if condition (line 1124)
        if_condition_48063 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1124, 8), result_eq_48062)
        # Assigning a type to the variable 'if_condition_48063' (line 1124)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1124, 8), 'if_condition_48063', if_condition_48063)
        # SSA begins for if statement (line 1124)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 1125)
        # Processing the call arguments (line 1125)
        str_48066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1125, 32), 'str', '')
        # Processing the call keyword arguments (line 1125)
        kwargs_48067 = {}
        # Getting the type of 'lib_prefixes' (line 1125)
        lib_prefixes_48064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1125, 12), 'lib_prefixes', False)
        # Obtaining the member 'append' of a type (line 1125)
        append_48065 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1125, 12), lib_prefixes_48064, 'append')
        # Calling append(args, kwargs) (line 1125)
        append_call_result_48068 = invoke(stypy.reporting.localization.Localization(__file__, 1125, 12), append_48065, *[str_48066], **kwargs_48067)
        
        # SSA join for if statement (line 1124)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to library_extensions(...): (line 1126)
        # Processing the call keyword arguments (line 1126)
        kwargs_48071 = {}
        # Getting the type of 'self' (line 1126)
        self_48069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 17), 'self', False)
        # Obtaining the member 'library_extensions' of a type (line 1126)
        library_extensions_48070 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 17), self_48069, 'library_extensions')
        # Calling library_extensions(args, kwargs) (line 1126)
        library_extensions_call_result_48072 = invoke(stypy.reporting.localization.Localization(__file__, 1126, 17), library_extensions_48070, *[], **kwargs_48071)
        
        # Testing the type of a for loop iterable (line 1126)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1126, 8), library_extensions_call_result_48072)
        # Getting the type of the for loop variable (line 1126)
        for_loop_var_48073 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1126, 8), library_extensions_call_result_48072)
        # Assigning a type to the variable 'e' (line 1126)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1126, 8), 'e', for_loop_var_48073)
        # SSA begins for a for statement (line 1126)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Getting the type of 'lib_prefixes' (line 1127)
        lib_prefixes_48074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 26), 'lib_prefixes')
        # Testing the type of a for loop iterable (line 1127)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1127, 12), lib_prefixes_48074)
        # Getting the type of the for loop variable (line 1127)
        for_loop_var_48075 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1127, 12), lib_prefixes_48074)
        # Assigning a type to the variable 'prefix' (line 1127)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1127, 12), 'prefix', for_loop_var_48075)
        # SSA begins for a for statement (line 1127)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 1128):
        
        # Assigning a Call to a Name (line 1128):
        
        # Call to join(...): (line 1128)
        # Processing the call arguments (line 1128)
        # Getting the type of 'lapack_dir' (line 1128)
        lapack_dir_48079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 34), 'lapack_dir', False)
        # Getting the type of 'prefix' (line 1128)
        prefix_48080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 46), 'prefix', False)
        # Getting the type of 'lapack_name' (line 1128)
        lapack_name_48081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 55), 'lapack_name', False)
        # Applying the binary operator '+' (line 1128)
        result_add_48082 = python_operator(stypy.reporting.localization.Localization(__file__, 1128, 46), '+', prefix_48080, lapack_name_48081)
        
        # Getting the type of 'e' (line 1128)
        e_48083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 69), 'e', False)
        # Applying the binary operator '+' (line 1128)
        result_add_48084 = python_operator(stypy.reporting.localization.Localization(__file__, 1128, 67), '+', result_add_48082, e_48083)
        
        # Processing the call keyword arguments (line 1128)
        kwargs_48085 = {}
        # Getting the type of 'os' (line 1128)
        os_48076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 21), 'os', False)
        # Obtaining the member 'path' of a type (line 1128)
        path_48077 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1128, 21), os_48076, 'path')
        # Obtaining the member 'join' of a type (line 1128)
        join_48078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1128, 21), path_48077, 'join')
        # Calling join(args, kwargs) (line 1128)
        join_call_result_48086 = invoke(stypy.reporting.localization.Localization(__file__, 1128, 21), join_48078, *[lapack_dir_48079, result_add_48084], **kwargs_48085)
        
        # Assigning a type to the variable 'fn' (line 1128)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1128, 16), 'fn', join_call_result_48086)
        
        
        # Call to exists(...): (line 1129)
        # Processing the call arguments (line 1129)
        # Getting the type of 'fn' (line 1129)
        fn_48090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 34), 'fn', False)
        # Processing the call keyword arguments (line 1129)
        kwargs_48091 = {}
        # Getting the type of 'os' (line 1129)
        os_48087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 19), 'os', False)
        # Obtaining the member 'path' of a type (line 1129)
        path_48088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1129, 19), os_48087, 'path')
        # Obtaining the member 'exists' of a type (line 1129)
        exists_48089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1129, 19), path_48088, 'exists')
        # Calling exists(args, kwargs) (line 1129)
        exists_call_result_48092 = invoke(stypy.reporting.localization.Localization(__file__, 1129, 19), exists_48089, *[fn_48090], **kwargs_48091)
        
        # Testing the type of an if condition (line 1129)
        if_condition_48093 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1129, 16), exists_call_result_48092)
        # Assigning a type to the variable 'if_condition_48093' (line 1129)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1129, 16), 'if_condition_48093', if_condition_48093)
        # SSA begins for if statement (line 1129)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1130):
        
        # Assigning a Name to a Name (line 1130):
        # Getting the type of 'fn' (line 1130)
        fn_48094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 33), 'fn')
        # Assigning a type to the variable 'lapack_lib' (line 1130)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1130, 20), 'lapack_lib', fn_48094)
        # SSA join for if statement (line 1129)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'lapack_lib' (line 1132)
        lapack_lib_48095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 15), 'lapack_lib')
        # Testing the type of an if condition (line 1132)
        if_condition_48096 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1132, 12), lapack_lib_48095)
        # Assigning a type to the variable 'if_condition_48096' (line 1132)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1132, 12), 'if_condition_48096', if_condition_48096)
        # SSA begins for if statement (line 1132)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA join for if statement (line 1132)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 1134)
        # Getting the type of 'lapack_lib' (line 1134)
        lapack_lib_48097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 8), 'lapack_lib')
        # Getting the type of 'None' (line 1134)
        None_48098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 29), 'None')
        
        (may_be_48099, more_types_in_union_48100) = may_not_be_none(lapack_lib_48097, None_48098)

        if may_be_48099:

            if more_types_in_union_48100:
                # Runtime conditional SSA (line 1134)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 1135):
            
            # Assigning a Subscript to a Name (line 1135):
            
            # Obtaining the type of the subscript
            int_48101 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1135, 37), 'int')
            
            # Call to stat(...): (line 1135)
            # Processing the call arguments (line 1135)
            # Getting the type of 'lapack_lib' (line 1135)
            lapack_lib_48104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 25), 'lapack_lib', False)
            # Processing the call keyword arguments (line 1135)
            kwargs_48105 = {}
            # Getting the type of 'os' (line 1135)
            os_48102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 17), 'os', False)
            # Obtaining the member 'stat' of a type (line 1135)
            stat_48103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1135, 17), os_48102, 'stat')
            # Calling stat(args, kwargs) (line 1135)
            stat_call_result_48106 = invoke(stypy.reporting.localization.Localization(__file__, 1135, 17), stat_48103, *[lapack_lib_48104], **kwargs_48105)
            
            # Obtaining the member '__getitem__' of a type (line 1135)
            getitem___48107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1135, 17), stat_call_result_48106, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1135)
            subscript_call_result_48108 = invoke(stypy.reporting.localization.Localization(__file__, 1135, 17), getitem___48107, int_48101)
            
            # Assigning a type to the variable 'sz' (line 1135)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1135, 12), 'sz', subscript_call_result_48108)
            
            
            # Getting the type of 'sz' (line 1136)
            sz_48109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 15), 'sz')
            int_48110 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1136, 21), 'int')
            int_48111 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1136, 28), 'int')
            # Applying the binary operator '*' (line 1136)
            result_mul_48112 = python_operator(stypy.reporting.localization.Localization(__file__, 1136, 21), '*', int_48110, int_48111)
            
            # Applying the binary operator '<=' (line 1136)
            result_le_48113 = python_operator(stypy.reporting.localization.Localization(__file__, 1136, 15), '<=', sz_48109, result_mul_48112)
            
            # Testing the type of an if condition (line 1136)
            if_condition_48114 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1136, 12), result_le_48113)
            # Assigning a type to the variable 'if_condition_48114' (line 1136)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1136, 12), 'if_condition_48114', if_condition_48114)
            # SSA begins for if statement (line 1136)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a BinOp to a Name (line 1137):
            
            # Assigning a BinOp to a Name (line 1137):
            str_48115 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1145, (-1)), 'str', '\n*********************************************************************\n    Lapack library (from ATLAS) is probably incomplete:\n      size of %s is %sk (expected >4000k)\n\n    Follow the instructions in the KNOWN PROBLEMS section of the file\n    numpy/INSTALL.txt.\n*********************************************************************\n')
            
            # Obtaining an instance of the builtin type 'tuple' (line 1145)
            tuple_48116 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1145, 7), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1145)
            # Adding element type (line 1145)
            # Getting the type of 'lapack_lib' (line 1145)
            lapack_lib_48117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 7), 'lapack_lib')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1145, 7), tuple_48116, lapack_lib_48117)
            # Adding element type (line 1145)
            # Getting the type of 'sz' (line 1145)
            sz_48118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 19), 'sz')
            int_48119 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1145, 24), 'int')
            # Applying the binary operator 'div' (line 1145)
            result_div_48120 = python_operator(stypy.reporting.localization.Localization(__file__, 1145, 19), 'div', sz_48118, int_48119)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1145, 7), tuple_48116, result_div_48120)
            
            # Applying the binary operator '%' (line 1145)
            result_mod_48121 = python_operator(stypy.reporting.localization.Localization(__file__, 1145, (-1)), '%', str_48115, tuple_48116)
            
            # Assigning a type to the variable 'message' (line 1137)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1137, 16), 'message', result_mod_48121)
            
            # Call to warn(...): (line 1146)
            # Processing the call arguments (line 1146)
            # Getting the type of 'message' (line 1146)
            message_48124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 30), 'message', False)
            # Processing the call keyword arguments (line 1146)
            kwargs_48125 = {}
            # Getting the type of 'warnings' (line 1146)
            warnings_48122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 16), 'warnings', False)
            # Obtaining the member 'warn' of a type (line 1146)
            warn_48123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1146, 16), warnings_48122, 'warn')
            # Calling warn(args, kwargs) (line 1146)
            warn_call_result_48126 = invoke(stypy.reporting.localization.Localization(__file__, 1146, 16), warn_48123, *[message_48124], **kwargs_48125)
            
            # SSA branch for the else part of an if statement (line 1136)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Str to a Subscript (line 1148):
            
            # Assigning a Str to a Subscript (line 1148):
            str_48127 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1148, 35), 'str', 'f77')
            # Getting the type of 'info' (line 1148)
            info_48128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 16), 'info')
            str_48129 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1148, 21), 'str', 'language')
            # Storing an element on a container (line 1148)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1148, 16), info_48128, (str_48129, str_48127))
            # SSA join for if statement (line 1136)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_48100:
                # SSA join for if statement (line 1134)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Tuple (line 1150):
        
        # Assigning a Call to a Name:
        
        # Call to get_atlas_version(...): (line 1150)
        # Processing the call keyword arguments (line 1150)
        # Getting the type of 'atlas' (line 1150)
        atlas_48131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 62), 'atlas', False)
        kwargs_48132 = {'atlas_48131': atlas_48131}
        # Getting the type of 'get_atlas_version' (line 1150)
        get_atlas_version_48130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 42), 'get_atlas_version', False)
        # Calling get_atlas_version(args, kwargs) (line 1150)
        get_atlas_version_call_result_48133 = invoke(stypy.reporting.localization.Localization(__file__, 1150, 42), get_atlas_version_48130, *[], **kwargs_48132)
        
        # Assigning a type to the variable 'call_assignment_45336' (line 1150)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1150, 8), 'call_assignment_45336', get_atlas_version_call_result_48133)
        
        # Assigning a Call to a Name (line 1150):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_48136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1150, 8), 'int')
        # Processing the call keyword arguments
        kwargs_48137 = {}
        # Getting the type of 'call_assignment_45336' (line 1150)
        call_assignment_45336_48134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 8), 'call_assignment_45336', False)
        # Obtaining the member '__getitem__' of a type (line 1150)
        getitem___48135 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1150, 8), call_assignment_45336_48134, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_48138 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___48135, *[int_48136], **kwargs_48137)
        
        # Assigning a type to the variable 'call_assignment_45337' (line 1150)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1150, 8), 'call_assignment_45337', getitem___call_result_48138)
        
        # Assigning a Name to a Name (line 1150):
        # Getting the type of 'call_assignment_45337' (line 1150)
        call_assignment_45337_48139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 8), 'call_assignment_45337')
        # Assigning a type to the variable 'atlas_version' (line 1150)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1150, 8), 'atlas_version', call_assignment_45337_48139)
        
        # Assigning a Call to a Name (line 1150):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_48142 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1150, 8), 'int')
        # Processing the call keyword arguments
        kwargs_48143 = {}
        # Getting the type of 'call_assignment_45336' (line 1150)
        call_assignment_45336_48140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 8), 'call_assignment_45336', False)
        # Obtaining the member '__getitem__' of a type (line 1150)
        getitem___48141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1150, 8), call_assignment_45336_48140, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_48144 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___48141, *[int_48142], **kwargs_48143)
        
        # Assigning a type to the variable 'call_assignment_45338' (line 1150)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1150, 8), 'call_assignment_45338', getitem___call_result_48144)
        
        # Assigning a Name to a Name (line 1150):
        # Getting the type of 'call_assignment_45338' (line 1150)
        call_assignment_45338_48145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 8), 'call_assignment_45338')
        # Assigning a type to the variable 'atlas_extra_info' (line 1150)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1150, 23), 'atlas_extra_info', call_assignment_45338_48145)
        
        # Call to dict_append(...): (line 1151)
        # Processing the call arguments (line 1151)
        # Getting the type of 'info' (line 1151)
        info_48147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1151, 20), 'info', False)
        # Processing the call keyword arguments (line 1151)
        # Getting the type of 'atlas_extra_info' (line 1151)
        atlas_extra_info_48148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1151, 28), 'atlas_extra_info', False)
        kwargs_48149 = {'atlas_extra_info_48148': atlas_extra_info_48148}
        # Getting the type of 'dict_append' (line 1151)
        dict_append_48146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1151, 8), 'dict_append', False)
        # Calling dict_append(args, kwargs) (line 1151)
        dict_append_call_result_48150 = invoke(stypy.reporting.localization.Localization(__file__, 1151, 8), dict_append_48146, *[info_48147], **kwargs_48149)
        
        
        # Call to set_info(...): (line 1153)
        # Processing the call keyword arguments (line 1153)
        # Getting the type of 'info' (line 1153)
        info_48153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 24), 'info', False)
        kwargs_48154 = {'info_48153': info_48153}
        # Getting the type of 'self' (line 1153)
        self_48151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 8), 'self', False)
        # Obtaining the member 'set_info' of a type (line 1153)
        set_info_48152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1153, 8), self_48151, 'set_info')
        # Calling set_info(args, kwargs) (line 1153)
        set_info_call_result_48155 = invoke(stypy.reporting.localization.Localization(__file__, 1153, 8), set_info_48152, *[], **kwargs_48154)
        
        
        # ################# End of 'calc_info(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'calc_info' in the type store
        # Getting the type of 'stypy_return_type' (line 1067)
        stypy_return_type_48156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_48156)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'calc_info'
        return stypy_return_type_48156


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1046, 0, False)
        # Assigning a type to the variable 'self' (line 1047)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1047, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'atlas_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'atlas_info' (line 1046)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1046, 0), 'atlas_info', atlas_info)

# Assigning a Str to a Name (line 1047):
str_48157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1047, 14), 'str', 'atlas')
# Getting the type of 'atlas_info'
atlas_info_48158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'atlas_info')
# Setting the type of the member 'section' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), atlas_info_48158, 'section', str_48157)

# Assigning a Str to a Name (line 1048):
str_48159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1048, 18), 'str', 'ATLAS')
# Getting the type of 'atlas_info'
atlas_info_48160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'atlas_info')
# Setting the type of the member 'dir_env_var' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), atlas_info_48160, 'dir_env_var', str_48159)

# Assigning a List to a Name (line 1049):

# Obtaining an instance of the builtin type 'list' (line 1049)
list_48161 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1049, 17), 'list')
# Adding type elements to the builtin type 'list' instance (line 1049)
# Adding element type (line 1049)
str_48162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1049, 18), 'str', 'f77blas')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1049, 17), list_48161, str_48162)
# Adding element type (line 1049)
str_48163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1049, 29), 'str', 'cblas')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1049, 17), list_48161, str_48163)

# Getting the type of 'atlas_info'
atlas_info_48164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'atlas_info')
# Setting the type of the member '_lib_names' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), atlas_info_48164, '_lib_names', list_48161)

# Assigning a List to a Name (line 1049):



# Obtaining the type of the subscript
int_48165 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1050, 21), 'int')
slice_48166 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1050, 7), None, int_48165, None)
# Getting the type of 'sys' (line 1050)
sys_48167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 7), 'sys')
# Obtaining the member 'platform' of a type (line 1050)
platform_48168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1050, 7), sys_48167, 'platform')
# Obtaining the member '__getitem__' of a type (line 1050)
getitem___48169 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1050, 7), platform_48168, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 1050)
subscript_call_result_48170 = invoke(stypy.reporting.localization.Localization(__file__, 1050, 7), getitem___48169, slice_48166)

str_48171 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1050, 27), 'str', 'freebsd')
# Applying the binary operator '==' (line 1050)
result_eq_48172 = python_operator(stypy.reporting.localization.Localization(__file__, 1050, 7), '==', subscript_call_result_48170, str_48171)

# Testing the type of an if condition (line 1050)
if_condition_48173 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1050, 4), result_eq_48172)
# Assigning a type to the variable 'if_condition_48173' (line 1050)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1050, 4), 'if_condition_48173', if_condition_48173)
# SSA begins for if statement (line 1050)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Assigning a List to a Name (line 1051):

# Assigning a List to a Name (line 1051):

# Obtaining an instance of the builtin type 'list' (line 1051)
list_48174 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1051, 21), 'list')
# Adding type elements to the builtin type 'list' instance (line 1051)
# Adding element type (line 1051)
str_48175 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1051, 22), 'str', 'atlas_r')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1051, 21), list_48174, str_48175)

# Assigning a type to the variable '_lib_atlas' (line 1051)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1051, 8), '_lib_atlas', list_48174)

# Assigning a List to a Name (line 1052):

# Assigning a List to a Name (line 1052):

# Obtaining an instance of the builtin type 'list' (line 1052)
list_48176 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1052, 22), 'list')
# Adding type elements to the builtin type 'list' instance (line 1052)
# Adding element type (line 1052)
str_48177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1052, 23), 'str', 'alapack_r')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1052, 22), list_48176, str_48177)

# Assigning a type to the variable '_lib_lapack' (line 1052)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1052, 8), '_lib_lapack', list_48176)
# SSA branch for the else part of an if statement (line 1050)
module_type_store.open_ssa_branch('else')

# Assigning a List to a Name (line 1054):

# Assigning a List to a Name (line 1054):

# Obtaining an instance of the builtin type 'list' (line 1054)
list_48178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1054, 21), 'list')
# Adding type elements to the builtin type 'list' instance (line 1054)
# Adding element type (line 1054)
str_48179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1054, 22), 'str', 'atlas')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1054, 21), list_48178, str_48179)

# Assigning a type to the variable '_lib_atlas' (line 1054)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1054, 8), '_lib_atlas', list_48178)

# Assigning a List to a Name (line 1055):

# Assigning a List to a Name (line 1055):

# Obtaining an instance of the builtin type 'list' (line 1055)
list_48180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1055, 22), 'list')
# Adding type elements to the builtin type 'list' instance (line 1055)
# Adding element type (line 1055)
str_48181 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1055, 23), 'str', 'lapack')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1055, 22), list_48180, str_48181)

# Assigning a type to the variable '_lib_lapack' (line 1055)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1055, 8), '_lib_lapack', list_48180)
# SSA join for if statement (line 1050)
module_type_store = module_type_store.join_ssa_context()


# Assigning a Name to a Name (line 1057):
# Getting the type of 'AtlasNotFoundError' (line 1057)
AtlasNotFoundError_48182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 20), 'AtlasNotFoundError')
# Getting the type of 'atlas_info'
atlas_info_48183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'atlas_info')
# Setting the type of the member 'notfounderror' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), atlas_info_48183, 'notfounderror', AtlasNotFoundError_48182)
# Declaration of the 'atlas_blas_info' class
# Getting the type of 'atlas_info' (line 1156)
atlas_info_48184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1156, 22), 'atlas_info')

class atlas_blas_info(atlas_info_48184, ):
    
    # Assigning a List to a Name (line 1157):

    @norecursion
    def calc_info(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'calc_info'
        module_type_store = module_type_store.open_function_context('calc_info', 1159, 4, False)
        # Assigning a type to the variable 'self' (line 1160)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1160, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        atlas_blas_info.calc_info.__dict__.__setitem__('stypy_localization', localization)
        atlas_blas_info.calc_info.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        atlas_blas_info.calc_info.__dict__.__setitem__('stypy_type_store', module_type_store)
        atlas_blas_info.calc_info.__dict__.__setitem__('stypy_function_name', 'atlas_blas_info.calc_info')
        atlas_blas_info.calc_info.__dict__.__setitem__('stypy_param_names_list', [])
        atlas_blas_info.calc_info.__dict__.__setitem__('stypy_varargs_param_name', None)
        atlas_blas_info.calc_info.__dict__.__setitem__('stypy_kwargs_param_name', None)
        atlas_blas_info.calc_info.__dict__.__setitem__('stypy_call_defaults', defaults)
        atlas_blas_info.calc_info.__dict__.__setitem__('stypy_call_varargs', varargs)
        atlas_blas_info.calc_info.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        atlas_blas_info.calc_info.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'atlas_blas_info.calc_info', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'calc_info', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'calc_info(...)' code ##################

        
        # Assigning a Call to a Name (line 1160):
        
        # Assigning a Call to a Name (line 1160):
        
        # Call to get_lib_dirs(...): (line 1160)
        # Processing the call keyword arguments (line 1160)
        kwargs_48187 = {}
        # Getting the type of 'self' (line 1160)
        self_48185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1160, 19), 'self', False)
        # Obtaining the member 'get_lib_dirs' of a type (line 1160)
        get_lib_dirs_48186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1160, 19), self_48185, 'get_lib_dirs')
        # Calling get_lib_dirs(args, kwargs) (line 1160)
        get_lib_dirs_call_result_48188 = invoke(stypy.reporting.localization.Localization(__file__, 1160, 19), get_lib_dirs_48186, *[], **kwargs_48187)
        
        # Assigning a type to the variable 'lib_dirs' (line 1160)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1160, 8), 'lib_dirs', get_lib_dirs_call_result_48188)
        
        # Assigning a Dict to a Name (line 1161):
        
        # Assigning a Dict to a Name (line 1161):
        
        # Obtaining an instance of the builtin type 'dict' (line 1161)
        dict_48189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1161, 15), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 1161)
        
        # Assigning a type to the variable 'info' (line 1161)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1161, 8), 'info', dict_48189)
        
        # Assigning a Call to a Name (line 1162):
        
        # Assigning a Call to a Name (line 1162):
        
        # Call to get_libs(...): (line 1162)
        # Processing the call arguments (line 1162)
        str_48192 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1162, 35), 'str', 'atlas_libs')
        # Getting the type of 'self' (line 1163)
        self_48193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 35), 'self', False)
        # Obtaining the member '_lib_names' of a type (line 1163)
        _lib_names_48194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1163, 35), self_48193, '_lib_names')
        # Getting the type of 'self' (line 1163)
        self_48195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 53), 'self', False)
        # Obtaining the member '_lib_atlas' of a type (line 1163)
        _lib_atlas_48196 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1163, 53), self_48195, '_lib_atlas')
        # Applying the binary operator '+' (line 1163)
        result_add_48197 = python_operator(stypy.reporting.localization.Localization(__file__, 1163, 35), '+', _lib_names_48194, _lib_atlas_48196)
        
        # Processing the call keyword arguments (line 1162)
        kwargs_48198 = {}
        # Getting the type of 'self' (line 1162)
        self_48190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1162, 21), 'self', False)
        # Obtaining the member 'get_libs' of a type (line 1162)
        get_libs_48191 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1162, 21), self_48190, 'get_libs')
        # Calling get_libs(args, kwargs) (line 1162)
        get_libs_call_result_48199 = invoke(stypy.reporting.localization.Localization(__file__, 1162, 21), get_libs_48191, *[str_48192, result_add_48197], **kwargs_48198)
        
        # Assigning a type to the variable 'atlas_libs' (line 1162)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1162, 8), 'atlas_libs', get_libs_call_result_48199)
        
        # Assigning a Call to a Name (line 1164):
        
        # Assigning a Call to a Name (line 1164):
        
        # Call to check_libs2(...): (line 1164)
        # Processing the call arguments (line 1164)
        # Getting the type of 'lib_dirs' (line 1164)
        lib_dirs_48202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 33), 'lib_dirs', False)
        # Getting the type of 'atlas_libs' (line 1164)
        atlas_libs_48203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 43), 'atlas_libs', False)
        
        # Obtaining an instance of the builtin type 'list' (line 1164)
        list_48204 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1164, 55), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1164)
        
        # Processing the call keyword arguments (line 1164)
        kwargs_48205 = {}
        # Getting the type of 'self' (line 1164)
        self_48200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 16), 'self', False)
        # Obtaining the member 'check_libs2' of a type (line 1164)
        check_libs2_48201 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1164, 16), self_48200, 'check_libs2')
        # Calling check_libs2(args, kwargs) (line 1164)
        check_libs2_call_result_48206 = invoke(stypy.reporting.localization.Localization(__file__, 1164, 16), check_libs2_48201, *[lib_dirs_48202, atlas_libs_48203, list_48204], **kwargs_48205)
        
        # Assigning a type to the variable 'atlas' (line 1164)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1164, 8), 'atlas', check_libs2_call_result_48206)
        
        # Type idiom detected: calculating its left and rigth part (line 1165)
        # Getting the type of 'atlas' (line 1165)
        atlas_48207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 11), 'atlas')
        # Getting the type of 'None' (line 1165)
        None_48208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 20), 'None')
        
        (may_be_48209, more_types_in_union_48210) = may_be_none(atlas_48207, None_48208)

        if may_be_48209:

            if more_types_in_union_48210:
                # Runtime conditional SSA (line 1165)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'stypy_return_type' (line 1166)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1166, 12), 'stypy_return_type', types.NoneType)

            if more_types_in_union_48210:
                # SSA join for if statement (line 1165)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 1167):
        
        # Assigning a Call to a Name (line 1167):
        
        # Call to get_include_dirs(...): (line 1167)
        # Processing the call keyword arguments (line 1167)
        kwargs_48213 = {}
        # Getting the type of 'self' (line 1167)
        self_48211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1167, 23), 'self', False)
        # Obtaining the member 'get_include_dirs' of a type (line 1167)
        get_include_dirs_48212 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1167, 23), self_48211, 'get_include_dirs')
        # Calling get_include_dirs(args, kwargs) (line 1167)
        get_include_dirs_call_result_48214 = invoke(stypy.reporting.localization.Localization(__file__, 1167, 23), get_include_dirs_48212, *[], **kwargs_48213)
        
        # Assigning a type to the variable 'include_dirs' (line 1167)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1167, 8), 'include_dirs', get_include_dirs_call_result_48214)
        
        # Assigning a BoolOp to a Name (line 1168):
        
        # Assigning a BoolOp to a Name (line 1168):
        
        # Evaluating a boolean operation
        
        # Call to combine_paths(...): (line 1168)
        # Processing the call arguments (line 1168)
        # Getting the type of 'lib_dirs' (line 1168)
        lib_dirs_48217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1168, 32), 'lib_dirs', False)
        # Getting the type of 'include_dirs' (line 1168)
        include_dirs_48218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1168, 43), 'include_dirs', False)
        # Applying the binary operator '+' (line 1168)
        result_add_48219 = python_operator(stypy.reporting.localization.Localization(__file__, 1168, 32), '+', lib_dirs_48217, include_dirs_48218)
        
        str_48220 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1168, 57), 'str', 'cblas.h')
        # Processing the call keyword arguments (line 1168)
        kwargs_48221 = {}
        # Getting the type of 'self' (line 1168)
        self_48215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1168, 13), 'self', False)
        # Obtaining the member 'combine_paths' of a type (line 1168)
        combine_paths_48216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1168, 13), self_48215, 'combine_paths')
        # Calling combine_paths(args, kwargs) (line 1168)
        combine_paths_call_result_48222 = invoke(stypy.reporting.localization.Localization(__file__, 1168, 13), combine_paths_48216, *[result_add_48219, str_48220], **kwargs_48221)
        
        
        # Obtaining an instance of the builtin type 'list' (line 1168)
        list_48223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1168, 71), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1168)
        # Adding element type (line 1168)
        # Getting the type of 'None' (line 1168)
        None_48224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1168, 72), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1168, 71), list_48223, None_48224)
        
        # Applying the binary operator 'or' (line 1168)
        result_or_keyword_48225 = python_operator(stypy.reporting.localization.Localization(__file__, 1168, 13), 'or', combine_paths_call_result_48222, list_48223)
        
        # Assigning a type to the variable 'h' (line 1168)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1168, 8), 'h', result_or_keyword_48225)
        
        # Assigning a Subscript to a Name (line 1169):
        
        # Assigning a Subscript to a Name (line 1169):
        
        # Obtaining the type of the subscript
        int_48226 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1169, 14), 'int')
        # Getting the type of 'h' (line 1169)
        h_48227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1169, 12), 'h')
        # Obtaining the member '__getitem__' of a type (line 1169)
        getitem___48228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1169, 12), h_48227, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1169)
        subscript_call_result_48229 = invoke(stypy.reporting.localization.Localization(__file__, 1169, 12), getitem___48228, int_48226)
        
        # Assigning a type to the variable 'h' (line 1169)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1169, 8), 'h', subscript_call_result_48229)
        
        # Getting the type of 'h' (line 1170)
        h_48230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1170, 11), 'h')
        # Testing the type of an if condition (line 1170)
        if_condition_48231 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1170, 8), h_48230)
        # Assigning a type to the variable 'if_condition_48231' (line 1170)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1170, 8), 'if_condition_48231', if_condition_48231)
        # SSA begins for if statement (line 1170)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1171):
        
        # Assigning a Call to a Name (line 1171):
        
        # Call to dirname(...): (line 1171)
        # Processing the call arguments (line 1171)
        # Getting the type of 'h' (line 1171)
        h_48235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1171, 32), 'h', False)
        # Processing the call keyword arguments (line 1171)
        kwargs_48236 = {}
        # Getting the type of 'os' (line 1171)
        os_48232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1171, 16), 'os', False)
        # Obtaining the member 'path' of a type (line 1171)
        path_48233 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1171, 16), os_48232, 'path')
        # Obtaining the member 'dirname' of a type (line 1171)
        dirname_48234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1171, 16), path_48233, 'dirname')
        # Calling dirname(args, kwargs) (line 1171)
        dirname_call_result_48237 = invoke(stypy.reporting.localization.Localization(__file__, 1171, 16), dirname_48234, *[h_48235], **kwargs_48236)
        
        # Assigning a type to the variable 'h' (line 1171)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1171, 12), 'h', dirname_call_result_48237)
        
        # Call to dict_append(...): (line 1172)
        # Processing the call arguments (line 1172)
        # Getting the type of 'info' (line 1172)
        info_48239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 24), 'info', False)
        # Processing the call keyword arguments (line 1172)
        
        # Obtaining an instance of the builtin type 'list' (line 1172)
        list_48240 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1172, 43), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1172)
        # Adding element type (line 1172)
        # Getting the type of 'h' (line 1172)
        h_48241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 44), 'h', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1172, 43), list_48240, h_48241)
        
        keyword_48242 = list_48240
        kwargs_48243 = {'include_dirs': keyword_48242}
        # Getting the type of 'dict_append' (line 1172)
        dict_append_48238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 12), 'dict_append', False)
        # Calling dict_append(args, kwargs) (line 1172)
        dict_append_call_result_48244 = invoke(stypy.reporting.localization.Localization(__file__, 1172, 12), dict_append_48238, *[info_48239], **kwargs_48243)
        
        # SSA join for if statement (line 1170)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Str to a Subscript (line 1173):
        
        # Assigning a Str to a Subscript (line 1173):
        str_48245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1173, 27), 'str', 'c')
        # Getting the type of 'info' (line 1173)
        info_48246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1173, 8), 'info')
        str_48247 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1173, 13), 'str', 'language')
        # Storing an element on a container (line 1173)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1173, 8), info_48246, (str_48247, str_48245))
        
        # Assigning a List to a Subscript (line 1174):
        
        # Assigning a List to a Subscript (line 1174):
        
        # Obtaining an instance of the builtin type 'list' (line 1174)
        list_48248 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1174, 32), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1174)
        # Adding element type (line 1174)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1174)
        tuple_48249 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1174, 34), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1174)
        # Adding element type (line 1174)
        str_48250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1174, 34), 'str', 'HAVE_CBLAS')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1174, 34), tuple_48249, str_48250)
        # Adding element type (line 1174)
        # Getting the type of 'None' (line 1174)
        None_48251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1174, 48), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1174, 34), tuple_48249, None_48251)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1174, 32), list_48248, tuple_48249)
        
        # Getting the type of 'info' (line 1174)
        info_48252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1174, 8), 'info')
        str_48253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1174, 13), 'str', 'define_macros')
        # Storing an element on a container (line 1174)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1174, 8), info_48252, (str_48253, list_48248))
        
        # Assigning a Call to a Tuple (line 1176):
        
        # Assigning a Call to a Name:
        
        # Call to get_atlas_version(...): (line 1176)
        # Processing the call keyword arguments (line 1176)
        # Getting the type of 'atlas' (line 1176)
        atlas_48255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 62), 'atlas', False)
        kwargs_48256 = {'atlas_48255': atlas_48255}
        # Getting the type of 'get_atlas_version' (line 1176)
        get_atlas_version_48254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 42), 'get_atlas_version', False)
        # Calling get_atlas_version(args, kwargs) (line 1176)
        get_atlas_version_call_result_48257 = invoke(stypy.reporting.localization.Localization(__file__, 1176, 42), get_atlas_version_48254, *[], **kwargs_48256)
        
        # Assigning a type to the variable 'call_assignment_45339' (line 1176)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1176, 8), 'call_assignment_45339', get_atlas_version_call_result_48257)
        
        # Assigning a Call to a Name (line 1176):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_48260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1176, 8), 'int')
        # Processing the call keyword arguments
        kwargs_48261 = {}
        # Getting the type of 'call_assignment_45339' (line 1176)
        call_assignment_45339_48258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 8), 'call_assignment_45339', False)
        # Obtaining the member '__getitem__' of a type (line 1176)
        getitem___48259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1176, 8), call_assignment_45339_48258, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_48262 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___48259, *[int_48260], **kwargs_48261)
        
        # Assigning a type to the variable 'call_assignment_45340' (line 1176)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1176, 8), 'call_assignment_45340', getitem___call_result_48262)
        
        # Assigning a Name to a Name (line 1176):
        # Getting the type of 'call_assignment_45340' (line 1176)
        call_assignment_45340_48263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 8), 'call_assignment_45340')
        # Assigning a type to the variable 'atlas_version' (line 1176)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1176, 8), 'atlas_version', call_assignment_45340_48263)
        
        # Assigning a Call to a Name (line 1176):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_48266 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1176, 8), 'int')
        # Processing the call keyword arguments
        kwargs_48267 = {}
        # Getting the type of 'call_assignment_45339' (line 1176)
        call_assignment_45339_48264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 8), 'call_assignment_45339', False)
        # Obtaining the member '__getitem__' of a type (line 1176)
        getitem___48265 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1176, 8), call_assignment_45339_48264, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_48268 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___48265, *[int_48266], **kwargs_48267)
        
        # Assigning a type to the variable 'call_assignment_45341' (line 1176)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1176, 8), 'call_assignment_45341', getitem___call_result_48268)
        
        # Assigning a Name to a Name (line 1176):
        # Getting the type of 'call_assignment_45341' (line 1176)
        call_assignment_45341_48269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 8), 'call_assignment_45341')
        # Assigning a type to the variable 'atlas_extra_info' (line 1176)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1176, 23), 'atlas_extra_info', call_assignment_45341_48269)
        
        # Call to dict_append(...): (line 1177)
        # Processing the call arguments (line 1177)
        # Getting the type of 'atlas' (line 1177)
        atlas_48271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1177, 20), 'atlas', False)
        # Processing the call keyword arguments (line 1177)
        # Getting the type of 'atlas_extra_info' (line 1177)
        atlas_extra_info_48272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1177, 29), 'atlas_extra_info', False)
        kwargs_48273 = {'atlas_extra_info_48272': atlas_extra_info_48272}
        # Getting the type of 'dict_append' (line 1177)
        dict_append_48270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1177, 8), 'dict_append', False)
        # Calling dict_append(args, kwargs) (line 1177)
        dict_append_call_result_48274 = invoke(stypy.reporting.localization.Localization(__file__, 1177, 8), dict_append_48270, *[atlas_48271], **kwargs_48273)
        
        
        # Call to dict_append(...): (line 1179)
        # Processing the call arguments (line 1179)
        # Getting the type of 'info' (line 1179)
        info_48276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 20), 'info', False)
        # Processing the call keyword arguments (line 1179)
        # Getting the type of 'atlas' (line 1179)
        atlas_48277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 28), 'atlas', False)
        kwargs_48278 = {'atlas_48277': atlas_48277}
        # Getting the type of 'dict_append' (line 1179)
        dict_append_48275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 8), 'dict_append', False)
        # Calling dict_append(args, kwargs) (line 1179)
        dict_append_call_result_48279 = invoke(stypy.reporting.localization.Localization(__file__, 1179, 8), dict_append_48275, *[info_48276], **kwargs_48278)
        
        
        # Call to set_info(...): (line 1181)
        # Processing the call keyword arguments (line 1181)
        # Getting the type of 'info' (line 1181)
        info_48282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 24), 'info', False)
        kwargs_48283 = {'info_48282': info_48282}
        # Getting the type of 'self' (line 1181)
        self_48280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 8), 'self', False)
        # Obtaining the member 'set_info' of a type (line 1181)
        set_info_48281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1181, 8), self_48280, 'set_info')
        # Calling set_info(args, kwargs) (line 1181)
        set_info_call_result_48284 = invoke(stypy.reporting.localization.Localization(__file__, 1181, 8), set_info_48281, *[], **kwargs_48283)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1182)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1182, 8), 'stypy_return_type', types.NoneType)
        
        # ################# End of 'calc_info(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'calc_info' in the type store
        # Getting the type of 'stypy_return_type' (line 1159)
        stypy_return_type_48285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_48285)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'calc_info'
        return stypy_return_type_48285


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1156, 0, False)
        # Assigning a type to the variable 'self' (line 1157)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1157, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'atlas_blas_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'atlas_blas_info' (line 1156)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1156, 0), 'atlas_blas_info', atlas_blas_info)

# Assigning a List to a Name (line 1157):

# Obtaining an instance of the builtin type 'list' (line 1157)
list_48286 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1157, 17), 'list')
# Adding type elements to the builtin type 'list' instance (line 1157)
# Adding element type (line 1157)
str_48287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1157, 18), 'str', 'f77blas')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1157, 17), list_48286, str_48287)
# Adding element type (line 1157)
str_48288 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1157, 29), 'str', 'cblas')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1157, 17), list_48286, str_48288)

# Getting the type of 'atlas_blas_info'
atlas_blas_info_48289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'atlas_blas_info')
# Setting the type of the member '_lib_names' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), atlas_blas_info_48289, '_lib_names', list_48286)
# Declaration of the 'atlas_threads_info' class
# Getting the type of 'atlas_info' (line 1185)
atlas_info_48290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1185, 25), 'atlas_info')

class atlas_threads_info(atlas_info_48290, ):
    
    # Assigning a List to a Name (line 1186):
    
    # Assigning a List to a Name (line 1187):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1185, 0, False)
        # Assigning a type to the variable 'self' (line 1186)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1186, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'atlas_threads_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'atlas_threads_info' (line 1185)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1185, 0), 'atlas_threads_info', atlas_threads_info)

# Assigning a List to a Name (line 1186):

# Obtaining an instance of the builtin type 'list' (line 1186)
list_48291 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1186, 18), 'list')
# Adding type elements to the builtin type 'list' instance (line 1186)
# Adding element type (line 1186)
str_48292 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1186, 19), 'str', 'PTATLAS')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1186, 18), list_48291, str_48292)
# Adding element type (line 1186)
str_48293 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1186, 30), 'str', 'ATLAS')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1186, 18), list_48291, str_48293)

# Getting the type of 'atlas_threads_info'
atlas_threads_info_48294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'atlas_threads_info')
# Setting the type of the member 'dir_env_var' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), atlas_threads_info_48294, 'dir_env_var', list_48291)

# Assigning a List to a Name (line 1187):

# Obtaining an instance of the builtin type 'list' (line 1187)
list_48295 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1187, 17), 'list')
# Adding type elements to the builtin type 'list' instance (line 1187)
# Adding element type (line 1187)
str_48296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1187, 18), 'str', 'ptf77blas')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1187, 17), list_48295, str_48296)
# Adding element type (line 1187)
str_48297 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1187, 31), 'str', 'ptcblas')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1187, 17), list_48295, str_48297)

# Getting the type of 'atlas_threads_info'
atlas_threads_info_48298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'atlas_threads_info')
# Setting the type of the member '_lib_names' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), atlas_threads_info_48298, '_lib_names', list_48295)
# Declaration of the 'atlas_blas_threads_info' class
# Getting the type of 'atlas_blas_info' (line 1190)
atlas_blas_info_48299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1190, 30), 'atlas_blas_info')

class atlas_blas_threads_info(atlas_blas_info_48299, ):
    
    # Assigning a List to a Name (line 1191):
    
    # Assigning a List to a Name (line 1192):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1190, 0, False)
        # Assigning a type to the variable 'self' (line 1191)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1191, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'atlas_blas_threads_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'atlas_blas_threads_info' (line 1190)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1190, 0), 'atlas_blas_threads_info', atlas_blas_threads_info)

# Assigning a List to a Name (line 1191):

# Obtaining an instance of the builtin type 'list' (line 1191)
list_48300 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1191, 18), 'list')
# Adding type elements to the builtin type 'list' instance (line 1191)
# Adding element type (line 1191)
str_48301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1191, 19), 'str', 'PTATLAS')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1191, 18), list_48300, str_48301)
# Adding element type (line 1191)
str_48302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1191, 30), 'str', 'ATLAS')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1191, 18), list_48300, str_48302)

# Getting the type of 'atlas_blas_threads_info'
atlas_blas_threads_info_48303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'atlas_blas_threads_info')
# Setting the type of the member 'dir_env_var' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), atlas_blas_threads_info_48303, 'dir_env_var', list_48300)

# Assigning a List to a Name (line 1192):

# Obtaining an instance of the builtin type 'list' (line 1192)
list_48304 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1192, 17), 'list')
# Adding type elements to the builtin type 'list' instance (line 1192)
# Adding element type (line 1192)
str_48305 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1192, 18), 'str', 'ptf77blas')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1192, 17), list_48304, str_48305)
# Adding element type (line 1192)
str_48306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1192, 31), 'str', 'ptcblas')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1192, 17), list_48304, str_48306)

# Getting the type of 'atlas_blas_threads_info'
atlas_blas_threads_info_48307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'atlas_blas_threads_info')
# Setting the type of the member '_lib_names' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), atlas_blas_threads_info_48307, '_lib_names', list_48304)
# Declaration of the 'lapack_atlas_info' class
# Getting the type of 'atlas_info' (line 1195)
atlas_info_48308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 24), 'atlas_info')

class lapack_atlas_info(atlas_info_48308, ):
    
    # Assigning a BinOp to a Name (line 1196):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1195, 0, False)
        # Assigning a type to the variable 'self' (line 1196)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1196, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'lapack_atlas_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'lapack_atlas_info' (line 1195)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1195, 0), 'lapack_atlas_info', lapack_atlas_info)

# Assigning a BinOp to a Name (line 1196):

# Obtaining an instance of the builtin type 'list' (line 1196)
list_48309 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1196, 17), 'list')
# Adding type elements to the builtin type 'list' instance (line 1196)
# Adding element type (line 1196)
str_48310 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1196, 18), 'str', 'lapack_atlas')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1196, 17), list_48309, str_48310)

# Getting the type of 'atlas_info' (line 1196)
atlas_info_48311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1196, 36), 'atlas_info')
# Obtaining the member '_lib_names' of a type (line 1196)
_lib_names_48312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1196, 36), atlas_info_48311, '_lib_names')
# Applying the binary operator '+' (line 1196)
result_add_48313 = python_operator(stypy.reporting.localization.Localization(__file__, 1196, 17), '+', list_48309, _lib_names_48312)

# Getting the type of 'lapack_atlas_info'
lapack_atlas_info_48314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'lapack_atlas_info')
# Setting the type of the member '_lib_names' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), lapack_atlas_info_48314, '_lib_names', result_add_48313)
# Declaration of the 'lapack_atlas_threads_info' class
# Getting the type of 'atlas_threads_info' (line 1199)
atlas_threads_info_48315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 32), 'atlas_threads_info')

class lapack_atlas_threads_info(atlas_threads_info_48315, ):
    
    # Assigning a BinOp to a Name (line 1200):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1199, 0, False)
        # Assigning a type to the variable 'self' (line 1200)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1200, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'lapack_atlas_threads_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'lapack_atlas_threads_info' (line 1199)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1199, 0), 'lapack_atlas_threads_info', lapack_atlas_threads_info)

# Assigning a BinOp to a Name (line 1200):

# Obtaining an instance of the builtin type 'list' (line 1200)
list_48316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1200, 17), 'list')
# Adding type elements to the builtin type 'list' instance (line 1200)
# Adding element type (line 1200)
str_48317 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1200, 18), 'str', 'lapack_atlas')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1200, 17), list_48316, str_48317)

# Getting the type of 'atlas_threads_info' (line 1200)
atlas_threads_info_48318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1200, 36), 'atlas_threads_info')
# Obtaining the member '_lib_names' of a type (line 1200)
_lib_names_48319 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1200, 36), atlas_threads_info_48318, '_lib_names')
# Applying the binary operator '+' (line 1200)
result_add_48320 = python_operator(stypy.reporting.localization.Localization(__file__, 1200, 17), '+', list_48316, _lib_names_48319)

# Getting the type of 'lapack_atlas_threads_info'
lapack_atlas_threads_info_48321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'lapack_atlas_threads_info')
# Setting the type of the member '_lib_names' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), lapack_atlas_threads_info_48321, '_lib_names', result_add_48320)
# Declaration of the 'atlas_3_10_info' class
# Getting the type of 'atlas_info' (line 1203)
atlas_info_48322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 22), 'atlas_info')

class atlas_3_10_info(atlas_info_48322, ):
    
    # Assigning a List to a Name (line 1204):
    
    # Assigning a Name to a Name (line 1205):
    
    # Assigning a Name to a Name (line 1206):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1203, 0, False)
        # Assigning a type to the variable 'self' (line 1204)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1204, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'atlas_3_10_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'atlas_3_10_info' (line 1203)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1203, 0), 'atlas_3_10_info', atlas_3_10_info)

# Assigning a List to a Name (line 1204):

# Obtaining an instance of the builtin type 'list' (line 1204)
list_48323 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1204, 17), 'list')
# Adding type elements to the builtin type 'list' instance (line 1204)
# Adding element type (line 1204)
str_48324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1204, 18), 'str', 'satlas')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1204, 17), list_48323, str_48324)

# Getting the type of 'atlas_3_10_info'
atlas_3_10_info_48325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'atlas_3_10_info')
# Setting the type of the member '_lib_names' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), atlas_3_10_info_48325, '_lib_names', list_48323)

# Assigning a Name to a Name (line 1205):
# Getting the type of 'atlas_3_10_info'
atlas_3_10_info_48326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'atlas_3_10_info')
# Obtaining the member '_lib_names' of a type
_lib_names_48327 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), atlas_3_10_info_48326, '_lib_names')
# Getting the type of 'atlas_3_10_info'
atlas_3_10_info_48328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'atlas_3_10_info')
# Setting the type of the member '_lib_atlas' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), atlas_3_10_info_48328, '_lib_atlas', _lib_names_48327)

# Assigning a Name to a Name (line 1206):
# Getting the type of 'atlas_3_10_info'
atlas_3_10_info_48329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'atlas_3_10_info')
# Obtaining the member '_lib_names' of a type
_lib_names_48330 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), atlas_3_10_info_48329, '_lib_names')
# Getting the type of 'atlas_3_10_info'
atlas_3_10_info_48331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'atlas_3_10_info')
# Setting the type of the member '_lib_lapack' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), atlas_3_10_info_48331, '_lib_lapack', _lib_names_48330)
# Declaration of the 'atlas_3_10_blas_info' class
# Getting the type of 'atlas_3_10_info' (line 1209)
atlas_3_10_info_48332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1209, 27), 'atlas_3_10_info')

class atlas_3_10_blas_info(atlas_3_10_info_48332, ):
    
    # Assigning a List to a Name (line 1210):

    @norecursion
    def calc_info(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'calc_info'
        module_type_store = module_type_store.open_function_context('calc_info', 1212, 4, False)
        # Assigning a type to the variable 'self' (line 1213)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1213, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        atlas_3_10_blas_info.calc_info.__dict__.__setitem__('stypy_localization', localization)
        atlas_3_10_blas_info.calc_info.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        atlas_3_10_blas_info.calc_info.__dict__.__setitem__('stypy_type_store', module_type_store)
        atlas_3_10_blas_info.calc_info.__dict__.__setitem__('stypy_function_name', 'atlas_3_10_blas_info.calc_info')
        atlas_3_10_blas_info.calc_info.__dict__.__setitem__('stypy_param_names_list', [])
        atlas_3_10_blas_info.calc_info.__dict__.__setitem__('stypy_varargs_param_name', None)
        atlas_3_10_blas_info.calc_info.__dict__.__setitem__('stypy_kwargs_param_name', None)
        atlas_3_10_blas_info.calc_info.__dict__.__setitem__('stypy_call_defaults', defaults)
        atlas_3_10_blas_info.calc_info.__dict__.__setitem__('stypy_call_varargs', varargs)
        atlas_3_10_blas_info.calc_info.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        atlas_3_10_blas_info.calc_info.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'atlas_3_10_blas_info.calc_info', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'calc_info', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'calc_info(...)' code ##################

        
        # Assigning a Call to a Name (line 1213):
        
        # Assigning a Call to a Name (line 1213):
        
        # Call to get_lib_dirs(...): (line 1213)
        # Processing the call keyword arguments (line 1213)
        kwargs_48335 = {}
        # Getting the type of 'self' (line 1213)
        self_48333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1213, 19), 'self', False)
        # Obtaining the member 'get_lib_dirs' of a type (line 1213)
        get_lib_dirs_48334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1213, 19), self_48333, 'get_lib_dirs')
        # Calling get_lib_dirs(args, kwargs) (line 1213)
        get_lib_dirs_call_result_48336 = invoke(stypy.reporting.localization.Localization(__file__, 1213, 19), get_lib_dirs_48334, *[], **kwargs_48335)
        
        # Assigning a type to the variable 'lib_dirs' (line 1213)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1213, 8), 'lib_dirs', get_lib_dirs_call_result_48336)
        
        # Assigning a Dict to a Name (line 1214):
        
        # Assigning a Dict to a Name (line 1214):
        
        # Obtaining an instance of the builtin type 'dict' (line 1214)
        dict_48337 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1214, 15), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 1214)
        
        # Assigning a type to the variable 'info' (line 1214)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1214, 8), 'info', dict_48337)
        
        # Assigning a Call to a Name (line 1215):
        
        # Assigning a Call to a Name (line 1215):
        
        # Call to get_libs(...): (line 1215)
        # Processing the call arguments (line 1215)
        str_48340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1215, 35), 'str', 'atlas_libs')
        # Getting the type of 'self' (line 1216)
        self_48341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 35), 'self', False)
        # Obtaining the member '_lib_names' of a type (line 1216)
        _lib_names_48342 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1216, 35), self_48341, '_lib_names')
        # Processing the call keyword arguments (line 1215)
        kwargs_48343 = {}
        # Getting the type of 'self' (line 1215)
        self_48338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 21), 'self', False)
        # Obtaining the member 'get_libs' of a type (line 1215)
        get_libs_48339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1215, 21), self_48338, 'get_libs')
        # Calling get_libs(args, kwargs) (line 1215)
        get_libs_call_result_48344 = invoke(stypy.reporting.localization.Localization(__file__, 1215, 21), get_libs_48339, *[str_48340, _lib_names_48342], **kwargs_48343)
        
        # Assigning a type to the variable 'atlas_libs' (line 1215)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1215, 8), 'atlas_libs', get_libs_call_result_48344)
        
        # Assigning a Call to a Name (line 1217):
        
        # Assigning a Call to a Name (line 1217):
        
        # Call to check_libs2(...): (line 1217)
        # Processing the call arguments (line 1217)
        # Getting the type of 'lib_dirs' (line 1217)
        lib_dirs_48347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1217, 33), 'lib_dirs', False)
        # Getting the type of 'atlas_libs' (line 1217)
        atlas_libs_48348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1217, 43), 'atlas_libs', False)
        
        # Obtaining an instance of the builtin type 'list' (line 1217)
        list_48349 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1217, 55), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1217)
        
        # Processing the call keyword arguments (line 1217)
        kwargs_48350 = {}
        # Getting the type of 'self' (line 1217)
        self_48345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1217, 16), 'self', False)
        # Obtaining the member 'check_libs2' of a type (line 1217)
        check_libs2_48346 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1217, 16), self_48345, 'check_libs2')
        # Calling check_libs2(args, kwargs) (line 1217)
        check_libs2_call_result_48351 = invoke(stypy.reporting.localization.Localization(__file__, 1217, 16), check_libs2_48346, *[lib_dirs_48347, atlas_libs_48348, list_48349], **kwargs_48350)
        
        # Assigning a type to the variable 'atlas' (line 1217)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1217, 8), 'atlas', check_libs2_call_result_48351)
        
        # Type idiom detected: calculating its left and rigth part (line 1218)
        # Getting the type of 'atlas' (line 1218)
        atlas_48352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 11), 'atlas')
        # Getting the type of 'None' (line 1218)
        None_48353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 20), 'None')
        
        (may_be_48354, more_types_in_union_48355) = may_be_none(atlas_48352, None_48353)

        if may_be_48354:

            if more_types_in_union_48355:
                # Runtime conditional SSA (line 1218)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'stypy_return_type' (line 1219)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1219, 12), 'stypy_return_type', types.NoneType)

            if more_types_in_union_48355:
                # SSA join for if statement (line 1218)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 1220):
        
        # Assigning a Call to a Name (line 1220):
        
        # Call to get_include_dirs(...): (line 1220)
        # Processing the call keyword arguments (line 1220)
        kwargs_48358 = {}
        # Getting the type of 'self' (line 1220)
        self_48356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1220, 23), 'self', False)
        # Obtaining the member 'get_include_dirs' of a type (line 1220)
        get_include_dirs_48357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1220, 23), self_48356, 'get_include_dirs')
        # Calling get_include_dirs(args, kwargs) (line 1220)
        get_include_dirs_call_result_48359 = invoke(stypy.reporting.localization.Localization(__file__, 1220, 23), get_include_dirs_48357, *[], **kwargs_48358)
        
        # Assigning a type to the variable 'include_dirs' (line 1220)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1220, 8), 'include_dirs', get_include_dirs_call_result_48359)
        
        # Assigning a BoolOp to a Name (line 1221):
        
        # Assigning a BoolOp to a Name (line 1221):
        
        # Evaluating a boolean operation
        
        # Call to combine_paths(...): (line 1221)
        # Processing the call arguments (line 1221)
        # Getting the type of 'lib_dirs' (line 1221)
        lib_dirs_48362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 32), 'lib_dirs', False)
        # Getting the type of 'include_dirs' (line 1221)
        include_dirs_48363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 43), 'include_dirs', False)
        # Applying the binary operator '+' (line 1221)
        result_add_48364 = python_operator(stypy.reporting.localization.Localization(__file__, 1221, 32), '+', lib_dirs_48362, include_dirs_48363)
        
        str_48365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1221, 57), 'str', 'cblas.h')
        # Processing the call keyword arguments (line 1221)
        kwargs_48366 = {}
        # Getting the type of 'self' (line 1221)
        self_48360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 13), 'self', False)
        # Obtaining the member 'combine_paths' of a type (line 1221)
        combine_paths_48361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1221, 13), self_48360, 'combine_paths')
        # Calling combine_paths(args, kwargs) (line 1221)
        combine_paths_call_result_48367 = invoke(stypy.reporting.localization.Localization(__file__, 1221, 13), combine_paths_48361, *[result_add_48364, str_48365], **kwargs_48366)
        
        
        # Obtaining an instance of the builtin type 'list' (line 1221)
        list_48368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1221, 71), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1221)
        # Adding element type (line 1221)
        # Getting the type of 'None' (line 1221)
        None_48369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 72), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1221, 71), list_48368, None_48369)
        
        # Applying the binary operator 'or' (line 1221)
        result_or_keyword_48370 = python_operator(stypy.reporting.localization.Localization(__file__, 1221, 13), 'or', combine_paths_call_result_48367, list_48368)
        
        # Assigning a type to the variable 'h' (line 1221)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1221, 8), 'h', result_or_keyword_48370)
        
        # Assigning a Subscript to a Name (line 1222):
        
        # Assigning a Subscript to a Name (line 1222):
        
        # Obtaining the type of the subscript
        int_48371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1222, 14), 'int')
        # Getting the type of 'h' (line 1222)
        h_48372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 12), 'h')
        # Obtaining the member '__getitem__' of a type (line 1222)
        getitem___48373 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1222, 12), h_48372, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1222)
        subscript_call_result_48374 = invoke(stypy.reporting.localization.Localization(__file__, 1222, 12), getitem___48373, int_48371)
        
        # Assigning a type to the variable 'h' (line 1222)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1222, 8), 'h', subscript_call_result_48374)
        
        # Getting the type of 'h' (line 1223)
        h_48375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1223, 11), 'h')
        # Testing the type of an if condition (line 1223)
        if_condition_48376 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1223, 8), h_48375)
        # Assigning a type to the variable 'if_condition_48376' (line 1223)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1223, 8), 'if_condition_48376', if_condition_48376)
        # SSA begins for if statement (line 1223)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1224):
        
        # Assigning a Call to a Name (line 1224):
        
        # Call to dirname(...): (line 1224)
        # Processing the call arguments (line 1224)
        # Getting the type of 'h' (line 1224)
        h_48380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1224, 32), 'h', False)
        # Processing the call keyword arguments (line 1224)
        kwargs_48381 = {}
        # Getting the type of 'os' (line 1224)
        os_48377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1224, 16), 'os', False)
        # Obtaining the member 'path' of a type (line 1224)
        path_48378 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1224, 16), os_48377, 'path')
        # Obtaining the member 'dirname' of a type (line 1224)
        dirname_48379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1224, 16), path_48378, 'dirname')
        # Calling dirname(args, kwargs) (line 1224)
        dirname_call_result_48382 = invoke(stypy.reporting.localization.Localization(__file__, 1224, 16), dirname_48379, *[h_48380], **kwargs_48381)
        
        # Assigning a type to the variable 'h' (line 1224)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1224, 12), 'h', dirname_call_result_48382)
        
        # Call to dict_append(...): (line 1225)
        # Processing the call arguments (line 1225)
        # Getting the type of 'info' (line 1225)
        info_48384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1225, 24), 'info', False)
        # Processing the call keyword arguments (line 1225)
        
        # Obtaining an instance of the builtin type 'list' (line 1225)
        list_48385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1225, 43), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1225)
        # Adding element type (line 1225)
        # Getting the type of 'h' (line 1225)
        h_48386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1225, 44), 'h', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1225, 43), list_48385, h_48386)
        
        keyword_48387 = list_48385
        kwargs_48388 = {'include_dirs': keyword_48387}
        # Getting the type of 'dict_append' (line 1225)
        dict_append_48383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1225, 12), 'dict_append', False)
        # Calling dict_append(args, kwargs) (line 1225)
        dict_append_call_result_48389 = invoke(stypy.reporting.localization.Localization(__file__, 1225, 12), dict_append_48383, *[info_48384], **kwargs_48388)
        
        # SSA join for if statement (line 1223)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Str to a Subscript (line 1226):
        
        # Assigning a Str to a Subscript (line 1226):
        str_48390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1226, 27), 'str', 'c')
        # Getting the type of 'info' (line 1226)
        info_48391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 8), 'info')
        str_48392 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1226, 13), 'str', 'language')
        # Storing an element on a container (line 1226)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1226, 8), info_48391, (str_48392, str_48390))
        
        # Assigning a List to a Subscript (line 1227):
        
        # Assigning a List to a Subscript (line 1227):
        
        # Obtaining an instance of the builtin type 'list' (line 1227)
        list_48393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1227, 32), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1227)
        # Adding element type (line 1227)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1227)
        tuple_48394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1227, 34), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1227)
        # Adding element type (line 1227)
        str_48395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1227, 34), 'str', 'HAVE_CBLAS')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1227, 34), tuple_48394, str_48395)
        # Adding element type (line 1227)
        # Getting the type of 'None' (line 1227)
        None_48396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1227, 48), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1227, 34), tuple_48394, None_48396)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1227, 32), list_48393, tuple_48394)
        
        # Getting the type of 'info' (line 1227)
        info_48397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1227, 8), 'info')
        str_48398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1227, 13), 'str', 'define_macros')
        # Storing an element on a container (line 1227)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1227, 8), info_48397, (str_48398, list_48393))
        
        # Assigning a Call to a Tuple (line 1229):
        
        # Assigning a Call to a Name:
        
        # Call to get_atlas_version(...): (line 1229)
        # Processing the call keyword arguments (line 1229)
        # Getting the type of 'atlas' (line 1229)
        atlas_48400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 62), 'atlas', False)
        kwargs_48401 = {'atlas_48400': atlas_48400}
        # Getting the type of 'get_atlas_version' (line 1229)
        get_atlas_version_48399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 42), 'get_atlas_version', False)
        # Calling get_atlas_version(args, kwargs) (line 1229)
        get_atlas_version_call_result_48402 = invoke(stypy.reporting.localization.Localization(__file__, 1229, 42), get_atlas_version_48399, *[], **kwargs_48401)
        
        # Assigning a type to the variable 'call_assignment_45342' (line 1229)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1229, 8), 'call_assignment_45342', get_atlas_version_call_result_48402)
        
        # Assigning a Call to a Name (line 1229):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_48405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1229, 8), 'int')
        # Processing the call keyword arguments
        kwargs_48406 = {}
        # Getting the type of 'call_assignment_45342' (line 1229)
        call_assignment_45342_48403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 8), 'call_assignment_45342', False)
        # Obtaining the member '__getitem__' of a type (line 1229)
        getitem___48404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1229, 8), call_assignment_45342_48403, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_48407 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___48404, *[int_48405], **kwargs_48406)
        
        # Assigning a type to the variable 'call_assignment_45343' (line 1229)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1229, 8), 'call_assignment_45343', getitem___call_result_48407)
        
        # Assigning a Name to a Name (line 1229):
        # Getting the type of 'call_assignment_45343' (line 1229)
        call_assignment_45343_48408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 8), 'call_assignment_45343')
        # Assigning a type to the variable 'atlas_version' (line 1229)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1229, 8), 'atlas_version', call_assignment_45343_48408)
        
        # Assigning a Call to a Name (line 1229):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_48411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1229, 8), 'int')
        # Processing the call keyword arguments
        kwargs_48412 = {}
        # Getting the type of 'call_assignment_45342' (line 1229)
        call_assignment_45342_48409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 8), 'call_assignment_45342', False)
        # Obtaining the member '__getitem__' of a type (line 1229)
        getitem___48410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1229, 8), call_assignment_45342_48409, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_48413 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___48410, *[int_48411], **kwargs_48412)
        
        # Assigning a type to the variable 'call_assignment_45344' (line 1229)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1229, 8), 'call_assignment_45344', getitem___call_result_48413)
        
        # Assigning a Name to a Name (line 1229):
        # Getting the type of 'call_assignment_45344' (line 1229)
        call_assignment_45344_48414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 8), 'call_assignment_45344')
        # Assigning a type to the variable 'atlas_extra_info' (line 1229)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1229, 23), 'atlas_extra_info', call_assignment_45344_48414)
        
        # Call to dict_append(...): (line 1230)
        # Processing the call arguments (line 1230)
        # Getting the type of 'atlas' (line 1230)
        atlas_48416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1230, 20), 'atlas', False)
        # Processing the call keyword arguments (line 1230)
        # Getting the type of 'atlas_extra_info' (line 1230)
        atlas_extra_info_48417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1230, 29), 'atlas_extra_info', False)
        kwargs_48418 = {'atlas_extra_info_48417': atlas_extra_info_48417}
        # Getting the type of 'dict_append' (line 1230)
        dict_append_48415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1230, 8), 'dict_append', False)
        # Calling dict_append(args, kwargs) (line 1230)
        dict_append_call_result_48419 = invoke(stypy.reporting.localization.Localization(__file__, 1230, 8), dict_append_48415, *[atlas_48416], **kwargs_48418)
        
        
        # Call to dict_append(...): (line 1232)
        # Processing the call arguments (line 1232)
        # Getting the type of 'info' (line 1232)
        info_48421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 20), 'info', False)
        # Processing the call keyword arguments (line 1232)
        # Getting the type of 'atlas' (line 1232)
        atlas_48422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 28), 'atlas', False)
        kwargs_48423 = {'atlas_48422': atlas_48422}
        # Getting the type of 'dict_append' (line 1232)
        dict_append_48420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 8), 'dict_append', False)
        # Calling dict_append(args, kwargs) (line 1232)
        dict_append_call_result_48424 = invoke(stypy.reporting.localization.Localization(__file__, 1232, 8), dict_append_48420, *[info_48421], **kwargs_48423)
        
        
        # Call to set_info(...): (line 1234)
        # Processing the call keyword arguments (line 1234)
        # Getting the type of 'info' (line 1234)
        info_48427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 24), 'info', False)
        kwargs_48428 = {'info_48427': info_48427}
        # Getting the type of 'self' (line 1234)
        self_48425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 8), 'self', False)
        # Obtaining the member 'set_info' of a type (line 1234)
        set_info_48426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1234, 8), self_48425, 'set_info')
        # Calling set_info(args, kwargs) (line 1234)
        set_info_call_result_48429 = invoke(stypy.reporting.localization.Localization(__file__, 1234, 8), set_info_48426, *[], **kwargs_48428)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1235)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1235, 8), 'stypy_return_type', types.NoneType)
        
        # ################# End of 'calc_info(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'calc_info' in the type store
        # Getting the type of 'stypy_return_type' (line 1212)
        stypy_return_type_48430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_48430)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'calc_info'
        return stypy_return_type_48430


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1209, 0, False)
        # Assigning a type to the variable 'self' (line 1210)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1210, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'atlas_3_10_blas_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'atlas_3_10_blas_info' (line 1209)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1209, 0), 'atlas_3_10_blas_info', atlas_3_10_blas_info)

# Assigning a List to a Name (line 1210):

# Obtaining an instance of the builtin type 'list' (line 1210)
list_48431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1210, 17), 'list')
# Adding type elements to the builtin type 'list' instance (line 1210)
# Adding element type (line 1210)
str_48432 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1210, 18), 'str', 'satlas')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1210, 17), list_48431, str_48432)

# Getting the type of 'atlas_3_10_blas_info'
atlas_3_10_blas_info_48433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'atlas_3_10_blas_info')
# Setting the type of the member '_lib_names' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), atlas_3_10_blas_info_48433, '_lib_names', list_48431)
# Declaration of the 'atlas_3_10_threads_info' class
# Getting the type of 'atlas_3_10_info' (line 1238)
atlas_3_10_info_48434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 30), 'atlas_3_10_info')

class atlas_3_10_threads_info(atlas_3_10_info_48434, ):
    
    # Assigning a List to a Name (line 1239):
    
    # Assigning a List to a Name (line 1240):
    
    # Assigning a Name to a Name (line 1241):
    
    # Assigning a Name to a Name (line 1242):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1238, 0, False)
        # Assigning a type to the variable 'self' (line 1239)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1239, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'atlas_3_10_threads_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'atlas_3_10_threads_info' (line 1238)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1238, 0), 'atlas_3_10_threads_info', atlas_3_10_threads_info)

# Assigning a List to a Name (line 1239):

# Obtaining an instance of the builtin type 'list' (line 1239)
list_48435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1239, 18), 'list')
# Adding type elements to the builtin type 'list' instance (line 1239)
# Adding element type (line 1239)
str_48436 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1239, 19), 'str', 'PTATLAS')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1239, 18), list_48435, str_48436)
# Adding element type (line 1239)
str_48437 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1239, 30), 'str', 'ATLAS')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1239, 18), list_48435, str_48437)

# Getting the type of 'atlas_3_10_threads_info'
atlas_3_10_threads_info_48438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'atlas_3_10_threads_info')
# Setting the type of the member 'dir_env_var' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), atlas_3_10_threads_info_48438, 'dir_env_var', list_48435)

# Assigning a List to a Name (line 1240):

# Obtaining an instance of the builtin type 'list' (line 1240)
list_48439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1240, 17), 'list')
# Adding type elements to the builtin type 'list' instance (line 1240)
# Adding element type (line 1240)
str_48440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1240, 18), 'str', 'tatlas')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1240, 17), list_48439, str_48440)

# Getting the type of 'atlas_3_10_threads_info'
atlas_3_10_threads_info_48441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'atlas_3_10_threads_info')
# Setting the type of the member '_lib_names' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), atlas_3_10_threads_info_48441, '_lib_names', list_48439)

# Assigning a Name to a Name (line 1241):
# Getting the type of 'atlas_3_10_threads_info'
atlas_3_10_threads_info_48442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'atlas_3_10_threads_info')
# Obtaining the member '_lib_names' of a type
_lib_names_48443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), atlas_3_10_threads_info_48442, '_lib_names')
# Getting the type of 'atlas_3_10_threads_info'
atlas_3_10_threads_info_48444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'atlas_3_10_threads_info')
# Setting the type of the member '_lib_atlas' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), atlas_3_10_threads_info_48444, '_lib_atlas', _lib_names_48443)

# Assigning a Name to a Name (line 1242):
# Getting the type of 'atlas_3_10_threads_info'
atlas_3_10_threads_info_48445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'atlas_3_10_threads_info')
# Obtaining the member '_lib_names' of a type
_lib_names_48446 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), atlas_3_10_threads_info_48445, '_lib_names')
# Getting the type of 'atlas_3_10_threads_info'
atlas_3_10_threads_info_48447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'atlas_3_10_threads_info')
# Setting the type of the member '_lib_lapack' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), atlas_3_10_threads_info_48447, '_lib_lapack', _lib_names_48446)
# Declaration of the 'atlas_3_10_blas_threads_info' class
# Getting the type of 'atlas_3_10_blas_info' (line 1245)
atlas_3_10_blas_info_48448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1245, 35), 'atlas_3_10_blas_info')

class atlas_3_10_blas_threads_info(atlas_3_10_blas_info_48448, ):
    
    # Assigning a List to a Name (line 1246):
    
    # Assigning a List to a Name (line 1247):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1245, 0, False)
        # Assigning a type to the variable 'self' (line 1246)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1246, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'atlas_3_10_blas_threads_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'atlas_3_10_blas_threads_info' (line 1245)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1245, 0), 'atlas_3_10_blas_threads_info', atlas_3_10_blas_threads_info)

# Assigning a List to a Name (line 1246):

# Obtaining an instance of the builtin type 'list' (line 1246)
list_48449 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1246, 18), 'list')
# Adding type elements to the builtin type 'list' instance (line 1246)
# Adding element type (line 1246)
str_48450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1246, 19), 'str', 'PTATLAS')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1246, 18), list_48449, str_48450)
# Adding element type (line 1246)
str_48451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1246, 30), 'str', 'ATLAS')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1246, 18), list_48449, str_48451)

# Getting the type of 'atlas_3_10_blas_threads_info'
atlas_3_10_blas_threads_info_48452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'atlas_3_10_blas_threads_info')
# Setting the type of the member 'dir_env_var' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), atlas_3_10_blas_threads_info_48452, 'dir_env_var', list_48449)

# Assigning a List to a Name (line 1247):

# Obtaining an instance of the builtin type 'list' (line 1247)
list_48453 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1247, 17), 'list')
# Adding type elements to the builtin type 'list' instance (line 1247)
# Adding element type (line 1247)
str_48454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1247, 18), 'str', 'tatlas')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1247, 17), list_48453, str_48454)

# Getting the type of 'atlas_3_10_blas_threads_info'
atlas_3_10_blas_threads_info_48455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'atlas_3_10_blas_threads_info')
# Setting the type of the member '_lib_names' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), atlas_3_10_blas_threads_info_48455, '_lib_names', list_48453)
# Declaration of the 'lapack_atlas_3_10_info' class
# Getting the type of 'atlas_3_10_info' (line 1250)
atlas_3_10_info_48456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1250, 29), 'atlas_3_10_info')

class lapack_atlas_3_10_info(atlas_3_10_info_48456, ):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1250, 0, False)
        # Assigning a type to the variable 'self' (line 1251)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1251, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'lapack_atlas_3_10_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'lapack_atlas_3_10_info' (line 1250)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1250, 0), 'lapack_atlas_3_10_info', lapack_atlas_3_10_info)
# Declaration of the 'lapack_atlas_3_10_threads_info' class
# Getting the type of 'atlas_3_10_threads_info' (line 1254)
atlas_3_10_threads_info_48457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1254, 37), 'atlas_3_10_threads_info')

class lapack_atlas_3_10_threads_info(atlas_3_10_threads_info_48457, ):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1254, 0, False)
        # Assigning a type to the variable 'self' (line 1255)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1255, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'lapack_atlas_3_10_threads_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'lapack_atlas_3_10_threads_info' (line 1254)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1254, 0), 'lapack_atlas_3_10_threads_info', lapack_atlas_3_10_threads_info)
# Declaration of the 'lapack_info' class
# Getting the type of 'system_info' (line 1258)
system_info_48458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1258, 18), 'system_info')

class lapack_info(system_info_48458, ):
    
    # Assigning a Str to a Name (line 1259):
    
    # Assigning a Str to a Name (line 1260):
    
    # Assigning a List to a Name (line 1261):
    
    # Assigning a Name to a Name (line 1262):

    @norecursion
    def calc_info(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'calc_info'
        module_type_store = module_type_store.open_function_context('calc_info', 1264, 4, False)
        # Assigning a type to the variable 'self' (line 1265)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1265, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        lapack_info.calc_info.__dict__.__setitem__('stypy_localization', localization)
        lapack_info.calc_info.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        lapack_info.calc_info.__dict__.__setitem__('stypy_type_store', module_type_store)
        lapack_info.calc_info.__dict__.__setitem__('stypy_function_name', 'lapack_info.calc_info')
        lapack_info.calc_info.__dict__.__setitem__('stypy_param_names_list', [])
        lapack_info.calc_info.__dict__.__setitem__('stypy_varargs_param_name', None)
        lapack_info.calc_info.__dict__.__setitem__('stypy_kwargs_param_name', None)
        lapack_info.calc_info.__dict__.__setitem__('stypy_call_defaults', defaults)
        lapack_info.calc_info.__dict__.__setitem__('stypy_call_varargs', varargs)
        lapack_info.calc_info.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        lapack_info.calc_info.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'lapack_info.calc_info', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'calc_info', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'calc_info(...)' code ##################

        
        # Assigning a Call to a Name (line 1265):
        
        # Assigning a Call to a Name (line 1265):
        
        # Call to get_lib_dirs(...): (line 1265)
        # Processing the call keyword arguments (line 1265)
        kwargs_48461 = {}
        # Getting the type of 'self' (line 1265)
        self_48459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1265, 19), 'self', False)
        # Obtaining the member 'get_lib_dirs' of a type (line 1265)
        get_lib_dirs_48460 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1265, 19), self_48459, 'get_lib_dirs')
        # Calling get_lib_dirs(args, kwargs) (line 1265)
        get_lib_dirs_call_result_48462 = invoke(stypy.reporting.localization.Localization(__file__, 1265, 19), get_lib_dirs_48460, *[], **kwargs_48461)
        
        # Assigning a type to the variable 'lib_dirs' (line 1265)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1265, 8), 'lib_dirs', get_lib_dirs_call_result_48462)
        
        # Assigning a Call to a Name (line 1267):
        
        # Assigning a Call to a Name (line 1267):
        
        # Call to get_libs(...): (line 1267)
        # Processing the call arguments (line 1267)
        str_48465 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1267, 36), 'str', 'lapack_libs')
        # Getting the type of 'self' (line 1267)
        self_48466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1267, 51), 'self', False)
        # Obtaining the member '_lib_names' of a type (line 1267)
        _lib_names_48467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1267, 51), self_48466, '_lib_names')
        # Processing the call keyword arguments (line 1267)
        kwargs_48468 = {}
        # Getting the type of 'self' (line 1267)
        self_48463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1267, 22), 'self', False)
        # Obtaining the member 'get_libs' of a type (line 1267)
        get_libs_48464 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1267, 22), self_48463, 'get_libs')
        # Calling get_libs(args, kwargs) (line 1267)
        get_libs_call_result_48469 = invoke(stypy.reporting.localization.Localization(__file__, 1267, 22), get_libs_48464, *[str_48465, _lib_names_48467], **kwargs_48468)
        
        # Assigning a type to the variable 'lapack_libs' (line 1267)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1267, 8), 'lapack_libs', get_libs_call_result_48469)
        
        # Assigning a Call to a Name (line 1268):
        
        # Assigning a Call to a Name (line 1268):
        
        # Call to check_libs(...): (line 1268)
        # Processing the call arguments (line 1268)
        # Getting the type of 'lib_dirs' (line 1268)
        lib_dirs_48472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1268, 31), 'lib_dirs', False)
        # Getting the type of 'lapack_libs' (line 1268)
        lapack_libs_48473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1268, 41), 'lapack_libs', False)
        
        # Obtaining an instance of the builtin type 'list' (line 1268)
        list_48474 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1268, 54), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1268)
        
        # Processing the call keyword arguments (line 1268)
        kwargs_48475 = {}
        # Getting the type of 'self' (line 1268)
        self_48470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1268, 15), 'self', False)
        # Obtaining the member 'check_libs' of a type (line 1268)
        check_libs_48471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1268, 15), self_48470, 'check_libs')
        # Calling check_libs(args, kwargs) (line 1268)
        check_libs_call_result_48476 = invoke(stypy.reporting.localization.Localization(__file__, 1268, 15), check_libs_48471, *[lib_dirs_48472, lapack_libs_48473, list_48474], **kwargs_48475)
        
        # Assigning a type to the variable 'info' (line 1268)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1268, 8), 'info', check_libs_call_result_48476)
        
        # Type idiom detected: calculating its left and rigth part (line 1269)
        # Getting the type of 'info' (line 1269)
        info_48477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1269, 11), 'info')
        # Getting the type of 'None' (line 1269)
        None_48478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1269, 19), 'None')
        
        (may_be_48479, more_types_in_union_48480) = may_be_none(info_48477, None_48478)

        if may_be_48479:

            if more_types_in_union_48480:
                # Runtime conditional SSA (line 1269)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'stypy_return_type' (line 1270)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1270, 12), 'stypy_return_type', types.NoneType)

            if more_types_in_union_48480:
                # SSA join for if statement (line 1269)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Str to a Subscript (line 1271):
        
        # Assigning a Str to a Subscript (line 1271):
        str_48481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1271, 27), 'str', 'f77')
        # Getting the type of 'info' (line 1271)
        info_48482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1271, 8), 'info')
        str_48483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1271, 13), 'str', 'language')
        # Storing an element on a container (line 1271)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1271, 8), info_48482, (str_48483, str_48481))
        
        # Call to set_info(...): (line 1272)
        # Processing the call keyword arguments (line 1272)
        # Getting the type of 'info' (line 1272)
        info_48486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1272, 24), 'info', False)
        kwargs_48487 = {'info_48486': info_48486}
        # Getting the type of 'self' (line 1272)
        self_48484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1272, 8), 'self', False)
        # Obtaining the member 'set_info' of a type (line 1272)
        set_info_48485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1272, 8), self_48484, 'set_info')
        # Calling set_info(args, kwargs) (line 1272)
        set_info_call_result_48488 = invoke(stypy.reporting.localization.Localization(__file__, 1272, 8), set_info_48485, *[], **kwargs_48487)
        
        
        # ################# End of 'calc_info(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'calc_info' in the type store
        # Getting the type of 'stypy_return_type' (line 1264)
        stypy_return_type_48489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1264, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_48489)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'calc_info'
        return stypy_return_type_48489


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1258, 0, False)
        # Assigning a type to the variable 'self' (line 1259)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1259, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'lapack_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'lapack_info' (line 1258)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1258, 0), 'lapack_info', lapack_info)

# Assigning a Str to a Name (line 1259):
str_48490 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1259, 14), 'str', 'lapack')
# Getting the type of 'lapack_info'
lapack_info_48491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'lapack_info')
# Setting the type of the member 'section' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), lapack_info_48491, 'section', str_48490)

# Assigning a Str to a Name (line 1260):
str_48492 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1260, 18), 'str', 'LAPACK')
# Getting the type of 'lapack_info'
lapack_info_48493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'lapack_info')
# Setting the type of the member 'dir_env_var' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), lapack_info_48493, 'dir_env_var', str_48492)

# Assigning a List to a Name (line 1261):

# Obtaining an instance of the builtin type 'list' (line 1261)
list_48494 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1261, 17), 'list')
# Adding type elements to the builtin type 'list' instance (line 1261)
# Adding element type (line 1261)
str_48495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1261, 18), 'str', 'lapack')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1261, 17), list_48494, str_48495)

# Getting the type of 'lapack_info'
lapack_info_48496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'lapack_info')
# Setting the type of the member '_lib_names' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), lapack_info_48496, '_lib_names', list_48494)

# Assigning a Name to a Name (line 1262):
# Getting the type of 'LapackNotFoundError' (line 1262)
LapackNotFoundError_48497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1262, 20), 'LapackNotFoundError')
# Getting the type of 'lapack_info'
lapack_info_48498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'lapack_info')
# Setting the type of the member 'notfounderror' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), lapack_info_48498, 'notfounderror', LapackNotFoundError_48497)
# Declaration of the 'lapack_src_info' class
# Getting the type of 'system_info' (line 1275)
system_info_48499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1275, 22), 'system_info')

class lapack_src_info(system_info_48499, ):
    
    # Assigning a Str to a Name (line 1276):
    
    # Assigning a Str to a Name (line 1277):
    
    # Assigning a Name to a Name (line 1278):

    @norecursion
    def get_paths(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_paths'
        module_type_store = module_type_store.open_function_context('get_paths', 1280, 4, False)
        # Assigning a type to the variable 'self' (line 1281)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1281, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        lapack_src_info.get_paths.__dict__.__setitem__('stypy_localization', localization)
        lapack_src_info.get_paths.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        lapack_src_info.get_paths.__dict__.__setitem__('stypy_type_store', module_type_store)
        lapack_src_info.get_paths.__dict__.__setitem__('stypy_function_name', 'lapack_src_info.get_paths')
        lapack_src_info.get_paths.__dict__.__setitem__('stypy_param_names_list', ['section', 'key'])
        lapack_src_info.get_paths.__dict__.__setitem__('stypy_varargs_param_name', None)
        lapack_src_info.get_paths.__dict__.__setitem__('stypy_kwargs_param_name', None)
        lapack_src_info.get_paths.__dict__.__setitem__('stypy_call_defaults', defaults)
        lapack_src_info.get_paths.__dict__.__setitem__('stypy_call_varargs', varargs)
        lapack_src_info.get_paths.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        lapack_src_info.get_paths.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'lapack_src_info.get_paths', ['section', 'key'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_paths', localization, ['section', 'key'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_paths(...)' code ##################

        
        # Assigning a Call to a Name (line 1281):
        
        # Assigning a Call to a Name (line 1281):
        
        # Call to get_paths(...): (line 1281)
        # Processing the call arguments (line 1281)
        # Getting the type of 'self' (line 1281)
        self_48502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1281, 41), 'self', False)
        # Getting the type of 'section' (line 1281)
        section_48503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1281, 47), 'section', False)
        # Getting the type of 'key' (line 1281)
        key_48504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1281, 56), 'key', False)
        # Processing the call keyword arguments (line 1281)
        kwargs_48505 = {}
        # Getting the type of 'system_info' (line 1281)
        system_info_48500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1281, 19), 'system_info', False)
        # Obtaining the member 'get_paths' of a type (line 1281)
        get_paths_48501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1281, 19), system_info_48500, 'get_paths')
        # Calling get_paths(args, kwargs) (line 1281)
        get_paths_call_result_48506 = invoke(stypy.reporting.localization.Localization(__file__, 1281, 19), get_paths_48501, *[self_48502, section_48503, key_48504], **kwargs_48505)
        
        # Assigning a type to the variable 'pre_dirs' (line 1281)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1281, 8), 'pre_dirs', get_paths_call_result_48506)
        
        # Assigning a List to a Name (line 1282):
        
        # Assigning a List to a Name (line 1282):
        
        # Obtaining an instance of the builtin type 'list' (line 1282)
        list_48507 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1282, 15), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1282)
        
        # Assigning a type to the variable 'dirs' (line 1282)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1282, 8), 'dirs', list_48507)
        
        # Getting the type of 'pre_dirs' (line 1283)
        pre_dirs_48508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 17), 'pre_dirs')
        # Testing the type of a for loop iterable (line 1283)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1283, 8), pre_dirs_48508)
        # Getting the type of the for loop variable (line 1283)
        for_loop_var_48509 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1283, 8), pre_dirs_48508)
        # Assigning a type to the variable 'd' (line 1283)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1283, 8), 'd', for_loop_var_48509)
        # SSA begins for a for statement (line 1283)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to extend(...): (line 1284)
        # Processing the call arguments (line 1284)
        
        # Obtaining an instance of the builtin type 'list' (line 1284)
        list_48512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1284, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1284)
        # Adding element type (line 1284)
        # Getting the type of 'd' (line 1284)
        d_48513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 25), 'd', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1284, 24), list_48512, d_48513)
        
        
        # Call to combine_paths(...): (line 1284)
        # Processing the call arguments (line 1284)
        # Getting the type of 'd' (line 1284)
        d_48516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 49), 'd', False)
        
        # Obtaining an instance of the builtin type 'list' (line 1284)
        list_48517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1284, 52), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1284)
        # Adding element type (line 1284)
        str_48518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1284, 53), 'str', 'LAPACK*/SRC')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1284, 52), list_48517, str_48518)
        # Adding element type (line 1284)
        str_48519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1284, 68), 'str', 'SRC')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1284, 52), list_48517, str_48519)
        
        # Processing the call keyword arguments (line 1284)
        kwargs_48520 = {}
        # Getting the type of 'self' (line 1284)
        self_48514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 30), 'self', False)
        # Obtaining the member 'combine_paths' of a type (line 1284)
        combine_paths_48515 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1284, 30), self_48514, 'combine_paths')
        # Calling combine_paths(args, kwargs) (line 1284)
        combine_paths_call_result_48521 = invoke(stypy.reporting.localization.Localization(__file__, 1284, 30), combine_paths_48515, *[d_48516, list_48517], **kwargs_48520)
        
        # Applying the binary operator '+' (line 1284)
        result_add_48522 = python_operator(stypy.reporting.localization.Localization(__file__, 1284, 24), '+', list_48512, combine_paths_call_result_48521)
        
        # Processing the call keyword arguments (line 1284)
        kwargs_48523 = {}
        # Getting the type of 'dirs' (line 1284)
        dirs_48510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 12), 'dirs', False)
        # Obtaining the member 'extend' of a type (line 1284)
        extend_48511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1284, 12), dirs_48510, 'extend')
        # Calling extend(args, kwargs) (line 1284)
        extend_call_result_48524 = invoke(stypy.reporting.localization.Localization(__file__, 1284, 12), extend_48511, *[result_add_48522], **kwargs_48523)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'dirs' (line 1285)
        dirs_48532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1285, 27), 'dirs')
        comprehension_48533 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1285, 16), dirs_48532)
        # Assigning a type to the variable 'd' (line 1285)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1285, 16), 'd', comprehension_48533)
        
        # Call to isdir(...): (line 1285)
        # Processing the call arguments (line 1285)
        # Getting the type of 'd' (line 1285)
        d_48529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1285, 49), 'd', False)
        # Processing the call keyword arguments (line 1285)
        kwargs_48530 = {}
        # Getting the type of 'os' (line 1285)
        os_48526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1285, 35), 'os', False)
        # Obtaining the member 'path' of a type (line 1285)
        path_48527 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1285, 35), os_48526, 'path')
        # Obtaining the member 'isdir' of a type (line 1285)
        isdir_48528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1285, 35), path_48527, 'isdir')
        # Calling isdir(args, kwargs) (line 1285)
        isdir_call_result_48531 = invoke(stypy.reporting.localization.Localization(__file__, 1285, 35), isdir_48528, *[d_48529], **kwargs_48530)
        
        # Getting the type of 'd' (line 1285)
        d_48525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1285, 16), 'd')
        list_48534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1285, 16), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1285, 16), list_48534, d_48525)
        # Assigning a type to the variable 'stypy_return_type' (line 1285)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1285, 8), 'stypy_return_type', list_48534)
        
        # ################# End of 'get_paths(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_paths' in the type store
        # Getting the type of 'stypy_return_type' (line 1280)
        stypy_return_type_48535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_48535)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_paths'
        return stypy_return_type_48535


    @norecursion
    def calc_info(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'calc_info'
        module_type_store = module_type_store.open_function_context('calc_info', 1287, 4, False)
        # Assigning a type to the variable 'self' (line 1288)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1288, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        lapack_src_info.calc_info.__dict__.__setitem__('stypy_localization', localization)
        lapack_src_info.calc_info.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        lapack_src_info.calc_info.__dict__.__setitem__('stypy_type_store', module_type_store)
        lapack_src_info.calc_info.__dict__.__setitem__('stypy_function_name', 'lapack_src_info.calc_info')
        lapack_src_info.calc_info.__dict__.__setitem__('stypy_param_names_list', [])
        lapack_src_info.calc_info.__dict__.__setitem__('stypy_varargs_param_name', None)
        lapack_src_info.calc_info.__dict__.__setitem__('stypy_kwargs_param_name', None)
        lapack_src_info.calc_info.__dict__.__setitem__('stypy_call_defaults', defaults)
        lapack_src_info.calc_info.__dict__.__setitem__('stypy_call_varargs', varargs)
        lapack_src_info.calc_info.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        lapack_src_info.calc_info.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'lapack_src_info.calc_info', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'calc_info', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'calc_info(...)' code ##################

        
        # Assigning a Call to a Name (line 1288):
        
        # Assigning a Call to a Name (line 1288):
        
        # Call to get_src_dirs(...): (line 1288)
        # Processing the call keyword arguments (line 1288)
        kwargs_48538 = {}
        # Getting the type of 'self' (line 1288)
        self_48536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 19), 'self', False)
        # Obtaining the member 'get_src_dirs' of a type (line 1288)
        get_src_dirs_48537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1288, 19), self_48536, 'get_src_dirs')
        # Calling get_src_dirs(args, kwargs) (line 1288)
        get_src_dirs_call_result_48539 = invoke(stypy.reporting.localization.Localization(__file__, 1288, 19), get_src_dirs_48537, *[], **kwargs_48538)
        
        # Assigning a type to the variable 'src_dirs' (line 1288)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1288, 8), 'src_dirs', get_src_dirs_call_result_48539)
        
        # Assigning a Str to a Name (line 1289):
        
        # Assigning a Str to a Name (line 1289):
        str_48540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1289, 18), 'str', '')
        # Assigning a type to the variable 'src_dir' (line 1289)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1289, 8), 'src_dir', str_48540)
        
        # Getting the type of 'src_dirs' (line 1290)
        src_dirs_48541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 17), 'src_dirs')
        # Testing the type of a for loop iterable (line 1290)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1290, 8), src_dirs_48541)
        # Getting the type of the for loop variable (line 1290)
        for_loop_var_48542 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1290, 8), src_dirs_48541)
        # Assigning a type to the variable 'd' (line 1290)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1290, 8), 'd', for_loop_var_48542)
        # SSA begins for a for statement (line 1290)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to isfile(...): (line 1291)
        # Processing the call arguments (line 1291)
        
        # Call to join(...): (line 1291)
        # Processing the call arguments (line 1291)
        # Getting the type of 'd' (line 1291)
        d_48549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 43), 'd', False)
        str_48550 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1291, 46), 'str', 'dgesv.f')
        # Processing the call keyword arguments (line 1291)
        kwargs_48551 = {}
        # Getting the type of 'os' (line 1291)
        os_48546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 30), 'os', False)
        # Obtaining the member 'path' of a type (line 1291)
        path_48547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1291, 30), os_48546, 'path')
        # Obtaining the member 'join' of a type (line 1291)
        join_48548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1291, 30), path_48547, 'join')
        # Calling join(args, kwargs) (line 1291)
        join_call_result_48552 = invoke(stypy.reporting.localization.Localization(__file__, 1291, 30), join_48548, *[d_48549, str_48550], **kwargs_48551)
        
        # Processing the call keyword arguments (line 1291)
        kwargs_48553 = {}
        # Getting the type of 'os' (line 1291)
        os_48543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 15), 'os', False)
        # Obtaining the member 'path' of a type (line 1291)
        path_48544 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1291, 15), os_48543, 'path')
        # Obtaining the member 'isfile' of a type (line 1291)
        isfile_48545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1291, 15), path_48544, 'isfile')
        # Calling isfile(args, kwargs) (line 1291)
        isfile_call_result_48554 = invoke(stypy.reporting.localization.Localization(__file__, 1291, 15), isfile_48545, *[join_call_result_48552], **kwargs_48553)
        
        # Testing the type of an if condition (line 1291)
        if_condition_48555 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1291, 12), isfile_call_result_48554)
        # Assigning a type to the variable 'if_condition_48555' (line 1291)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1291, 12), 'if_condition_48555', if_condition_48555)
        # SSA begins for if statement (line 1291)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1292):
        
        # Assigning a Name to a Name (line 1292):
        # Getting the type of 'd' (line 1292)
        d_48556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1292, 26), 'd')
        # Assigning a type to the variable 'src_dir' (line 1292)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1292, 16), 'src_dir', d_48556)
        # SSA join for if statement (line 1291)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'src_dir' (line 1294)
        src_dir_48557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 15), 'src_dir')
        # Applying the 'not' unary operator (line 1294)
        result_not__48558 = python_operator(stypy.reporting.localization.Localization(__file__, 1294, 11), 'not', src_dir_48557)
        
        # Testing the type of an if condition (line 1294)
        if_condition_48559 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1294, 8), result_not__48558)
        # Assigning a type to the variable 'if_condition_48559' (line 1294)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1294, 8), 'if_condition_48559', if_condition_48559)
        # SSA begins for if statement (line 1294)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1296)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1296, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1294)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Str to a Name (line 1300):
        
        # Assigning a Str to a Name (line 1300):
        str_48560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1303, (-1)), 'str', '\n        ilaenv ieeeck lsame lsamen xerbla\n        iparmq\n        ')
        # Assigning a type to the variable 'allaux' (line 1300)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1300, 8), 'allaux', str_48560)
        
        # Assigning a Str to a Name (line 1304):
        
        # Assigning a Str to a Name (line 1304):
        str_48561 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1315, (-1)), 'str', '\n        bdsdc bdsqr disna labad lacpy ladiv lae2 laebz laed0 laed1\n        laed2 laed3 laed4 laed5 laed6 laed7 laed8 laed9 laeda laev2\n        lagtf lagts lamch lamrg lanst lapy2 lapy3 larnv larrb larre\n        larrf lartg laruv las2 lascl lasd0 lasd1 lasd2 lasd3 lasd4\n        lasd5 lasd6 lasd7 lasd8 lasd9 lasda lasdq lasdt laset lasq1\n        lasq2 lasq3 lasq4 lasq5 lasq6 lasr lasrt lassq lasv2 pttrf\n        stebz stedc steqr sterf\n\n        larra larrc larrd larr larrk larrj larrr laneg laisnan isnan\n        lazq3 lazq4\n        ')
        # Assigning a type to the variable 'laux' (line 1304)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1304, 8), 'laux', str_48561)
        
        # Assigning a Str to a Name (line 1316):
        
        # Assigning a Str to a Name (line 1316):
        str_48562 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1340, (-1)), 'str', '\n        gbbrd gbcon gbequ gbrfs gbsv gbsvx gbtf2 gbtrf gbtrs gebak\n        gebal gebd2 gebrd gecon geequ gees geesx geev geevx gegs gegv\n        gehd2 gehrd gelq2 gelqf gels gelsd gelss gelsx gelsy geql2\n        geqlf geqp3 geqpf geqr2 geqrf gerfs gerq2 gerqf gesc2 gesdd\n        gesv gesvd gesvx getc2 getf2 getrf getri getrs ggbak ggbal\n        gges ggesx ggev ggevx ggglm gghrd gglse ggqrf ggrqf ggsvd\n        ggsvp gtcon gtrfs gtsv gtsvx gttrf gttrs gtts2 hgeqz hsein\n        hseqr labrd lacon laein lags2 lagtm lahqr lahrd laic1 lals0\n        lalsa lalsd langb lange langt lanhs lansb lansp lansy lantb\n        lantp lantr lapll lapmt laqgb laqge laqp2 laqps laqsb laqsp\n        laqsy lar1v lar2v larf larfb larfg larft larfx largv larrv\n        lartv larz larzb larzt laswp lasyf latbs latdf latps latrd\n        latrs latrz latzm lauu2 lauum pbcon pbequ pbrfs pbstf pbsv\n        pbsvx pbtf2 pbtrf pbtrs pocon poequ porfs posv posvx potf2\n        potrf potri potrs ppcon ppequ pprfs ppsv ppsvx pptrf pptri\n        pptrs ptcon pteqr ptrfs ptsv ptsvx pttrs ptts2 spcon sprfs\n        spsv spsvx sptrf sptri sptrs stegr stein sycon syrfs sysv\n        sysvx sytf2 sytrf sytri sytrs tbcon tbrfs tbtrs tgevc tgex2\n        tgexc tgsen tgsja tgsna tgsy2 tgsyl tpcon tprfs tptri tptrs\n        trcon trevc trexc trrfs trsen trsna trsyl trti2 trtri trtrs\n        tzrqf tzrzf\n\n        lacn2 lahr2 stemr laqr0 laqr1 laqr2 laqr3 laqr4 laqr5\n        ')
        # Assigning a type to the variable 'lasrc' (line 1316)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1316, 8), 'lasrc', str_48562)
        
        # Assigning a Str to a Name (line 1341):
        
        # Assigning a Str to a Name (line 1341):
        str_48563 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1349, (-1)), 'str', '\n        laexc lag2 lagv2 laln2 lanv2 laqtr lasy2 opgtr opmtr org2l\n        org2r orgbr orghr orgl2 orglq orgql orgqr orgr2 orgrq orgtr\n        orm2l orm2r ormbr ormhr orml2 ormlq ormql ormqr ormr2 ormr3\n        ormrq ormrz ormtr rscl sbev sbevd sbevx sbgst sbgv sbgvd sbgvx\n        sbtrd spev spevd spevx spgst spgv spgvd spgvx sptrd stev stevd\n        stevr stevx syev syevd syevr syevx sygs2 sygst sygv sygvd\n        sygvx sytd2 sytrd\n        ')
        # Assigning a type to the variable 'sd_lasrc' (line 1341)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1341, 8), 'sd_lasrc', str_48563)
        
        # Assigning a Str to a Name (line 1350):
        
        # Assigning a Str to a Name (line 1350):
        str_48564 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1361, (-1)), 'str', '\n        bdsqr hbev hbevd hbevx hbgst hbgv hbgvd hbgvx hbtrd hecon heev\n        heevd heevr heevx hegs2 hegst hegv hegvd hegvx herfs hesv\n        hesvx hetd2 hetf2 hetrd hetrf hetri hetrs hpcon hpev hpevd\n        hpevx hpgst hpgv hpgvd hpgvx hprfs hpsv hpsvx hptrd hptrf\n        hptri hptrs lacgv lacp2 lacpy lacrm lacrt ladiv laed0 laed7\n        laed8 laesy laev2 lahef lanhb lanhe lanhp lanht laqhb laqhe\n        laqhp larcm larnv lartg lascl laset lasr lassq pttrf rot spmv\n        spr stedc steqr symv syr ung2l ung2r ungbr unghr ungl2 unglq\n        ungql ungqr ungr2 ungrq ungtr unm2l unm2r unmbr unmhr unml2\n        unmlq unmql unmqr unmr2 unmr3 unmrq unmrz unmtr upgtr upmtr\n        ')
        # Assigning a type to the variable 'cz_lasrc' (line 1350)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1350, 8), 'cz_lasrc', str_48564)
        
        # Assigning a BinOp to a Name (line 1363):
        
        # Assigning a BinOp to a Name (line 1363):
        # Getting the type of 'laux' (line 1363)
        laux_48565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1363, 17), 'laux')
        str_48566 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1363, 24), 'str', ' econd ')
        # Applying the binary operator '+' (line 1363)
        result_add_48567 = python_operator(stypy.reporting.localization.Localization(__file__, 1363, 17), '+', laux_48565, str_48566)
        
        # Assigning a type to the variable 'sclaux' (line 1363)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1363, 8), 'sclaux', result_add_48567)
        
        # Assigning a BinOp to a Name (line 1364):
        
        # Assigning a BinOp to a Name (line 1364):
        # Getting the type of 'laux' (line 1364)
        laux_48568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1364, 17), 'laux')
        str_48569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1364, 24), 'str', ' secnd ')
        # Applying the binary operator '+' (line 1364)
        result_add_48570 = python_operator(stypy.reporting.localization.Localization(__file__, 1364, 17), '+', laux_48568, str_48569)
        
        # Assigning a type to the variable 'dzlaux' (line 1364)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1364, 8), 'dzlaux', result_add_48570)
        
        # Assigning a BinOp to a Name (line 1365):
        
        # Assigning a BinOp to a Name (line 1365):
        # Getting the type of 'lasrc' (line 1365)
        lasrc_48571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 17), 'lasrc')
        # Getting the type of 'sd_lasrc' (line 1365)
        sd_lasrc_48572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 25), 'sd_lasrc')
        # Applying the binary operator '+' (line 1365)
        result_add_48573 = python_operator(stypy.reporting.localization.Localization(__file__, 1365, 17), '+', lasrc_48571, sd_lasrc_48572)
        
        # Assigning a type to the variable 'slasrc' (line 1365)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1365, 8), 'slasrc', result_add_48573)
        
        # Assigning a BinOp to a Name (line 1366):
        
        # Assigning a BinOp to a Name (line 1366):
        # Getting the type of 'lasrc' (line 1366)
        lasrc_48574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 17), 'lasrc')
        # Getting the type of 'sd_lasrc' (line 1366)
        sd_lasrc_48575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 25), 'sd_lasrc')
        # Applying the binary operator '+' (line 1366)
        result_add_48576 = python_operator(stypy.reporting.localization.Localization(__file__, 1366, 17), '+', lasrc_48574, sd_lasrc_48575)
        
        # Assigning a type to the variable 'dlasrc' (line 1366)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1366, 8), 'dlasrc', result_add_48576)
        
        # Assigning a BinOp to a Name (line 1367):
        
        # Assigning a BinOp to a Name (line 1367):
        # Getting the type of 'lasrc' (line 1367)
        lasrc_48577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 17), 'lasrc')
        # Getting the type of 'cz_lasrc' (line 1367)
        cz_lasrc_48578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 25), 'cz_lasrc')
        # Applying the binary operator '+' (line 1367)
        result_add_48579 = python_operator(stypy.reporting.localization.Localization(__file__, 1367, 17), '+', lasrc_48577, cz_lasrc_48578)
        
        str_48580 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1367, 36), 'str', ' srot srscl ')
        # Applying the binary operator '+' (line 1367)
        result_add_48581 = python_operator(stypy.reporting.localization.Localization(__file__, 1367, 34), '+', result_add_48579, str_48580)
        
        # Assigning a type to the variable 'clasrc' (line 1367)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1367, 8), 'clasrc', result_add_48581)
        
        # Assigning a BinOp to a Name (line 1368):
        
        # Assigning a BinOp to a Name (line 1368):
        # Getting the type of 'lasrc' (line 1368)
        lasrc_48582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 17), 'lasrc')
        # Getting the type of 'cz_lasrc' (line 1368)
        cz_lasrc_48583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 25), 'cz_lasrc')
        # Applying the binary operator '+' (line 1368)
        result_add_48584 = python_operator(stypy.reporting.localization.Localization(__file__, 1368, 17), '+', lasrc_48582, cz_lasrc_48583)
        
        str_48585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1368, 36), 'str', ' drot drscl ')
        # Applying the binary operator '+' (line 1368)
        result_add_48586 = python_operator(stypy.reporting.localization.Localization(__file__, 1368, 34), '+', result_add_48584, str_48585)
        
        # Assigning a type to the variable 'zlasrc' (line 1368)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1368, 8), 'zlasrc', result_add_48586)
        
        # Assigning a Str to a Name (line 1369):
        
        # Assigning a Str to a Name (line 1369):
        str_48587 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1369, 18), 'str', ' icmax1 scsum1 ')
        # Assigning a type to the variable 'oclasrc' (line 1369)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1369, 8), 'oclasrc', str_48587)
        
        # Assigning a Str to a Name (line 1370):
        
        # Assigning a Str to a Name (line 1370):
        str_48588 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1370, 18), 'str', ' izmax1 dzsum1 ')
        # Assigning a type to the variable 'ozlasrc' (line 1370)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1370, 8), 'ozlasrc', str_48588)
        
        # Assigning a BinOp to a Name (line 1371):
        
        # Assigning a BinOp to a Name (line 1371):
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to split(...): (line 1371)
        # Processing the call keyword arguments (line 1371)
        kwargs_48596 = {}
        # Getting the type of 'sclaux' (line 1371)
        sclaux_48592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 41), 'sclaux', False)
        # Getting the type of 'slasrc' (line 1371)
        slasrc_48593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 50), 'slasrc', False)
        # Applying the binary operator '+' (line 1371)
        result_add_48594 = python_operator(stypy.reporting.localization.Localization(__file__, 1371, 41), '+', sclaux_48592, slasrc_48593)
        
        # Obtaining the member 'split' of a type (line 1371)
        split_48595 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1371, 41), result_add_48594, 'split')
        # Calling split(args, kwargs) (line 1371)
        split_call_result_48597 = invoke(stypy.reporting.localization.Localization(__file__, 1371, 41), split_48595, *[], **kwargs_48596)
        
        comprehension_48598 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1371, 19), split_call_result_48597)
        # Assigning a type to the variable 'f' (line 1371)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1371, 19), 'f', comprehension_48598)
        str_48589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1371, 19), 'str', 's%s.f')
        # Getting the type of 'f' (line 1371)
        f_48590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 29), 'f')
        # Applying the binary operator '%' (line 1371)
        result_mod_48591 = python_operator(stypy.reporting.localization.Localization(__file__, 1371, 19), '%', str_48589, f_48590)
        
        list_48599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1371, 19), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1371, 19), list_48599, result_mod_48591)
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to split(...): (line 1372)
        # Processing the call keyword arguments (line 1372)
        kwargs_48607 = {}
        # Getting the type of 'dzlaux' (line 1372)
        dzlaux_48603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1372, 43), 'dzlaux', False)
        # Getting the type of 'dlasrc' (line 1372)
        dlasrc_48604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1372, 52), 'dlasrc', False)
        # Applying the binary operator '+' (line 1372)
        result_add_48605 = python_operator(stypy.reporting.localization.Localization(__file__, 1372, 43), '+', dzlaux_48603, dlasrc_48604)
        
        # Obtaining the member 'split' of a type (line 1372)
        split_48606 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1372, 43), result_add_48605, 'split')
        # Calling split(args, kwargs) (line 1372)
        split_call_result_48608 = invoke(stypy.reporting.localization.Localization(__file__, 1372, 43), split_48606, *[], **kwargs_48607)
        
        comprehension_48609 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1372, 21), split_call_result_48608)
        # Assigning a type to the variable 'f' (line 1372)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1372, 21), 'f', comprehension_48609)
        str_48600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1372, 21), 'str', 'd%s.f')
        # Getting the type of 'f' (line 1372)
        f_48601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1372, 31), 'f')
        # Applying the binary operator '%' (line 1372)
        result_mod_48602 = python_operator(stypy.reporting.localization.Localization(__file__, 1372, 21), '%', str_48600, f_48601)
        
        list_48610 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1372, 21), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1372, 21), list_48610, result_mod_48602)
        # Applying the binary operator '+' (line 1371)
        result_add_48611 = python_operator(stypy.reporting.localization.Localization(__file__, 1371, 18), '+', list_48599, list_48610)
        
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to split(...): (line 1373)
        # Processing the call keyword arguments (line 1373)
        kwargs_48617 = {}
        # Getting the type of 'clasrc' (line 1373)
        clasrc_48615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1373, 43), 'clasrc', False)
        # Obtaining the member 'split' of a type (line 1373)
        split_48616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1373, 43), clasrc_48615, 'split')
        # Calling split(args, kwargs) (line 1373)
        split_call_result_48618 = invoke(stypy.reporting.localization.Localization(__file__, 1373, 43), split_48616, *[], **kwargs_48617)
        
        comprehension_48619 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1373, 21), split_call_result_48618)
        # Assigning a type to the variable 'f' (line 1373)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1373, 21), 'f', comprehension_48619)
        str_48612 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1373, 21), 'str', 'c%s.f')
        # Getting the type of 'f' (line 1373)
        f_48613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1373, 31), 'f')
        # Applying the binary operator '%' (line 1373)
        result_mod_48614 = python_operator(stypy.reporting.localization.Localization(__file__, 1373, 21), '%', str_48612, f_48613)
        
        list_48620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1373, 21), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1373, 21), list_48620, result_mod_48614)
        # Applying the binary operator '+' (line 1373)
        result_add_48621 = python_operator(stypy.reporting.localization.Localization(__file__, 1373, 18), '+', result_add_48611, list_48620)
        
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to split(...): (line 1374)
        # Processing the call keyword arguments (line 1374)
        kwargs_48627 = {}
        # Getting the type of 'zlasrc' (line 1374)
        zlasrc_48625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1374, 43), 'zlasrc', False)
        # Obtaining the member 'split' of a type (line 1374)
        split_48626 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1374, 43), zlasrc_48625, 'split')
        # Calling split(args, kwargs) (line 1374)
        split_call_result_48628 = invoke(stypy.reporting.localization.Localization(__file__, 1374, 43), split_48626, *[], **kwargs_48627)
        
        comprehension_48629 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1374, 21), split_call_result_48628)
        # Assigning a type to the variable 'f' (line 1374)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1374, 21), 'f', comprehension_48629)
        str_48622 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1374, 21), 'str', 'z%s.f')
        # Getting the type of 'f' (line 1374)
        f_48623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1374, 31), 'f')
        # Applying the binary operator '%' (line 1374)
        result_mod_48624 = python_operator(stypy.reporting.localization.Localization(__file__, 1374, 21), '%', str_48622, f_48623)
        
        list_48630 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1374, 21), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1374, 21), list_48630, result_mod_48624)
        # Applying the binary operator '+' (line 1374)
        result_add_48631 = python_operator(stypy.reporting.localization.Localization(__file__, 1374, 18), '+', result_add_48621, list_48630)
        
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to split(...): (line 1375)
        # Processing the call keyword arguments (line 1375)
        kwargs_48641 = {}
        # Getting the type of 'allaux' (line 1375)
        allaux_48635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 42), 'allaux', False)
        # Getting the type of 'oclasrc' (line 1375)
        oclasrc_48636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 51), 'oclasrc', False)
        # Applying the binary operator '+' (line 1375)
        result_add_48637 = python_operator(stypy.reporting.localization.Localization(__file__, 1375, 42), '+', allaux_48635, oclasrc_48636)
        
        # Getting the type of 'ozlasrc' (line 1375)
        ozlasrc_48638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 61), 'ozlasrc', False)
        # Applying the binary operator '+' (line 1375)
        result_add_48639 = python_operator(stypy.reporting.localization.Localization(__file__, 1375, 59), '+', result_add_48637, ozlasrc_48638)
        
        # Obtaining the member 'split' of a type (line 1375)
        split_48640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1375, 59), result_add_48639, 'split')
        # Calling split(args, kwargs) (line 1375)
        split_call_result_48642 = invoke(stypy.reporting.localization.Localization(__file__, 1375, 59), split_48640, *[], **kwargs_48641)
        
        comprehension_48643 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1375, 21), split_call_result_48642)
        # Assigning a type to the variable 'f' (line 1375)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1375, 21), 'f', comprehension_48643)
        str_48632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1375, 21), 'str', '%s.f')
        # Getting the type of 'f' (line 1375)
        f_48633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 30), 'f')
        # Applying the binary operator '%' (line 1375)
        result_mod_48634 = python_operator(stypy.reporting.localization.Localization(__file__, 1375, 21), '%', str_48632, f_48633)
        
        list_48644 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1375, 21), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1375, 21), list_48644, result_mod_48634)
        # Applying the binary operator '+' (line 1375)
        result_add_48645 = python_operator(stypy.reporting.localization.Localization(__file__, 1375, 18), '+', result_add_48631, list_48644)
        
        # Assigning a type to the variable 'sources' (line 1371)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1371, 8), 'sources', result_add_48645)
        
        # Assigning a ListComp to a Name (line 1376):
        
        # Assigning a ListComp to a Name (line 1376):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'sources' (line 1376)
        sources_48653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1376, 53), 'sources')
        comprehension_48654 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1376, 19), sources_48653)
        # Assigning a type to the variable 'f' (line 1376)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1376, 19), 'f', comprehension_48654)
        
        # Call to join(...): (line 1376)
        # Processing the call arguments (line 1376)
        # Getting the type of 'src_dir' (line 1376)
        src_dir_48649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1376, 32), 'src_dir', False)
        # Getting the type of 'f' (line 1376)
        f_48650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1376, 41), 'f', False)
        # Processing the call keyword arguments (line 1376)
        kwargs_48651 = {}
        # Getting the type of 'os' (line 1376)
        os_48646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1376, 19), 'os', False)
        # Obtaining the member 'path' of a type (line 1376)
        path_48647 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1376, 19), os_48646, 'path')
        # Obtaining the member 'join' of a type (line 1376)
        join_48648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1376, 19), path_48647, 'join')
        # Calling join(args, kwargs) (line 1376)
        join_call_result_48652 = invoke(stypy.reporting.localization.Localization(__file__, 1376, 19), join_48648, *[src_dir_48649, f_48650], **kwargs_48651)
        
        list_48655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1376, 19), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1376, 19), list_48655, join_call_result_48652)
        # Assigning a type to the variable 'sources' (line 1376)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1376, 8), 'sources', list_48655)
        
        # Assigning a Call to a Name (line 1378):
        
        # Assigning a Call to a Name (line 1378):
        
        # Call to join(...): (line 1378)
        # Processing the call arguments (line 1378)
        # Getting the type of 'src_dir' (line 1378)
        src_dir_48659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1378, 32), 'src_dir', False)
        str_48660 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1378, 41), 'str', '..')
        str_48661 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1378, 47), 'str', 'INSTALL')
        # Processing the call keyword arguments (line 1378)
        kwargs_48662 = {}
        # Getting the type of 'os' (line 1378)
        os_48656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1378, 19), 'os', False)
        # Obtaining the member 'path' of a type (line 1378)
        path_48657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1378, 19), os_48656, 'path')
        # Obtaining the member 'join' of a type (line 1378)
        join_48658 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1378, 19), path_48657, 'join')
        # Calling join(args, kwargs) (line 1378)
        join_call_result_48663 = invoke(stypy.reporting.localization.Localization(__file__, 1378, 19), join_48658, *[src_dir_48659, str_48660, str_48661], **kwargs_48662)
        
        # Assigning a type to the variable 'src_dir2' (line 1378)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1378, 8), 'src_dir2', join_call_result_48663)
        
        # Getting the type of 'sources' (line 1379)
        sources_48664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 8), 'sources')
        # Calculating list comprehension
        # Calculating comprehension expression
        str_48674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1379, 67), 'str', 'sdcz')
        comprehension_48675 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1379, 20), str_48674)
        # Assigning a type to the variable 'p' (line 1379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1379, 20), 'p', comprehension_48675)
        
        # Call to join(...): (line 1379)
        # Processing the call arguments (line 1379)
        # Getting the type of 'src_dir2' (line 1379)
        src_dir2_48668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 33), 'src_dir2', False)
        # Getting the type of 'p' (line 1379)
        p_48669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 43), 'p', False)
        str_48670 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1379, 47), 'str', 'lamch.f')
        # Applying the binary operator '+' (line 1379)
        result_add_48671 = python_operator(stypy.reporting.localization.Localization(__file__, 1379, 43), '+', p_48669, str_48670)
        
        # Processing the call keyword arguments (line 1379)
        kwargs_48672 = {}
        # Getting the type of 'os' (line 1379)
        os_48665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 20), 'os', False)
        # Obtaining the member 'path' of a type (line 1379)
        path_48666 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1379, 20), os_48665, 'path')
        # Obtaining the member 'join' of a type (line 1379)
        join_48667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1379, 20), path_48666, 'join')
        # Calling join(args, kwargs) (line 1379)
        join_call_result_48673 = invoke(stypy.reporting.localization.Localization(__file__, 1379, 20), join_48667, *[src_dir2_48668, result_add_48671], **kwargs_48672)
        
        list_48676 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1379, 20), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1379, 20), list_48676, join_call_result_48673)
        # Applying the binary operator '+=' (line 1379)
        result_iadd_48677 = python_operator(stypy.reporting.localization.Localization(__file__, 1379, 8), '+=', sources_48664, list_48676)
        # Assigning a type to the variable 'sources' (line 1379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1379, 8), 'sources', result_iadd_48677)
        
        
        # Getting the type of 'sources' (line 1381)
        sources_48678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1381, 8), 'sources')
        # Calculating list comprehension
        # Calculating comprehension expression
        str_48688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1381, 66), 'str', 'sdcz')
        comprehension_48689 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1381, 20), str_48688)
        # Assigning a type to the variable 'p' (line 1381)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1381, 20), 'p', comprehension_48689)
        
        # Call to join(...): (line 1381)
        # Processing the call arguments (line 1381)
        # Getting the type of 'src_dir' (line 1381)
        src_dir_48682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1381, 33), 'src_dir', False)
        # Getting the type of 'p' (line 1381)
        p_48683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1381, 42), 'p', False)
        str_48684 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1381, 46), 'str', 'larfp.f')
        # Applying the binary operator '+' (line 1381)
        result_add_48685 = python_operator(stypy.reporting.localization.Localization(__file__, 1381, 42), '+', p_48683, str_48684)
        
        # Processing the call keyword arguments (line 1381)
        kwargs_48686 = {}
        # Getting the type of 'os' (line 1381)
        os_48679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1381, 20), 'os', False)
        # Obtaining the member 'path' of a type (line 1381)
        path_48680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1381, 20), os_48679, 'path')
        # Obtaining the member 'join' of a type (line 1381)
        join_48681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1381, 20), path_48680, 'join')
        # Calling join(args, kwargs) (line 1381)
        join_call_result_48687 = invoke(stypy.reporting.localization.Localization(__file__, 1381, 20), join_48681, *[src_dir_48682, result_add_48685], **kwargs_48686)
        
        list_48690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1381, 20), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1381, 20), list_48690, join_call_result_48687)
        # Applying the binary operator '+=' (line 1381)
        result_iadd_48691 = python_operator(stypy.reporting.localization.Localization(__file__, 1381, 8), '+=', sources_48678, list_48690)
        # Assigning a type to the variable 'sources' (line 1381)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1381, 8), 'sources', result_iadd_48691)
        
        
        # Getting the type of 'sources' (line 1382)
        sources_48692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 8), 'sources')
        # Calculating list comprehension
        # Calculating comprehension expression
        str_48704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1382, 71), 'str', 'sdcz')
        comprehension_48705 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1382, 20), str_48704)
        # Assigning a type to the variable 'p' (line 1382)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1382, 20), 'p', comprehension_48705)
        
        # Call to join(...): (line 1382)
        # Processing the call arguments (line 1382)
        # Getting the type of 'src_dir' (line 1382)
        src_dir_48696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 33), 'src_dir', False)
        str_48697 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1382, 42), 'str', 'ila')
        # Getting the type of 'p' (line 1382)
        p_48698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 50), 'p', False)
        # Applying the binary operator '+' (line 1382)
        result_add_48699 = python_operator(stypy.reporting.localization.Localization(__file__, 1382, 42), '+', str_48697, p_48698)
        
        str_48700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1382, 54), 'str', 'lr.f')
        # Applying the binary operator '+' (line 1382)
        result_add_48701 = python_operator(stypy.reporting.localization.Localization(__file__, 1382, 52), '+', result_add_48699, str_48700)
        
        # Processing the call keyword arguments (line 1382)
        kwargs_48702 = {}
        # Getting the type of 'os' (line 1382)
        os_48693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 20), 'os', False)
        # Obtaining the member 'path' of a type (line 1382)
        path_48694 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1382, 20), os_48693, 'path')
        # Obtaining the member 'join' of a type (line 1382)
        join_48695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1382, 20), path_48694, 'join')
        # Calling join(args, kwargs) (line 1382)
        join_call_result_48703 = invoke(stypy.reporting.localization.Localization(__file__, 1382, 20), join_48695, *[src_dir_48696, result_add_48701], **kwargs_48702)
        
        list_48706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1382, 20), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1382, 20), list_48706, join_call_result_48703)
        # Applying the binary operator '+=' (line 1382)
        result_iadd_48707 = python_operator(stypy.reporting.localization.Localization(__file__, 1382, 8), '+=', sources_48692, list_48706)
        # Assigning a type to the variable 'sources' (line 1382)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1382, 8), 'sources', result_iadd_48707)
        
        
        # Getting the type of 'sources' (line 1383)
        sources_48708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1383, 8), 'sources')
        # Calculating list comprehension
        # Calculating comprehension expression
        str_48720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1383, 71), 'str', 'sdcz')
        comprehension_48721 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1383, 20), str_48720)
        # Assigning a type to the variable 'p' (line 1383)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1383, 20), 'p', comprehension_48721)
        
        # Call to join(...): (line 1383)
        # Processing the call arguments (line 1383)
        # Getting the type of 'src_dir' (line 1383)
        src_dir_48712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1383, 33), 'src_dir', False)
        str_48713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1383, 42), 'str', 'ila')
        # Getting the type of 'p' (line 1383)
        p_48714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1383, 50), 'p', False)
        # Applying the binary operator '+' (line 1383)
        result_add_48715 = python_operator(stypy.reporting.localization.Localization(__file__, 1383, 42), '+', str_48713, p_48714)
        
        str_48716 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1383, 54), 'str', 'lc.f')
        # Applying the binary operator '+' (line 1383)
        result_add_48717 = python_operator(stypy.reporting.localization.Localization(__file__, 1383, 52), '+', result_add_48715, str_48716)
        
        # Processing the call keyword arguments (line 1383)
        kwargs_48718 = {}
        # Getting the type of 'os' (line 1383)
        os_48709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1383, 20), 'os', False)
        # Obtaining the member 'path' of a type (line 1383)
        path_48710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1383, 20), os_48709, 'path')
        # Obtaining the member 'join' of a type (line 1383)
        join_48711 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1383, 20), path_48710, 'join')
        # Calling join(args, kwargs) (line 1383)
        join_call_result_48719 = invoke(stypy.reporting.localization.Localization(__file__, 1383, 20), join_48711, *[src_dir_48712, result_add_48717], **kwargs_48718)
        
        list_48722 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1383, 20), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1383, 20), list_48722, join_call_result_48719)
        # Applying the binary operator '+=' (line 1383)
        result_iadd_48723 = python_operator(stypy.reporting.localization.Localization(__file__, 1383, 8), '+=', sources_48708, list_48722)
        # Assigning a type to the variable 'sources' (line 1383)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1383, 8), 'sources', result_iadd_48723)
        
        
        # Assigning a ListComp to a Name (line 1387):
        
        # Assigning a ListComp to a Name (line 1387):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'sources' (line 1387)
        sources_48731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 30), 'sources')
        comprehension_48732 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1387, 19), sources_48731)
        # Assigning a type to the variable 'f' (line 1387)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1387, 19), 'f', comprehension_48732)
        
        # Call to isfile(...): (line 1387)
        # Processing the call arguments (line 1387)
        # Getting the type of 'f' (line 1387)
        f_48728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 56), 'f', False)
        # Processing the call keyword arguments (line 1387)
        kwargs_48729 = {}
        # Getting the type of 'os' (line 1387)
        os_48725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 41), 'os', False)
        # Obtaining the member 'path' of a type (line 1387)
        path_48726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1387, 41), os_48725, 'path')
        # Obtaining the member 'isfile' of a type (line 1387)
        isfile_48727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1387, 41), path_48726, 'isfile')
        # Calling isfile(args, kwargs) (line 1387)
        isfile_call_result_48730 = invoke(stypy.reporting.localization.Localization(__file__, 1387, 41), isfile_48727, *[f_48728], **kwargs_48729)
        
        # Getting the type of 'f' (line 1387)
        f_48724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 19), 'f')
        list_48733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1387, 19), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1387, 19), list_48733, f_48724)
        # Assigning a type to the variable 'sources' (line 1387)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1387, 8), 'sources', list_48733)
        
        # Assigning a Dict to a Name (line 1388):
        
        # Assigning a Dict to a Name (line 1388):
        
        # Obtaining an instance of the builtin type 'dict' (line 1388)
        dict_48734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1388, 15), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 1388)
        # Adding element type (key, value) (line 1388)
        str_48735 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1388, 16), 'str', 'sources')
        # Getting the type of 'sources' (line 1388)
        sources_48736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 27), 'sources')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1388, 15), dict_48734, (str_48735, sources_48736))
        # Adding element type (key, value) (line 1388)
        str_48737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1388, 36), 'str', 'language')
        str_48738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1388, 48), 'str', 'f77')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1388, 15), dict_48734, (str_48737, str_48738))
        
        # Assigning a type to the variable 'info' (line 1388)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1388, 8), 'info', dict_48734)
        
        # Call to set_info(...): (line 1389)
        # Processing the call keyword arguments (line 1389)
        # Getting the type of 'info' (line 1389)
        info_48741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1389, 24), 'info', False)
        kwargs_48742 = {'info_48741': info_48741}
        # Getting the type of 'self' (line 1389)
        self_48739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1389, 8), 'self', False)
        # Obtaining the member 'set_info' of a type (line 1389)
        set_info_48740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1389, 8), self_48739, 'set_info')
        # Calling set_info(args, kwargs) (line 1389)
        set_info_call_result_48743 = invoke(stypy.reporting.localization.Localization(__file__, 1389, 8), set_info_48740, *[], **kwargs_48742)
        
        
        # ################# End of 'calc_info(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'calc_info' in the type store
        # Getting the type of 'stypy_return_type' (line 1287)
        stypy_return_type_48744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1287, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_48744)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'calc_info'
        return stypy_return_type_48744


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1275, 0, False)
        # Assigning a type to the variable 'self' (line 1276)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1276, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'lapack_src_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'lapack_src_info' (line 1275)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1275, 0), 'lapack_src_info', lapack_src_info)

# Assigning a Str to a Name (line 1276):
str_48745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1276, 14), 'str', 'lapack_src')
# Getting the type of 'lapack_src_info'
lapack_src_info_48746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'lapack_src_info')
# Setting the type of the member 'section' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), lapack_src_info_48746, 'section', str_48745)

# Assigning a Str to a Name (line 1277):
str_48747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1277, 18), 'str', 'LAPACK_SRC')
# Getting the type of 'lapack_src_info'
lapack_src_info_48748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'lapack_src_info')
# Setting the type of the member 'dir_env_var' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), lapack_src_info_48748, 'dir_env_var', str_48747)

# Assigning a Name to a Name (line 1278):
# Getting the type of 'LapackSrcNotFoundError' (line 1278)
LapackSrcNotFoundError_48749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1278, 20), 'LapackSrcNotFoundError')
# Getting the type of 'lapack_src_info'
lapack_src_info_48750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'lapack_src_info')
# Setting the type of the member 'notfounderror' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), lapack_src_info_48750, 'notfounderror', LapackSrcNotFoundError_48749)

# Assigning a Str to a Name (line 1391):

# Assigning a Str to a Name (line 1391):
str_48751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1398, (-1)), 'str', '\n/* This file is generated from numpy/distutils/system_info.py */\nvoid ATL_buildinfo(void);\nint main(void) {\n  ATL_buildinfo();\n  return 0;\n}\n')
# Assigning a type to the variable 'atlas_version_c_text' (line 1391)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1391, 0), 'atlas_version_c_text', str_48751)

# Assigning a Dict to a Name (line 1400):

# Assigning a Dict to a Name (line 1400):

# Obtaining an instance of the builtin type 'dict' (line 1400)
dict_48752 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1400, 24), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 1400)

# Assigning a type to the variable '_cached_atlas_version' (line 1400)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1400, 0), '_cached_atlas_version', dict_48752)

@norecursion
def get_atlas_version(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_atlas_version'
    module_type_store = module_type_store.open_function_context('get_atlas_version', 1403, 0, False)
    
    # Passed parameters checking function
    get_atlas_version.stypy_localization = localization
    get_atlas_version.stypy_type_of_self = None
    get_atlas_version.stypy_type_store = module_type_store
    get_atlas_version.stypy_function_name = 'get_atlas_version'
    get_atlas_version.stypy_param_names_list = []
    get_atlas_version.stypy_varargs_param_name = None
    get_atlas_version.stypy_kwargs_param_name = 'config'
    get_atlas_version.stypy_call_defaults = defaults
    get_atlas_version.stypy_call_varargs = varargs
    get_atlas_version.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_atlas_version', [], None, 'config', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_atlas_version', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_atlas_version(...)' code ##################

    
    # Assigning a Call to a Name (line 1404):
    
    # Assigning a Call to a Name (line 1404):
    
    # Call to get(...): (line 1404)
    # Processing the call arguments (line 1404)
    str_48755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1404, 27), 'str', 'libraries')
    
    # Obtaining an instance of the builtin type 'list' (line 1404)
    list_48756 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1404, 40), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1404)
    
    # Processing the call keyword arguments (line 1404)
    kwargs_48757 = {}
    # Getting the type of 'config' (line 1404)
    config_48753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 16), 'config', False)
    # Obtaining the member 'get' of a type (line 1404)
    get_48754 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1404, 16), config_48753, 'get')
    # Calling get(args, kwargs) (line 1404)
    get_call_result_48758 = invoke(stypy.reporting.localization.Localization(__file__, 1404, 16), get_48754, *[str_48755, list_48756], **kwargs_48757)
    
    # Assigning a type to the variable 'libraries' (line 1404)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1404, 4), 'libraries', get_call_result_48758)
    
    # Assigning a Call to a Name (line 1405):
    
    # Assigning a Call to a Name (line 1405):
    
    # Call to get(...): (line 1405)
    # Processing the call arguments (line 1405)
    str_48761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1405, 30), 'str', 'library_dirs')
    
    # Obtaining an instance of the builtin type 'list' (line 1405)
    list_48762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1405, 46), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1405)
    
    # Processing the call keyword arguments (line 1405)
    kwargs_48763 = {}
    # Getting the type of 'config' (line 1405)
    config_48759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 19), 'config', False)
    # Obtaining the member 'get' of a type (line 1405)
    get_48760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1405, 19), config_48759, 'get')
    # Calling get(args, kwargs) (line 1405)
    get_call_result_48764 = invoke(stypy.reporting.localization.Localization(__file__, 1405, 19), get_48760, *[str_48761, list_48762], **kwargs_48763)
    
    # Assigning a type to the variable 'library_dirs' (line 1405)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1405, 4), 'library_dirs', get_call_result_48764)
    
    # Assigning a Tuple to a Name (line 1406):
    
    # Assigning a Tuple to a Name (line 1406):
    
    # Obtaining an instance of the builtin type 'tuple' (line 1406)
    tuple_48765 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1406, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1406)
    # Adding element type (line 1406)
    
    # Call to tuple(...): (line 1406)
    # Processing the call arguments (line 1406)
    # Getting the type of 'libraries' (line 1406)
    libraries_48767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1406, 17), 'libraries', False)
    # Processing the call keyword arguments (line 1406)
    kwargs_48768 = {}
    # Getting the type of 'tuple' (line 1406)
    tuple_48766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1406, 11), 'tuple', False)
    # Calling tuple(args, kwargs) (line 1406)
    tuple_call_result_48769 = invoke(stypy.reporting.localization.Localization(__file__, 1406, 11), tuple_48766, *[libraries_48767], **kwargs_48768)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1406, 11), tuple_48765, tuple_call_result_48769)
    # Adding element type (line 1406)
    
    # Call to tuple(...): (line 1406)
    # Processing the call arguments (line 1406)
    # Getting the type of 'library_dirs' (line 1406)
    library_dirs_48771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1406, 35), 'library_dirs', False)
    # Processing the call keyword arguments (line 1406)
    kwargs_48772 = {}
    # Getting the type of 'tuple' (line 1406)
    tuple_48770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1406, 29), 'tuple', False)
    # Calling tuple(args, kwargs) (line 1406)
    tuple_call_result_48773 = invoke(stypy.reporting.localization.Localization(__file__, 1406, 29), tuple_48770, *[library_dirs_48771], **kwargs_48772)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1406, 11), tuple_48765, tuple_call_result_48773)
    
    # Assigning a type to the variable 'key' (line 1406)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1406, 4), 'key', tuple_48765)
    
    
    # Getting the type of 'key' (line 1407)
    key_48774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 7), 'key')
    # Getting the type of '_cached_atlas_version' (line 1407)
    _cached_atlas_version_48775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 14), '_cached_atlas_version')
    # Applying the binary operator 'in' (line 1407)
    result_contains_48776 = python_operator(stypy.reporting.localization.Localization(__file__, 1407, 7), 'in', key_48774, _cached_atlas_version_48775)
    
    # Testing the type of an if condition (line 1407)
    if_condition_48777 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1407, 4), result_contains_48776)
    # Assigning a type to the variable 'if_condition_48777' (line 1407)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1407, 4), 'if_condition_48777', if_condition_48777)
    # SSA begins for if statement (line 1407)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining the type of the subscript
    # Getting the type of 'key' (line 1408)
    key_48778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 37), 'key')
    # Getting the type of '_cached_atlas_version' (line 1408)
    _cached_atlas_version_48779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 15), '_cached_atlas_version')
    # Obtaining the member '__getitem__' of a type (line 1408)
    getitem___48780 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1408, 15), _cached_atlas_version_48779, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1408)
    subscript_call_result_48781 = invoke(stypy.reporting.localization.Localization(__file__, 1408, 15), getitem___48780, key_48778)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1408)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1408, 8), 'stypy_return_type', subscript_call_result_48781)
    # SSA join for if statement (line 1407)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1409):
    
    # Assigning a Call to a Name (line 1409):
    
    # Call to cmd_config(...): (line 1409)
    # Processing the call arguments (line 1409)
    
    # Call to Distribution(...): (line 1409)
    # Processing the call keyword arguments (line 1409)
    kwargs_48784 = {}
    # Getting the type of 'Distribution' (line 1409)
    Distribution_48783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 19), 'Distribution', False)
    # Calling Distribution(args, kwargs) (line 1409)
    Distribution_call_result_48785 = invoke(stypy.reporting.localization.Localization(__file__, 1409, 19), Distribution_48783, *[], **kwargs_48784)
    
    # Processing the call keyword arguments (line 1409)
    kwargs_48786 = {}
    # Getting the type of 'cmd_config' (line 1409)
    cmd_config_48782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 8), 'cmd_config', False)
    # Calling cmd_config(args, kwargs) (line 1409)
    cmd_config_call_result_48787 = invoke(stypy.reporting.localization.Localization(__file__, 1409, 8), cmd_config_48782, *[Distribution_call_result_48785], **kwargs_48786)
    
    # Assigning a type to the variable 'c' (line 1409)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1409, 4), 'c', cmd_config_call_result_48787)
    
    # Assigning a Name to a Name (line 1410):
    
    # Assigning a Name to a Name (line 1410):
    # Getting the type of 'None' (line 1410)
    None_48788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1410, 20), 'None')
    # Assigning a type to the variable 'atlas_version' (line 1410)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1410, 4), 'atlas_version', None_48788)
    
    # Assigning a Dict to a Name (line 1411):
    
    # Assigning a Dict to a Name (line 1411):
    
    # Obtaining an instance of the builtin type 'dict' (line 1411)
    dict_48789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1411, 11), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 1411)
    
    # Assigning a type to the variable 'info' (line 1411)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1411, 4), 'info', dict_48789)
    
    
    # SSA begins for try-except statement (line 1412)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Tuple (line 1413):
    
    # Assigning a Call to a Name:
    
    # Call to get_output(...): (line 1413)
    # Processing the call arguments (line 1413)
    # Getting the type of 'atlas_version_c_text' (line 1413)
    atlas_version_c_text_48792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 28), 'atlas_version_c_text', False)
    # Processing the call keyword arguments (line 1413)
    # Getting the type of 'libraries' (line 1414)
    libraries_48793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 38), 'libraries', False)
    keyword_48794 = libraries_48793
    # Getting the type of 'library_dirs' (line 1414)
    library_dirs_48795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 62), 'library_dirs', False)
    keyword_48796 = library_dirs_48795
    
    # Getting the type of 'system_info' (line 1415)
    system_info_48797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1415, 37), 'system_info', False)
    # Obtaining the member 'verbosity' of a type (line 1415)
    verbosity_48798 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1415, 37), system_info_48797, 'verbosity')
    int_48799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1415, 61), 'int')
    # Applying the binary operator '>' (line 1415)
    result_gt_48800 = python_operator(stypy.reporting.localization.Localization(__file__, 1415, 37), '>', verbosity_48798, int_48799)
    
    keyword_48801 = result_gt_48800
    kwargs_48802 = {'libraries': keyword_48794, 'library_dirs': keyword_48796, 'use_tee': keyword_48801}
    # Getting the type of 'c' (line 1413)
    c_48790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 15), 'c', False)
    # Obtaining the member 'get_output' of a type (line 1413)
    get_output_48791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1413, 15), c_48790, 'get_output')
    # Calling get_output(args, kwargs) (line 1413)
    get_output_call_result_48803 = invoke(stypy.reporting.localization.Localization(__file__, 1413, 15), get_output_48791, *[atlas_version_c_text_48792], **kwargs_48802)
    
    # Assigning a type to the variable 'call_assignment_45345' (line 1413)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1413, 8), 'call_assignment_45345', get_output_call_result_48803)
    
    # Assigning a Call to a Name (line 1413):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_48806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1413, 8), 'int')
    # Processing the call keyword arguments
    kwargs_48807 = {}
    # Getting the type of 'call_assignment_45345' (line 1413)
    call_assignment_45345_48804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 8), 'call_assignment_45345', False)
    # Obtaining the member '__getitem__' of a type (line 1413)
    getitem___48805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1413, 8), call_assignment_45345_48804, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_48808 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___48805, *[int_48806], **kwargs_48807)
    
    # Assigning a type to the variable 'call_assignment_45346' (line 1413)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1413, 8), 'call_assignment_45346', getitem___call_result_48808)
    
    # Assigning a Name to a Name (line 1413):
    # Getting the type of 'call_assignment_45346' (line 1413)
    call_assignment_45346_48809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 8), 'call_assignment_45346')
    # Assigning a type to the variable 's' (line 1413)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1413, 8), 's', call_assignment_45346_48809)
    
    # Assigning a Call to a Name (line 1413):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_48812 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1413, 8), 'int')
    # Processing the call keyword arguments
    kwargs_48813 = {}
    # Getting the type of 'call_assignment_45345' (line 1413)
    call_assignment_45345_48810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 8), 'call_assignment_45345', False)
    # Obtaining the member '__getitem__' of a type (line 1413)
    getitem___48811 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1413, 8), call_assignment_45345_48810, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_48814 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___48811, *[int_48812], **kwargs_48813)
    
    # Assigning a type to the variable 'call_assignment_45347' (line 1413)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1413, 8), 'call_assignment_45347', getitem___call_result_48814)
    
    # Assigning a Name to a Name (line 1413):
    # Getting the type of 'call_assignment_45347' (line 1413)
    call_assignment_45347_48815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 8), 'call_assignment_45347')
    # Assigning a type to the variable 'o' (line 1413)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1413, 11), 'o', call_assignment_45347_48815)
    
    
    # Evaluating a boolean operation
    # Getting the type of 's' (line 1416)
    s_48816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1416, 11), 's')
    
    # Call to search(...): (line 1416)
    # Processing the call arguments (line 1416)
    str_48819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1416, 27), 'str', 'undefined reference to `_gfortran')
    # Getting the type of 'o' (line 1416)
    o_48820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1416, 65), 'o', False)
    # Getting the type of 're' (line 1416)
    re_48821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1416, 68), 're', False)
    # Obtaining the member 'M' of a type (line 1416)
    M_48822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1416, 68), re_48821, 'M')
    # Processing the call keyword arguments (line 1416)
    kwargs_48823 = {}
    # Getting the type of 're' (line 1416)
    re_48817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1416, 17), 're', False)
    # Obtaining the member 'search' of a type (line 1416)
    search_48818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1416, 17), re_48817, 'search')
    # Calling search(args, kwargs) (line 1416)
    search_call_result_48824 = invoke(stypy.reporting.localization.Localization(__file__, 1416, 17), search_48818, *[str_48819, o_48820, M_48822], **kwargs_48823)
    
    # Applying the binary operator 'and' (line 1416)
    result_and_keyword_48825 = python_operator(stypy.reporting.localization.Localization(__file__, 1416, 11), 'and', s_48816, search_call_result_48824)
    
    # Testing the type of an if condition (line 1416)
    if_condition_48826 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1416, 8), result_and_keyword_48825)
    # Assigning a type to the variable 'if_condition_48826' (line 1416)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1416, 8), 'if_condition_48826', if_condition_48826)
    # SSA begins for if statement (line 1416)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Tuple (line 1417):
    
    # Assigning a Call to a Name:
    
    # Call to get_output(...): (line 1417)
    # Processing the call arguments (line 1417)
    # Getting the type of 'atlas_version_c_text' (line 1417)
    atlas_version_c_text_48829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 32), 'atlas_version_c_text', False)
    # Processing the call keyword arguments (line 1417)
    # Getting the type of 'libraries' (line 1418)
    libraries_48830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1418, 42), 'libraries', False)
    
    # Obtaining an instance of the builtin type 'list' (line 1418)
    list_48831 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1418, 54), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1418)
    # Adding element type (line 1418)
    str_48832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1418, 55), 'str', 'gfortran')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1418, 54), list_48831, str_48832)
    
    # Applying the binary operator '+' (line 1418)
    result_add_48833 = python_operator(stypy.reporting.localization.Localization(__file__, 1418, 42), '+', libraries_48830, list_48831)
    
    keyword_48834 = result_add_48833
    # Getting the type of 'library_dirs' (line 1419)
    library_dirs_48835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1419, 45), 'library_dirs', False)
    keyword_48836 = library_dirs_48835
    
    # Getting the type of 'system_info' (line 1420)
    system_info_48837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1420, 41), 'system_info', False)
    # Obtaining the member 'verbosity' of a type (line 1420)
    verbosity_48838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1420, 41), system_info_48837, 'verbosity')
    int_48839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1420, 65), 'int')
    # Applying the binary operator '>' (line 1420)
    result_gt_48840 = python_operator(stypy.reporting.localization.Localization(__file__, 1420, 41), '>', verbosity_48838, int_48839)
    
    keyword_48841 = result_gt_48840
    kwargs_48842 = {'libraries': keyword_48834, 'library_dirs': keyword_48836, 'use_tee': keyword_48841}
    # Getting the type of 'c' (line 1417)
    c_48827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 19), 'c', False)
    # Obtaining the member 'get_output' of a type (line 1417)
    get_output_48828 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1417, 19), c_48827, 'get_output')
    # Calling get_output(args, kwargs) (line 1417)
    get_output_call_result_48843 = invoke(stypy.reporting.localization.Localization(__file__, 1417, 19), get_output_48828, *[atlas_version_c_text_48829], **kwargs_48842)
    
    # Assigning a type to the variable 'call_assignment_45348' (line 1417)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1417, 12), 'call_assignment_45348', get_output_call_result_48843)
    
    # Assigning a Call to a Name (line 1417):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_48846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1417, 12), 'int')
    # Processing the call keyword arguments
    kwargs_48847 = {}
    # Getting the type of 'call_assignment_45348' (line 1417)
    call_assignment_45348_48844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 12), 'call_assignment_45348', False)
    # Obtaining the member '__getitem__' of a type (line 1417)
    getitem___48845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1417, 12), call_assignment_45348_48844, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_48848 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___48845, *[int_48846], **kwargs_48847)
    
    # Assigning a type to the variable 'call_assignment_45349' (line 1417)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1417, 12), 'call_assignment_45349', getitem___call_result_48848)
    
    # Assigning a Name to a Name (line 1417):
    # Getting the type of 'call_assignment_45349' (line 1417)
    call_assignment_45349_48849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 12), 'call_assignment_45349')
    # Assigning a type to the variable 's' (line 1417)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1417, 12), 's', call_assignment_45349_48849)
    
    # Assigning a Call to a Name (line 1417):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_48852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1417, 12), 'int')
    # Processing the call keyword arguments
    kwargs_48853 = {}
    # Getting the type of 'call_assignment_45348' (line 1417)
    call_assignment_45348_48850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 12), 'call_assignment_45348', False)
    # Obtaining the member '__getitem__' of a type (line 1417)
    getitem___48851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1417, 12), call_assignment_45348_48850, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_48854 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___48851, *[int_48852], **kwargs_48853)
    
    # Assigning a type to the variable 'call_assignment_45350' (line 1417)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1417, 12), 'call_assignment_45350', getitem___call_result_48854)
    
    # Assigning a Name to a Name (line 1417):
    # Getting the type of 'call_assignment_45350' (line 1417)
    call_assignment_45350_48855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 12), 'call_assignment_45350')
    # Assigning a type to the variable 'o' (line 1417)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1417, 15), 'o', call_assignment_45350_48855)
    
    
    # Getting the type of 's' (line 1421)
    s_48856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1421, 19), 's')
    # Applying the 'not' unary operator (line 1421)
    result_not__48857 = python_operator(stypy.reporting.localization.Localization(__file__, 1421, 15), 'not', s_48856)
    
    # Testing the type of an if condition (line 1421)
    if_condition_48858 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1421, 12), result_not__48857)
    # Assigning a type to the variable 'if_condition_48858' (line 1421)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1421, 12), 'if_condition_48858', if_condition_48858)
    # SSA begins for if statement (line 1421)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 1422)
    # Processing the call arguments (line 1422)
    str_48861 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1431, (-1)), 'str', '\n*****************************************************\nLinkage with ATLAS requires gfortran. Use\n\n  python setup.py config_fc --fcompiler=gnu95 ...\n\nwhen building extension libraries that use ATLAS.\nMake sure that -lgfortran is used for C++ extensions.\n*****************************************************\n')
    # Processing the call keyword arguments (line 1422)
    kwargs_48862 = {}
    # Getting the type of 'warnings' (line 1422)
    warnings_48859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1422, 16), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 1422)
    warn_48860 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1422, 16), warnings_48859, 'warn')
    # Calling warn(args, kwargs) (line 1422)
    warn_call_result_48863 = invoke(stypy.reporting.localization.Localization(__file__, 1422, 16), warn_48860, *[str_48861], **kwargs_48862)
    
    
    # Call to dict_append(...): (line 1432)
    # Processing the call arguments (line 1432)
    # Getting the type of 'info' (line 1432)
    info_48865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1432, 28), 'info', False)
    # Processing the call keyword arguments (line 1432)
    str_48866 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1432, 43), 'str', 'f90')
    keyword_48867 = str_48866
    
    # Obtaining an instance of the builtin type 'list' (line 1433)
    list_48868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1433, 42), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1433)
    # Adding element type (line 1433)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1433)
    tuple_48869 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1433, 44), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1433)
    # Adding element type (line 1433)
    str_48870 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1433, 44), 'str', 'ATLAS_REQUIRES_GFORTRAN')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1433, 44), tuple_48869, str_48870)
    # Adding element type (line 1433)
    # Getting the type of 'None' (line 1433)
    None_48871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1433, 71), 'None', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1433, 44), tuple_48869, None_48871)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1433, 42), list_48868, tuple_48869)
    
    keyword_48872 = list_48868
    kwargs_48873 = {'define_macros': keyword_48872, 'language': keyword_48867}
    # Getting the type of 'dict_append' (line 1432)
    dict_append_48864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1432, 16), 'dict_append', False)
    # Calling dict_append(args, kwargs) (line 1432)
    dict_append_call_result_48874 = invoke(stypy.reporting.localization.Localization(__file__, 1432, 16), dict_append_48864, *[info_48865], **kwargs_48873)
    
    # SSA join for if statement (line 1421)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1416)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the except part of a try statement (line 1412)
    # SSA branch for the except 'Exception' branch of a try statement (line 1412)
    module_type_store.open_ssa_branch('except')
    
    # Getting the type of 'library_dirs' (line 1436)
    library_dirs_48875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1436, 17), 'library_dirs')
    # Testing the type of a for loop iterable (line 1436)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1436, 8), library_dirs_48875)
    # Getting the type of the for loop variable (line 1436)
    for_loop_var_48876 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1436, 8), library_dirs_48875)
    # Assigning a type to the variable 'o' (line 1436)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1436, 8), 'o', for_loop_var_48876)
    # SSA begins for a for statement (line 1436)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 1437):
    
    # Assigning a Call to a Name (line 1437):
    
    # Call to search(...): (line 1437)
    # Processing the call arguments (line 1437)
    str_48879 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1437, 26), 'str', 'ATLAS_(?P<version>\\d+[.]\\d+[.]\\d+)_')
    # Getting the type of 'o' (line 1437)
    o_48880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 66), 'o', False)
    # Processing the call keyword arguments (line 1437)
    kwargs_48881 = {}
    # Getting the type of 're' (line 1437)
    re_48877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 16), 're', False)
    # Obtaining the member 'search' of a type (line 1437)
    search_48878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1437, 16), re_48877, 'search')
    # Calling search(args, kwargs) (line 1437)
    search_call_result_48882 = invoke(stypy.reporting.localization.Localization(__file__, 1437, 16), search_48878, *[str_48879, o_48880], **kwargs_48881)
    
    # Assigning a type to the variable 'm' (line 1437)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1437, 12), 'm', search_call_result_48882)
    
    # Getting the type of 'm' (line 1438)
    m_48883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1438, 15), 'm')
    # Testing the type of an if condition (line 1438)
    if_condition_48884 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1438, 12), m_48883)
    # Assigning a type to the variable 'if_condition_48884' (line 1438)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1438, 12), 'if_condition_48884', if_condition_48884)
    # SSA begins for if statement (line 1438)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1439):
    
    # Assigning a Call to a Name (line 1439):
    
    # Call to group(...): (line 1439)
    # Processing the call arguments (line 1439)
    str_48887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1439, 40), 'str', 'version')
    # Processing the call keyword arguments (line 1439)
    kwargs_48888 = {}
    # Getting the type of 'm' (line 1439)
    m_48885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1439, 32), 'm', False)
    # Obtaining the member 'group' of a type (line 1439)
    group_48886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1439, 32), m_48885, 'group')
    # Calling group(args, kwargs) (line 1439)
    group_call_result_48889 = invoke(stypy.reporting.localization.Localization(__file__, 1439, 32), group_48886, *[str_48887], **kwargs_48888)
    
    # Assigning a type to the variable 'atlas_version' (line 1439)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1439, 16), 'atlas_version', group_call_result_48889)
    # SSA join for if statement (line 1438)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 1440)
    # Getting the type of 'atlas_version' (line 1440)
    atlas_version_48890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1440, 12), 'atlas_version')
    # Getting the type of 'None' (line 1440)
    None_48891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1440, 36), 'None')
    
    (may_be_48892, more_types_in_union_48893) = may_not_be_none(atlas_version_48890, None_48891)

    if may_be_48892:

        if more_types_in_union_48893:
            # Runtime conditional SSA (line 1440)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store


        if more_types_in_union_48893:
            # SSA join for if statement (line 1440)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 1445)
    # Getting the type of 'atlas_version' (line 1445)
    atlas_version_48894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1445, 11), 'atlas_version')
    # Getting the type of 'None' (line 1445)
    None_48895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1445, 28), 'None')
    
    (may_be_48896, more_types_in_union_48897) = may_be_none(atlas_version_48894, None_48895)

    if may_be_48896:

        if more_types_in_union_48897:
            # Runtime conditional SSA (line 1445)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 1446):
        
        # Assigning a Call to a Name (line 1446):
        
        # Call to get(...): (line 1446)
        # Processing the call arguments (line 1446)
        str_48901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1446, 43), 'str', 'ATLAS_VERSION')
        # Getting the type of 'None' (line 1446)
        None_48902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 60), 'None', False)
        # Processing the call keyword arguments (line 1446)
        kwargs_48903 = {}
        # Getting the type of 'os' (line 1446)
        os_48898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 28), 'os', False)
        # Obtaining the member 'environ' of a type (line 1446)
        environ_48899 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1446, 28), os_48898, 'environ')
        # Obtaining the member 'get' of a type (line 1446)
        get_48900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1446, 28), environ_48899, 'get')
        # Calling get(args, kwargs) (line 1446)
        get_call_result_48904 = invoke(stypy.reporting.localization.Localization(__file__, 1446, 28), get_48900, *[str_48901, None_48902], **kwargs_48903)
        
        # Assigning a type to the variable 'atlas_version' (line 1446)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1446, 12), 'atlas_version', get_call_result_48904)

        if more_types_in_union_48897:
            # SSA join for if statement (line 1445)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Getting the type of 'atlas_version' (line 1447)
    atlas_version_48905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 11), 'atlas_version')
    # Testing the type of an if condition (line 1447)
    if_condition_48906 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1447, 8), atlas_version_48905)
    # Assigning a type to the variable 'if_condition_48906' (line 1447)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1447, 8), 'if_condition_48906', if_condition_48906)
    # SSA begins for if statement (line 1447)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to dict_append(...): (line 1448)
    # Processing the call arguments (line 1448)
    # Getting the type of 'info' (line 1448)
    info_48908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 24), 'info', False)
    # Processing the call keyword arguments (line 1448)
    
    # Obtaining an instance of the builtin type 'list' (line 1448)
    list_48909 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1448, 44), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1448)
    # Adding element type (line 1448)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1449)
    tuple_48910 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1449, 16), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1449)
    # Adding element type (line 1449)
    str_48911 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1449, 16), 'str', 'ATLAS_INFO')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1449, 16), tuple_48910, str_48911)
    # Adding element type (line 1449)
    str_48912 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1449, 30), 'str', '"\\"%s\\""')
    # Getting the type of 'atlas_version' (line 1449)
    atlas_version_48913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 45), 'atlas_version', False)
    # Applying the binary operator '%' (line 1449)
    result_mod_48914 = python_operator(stypy.reporting.localization.Localization(__file__, 1449, 30), '%', str_48912, atlas_version_48913)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1449, 16), tuple_48910, result_mod_48914)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1448, 44), list_48909, tuple_48910)
    
    keyword_48915 = list_48909
    kwargs_48916 = {'define_macros': keyword_48915}
    # Getting the type of 'dict_append' (line 1448)
    dict_append_48907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 12), 'dict_append', False)
    # Calling dict_append(args, kwargs) (line 1448)
    dict_append_call_result_48917 = invoke(stypy.reporting.localization.Localization(__file__, 1448, 12), dict_append_48907, *[info_48908], **kwargs_48916)
    
    # SSA branch for the else part of an if statement (line 1447)
    module_type_store.open_ssa_branch('else')
    
    # Call to dict_append(...): (line 1452)
    # Processing the call arguments (line 1452)
    # Getting the type of 'info' (line 1452)
    info_48919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 24), 'info', False)
    # Processing the call keyword arguments (line 1452)
    
    # Obtaining an instance of the builtin type 'list' (line 1452)
    list_48920 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1452, 44), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1452)
    # Adding element type (line 1452)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1452)
    tuple_48921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1452, 46), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1452)
    # Adding element type (line 1452)
    str_48922 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1452, 46), 'str', 'NO_ATLAS_INFO')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1452, 46), tuple_48921, str_48922)
    # Adding element type (line 1452)
    int_48923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1452, 63), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1452, 46), tuple_48921, int_48923)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1452, 44), list_48920, tuple_48921)
    
    keyword_48924 = list_48920
    kwargs_48925 = {'define_macros': keyword_48924}
    # Getting the type of 'dict_append' (line 1452)
    dict_append_48918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 12), 'dict_append', False)
    # Calling dict_append(args, kwargs) (line 1452)
    dict_append_call_result_48926 = invoke(stypy.reporting.localization.Localization(__file__, 1452, 12), dict_append_48918, *[info_48919], **kwargs_48925)
    
    # SSA join for if statement (line 1447)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1453)
    tuple_48927 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1453, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1453)
    # Adding element type (line 1453)
    
    # Evaluating a boolean operation
    # Getting the type of 'atlas_version' (line 1453)
    atlas_version_48928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1453, 15), 'atlas_version')
    str_48929 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1453, 32), 'str', '?.?.?')
    # Applying the binary operator 'or' (line 1453)
    result_or_keyword_48930 = python_operator(stypy.reporting.localization.Localization(__file__, 1453, 15), 'or', atlas_version_48928, str_48929)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1453, 15), tuple_48927, result_or_keyword_48930)
    # Adding element type (line 1453)
    # Getting the type of 'info' (line 1453)
    info_48931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1453, 41), 'info')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1453, 15), tuple_48927, info_48931)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1453)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1453, 8), 'stypy_return_type', tuple_48927)
    # SSA join for try-except statement (line 1412)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 's' (line 1455)
    s_48932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 11), 's')
    # Applying the 'not' unary operator (line 1455)
    result_not__48933 = python_operator(stypy.reporting.localization.Localization(__file__, 1455, 7), 'not', s_48932)
    
    # Testing the type of an if condition (line 1455)
    if_condition_48934 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1455, 4), result_not__48933)
    # Assigning a type to the variable 'if_condition_48934' (line 1455)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1455, 4), 'if_condition_48934', if_condition_48934)
    # SSA begins for if statement (line 1455)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1456):
    
    # Assigning a Call to a Name (line 1456):
    
    # Call to search(...): (line 1456)
    # Processing the call arguments (line 1456)
    str_48937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1456, 22), 'str', 'ATLAS version (?P<version>\\d+[.]\\d+[.]\\d+)')
    # Getting the type of 'o' (line 1456)
    o_48938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 69), 'o', False)
    # Processing the call keyword arguments (line 1456)
    kwargs_48939 = {}
    # Getting the type of 're' (line 1456)
    re_48935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 12), 're', False)
    # Obtaining the member 'search' of a type (line 1456)
    search_48936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1456, 12), re_48935, 'search')
    # Calling search(args, kwargs) (line 1456)
    search_call_result_48940 = invoke(stypy.reporting.localization.Localization(__file__, 1456, 12), search_48936, *[str_48937, o_48938], **kwargs_48939)
    
    # Assigning a type to the variable 'm' (line 1456)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1456, 8), 'm', search_call_result_48940)
    
    # Getting the type of 'm' (line 1457)
    m_48941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1457, 11), 'm')
    # Testing the type of an if condition (line 1457)
    if_condition_48942 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1457, 8), m_48941)
    # Assigning a type to the variable 'if_condition_48942' (line 1457)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1457, 8), 'if_condition_48942', if_condition_48942)
    # SSA begins for if statement (line 1457)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1458):
    
    # Assigning a Call to a Name (line 1458):
    
    # Call to group(...): (line 1458)
    # Processing the call arguments (line 1458)
    str_48945 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1458, 36), 'str', 'version')
    # Processing the call keyword arguments (line 1458)
    kwargs_48946 = {}
    # Getting the type of 'm' (line 1458)
    m_48943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 28), 'm', False)
    # Obtaining the member 'group' of a type (line 1458)
    group_48944 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1458, 28), m_48943, 'group')
    # Calling group(args, kwargs) (line 1458)
    group_call_result_48947 = invoke(stypy.reporting.localization.Localization(__file__, 1458, 28), group_48944, *[str_48945], **kwargs_48946)
    
    # Assigning a type to the variable 'atlas_version' (line 1458)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1458, 12), 'atlas_version', group_call_result_48947)
    # SSA join for if statement (line 1457)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1455)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 1459)
    # Getting the type of 'atlas_version' (line 1459)
    atlas_version_48948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 7), 'atlas_version')
    # Getting the type of 'None' (line 1459)
    None_48949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 24), 'None')
    
    (may_be_48950, more_types_in_union_48951) = may_be_none(atlas_version_48948, None_48949)

    if may_be_48950:

        if more_types_in_union_48951:
            # Runtime conditional SSA (line 1459)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        
        # Call to search(...): (line 1460)
        # Processing the call arguments (line 1460)
        str_48954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1460, 21), 'str', 'undefined symbol: ATL_buildinfo')
        # Getting the type of 'o' (line 1460)
        o_48955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 57), 'o', False)
        # Getting the type of 're' (line 1460)
        re_48956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 60), 're', False)
        # Obtaining the member 'M' of a type (line 1460)
        M_48957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1460, 60), re_48956, 'M')
        # Processing the call keyword arguments (line 1460)
        kwargs_48958 = {}
        # Getting the type of 're' (line 1460)
        re_48952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 11), 're', False)
        # Obtaining the member 'search' of a type (line 1460)
        search_48953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1460, 11), re_48952, 'search')
        # Calling search(args, kwargs) (line 1460)
        search_call_result_48959 = invoke(stypy.reporting.localization.Localization(__file__, 1460, 11), search_48953, *[str_48954, o_48955, M_48957], **kwargs_48958)
        
        # Testing the type of an if condition (line 1460)
        if_condition_48960 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1460, 8), search_call_result_48959)
        # Assigning a type to the variable 'if_condition_48960' (line 1460)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1460, 8), 'if_condition_48960', if_condition_48960)
        # SSA begins for if statement (line 1460)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 1461):
        
        # Assigning a Str to a Name (line 1461):
        str_48961 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1461, 28), 'str', '3.2.1_pre3.3.6')
        # Assigning a type to the variable 'atlas_version' (line 1461)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1461, 12), 'atlas_version', str_48961)
        # SSA branch for the else part of an if statement (line 1460)
        module_type_store.open_ssa_branch('else')
        
        # Call to info(...): (line 1463)
        # Processing the call arguments (line 1463)
        str_48964 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1463, 21), 'str', 'Status: %d')
        # Getting the type of 's' (line 1463)
        s_48965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1463, 35), 's', False)
        # Processing the call keyword arguments (line 1463)
        kwargs_48966 = {}
        # Getting the type of 'log' (line 1463)
        log_48962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1463, 12), 'log', False)
        # Obtaining the member 'info' of a type (line 1463)
        info_48963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1463, 12), log_48962, 'info')
        # Calling info(args, kwargs) (line 1463)
        info_call_result_48967 = invoke(stypy.reporting.localization.Localization(__file__, 1463, 12), info_48963, *[str_48964, s_48965], **kwargs_48966)
        
        
        # Call to info(...): (line 1464)
        # Processing the call arguments (line 1464)
        str_48970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1464, 21), 'str', 'Output: %s')
        # Getting the type of 'o' (line 1464)
        o_48971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1464, 35), 'o', False)
        # Processing the call keyword arguments (line 1464)
        kwargs_48972 = {}
        # Getting the type of 'log' (line 1464)
        log_48968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1464, 12), 'log', False)
        # Obtaining the member 'info' of a type (line 1464)
        info_48969 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1464, 12), log_48968, 'info')
        # Calling info(args, kwargs) (line 1464)
        info_call_result_48973 = invoke(stypy.reporting.localization.Localization(__file__, 1464, 12), info_48969, *[str_48970, o_48971], **kwargs_48972)
        
        # SSA join for if statement (line 1460)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_48951:
            # SSA join for if statement (line 1459)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Getting the type of 'atlas_version' (line 1466)
    atlas_version_48974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1466, 7), 'atlas_version')
    str_48975 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1466, 24), 'str', '3.2.1_pre3.3.6')
    # Applying the binary operator '==' (line 1466)
    result_eq_48976 = python_operator(stypy.reporting.localization.Localization(__file__, 1466, 7), '==', atlas_version_48974, str_48975)
    
    # Testing the type of an if condition (line 1466)
    if_condition_48977 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1466, 4), result_eq_48976)
    # Assigning a type to the variable 'if_condition_48977' (line 1466)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1466, 4), 'if_condition_48977', if_condition_48977)
    # SSA begins for if statement (line 1466)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to dict_append(...): (line 1467)
    # Processing the call arguments (line 1467)
    # Getting the type of 'info' (line 1467)
    info_48979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1467, 20), 'info', False)
    # Processing the call keyword arguments (line 1467)
    
    # Obtaining an instance of the builtin type 'list' (line 1467)
    list_48980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1467, 40), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1467)
    # Adding element type (line 1467)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1467)
    tuple_48981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1467, 42), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1467)
    # Adding element type (line 1467)
    str_48982 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1467, 42), 'str', 'NO_ATLAS_INFO')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1467, 42), tuple_48981, str_48982)
    # Adding element type (line 1467)
    int_48983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1467, 59), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1467, 42), tuple_48981, int_48983)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1467, 40), list_48980, tuple_48981)
    
    keyword_48984 = list_48980
    kwargs_48985 = {'define_macros': keyword_48984}
    # Getting the type of 'dict_append' (line 1467)
    dict_append_48978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1467, 8), 'dict_append', False)
    # Calling dict_append(args, kwargs) (line 1467)
    dict_append_call_result_48986 = invoke(stypy.reporting.localization.Localization(__file__, 1467, 8), dict_append_48978, *[info_48979], **kwargs_48985)
    
    # SSA branch for the else part of an if statement (line 1466)
    module_type_store.open_ssa_branch('else')
    
    # Call to dict_append(...): (line 1469)
    # Processing the call arguments (line 1469)
    # Getting the type of 'info' (line 1469)
    info_48988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 20), 'info', False)
    # Processing the call keyword arguments (line 1469)
    
    # Obtaining an instance of the builtin type 'list' (line 1469)
    list_48989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1469, 40), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1469)
    # Adding element type (line 1469)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1470)
    tuple_48990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1470, 12), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1470)
    # Adding element type (line 1470)
    str_48991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1470, 12), 'str', 'ATLAS_INFO')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1470, 12), tuple_48990, str_48991)
    # Adding element type (line 1470)
    str_48992 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1470, 26), 'str', '"\\"%s\\""')
    # Getting the type of 'atlas_version' (line 1470)
    atlas_version_48993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 41), 'atlas_version', False)
    # Applying the binary operator '%' (line 1470)
    result_mod_48994 = python_operator(stypy.reporting.localization.Localization(__file__, 1470, 26), '%', str_48992, atlas_version_48993)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1470, 12), tuple_48990, result_mod_48994)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1469, 40), list_48989, tuple_48990)
    
    keyword_48995 = list_48989
    kwargs_48996 = {'define_macros': keyword_48995}
    # Getting the type of 'dict_append' (line 1469)
    dict_append_48987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 8), 'dict_append', False)
    # Calling dict_append(args, kwargs) (line 1469)
    dict_append_call_result_48997 = invoke(stypy.reporting.localization.Localization(__file__, 1469, 8), dict_append_48987, *[info_48988], **kwargs_48996)
    
    # SSA join for if statement (line 1466)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Multiple assignment of 2 elements.
    
    # Assigning a Tuple to a Subscript (line 1472):
    
    # Obtaining an instance of the builtin type 'tuple' (line 1472)
    tuple_48998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1472, 42), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1472)
    # Adding element type (line 1472)
    # Getting the type of 'atlas_version' (line 1472)
    atlas_version_48999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 42), 'atlas_version')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1472, 42), tuple_48998, atlas_version_48999)
    # Adding element type (line 1472)
    # Getting the type of 'info' (line 1472)
    info_49000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 57), 'info')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1472, 42), tuple_48998, info_49000)
    
    # Getting the type of '_cached_atlas_version' (line 1472)
    _cached_atlas_version_49001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 13), '_cached_atlas_version')
    # Getting the type of 'key' (line 1472)
    key_49002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 35), 'key')
    # Storing an element on a container (line 1472)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1472, 13), _cached_atlas_version_49001, (key_49002, tuple_48998))
    
    # Assigning a Subscript to a Name (line 1472):
    
    # Obtaining the type of the subscript
    # Getting the type of 'key' (line 1472)
    key_49003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 35), 'key')
    # Getting the type of '_cached_atlas_version' (line 1472)
    _cached_atlas_version_49004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 13), '_cached_atlas_version')
    # Obtaining the member '__getitem__' of a type (line 1472)
    getitem___49005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1472, 13), _cached_atlas_version_49004, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1472)
    subscript_call_result_49006 = invoke(stypy.reporting.localization.Localization(__file__, 1472, 13), getitem___49005, key_49003)
    
    # Assigning a type to the variable 'result' (line 1472)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1472, 4), 'result', subscript_call_result_49006)
    # Getting the type of 'result' (line 1473)
    result_49007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 11), 'result')
    # Assigning a type to the variable 'stypy_return_type' (line 1473)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1473, 4), 'stypy_return_type', result_49007)
    
    # ################# End of 'get_atlas_version(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_atlas_version' in the type store
    # Getting the type of 'stypy_return_type' (line 1403)
    stypy_return_type_49008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1403, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_49008)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_atlas_version'
    return stypy_return_type_49008

# Assigning a type to the variable 'get_atlas_version' (line 1403)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1403, 0), 'get_atlas_version', get_atlas_version)
# Declaration of the 'lapack_opt_info' class
# Getting the type of 'system_info' (line 1476)
system_info_49009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 22), 'system_info')

class lapack_opt_info(system_info_49009, ):
    
    # Assigning a Name to a Name (line 1478):

    @norecursion
    def calc_info(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'calc_info'
        module_type_store = module_type_store.open_function_context('calc_info', 1480, 4, False)
        # Assigning a type to the variable 'self' (line 1481)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1481, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        lapack_opt_info.calc_info.__dict__.__setitem__('stypy_localization', localization)
        lapack_opt_info.calc_info.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        lapack_opt_info.calc_info.__dict__.__setitem__('stypy_type_store', module_type_store)
        lapack_opt_info.calc_info.__dict__.__setitem__('stypy_function_name', 'lapack_opt_info.calc_info')
        lapack_opt_info.calc_info.__dict__.__setitem__('stypy_param_names_list', [])
        lapack_opt_info.calc_info.__dict__.__setitem__('stypy_varargs_param_name', None)
        lapack_opt_info.calc_info.__dict__.__setitem__('stypy_kwargs_param_name', None)
        lapack_opt_info.calc_info.__dict__.__setitem__('stypy_call_defaults', defaults)
        lapack_opt_info.calc_info.__dict__.__setitem__('stypy_call_varargs', varargs)
        lapack_opt_info.calc_info.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        lapack_opt_info.calc_info.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'lapack_opt_info.calc_info', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'calc_info', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'calc_info(...)' code ##################

        
        # Assigning a Call to a Name (line 1482):
        
        # Assigning a Call to a Name (line 1482):
        
        # Call to get_info(...): (line 1482)
        # Processing the call arguments (line 1482)
        str_49011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1482, 33), 'str', 'openblas_lapack')
        # Processing the call keyword arguments (line 1482)
        kwargs_49012 = {}
        # Getting the type of 'get_info' (line 1482)
        get_info_49010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1482, 24), 'get_info', False)
        # Calling get_info(args, kwargs) (line 1482)
        get_info_call_result_49013 = invoke(stypy.reporting.localization.Localization(__file__, 1482, 24), get_info_49010, *[str_49011], **kwargs_49012)
        
        # Assigning a type to the variable 'openblas_info' (line 1482)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1482, 8), 'openblas_info', get_info_call_result_49013)
        
        # Getting the type of 'openblas_info' (line 1483)
        openblas_info_49014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 11), 'openblas_info')
        # Testing the type of an if condition (line 1483)
        if_condition_49015 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1483, 8), openblas_info_49014)
        # Assigning a type to the variable 'if_condition_49015' (line 1483)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1483, 8), 'if_condition_49015', if_condition_49015)
        # SSA begins for if statement (line 1483)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_info(...): (line 1484)
        # Processing the call keyword arguments (line 1484)
        # Getting the type of 'openblas_info' (line 1484)
        openblas_info_49018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1484, 28), 'openblas_info', False)
        kwargs_49019 = {'openblas_info_49018': openblas_info_49018}
        # Getting the type of 'self' (line 1484)
        self_49016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1484, 12), 'self', False)
        # Obtaining the member 'set_info' of a type (line 1484)
        set_info_49017 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1484, 12), self_49016, 'set_info')
        # Calling set_info(args, kwargs) (line 1484)
        set_info_call_result_49020 = invoke(stypy.reporting.localization.Localization(__file__, 1484, 12), set_info_49017, *[], **kwargs_49019)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1485)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1485, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1483)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1487):
        
        # Assigning a Call to a Name (line 1487):
        
        # Call to get_info(...): (line 1487)
        # Processing the call arguments (line 1487)
        str_49022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1487, 35), 'str', 'lapack_mkl')
        # Processing the call keyword arguments (line 1487)
        kwargs_49023 = {}
        # Getting the type of 'get_info' (line 1487)
        get_info_49021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1487, 26), 'get_info', False)
        # Calling get_info(args, kwargs) (line 1487)
        get_info_call_result_49024 = invoke(stypy.reporting.localization.Localization(__file__, 1487, 26), get_info_49021, *[str_49022], **kwargs_49023)
        
        # Assigning a type to the variable 'lapack_mkl_info' (line 1487)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1487, 8), 'lapack_mkl_info', get_info_call_result_49024)
        
        # Getting the type of 'lapack_mkl_info' (line 1488)
        lapack_mkl_info_49025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1488, 11), 'lapack_mkl_info')
        # Testing the type of an if condition (line 1488)
        if_condition_49026 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1488, 8), lapack_mkl_info_49025)
        # Assigning a type to the variable 'if_condition_49026' (line 1488)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1488, 8), 'if_condition_49026', if_condition_49026)
        # SSA begins for if statement (line 1488)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_info(...): (line 1489)
        # Processing the call keyword arguments (line 1489)
        # Getting the type of 'lapack_mkl_info' (line 1489)
        lapack_mkl_info_49029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 28), 'lapack_mkl_info', False)
        kwargs_49030 = {'lapack_mkl_info_49029': lapack_mkl_info_49029}
        # Getting the type of 'self' (line 1489)
        self_49027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 12), 'self', False)
        # Obtaining the member 'set_info' of a type (line 1489)
        set_info_49028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1489, 12), self_49027, 'set_info')
        # Calling set_info(args, kwargs) (line 1489)
        set_info_call_result_49031 = invoke(stypy.reporting.localization.Localization(__file__, 1489, 12), set_info_49028, *[], **kwargs_49030)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1490)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1490, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1488)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1492):
        
        # Assigning a Call to a Name (line 1492):
        
        # Call to get_info(...): (line 1492)
        # Processing the call arguments (line 1492)
        str_49033 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1492, 30), 'str', 'atlas_3_10_threads')
        # Processing the call keyword arguments (line 1492)
        kwargs_49034 = {}
        # Getting the type of 'get_info' (line 1492)
        get_info_49032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 21), 'get_info', False)
        # Calling get_info(args, kwargs) (line 1492)
        get_info_call_result_49035 = invoke(stypy.reporting.localization.Localization(__file__, 1492, 21), get_info_49032, *[str_49033], **kwargs_49034)
        
        # Assigning a type to the variable 'atlas_info' (line 1492)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1492, 8), 'atlas_info', get_info_call_result_49035)
        
        
        # Getting the type of 'atlas_info' (line 1493)
        atlas_info_49036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 15), 'atlas_info')
        # Applying the 'not' unary operator (line 1493)
        result_not__49037 = python_operator(stypy.reporting.localization.Localization(__file__, 1493, 11), 'not', atlas_info_49036)
        
        # Testing the type of an if condition (line 1493)
        if_condition_49038 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1493, 8), result_not__49037)
        # Assigning a type to the variable 'if_condition_49038' (line 1493)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1493, 8), 'if_condition_49038', if_condition_49038)
        # SSA begins for if statement (line 1493)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1494):
        
        # Assigning a Call to a Name (line 1494):
        
        # Call to get_info(...): (line 1494)
        # Processing the call arguments (line 1494)
        str_49040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1494, 34), 'str', 'atlas_3_10')
        # Processing the call keyword arguments (line 1494)
        kwargs_49041 = {}
        # Getting the type of 'get_info' (line 1494)
        get_info_49039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 25), 'get_info', False)
        # Calling get_info(args, kwargs) (line 1494)
        get_info_call_result_49042 = invoke(stypy.reporting.localization.Localization(__file__, 1494, 25), get_info_49039, *[str_49040], **kwargs_49041)
        
        # Assigning a type to the variable 'atlas_info' (line 1494)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1494, 12), 'atlas_info', get_info_call_result_49042)
        # SSA join for if statement (line 1493)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'atlas_info' (line 1495)
        atlas_info_49043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1495, 15), 'atlas_info')
        # Applying the 'not' unary operator (line 1495)
        result_not__49044 = python_operator(stypy.reporting.localization.Localization(__file__, 1495, 11), 'not', atlas_info_49043)
        
        # Testing the type of an if condition (line 1495)
        if_condition_49045 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1495, 8), result_not__49044)
        # Assigning a type to the variable 'if_condition_49045' (line 1495)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1495, 8), 'if_condition_49045', if_condition_49045)
        # SSA begins for if statement (line 1495)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1496):
        
        # Assigning a Call to a Name (line 1496):
        
        # Call to get_info(...): (line 1496)
        # Processing the call arguments (line 1496)
        str_49047 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1496, 34), 'str', 'atlas_threads')
        # Processing the call keyword arguments (line 1496)
        kwargs_49048 = {}
        # Getting the type of 'get_info' (line 1496)
        get_info_49046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1496, 25), 'get_info', False)
        # Calling get_info(args, kwargs) (line 1496)
        get_info_call_result_49049 = invoke(stypy.reporting.localization.Localization(__file__, 1496, 25), get_info_49046, *[str_49047], **kwargs_49048)
        
        # Assigning a type to the variable 'atlas_info' (line 1496)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1496, 12), 'atlas_info', get_info_call_result_49049)
        # SSA join for if statement (line 1495)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'atlas_info' (line 1497)
        atlas_info_49050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 15), 'atlas_info')
        # Applying the 'not' unary operator (line 1497)
        result_not__49051 = python_operator(stypy.reporting.localization.Localization(__file__, 1497, 11), 'not', atlas_info_49050)
        
        # Testing the type of an if condition (line 1497)
        if_condition_49052 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1497, 8), result_not__49051)
        # Assigning a type to the variable 'if_condition_49052' (line 1497)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1497, 8), 'if_condition_49052', if_condition_49052)
        # SSA begins for if statement (line 1497)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1498):
        
        # Assigning a Call to a Name (line 1498):
        
        # Call to get_info(...): (line 1498)
        # Processing the call arguments (line 1498)
        str_49054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1498, 34), 'str', 'atlas')
        # Processing the call keyword arguments (line 1498)
        kwargs_49055 = {}
        # Getting the type of 'get_info' (line 1498)
        get_info_49053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1498, 25), 'get_info', False)
        # Calling get_info(args, kwargs) (line 1498)
        get_info_call_result_49056 = invoke(stypy.reporting.localization.Localization(__file__, 1498, 25), get_info_49053, *[str_49054], **kwargs_49055)
        
        # Assigning a type to the variable 'atlas_info' (line 1498)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1498, 12), 'atlas_info', get_info_call_result_49056)
        # SSA join for if statement (line 1497)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'sys' (line 1500)
        sys_49057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1500, 11), 'sys')
        # Obtaining the member 'platform' of a type (line 1500)
        platform_49058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1500, 11), sys_49057, 'platform')
        str_49059 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1500, 27), 'str', 'darwin')
        # Applying the binary operator '==' (line 1500)
        result_eq_49060 = python_operator(stypy.reporting.localization.Localization(__file__, 1500, 11), '==', platform_49058, str_49059)
        
        
        # Getting the type of 'atlas_info' (line 1500)
        atlas_info_49061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1500, 44), 'atlas_info')
        # Applying the 'not' unary operator (line 1500)
        result_not__49062 = python_operator(stypy.reporting.localization.Localization(__file__, 1500, 40), 'not', atlas_info_49061)
        
        # Applying the binary operator 'and' (line 1500)
        result_and_keyword_49063 = python_operator(stypy.reporting.localization.Localization(__file__, 1500, 11), 'and', result_eq_49060, result_not__49062)
        
        # Testing the type of an if condition (line 1500)
        if_condition_49064 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1500, 8), result_and_keyword_49063)
        # Assigning a type to the variable 'if_condition_49064' (line 1500)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1500, 8), 'if_condition_49064', if_condition_49064)
        # SSA begins for if statement (line 1500)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a List to a Name (line 1502):
        
        # Assigning a List to a Name (line 1502):
        
        # Obtaining an instance of the builtin type 'list' (line 1502)
        list_49065 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1502, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1502)
        
        # Assigning a type to the variable 'args' (line 1502)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1502, 12), 'args', list_49065)
        
        # Assigning a List to a Name (line 1503):
        
        # Assigning a List to a Name (line 1503):
        
        # Obtaining an instance of the builtin type 'list' (line 1503)
        list_49066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1503, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1503)
        
        # Assigning a type to the variable 'link_args' (line 1503)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1503, 12), 'link_args', list_49066)
        
        
        # Evaluating a boolean operation
        
        
        # Obtaining the type of the subscript
        int_49067 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1504, 30), 'int')
        slice_49068 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1504, 15), int_49067, None, None)
        
        # Call to get_platform(...): (line 1504)
        # Processing the call keyword arguments (line 1504)
        kwargs_49070 = {}
        # Getting the type of 'get_platform' (line 1504)
        get_platform_49069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1504, 15), 'get_platform', False)
        # Calling get_platform(args, kwargs) (line 1504)
        get_platform_call_result_49071 = invoke(stypy.reporting.localization.Localization(__file__, 1504, 15), get_platform_49069, *[], **kwargs_49070)
        
        # Obtaining the member '__getitem__' of a type (line 1504)
        getitem___49072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1504, 15), get_platform_call_result_49071, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1504)
        subscript_call_result_49073 = invoke(stypy.reporting.localization.Localization(__file__, 1504, 15), getitem___49072, slice_49068)
        
        str_49074 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1504, 38), 'str', 'i386')
        # Applying the binary operator '==' (line 1504)
        result_eq_49075 = python_operator(stypy.reporting.localization.Localization(__file__, 1504, 15), '==', subscript_call_result_49073, str_49074)
        
        
        str_49076 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1504, 48), 'str', 'intel')
        
        # Call to get_platform(...): (line 1504)
        # Processing the call keyword arguments (line 1504)
        kwargs_49078 = {}
        # Getting the type of 'get_platform' (line 1504)
        get_platform_49077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1504, 59), 'get_platform', False)
        # Calling get_platform(args, kwargs) (line 1504)
        get_platform_call_result_49079 = invoke(stypy.reporting.localization.Localization(__file__, 1504, 59), get_platform_49077, *[], **kwargs_49078)
        
        # Applying the binary operator 'in' (line 1504)
        result_contains_49080 = python_operator(stypy.reporting.localization.Localization(__file__, 1504, 48), 'in', str_49076, get_platform_call_result_49079)
        
        # Applying the binary operator 'or' (line 1504)
        result_or_keyword_49081 = python_operator(stypy.reporting.localization.Localization(__file__, 1504, 15), 'or', result_eq_49075, result_contains_49080)
        
        str_49082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1505, 15), 'str', 'x86_64')
        
        # Call to get_platform(...): (line 1505)
        # Processing the call keyword arguments (line 1505)
        kwargs_49084 = {}
        # Getting the type of 'get_platform' (line 1505)
        get_platform_49083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1505, 27), 'get_platform', False)
        # Calling get_platform(args, kwargs) (line 1505)
        get_platform_call_result_49085 = invoke(stypy.reporting.localization.Localization(__file__, 1505, 27), get_platform_49083, *[], **kwargs_49084)
        
        # Applying the binary operator 'in' (line 1505)
        result_contains_49086 = python_operator(stypy.reporting.localization.Localization(__file__, 1505, 15), 'in', str_49082, get_platform_call_result_49085)
        
        # Applying the binary operator 'or' (line 1504)
        result_or_keyword_49087 = python_operator(stypy.reporting.localization.Localization(__file__, 1504, 15), 'or', result_or_keyword_49081, result_contains_49086)
        
        str_49088 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1506, 15), 'str', 'i386')
        
        # Call to platform(...): (line 1506)
        # Processing the call keyword arguments (line 1506)
        kwargs_49091 = {}
        # Getting the type of 'platform' (line 1506)
        platform_49089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1506, 25), 'platform', False)
        # Obtaining the member 'platform' of a type (line 1506)
        platform_49090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1506, 25), platform_49089, 'platform')
        # Calling platform(args, kwargs) (line 1506)
        platform_call_result_49092 = invoke(stypy.reporting.localization.Localization(__file__, 1506, 25), platform_49090, *[], **kwargs_49091)
        
        # Applying the binary operator 'in' (line 1506)
        result_contains_49093 = python_operator(stypy.reporting.localization.Localization(__file__, 1506, 15), 'in', str_49088, platform_call_result_49092)
        
        # Applying the binary operator 'or' (line 1504)
        result_or_keyword_49094 = python_operator(stypy.reporting.localization.Localization(__file__, 1504, 15), 'or', result_or_keyword_49087, result_contains_49093)
        
        # Testing the type of an if condition (line 1504)
        if_condition_49095 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1504, 12), result_or_keyword_49094)
        # Assigning a type to the variable 'if_condition_49095' (line 1504)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1504, 12), 'if_condition_49095', if_condition_49095)
        # SSA begins for if statement (line 1504)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 1507):
        
        # Assigning a Num to a Name (line 1507):
        int_49096 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1507, 24), 'int')
        # Assigning a type to the variable 'intel' (line 1507)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1507, 16), 'intel', int_49096)
        # SSA branch for the else part of an if statement (line 1504)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Num to a Name (line 1509):
        
        # Assigning a Num to a Name (line 1509):
        int_49097 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1509, 24), 'int')
        # Assigning a type to the variable 'intel' (line 1509)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1509, 16), 'intel', int_49097)
        # SSA join for if statement (line 1504)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to exists(...): (line 1510)
        # Processing the call arguments (line 1510)
        str_49101 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1510, 30), 'str', '/System/Library/Frameworks/Accelerate.framework/')
        # Processing the call keyword arguments (line 1510)
        kwargs_49102 = {}
        # Getting the type of 'os' (line 1510)
        os_49098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1510, 15), 'os', False)
        # Obtaining the member 'path' of a type (line 1510)
        path_49099 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1510, 15), os_49098, 'path')
        # Obtaining the member 'exists' of a type (line 1510)
        exists_49100 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1510, 15), path_49099, 'exists')
        # Calling exists(args, kwargs) (line 1510)
        exists_call_result_49103 = invoke(stypy.reporting.localization.Localization(__file__, 1510, 15), exists_49100, *[str_49101], **kwargs_49102)
        
        # Testing the type of an if condition (line 1510)
        if_condition_49104 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1510, 12), exists_call_result_49103)
        # Assigning a type to the variable 'if_condition_49104' (line 1510)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1510, 12), 'if_condition_49104', if_condition_49104)
        # SSA begins for if statement (line 1510)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'intel' (line 1512)
        intel_49105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1512, 19), 'intel')
        # Testing the type of an if condition (line 1512)
        if_condition_49106 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1512, 16), intel_49105)
        # Assigning a type to the variable 'if_condition_49106' (line 1512)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1512, 16), 'if_condition_49106', if_condition_49106)
        # SSA begins for if statement (line 1512)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to extend(...): (line 1513)
        # Processing the call arguments (line 1513)
        
        # Obtaining an instance of the builtin type 'list' (line 1513)
        list_49109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1513, 32), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1513)
        # Adding element type (line 1513)
        str_49110 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1513, 33), 'str', '-msse3')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1513, 32), list_49109, str_49110)
        
        # Processing the call keyword arguments (line 1513)
        kwargs_49111 = {}
        # Getting the type of 'args' (line 1513)
        args_49107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1513, 20), 'args', False)
        # Obtaining the member 'extend' of a type (line 1513)
        extend_49108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1513, 20), args_49107, 'extend')
        # Calling extend(args, kwargs) (line 1513)
        extend_call_result_49112 = invoke(stypy.reporting.localization.Localization(__file__, 1513, 20), extend_49108, *[list_49109], **kwargs_49111)
        
        # SSA branch for the else part of an if statement (line 1512)
        module_type_store.open_ssa_branch('else')
        
        # Call to extend(...): (line 1515)
        # Processing the call arguments (line 1515)
        
        # Obtaining an instance of the builtin type 'list' (line 1515)
        list_49115 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1515, 32), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1515)
        # Adding element type (line 1515)
        str_49116 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1515, 33), 'str', '-faltivec')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1515, 32), list_49115, str_49116)
        
        # Processing the call keyword arguments (line 1515)
        kwargs_49117 = {}
        # Getting the type of 'args' (line 1515)
        args_49113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1515, 20), 'args', False)
        # Obtaining the member 'extend' of a type (line 1515)
        extend_49114 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1515, 20), args_49113, 'extend')
        # Calling extend(args, kwargs) (line 1515)
        extend_call_result_49118 = invoke(stypy.reporting.localization.Localization(__file__, 1515, 20), extend_49114, *[list_49115], **kwargs_49117)
        
        # SSA join for if statement (line 1512)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to extend(...): (line 1516)
        # Processing the call arguments (line 1516)
        
        # Obtaining an instance of the builtin type 'list' (line 1516)
        list_49121 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1516, 33), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1516)
        # Adding element type (line 1516)
        str_49122 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1516, 34), 'str', '-Wl,-framework')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1516, 33), list_49121, str_49122)
        # Adding element type (line 1516)
        str_49123 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1516, 52), 'str', '-Wl,Accelerate')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1516, 33), list_49121, str_49123)
        
        # Processing the call keyword arguments (line 1516)
        kwargs_49124 = {}
        # Getting the type of 'link_args' (line 1516)
        link_args_49119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1516, 16), 'link_args', False)
        # Obtaining the member 'extend' of a type (line 1516)
        extend_49120 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1516, 16), link_args_49119, 'extend')
        # Calling extend(args, kwargs) (line 1516)
        extend_call_result_49125 = invoke(stypy.reporting.localization.Localization(__file__, 1516, 16), extend_49120, *[list_49121], **kwargs_49124)
        
        # SSA branch for the else part of an if statement (line 1510)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to exists(...): (line 1517)
        # Processing the call arguments (line 1517)
        str_49129 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1517, 32), 'str', '/System/Library/Frameworks/vecLib.framework/')
        # Processing the call keyword arguments (line 1517)
        kwargs_49130 = {}
        # Getting the type of 'os' (line 1517)
        os_49126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1517, 17), 'os', False)
        # Obtaining the member 'path' of a type (line 1517)
        path_49127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1517, 17), os_49126, 'path')
        # Obtaining the member 'exists' of a type (line 1517)
        exists_49128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1517, 17), path_49127, 'exists')
        # Calling exists(args, kwargs) (line 1517)
        exists_call_result_49131 = invoke(stypy.reporting.localization.Localization(__file__, 1517, 17), exists_49128, *[str_49129], **kwargs_49130)
        
        # Testing the type of an if condition (line 1517)
        if_condition_49132 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1517, 17), exists_call_result_49131)
        # Assigning a type to the variable 'if_condition_49132' (line 1517)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1517, 17), 'if_condition_49132', if_condition_49132)
        # SSA begins for if statement (line 1517)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'intel' (line 1519)
        intel_49133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1519, 19), 'intel')
        # Testing the type of an if condition (line 1519)
        if_condition_49134 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1519, 16), intel_49133)
        # Assigning a type to the variable 'if_condition_49134' (line 1519)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1519, 16), 'if_condition_49134', if_condition_49134)
        # SSA begins for if statement (line 1519)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to extend(...): (line 1520)
        # Processing the call arguments (line 1520)
        
        # Obtaining an instance of the builtin type 'list' (line 1520)
        list_49137 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1520, 32), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1520)
        # Adding element type (line 1520)
        str_49138 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1520, 33), 'str', '-msse3')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1520, 32), list_49137, str_49138)
        
        # Processing the call keyword arguments (line 1520)
        kwargs_49139 = {}
        # Getting the type of 'args' (line 1520)
        args_49135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1520, 20), 'args', False)
        # Obtaining the member 'extend' of a type (line 1520)
        extend_49136 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1520, 20), args_49135, 'extend')
        # Calling extend(args, kwargs) (line 1520)
        extend_call_result_49140 = invoke(stypy.reporting.localization.Localization(__file__, 1520, 20), extend_49136, *[list_49137], **kwargs_49139)
        
        # SSA branch for the else part of an if statement (line 1519)
        module_type_store.open_ssa_branch('else')
        
        # Call to extend(...): (line 1522)
        # Processing the call arguments (line 1522)
        
        # Obtaining an instance of the builtin type 'list' (line 1522)
        list_49143 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1522, 32), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1522)
        # Adding element type (line 1522)
        str_49144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1522, 33), 'str', '-faltivec')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1522, 32), list_49143, str_49144)
        
        # Processing the call keyword arguments (line 1522)
        kwargs_49145 = {}
        # Getting the type of 'args' (line 1522)
        args_49141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1522, 20), 'args', False)
        # Obtaining the member 'extend' of a type (line 1522)
        extend_49142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1522, 20), args_49141, 'extend')
        # Calling extend(args, kwargs) (line 1522)
        extend_call_result_49146 = invoke(stypy.reporting.localization.Localization(__file__, 1522, 20), extend_49142, *[list_49143], **kwargs_49145)
        
        # SSA join for if statement (line 1519)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to extend(...): (line 1523)
        # Processing the call arguments (line 1523)
        
        # Obtaining an instance of the builtin type 'list' (line 1523)
        list_49149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1523, 33), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1523)
        # Adding element type (line 1523)
        str_49150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1523, 34), 'str', '-Wl,-framework')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1523, 33), list_49149, str_49150)
        # Adding element type (line 1523)
        str_49151 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1523, 52), 'str', '-Wl,vecLib')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1523, 33), list_49149, str_49151)
        
        # Processing the call keyword arguments (line 1523)
        kwargs_49152 = {}
        # Getting the type of 'link_args' (line 1523)
        link_args_49147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1523, 16), 'link_args', False)
        # Obtaining the member 'extend' of a type (line 1523)
        extend_49148 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1523, 16), link_args_49147, 'extend')
        # Calling extend(args, kwargs) (line 1523)
        extend_call_result_49153 = invoke(stypy.reporting.localization.Localization(__file__, 1523, 16), extend_49148, *[list_49149], **kwargs_49152)
        
        # SSA join for if statement (line 1517)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1510)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'args' (line 1524)
        args_49154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1524, 15), 'args')
        # Testing the type of an if condition (line 1524)
        if_condition_49155 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1524, 12), args_49154)
        # Assigning a type to the variable 'if_condition_49155' (line 1524)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1524, 12), 'if_condition_49155', if_condition_49155)
        # SSA begins for if statement (line 1524)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_info(...): (line 1525)
        # Processing the call keyword arguments (line 1525)
        # Getting the type of 'args' (line 1525)
        args_49158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1525, 49), 'args', False)
        keyword_49159 = args_49158
        # Getting the type of 'link_args' (line 1526)
        link_args_49160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1526, 46), 'link_args', False)
        keyword_49161 = link_args_49160
        
        # Obtaining an instance of the builtin type 'list' (line 1527)
        list_49162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1527, 44), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1527)
        # Adding element type (line 1527)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1527)
        tuple_49163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1527, 46), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1527)
        # Adding element type (line 1527)
        str_49164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1527, 46), 'str', 'NO_ATLAS_INFO')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1527, 46), tuple_49163, str_49164)
        # Adding element type (line 1527)
        int_49165 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1527, 63), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1527, 46), tuple_49163, int_49165)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1527, 44), list_49162, tuple_49163)
        # Adding element type (line 1527)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1528)
        tuple_49166 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1528, 46), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1528)
        # Adding element type (line 1528)
        str_49167 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1528, 46), 'str', 'HAVE_CBLAS')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1528, 46), tuple_49166, str_49167)
        # Adding element type (line 1528)
        # Getting the type of 'None' (line 1528)
        None_49168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1528, 60), 'None', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1528, 46), tuple_49166, None_49168)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1527, 44), list_49162, tuple_49166)
        
        keyword_49169 = list_49162
        kwargs_49170 = {'extra_link_args': keyword_49161, 'define_macros': keyword_49169, 'extra_compile_args': keyword_49159}
        # Getting the type of 'self' (line 1525)
        self_49156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1525, 16), 'self', False)
        # Obtaining the member 'set_info' of a type (line 1525)
        set_info_49157 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1525, 16), self_49156, 'set_info')
        # Calling set_info(args, kwargs) (line 1525)
        set_info_call_result_49171 = invoke(stypy.reporting.localization.Localization(__file__, 1525, 16), set_info_49157, *[], **kwargs_49170)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1529)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1529, 16), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1524)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1500)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Num to a Name (line 1531):
        
        # Assigning a Num to a Name (line 1531):
        int_49172 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1531, 22), 'int')
        # Assigning a type to the variable 'need_lapack' (line 1531)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1531, 8), 'need_lapack', int_49172)
        
        # Assigning a Num to a Name (line 1532):
        
        # Assigning a Num to a Name (line 1532):
        int_49173 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1532, 20), 'int')
        # Assigning a type to the variable 'need_blas' (line 1532)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1532, 8), 'need_blas', int_49173)
        
        # Assigning a Dict to a Name (line 1533):
        
        # Assigning a Dict to a Name (line 1533):
        
        # Obtaining an instance of the builtin type 'dict' (line 1533)
        dict_49174 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1533, 15), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 1533)
        
        # Assigning a type to the variable 'info' (line 1533)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1533, 8), 'info', dict_49174)
        
        # Getting the type of 'atlas_info' (line 1534)
        atlas_info_49175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 11), 'atlas_info')
        # Testing the type of an if condition (line 1534)
        if_condition_49176 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1534, 8), atlas_info_49175)
        # Assigning a type to the variable 'if_condition_49176' (line 1534)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1534, 8), 'if_condition_49176', if_condition_49176)
        # SSA begins for if statement (line 1534)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1535):
        
        # Assigning a Call to a Name (line 1535):
        
        # Call to get(...): (line 1535)
        # Processing the call arguments (line 1535)
        str_49179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1535, 31), 'str', 'define_macros')
        
        # Obtaining an instance of the builtin type 'list' (line 1535)
        list_49180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1535, 48), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1535)
        
        # Processing the call keyword arguments (line 1535)
        kwargs_49181 = {}
        # Getting the type of 'atlas_info' (line 1535)
        atlas_info_49177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 16), 'atlas_info', False)
        # Obtaining the member 'get' of a type (line 1535)
        get_49178 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1535, 16), atlas_info_49177, 'get')
        # Calling get(args, kwargs) (line 1535)
        get_call_result_49182 = invoke(stypy.reporting.localization.Localization(__file__, 1535, 16), get_49178, *[str_49179, list_49180], **kwargs_49181)
        
        # Assigning a type to the variable 'l' (line 1535)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1535, 12), 'l', get_call_result_49182)
        
        
        # Evaluating a boolean operation
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1536)
        tuple_49183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1536, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1536)
        # Adding element type (line 1536)
        str_49184 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1536, 16), 'str', 'ATLAS_WITH_LAPACK_ATLAS')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1536, 16), tuple_49183, str_49184)
        # Adding element type (line 1536)
        # Getting the type of 'None' (line 1536)
        None_49185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 43), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1536, 16), tuple_49183, None_49185)
        
        # Getting the type of 'l' (line 1536)
        l_49186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 52), 'l')
        # Applying the binary operator 'in' (line 1536)
        result_contains_49187 = python_operator(stypy.reporting.localization.Localization(__file__, 1536, 15), 'in', tuple_49183, l_49186)
        
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1537)
        tuple_49188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1537, 23), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1537)
        # Adding element type (line 1537)
        str_49189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1537, 23), 'str', 'ATLAS_WITHOUT_LAPACK')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1537, 23), tuple_49188, str_49189)
        # Adding element type (line 1537)
        # Getting the type of 'None' (line 1537)
        None_49190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 47), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1537, 23), tuple_49188, None_49190)
        
        # Getting the type of 'l' (line 1537)
        l_49191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 56), 'l')
        # Applying the binary operator 'in' (line 1537)
        result_contains_49192 = python_operator(stypy.reporting.localization.Localization(__file__, 1537, 22), 'in', tuple_49188, l_49191)
        
        # Applying the binary operator 'or' (line 1536)
        result_or_keyword_49193 = python_operator(stypy.reporting.localization.Localization(__file__, 1536, 15), 'or', result_contains_49187, result_contains_49192)
        
        # Testing the type of an if condition (line 1536)
        if_condition_49194 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1536, 12), result_or_keyword_49193)
        # Assigning a type to the variable 'if_condition_49194' (line 1536)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1536, 12), 'if_condition_49194', if_condition_49194)
        # SSA begins for if statement (line 1536)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 1538):
        
        # Assigning a Num to a Name (line 1538):
        int_49195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1538, 30), 'int')
        # Assigning a type to the variable 'need_lapack' (line 1538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1538, 16), 'need_lapack', int_49195)
        # SSA join for if statement (line 1536)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 1539):
        
        # Assigning a Name to a Name (line 1539):
        # Getting the type of 'atlas_info' (line 1539)
        atlas_info_49196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 19), 'atlas_info')
        # Assigning a type to the variable 'info' (line 1539)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1539, 12), 'info', atlas_info_49196)
        # SSA branch for the else part of an if statement (line 1534)
        module_type_store.open_ssa_branch('else')
        
        # Call to warn(...): (line 1542)
        # Processing the call arguments (line 1542)
        # Getting the type of 'AtlasNotFoundError' (line 1542)
        AtlasNotFoundError_49199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 26), 'AtlasNotFoundError', False)
        # Obtaining the member '__doc__' of a type (line 1542)
        doc___49200 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1542, 26), AtlasNotFoundError_49199, '__doc__')
        # Processing the call keyword arguments (line 1542)
        kwargs_49201 = {}
        # Getting the type of 'warnings' (line 1542)
        warnings_49197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 12), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 1542)
        warn_49198 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1542, 12), warnings_49197, 'warn')
        # Calling warn(args, kwargs) (line 1542)
        warn_call_result_49202 = invoke(stypy.reporting.localization.Localization(__file__, 1542, 12), warn_49198, *[doc___49200], **kwargs_49201)
        
        
        # Assigning a Num to a Name (line 1543):
        
        # Assigning a Num to a Name (line 1543):
        int_49203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1543, 24), 'int')
        # Assigning a type to the variable 'need_blas' (line 1543)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1543, 12), 'need_blas', int_49203)
        
        # Assigning a Num to a Name (line 1544):
        
        # Assigning a Num to a Name (line 1544):
        int_49204 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1544, 26), 'int')
        # Assigning a type to the variable 'need_lapack' (line 1544)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1544, 12), 'need_lapack', int_49204)
        
        # Call to dict_append(...): (line 1545)
        # Processing the call arguments (line 1545)
        # Getting the type of 'info' (line 1545)
        info_49206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1545, 24), 'info', False)
        # Processing the call keyword arguments (line 1545)
        
        # Obtaining an instance of the builtin type 'list' (line 1545)
        list_49207 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1545, 44), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1545)
        # Adding element type (line 1545)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1545)
        tuple_49208 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1545, 46), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1545)
        # Adding element type (line 1545)
        str_49209 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1545, 46), 'str', 'NO_ATLAS_INFO')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1545, 46), tuple_49208, str_49209)
        # Adding element type (line 1545)
        int_49210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1545, 63), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1545, 46), tuple_49208, int_49210)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1545, 44), list_49207, tuple_49208)
        
        keyword_49211 = list_49207
        kwargs_49212 = {'define_macros': keyword_49211}
        # Getting the type of 'dict_append' (line 1545)
        dict_append_49205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1545, 12), 'dict_append', False)
        # Calling dict_append(args, kwargs) (line 1545)
        dict_append_call_result_49213 = invoke(stypy.reporting.localization.Localization(__file__, 1545, 12), dict_append_49205, *[info_49206], **kwargs_49212)
        
        # SSA join for if statement (line 1534)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'need_lapack' (line 1547)
        need_lapack_49214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1547, 11), 'need_lapack')
        # Testing the type of an if condition (line 1547)
        if_condition_49215 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1547, 8), need_lapack_49214)
        # Assigning a type to the variable 'if_condition_49215' (line 1547)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1547, 8), 'if_condition_49215', if_condition_49215)
        # SSA begins for if statement (line 1547)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1548):
        
        # Assigning a Call to a Name (line 1548):
        
        # Call to get_info(...): (line 1548)
        # Processing the call arguments (line 1548)
        str_49217 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1548, 35), 'str', 'lapack')
        # Processing the call keyword arguments (line 1548)
        kwargs_49218 = {}
        # Getting the type of 'get_info' (line 1548)
        get_info_49216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1548, 26), 'get_info', False)
        # Calling get_info(args, kwargs) (line 1548)
        get_info_call_result_49219 = invoke(stypy.reporting.localization.Localization(__file__, 1548, 26), get_info_49216, *[str_49217], **kwargs_49218)
        
        # Assigning a type to the variable 'lapack_info' (line 1548)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1548, 12), 'lapack_info', get_info_call_result_49219)
        
        # Getting the type of 'lapack_info' (line 1550)
        lapack_info_49220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1550, 15), 'lapack_info')
        # Testing the type of an if condition (line 1550)
        if_condition_49221 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1550, 12), lapack_info_49220)
        # Assigning a type to the variable 'if_condition_49221' (line 1550)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1550, 12), 'if_condition_49221', if_condition_49221)
        # SSA begins for if statement (line 1550)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to dict_append(...): (line 1551)
        # Processing the call arguments (line 1551)
        # Getting the type of 'info' (line 1551)
        info_49223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 28), 'info', False)
        # Processing the call keyword arguments (line 1551)
        # Getting the type of 'lapack_info' (line 1551)
        lapack_info_49224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 36), 'lapack_info', False)
        kwargs_49225 = {'lapack_info_49224': lapack_info_49224}
        # Getting the type of 'dict_append' (line 1551)
        dict_append_49222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 16), 'dict_append', False)
        # Calling dict_append(args, kwargs) (line 1551)
        dict_append_call_result_49226 = invoke(stypy.reporting.localization.Localization(__file__, 1551, 16), dict_append_49222, *[info_49223], **kwargs_49225)
        
        # SSA branch for the else part of an if statement (line 1550)
        module_type_store.open_ssa_branch('else')
        
        # Call to warn(...): (line 1553)
        # Processing the call arguments (line 1553)
        # Getting the type of 'LapackNotFoundError' (line 1553)
        LapackNotFoundError_49229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1553, 30), 'LapackNotFoundError', False)
        # Obtaining the member '__doc__' of a type (line 1553)
        doc___49230 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1553, 30), LapackNotFoundError_49229, '__doc__')
        # Processing the call keyword arguments (line 1553)
        kwargs_49231 = {}
        # Getting the type of 'warnings' (line 1553)
        warnings_49227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1553, 16), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 1553)
        warn_49228 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1553, 16), warnings_49227, 'warn')
        # Calling warn(args, kwargs) (line 1553)
        warn_call_result_49232 = invoke(stypy.reporting.localization.Localization(__file__, 1553, 16), warn_49228, *[doc___49230], **kwargs_49231)
        
        
        # Assigning a Call to a Name (line 1554):
        
        # Assigning a Call to a Name (line 1554):
        
        # Call to get_info(...): (line 1554)
        # Processing the call arguments (line 1554)
        str_49234 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1554, 43), 'str', 'lapack_src')
        # Processing the call keyword arguments (line 1554)
        kwargs_49235 = {}
        # Getting the type of 'get_info' (line 1554)
        get_info_49233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1554, 34), 'get_info', False)
        # Calling get_info(args, kwargs) (line 1554)
        get_info_call_result_49236 = invoke(stypy.reporting.localization.Localization(__file__, 1554, 34), get_info_49233, *[str_49234], **kwargs_49235)
        
        # Assigning a type to the variable 'lapack_src_info' (line 1554)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1554, 16), 'lapack_src_info', get_info_call_result_49236)
        
        
        # Getting the type of 'lapack_src_info' (line 1555)
        lapack_src_info_49237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1555, 23), 'lapack_src_info')
        # Applying the 'not' unary operator (line 1555)
        result_not__49238 = python_operator(stypy.reporting.localization.Localization(__file__, 1555, 19), 'not', lapack_src_info_49237)
        
        # Testing the type of an if condition (line 1555)
        if_condition_49239 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1555, 16), result_not__49238)
        # Assigning a type to the variable 'if_condition_49239' (line 1555)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1555, 16), 'if_condition_49239', if_condition_49239)
        # SSA begins for if statement (line 1555)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 1556)
        # Processing the call arguments (line 1556)
        # Getting the type of 'LapackSrcNotFoundError' (line 1556)
        LapackSrcNotFoundError_49242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1556, 34), 'LapackSrcNotFoundError', False)
        # Obtaining the member '__doc__' of a type (line 1556)
        doc___49243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1556, 34), LapackSrcNotFoundError_49242, '__doc__')
        # Processing the call keyword arguments (line 1556)
        kwargs_49244 = {}
        # Getting the type of 'warnings' (line 1556)
        warnings_49240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1556, 20), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 1556)
        warn_49241 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1556, 20), warnings_49240, 'warn')
        # Calling warn(args, kwargs) (line 1556)
        warn_call_result_49245 = invoke(stypy.reporting.localization.Localization(__file__, 1556, 20), warn_49241, *[doc___49243], **kwargs_49244)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1557)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1557, 20), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1555)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to dict_append(...): (line 1558)
        # Processing the call arguments (line 1558)
        # Getting the type of 'info' (line 1558)
        info_49247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 28), 'info', False)
        # Processing the call keyword arguments (line 1558)
        
        # Obtaining an instance of the builtin type 'list' (line 1558)
        list_49248 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1558, 44), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1558)
        # Adding element type (line 1558)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1558)
        tuple_49249 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1558, 46), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1558)
        # Adding element type (line 1558)
        str_49250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1558, 46), 'str', 'flapack_src')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1558, 46), tuple_49249, str_49250)
        # Adding element type (line 1558)
        # Getting the type of 'lapack_src_info' (line 1558)
        lapack_src_info_49251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 61), 'lapack_src_info', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1558, 46), tuple_49249, lapack_src_info_49251)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1558, 44), list_49248, tuple_49249)
        
        keyword_49252 = list_49248
        kwargs_49253 = {'libraries': keyword_49252}
        # Getting the type of 'dict_append' (line 1558)
        dict_append_49246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 16), 'dict_append', False)
        # Calling dict_append(args, kwargs) (line 1558)
        dict_append_call_result_49254 = invoke(stypy.reporting.localization.Localization(__file__, 1558, 16), dict_append_49246, *[info_49247], **kwargs_49253)
        
        # SSA join for if statement (line 1550)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1547)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'need_blas' (line 1560)
        need_blas_49255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1560, 11), 'need_blas')
        # Testing the type of an if condition (line 1560)
        if_condition_49256 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1560, 8), need_blas_49255)
        # Assigning a type to the variable 'if_condition_49256' (line 1560)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1560, 8), 'if_condition_49256', if_condition_49256)
        # SSA begins for if statement (line 1560)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1561):
        
        # Assigning a Call to a Name (line 1561):
        
        # Call to get_info(...): (line 1561)
        # Processing the call arguments (line 1561)
        str_49258 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1561, 33), 'str', 'blas')
        # Processing the call keyword arguments (line 1561)
        kwargs_49259 = {}
        # Getting the type of 'get_info' (line 1561)
        get_info_49257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1561, 24), 'get_info', False)
        # Calling get_info(args, kwargs) (line 1561)
        get_info_call_result_49260 = invoke(stypy.reporting.localization.Localization(__file__, 1561, 24), get_info_49257, *[str_49258], **kwargs_49259)
        
        # Assigning a type to the variable 'blas_info' (line 1561)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1561, 12), 'blas_info', get_info_call_result_49260)
        
        # Getting the type of 'blas_info' (line 1562)
        blas_info_49261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1562, 15), 'blas_info')
        # Testing the type of an if condition (line 1562)
        if_condition_49262 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1562, 12), blas_info_49261)
        # Assigning a type to the variable 'if_condition_49262' (line 1562)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1562, 12), 'if_condition_49262', if_condition_49262)
        # SSA begins for if statement (line 1562)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to dict_append(...): (line 1563)
        # Processing the call arguments (line 1563)
        # Getting the type of 'info' (line 1563)
        info_49264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1563, 28), 'info', False)
        # Processing the call keyword arguments (line 1563)
        # Getting the type of 'blas_info' (line 1563)
        blas_info_49265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1563, 36), 'blas_info', False)
        kwargs_49266 = {'blas_info_49265': blas_info_49265}
        # Getting the type of 'dict_append' (line 1563)
        dict_append_49263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1563, 16), 'dict_append', False)
        # Calling dict_append(args, kwargs) (line 1563)
        dict_append_call_result_49267 = invoke(stypy.reporting.localization.Localization(__file__, 1563, 16), dict_append_49263, *[info_49264], **kwargs_49266)
        
        # SSA branch for the else part of an if statement (line 1562)
        module_type_store.open_ssa_branch('else')
        
        # Call to warn(...): (line 1565)
        # Processing the call arguments (line 1565)
        # Getting the type of 'BlasNotFoundError' (line 1565)
        BlasNotFoundError_49270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 30), 'BlasNotFoundError', False)
        # Obtaining the member '__doc__' of a type (line 1565)
        doc___49271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1565, 30), BlasNotFoundError_49270, '__doc__')
        # Processing the call keyword arguments (line 1565)
        kwargs_49272 = {}
        # Getting the type of 'warnings' (line 1565)
        warnings_49268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 16), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 1565)
        warn_49269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1565, 16), warnings_49268, 'warn')
        # Calling warn(args, kwargs) (line 1565)
        warn_call_result_49273 = invoke(stypy.reporting.localization.Localization(__file__, 1565, 16), warn_49269, *[doc___49271], **kwargs_49272)
        
        
        # Assigning a Call to a Name (line 1566):
        
        # Assigning a Call to a Name (line 1566):
        
        # Call to get_info(...): (line 1566)
        # Processing the call arguments (line 1566)
        str_49275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1566, 41), 'str', 'blas_src')
        # Processing the call keyword arguments (line 1566)
        kwargs_49276 = {}
        # Getting the type of 'get_info' (line 1566)
        get_info_49274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1566, 32), 'get_info', False)
        # Calling get_info(args, kwargs) (line 1566)
        get_info_call_result_49277 = invoke(stypy.reporting.localization.Localization(__file__, 1566, 32), get_info_49274, *[str_49275], **kwargs_49276)
        
        # Assigning a type to the variable 'blas_src_info' (line 1566)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1566, 16), 'blas_src_info', get_info_call_result_49277)
        
        
        # Getting the type of 'blas_src_info' (line 1567)
        blas_src_info_49278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 23), 'blas_src_info')
        # Applying the 'not' unary operator (line 1567)
        result_not__49279 = python_operator(stypy.reporting.localization.Localization(__file__, 1567, 19), 'not', blas_src_info_49278)
        
        # Testing the type of an if condition (line 1567)
        if_condition_49280 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1567, 16), result_not__49279)
        # Assigning a type to the variable 'if_condition_49280' (line 1567)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1567, 16), 'if_condition_49280', if_condition_49280)
        # SSA begins for if statement (line 1567)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 1568)
        # Processing the call arguments (line 1568)
        # Getting the type of 'BlasSrcNotFoundError' (line 1568)
        BlasSrcNotFoundError_49283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1568, 34), 'BlasSrcNotFoundError', False)
        # Obtaining the member '__doc__' of a type (line 1568)
        doc___49284 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1568, 34), BlasSrcNotFoundError_49283, '__doc__')
        # Processing the call keyword arguments (line 1568)
        kwargs_49285 = {}
        # Getting the type of 'warnings' (line 1568)
        warnings_49281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1568, 20), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 1568)
        warn_49282 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1568, 20), warnings_49281, 'warn')
        # Calling warn(args, kwargs) (line 1568)
        warn_call_result_49286 = invoke(stypy.reporting.localization.Localization(__file__, 1568, 20), warn_49282, *[doc___49284], **kwargs_49285)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1569)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1569, 20), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1567)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to dict_append(...): (line 1570)
        # Processing the call arguments (line 1570)
        # Getting the type of 'info' (line 1570)
        info_49288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1570, 28), 'info', False)
        # Processing the call keyword arguments (line 1570)
        
        # Obtaining an instance of the builtin type 'list' (line 1570)
        list_49289 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1570, 44), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1570)
        # Adding element type (line 1570)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1570)
        tuple_49290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1570, 46), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1570)
        # Adding element type (line 1570)
        str_49291 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1570, 46), 'str', 'fblas_src')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1570, 46), tuple_49290, str_49291)
        # Adding element type (line 1570)
        # Getting the type of 'blas_src_info' (line 1570)
        blas_src_info_49292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1570, 59), 'blas_src_info', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1570, 46), tuple_49290, blas_src_info_49292)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1570, 44), list_49289, tuple_49290)
        
        keyword_49293 = list_49289
        kwargs_49294 = {'libraries': keyword_49293}
        # Getting the type of 'dict_append' (line 1570)
        dict_append_49287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1570, 16), 'dict_append', False)
        # Calling dict_append(args, kwargs) (line 1570)
        dict_append_call_result_49295 = invoke(stypy.reporting.localization.Localization(__file__, 1570, 16), dict_append_49287, *[info_49288], **kwargs_49294)
        
        # SSA join for if statement (line 1562)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1560)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_info(...): (line 1572)
        # Processing the call keyword arguments (line 1572)
        # Getting the type of 'info' (line 1572)
        info_49298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1572, 24), 'info', False)
        kwargs_49299 = {'info_49298': info_49298}
        # Getting the type of 'self' (line 1572)
        self_49296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1572, 8), 'self', False)
        # Obtaining the member 'set_info' of a type (line 1572)
        set_info_49297 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1572, 8), self_49296, 'set_info')
        # Calling set_info(args, kwargs) (line 1572)
        set_info_call_result_49300 = invoke(stypy.reporting.localization.Localization(__file__, 1572, 8), set_info_49297, *[], **kwargs_49299)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1573)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1573, 8), 'stypy_return_type', types.NoneType)
        
        # ################# End of 'calc_info(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'calc_info' in the type store
        # Getting the type of 'stypy_return_type' (line 1480)
        stypy_return_type_49301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1480, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_49301)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'calc_info'
        return stypy_return_type_49301


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1476, 0, False)
        # Assigning a type to the variable 'self' (line 1477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1477, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'lapack_opt_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'lapack_opt_info' (line 1476)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1476, 0), 'lapack_opt_info', lapack_opt_info)

# Assigning a Name to a Name (line 1478):
# Getting the type of 'LapackNotFoundError' (line 1478)
LapackNotFoundError_49302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1478, 20), 'LapackNotFoundError')
# Getting the type of 'lapack_opt_info'
lapack_opt_info_49303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'lapack_opt_info')
# Setting the type of the member 'notfounderror' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), lapack_opt_info_49303, 'notfounderror', LapackNotFoundError_49302)
# Declaration of the 'blas_opt_info' class
# Getting the type of 'system_info' (line 1576)
system_info_49304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1576, 20), 'system_info')

class blas_opt_info(system_info_49304, ):
    
    # Assigning a Name to a Name (line 1578):

    @norecursion
    def calc_info(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'calc_info'
        module_type_store = module_type_store.open_function_context('calc_info', 1580, 4, False)
        # Assigning a type to the variable 'self' (line 1581)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1581, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        blas_opt_info.calc_info.__dict__.__setitem__('stypy_localization', localization)
        blas_opt_info.calc_info.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        blas_opt_info.calc_info.__dict__.__setitem__('stypy_type_store', module_type_store)
        blas_opt_info.calc_info.__dict__.__setitem__('stypy_function_name', 'blas_opt_info.calc_info')
        blas_opt_info.calc_info.__dict__.__setitem__('stypy_param_names_list', [])
        blas_opt_info.calc_info.__dict__.__setitem__('stypy_varargs_param_name', None)
        blas_opt_info.calc_info.__dict__.__setitem__('stypy_kwargs_param_name', None)
        blas_opt_info.calc_info.__dict__.__setitem__('stypy_call_defaults', defaults)
        blas_opt_info.calc_info.__dict__.__setitem__('stypy_call_varargs', varargs)
        blas_opt_info.calc_info.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        blas_opt_info.calc_info.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'blas_opt_info.calc_info', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'calc_info', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'calc_info(...)' code ##################

        
        # Assigning a Call to a Name (line 1582):
        
        # Assigning a Call to a Name (line 1582):
        
        # Call to get_info(...): (line 1582)
        # Processing the call arguments (line 1582)
        str_49306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1582, 33), 'str', 'blas_mkl')
        # Processing the call keyword arguments (line 1582)
        kwargs_49307 = {}
        # Getting the type of 'get_info' (line 1582)
        get_info_49305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 24), 'get_info', False)
        # Calling get_info(args, kwargs) (line 1582)
        get_info_call_result_49308 = invoke(stypy.reporting.localization.Localization(__file__, 1582, 24), get_info_49305, *[str_49306], **kwargs_49307)
        
        # Assigning a type to the variable 'blas_mkl_info' (line 1582)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1582, 8), 'blas_mkl_info', get_info_call_result_49308)
        
        # Getting the type of 'blas_mkl_info' (line 1583)
        blas_mkl_info_49309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 11), 'blas_mkl_info')
        # Testing the type of an if condition (line 1583)
        if_condition_49310 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1583, 8), blas_mkl_info_49309)
        # Assigning a type to the variable 'if_condition_49310' (line 1583)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1583, 8), 'if_condition_49310', if_condition_49310)
        # SSA begins for if statement (line 1583)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_info(...): (line 1584)
        # Processing the call keyword arguments (line 1584)
        # Getting the type of 'blas_mkl_info' (line 1584)
        blas_mkl_info_49313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1584, 28), 'blas_mkl_info', False)
        kwargs_49314 = {'blas_mkl_info_49313': blas_mkl_info_49313}
        # Getting the type of 'self' (line 1584)
        self_49311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1584, 12), 'self', False)
        # Obtaining the member 'set_info' of a type (line 1584)
        set_info_49312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1584, 12), self_49311, 'set_info')
        # Calling set_info(args, kwargs) (line 1584)
        set_info_call_result_49315 = invoke(stypy.reporting.localization.Localization(__file__, 1584, 12), set_info_49312, *[], **kwargs_49314)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1585)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1585, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1583)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1587):
        
        # Assigning a Call to a Name (line 1587):
        
        # Call to get_info(...): (line 1587)
        # Processing the call arguments (line 1587)
        str_49317 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1587, 33), 'str', 'openblas')
        # Processing the call keyword arguments (line 1587)
        kwargs_49318 = {}
        # Getting the type of 'get_info' (line 1587)
        get_info_49316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1587, 24), 'get_info', False)
        # Calling get_info(args, kwargs) (line 1587)
        get_info_call_result_49319 = invoke(stypy.reporting.localization.Localization(__file__, 1587, 24), get_info_49316, *[str_49317], **kwargs_49318)
        
        # Assigning a type to the variable 'openblas_info' (line 1587)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1587, 8), 'openblas_info', get_info_call_result_49319)
        
        # Getting the type of 'openblas_info' (line 1588)
        openblas_info_49320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1588, 11), 'openblas_info')
        # Testing the type of an if condition (line 1588)
        if_condition_49321 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1588, 8), openblas_info_49320)
        # Assigning a type to the variable 'if_condition_49321' (line 1588)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1588, 8), 'if_condition_49321', if_condition_49321)
        # SSA begins for if statement (line 1588)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_info(...): (line 1589)
        # Processing the call keyword arguments (line 1589)
        # Getting the type of 'openblas_info' (line 1589)
        openblas_info_49324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1589, 28), 'openblas_info', False)
        kwargs_49325 = {'openblas_info_49324': openblas_info_49324}
        # Getting the type of 'self' (line 1589)
        self_49322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1589, 12), 'self', False)
        # Obtaining the member 'set_info' of a type (line 1589)
        set_info_49323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1589, 12), self_49322, 'set_info')
        # Calling set_info(args, kwargs) (line 1589)
        set_info_call_result_49326 = invoke(stypy.reporting.localization.Localization(__file__, 1589, 12), set_info_49323, *[], **kwargs_49325)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1590)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1590, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1588)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1592):
        
        # Assigning a Call to a Name (line 1592):
        
        # Call to get_info(...): (line 1592)
        # Processing the call arguments (line 1592)
        str_49328 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1592, 30), 'str', 'atlas_3_10_blas_threads')
        # Processing the call keyword arguments (line 1592)
        kwargs_49329 = {}
        # Getting the type of 'get_info' (line 1592)
        get_info_49327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1592, 21), 'get_info', False)
        # Calling get_info(args, kwargs) (line 1592)
        get_info_call_result_49330 = invoke(stypy.reporting.localization.Localization(__file__, 1592, 21), get_info_49327, *[str_49328], **kwargs_49329)
        
        # Assigning a type to the variable 'atlas_info' (line 1592)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1592, 8), 'atlas_info', get_info_call_result_49330)
        
        
        # Getting the type of 'atlas_info' (line 1593)
        atlas_info_49331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 15), 'atlas_info')
        # Applying the 'not' unary operator (line 1593)
        result_not__49332 = python_operator(stypy.reporting.localization.Localization(__file__, 1593, 11), 'not', atlas_info_49331)
        
        # Testing the type of an if condition (line 1593)
        if_condition_49333 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1593, 8), result_not__49332)
        # Assigning a type to the variable 'if_condition_49333' (line 1593)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1593, 8), 'if_condition_49333', if_condition_49333)
        # SSA begins for if statement (line 1593)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1594):
        
        # Assigning a Call to a Name (line 1594):
        
        # Call to get_info(...): (line 1594)
        # Processing the call arguments (line 1594)
        str_49335 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1594, 34), 'str', 'atlas_3_10_blas')
        # Processing the call keyword arguments (line 1594)
        kwargs_49336 = {}
        # Getting the type of 'get_info' (line 1594)
        get_info_49334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1594, 25), 'get_info', False)
        # Calling get_info(args, kwargs) (line 1594)
        get_info_call_result_49337 = invoke(stypy.reporting.localization.Localization(__file__, 1594, 25), get_info_49334, *[str_49335], **kwargs_49336)
        
        # Assigning a type to the variable 'atlas_info' (line 1594)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1594, 12), 'atlas_info', get_info_call_result_49337)
        # SSA join for if statement (line 1593)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'atlas_info' (line 1595)
        atlas_info_49338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1595, 15), 'atlas_info')
        # Applying the 'not' unary operator (line 1595)
        result_not__49339 = python_operator(stypy.reporting.localization.Localization(__file__, 1595, 11), 'not', atlas_info_49338)
        
        # Testing the type of an if condition (line 1595)
        if_condition_49340 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1595, 8), result_not__49339)
        # Assigning a type to the variable 'if_condition_49340' (line 1595)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1595, 8), 'if_condition_49340', if_condition_49340)
        # SSA begins for if statement (line 1595)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1596):
        
        # Assigning a Call to a Name (line 1596):
        
        # Call to get_info(...): (line 1596)
        # Processing the call arguments (line 1596)
        str_49342 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1596, 34), 'str', 'atlas_blas_threads')
        # Processing the call keyword arguments (line 1596)
        kwargs_49343 = {}
        # Getting the type of 'get_info' (line 1596)
        get_info_49341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1596, 25), 'get_info', False)
        # Calling get_info(args, kwargs) (line 1596)
        get_info_call_result_49344 = invoke(stypy.reporting.localization.Localization(__file__, 1596, 25), get_info_49341, *[str_49342], **kwargs_49343)
        
        # Assigning a type to the variable 'atlas_info' (line 1596)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1596, 12), 'atlas_info', get_info_call_result_49344)
        # SSA join for if statement (line 1595)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'atlas_info' (line 1597)
        atlas_info_49345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1597, 15), 'atlas_info')
        # Applying the 'not' unary operator (line 1597)
        result_not__49346 = python_operator(stypy.reporting.localization.Localization(__file__, 1597, 11), 'not', atlas_info_49345)
        
        # Testing the type of an if condition (line 1597)
        if_condition_49347 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1597, 8), result_not__49346)
        # Assigning a type to the variable 'if_condition_49347' (line 1597)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1597, 8), 'if_condition_49347', if_condition_49347)
        # SSA begins for if statement (line 1597)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1598):
        
        # Assigning a Call to a Name (line 1598):
        
        # Call to get_info(...): (line 1598)
        # Processing the call arguments (line 1598)
        str_49349 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1598, 34), 'str', 'atlas_blas')
        # Processing the call keyword arguments (line 1598)
        kwargs_49350 = {}
        # Getting the type of 'get_info' (line 1598)
        get_info_49348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1598, 25), 'get_info', False)
        # Calling get_info(args, kwargs) (line 1598)
        get_info_call_result_49351 = invoke(stypy.reporting.localization.Localization(__file__, 1598, 25), get_info_49348, *[str_49349], **kwargs_49350)
        
        # Assigning a type to the variable 'atlas_info' (line 1598)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1598, 12), 'atlas_info', get_info_call_result_49351)
        # SSA join for if statement (line 1597)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'sys' (line 1600)
        sys_49352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 11), 'sys')
        # Obtaining the member 'platform' of a type (line 1600)
        platform_49353 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1600, 11), sys_49352, 'platform')
        str_49354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1600, 27), 'str', 'darwin')
        # Applying the binary operator '==' (line 1600)
        result_eq_49355 = python_operator(stypy.reporting.localization.Localization(__file__, 1600, 11), '==', platform_49353, str_49354)
        
        
        # Getting the type of 'atlas_info' (line 1600)
        atlas_info_49356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 44), 'atlas_info')
        # Applying the 'not' unary operator (line 1600)
        result_not__49357 = python_operator(stypy.reporting.localization.Localization(__file__, 1600, 40), 'not', atlas_info_49356)
        
        # Applying the binary operator 'and' (line 1600)
        result_and_keyword_49358 = python_operator(stypy.reporting.localization.Localization(__file__, 1600, 11), 'and', result_eq_49355, result_not__49357)
        
        # Testing the type of an if condition (line 1600)
        if_condition_49359 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1600, 8), result_and_keyword_49358)
        # Assigning a type to the variable 'if_condition_49359' (line 1600)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1600, 8), 'if_condition_49359', if_condition_49359)
        # SSA begins for if statement (line 1600)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a List to a Name (line 1602):
        
        # Assigning a List to a Name (line 1602):
        
        # Obtaining an instance of the builtin type 'list' (line 1602)
        list_49360 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1602, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1602)
        
        # Assigning a type to the variable 'args' (line 1602)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1602, 12), 'args', list_49360)
        
        # Assigning a List to a Name (line 1603):
        
        # Assigning a List to a Name (line 1603):
        
        # Obtaining an instance of the builtin type 'list' (line 1603)
        list_49361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1603, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1603)
        
        # Assigning a type to the variable 'link_args' (line 1603)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1603, 12), 'link_args', list_49361)
        
        
        # Evaluating a boolean operation
        
        
        # Obtaining the type of the subscript
        int_49362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1604, 30), 'int')
        slice_49363 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1604, 15), int_49362, None, None)
        
        # Call to get_platform(...): (line 1604)
        # Processing the call keyword arguments (line 1604)
        kwargs_49365 = {}
        # Getting the type of 'get_platform' (line 1604)
        get_platform_49364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1604, 15), 'get_platform', False)
        # Calling get_platform(args, kwargs) (line 1604)
        get_platform_call_result_49366 = invoke(stypy.reporting.localization.Localization(__file__, 1604, 15), get_platform_49364, *[], **kwargs_49365)
        
        # Obtaining the member '__getitem__' of a type (line 1604)
        getitem___49367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1604, 15), get_platform_call_result_49366, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1604)
        subscript_call_result_49368 = invoke(stypy.reporting.localization.Localization(__file__, 1604, 15), getitem___49367, slice_49363)
        
        str_49369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1604, 38), 'str', 'i386')
        # Applying the binary operator '==' (line 1604)
        result_eq_49370 = python_operator(stypy.reporting.localization.Localization(__file__, 1604, 15), '==', subscript_call_result_49368, str_49369)
        
        
        str_49371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1604, 48), 'str', 'intel')
        
        # Call to get_platform(...): (line 1604)
        # Processing the call keyword arguments (line 1604)
        kwargs_49373 = {}
        # Getting the type of 'get_platform' (line 1604)
        get_platform_49372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1604, 59), 'get_platform', False)
        # Calling get_platform(args, kwargs) (line 1604)
        get_platform_call_result_49374 = invoke(stypy.reporting.localization.Localization(__file__, 1604, 59), get_platform_49372, *[], **kwargs_49373)
        
        # Applying the binary operator 'in' (line 1604)
        result_contains_49375 = python_operator(stypy.reporting.localization.Localization(__file__, 1604, 48), 'in', str_49371, get_platform_call_result_49374)
        
        # Applying the binary operator 'or' (line 1604)
        result_or_keyword_49376 = python_operator(stypy.reporting.localization.Localization(__file__, 1604, 15), 'or', result_eq_49370, result_contains_49375)
        
        str_49377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1605, 15), 'str', 'x86_64')
        
        # Call to get_platform(...): (line 1605)
        # Processing the call keyword arguments (line 1605)
        kwargs_49379 = {}
        # Getting the type of 'get_platform' (line 1605)
        get_platform_49378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1605, 27), 'get_platform', False)
        # Calling get_platform(args, kwargs) (line 1605)
        get_platform_call_result_49380 = invoke(stypy.reporting.localization.Localization(__file__, 1605, 27), get_platform_49378, *[], **kwargs_49379)
        
        # Applying the binary operator 'in' (line 1605)
        result_contains_49381 = python_operator(stypy.reporting.localization.Localization(__file__, 1605, 15), 'in', str_49377, get_platform_call_result_49380)
        
        # Applying the binary operator 'or' (line 1604)
        result_or_keyword_49382 = python_operator(stypy.reporting.localization.Localization(__file__, 1604, 15), 'or', result_or_keyword_49376, result_contains_49381)
        
        str_49383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1606, 15), 'str', 'i386')
        
        # Call to platform(...): (line 1606)
        # Processing the call keyword arguments (line 1606)
        kwargs_49386 = {}
        # Getting the type of 'platform' (line 1606)
        platform_49384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 25), 'platform', False)
        # Obtaining the member 'platform' of a type (line 1606)
        platform_49385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1606, 25), platform_49384, 'platform')
        # Calling platform(args, kwargs) (line 1606)
        platform_call_result_49387 = invoke(stypy.reporting.localization.Localization(__file__, 1606, 25), platform_49385, *[], **kwargs_49386)
        
        # Applying the binary operator 'in' (line 1606)
        result_contains_49388 = python_operator(stypy.reporting.localization.Localization(__file__, 1606, 15), 'in', str_49383, platform_call_result_49387)
        
        # Applying the binary operator 'or' (line 1604)
        result_or_keyword_49389 = python_operator(stypy.reporting.localization.Localization(__file__, 1604, 15), 'or', result_or_keyword_49382, result_contains_49388)
        
        # Testing the type of an if condition (line 1604)
        if_condition_49390 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1604, 12), result_or_keyword_49389)
        # Assigning a type to the variable 'if_condition_49390' (line 1604)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1604, 12), 'if_condition_49390', if_condition_49390)
        # SSA begins for if statement (line 1604)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 1607):
        
        # Assigning a Num to a Name (line 1607):
        int_49391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1607, 24), 'int')
        # Assigning a type to the variable 'intel' (line 1607)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1607, 16), 'intel', int_49391)
        # SSA branch for the else part of an if statement (line 1604)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Num to a Name (line 1609):
        
        # Assigning a Num to a Name (line 1609):
        int_49392 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1609, 24), 'int')
        # Assigning a type to the variable 'intel' (line 1609)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1609, 16), 'intel', int_49392)
        # SSA join for if statement (line 1604)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to exists(...): (line 1610)
        # Processing the call arguments (line 1610)
        str_49396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1610, 30), 'str', '/System/Library/Frameworks/Accelerate.framework/')
        # Processing the call keyword arguments (line 1610)
        kwargs_49397 = {}
        # Getting the type of 'os' (line 1610)
        os_49393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1610, 15), 'os', False)
        # Obtaining the member 'path' of a type (line 1610)
        path_49394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1610, 15), os_49393, 'path')
        # Obtaining the member 'exists' of a type (line 1610)
        exists_49395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1610, 15), path_49394, 'exists')
        # Calling exists(args, kwargs) (line 1610)
        exists_call_result_49398 = invoke(stypy.reporting.localization.Localization(__file__, 1610, 15), exists_49395, *[str_49396], **kwargs_49397)
        
        # Testing the type of an if condition (line 1610)
        if_condition_49399 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1610, 12), exists_call_result_49398)
        # Assigning a type to the variable 'if_condition_49399' (line 1610)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1610, 12), 'if_condition_49399', if_condition_49399)
        # SSA begins for if statement (line 1610)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'intel' (line 1612)
        intel_49400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1612, 19), 'intel')
        # Testing the type of an if condition (line 1612)
        if_condition_49401 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1612, 16), intel_49400)
        # Assigning a type to the variable 'if_condition_49401' (line 1612)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1612, 16), 'if_condition_49401', if_condition_49401)
        # SSA begins for if statement (line 1612)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to extend(...): (line 1613)
        # Processing the call arguments (line 1613)
        
        # Obtaining an instance of the builtin type 'list' (line 1613)
        list_49404 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1613, 32), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1613)
        # Adding element type (line 1613)
        str_49405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1613, 33), 'str', '-msse3')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1613, 32), list_49404, str_49405)
        
        # Processing the call keyword arguments (line 1613)
        kwargs_49406 = {}
        # Getting the type of 'args' (line 1613)
        args_49402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1613, 20), 'args', False)
        # Obtaining the member 'extend' of a type (line 1613)
        extend_49403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1613, 20), args_49402, 'extend')
        # Calling extend(args, kwargs) (line 1613)
        extend_call_result_49407 = invoke(stypy.reporting.localization.Localization(__file__, 1613, 20), extend_49403, *[list_49404], **kwargs_49406)
        
        # SSA branch for the else part of an if statement (line 1612)
        module_type_store.open_ssa_branch('else')
        
        # Call to extend(...): (line 1615)
        # Processing the call arguments (line 1615)
        
        # Obtaining an instance of the builtin type 'list' (line 1615)
        list_49410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1615, 32), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1615)
        # Adding element type (line 1615)
        str_49411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1615, 33), 'str', '-faltivec')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1615, 32), list_49410, str_49411)
        
        # Processing the call keyword arguments (line 1615)
        kwargs_49412 = {}
        # Getting the type of 'args' (line 1615)
        args_49408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1615, 20), 'args', False)
        # Obtaining the member 'extend' of a type (line 1615)
        extend_49409 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1615, 20), args_49408, 'extend')
        # Calling extend(args, kwargs) (line 1615)
        extend_call_result_49413 = invoke(stypy.reporting.localization.Localization(__file__, 1615, 20), extend_49409, *[list_49410], **kwargs_49412)
        
        # SSA join for if statement (line 1612)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to extend(...): (line 1616)
        # Processing the call arguments (line 1616)
        
        # Obtaining an instance of the builtin type 'list' (line 1616)
        list_49416 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1616, 28), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1616)
        # Adding element type (line 1616)
        str_49417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1617, 20), 'str', '-I/System/Library/Frameworks/vecLib.framework/Headers')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1616, 28), list_49416, str_49417)
        
        # Processing the call keyword arguments (line 1616)
        kwargs_49418 = {}
        # Getting the type of 'args' (line 1616)
        args_49414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1616, 16), 'args', False)
        # Obtaining the member 'extend' of a type (line 1616)
        extend_49415 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1616, 16), args_49414, 'extend')
        # Calling extend(args, kwargs) (line 1616)
        extend_call_result_49419 = invoke(stypy.reporting.localization.Localization(__file__, 1616, 16), extend_49415, *[list_49416], **kwargs_49418)
        
        
        # Call to extend(...): (line 1618)
        # Processing the call arguments (line 1618)
        
        # Obtaining an instance of the builtin type 'list' (line 1618)
        list_49422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1618, 33), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1618)
        # Adding element type (line 1618)
        str_49423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1618, 34), 'str', '-Wl,-framework')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1618, 33), list_49422, str_49423)
        # Adding element type (line 1618)
        str_49424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1618, 52), 'str', '-Wl,Accelerate')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1618, 33), list_49422, str_49424)
        
        # Processing the call keyword arguments (line 1618)
        kwargs_49425 = {}
        # Getting the type of 'link_args' (line 1618)
        link_args_49420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1618, 16), 'link_args', False)
        # Obtaining the member 'extend' of a type (line 1618)
        extend_49421 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1618, 16), link_args_49420, 'extend')
        # Calling extend(args, kwargs) (line 1618)
        extend_call_result_49426 = invoke(stypy.reporting.localization.Localization(__file__, 1618, 16), extend_49421, *[list_49422], **kwargs_49425)
        
        # SSA branch for the else part of an if statement (line 1610)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to exists(...): (line 1619)
        # Processing the call arguments (line 1619)
        str_49430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1619, 32), 'str', '/System/Library/Frameworks/vecLib.framework/')
        # Processing the call keyword arguments (line 1619)
        kwargs_49431 = {}
        # Getting the type of 'os' (line 1619)
        os_49427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1619, 17), 'os', False)
        # Obtaining the member 'path' of a type (line 1619)
        path_49428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1619, 17), os_49427, 'path')
        # Obtaining the member 'exists' of a type (line 1619)
        exists_49429 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1619, 17), path_49428, 'exists')
        # Calling exists(args, kwargs) (line 1619)
        exists_call_result_49432 = invoke(stypy.reporting.localization.Localization(__file__, 1619, 17), exists_49429, *[str_49430], **kwargs_49431)
        
        # Testing the type of an if condition (line 1619)
        if_condition_49433 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1619, 17), exists_call_result_49432)
        # Assigning a type to the variable 'if_condition_49433' (line 1619)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1619, 17), 'if_condition_49433', if_condition_49433)
        # SSA begins for if statement (line 1619)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'intel' (line 1621)
        intel_49434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1621, 19), 'intel')
        # Testing the type of an if condition (line 1621)
        if_condition_49435 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1621, 16), intel_49434)
        # Assigning a type to the variable 'if_condition_49435' (line 1621)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1621, 16), 'if_condition_49435', if_condition_49435)
        # SSA begins for if statement (line 1621)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to extend(...): (line 1622)
        # Processing the call arguments (line 1622)
        
        # Obtaining an instance of the builtin type 'list' (line 1622)
        list_49438 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1622, 32), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1622)
        # Adding element type (line 1622)
        str_49439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1622, 33), 'str', '-msse3')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1622, 32), list_49438, str_49439)
        
        # Processing the call keyword arguments (line 1622)
        kwargs_49440 = {}
        # Getting the type of 'args' (line 1622)
        args_49436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 20), 'args', False)
        # Obtaining the member 'extend' of a type (line 1622)
        extend_49437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1622, 20), args_49436, 'extend')
        # Calling extend(args, kwargs) (line 1622)
        extend_call_result_49441 = invoke(stypy.reporting.localization.Localization(__file__, 1622, 20), extend_49437, *[list_49438], **kwargs_49440)
        
        # SSA branch for the else part of an if statement (line 1621)
        module_type_store.open_ssa_branch('else')
        
        # Call to extend(...): (line 1624)
        # Processing the call arguments (line 1624)
        
        # Obtaining an instance of the builtin type 'list' (line 1624)
        list_49444 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1624, 32), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1624)
        # Adding element type (line 1624)
        str_49445 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1624, 33), 'str', '-faltivec')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1624, 32), list_49444, str_49445)
        
        # Processing the call keyword arguments (line 1624)
        kwargs_49446 = {}
        # Getting the type of 'args' (line 1624)
        args_49442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1624, 20), 'args', False)
        # Obtaining the member 'extend' of a type (line 1624)
        extend_49443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1624, 20), args_49442, 'extend')
        # Calling extend(args, kwargs) (line 1624)
        extend_call_result_49447 = invoke(stypy.reporting.localization.Localization(__file__, 1624, 20), extend_49443, *[list_49444], **kwargs_49446)
        
        # SSA join for if statement (line 1621)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to extend(...): (line 1625)
        # Processing the call arguments (line 1625)
        
        # Obtaining an instance of the builtin type 'list' (line 1625)
        list_49450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1625, 28), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1625)
        # Adding element type (line 1625)
        str_49451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1626, 20), 'str', '-I/System/Library/Frameworks/vecLib.framework/Headers')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1625, 28), list_49450, str_49451)
        
        # Processing the call keyword arguments (line 1625)
        kwargs_49452 = {}
        # Getting the type of 'args' (line 1625)
        args_49448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1625, 16), 'args', False)
        # Obtaining the member 'extend' of a type (line 1625)
        extend_49449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1625, 16), args_49448, 'extend')
        # Calling extend(args, kwargs) (line 1625)
        extend_call_result_49453 = invoke(stypy.reporting.localization.Localization(__file__, 1625, 16), extend_49449, *[list_49450], **kwargs_49452)
        
        
        # Call to extend(...): (line 1627)
        # Processing the call arguments (line 1627)
        
        # Obtaining an instance of the builtin type 'list' (line 1627)
        list_49456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1627, 33), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1627)
        # Adding element type (line 1627)
        str_49457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1627, 34), 'str', '-Wl,-framework')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1627, 33), list_49456, str_49457)
        # Adding element type (line 1627)
        str_49458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1627, 52), 'str', '-Wl,vecLib')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1627, 33), list_49456, str_49458)
        
        # Processing the call keyword arguments (line 1627)
        kwargs_49459 = {}
        # Getting the type of 'link_args' (line 1627)
        link_args_49454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1627, 16), 'link_args', False)
        # Obtaining the member 'extend' of a type (line 1627)
        extend_49455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1627, 16), link_args_49454, 'extend')
        # Calling extend(args, kwargs) (line 1627)
        extend_call_result_49460 = invoke(stypy.reporting.localization.Localization(__file__, 1627, 16), extend_49455, *[list_49456], **kwargs_49459)
        
        # SSA join for if statement (line 1619)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1610)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'args' (line 1628)
        args_49461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1628, 15), 'args')
        # Testing the type of an if condition (line 1628)
        if_condition_49462 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1628, 12), args_49461)
        # Assigning a type to the variable 'if_condition_49462' (line 1628)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1628, 12), 'if_condition_49462', if_condition_49462)
        # SSA begins for if statement (line 1628)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_info(...): (line 1629)
        # Processing the call keyword arguments (line 1629)
        # Getting the type of 'args' (line 1629)
        args_49465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1629, 49), 'args', False)
        keyword_49466 = args_49465
        # Getting the type of 'link_args' (line 1630)
        link_args_49467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 46), 'link_args', False)
        keyword_49468 = link_args_49467
        
        # Obtaining an instance of the builtin type 'list' (line 1631)
        list_49469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1631, 44), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1631)
        # Adding element type (line 1631)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1631)
        tuple_49470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1631, 46), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1631)
        # Adding element type (line 1631)
        str_49471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1631, 46), 'str', 'NO_ATLAS_INFO')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1631, 46), tuple_49470, str_49471)
        # Adding element type (line 1631)
        int_49472 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1631, 63), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1631, 46), tuple_49470, int_49472)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1631, 44), list_49469, tuple_49470)
        # Adding element type (line 1631)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1632)
        tuple_49473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1632, 46), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1632)
        # Adding element type (line 1632)
        str_49474 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1632, 46), 'str', 'HAVE_CBLAS')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1632, 46), tuple_49473, str_49474)
        # Adding element type (line 1632)
        # Getting the type of 'None' (line 1632)
        None_49475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1632, 60), 'None', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1632, 46), tuple_49473, None_49475)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1631, 44), list_49469, tuple_49473)
        
        keyword_49476 = list_49469
        kwargs_49477 = {'extra_link_args': keyword_49468, 'define_macros': keyword_49476, 'extra_compile_args': keyword_49466}
        # Getting the type of 'self' (line 1629)
        self_49463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1629, 16), 'self', False)
        # Obtaining the member 'set_info' of a type (line 1629)
        set_info_49464 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1629, 16), self_49463, 'set_info')
        # Calling set_info(args, kwargs) (line 1629)
        set_info_call_result_49478 = invoke(stypy.reporting.localization.Localization(__file__, 1629, 16), set_info_49464, *[], **kwargs_49477)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1633)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1633, 16), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1628)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1600)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Num to a Name (line 1635):
        
        # Assigning a Num to a Name (line 1635):
        int_49479 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1635, 20), 'int')
        # Assigning a type to the variable 'need_blas' (line 1635)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1635, 8), 'need_blas', int_49479)
        
        # Assigning a Dict to a Name (line 1636):
        
        # Assigning a Dict to a Name (line 1636):
        
        # Obtaining an instance of the builtin type 'dict' (line 1636)
        dict_49480 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1636, 15), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 1636)
        
        # Assigning a type to the variable 'info' (line 1636)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1636, 8), 'info', dict_49480)
        
        # Getting the type of 'atlas_info' (line 1637)
        atlas_info_49481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1637, 11), 'atlas_info')
        # Testing the type of an if condition (line 1637)
        if_condition_49482 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1637, 8), atlas_info_49481)
        # Assigning a type to the variable 'if_condition_49482' (line 1637)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1637, 8), 'if_condition_49482', if_condition_49482)
        # SSA begins for if statement (line 1637)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1638):
        
        # Assigning a Name to a Name (line 1638):
        # Getting the type of 'atlas_info' (line 1638)
        atlas_info_49483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 19), 'atlas_info')
        # Assigning a type to the variable 'info' (line 1638)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1638, 12), 'info', atlas_info_49483)
        # SSA branch for the else part of an if statement (line 1637)
        module_type_store.open_ssa_branch('else')
        
        # Call to warn(...): (line 1640)
        # Processing the call arguments (line 1640)
        # Getting the type of 'AtlasNotFoundError' (line 1640)
        AtlasNotFoundError_49486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1640, 26), 'AtlasNotFoundError', False)
        # Obtaining the member '__doc__' of a type (line 1640)
        doc___49487 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1640, 26), AtlasNotFoundError_49486, '__doc__')
        # Processing the call keyword arguments (line 1640)
        kwargs_49488 = {}
        # Getting the type of 'warnings' (line 1640)
        warnings_49484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1640, 12), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 1640)
        warn_49485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1640, 12), warnings_49484, 'warn')
        # Calling warn(args, kwargs) (line 1640)
        warn_call_result_49489 = invoke(stypy.reporting.localization.Localization(__file__, 1640, 12), warn_49485, *[doc___49487], **kwargs_49488)
        
        
        # Assigning a Num to a Name (line 1641):
        
        # Assigning a Num to a Name (line 1641):
        int_49490 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1641, 24), 'int')
        # Assigning a type to the variable 'need_blas' (line 1641)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1641, 12), 'need_blas', int_49490)
        
        # Call to dict_append(...): (line 1642)
        # Processing the call arguments (line 1642)
        # Getting the type of 'info' (line 1642)
        info_49492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1642, 24), 'info', False)
        # Processing the call keyword arguments (line 1642)
        
        # Obtaining an instance of the builtin type 'list' (line 1642)
        list_49493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1642, 44), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1642)
        # Adding element type (line 1642)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1642)
        tuple_49494 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1642, 46), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1642)
        # Adding element type (line 1642)
        str_49495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1642, 46), 'str', 'NO_ATLAS_INFO')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1642, 46), tuple_49494, str_49495)
        # Adding element type (line 1642)
        int_49496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1642, 63), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1642, 46), tuple_49494, int_49496)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1642, 44), list_49493, tuple_49494)
        
        keyword_49497 = list_49493
        kwargs_49498 = {'define_macros': keyword_49497}
        # Getting the type of 'dict_append' (line 1642)
        dict_append_49491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1642, 12), 'dict_append', False)
        # Calling dict_append(args, kwargs) (line 1642)
        dict_append_call_result_49499 = invoke(stypy.reporting.localization.Localization(__file__, 1642, 12), dict_append_49491, *[info_49492], **kwargs_49498)
        
        # SSA join for if statement (line 1637)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'need_blas' (line 1644)
        need_blas_49500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1644, 11), 'need_blas')
        # Testing the type of an if condition (line 1644)
        if_condition_49501 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1644, 8), need_blas_49500)
        # Assigning a type to the variable 'if_condition_49501' (line 1644)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1644, 8), 'if_condition_49501', if_condition_49501)
        # SSA begins for if statement (line 1644)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1645):
        
        # Assigning a Call to a Name (line 1645):
        
        # Call to get_info(...): (line 1645)
        # Processing the call arguments (line 1645)
        str_49503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1645, 33), 'str', 'blas')
        # Processing the call keyword arguments (line 1645)
        kwargs_49504 = {}
        # Getting the type of 'get_info' (line 1645)
        get_info_49502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 24), 'get_info', False)
        # Calling get_info(args, kwargs) (line 1645)
        get_info_call_result_49505 = invoke(stypy.reporting.localization.Localization(__file__, 1645, 24), get_info_49502, *[str_49503], **kwargs_49504)
        
        # Assigning a type to the variable 'blas_info' (line 1645)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1645, 12), 'blas_info', get_info_call_result_49505)
        
        # Getting the type of 'blas_info' (line 1646)
        blas_info_49506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 15), 'blas_info')
        # Testing the type of an if condition (line 1646)
        if_condition_49507 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1646, 12), blas_info_49506)
        # Assigning a type to the variable 'if_condition_49507' (line 1646)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1646, 12), 'if_condition_49507', if_condition_49507)
        # SSA begins for if statement (line 1646)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to dict_append(...): (line 1647)
        # Processing the call arguments (line 1647)
        # Getting the type of 'info' (line 1647)
        info_49509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 28), 'info', False)
        # Processing the call keyword arguments (line 1647)
        # Getting the type of 'blas_info' (line 1647)
        blas_info_49510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 36), 'blas_info', False)
        kwargs_49511 = {'blas_info_49510': blas_info_49510}
        # Getting the type of 'dict_append' (line 1647)
        dict_append_49508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 16), 'dict_append', False)
        # Calling dict_append(args, kwargs) (line 1647)
        dict_append_call_result_49512 = invoke(stypy.reporting.localization.Localization(__file__, 1647, 16), dict_append_49508, *[info_49509], **kwargs_49511)
        
        # SSA branch for the else part of an if statement (line 1646)
        module_type_store.open_ssa_branch('else')
        
        # Call to warn(...): (line 1649)
        # Processing the call arguments (line 1649)
        # Getting the type of 'BlasNotFoundError' (line 1649)
        BlasNotFoundError_49515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1649, 30), 'BlasNotFoundError', False)
        # Obtaining the member '__doc__' of a type (line 1649)
        doc___49516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1649, 30), BlasNotFoundError_49515, '__doc__')
        # Processing the call keyword arguments (line 1649)
        kwargs_49517 = {}
        # Getting the type of 'warnings' (line 1649)
        warnings_49513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1649, 16), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 1649)
        warn_49514 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1649, 16), warnings_49513, 'warn')
        # Calling warn(args, kwargs) (line 1649)
        warn_call_result_49518 = invoke(stypy.reporting.localization.Localization(__file__, 1649, 16), warn_49514, *[doc___49516], **kwargs_49517)
        
        
        # Assigning a Call to a Name (line 1650):
        
        # Assigning a Call to a Name (line 1650):
        
        # Call to get_info(...): (line 1650)
        # Processing the call arguments (line 1650)
        str_49520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1650, 41), 'str', 'blas_src')
        # Processing the call keyword arguments (line 1650)
        kwargs_49521 = {}
        # Getting the type of 'get_info' (line 1650)
        get_info_49519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 32), 'get_info', False)
        # Calling get_info(args, kwargs) (line 1650)
        get_info_call_result_49522 = invoke(stypy.reporting.localization.Localization(__file__, 1650, 32), get_info_49519, *[str_49520], **kwargs_49521)
        
        # Assigning a type to the variable 'blas_src_info' (line 1650)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1650, 16), 'blas_src_info', get_info_call_result_49522)
        
        
        # Getting the type of 'blas_src_info' (line 1651)
        blas_src_info_49523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 23), 'blas_src_info')
        # Applying the 'not' unary operator (line 1651)
        result_not__49524 = python_operator(stypy.reporting.localization.Localization(__file__, 1651, 19), 'not', blas_src_info_49523)
        
        # Testing the type of an if condition (line 1651)
        if_condition_49525 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1651, 16), result_not__49524)
        # Assigning a type to the variable 'if_condition_49525' (line 1651)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1651, 16), 'if_condition_49525', if_condition_49525)
        # SSA begins for if statement (line 1651)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 1652)
        # Processing the call arguments (line 1652)
        # Getting the type of 'BlasSrcNotFoundError' (line 1652)
        BlasSrcNotFoundError_49528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1652, 34), 'BlasSrcNotFoundError', False)
        # Obtaining the member '__doc__' of a type (line 1652)
        doc___49529 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1652, 34), BlasSrcNotFoundError_49528, '__doc__')
        # Processing the call keyword arguments (line 1652)
        kwargs_49530 = {}
        # Getting the type of 'warnings' (line 1652)
        warnings_49526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1652, 20), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 1652)
        warn_49527 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1652, 20), warnings_49526, 'warn')
        # Calling warn(args, kwargs) (line 1652)
        warn_call_result_49531 = invoke(stypy.reporting.localization.Localization(__file__, 1652, 20), warn_49527, *[doc___49529], **kwargs_49530)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1653)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1653, 20), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1651)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to dict_append(...): (line 1654)
        # Processing the call arguments (line 1654)
        # Getting the type of 'info' (line 1654)
        info_49533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1654, 28), 'info', False)
        # Processing the call keyword arguments (line 1654)
        
        # Obtaining an instance of the builtin type 'list' (line 1654)
        list_49534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1654, 44), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1654)
        # Adding element type (line 1654)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1654)
        tuple_49535 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1654, 46), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1654)
        # Adding element type (line 1654)
        str_49536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1654, 46), 'str', 'fblas_src')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1654, 46), tuple_49535, str_49536)
        # Adding element type (line 1654)
        # Getting the type of 'blas_src_info' (line 1654)
        blas_src_info_49537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1654, 59), 'blas_src_info', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1654, 46), tuple_49535, blas_src_info_49537)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1654, 44), list_49534, tuple_49535)
        
        keyword_49538 = list_49534
        kwargs_49539 = {'libraries': keyword_49538}
        # Getting the type of 'dict_append' (line 1654)
        dict_append_49532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1654, 16), 'dict_append', False)
        # Calling dict_append(args, kwargs) (line 1654)
        dict_append_call_result_49540 = invoke(stypy.reporting.localization.Localization(__file__, 1654, 16), dict_append_49532, *[info_49533], **kwargs_49539)
        
        # SSA join for if statement (line 1646)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1644)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_info(...): (line 1656)
        # Processing the call keyword arguments (line 1656)
        # Getting the type of 'info' (line 1656)
        info_49543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1656, 24), 'info', False)
        kwargs_49544 = {'info_49543': info_49543}
        # Getting the type of 'self' (line 1656)
        self_49541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1656, 8), 'self', False)
        # Obtaining the member 'set_info' of a type (line 1656)
        set_info_49542 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1656, 8), self_49541, 'set_info')
        # Calling set_info(args, kwargs) (line 1656)
        set_info_call_result_49545 = invoke(stypy.reporting.localization.Localization(__file__, 1656, 8), set_info_49542, *[], **kwargs_49544)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1657)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1657, 8), 'stypy_return_type', types.NoneType)
        
        # ################# End of 'calc_info(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'calc_info' in the type store
        # Getting the type of 'stypy_return_type' (line 1580)
        stypy_return_type_49546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1580, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_49546)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'calc_info'
        return stypy_return_type_49546


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1576, 0, False)
        # Assigning a type to the variable 'self' (line 1577)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1577, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'blas_opt_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'blas_opt_info' (line 1576)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1576, 0), 'blas_opt_info', blas_opt_info)

# Assigning a Name to a Name (line 1578):
# Getting the type of 'BlasNotFoundError' (line 1578)
BlasNotFoundError_49547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1578, 20), 'BlasNotFoundError')
# Getting the type of 'blas_opt_info'
blas_opt_info_49548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'blas_opt_info')
# Setting the type of the member 'notfounderror' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), blas_opt_info_49548, 'notfounderror', BlasNotFoundError_49547)
# Declaration of the 'blas_info' class
# Getting the type of 'system_info' (line 1660)
system_info_49549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 16), 'system_info')

class blas_info(system_info_49549, ):
    
    # Assigning a Str to a Name (line 1661):
    
    # Assigning a Str to a Name (line 1662):
    
    # Assigning a List to a Name (line 1663):
    
    # Assigning a Name to a Name (line 1664):

    @norecursion
    def calc_info(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'calc_info'
        module_type_store = module_type_store.open_function_context('calc_info', 1666, 4, False)
        # Assigning a type to the variable 'self' (line 1667)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1667, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        blas_info.calc_info.__dict__.__setitem__('stypy_localization', localization)
        blas_info.calc_info.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        blas_info.calc_info.__dict__.__setitem__('stypy_type_store', module_type_store)
        blas_info.calc_info.__dict__.__setitem__('stypy_function_name', 'blas_info.calc_info')
        blas_info.calc_info.__dict__.__setitem__('stypy_param_names_list', [])
        blas_info.calc_info.__dict__.__setitem__('stypy_varargs_param_name', None)
        blas_info.calc_info.__dict__.__setitem__('stypy_kwargs_param_name', None)
        blas_info.calc_info.__dict__.__setitem__('stypy_call_defaults', defaults)
        blas_info.calc_info.__dict__.__setitem__('stypy_call_varargs', varargs)
        blas_info.calc_info.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        blas_info.calc_info.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'blas_info.calc_info', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'calc_info', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'calc_info(...)' code ##################

        
        # Assigning a Call to a Name (line 1667):
        
        # Assigning a Call to a Name (line 1667):
        
        # Call to get_lib_dirs(...): (line 1667)
        # Processing the call keyword arguments (line 1667)
        kwargs_49552 = {}
        # Getting the type of 'self' (line 1667)
        self_49550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 19), 'self', False)
        # Obtaining the member 'get_lib_dirs' of a type (line 1667)
        get_lib_dirs_49551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1667, 19), self_49550, 'get_lib_dirs')
        # Calling get_lib_dirs(args, kwargs) (line 1667)
        get_lib_dirs_call_result_49553 = invoke(stypy.reporting.localization.Localization(__file__, 1667, 19), get_lib_dirs_49551, *[], **kwargs_49552)
        
        # Assigning a type to the variable 'lib_dirs' (line 1667)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1667, 8), 'lib_dirs', get_lib_dirs_call_result_49553)
        
        # Assigning a Call to a Name (line 1668):
        
        # Assigning a Call to a Name (line 1668):
        
        # Call to get_libs(...): (line 1668)
        # Processing the call arguments (line 1668)
        str_49556 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1668, 34), 'str', 'blas_libs')
        # Getting the type of 'self' (line 1668)
        self_49557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 47), 'self', False)
        # Obtaining the member '_lib_names' of a type (line 1668)
        _lib_names_49558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1668, 47), self_49557, '_lib_names')
        # Processing the call keyword arguments (line 1668)
        kwargs_49559 = {}
        # Getting the type of 'self' (line 1668)
        self_49554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 20), 'self', False)
        # Obtaining the member 'get_libs' of a type (line 1668)
        get_libs_49555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1668, 20), self_49554, 'get_libs')
        # Calling get_libs(args, kwargs) (line 1668)
        get_libs_call_result_49560 = invoke(stypy.reporting.localization.Localization(__file__, 1668, 20), get_libs_49555, *[str_49556, _lib_names_49558], **kwargs_49559)
        
        # Assigning a type to the variable 'blas_libs' (line 1668)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1668, 8), 'blas_libs', get_libs_call_result_49560)
        
        # Assigning a Call to a Name (line 1669):
        
        # Assigning a Call to a Name (line 1669):
        
        # Call to check_libs(...): (line 1669)
        # Processing the call arguments (line 1669)
        # Getting the type of 'lib_dirs' (line 1669)
        lib_dirs_49563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1669, 31), 'lib_dirs', False)
        # Getting the type of 'blas_libs' (line 1669)
        blas_libs_49564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1669, 41), 'blas_libs', False)
        
        # Obtaining an instance of the builtin type 'list' (line 1669)
        list_49565 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1669, 52), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1669)
        
        # Processing the call keyword arguments (line 1669)
        kwargs_49566 = {}
        # Getting the type of 'self' (line 1669)
        self_49561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1669, 15), 'self', False)
        # Obtaining the member 'check_libs' of a type (line 1669)
        check_libs_49562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1669, 15), self_49561, 'check_libs')
        # Calling check_libs(args, kwargs) (line 1669)
        check_libs_call_result_49567 = invoke(stypy.reporting.localization.Localization(__file__, 1669, 15), check_libs_49562, *[lib_dirs_49563, blas_libs_49564, list_49565], **kwargs_49566)
        
        # Assigning a type to the variable 'info' (line 1669)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1669, 8), 'info', check_libs_call_result_49567)
        
        # Type idiom detected: calculating its left and rigth part (line 1670)
        # Getting the type of 'info' (line 1670)
        info_49568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 11), 'info')
        # Getting the type of 'None' (line 1670)
        None_49569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 19), 'None')
        
        (may_be_49570, more_types_in_union_49571) = may_be_none(info_49568, None_49569)

        if may_be_49570:

            if more_types_in_union_49571:
                # Runtime conditional SSA (line 1670)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'stypy_return_type' (line 1671)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1671, 12), 'stypy_return_type', types.NoneType)

            if more_types_in_union_49571:
                # SSA join for if statement (line 1670)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        
        # Call to system(...): (line 1672)
        # Processing the call keyword arguments (line 1672)
        kwargs_49574 = {}
        # Getting the type of 'platform' (line 1672)
        platform_49572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1672, 11), 'platform', False)
        # Obtaining the member 'system' of a type (line 1672)
        system_49573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1672, 11), platform_49572, 'system')
        # Calling system(args, kwargs) (line 1672)
        system_call_result_49575 = invoke(stypy.reporting.localization.Localization(__file__, 1672, 11), system_49573, *[], **kwargs_49574)
        
        str_49576 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1672, 32), 'str', 'Windows')
        # Applying the binary operator '==' (line 1672)
        result_eq_49577 = python_operator(stypy.reporting.localization.Localization(__file__, 1672, 11), '==', system_call_result_49575, str_49576)
        
        # Testing the type of an if condition (line 1672)
        if_condition_49578 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1672, 8), result_eq_49577)
        # Assigning a type to the variable 'if_condition_49578' (line 1672)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1672, 8), 'if_condition_49578', if_condition_49578)
        # SSA begins for if statement (line 1672)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Subscript (line 1677):
        
        # Assigning a Str to a Subscript (line 1677):
        str_49579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1677, 31), 'str', 'f77')
        # Getting the type of 'info' (line 1677)
        info_49580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 12), 'info')
        str_49581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1677, 17), 'str', 'language')
        # Storing an element on a container (line 1677)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1677, 12), info_49580, (str_49581, str_49579))
        # SSA branch for the else part of an if statement (line 1672)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 1679):
        
        # Assigning a Call to a Name (line 1679):
        
        # Call to has_cblas(...): (line 1679)
        # Processing the call arguments (line 1679)
        # Getting the type of 'info' (line 1679)
        info_49584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1679, 33), 'info', False)
        # Processing the call keyword arguments (line 1679)
        kwargs_49585 = {}
        # Getting the type of 'self' (line 1679)
        self_49582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1679, 18), 'self', False)
        # Obtaining the member 'has_cblas' of a type (line 1679)
        has_cblas_49583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1679, 18), self_49582, 'has_cblas')
        # Calling has_cblas(args, kwargs) (line 1679)
        has_cblas_call_result_49586 = invoke(stypy.reporting.localization.Localization(__file__, 1679, 18), has_cblas_49583, *[info_49584], **kwargs_49585)
        
        # Assigning a type to the variable 'lib' (line 1679)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1679, 12), 'lib', has_cblas_call_result_49586)
        
        # Type idiom detected: calculating its left and rigth part (line 1680)
        # Getting the type of 'lib' (line 1680)
        lib_49587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 12), 'lib')
        # Getting the type of 'None' (line 1680)
        None_49588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 26), 'None')
        
        (may_be_49589, more_types_in_union_49590) = may_not_be_none(lib_49587, None_49588)

        if may_be_49589:

            if more_types_in_union_49590:
                # Runtime conditional SSA (line 1680)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Str to a Subscript (line 1681):
            
            # Assigning a Str to a Subscript (line 1681):
            str_49591 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1681, 35), 'str', 'c')
            # Getting the type of 'info' (line 1681)
            info_49592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 16), 'info')
            str_49593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1681, 21), 'str', 'language')
            # Storing an element on a container (line 1681)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1681, 16), info_49592, (str_49593, str_49591))
            
            # Assigning a List to a Subscript (line 1682):
            
            # Assigning a List to a Subscript (line 1682):
            
            # Obtaining an instance of the builtin type 'list' (line 1682)
            list_49594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1682, 36), 'list')
            # Adding type elements to the builtin type 'list' instance (line 1682)
            # Adding element type (line 1682)
            # Getting the type of 'lib' (line 1682)
            lib_49595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 37), 'lib')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1682, 36), list_49594, lib_49595)
            
            # Getting the type of 'info' (line 1682)
            info_49596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 16), 'info')
            str_49597 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1682, 21), 'str', 'libraries')
            # Storing an element on a container (line 1682)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1682, 16), info_49596, (str_49597, list_49594))
            
            # Assigning a List to a Subscript (line 1683):
            
            # Assigning a List to a Subscript (line 1683):
            
            # Obtaining an instance of the builtin type 'list' (line 1683)
            list_49598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1683, 40), 'list')
            # Adding type elements to the builtin type 'list' instance (line 1683)
            # Adding element type (line 1683)
            
            # Obtaining an instance of the builtin type 'tuple' (line 1683)
            tuple_49599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1683, 42), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1683)
            # Adding element type (line 1683)
            str_49600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1683, 42), 'str', 'HAVE_CBLAS')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1683, 42), tuple_49599, str_49600)
            # Adding element type (line 1683)
            # Getting the type of 'None' (line 1683)
            None_49601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 56), 'None')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1683, 42), tuple_49599, None_49601)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1683, 40), list_49598, tuple_49599)
            
            # Getting the type of 'info' (line 1683)
            info_49602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 16), 'info')
            str_49603 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1683, 21), 'str', 'define_macros')
            # Storing an element on a container (line 1683)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1683, 16), info_49602, (str_49603, list_49598))

            if more_types_in_union_49590:
                # SSA join for if statement (line 1680)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 1672)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_info(...): (line 1684)
        # Processing the call keyword arguments (line 1684)
        # Getting the type of 'info' (line 1684)
        info_49606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1684, 24), 'info', False)
        kwargs_49607 = {'info_49606': info_49606}
        # Getting the type of 'self' (line 1684)
        self_49604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1684, 8), 'self', False)
        # Obtaining the member 'set_info' of a type (line 1684)
        set_info_49605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1684, 8), self_49604, 'set_info')
        # Calling set_info(args, kwargs) (line 1684)
        set_info_call_result_49608 = invoke(stypy.reporting.localization.Localization(__file__, 1684, 8), set_info_49605, *[], **kwargs_49607)
        
        
        # ################# End of 'calc_info(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'calc_info' in the type store
        # Getting the type of 'stypy_return_type' (line 1666)
        stypy_return_type_49609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1666, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_49609)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'calc_info'
        return stypy_return_type_49609


    @norecursion
    def has_cblas(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'has_cblas'
        module_type_store = module_type_store.open_function_context('has_cblas', 1686, 4, False)
        # Assigning a type to the variable 'self' (line 1687)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1687, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        blas_info.has_cblas.__dict__.__setitem__('stypy_localization', localization)
        blas_info.has_cblas.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        blas_info.has_cblas.__dict__.__setitem__('stypy_type_store', module_type_store)
        blas_info.has_cblas.__dict__.__setitem__('stypy_function_name', 'blas_info.has_cblas')
        blas_info.has_cblas.__dict__.__setitem__('stypy_param_names_list', ['info'])
        blas_info.has_cblas.__dict__.__setitem__('stypy_varargs_param_name', None)
        blas_info.has_cblas.__dict__.__setitem__('stypy_kwargs_param_name', None)
        blas_info.has_cblas.__dict__.__setitem__('stypy_call_defaults', defaults)
        blas_info.has_cblas.__dict__.__setitem__('stypy_call_varargs', varargs)
        blas_info.has_cblas.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        blas_info.has_cblas.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'blas_info.has_cblas', ['info'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'has_cblas', localization, ['info'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'has_cblas(...)' code ##################

        
        # Assigning a Name to a Name (line 1689):
        
        # Assigning a Name to a Name (line 1689):
        # Getting the type of 'False' (line 1689)
        False_49610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1689, 14), 'False')
        # Assigning a type to the variable 'res' (line 1689)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1689, 8), 'res', False_49610)
        
        # Assigning a Call to a Name (line 1690):
        
        # Assigning a Call to a Name (line 1690):
        
        # Call to new_compiler(...): (line 1690)
        # Processing the call keyword arguments (line 1690)
        kwargs_49614 = {}
        # Getting the type of 'distutils' (line 1690)
        distutils_49611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 12), 'distutils', False)
        # Obtaining the member 'ccompiler' of a type (line 1690)
        ccompiler_49612 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1690, 12), distutils_49611, 'ccompiler')
        # Obtaining the member 'new_compiler' of a type (line 1690)
        new_compiler_49613 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1690, 12), ccompiler_49612, 'new_compiler')
        # Calling new_compiler(args, kwargs) (line 1690)
        new_compiler_call_result_49615 = invoke(stypy.reporting.localization.Localization(__file__, 1690, 12), new_compiler_49613, *[], **kwargs_49614)
        
        # Assigning a type to the variable 'c' (line 1690)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1690, 8), 'c', new_compiler_call_result_49615)
        
        # Assigning a Call to a Name (line 1691):
        
        # Assigning a Call to a Name (line 1691):
        
        # Call to mkdtemp(...): (line 1691)
        # Processing the call keyword arguments (line 1691)
        kwargs_49618 = {}
        # Getting the type of 'tempfile' (line 1691)
        tempfile_49616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1691, 17), 'tempfile', False)
        # Obtaining the member 'mkdtemp' of a type (line 1691)
        mkdtemp_49617 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1691, 17), tempfile_49616, 'mkdtemp')
        # Calling mkdtemp(args, kwargs) (line 1691)
        mkdtemp_call_result_49619 = invoke(stypy.reporting.localization.Localization(__file__, 1691, 17), mkdtemp_49617, *[], **kwargs_49618)
        
        # Assigning a type to the variable 'tmpdir' (line 1691)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1691, 8), 'tmpdir', mkdtemp_call_result_49619)
        
        # Assigning a Str to a Name (line 1692):
        
        # Assigning a Str to a Name (line 1692):
        str_49620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1698, (-1)), 'str', '#include <cblas.h>\n        int main(int argc, const char *argv[])\n        {\n            double a[4] = {1,2,3,4};\n            double b[4] = {5,6,7,8};\n            return cblas_ddot(4, a, 1, b, 1) > 10;\n        }')
        # Assigning a type to the variable 's' (line 1692)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1692, 8), 's', str_49620)
        
        # Assigning a Call to a Name (line 1699):
        
        # Assigning a Call to a Name (line 1699):
        
        # Call to join(...): (line 1699)
        # Processing the call arguments (line 1699)
        # Getting the type of 'tmpdir' (line 1699)
        tmpdir_49624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1699, 27), 'tmpdir', False)
        str_49625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1699, 35), 'str', 'source.c')
        # Processing the call keyword arguments (line 1699)
        kwargs_49626 = {}
        # Getting the type of 'os' (line 1699)
        os_49621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1699, 14), 'os', False)
        # Obtaining the member 'path' of a type (line 1699)
        path_49622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1699, 14), os_49621, 'path')
        # Obtaining the member 'join' of a type (line 1699)
        join_49623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1699, 14), path_49622, 'join')
        # Calling join(args, kwargs) (line 1699)
        join_call_result_49627 = invoke(stypy.reporting.localization.Localization(__file__, 1699, 14), join_49623, *[tmpdir_49624, str_49625], **kwargs_49626)
        
        # Assigning a type to the variable 'src' (line 1699)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1699, 8), 'src', join_call_result_49627)
        
        # Try-finally block (line 1700)
        
        # Call to open(...): (line 1701)
        # Processing the call arguments (line 1701)
        # Getting the type of 'src' (line 1701)
        src_49629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 22), 'src', False)
        str_49630 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1701, 27), 'str', 'wt')
        # Processing the call keyword arguments (line 1701)
        kwargs_49631 = {}
        # Getting the type of 'open' (line 1701)
        open_49628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 17), 'open', False)
        # Calling open(args, kwargs) (line 1701)
        open_call_result_49632 = invoke(stypy.reporting.localization.Localization(__file__, 1701, 17), open_49628, *[src_49629, str_49630], **kwargs_49631)
        
        with_49633 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 1701, 17), open_call_result_49632, 'with parameter', '__enter__', '__exit__')

        if with_49633:
            # Calling the __enter__ method to initiate a with section
            # Obtaining the member '__enter__' of a type (line 1701)
            enter___49634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1701, 17), open_call_result_49632, '__enter__')
            with_enter_49635 = invoke(stypy.reporting.localization.Localization(__file__, 1701, 17), enter___49634)
            # Assigning a type to the variable 'f' (line 1701)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1701, 17), 'f', with_enter_49635)
            
            # Call to write(...): (line 1702)
            # Processing the call arguments (line 1702)
            # Getting the type of 's' (line 1702)
            s_49638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1702, 24), 's', False)
            # Processing the call keyword arguments (line 1702)
            kwargs_49639 = {}
            # Getting the type of 'f' (line 1702)
            f_49636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1702, 16), 'f', False)
            # Obtaining the member 'write' of a type (line 1702)
            write_49637 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1702, 16), f_49636, 'write')
            # Calling write(args, kwargs) (line 1702)
            write_call_result_49640 = invoke(stypy.reporting.localization.Localization(__file__, 1702, 16), write_49637, *[s_49638], **kwargs_49639)
            
            # Calling the __exit__ method to finish a with section
            # Obtaining the member '__exit__' of a type (line 1701)
            exit___49641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1701, 17), open_call_result_49632, '__exit__')
            with_exit_49642 = invoke(stypy.reporting.localization.Localization(__file__, 1701, 17), exit___49641, None, None, None)

        
        
        # SSA begins for try-except statement (line 1704)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 1706):
        
        # Assigning a Call to a Name (line 1706):
        
        # Call to compile(...): (line 1706)
        # Processing the call arguments (line 1706)
        
        # Obtaining an instance of the builtin type 'list' (line 1706)
        list_49645 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1706, 32), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1706)
        # Adding element type (line 1706)
        # Getting the type of 'src' (line 1706)
        src_49646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1706, 33), 'src', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1706, 32), list_49645, src_49646)
        
        # Processing the call keyword arguments (line 1706)
        # Getting the type of 'tmpdir' (line 1706)
        tmpdir_49647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1706, 50), 'tmpdir', False)
        keyword_49648 = tmpdir_49647
        
        # Call to get_include_dirs(...): (line 1707)
        # Processing the call keyword arguments (line 1707)
        kwargs_49651 = {}
        # Getting the type of 'self' (line 1707)
        self_49649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1707, 45), 'self', False)
        # Obtaining the member 'get_include_dirs' of a type (line 1707)
        get_include_dirs_49650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1707, 45), self_49649, 'get_include_dirs')
        # Calling get_include_dirs(args, kwargs) (line 1707)
        get_include_dirs_call_result_49652 = invoke(stypy.reporting.localization.Localization(__file__, 1707, 45), get_include_dirs_49650, *[], **kwargs_49651)
        
        keyword_49653 = get_include_dirs_call_result_49652
        kwargs_49654 = {'output_dir': keyword_49648, 'include_dirs': keyword_49653}
        # Getting the type of 'c' (line 1706)
        c_49643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1706, 22), 'c', False)
        # Obtaining the member 'compile' of a type (line 1706)
        compile_49644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1706, 22), c_49643, 'compile')
        # Calling compile(args, kwargs) (line 1706)
        compile_call_result_49655 = invoke(stypy.reporting.localization.Localization(__file__, 1706, 22), compile_49644, *[list_49645], **kwargs_49654)
        
        # Assigning a type to the variable 'obj' (line 1706)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1706, 16), 'obj', compile_call_result_49655)
        
        
        # SSA begins for try-except statement (line 1712)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to link_executable(...): (line 1713)
        # Processing the call arguments (line 1713)
        # Getting the type of 'obj' (line 1713)
        obj_49658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1713, 38), 'obj', False)
        
        # Call to join(...): (line 1713)
        # Processing the call arguments (line 1713)
        # Getting the type of 'tmpdir' (line 1713)
        tmpdir_49662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1713, 56), 'tmpdir', False)
        str_49663 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1713, 64), 'str', 'a.out')
        # Processing the call keyword arguments (line 1713)
        kwargs_49664 = {}
        # Getting the type of 'os' (line 1713)
        os_49659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1713, 43), 'os', False)
        # Obtaining the member 'path' of a type (line 1713)
        path_49660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1713, 43), os_49659, 'path')
        # Obtaining the member 'join' of a type (line 1713)
        join_49661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1713, 43), path_49660, 'join')
        # Calling join(args, kwargs) (line 1713)
        join_call_result_49665 = invoke(stypy.reporting.localization.Localization(__file__, 1713, 43), join_49661, *[tmpdir_49662, str_49663], **kwargs_49664)
        
        # Processing the call keyword arguments (line 1713)
        
        # Obtaining an instance of the builtin type 'list' (line 1714)
        list_49666 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1714, 48), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1714)
        # Adding element type (line 1714)
        str_49667 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1714, 49), 'str', 'cblas')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1714, 48), list_49666, str_49667)
        
        keyword_49668 = list_49666
        
        # Obtaining the type of the subscript
        str_49669 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1715, 56), 'str', 'library_dirs')
        # Getting the type of 'info' (line 1715)
        info_49670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1715, 51), 'info', False)
        # Obtaining the member '__getitem__' of a type (line 1715)
        getitem___49671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1715, 51), info_49670, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1715)
        subscript_call_result_49672 = invoke(stypy.reporting.localization.Localization(__file__, 1715, 51), getitem___49671, str_49669)
        
        keyword_49673 = subscript_call_result_49672
        
        # Call to get(...): (line 1716)
        # Processing the call arguments (line 1716)
        str_49676 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1716, 62), 'str', 'extra_link_args')
        
        # Obtaining an instance of the builtin type 'list' (line 1716)
        list_49677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1716, 81), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1716)
        
        # Processing the call keyword arguments (line 1716)
        kwargs_49678 = {}
        # Getting the type of 'info' (line 1716)
        info_49674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 53), 'info', False)
        # Obtaining the member 'get' of a type (line 1716)
        get_49675 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1716, 53), info_49674, 'get')
        # Calling get(args, kwargs) (line 1716)
        get_call_result_49679 = invoke(stypy.reporting.localization.Localization(__file__, 1716, 53), get_49675, *[str_49676, list_49677], **kwargs_49678)
        
        keyword_49680 = get_call_result_49679
        kwargs_49681 = {'libraries': keyword_49668, 'extra_postargs': keyword_49680, 'library_dirs': keyword_49673}
        # Getting the type of 'c' (line 1713)
        c_49656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1713, 20), 'c', False)
        # Obtaining the member 'link_executable' of a type (line 1713)
        link_executable_49657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1713, 20), c_49656, 'link_executable')
        # Calling link_executable(args, kwargs) (line 1713)
        link_executable_call_result_49682 = invoke(stypy.reporting.localization.Localization(__file__, 1713, 20), link_executable_49657, *[obj_49658, join_call_result_49665], **kwargs_49681)
        
        
        # Assigning a Str to a Name (line 1717):
        
        # Assigning a Str to a Name (line 1717):
        str_49683 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1717, 26), 'str', 'cblas')
        # Assigning a type to the variable 'res' (line 1717)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1717, 20), 'res', str_49683)
        # SSA branch for the except part of a try statement (line 1712)
        # SSA branch for the except 'Attribute' branch of a try statement (line 1712)
        module_type_store.open_ssa_branch('except')
        
        # Call to link_executable(...): (line 1719)
        # Processing the call arguments (line 1719)
        # Getting the type of 'obj' (line 1719)
        obj_49686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 38), 'obj', False)
        
        # Call to join(...): (line 1719)
        # Processing the call arguments (line 1719)
        # Getting the type of 'tmpdir' (line 1719)
        tmpdir_49690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 56), 'tmpdir', False)
        str_49691 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1719, 64), 'str', 'a.out')
        # Processing the call keyword arguments (line 1719)
        kwargs_49692 = {}
        # Getting the type of 'os' (line 1719)
        os_49687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 43), 'os', False)
        # Obtaining the member 'path' of a type (line 1719)
        path_49688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1719, 43), os_49687, 'path')
        # Obtaining the member 'join' of a type (line 1719)
        join_49689 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1719, 43), path_49688, 'join')
        # Calling join(args, kwargs) (line 1719)
        join_call_result_49693 = invoke(stypy.reporting.localization.Localization(__file__, 1719, 43), join_49689, *[tmpdir_49690, str_49691], **kwargs_49692)
        
        # Processing the call keyword arguments (line 1719)
        
        # Obtaining an instance of the builtin type 'list' (line 1720)
        list_49694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1720, 48), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1720)
        # Adding element type (line 1720)
        str_49695 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1720, 49), 'str', 'blas')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1720, 48), list_49694, str_49695)
        
        keyword_49696 = list_49694
        
        # Obtaining the type of the subscript
        str_49697 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1721, 56), 'str', 'library_dirs')
        # Getting the type of 'info' (line 1721)
        info_49698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 51), 'info', False)
        # Obtaining the member '__getitem__' of a type (line 1721)
        getitem___49699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1721, 51), info_49698, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1721)
        subscript_call_result_49700 = invoke(stypy.reporting.localization.Localization(__file__, 1721, 51), getitem___49699, str_49697)
        
        keyword_49701 = subscript_call_result_49700
        
        # Call to get(...): (line 1722)
        # Processing the call arguments (line 1722)
        str_49704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1722, 62), 'str', 'extra_link_args')
        
        # Obtaining an instance of the builtin type 'list' (line 1722)
        list_49705 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1722, 81), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1722)
        
        # Processing the call keyword arguments (line 1722)
        kwargs_49706 = {}
        # Getting the type of 'info' (line 1722)
        info_49702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1722, 53), 'info', False)
        # Obtaining the member 'get' of a type (line 1722)
        get_49703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1722, 53), info_49702, 'get')
        # Calling get(args, kwargs) (line 1722)
        get_call_result_49707 = invoke(stypy.reporting.localization.Localization(__file__, 1722, 53), get_49703, *[str_49704, list_49705], **kwargs_49706)
        
        keyword_49708 = get_call_result_49707
        kwargs_49709 = {'libraries': keyword_49696, 'extra_postargs': keyword_49708, 'library_dirs': keyword_49701}
        # Getting the type of 'c' (line 1719)
        c_49684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 20), 'c', False)
        # Obtaining the member 'link_executable' of a type (line 1719)
        link_executable_49685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1719, 20), c_49684, 'link_executable')
        # Calling link_executable(args, kwargs) (line 1719)
        link_executable_call_result_49710 = invoke(stypy.reporting.localization.Localization(__file__, 1719, 20), link_executable_49685, *[obj_49686, join_call_result_49693], **kwargs_49709)
        
        
        # Assigning a Str to a Name (line 1723):
        
        # Assigning a Str to a Name (line 1723):
        str_49711 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1723, 26), 'str', 'blas')
        # Assigning a type to the variable 'res' (line 1723)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1723, 20), 'res', str_49711)
        # SSA join for try-except statement (line 1712)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the except part of a try statement (line 1704)
        # SSA branch for the except 'Attribute' branch of a try statement (line 1704)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Name to a Name (line 1725):
        
        # Assigning a Name to a Name (line 1725):
        # Getting the type of 'None' (line 1725)
        None_49712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1725, 22), 'None')
        # Assigning a type to the variable 'res' (line 1725)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1725, 16), 'res', None_49712)
        # SSA join for try-except statement (line 1704)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # finally branch of the try-finally block (line 1700)
        
        # Call to rmtree(...): (line 1727)
        # Processing the call arguments (line 1727)
        # Getting the type of 'tmpdir' (line 1727)
        tmpdir_49715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 26), 'tmpdir', False)
        # Processing the call keyword arguments (line 1727)
        kwargs_49716 = {}
        # Getting the type of 'shutil' (line 1727)
        shutil_49713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 12), 'shutil', False)
        # Obtaining the member 'rmtree' of a type (line 1727)
        rmtree_49714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1727, 12), shutil_49713, 'rmtree')
        # Calling rmtree(args, kwargs) (line 1727)
        rmtree_call_result_49717 = invoke(stypy.reporting.localization.Localization(__file__, 1727, 12), rmtree_49714, *[tmpdir_49715], **kwargs_49716)
        
        
        # Getting the type of 'res' (line 1728)
        res_49718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1728, 15), 'res')
        # Assigning a type to the variable 'stypy_return_type' (line 1728)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1728, 8), 'stypy_return_type', res_49718)
        
        # ################# End of 'has_cblas(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'has_cblas' in the type store
        # Getting the type of 'stypy_return_type' (line 1686)
        stypy_return_type_49719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_49719)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'has_cblas'
        return stypy_return_type_49719


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1660, 0, False)
        # Assigning a type to the variable 'self' (line 1661)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1661, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'blas_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'blas_info' (line 1660)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1660, 0), 'blas_info', blas_info)

# Assigning a Str to a Name (line 1661):
str_49720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1661, 14), 'str', 'blas')
# Getting the type of 'blas_info'
blas_info_49721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'blas_info')
# Setting the type of the member 'section' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), blas_info_49721, 'section', str_49720)

# Assigning a Str to a Name (line 1662):
str_49722 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1662, 18), 'str', 'BLAS')
# Getting the type of 'blas_info'
blas_info_49723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'blas_info')
# Setting the type of the member 'dir_env_var' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), blas_info_49723, 'dir_env_var', str_49722)

# Assigning a List to a Name (line 1663):

# Obtaining an instance of the builtin type 'list' (line 1663)
list_49724 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1663, 17), 'list')
# Adding type elements to the builtin type 'list' instance (line 1663)
# Adding element type (line 1663)
str_49725 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1663, 18), 'str', 'blas')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1663, 17), list_49724, str_49725)

# Getting the type of 'blas_info'
blas_info_49726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'blas_info')
# Setting the type of the member '_lib_names' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), blas_info_49726, '_lib_names', list_49724)

# Assigning a Name to a Name (line 1664):
# Getting the type of 'BlasNotFoundError' (line 1664)
BlasNotFoundError_49727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 20), 'BlasNotFoundError')
# Getting the type of 'blas_info'
blas_info_49728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'blas_info')
# Setting the type of the member 'notfounderror' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), blas_info_49728, 'notfounderror', BlasNotFoundError_49727)
# Declaration of the 'openblas_info' class
# Getting the type of 'blas_info' (line 1731)
blas_info_49729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1731, 20), 'blas_info')

class openblas_info(blas_info_49729, ):
    
    # Assigning a Str to a Name (line 1732):
    
    # Assigning a Str to a Name (line 1733):
    
    # Assigning a List to a Name (line 1734):
    
    # Assigning a Name to a Name (line 1735):

    @norecursion
    def check_embedded_lapack(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'check_embedded_lapack'
        module_type_store = module_type_store.open_function_context('check_embedded_lapack', 1737, 4, False)
        # Assigning a type to the variable 'self' (line 1738)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1738, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        openblas_info.check_embedded_lapack.__dict__.__setitem__('stypy_localization', localization)
        openblas_info.check_embedded_lapack.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        openblas_info.check_embedded_lapack.__dict__.__setitem__('stypy_type_store', module_type_store)
        openblas_info.check_embedded_lapack.__dict__.__setitem__('stypy_function_name', 'openblas_info.check_embedded_lapack')
        openblas_info.check_embedded_lapack.__dict__.__setitem__('stypy_param_names_list', ['info'])
        openblas_info.check_embedded_lapack.__dict__.__setitem__('stypy_varargs_param_name', None)
        openblas_info.check_embedded_lapack.__dict__.__setitem__('stypy_kwargs_param_name', None)
        openblas_info.check_embedded_lapack.__dict__.__setitem__('stypy_call_defaults', defaults)
        openblas_info.check_embedded_lapack.__dict__.__setitem__('stypy_call_varargs', varargs)
        openblas_info.check_embedded_lapack.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        openblas_info.check_embedded_lapack.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'openblas_info.check_embedded_lapack', ['info'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'check_embedded_lapack', localization, ['info'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'check_embedded_lapack(...)' code ##################

        # Getting the type of 'True' (line 1738)
        True_49730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 15), 'True')
        # Assigning a type to the variable 'stypy_return_type' (line 1738)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1738, 8), 'stypy_return_type', True_49730)
        
        # ################# End of 'check_embedded_lapack(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'check_embedded_lapack' in the type store
        # Getting the type of 'stypy_return_type' (line 1737)
        stypy_return_type_49731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_49731)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'check_embedded_lapack'
        return stypy_return_type_49731


    @norecursion
    def calc_info(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'calc_info'
        module_type_store = module_type_store.open_function_context('calc_info', 1740, 4, False)
        # Assigning a type to the variable 'self' (line 1741)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1741, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        openblas_info.calc_info.__dict__.__setitem__('stypy_localization', localization)
        openblas_info.calc_info.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        openblas_info.calc_info.__dict__.__setitem__('stypy_type_store', module_type_store)
        openblas_info.calc_info.__dict__.__setitem__('stypy_function_name', 'openblas_info.calc_info')
        openblas_info.calc_info.__dict__.__setitem__('stypy_param_names_list', [])
        openblas_info.calc_info.__dict__.__setitem__('stypy_varargs_param_name', None)
        openblas_info.calc_info.__dict__.__setitem__('stypy_kwargs_param_name', None)
        openblas_info.calc_info.__dict__.__setitem__('stypy_call_defaults', defaults)
        openblas_info.calc_info.__dict__.__setitem__('stypy_call_varargs', varargs)
        openblas_info.calc_info.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        openblas_info.calc_info.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'openblas_info.calc_info', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'calc_info', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'calc_info(...)' code ##################

        
        # Assigning a Call to a Name (line 1741):
        
        # Assigning a Call to a Name (line 1741):
        
        # Call to get_lib_dirs(...): (line 1741)
        # Processing the call keyword arguments (line 1741)
        kwargs_49734 = {}
        # Getting the type of 'self' (line 1741)
        self_49732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1741, 19), 'self', False)
        # Obtaining the member 'get_lib_dirs' of a type (line 1741)
        get_lib_dirs_49733 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1741, 19), self_49732, 'get_lib_dirs')
        # Calling get_lib_dirs(args, kwargs) (line 1741)
        get_lib_dirs_call_result_49735 = invoke(stypy.reporting.localization.Localization(__file__, 1741, 19), get_lib_dirs_49733, *[], **kwargs_49734)
        
        # Assigning a type to the variable 'lib_dirs' (line 1741)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1741, 8), 'lib_dirs', get_lib_dirs_call_result_49735)
        
        # Assigning a Call to a Name (line 1743):
        
        # Assigning a Call to a Name (line 1743):
        
        # Call to get_libs(...): (line 1743)
        # Processing the call arguments (line 1743)
        str_49738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1743, 38), 'str', 'libraries')
        # Getting the type of 'self' (line 1743)
        self_49739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 51), 'self', False)
        # Obtaining the member '_lib_names' of a type (line 1743)
        _lib_names_49740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1743, 51), self_49739, '_lib_names')
        # Processing the call keyword arguments (line 1743)
        kwargs_49741 = {}
        # Getting the type of 'self' (line 1743)
        self_49736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 24), 'self', False)
        # Obtaining the member 'get_libs' of a type (line 1743)
        get_libs_49737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1743, 24), self_49736, 'get_libs')
        # Calling get_libs(args, kwargs) (line 1743)
        get_libs_call_result_49742 = invoke(stypy.reporting.localization.Localization(__file__, 1743, 24), get_libs_49737, *[str_49738, _lib_names_49740], **kwargs_49741)
        
        # Assigning a type to the variable 'openblas_libs' (line 1743)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1743, 8), 'openblas_libs', get_libs_call_result_49742)
        
        
        # Getting the type of 'openblas_libs' (line 1744)
        openblas_libs_49743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1744, 11), 'openblas_libs')
        # Getting the type of 'self' (line 1744)
        self_49744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1744, 28), 'self')
        # Obtaining the member '_lib_names' of a type (line 1744)
        _lib_names_49745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1744, 28), self_49744, '_lib_names')
        # Applying the binary operator '==' (line 1744)
        result_eq_49746 = python_operator(stypy.reporting.localization.Localization(__file__, 1744, 11), '==', openblas_libs_49743, _lib_names_49745)
        
        # Testing the type of an if condition (line 1744)
        if_condition_49747 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1744, 8), result_eq_49746)
        # Assigning a type to the variable 'if_condition_49747' (line 1744)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1744, 8), 'if_condition_49747', if_condition_49747)
        # SSA begins for if statement (line 1744)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1745):
        
        # Assigning a Call to a Name (line 1745):
        
        # Call to get_libs(...): (line 1745)
        # Processing the call arguments (line 1745)
        str_49750 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1745, 42), 'str', 'openblas_libs')
        # Getting the type of 'self' (line 1745)
        self_49751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1745, 59), 'self', False)
        # Obtaining the member '_lib_names' of a type (line 1745)
        _lib_names_49752 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1745, 59), self_49751, '_lib_names')
        # Processing the call keyword arguments (line 1745)
        kwargs_49753 = {}
        # Getting the type of 'self' (line 1745)
        self_49748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1745, 28), 'self', False)
        # Obtaining the member 'get_libs' of a type (line 1745)
        get_libs_49749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1745, 28), self_49748, 'get_libs')
        # Calling get_libs(args, kwargs) (line 1745)
        get_libs_call_result_49754 = invoke(stypy.reporting.localization.Localization(__file__, 1745, 28), get_libs_49749, *[str_49750, _lib_names_49752], **kwargs_49753)
        
        # Assigning a type to the variable 'openblas_libs' (line 1745)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1745, 12), 'openblas_libs', get_libs_call_result_49754)
        # SSA join for if statement (line 1744)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1746):
        
        # Assigning a Call to a Name (line 1746):
        
        # Call to check_libs(...): (line 1746)
        # Processing the call arguments (line 1746)
        # Getting the type of 'lib_dirs' (line 1746)
        lib_dirs_49757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1746, 31), 'lib_dirs', False)
        # Getting the type of 'openblas_libs' (line 1746)
        openblas_libs_49758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1746, 41), 'openblas_libs', False)
        
        # Obtaining an instance of the builtin type 'list' (line 1746)
        list_49759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1746, 56), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1746)
        
        # Processing the call keyword arguments (line 1746)
        kwargs_49760 = {}
        # Getting the type of 'self' (line 1746)
        self_49755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1746, 15), 'self', False)
        # Obtaining the member 'check_libs' of a type (line 1746)
        check_libs_49756 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1746, 15), self_49755, 'check_libs')
        # Calling check_libs(args, kwargs) (line 1746)
        check_libs_call_result_49761 = invoke(stypy.reporting.localization.Localization(__file__, 1746, 15), check_libs_49756, *[lib_dirs_49757, openblas_libs_49758, list_49759], **kwargs_49760)
        
        # Assigning a type to the variable 'info' (line 1746)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1746, 8), 'info', check_libs_call_result_49761)
        
        # Type idiom detected: calculating its left and rigth part (line 1747)
        # Getting the type of 'info' (line 1747)
        info_49762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 11), 'info')
        # Getting the type of 'None' (line 1747)
        None_49763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 19), 'None')
        
        (may_be_49764, more_types_in_union_49765) = may_be_none(info_49762, None_49763)

        if may_be_49764:

            if more_types_in_union_49765:
                # Runtime conditional SSA (line 1747)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'stypy_return_type' (line 1748)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1748, 12), 'stypy_return_type', types.NoneType)

            if more_types_in_union_49765:
                # SSA join for if statement (line 1747)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 1751):
        
        # Assigning a Call to a Name (line 1751):
        
        # Call to calc_extra_info(...): (line 1751)
        # Processing the call keyword arguments (line 1751)
        kwargs_49768 = {}
        # Getting the type of 'self' (line 1751)
        self_49766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1751, 21), 'self', False)
        # Obtaining the member 'calc_extra_info' of a type (line 1751)
        calc_extra_info_49767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1751, 21), self_49766, 'calc_extra_info')
        # Calling calc_extra_info(args, kwargs) (line 1751)
        calc_extra_info_call_result_49769 = invoke(stypy.reporting.localization.Localization(__file__, 1751, 21), calc_extra_info_49767, *[], **kwargs_49768)
        
        # Assigning a type to the variable 'extra_info' (line 1751)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1751, 8), 'extra_info', calc_extra_info_call_result_49769)
        
        # Call to dict_append(...): (line 1752)
        # Processing the call arguments (line 1752)
        # Getting the type of 'info' (line 1752)
        info_49771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1752, 20), 'info', False)
        # Processing the call keyword arguments (line 1752)
        # Getting the type of 'extra_info' (line 1752)
        extra_info_49772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1752, 28), 'extra_info', False)
        kwargs_49773 = {'extra_info_49772': extra_info_49772}
        # Getting the type of 'dict_append' (line 1752)
        dict_append_49770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1752, 8), 'dict_append', False)
        # Calling dict_append(args, kwargs) (line 1752)
        dict_append_call_result_49774 = invoke(stypy.reporting.localization.Localization(__file__, 1752, 8), dict_append_49770, *[info_49771], **kwargs_49773)
        
        
        
        
        # Call to check_embedded_lapack(...): (line 1754)
        # Processing the call arguments (line 1754)
        # Getting the type of 'info' (line 1754)
        info_49777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1754, 42), 'info', False)
        # Processing the call keyword arguments (line 1754)
        kwargs_49778 = {}
        # Getting the type of 'self' (line 1754)
        self_49775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1754, 15), 'self', False)
        # Obtaining the member 'check_embedded_lapack' of a type (line 1754)
        check_embedded_lapack_49776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1754, 15), self_49775, 'check_embedded_lapack')
        # Calling check_embedded_lapack(args, kwargs) (line 1754)
        check_embedded_lapack_call_result_49779 = invoke(stypy.reporting.localization.Localization(__file__, 1754, 15), check_embedded_lapack_49776, *[info_49777], **kwargs_49778)
        
        # Applying the 'not' unary operator (line 1754)
        result_not__49780 = python_operator(stypy.reporting.localization.Localization(__file__, 1754, 11), 'not', check_embedded_lapack_call_result_49779)
        
        # Testing the type of an if condition (line 1754)
        if_condition_49781 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1754, 8), result_not__49780)
        # Assigning a type to the variable 'if_condition_49781' (line 1754)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1754, 8), 'if_condition_49781', if_condition_49781)
        # SSA begins for if statement (line 1754)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1755)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1755, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1754)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Str to a Subscript (line 1757):
        
        # Assigning a Str to a Subscript (line 1757):
        str_49782 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1757, 27), 'str', 'c')
        # Getting the type of 'info' (line 1757)
        info_49783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1757, 8), 'info')
        str_49784 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1757, 13), 'str', 'language')
        # Storing an element on a container (line 1757)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1757, 8), info_49783, (str_49784, str_49782))
        
        # Assigning a List to a Subscript (line 1758):
        
        # Assigning a List to a Subscript (line 1758):
        
        # Obtaining an instance of the builtin type 'list' (line 1758)
        list_49785 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1758, 32), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1758)
        # Adding element type (line 1758)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1758)
        tuple_49786 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1758, 34), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1758)
        # Adding element type (line 1758)
        str_49787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1758, 34), 'str', 'HAVE_CBLAS')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1758, 34), tuple_49786, str_49787)
        # Adding element type (line 1758)
        # Getting the type of 'None' (line 1758)
        None_49788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1758, 48), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1758, 34), tuple_49786, None_49788)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1758, 32), list_49785, tuple_49786)
        
        # Getting the type of 'info' (line 1758)
        info_49789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1758, 8), 'info')
        str_49790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1758, 13), 'str', 'define_macros')
        # Storing an element on a container (line 1758)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1758, 8), info_49789, (str_49790, list_49785))
        
        # Call to set_info(...): (line 1759)
        # Processing the call keyword arguments (line 1759)
        # Getting the type of 'info' (line 1759)
        info_49793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1759, 24), 'info', False)
        kwargs_49794 = {'info_49793': info_49793}
        # Getting the type of 'self' (line 1759)
        self_49791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1759, 8), 'self', False)
        # Obtaining the member 'set_info' of a type (line 1759)
        set_info_49792 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1759, 8), self_49791, 'set_info')
        # Calling set_info(args, kwargs) (line 1759)
        set_info_call_result_49795 = invoke(stypy.reporting.localization.Localization(__file__, 1759, 8), set_info_49792, *[], **kwargs_49794)
        
        
        # ################# End of 'calc_info(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'calc_info' in the type store
        # Getting the type of 'stypy_return_type' (line 1740)
        stypy_return_type_49796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_49796)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'calc_info'
        return stypy_return_type_49796


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1731, 0, False)
        # Assigning a type to the variable 'self' (line 1732)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1732, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'openblas_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'openblas_info' (line 1731)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1731, 0), 'openblas_info', openblas_info)

# Assigning a Str to a Name (line 1732):
str_49797 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1732, 14), 'str', 'openblas')
# Getting the type of 'openblas_info'
openblas_info_49798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'openblas_info')
# Setting the type of the member 'section' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), openblas_info_49798, 'section', str_49797)

# Assigning a Str to a Name (line 1733):
str_49799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1733, 18), 'str', 'OPENBLAS')
# Getting the type of 'openblas_info'
openblas_info_49800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'openblas_info')
# Setting the type of the member 'dir_env_var' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), openblas_info_49800, 'dir_env_var', str_49799)

# Assigning a List to a Name (line 1734):

# Obtaining an instance of the builtin type 'list' (line 1734)
list_49801 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1734, 17), 'list')
# Adding type elements to the builtin type 'list' instance (line 1734)
# Adding element type (line 1734)
str_49802 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1734, 18), 'str', 'openblas')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1734, 17), list_49801, str_49802)

# Getting the type of 'openblas_info'
openblas_info_49803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'openblas_info')
# Setting the type of the member '_lib_names' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), openblas_info_49803, '_lib_names', list_49801)

# Assigning a Name to a Name (line 1735):
# Getting the type of 'BlasNotFoundError' (line 1735)
BlasNotFoundError_49804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1735, 20), 'BlasNotFoundError')
# Getting the type of 'openblas_info'
openblas_info_49805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'openblas_info')
# Setting the type of the member 'notfounderror' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), openblas_info_49805, 'notfounderror', BlasNotFoundError_49804)
# Declaration of the 'openblas_lapack_info' class
# Getting the type of 'openblas_info' (line 1762)
openblas_info_49806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1762, 27), 'openblas_info')

class openblas_lapack_info(openblas_info_49806, ):
    
    # Assigning a Str to a Name (line 1763):
    
    # Assigning a Str to a Name (line 1764):
    
    # Assigning a List to a Name (line 1765):
    
    # Assigning a Name to a Name (line 1766):

    @norecursion
    def check_embedded_lapack(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'check_embedded_lapack'
        module_type_store = module_type_store.open_function_context('check_embedded_lapack', 1768, 4, False)
        # Assigning a type to the variable 'self' (line 1769)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1769, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        openblas_lapack_info.check_embedded_lapack.__dict__.__setitem__('stypy_localization', localization)
        openblas_lapack_info.check_embedded_lapack.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        openblas_lapack_info.check_embedded_lapack.__dict__.__setitem__('stypy_type_store', module_type_store)
        openblas_lapack_info.check_embedded_lapack.__dict__.__setitem__('stypy_function_name', 'openblas_lapack_info.check_embedded_lapack')
        openblas_lapack_info.check_embedded_lapack.__dict__.__setitem__('stypy_param_names_list', ['info'])
        openblas_lapack_info.check_embedded_lapack.__dict__.__setitem__('stypy_varargs_param_name', None)
        openblas_lapack_info.check_embedded_lapack.__dict__.__setitem__('stypy_kwargs_param_name', None)
        openblas_lapack_info.check_embedded_lapack.__dict__.__setitem__('stypy_call_defaults', defaults)
        openblas_lapack_info.check_embedded_lapack.__dict__.__setitem__('stypy_call_varargs', varargs)
        openblas_lapack_info.check_embedded_lapack.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        openblas_lapack_info.check_embedded_lapack.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'openblas_lapack_info.check_embedded_lapack', ['info'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'check_embedded_lapack', localization, ['info'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'check_embedded_lapack(...)' code ##################

        
        # Assigning a Name to a Name (line 1769):
        
        # Assigning a Name to a Name (line 1769):
        # Getting the type of 'False' (line 1769)
        False_49807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1769, 14), 'False')
        # Assigning a type to the variable 'res' (line 1769)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1769, 8), 'res', False_49807)
        
        # Assigning a Call to a Name (line 1770):
        
        # Assigning a Call to a Name (line 1770):
        
        # Call to new_compiler(...): (line 1770)
        # Processing the call keyword arguments (line 1770)
        kwargs_49811 = {}
        # Getting the type of 'distutils' (line 1770)
        distutils_49808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1770, 12), 'distutils', False)
        # Obtaining the member 'ccompiler' of a type (line 1770)
        ccompiler_49809 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1770, 12), distutils_49808, 'ccompiler')
        # Obtaining the member 'new_compiler' of a type (line 1770)
        new_compiler_49810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1770, 12), ccompiler_49809, 'new_compiler')
        # Calling new_compiler(args, kwargs) (line 1770)
        new_compiler_call_result_49812 = invoke(stypy.reporting.localization.Localization(__file__, 1770, 12), new_compiler_49810, *[], **kwargs_49811)
        
        # Assigning a type to the variable 'c' (line 1770)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1770, 8), 'c', new_compiler_call_result_49812)
        
        # Assigning a Call to a Name (line 1771):
        
        # Assigning a Call to a Name (line 1771):
        
        # Call to mkdtemp(...): (line 1771)
        # Processing the call keyword arguments (line 1771)
        kwargs_49815 = {}
        # Getting the type of 'tempfile' (line 1771)
        tempfile_49813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 17), 'tempfile', False)
        # Obtaining the member 'mkdtemp' of a type (line 1771)
        mkdtemp_49814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1771, 17), tempfile_49813, 'mkdtemp')
        # Calling mkdtemp(args, kwargs) (line 1771)
        mkdtemp_call_result_49816 = invoke(stypy.reporting.localization.Localization(__file__, 1771, 17), mkdtemp_49814, *[], **kwargs_49815)
        
        # Assigning a type to the variable 'tmpdir' (line 1771)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1771, 8), 'tmpdir', mkdtemp_call_result_49816)
        
        # Assigning a Str to a Name (line 1772):
        
        # Assigning a Str to a Name (line 1772):
        str_49817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1777, (-1)), 'str', 'void zungqr();\n        int main(int argc, const char *argv[])\n        {\n            zungqr_();\n            return 0;\n        }')
        # Assigning a type to the variable 's' (line 1772)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1772, 8), 's', str_49817)
        
        # Assigning a Call to a Name (line 1778):
        
        # Assigning a Call to a Name (line 1778):
        
        # Call to join(...): (line 1778)
        # Processing the call arguments (line 1778)
        # Getting the type of 'tmpdir' (line 1778)
        tmpdir_49821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1778, 27), 'tmpdir', False)
        str_49822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1778, 35), 'str', 'source.c')
        # Processing the call keyword arguments (line 1778)
        kwargs_49823 = {}
        # Getting the type of 'os' (line 1778)
        os_49818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1778, 14), 'os', False)
        # Obtaining the member 'path' of a type (line 1778)
        path_49819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1778, 14), os_49818, 'path')
        # Obtaining the member 'join' of a type (line 1778)
        join_49820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1778, 14), path_49819, 'join')
        # Calling join(args, kwargs) (line 1778)
        join_call_result_49824 = invoke(stypy.reporting.localization.Localization(__file__, 1778, 14), join_49820, *[tmpdir_49821, str_49822], **kwargs_49823)
        
        # Assigning a type to the variable 'src' (line 1778)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1778, 8), 'src', join_call_result_49824)
        
        # Assigning a Call to a Name (line 1779):
        
        # Assigning a Call to a Name (line 1779):
        
        # Call to join(...): (line 1779)
        # Processing the call arguments (line 1779)
        # Getting the type of 'tmpdir' (line 1779)
        tmpdir_49828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1779, 27), 'tmpdir', False)
        str_49829 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1779, 35), 'str', 'a.out')
        # Processing the call keyword arguments (line 1779)
        kwargs_49830 = {}
        # Getting the type of 'os' (line 1779)
        os_49825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1779, 14), 'os', False)
        # Obtaining the member 'path' of a type (line 1779)
        path_49826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1779, 14), os_49825, 'path')
        # Obtaining the member 'join' of a type (line 1779)
        join_49827 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1779, 14), path_49826, 'join')
        # Calling join(args, kwargs) (line 1779)
        join_call_result_49831 = invoke(stypy.reporting.localization.Localization(__file__, 1779, 14), join_49827, *[tmpdir_49828, str_49829], **kwargs_49830)
        
        # Assigning a type to the variable 'out' (line 1779)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1779, 8), 'out', join_call_result_49831)
        
        
        # SSA begins for try-except statement (line 1781)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Subscript to a Name (line 1782):
        
        # Assigning a Subscript to a Name (line 1782):
        
        # Obtaining the type of the subscript
        str_49832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1782, 30), 'str', 'extra_link_args')
        # Getting the type of 'info' (line 1782)
        info_49833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1782, 25), 'info')
        # Obtaining the member '__getitem__' of a type (line 1782)
        getitem___49834 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1782, 25), info_49833, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1782)
        subscript_call_result_49835 = invoke(stypy.reporting.localization.Localization(__file__, 1782, 25), getitem___49834, str_49832)
        
        # Assigning a type to the variable 'extra_args' (line 1782)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1782, 12), 'extra_args', subscript_call_result_49835)
        # SSA branch for the except part of a try statement (line 1781)
        # SSA branch for the except '<any exception>' branch of a try statement (line 1781)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a List to a Name (line 1784):
        
        # Assigning a List to a Name (line 1784):
        
        # Obtaining an instance of the builtin type 'list' (line 1784)
        list_49836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1784, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1784)
        
        # Assigning a type to the variable 'extra_args' (line 1784)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1784, 12), 'extra_args', list_49836)
        # SSA join for try-except statement (line 1781)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Try-finally block (line 1785)
        
        # Call to open(...): (line 1786)
        # Processing the call arguments (line 1786)
        # Getting the type of 'src' (line 1786)
        src_49838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 22), 'src', False)
        str_49839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1786, 27), 'str', 'wt')
        # Processing the call keyword arguments (line 1786)
        kwargs_49840 = {}
        # Getting the type of 'open' (line 1786)
        open_49837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 17), 'open', False)
        # Calling open(args, kwargs) (line 1786)
        open_call_result_49841 = invoke(stypy.reporting.localization.Localization(__file__, 1786, 17), open_49837, *[src_49838, str_49839], **kwargs_49840)
        
        with_49842 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 1786, 17), open_call_result_49841, 'with parameter', '__enter__', '__exit__')

        if with_49842:
            # Calling the __enter__ method to initiate a with section
            # Obtaining the member '__enter__' of a type (line 1786)
            enter___49843 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1786, 17), open_call_result_49841, '__enter__')
            with_enter_49844 = invoke(stypy.reporting.localization.Localization(__file__, 1786, 17), enter___49843)
            # Assigning a type to the variable 'f' (line 1786)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1786, 17), 'f', with_enter_49844)
            
            # Call to write(...): (line 1787)
            # Processing the call arguments (line 1787)
            # Getting the type of 's' (line 1787)
            s_49847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1787, 24), 's', False)
            # Processing the call keyword arguments (line 1787)
            kwargs_49848 = {}
            # Getting the type of 'f' (line 1787)
            f_49845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1787, 16), 'f', False)
            # Obtaining the member 'write' of a type (line 1787)
            write_49846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1787, 16), f_49845, 'write')
            # Calling write(args, kwargs) (line 1787)
            write_call_result_49849 = invoke(stypy.reporting.localization.Localization(__file__, 1787, 16), write_49846, *[s_49847], **kwargs_49848)
            
            # Calling the __exit__ method to finish a with section
            # Obtaining the member '__exit__' of a type (line 1786)
            exit___49850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1786, 17), open_call_result_49841, '__exit__')
            with_exit_49851 = invoke(stypy.reporting.localization.Localization(__file__, 1786, 17), exit___49850, None, None, None)

        
        # Assigning a Call to a Name (line 1788):
        
        # Assigning a Call to a Name (line 1788):
        
        # Call to compile(...): (line 1788)
        # Processing the call arguments (line 1788)
        
        # Obtaining an instance of the builtin type 'list' (line 1788)
        list_49854 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1788, 28), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1788)
        # Adding element type (line 1788)
        # Getting the type of 'src' (line 1788)
        src_49855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 29), 'src', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1788, 28), list_49854, src_49855)
        
        # Processing the call keyword arguments (line 1788)
        # Getting the type of 'tmpdir' (line 1788)
        tmpdir_49856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 46), 'tmpdir', False)
        keyword_49857 = tmpdir_49856
        kwargs_49858 = {'output_dir': keyword_49857}
        # Getting the type of 'c' (line 1788)
        c_49852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 18), 'c', False)
        # Obtaining the member 'compile' of a type (line 1788)
        compile_49853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1788, 18), c_49852, 'compile')
        # Calling compile(args, kwargs) (line 1788)
        compile_call_result_49859 = invoke(stypy.reporting.localization.Localization(__file__, 1788, 18), compile_49853, *[list_49854], **kwargs_49858)
        
        # Assigning a type to the variable 'obj' (line 1788)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1788, 12), 'obj', compile_call_result_49859)
        
        
        # SSA begins for try-except statement (line 1789)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to link_executable(...): (line 1790)
        # Processing the call arguments (line 1790)
        # Getting the type of 'obj' (line 1790)
        obj_49862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1790, 34), 'obj', False)
        # Getting the type of 'out' (line 1790)
        out_49863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1790, 39), 'out', False)
        # Processing the call keyword arguments (line 1790)
        
        # Obtaining the type of the subscript
        str_49864 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1790, 59), 'str', 'libraries')
        # Getting the type of 'info' (line 1790)
        info_49865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1790, 54), 'info', False)
        # Obtaining the member '__getitem__' of a type (line 1790)
        getitem___49866 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1790, 54), info_49865, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1790)
        subscript_call_result_49867 = invoke(stypy.reporting.localization.Localization(__file__, 1790, 54), getitem___49866, str_49864)
        
        keyword_49868 = subscript_call_result_49867
        
        # Obtaining the type of the subscript
        str_49869 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1791, 52), 'str', 'library_dirs')
        # Getting the type of 'info' (line 1791)
        info_49870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 47), 'info', False)
        # Obtaining the member '__getitem__' of a type (line 1791)
        getitem___49871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1791, 47), info_49870, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1791)
        subscript_call_result_49872 = invoke(stypy.reporting.localization.Localization(__file__, 1791, 47), getitem___49871, str_49869)
        
        keyword_49873 = subscript_call_result_49872
        # Getting the type of 'extra_args' (line 1792)
        extra_args_49874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 49), 'extra_args', False)
        keyword_49875 = extra_args_49874
        kwargs_49876 = {'libraries': keyword_49868, 'extra_postargs': keyword_49875, 'library_dirs': keyword_49873}
        # Getting the type of 'c' (line 1790)
        c_49860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1790, 16), 'c', False)
        # Obtaining the member 'link_executable' of a type (line 1790)
        link_executable_49861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1790, 16), c_49860, 'link_executable')
        # Calling link_executable(args, kwargs) (line 1790)
        link_executable_call_result_49877 = invoke(stypy.reporting.localization.Localization(__file__, 1790, 16), link_executable_49861, *[obj_49862, out_49863], **kwargs_49876)
        
        
        # Assigning a Name to a Name (line 1793):
        
        # Assigning a Name to a Name (line 1793):
        # Getting the type of 'True' (line 1793)
        True_49878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 22), 'True')
        # Assigning a type to the variable 'res' (line 1793)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1793, 16), 'res', True_49878)
        # SSA branch for the except part of a try statement (line 1789)
        # SSA branch for the except 'Attribute' branch of a try statement (line 1789)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Name to a Name (line 1795):
        
        # Assigning a Name to a Name (line 1795):
        # Getting the type of 'False' (line 1795)
        False_49879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 22), 'False')
        # Assigning a type to the variable 'res' (line 1795)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1795, 16), 'res', False_49879)
        # SSA join for try-except statement (line 1789)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # finally branch of the try-finally block (line 1785)
        
        # Call to rmtree(...): (line 1797)
        # Processing the call arguments (line 1797)
        # Getting the type of 'tmpdir' (line 1797)
        tmpdir_49882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1797, 26), 'tmpdir', False)
        # Processing the call keyword arguments (line 1797)
        kwargs_49883 = {}
        # Getting the type of 'shutil' (line 1797)
        shutil_49880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1797, 12), 'shutil', False)
        # Obtaining the member 'rmtree' of a type (line 1797)
        rmtree_49881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1797, 12), shutil_49880, 'rmtree')
        # Calling rmtree(args, kwargs) (line 1797)
        rmtree_call_result_49884 = invoke(stypy.reporting.localization.Localization(__file__, 1797, 12), rmtree_49881, *[tmpdir_49882], **kwargs_49883)
        
        
        # Getting the type of 'res' (line 1798)
        res_49885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 15), 'res')
        # Assigning a type to the variable 'stypy_return_type' (line 1798)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1798, 8), 'stypy_return_type', res_49885)
        
        # ################# End of 'check_embedded_lapack(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'check_embedded_lapack' in the type store
        # Getting the type of 'stypy_return_type' (line 1768)
        stypy_return_type_49886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1768, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_49886)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'check_embedded_lapack'
        return stypy_return_type_49886


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1762, 0, False)
        # Assigning a type to the variable 'self' (line 1763)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1763, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'openblas_lapack_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'openblas_lapack_info' (line 1762)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1762, 0), 'openblas_lapack_info', openblas_lapack_info)

# Assigning a Str to a Name (line 1763):
str_49887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1763, 14), 'str', 'openblas')
# Getting the type of 'openblas_lapack_info'
openblas_lapack_info_49888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'openblas_lapack_info')
# Setting the type of the member 'section' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), openblas_lapack_info_49888, 'section', str_49887)

# Assigning a Str to a Name (line 1764):
str_49889 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1764, 18), 'str', 'OPENBLAS')
# Getting the type of 'openblas_lapack_info'
openblas_lapack_info_49890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'openblas_lapack_info')
# Setting the type of the member 'dir_env_var' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), openblas_lapack_info_49890, 'dir_env_var', str_49889)

# Assigning a List to a Name (line 1765):

# Obtaining an instance of the builtin type 'list' (line 1765)
list_49891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1765, 17), 'list')
# Adding type elements to the builtin type 'list' instance (line 1765)
# Adding element type (line 1765)
str_49892 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1765, 18), 'str', 'openblas')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1765, 17), list_49891, str_49892)

# Getting the type of 'openblas_lapack_info'
openblas_lapack_info_49893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'openblas_lapack_info')
# Setting the type of the member '_lib_names' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), openblas_lapack_info_49893, '_lib_names', list_49891)

# Assigning a Name to a Name (line 1766):
# Getting the type of 'BlasNotFoundError' (line 1766)
BlasNotFoundError_49894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1766, 20), 'BlasNotFoundError')
# Getting the type of 'openblas_lapack_info'
openblas_lapack_info_49895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'openblas_lapack_info')
# Setting the type of the member 'notfounderror' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), openblas_lapack_info_49895, 'notfounderror', BlasNotFoundError_49894)
# Declaration of the 'blas_src_info' class
# Getting the type of 'system_info' (line 1801)
system_info_49896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1801, 20), 'system_info')

class blas_src_info(system_info_49896, ):
    
    # Assigning a Str to a Name (line 1802):
    
    # Assigning a Str to a Name (line 1803):
    
    # Assigning a Name to a Name (line 1804):

    @norecursion
    def get_paths(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_paths'
        module_type_store = module_type_store.open_function_context('get_paths', 1806, 4, False)
        # Assigning a type to the variable 'self' (line 1807)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1807, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        blas_src_info.get_paths.__dict__.__setitem__('stypy_localization', localization)
        blas_src_info.get_paths.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        blas_src_info.get_paths.__dict__.__setitem__('stypy_type_store', module_type_store)
        blas_src_info.get_paths.__dict__.__setitem__('stypy_function_name', 'blas_src_info.get_paths')
        blas_src_info.get_paths.__dict__.__setitem__('stypy_param_names_list', ['section', 'key'])
        blas_src_info.get_paths.__dict__.__setitem__('stypy_varargs_param_name', None)
        blas_src_info.get_paths.__dict__.__setitem__('stypy_kwargs_param_name', None)
        blas_src_info.get_paths.__dict__.__setitem__('stypy_call_defaults', defaults)
        blas_src_info.get_paths.__dict__.__setitem__('stypy_call_varargs', varargs)
        blas_src_info.get_paths.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        blas_src_info.get_paths.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'blas_src_info.get_paths', ['section', 'key'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_paths', localization, ['section', 'key'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_paths(...)' code ##################

        
        # Assigning a Call to a Name (line 1807):
        
        # Assigning a Call to a Name (line 1807):
        
        # Call to get_paths(...): (line 1807)
        # Processing the call arguments (line 1807)
        # Getting the type of 'self' (line 1807)
        self_49899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1807, 41), 'self', False)
        # Getting the type of 'section' (line 1807)
        section_49900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1807, 47), 'section', False)
        # Getting the type of 'key' (line 1807)
        key_49901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1807, 56), 'key', False)
        # Processing the call keyword arguments (line 1807)
        kwargs_49902 = {}
        # Getting the type of 'system_info' (line 1807)
        system_info_49897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1807, 19), 'system_info', False)
        # Obtaining the member 'get_paths' of a type (line 1807)
        get_paths_49898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1807, 19), system_info_49897, 'get_paths')
        # Calling get_paths(args, kwargs) (line 1807)
        get_paths_call_result_49903 = invoke(stypy.reporting.localization.Localization(__file__, 1807, 19), get_paths_49898, *[self_49899, section_49900, key_49901], **kwargs_49902)
        
        # Assigning a type to the variable 'pre_dirs' (line 1807)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1807, 8), 'pre_dirs', get_paths_call_result_49903)
        
        # Assigning a List to a Name (line 1808):
        
        # Assigning a List to a Name (line 1808):
        
        # Obtaining an instance of the builtin type 'list' (line 1808)
        list_49904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1808, 15), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1808)
        
        # Assigning a type to the variable 'dirs' (line 1808)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1808, 8), 'dirs', list_49904)
        
        # Getting the type of 'pre_dirs' (line 1809)
        pre_dirs_49905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 17), 'pre_dirs')
        # Testing the type of a for loop iterable (line 1809)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1809, 8), pre_dirs_49905)
        # Getting the type of the for loop variable (line 1809)
        for_loop_var_49906 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1809, 8), pre_dirs_49905)
        # Assigning a type to the variable 'd' (line 1809)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1809, 8), 'd', for_loop_var_49906)
        # SSA begins for a for statement (line 1809)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to extend(...): (line 1810)
        # Processing the call arguments (line 1810)
        
        # Obtaining an instance of the builtin type 'list' (line 1810)
        list_49909 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1810, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1810)
        # Adding element type (line 1810)
        # Getting the type of 'd' (line 1810)
        d_49910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1810, 25), 'd', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1810, 24), list_49909, d_49910)
        
        
        # Call to combine_paths(...): (line 1810)
        # Processing the call arguments (line 1810)
        # Getting the type of 'd' (line 1810)
        d_49913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1810, 49), 'd', False)
        
        # Obtaining an instance of the builtin type 'list' (line 1810)
        list_49914 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1810, 52), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1810)
        # Adding element type (line 1810)
        str_49915 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1810, 53), 'str', 'blas')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1810, 52), list_49914, str_49915)
        
        # Processing the call keyword arguments (line 1810)
        kwargs_49916 = {}
        # Getting the type of 'self' (line 1810)
        self_49911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1810, 30), 'self', False)
        # Obtaining the member 'combine_paths' of a type (line 1810)
        combine_paths_49912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1810, 30), self_49911, 'combine_paths')
        # Calling combine_paths(args, kwargs) (line 1810)
        combine_paths_call_result_49917 = invoke(stypy.reporting.localization.Localization(__file__, 1810, 30), combine_paths_49912, *[d_49913, list_49914], **kwargs_49916)
        
        # Applying the binary operator '+' (line 1810)
        result_add_49918 = python_operator(stypy.reporting.localization.Localization(__file__, 1810, 24), '+', list_49909, combine_paths_call_result_49917)
        
        # Processing the call keyword arguments (line 1810)
        kwargs_49919 = {}
        # Getting the type of 'dirs' (line 1810)
        dirs_49907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1810, 12), 'dirs', False)
        # Obtaining the member 'extend' of a type (line 1810)
        extend_49908 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1810, 12), dirs_49907, 'extend')
        # Calling extend(args, kwargs) (line 1810)
        extend_call_result_49920 = invoke(stypy.reporting.localization.Localization(__file__, 1810, 12), extend_49908, *[result_add_49918], **kwargs_49919)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'dirs' (line 1811)
        dirs_49928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 27), 'dirs')
        comprehension_49929 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1811, 16), dirs_49928)
        # Assigning a type to the variable 'd' (line 1811)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1811, 16), 'd', comprehension_49929)
        
        # Call to isdir(...): (line 1811)
        # Processing the call arguments (line 1811)
        # Getting the type of 'd' (line 1811)
        d_49925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 49), 'd', False)
        # Processing the call keyword arguments (line 1811)
        kwargs_49926 = {}
        # Getting the type of 'os' (line 1811)
        os_49922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 35), 'os', False)
        # Obtaining the member 'path' of a type (line 1811)
        path_49923 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1811, 35), os_49922, 'path')
        # Obtaining the member 'isdir' of a type (line 1811)
        isdir_49924 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1811, 35), path_49923, 'isdir')
        # Calling isdir(args, kwargs) (line 1811)
        isdir_call_result_49927 = invoke(stypy.reporting.localization.Localization(__file__, 1811, 35), isdir_49924, *[d_49925], **kwargs_49926)
        
        # Getting the type of 'd' (line 1811)
        d_49921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 16), 'd')
        list_49930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1811, 16), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1811, 16), list_49930, d_49921)
        # Assigning a type to the variable 'stypy_return_type' (line 1811)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1811, 8), 'stypy_return_type', list_49930)
        
        # ################# End of 'get_paths(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_paths' in the type store
        # Getting the type of 'stypy_return_type' (line 1806)
        stypy_return_type_49931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1806, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_49931)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_paths'
        return stypy_return_type_49931


    @norecursion
    def calc_info(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'calc_info'
        module_type_store = module_type_store.open_function_context('calc_info', 1813, 4, False)
        # Assigning a type to the variable 'self' (line 1814)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1814, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        blas_src_info.calc_info.__dict__.__setitem__('stypy_localization', localization)
        blas_src_info.calc_info.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        blas_src_info.calc_info.__dict__.__setitem__('stypy_type_store', module_type_store)
        blas_src_info.calc_info.__dict__.__setitem__('stypy_function_name', 'blas_src_info.calc_info')
        blas_src_info.calc_info.__dict__.__setitem__('stypy_param_names_list', [])
        blas_src_info.calc_info.__dict__.__setitem__('stypy_varargs_param_name', None)
        blas_src_info.calc_info.__dict__.__setitem__('stypy_kwargs_param_name', None)
        blas_src_info.calc_info.__dict__.__setitem__('stypy_call_defaults', defaults)
        blas_src_info.calc_info.__dict__.__setitem__('stypy_call_varargs', varargs)
        blas_src_info.calc_info.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        blas_src_info.calc_info.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'blas_src_info.calc_info', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'calc_info', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'calc_info(...)' code ##################

        
        # Assigning a Call to a Name (line 1814):
        
        # Assigning a Call to a Name (line 1814):
        
        # Call to get_src_dirs(...): (line 1814)
        # Processing the call keyword arguments (line 1814)
        kwargs_49934 = {}
        # Getting the type of 'self' (line 1814)
        self_49932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 19), 'self', False)
        # Obtaining the member 'get_src_dirs' of a type (line 1814)
        get_src_dirs_49933 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1814, 19), self_49932, 'get_src_dirs')
        # Calling get_src_dirs(args, kwargs) (line 1814)
        get_src_dirs_call_result_49935 = invoke(stypy.reporting.localization.Localization(__file__, 1814, 19), get_src_dirs_49933, *[], **kwargs_49934)
        
        # Assigning a type to the variable 'src_dirs' (line 1814)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1814, 8), 'src_dirs', get_src_dirs_call_result_49935)
        
        # Assigning a Str to a Name (line 1815):
        
        # Assigning a Str to a Name (line 1815):
        str_49936 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1815, 18), 'str', '')
        # Assigning a type to the variable 'src_dir' (line 1815)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1815, 8), 'src_dir', str_49936)
        
        # Getting the type of 'src_dirs' (line 1816)
        src_dirs_49937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1816, 17), 'src_dirs')
        # Testing the type of a for loop iterable (line 1816)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1816, 8), src_dirs_49937)
        # Getting the type of the for loop variable (line 1816)
        for_loop_var_49938 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1816, 8), src_dirs_49937)
        # Assigning a type to the variable 'd' (line 1816)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1816, 8), 'd', for_loop_var_49938)
        # SSA begins for a for statement (line 1816)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to isfile(...): (line 1817)
        # Processing the call arguments (line 1817)
        
        # Call to join(...): (line 1817)
        # Processing the call arguments (line 1817)
        # Getting the type of 'd' (line 1817)
        d_49945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 43), 'd', False)
        str_49946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1817, 46), 'str', 'daxpy.f')
        # Processing the call keyword arguments (line 1817)
        kwargs_49947 = {}
        # Getting the type of 'os' (line 1817)
        os_49942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 30), 'os', False)
        # Obtaining the member 'path' of a type (line 1817)
        path_49943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1817, 30), os_49942, 'path')
        # Obtaining the member 'join' of a type (line 1817)
        join_49944 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1817, 30), path_49943, 'join')
        # Calling join(args, kwargs) (line 1817)
        join_call_result_49948 = invoke(stypy.reporting.localization.Localization(__file__, 1817, 30), join_49944, *[d_49945, str_49946], **kwargs_49947)
        
        # Processing the call keyword arguments (line 1817)
        kwargs_49949 = {}
        # Getting the type of 'os' (line 1817)
        os_49939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 15), 'os', False)
        # Obtaining the member 'path' of a type (line 1817)
        path_49940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1817, 15), os_49939, 'path')
        # Obtaining the member 'isfile' of a type (line 1817)
        isfile_49941 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1817, 15), path_49940, 'isfile')
        # Calling isfile(args, kwargs) (line 1817)
        isfile_call_result_49950 = invoke(stypy.reporting.localization.Localization(__file__, 1817, 15), isfile_49941, *[join_call_result_49948], **kwargs_49949)
        
        # Testing the type of an if condition (line 1817)
        if_condition_49951 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1817, 12), isfile_call_result_49950)
        # Assigning a type to the variable 'if_condition_49951' (line 1817)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1817, 12), 'if_condition_49951', if_condition_49951)
        # SSA begins for if statement (line 1817)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1818):
        
        # Assigning a Name to a Name (line 1818):
        # Getting the type of 'd' (line 1818)
        d_49952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1818, 26), 'd')
        # Assigning a type to the variable 'src_dir' (line 1818)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1818, 16), 'src_dir', d_49952)
        # SSA join for if statement (line 1817)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'src_dir' (line 1820)
        src_dir_49953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1820, 15), 'src_dir')
        # Applying the 'not' unary operator (line 1820)
        result_not__49954 = python_operator(stypy.reporting.localization.Localization(__file__, 1820, 11), 'not', src_dir_49953)
        
        # Testing the type of an if condition (line 1820)
        if_condition_49955 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1820, 8), result_not__49954)
        # Assigning a type to the variable 'if_condition_49955' (line 1820)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1820, 8), 'if_condition_49955', if_condition_49955)
        # SSA begins for if statement (line 1820)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1822)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1822, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1820)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Str to a Name (line 1823):
        
        # Assigning a Str to a Name (line 1823):
        str_49956 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1830, (-1)), 'str', '\n        caxpy csscal dnrm2 dzasum saxpy srotg zdotc ccopy cswap drot\n        dznrm2 scasum srotm zdotu cdotc dasum drotg icamax scnrm2\n        srotmg zdrot cdotu daxpy drotm idamax scopy sscal zdscal crotg\n        dcabs1 drotmg isamax sdot sswap zrotg cscal dcopy dscal izamax\n        snrm2 zaxpy zscal csrot ddot dswap sasum srot zcopy zswap\n        scabs1\n        ')
        # Assigning a type to the variable 'blas1' (line 1823)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1823, 8), 'blas1', str_49956)
        
        # Assigning a Str to a Name (line 1831):
        
        # Assigning a Str to a Name (line 1831):
        str_49957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1839, (-1)), 'str', '\n        cgbmv chpmv ctrsv dsymv dtrsv sspr2 strmv zhemv ztpmv cgemv\n        chpr dgbmv dsyr lsame ssymv strsv zher ztpsv cgerc chpr2 dgemv\n        dsyr2 sgbmv ssyr xerbla zher2 ztrmv cgeru ctbmv dger dtbmv\n        sgemv ssyr2 zgbmv zhpmv ztrsv chbmv ctbsv dsbmv dtbsv sger\n        stbmv zgemv zhpr chemv ctpmv dspmv dtpmv ssbmv stbsv zgerc\n        zhpr2 cher ctpsv dspr dtpsv sspmv stpmv zgeru ztbmv cher2\n        ctrmv dspr2 dtrmv sspr stpsv zhbmv ztbsv\n        ')
        # Assigning a type to the variable 'blas2' (line 1831)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1831, 8), 'blas2', str_49957)
        
        # Assigning a Str to a Name (line 1840):
        
        # Assigning a Str to a Name (line 1840):
        str_49958 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1844, (-1)), 'str', '\n        cgemm csymm ctrsm dsyrk sgemm strmm zhemm zsyr2k chemm csyr2k\n        dgemm dtrmm ssymm strsm zher2k zsyrk cher2k csyrk dsymm dtrsm\n        ssyr2k zherk ztrmm cherk ctrmm dsyr2k ssyrk zgemm zsymm ztrsm\n        ')
        # Assigning a type to the variable 'blas3' (line 1840)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1840, 8), 'blas3', str_49958)
        
        # Assigning a ListComp to a Name (line 1845):
        
        # Assigning a ListComp to a Name (line 1845):
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to split(...): (line 1846)
        # Processing the call keyword arguments (line 1846)
        kwargs_49974 = {}
        # Getting the type of 'blas1' (line 1846)
        blas1_49968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1846, 29), 'blas1', False)
        # Getting the type of 'blas2' (line 1846)
        blas2_49969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1846, 37), 'blas2', False)
        # Applying the binary operator '+' (line 1846)
        result_add_49970 = python_operator(stypy.reporting.localization.Localization(__file__, 1846, 29), '+', blas1_49968, blas2_49969)
        
        # Getting the type of 'blas3' (line 1846)
        blas3_49971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1846, 45), 'blas3', False)
        # Applying the binary operator '+' (line 1846)
        result_add_49972 = python_operator(stypy.reporting.localization.Localization(__file__, 1846, 43), '+', result_add_49970, blas3_49971)
        
        # Obtaining the member 'split' of a type (line 1846)
        split_49973 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1846, 43), result_add_49972, 'split')
        # Calling split(args, kwargs) (line 1846)
        split_call_result_49975 = invoke(stypy.reporting.localization.Localization(__file__, 1846, 43), split_49973, *[], **kwargs_49974)
        
        comprehension_49976 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1845, 19), split_call_result_49975)
        # Assigning a type to the variable 'f' (line 1845)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1845, 19), 'f', comprehension_49976)
        
        # Call to join(...): (line 1845)
        # Processing the call arguments (line 1845)
        # Getting the type of 'src_dir' (line 1845)
        src_dir_49962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1845, 32), 'src_dir', False)
        # Getting the type of 'f' (line 1845)
        f_49963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1845, 41), 'f', False)
        str_49964 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1845, 45), 'str', '.f')
        # Applying the binary operator '+' (line 1845)
        result_add_49965 = python_operator(stypy.reporting.localization.Localization(__file__, 1845, 41), '+', f_49963, str_49964)
        
        # Processing the call keyword arguments (line 1845)
        kwargs_49966 = {}
        # Getting the type of 'os' (line 1845)
        os_49959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1845, 19), 'os', False)
        # Obtaining the member 'path' of a type (line 1845)
        path_49960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1845, 19), os_49959, 'path')
        # Obtaining the member 'join' of a type (line 1845)
        join_49961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1845, 19), path_49960, 'join')
        # Calling join(args, kwargs) (line 1845)
        join_call_result_49967 = invoke(stypy.reporting.localization.Localization(__file__, 1845, 19), join_49961, *[src_dir_49962, result_add_49965], **kwargs_49966)
        
        list_49977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1845, 19), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1845, 19), list_49977, join_call_result_49967)
        # Assigning a type to the variable 'sources' (line 1845)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1845, 8), 'sources', list_49977)
        
        # Assigning a ListComp to a Name (line 1848):
        
        # Assigning a ListComp to a Name (line 1848):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'sources' (line 1848)
        sources_49985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1848, 30), 'sources')
        comprehension_49986 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1848, 19), sources_49985)
        # Assigning a type to the variable 'f' (line 1848)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1848, 19), 'f', comprehension_49986)
        
        # Call to isfile(...): (line 1848)
        # Processing the call arguments (line 1848)
        # Getting the type of 'f' (line 1848)
        f_49982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1848, 56), 'f', False)
        # Processing the call keyword arguments (line 1848)
        kwargs_49983 = {}
        # Getting the type of 'os' (line 1848)
        os_49979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1848, 41), 'os', False)
        # Obtaining the member 'path' of a type (line 1848)
        path_49980 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1848, 41), os_49979, 'path')
        # Obtaining the member 'isfile' of a type (line 1848)
        isfile_49981 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1848, 41), path_49980, 'isfile')
        # Calling isfile(args, kwargs) (line 1848)
        isfile_call_result_49984 = invoke(stypy.reporting.localization.Localization(__file__, 1848, 41), isfile_49981, *[f_49982], **kwargs_49983)
        
        # Getting the type of 'f' (line 1848)
        f_49978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1848, 19), 'f')
        list_49987 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1848, 19), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1848, 19), list_49987, f_49978)
        # Assigning a type to the variable 'sources' (line 1848)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1848, 8), 'sources', list_49987)
        
        # Assigning a Dict to a Name (line 1849):
        
        # Assigning a Dict to a Name (line 1849):
        
        # Obtaining an instance of the builtin type 'dict' (line 1849)
        dict_49988 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1849, 15), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 1849)
        # Adding element type (key, value) (line 1849)
        str_49989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1849, 16), 'str', 'sources')
        # Getting the type of 'sources' (line 1849)
        sources_49990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 27), 'sources')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1849, 15), dict_49988, (str_49989, sources_49990))
        # Adding element type (key, value) (line 1849)
        str_49991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1849, 36), 'str', 'language')
        str_49992 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1849, 48), 'str', 'f77')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1849, 15), dict_49988, (str_49991, str_49992))
        
        # Assigning a type to the variable 'info' (line 1849)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1849, 8), 'info', dict_49988)
        
        # Call to set_info(...): (line 1850)
        # Processing the call keyword arguments (line 1850)
        # Getting the type of 'info' (line 1850)
        info_49995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1850, 24), 'info', False)
        kwargs_49996 = {'info_49995': info_49995}
        # Getting the type of 'self' (line 1850)
        self_49993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1850, 8), 'self', False)
        # Obtaining the member 'set_info' of a type (line 1850)
        set_info_49994 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1850, 8), self_49993, 'set_info')
        # Calling set_info(args, kwargs) (line 1850)
        set_info_call_result_49997 = invoke(stypy.reporting.localization.Localization(__file__, 1850, 8), set_info_49994, *[], **kwargs_49996)
        
        
        # ################# End of 'calc_info(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'calc_info' in the type store
        # Getting the type of 'stypy_return_type' (line 1813)
        stypy_return_type_49998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_49998)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'calc_info'
        return stypy_return_type_49998


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1801, 0, False)
        # Assigning a type to the variable 'self' (line 1802)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1802, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'blas_src_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'blas_src_info' (line 1801)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1801, 0), 'blas_src_info', blas_src_info)

# Assigning a Str to a Name (line 1802):
str_49999 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1802, 14), 'str', 'blas_src')
# Getting the type of 'blas_src_info'
blas_src_info_50000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'blas_src_info')
# Setting the type of the member 'section' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), blas_src_info_50000, 'section', str_49999)

# Assigning a Str to a Name (line 1803):
str_50001 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1803, 18), 'str', 'BLAS_SRC')
# Getting the type of 'blas_src_info'
blas_src_info_50002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'blas_src_info')
# Setting the type of the member 'dir_env_var' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), blas_src_info_50002, 'dir_env_var', str_50001)

# Assigning a Name to a Name (line 1804):
# Getting the type of 'BlasSrcNotFoundError' (line 1804)
BlasSrcNotFoundError_50003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1804, 20), 'BlasSrcNotFoundError')
# Getting the type of 'blas_src_info'
blas_src_info_50004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'blas_src_info')
# Setting the type of the member 'notfounderror' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), blas_src_info_50004, 'notfounderror', BlasSrcNotFoundError_50003)
# Declaration of the 'x11_info' class
# Getting the type of 'system_info' (line 1853)
system_info_50005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1853, 15), 'system_info')

class x11_info(system_info_50005, ):
    
    # Assigning a Str to a Name (line 1854):
    
    # Assigning a Name to a Name (line 1855):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1857, 4, False)
        # Assigning a type to the variable 'self' (line 1858)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1858, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'x11_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 1858)
        # Processing the call arguments (line 1858)
        # Getting the type of 'self' (line 1858)
        self_50008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1858, 29), 'self', False)
        # Processing the call keyword arguments (line 1858)
        # Getting the type of 'default_x11_lib_dirs' (line 1859)
        default_x11_lib_dirs_50009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1859, 46), 'default_x11_lib_dirs', False)
        keyword_50010 = default_x11_lib_dirs_50009
        # Getting the type of 'default_x11_include_dirs' (line 1860)
        default_x11_include_dirs_50011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1860, 50), 'default_x11_include_dirs', False)
        keyword_50012 = default_x11_include_dirs_50011
        kwargs_50013 = {'default_include_dirs': keyword_50012, 'default_lib_dirs': keyword_50010}
        # Getting the type of 'system_info' (line 1858)
        system_info_50006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1858, 8), 'system_info', False)
        # Obtaining the member '__init__' of a type (line 1858)
        init___50007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1858, 8), system_info_50006, '__init__')
        # Calling __init__(args, kwargs) (line 1858)
        init___call_result_50014 = invoke(stypy.reporting.localization.Localization(__file__, 1858, 8), init___50007, *[self_50008], **kwargs_50013)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def calc_info(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'calc_info'
        module_type_store = module_type_store.open_function_context('calc_info', 1862, 4, False)
        # Assigning a type to the variable 'self' (line 1863)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1863, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        x11_info.calc_info.__dict__.__setitem__('stypy_localization', localization)
        x11_info.calc_info.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        x11_info.calc_info.__dict__.__setitem__('stypy_type_store', module_type_store)
        x11_info.calc_info.__dict__.__setitem__('stypy_function_name', 'x11_info.calc_info')
        x11_info.calc_info.__dict__.__setitem__('stypy_param_names_list', [])
        x11_info.calc_info.__dict__.__setitem__('stypy_varargs_param_name', None)
        x11_info.calc_info.__dict__.__setitem__('stypy_kwargs_param_name', None)
        x11_info.calc_info.__dict__.__setitem__('stypy_call_defaults', defaults)
        x11_info.calc_info.__dict__.__setitem__('stypy_call_varargs', varargs)
        x11_info.calc_info.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        x11_info.calc_info.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'x11_info.calc_info', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'calc_info', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'calc_info(...)' code ##################

        
        
        # Getting the type of 'sys' (line 1863)
        sys_50015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1863, 11), 'sys')
        # Obtaining the member 'platform' of a type (line 1863)
        platform_50016 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1863, 11), sys_50015, 'platform')
        
        # Obtaining an instance of the builtin type 'list' (line 1863)
        list_50017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1863, 28), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1863)
        # Adding element type (line 1863)
        str_50018 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1863, 29), 'str', 'win32')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1863, 28), list_50017, str_50018)
        
        # Applying the binary operator 'in' (line 1863)
        result_contains_50019 = python_operator(stypy.reporting.localization.Localization(__file__, 1863, 11), 'in', platform_50016, list_50017)
        
        # Testing the type of an if condition (line 1863)
        if_condition_50020 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1863, 8), result_contains_50019)
        # Assigning a type to the variable 'if_condition_50020' (line 1863)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1863, 8), 'if_condition_50020', if_condition_50020)
        # SSA begins for if statement (line 1863)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1864)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1864, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1863)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1865):
        
        # Assigning a Call to a Name (line 1865):
        
        # Call to get_lib_dirs(...): (line 1865)
        # Processing the call keyword arguments (line 1865)
        kwargs_50023 = {}
        # Getting the type of 'self' (line 1865)
        self_50021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 19), 'self', False)
        # Obtaining the member 'get_lib_dirs' of a type (line 1865)
        get_lib_dirs_50022 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1865, 19), self_50021, 'get_lib_dirs')
        # Calling get_lib_dirs(args, kwargs) (line 1865)
        get_lib_dirs_call_result_50024 = invoke(stypy.reporting.localization.Localization(__file__, 1865, 19), get_lib_dirs_50022, *[], **kwargs_50023)
        
        # Assigning a type to the variable 'lib_dirs' (line 1865)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1865, 8), 'lib_dirs', get_lib_dirs_call_result_50024)
        
        # Assigning a Call to a Name (line 1866):
        
        # Assigning a Call to a Name (line 1866):
        
        # Call to get_include_dirs(...): (line 1866)
        # Processing the call keyword arguments (line 1866)
        kwargs_50027 = {}
        # Getting the type of 'self' (line 1866)
        self_50025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 23), 'self', False)
        # Obtaining the member 'get_include_dirs' of a type (line 1866)
        get_include_dirs_50026 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1866, 23), self_50025, 'get_include_dirs')
        # Calling get_include_dirs(args, kwargs) (line 1866)
        get_include_dirs_call_result_50028 = invoke(stypy.reporting.localization.Localization(__file__, 1866, 23), get_include_dirs_50026, *[], **kwargs_50027)
        
        # Assigning a type to the variable 'include_dirs' (line 1866)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1866, 8), 'include_dirs', get_include_dirs_call_result_50028)
        
        # Assigning a Call to a Name (line 1867):
        
        # Assigning a Call to a Name (line 1867):
        
        # Call to get_libs(...): (line 1867)
        # Processing the call arguments (line 1867)
        str_50031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1867, 33), 'str', 'x11_libs')
        
        # Obtaining an instance of the builtin type 'list' (line 1867)
        list_50032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1867, 45), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1867)
        # Adding element type (line 1867)
        str_50033 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1867, 46), 'str', 'X11')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1867, 45), list_50032, str_50033)
        
        # Processing the call keyword arguments (line 1867)
        kwargs_50034 = {}
        # Getting the type of 'self' (line 1867)
        self_50029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1867, 19), 'self', False)
        # Obtaining the member 'get_libs' of a type (line 1867)
        get_libs_50030 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1867, 19), self_50029, 'get_libs')
        # Calling get_libs(args, kwargs) (line 1867)
        get_libs_call_result_50035 = invoke(stypy.reporting.localization.Localization(__file__, 1867, 19), get_libs_50030, *[str_50031, list_50032], **kwargs_50034)
        
        # Assigning a type to the variable 'x11_libs' (line 1867)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1867, 8), 'x11_libs', get_libs_call_result_50035)
        
        # Assigning a Call to a Name (line 1868):
        
        # Assigning a Call to a Name (line 1868):
        
        # Call to check_libs(...): (line 1868)
        # Processing the call arguments (line 1868)
        # Getting the type of 'lib_dirs' (line 1868)
        lib_dirs_50038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 31), 'lib_dirs', False)
        # Getting the type of 'x11_libs' (line 1868)
        x11_libs_50039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 41), 'x11_libs', False)
        
        # Obtaining an instance of the builtin type 'list' (line 1868)
        list_50040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1868, 51), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1868)
        
        # Processing the call keyword arguments (line 1868)
        kwargs_50041 = {}
        # Getting the type of 'self' (line 1868)
        self_50036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 15), 'self', False)
        # Obtaining the member 'check_libs' of a type (line 1868)
        check_libs_50037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1868, 15), self_50036, 'check_libs')
        # Calling check_libs(args, kwargs) (line 1868)
        check_libs_call_result_50042 = invoke(stypy.reporting.localization.Localization(__file__, 1868, 15), check_libs_50037, *[lib_dirs_50038, x11_libs_50039, list_50040], **kwargs_50041)
        
        # Assigning a type to the variable 'info' (line 1868)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1868, 8), 'info', check_libs_call_result_50042)
        
        # Type idiom detected: calculating its left and rigth part (line 1869)
        # Getting the type of 'info' (line 1869)
        info_50043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 11), 'info')
        # Getting the type of 'None' (line 1869)
        None_50044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 19), 'None')
        
        (may_be_50045, more_types_in_union_50046) = may_be_none(info_50043, None_50044)

        if may_be_50045:

            if more_types_in_union_50046:
                # Runtime conditional SSA (line 1869)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'stypy_return_type' (line 1870)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1870, 12), 'stypy_return_type', types.NoneType)

            if more_types_in_union_50046:
                # SSA join for if statement (line 1869)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Name (line 1871):
        
        # Assigning a Name to a Name (line 1871):
        # Getting the type of 'None' (line 1871)
        None_50047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 18), 'None')
        # Assigning a type to the variable 'inc_dir' (line 1871)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1871, 8), 'inc_dir', None_50047)
        
        # Getting the type of 'include_dirs' (line 1872)
        include_dirs_50048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1872, 17), 'include_dirs')
        # Testing the type of a for loop iterable (line 1872)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1872, 8), include_dirs_50048)
        # Getting the type of the for loop variable (line 1872)
        for_loop_var_50049 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1872, 8), include_dirs_50048)
        # Assigning a type to the variable 'd' (line 1872)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1872, 8), 'd', for_loop_var_50049)
        # SSA begins for a for statement (line 1872)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to combine_paths(...): (line 1873)
        # Processing the call arguments (line 1873)
        # Getting the type of 'd' (line 1873)
        d_50052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1873, 34), 'd', False)
        str_50053 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1873, 37), 'str', 'X11/X.h')
        # Processing the call keyword arguments (line 1873)
        kwargs_50054 = {}
        # Getting the type of 'self' (line 1873)
        self_50050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1873, 15), 'self', False)
        # Obtaining the member 'combine_paths' of a type (line 1873)
        combine_paths_50051 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1873, 15), self_50050, 'combine_paths')
        # Calling combine_paths(args, kwargs) (line 1873)
        combine_paths_call_result_50055 = invoke(stypy.reporting.localization.Localization(__file__, 1873, 15), combine_paths_50051, *[d_50052, str_50053], **kwargs_50054)
        
        # Testing the type of an if condition (line 1873)
        if_condition_50056 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1873, 12), combine_paths_call_result_50055)
        # Assigning a type to the variable 'if_condition_50056' (line 1873)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1873, 12), 'if_condition_50056', if_condition_50056)
        # SSA begins for if statement (line 1873)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1874):
        
        # Assigning a Name to a Name (line 1874):
        # Getting the type of 'd' (line 1874)
        d_50057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1874, 26), 'd')
        # Assigning a type to the variable 'inc_dir' (line 1874)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1874, 16), 'inc_dir', d_50057)
        # SSA join for if statement (line 1873)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 1876)
        # Getting the type of 'inc_dir' (line 1876)
        inc_dir_50058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1876, 8), 'inc_dir')
        # Getting the type of 'None' (line 1876)
        None_50059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1876, 26), 'None')
        
        (may_be_50060, more_types_in_union_50061) = may_not_be_none(inc_dir_50058, None_50059)

        if may_be_50060:

            if more_types_in_union_50061:
                # Runtime conditional SSA (line 1876)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to dict_append(...): (line 1877)
            # Processing the call arguments (line 1877)
            # Getting the type of 'info' (line 1877)
            info_50063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 24), 'info', False)
            # Processing the call keyword arguments (line 1877)
            
            # Obtaining an instance of the builtin type 'list' (line 1877)
            list_50064 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1877, 43), 'list')
            # Adding type elements to the builtin type 'list' instance (line 1877)
            # Adding element type (line 1877)
            # Getting the type of 'inc_dir' (line 1877)
            inc_dir_50065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 44), 'inc_dir', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1877, 43), list_50064, inc_dir_50065)
            
            keyword_50066 = list_50064
            kwargs_50067 = {'include_dirs': keyword_50066}
            # Getting the type of 'dict_append' (line 1877)
            dict_append_50062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 12), 'dict_append', False)
            # Calling dict_append(args, kwargs) (line 1877)
            dict_append_call_result_50068 = invoke(stypy.reporting.localization.Localization(__file__, 1877, 12), dict_append_50062, *[info_50063], **kwargs_50067)
            

            if more_types_in_union_50061:
                # SSA join for if statement (line 1876)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to set_info(...): (line 1878)
        # Processing the call keyword arguments (line 1878)
        # Getting the type of 'info' (line 1878)
        info_50071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 24), 'info', False)
        kwargs_50072 = {'info_50071': info_50071}
        # Getting the type of 'self' (line 1878)
        self_50069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 8), 'self', False)
        # Obtaining the member 'set_info' of a type (line 1878)
        set_info_50070 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1878, 8), self_50069, 'set_info')
        # Calling set_info(args, kwargs) (line 1878)
        set_info_call_result_50073 = invoke(stypy.reporting.localization.Localization(__file__, 1878, 8), set_info_50070, *[], **kwargs_50072)
        
        
        # ################# End of 'calc_info(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'calc_info' in the type store
        # Getting the type of 'stypy_return_type' (line 1862)
        stypy_return_type_50074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1862, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_50074)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'calc_info'
        return stypy_return_type_50074


# Assigning a type to the variable 'x11_info' (line 1853)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1853, 0), 'x11_info', x11_info)

# Assigning a Str to a Name (line 1854):
str_50075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1854, 14), 'str', 'x11')
# Getting the type of 'x11_info'
x11_info_50076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'x11_info')
# Setting the type of the member 'section' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), x11_info_50076, 'section', str_50075)

# Assigning a Name to a Name (line 1855):
# Getting the type of 'X11NotFoundError' (line 1855)
X11NotFoundError_50077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1855, 20), 'X11NotFoundError')
# Getting the type of 'x11_info'
x11_info_50078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'x11_info')
# Setting the type of the member 'notfounderror' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), x11_info_50078, 'notfounderror', X11NotFoundError_50077)
# Declaration of the '_numpy_info' class
# Getting the type of 'system_info' (line 1881)
system_info_50079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1881, 18), 'system_info')

class _numpy_info(system_info_50079, ):
    
    # Assigning a Str to a Name (line 1882):
    
    # Assigning a Str to a Name (line 1883):
    
    # Assigning a Name to a Name (line 1884):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1886, 4, False)
        # Assigning a type to the variable 'self' (line 1887)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1887, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_numpy_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a List to a Name (line 1887):
        
        # Assigning a List to a Name (line 1887):
        
        # Obtaining an instance of the builtin type 'list' (line 1887)
        list_50080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1887, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1887)
        
        # Assigning a type to the variable 'include_dirs' (line 1887)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1887, 8), 'include_dirs', list_50080)
        
        
        # SSA begins for try-except statement (line 1888)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 1889):
        
        # Assigning a Call to a Name (line 1889):
        
        # Call to __import__(...): (line 1889)
        # Processing the call arguments (line 1889)
        # Getting the type of 'self' (line 1889)
        self_50082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 32), 'self', False)
        # Obtaining the member 'modulename' of a type (line 1889)
        modulename_50083 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1889, 32), self_50082, 'modulename')
        # Processing the call keyword arguments (line 1889)
        kwargs_50084 = {}
        # Getting the type of '__import__' (line 1889)
        import___50081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 21), '__import__', False)
        # Calling __import__(args, kwargs) (line 1889)
        import___call_result_50085 = invoke(stypy.reporting.localization.Localization(__file__, 1889, 21), import___50081, *[modulename_50083], **kwargs_50084)
        
        # Assigning a type to the variable 'module' (line 1889)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1889, 12), 'module', import___call_result_50085)
        
        # Assigning a List to a Name (line 1890):
        
        # Assigning a List to a Name (line 1890):
        
        # Obtaining an instance of the builtin type 'list' (line 1890)
        list_50086 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1890, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1890)
        
        # Assigning a type to the variable 'prefix' (line 1890)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1890, 12), 'prefix', list_50086)
        
        
        # Call to split(...): (line 1891)
        # Processing the call arguments (line 1891)
        # Getting the type of 'os' (line 1891)
        os_50090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1891, 46), 'os', False)
        # Obtaining the member 'sep' of a type (line 1891)
        sep_50091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1891, 46), os_50090, 'sep')
        # Processing the call keyword arguments (line 1891)
        kwargs_50092 = {}
        # Getting the type of 'module' (line 1891)
        module_50087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1891, 24), 'module', False)
        # Obtaining the member '__file__' of a type (line 1891)
        file___50088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1891, 24), module_50087, '__file__')
        # Obtaining the member 'split' of a type (line 1891)
        split_50089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1891, 24), file___50088, 'split')
        # Calling split(args, kwargs) (line 1891)
        split_call_result_50093 = invoke(stypy.reporting.localization.Localization(__file__, 1891, 24), split_50089, *[sep_50091], **kwargs_50092)
        
        # Testing the type of a for loop iterable (line 1891)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1891, 12), split_call_result_50093)
        # Getting the type of the for loop variable (line 1891)
        for_loop_var_50094 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1891, 12), split_call_result_50093)
        # Assigning a type to the variable 'name' (line 1891)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1891, 12), 'name', for_loop_var_50094)
        # SSA begins for a for statement (line 1891)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'name' (line 1892)
        name_50095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 19), 'name')
        str_50096 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1892, 27), 'str', 'lib')
        # Applying the binary operator '==' (line 1892)
        result_eq_50097 = python_operator(stypy.reporting.localization.Localization(__file__, 1892, 19), '==', name_50095, str_50096)
        
        # Testing the type of an if condition (line 1892)
        if_condition_50098 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1892, 16), result_eq_50097)
        # Assigning a type to the variable 'if_condition_50098' (line 1892)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1892, 16), 'if_condition_50098', if_condition_50098)
        # SSA begins for if statement (line 1892)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA join for if statement (line 1892)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to append(...): (line 1894)
        # Processing the call arguments (line 1894)
        # Getting the type of 'name' (line 1894)
        name_50101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1894, 30), 'name', False)
        # Processing the call keyword arguments (line 1894)
        kwargs_50102 = {}
        # Getting the type of 'prefix' (line 1894)
        prefix_50099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1894, 16), 'prefix', False)
        # Obtaining the member 'append' of a type (line 1894)
        append_50100 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1894, 16), prefix_50099, 'append')
        # Calling append(args, kwargs) (line 1894)
        append_call_result_50103 = invoke(stypy.reporting.localization.Localization(__file__, 1894, 16), append_50100, *[name_50101], **kwargs_50102)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # SSA begins for try-except statement (line 1898)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to append(...): (line 1899)
        # Processing the call arguments (line 1899)
        
        # Call to (...): (line 1899)
        # Processing the call keyword arguments (line 1899)
        kwargs_50111 = {}
        
        # Call to getattr(...): (line 1899)
        # Processing the call arguments (line 1899)
        # Getting the type of 'module' (line 1899)
        module_50107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1899, 44), 'module', False)
        str_50108 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1899, 52), 'str', 'get_include')
        # Processing the call keyword arguments (line 1899)
        kwargs_50109 = {}
        # Getting the type of 'getattr' (line 1899)
        getattr_50106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1899, 36), 'getattr', False)
        # Calling getattr(args, kwargs) (line 1899)
        getattr_call_result_50110 = invoke(stypy.reporting.localization.Localization(__file__, 1899, 36), getattr_50106, *[module_50107, str_50108], **kwargs_50109)
        
        # Calling (args, kwargs) (line 1899)
        _call_result_50112 = invoke(stypy.reporting.localization.Localization(__file__, 1899, 36), getattr_call_result_50110, *[], **kwargs_50111)
        
        # Processing the call keyword arguments (line 1899)
        kwargs_50113 = {}
        # Getting the type of 'include_dirs' (line 1899)
        include_dirs_50104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1899, 16), 'include_dirs', False)
        # Obtaining the member 'append' of a type (line 1899)
        append_50105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1899, 16), include_dirs_50104, 'append')
        # Calling append(args, kwargs) (line 1899)
        append_call_result_50114 = invoke(stypy.reporting.localization.Localization(__file__, 1899, 16), append_50105, *[_call_result_50112], **kwargs_50113)
        
        # SSA branch for the except part of a try statement (line 1898)
        # SSA branch for the except 'AttributeError' branch of a try statement (line 1898)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 1898)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to append(...): (line 1903)
        # Processing the call arguments (line 1903)
        
        # Call to get_python_inc(...): (line 1903)
        # Processing the call keyword arguments (line 1903)
        
        # Call to join(...): (line 1904)
        # Processing the call arguments (line 1904)
        # Getting the type of 'prefix' (line 1904)
        prefix_50123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1904, 59), 'prefix', False)
        # Processing the call keyword arguments (line 1904)
        kwargs_50124 = {}
        # Getting the type of 'os' (line 1904)
        os_50120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1904, 47), 'os', False)
        # Obtaining the member 'sep' of a type (line 1904)
        sep_50121 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1904, 47), os_50120, 'sep')
        # Obtaining the member 'join' of a type (line 1904)
        join_50122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1904, 47), sep_50121, 'join')
        # Calling join(args, kwargs) (line 1904)
        join_call_result_50125 = invoke(stypy.reporting.localization.Localization(__file__, 1904, 47), join_50122, *[prefix_50123], **kwargs_50124)
        
        keyword_50126 = join_call_result_50125
        kwargs_50127 = {'prefix': keyword_50126}
        # Getting the type of 'distutils' (line 1903)
        distutils_50117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1903, 32), 'distutils', False)
        # Obtaining the member 'sysconfig' of a type (line 1903)
        sysconfig_50118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1903, 32), distutils_50117, 'sysconfig')
        # Obtaining the member 'get_python_inc' of a type (line 1903)
        get_python_inc_50119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1903, 32), sysconfig_50118, 'get_python_inc')
        # Calling get_python_inc(args, kwargs) (line 1903)
        get_python_inc_call_result_50128 = invoke(stypy.reporting.localization.Localization(__file__, 1903, 32), get_python_inc_50119, *[], **kwargs_50127)
        
        # Processing the call keyword arguments (line 1903)
        kwargs_50129 = {}
        # Getting the type of 'include_dirs' (line 1903)
        include_dirs_50115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1903, 12), 'include_dirs', False)
        # Obtaining the member 'append' of a type (line 1903)
        append_50116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1903, 12), include_dirs_50115, 'append')
        # Calling append(args, kwargs) (line 1903)
        append_call_result_50130 = invoke(stypy.reporting.localization.Localization(__file__, 1903, 12), append_50116, *[get_python_inc_call_result_50128], **kwargs_50129)
        
        # SSA branch for the except part of a try statement (line 1888)
        # SSA branch for the except 'ImportError' branch of a try statement (line 1888)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 1888)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1907):
        
        # Assigning a Call to a Name (line 1907):
        
        # Call to get_python_inc(...): (line 1907)
        # Processing the call keyword arguments (line 1907)
        kwargs_50134 = {}
        # Getting the type of 'distutils' (line 1907)
        distutils_50131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1907, 22), 'distutils', False)
        # Obtaining the member 'sysconfig' of a type (line 1907)
        sysconfig_50132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1907, 22), distutils_50131, 'sysconfig')
        # Obtaining the member 'get_python_inc' of a type (line 1907)
        get_python_inc_50133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1907, 22), sysconfig_50132, 'get_python_inc')
        # Calling get_python_inc(args, kwargs) (line 1907)
        get_python_inc_call_result_50135 = invoke(stypy.reporting.localization.Localization(__file__, 1907, 22), get_python_inc_50133, *[], **kwargs_50134)
        
        # Assigning a type to the variable 'py_incl_dir' (line 1907)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1907, 8), 'py_incl_dir', get_python_inc_call_result_50135)
        
        # Call to append(...): (line 1908)
        # Processing the call arguments (line 1908)
        # Getting the type of 'py_incl_dir' (line 1908)
        py_incl_dir_50138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1908, 28), 'py_incl_dir', False)
        # Processing the call keyword arguments (line 1908)
        kwargs_50139 = {}
        # Getting the type of 'include_dirs' (line 1908)
        include_dirs_50136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1908, 8), 'include_dirs', False)
        # Obtaining the member 'append' of a type (line 1908)
        append_50137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1908, 8), include_dirs_50136, 'append')
        # Calling append(args, kwargs) (line 1908)
        append_call_result_50140 = invoke(stypy.reporting.localization.Localization(__file__, 1908, 8), append_50137, *[py_incl_dir_50138], **kwargs_50139)
        
        
        # Assigning a Call to a Name (line 1909):
        
        # Assigning a Call to a Name (line 1909):
        
        # Call to get_python_inc(...): (line 1909)
        # Processing the call keyword arguments (line 1909)
        # Getting the type of 'True' (line 1909)
        True_50144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1909, 72), 'True', False)
        keyword_50145 = True_50144
        kwargs_50146 = {'plat_specific': keyword_50145}
        # Getting the type of 'distutils' (line 1909)
        distutils_50141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1909, 23), 'distutils', False)
        # Obtaining the member 'sysconfig' of a type (line 1909)
        sysconfig_50142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1909, 23), distutils_50141, 'sysconfig')
        # Obtaining the member 'get_python_inc' of a type (line 1909)
        get_python_inc_50143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1909, 23), sysconfig_50142, 'get_python_inc')
        # Calling get_python_inc(args, kwargs) (line 1909)
        get_python_inc_call_result_50147 = invoke(stypy.reporting.localization.Localization(__file__, 1909, 23), get_python_inc_50143, *[], **kwargs_50146)
        
        # Assigning a type to the variable 'py_pincl_dir' (line 1909)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1909, 8), 'py_pincl_dir', get_python_inc_call_result_50147)
        
        
        # Getting the type of 'py_pincl_dir' (line 1910)
        py_pincl_dir_50148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1910, 11), 'py_pincl_dir')
        # Getting the type of 'include_dirs' (line 1910)
        include_dirs_50149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1910, 31), 'include_dirs')
        # Applying the binary operator 'notin' (line 1910)
        result_contains_50150 = python_operator(stypy.reporting.localization.Localization(__file__, 1910, 11), 'notin', py_pincl_dir_50148, include_dirs_50149)
        
        # Testing the type of an if condition (line 1910)
        if_condition_50151 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1910, 8), result_contains_50150)
        # Assigning a type to the variable 'if_condition_50151' (line 1910)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1910, 8), 'if_condition_50151', if_condition_50151)
        # SSA begins for if statement (line 1910)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 1911)
        # Processing the call arguments (line 1911)
        # Getting the type of 'py_pincl_dir' (line 1911)
        py_pincl_dir_50154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1911, 32), 'py_pincl_dir', False)
        # Processing the call keyword arguments (line 1911)
        kwargs_50155 = {}
        # Getting the type of 'include_dirs' (line 1911)
        include_dirs_50152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1911, 12), 'include_dirs', False)
        # Obtaining the member 'append' of a type (line 1911)
        append_50153 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1911, 12), include_dirs_50152, 'append')
        # Calling append(args, kwargs) (line 1911)
        append_call_result_50156 = invoke(stypy.reporting.localization.Localization(__file__, 1911, 12), append_50153, *[py_pincl_dir_50154], **kwargs_50155)
        
        # SSA join for if statement (line 1910)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'default_include_dirs' (line 1912)
        default_include_dirs_50157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1912, 17), 'default_include_dirs')
        # Testing the type of a for loop iterable (line 1912)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1912, 8), default_include_dirs_50157)
        # Getting the type of the for loop variable (line 1912)
        for_loop_var_50158 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1912, 8), default_include_dirs_50157)
        # Assigning a type to the variable 'd' (line 1912)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1912, 8), 'd', for_loop_var_50158)
        # SSA begins for a for statement (line 1912)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 1913):
        
        # Assigning a Call to a Name (line 1913):
        
        # Call to join(...): (line 1913)
        # Processing the call arguments (line 1913)
        # Getting the type of 'd' (line 1913)
        d_50162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1913, 29), 'd', False)
        
        # Call to basename(...): (line 1913)
        # Processing the call arguments (line 1913)
        # Getting the type of 'py_incl_dir' (line 1913)
        py_incl_dir_50166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1913, 49), 'py_incl_dir', False)
        # Processing the call keyword arguments (line 1913)
        kwargs_50167 = {}
        # Getting the type of 'os' (line 1913)
        os_50163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1913, 32), 'os', False)
        # Obtaining the member 'path' of a type (line 1913)
        path_50164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1913, 32), os_50163, 'path')
        # Obtaining the member 'basename' of a type (line 1913)
        basename_50165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1913, 32), path_50164, 'basename')
        # Calling basename(args, kwargs) (line 1913)
        basename_call_result_50168 = invoke(stypy.reporting.localization.Localization(__file__, 1913, 32), basename_50165, *[py_incl_dir_50166], **kwargs_50167)
        
        # Processing the call keyword arguments (line 1913)
        kwargs_50169 = {}
        # Getting the type of 'os' (line 1913)
        os_50159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1913, 16), 'os', False)
        # Obtaining the member 'path' of a type (line 1913)
        path_50160 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1913, 16), os_50159, 'path')
        # Obtaining the member 'join' of a type (line 1913)
        join_50161 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1913, 16), path_50160, 'join')
        # Calling join(args, kwargs) (line 1913)
        join_call_result_50170 = invoke(stypy.reporting.localization.Localization(__file__, 1913, 16), join_50161, *[d_50162, basename_call_result_50168], **kwargs_50169)
        
        # Assigning a type to the variable 'd' (line 1913)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1913, 12), 'd', join_call_result_50170)
        
        
        # Getting the type of 'd' (line 1914)
        d_50171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 15), 'd')
        # Getting the type of 'include_dirs' (line 1914)
        include_dirs_50172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1914, 24), 'include_dirs')
        # Applying the binary operator 'notin' (line 1914)
        result_contains_50173 = python_operator(stypy.reporting.localization.Localization(__file__, 1914, 15), 'notin', d_50171, include_dirs_50172)
        
        # Testing the type of an if condition (line 1914)
        if_condition_50174 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1914, 12), result_contains_50173)
        # Assigning a type to the variable 'if_condition_50174' (line 1914)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1914, 12), 'if_condition_50174', if_condition_50174)
        # SSA begins for if statement (line 1914)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 1915)
        # Processing the call arguments (line 1915)
        # Getting the type of 'd' (line 1915)
        d_50177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1915, 36), 'd', False)
        # Processing the call keyword arguments (line 1915)
        kwargs_50178 = {}
        # Getting the type of 'include_dirs' (line 1915)
        include_dirs_50175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1915, 16), 'include_dirs', False)
        # Obtaining the member 'append' of a type (line 1915)
        append_50176 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1915, 16), include_dirs_50175, 'append')
        # Calling append(args, kwargs) (line 1915)
        append_call_result_50179 = invoke(stypy.reporting.localization.Localization(__file__, 1915, 16), append_50176, *[d_50177], **kwargs_50178)
        
        # SSA join for if statement (line 1914)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to __init__(...): (line 1916)
        # Processing the call arguments (line 1916)
        # Getting the type of 'self' (line 1916)
        self_50182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1916, 29), 'self', False)
        # Processing the call keyword arguments (line 1916)
        
        # Obtaining an instance of the builtin type 'list' (line 1917)
        list_50183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1917, 46), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1917)
        
        keyword_50184 = list_50183
        # Getting the type of 'include_dirs' (line 1918)
        include_dirs_50185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1918, 50), 'include_dirs', False)
        keyword_50186 = include_dirs_50185
        kwargs_50187 = {'default_include_dirs': keyword_50186, 'default_lib_dirs': keyword_50184}
        # Getting the type of 'system_info' (line 1916)
        system_info_50180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1916, 8), 'system_info', False)
        # Obtaining the member '__init__' of a type (line 1916)
        init___50181 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1916, 8), system_info_50180, '__init__')
        # Calling __init__(args, kwargs) (line 1916)
        init___call_result_50188 = invoke(stypy.reporting.localization.Localization(__file__, 1916, 8), init___50181, *[self_50182], **kwargs_50187)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def calc_info(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'calc_info'
        module_type_store = module_type_store.open_function_context('calc_info', 1920, 4, False)
        # Assigning a type to the variable 'self' (line 1921)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1921, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _numpy_info.calc_info.__dict__.__setitem__('stypy_localization', localization)
        _numpy_info.calc_info.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _numpy_info.calc_info.__dict__.__setitem__('stypy_type_store', module_type_store)
        _numpy_info.calc_info.__dict__.__setitem__('stypy_function_name', '_numpy_info.calc_info')
        _numpy_info.calc_info.__dict__.__setitem__('stypy_param_names_list', [])
        _numpy_info.calc_info.__dict__.__setitem__('stypy_varargs_param_name', None)
        _numpy_info.calc_info.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _numpy_info.calc_info.__dict__.__setitem__('stypy_call_defaults', defaults)
        _numpy_info.calc_info.__dict__.__setitem__('stypy_call_varargs', varargs)
        _numpy_info.calc_info.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _numpy_info.calc_info.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_numpy_info.calc_info', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'calc_info', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'calc_info(...)' code ##################

        
        
        # SSA begins for try-except statement (line 1921)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 1922):
        
        # Assigning a Call to a Name (line 1922):
        
        # Call to __import__(...): (line 1922)
        # Processing the call arguments (line 1922)
        # Getting the type of 'self' (line 1922)
        self_50190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 32), 'self', False)
        # Obtaining the member 'modulename' of a type (line 1922)
        modulename_50191 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1922, 32), self_50190, 'modulename')
        # Processing the call keyword arguments (line 1922)
        kwargs_50192 = {}
        # Getting the type of '__import__' (line 1922)
        import___50189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 21), '__import__', False)
        # Calling __import__(args, kwargs) (line 1922)
        import___call_result_50193 = invoke(stypy.reporting.localization.Localization(__file__, 1922, 21), import___50189, *[modulename_50191], **kwargs_50192)
        
        # Assigning a type to the variable 'module' (line 1922)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1922, 12), 'module', import___call_result_50193)
        # SSA branch for the except part of a try statement (line 1921)
        # SSA branch for the except 'ImportError' branch of a try statement (line 1921)
        module_type_store.open_ssa_branch('except')
        # Assigning a type to the variable 'stypy_return_type' (line 1924)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1924, 12), 'stypy_return_type', types.NoneType)
        # SSA join for try-except statement (line 1921)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Dict to a Name (line 1925):
        
        # Assigning a Dict to a Name (line 1925):
        
        # Obtaining an instance of the builtin type 'dict' (line 1925)
        dict_50194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1925, 15), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 1925)
        
        # Assigning a type to the variable 'info' (line 1925)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1925, 8), 'info', dict_50194)
        
        # Assigning a List to a Name (line 1926):
        
        # Assigning a List to a Name (line 1926):
        
        # Obtaining an instance of the builtin type 'list' (line 1926)
        list_50195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1926, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1926)
        
        # Assigning a type to the variable 'macros' (line 1926)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1926, 8), 'macros', list_50195)
        
        
        # Obtaining an instance of the builtin type 'list' (line 1927)
        list_50196 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1927, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1927)
        # Adding element type (line 1927)
        str_50197 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1927, 18), 'str', '__version__')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1927, 17), list_50196, str_50197)
        # Adding element type (line 1927)
        str_50198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1927, 33), 'str', 'version')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1927, 17), list_50196, str_50198)
        
        # Testing the type of a for loop iterable (line 1927)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1927, 8), list_50196)
        # Getting the type of the for loop variable (line 1927)
        for_loop_var_50199 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1927, 8), list_50196)
        # Assigning a type to the variable 'v' (line 1927)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1927, 8), 'v', for_loop_var_50199)
        # SSA begins for a for statement (line 1927)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 1928):
        
        # Assigning a Call to a Name (line 1928):
        
        # Call to getattr(...): (line 1928)
        # Processing the call arguments (line 1928)
        # Getting the type of 'module' (line 1928)
        module_50201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1928, 26), 'module', False)
        # Getting the type of 'v' (line 1928)
        v_50202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1928, 34), 'v', False)
        # Getting the type of 'None' (line 1928)
        None_50203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1928, 37), 'None', False)
        # Processing the call keyword arguments (line 1928)
        kwargs_50204 = {}
        # Getting the type of 'getattr' (line 1928)
        getattr_50200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1928, 18), 'getattr', False)
        # Calling getattr(args, kwargs) (line 1928)
        getattr_call_result_50205 = invoke(stypy.reporting.localization.Localization(__file__, 1928, 18), getattr_50200, *[module_50201, v_50202, None_50203], **kwargs_50204)
        
        # Assigning a type to the variable 'vrs' (line 1928)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1928, 12), 'vrs', getattr_call_result_50205)
        
        # Type idiom detected: calculating its left and rigth part (line 1929)
        # Getting the type of 'vrs' (line 1929)
        vrs_50206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1929, 15), 'vrs')
        # Getting the type of 'None' (line 1929)
        None_50207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1929, 22), 'None')
        
        (may_be_50208, more_types_in_union_50209) = may_be_none(vrs_50206, None_50207)

        if may_be_50208:

            if more_types_in_union_50209:
                # Runtime conditional SSA (line 1929)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store


            if more_types_in_union_50209:
                # SSA join for if statement (line 1929)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a List to a Name (line 1931):
        
        # Assigning a List to a Name (line 1931):
        
        # Obtaining an instance of the builtin type 'list' (line 1931)
        list_50210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1931, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1931)
        # Adding element type (line 1931)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1931)
        tuple_50211 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1931, 23), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1931)
        # Adding element type (line 1931)
        
        # Call to upper(...): (line 1931)
        # Processing the call keyword arguments (line 1931)
        kwargs_50215 = {}
        # Getting the type of 'self' (line 1931)
        self_50212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1931, 23), 'self', False)
        # Obtaining the member 'modulename' of a type (line 1931)
        modulename_50213 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1931, 23), self_50212, 'modulename')
        # Obtaining the member 'upper' of a type (line 1931)
        upper_50214 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1931, 23), modulename_50213, 'upper')
        # Calling upper(args, kwargs) (line 1931)
        upper_call_result_50216 = invoke(stypy.reporting.localization.Localization(__file__, 1931, 23), upper_50214, *[], **kwargs_50215)
        
        str_50217 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1931, 49), 'str', '_VERSION')
        # Applying the binary operator '+' (line 1931)
        result_add_50218 = python_operator(stypy.reporting.localization.Localization(__file__, 1931, 23), '+', upper_call_result_50216, str_50217)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1931, 23), tuple_50211, result_add_50218)
        # Adding element type (line 1931)
        str_50219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1932, 22), 'str', '"\\"%s\\""')
        # Getting the type of 'vrs' (line 1932)
        vrs_50220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1932, 38), 'vrs')
        # Applying the binary operator '%' (line 1932)
        result_mod_50221 = python_operator(stypy.reporting.localization.Localization(__file__, 1932, 22), '%', str_50219, vrs_50220)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1931, 23), tuple_50211, result_mod_50221)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1931, 21), list_50210, tuple_50211)
        # Adding element type (line 1931)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1933)
        tuple_50222 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1933, 23), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1933)
        # Adding element type (line 1933)
        
        # Call to upper(...): (line 1933)
        # Processing the call keyword arguments (line 1933)
        kwargs_50226 = {}
        # Getting the type of 'self' (line 1933)
        self_50223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1933, 23), 'self', False)
        # Obtaining the member 'modulename' of a type (line 1933)
        modulename_50224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1933, 23), self_50223, 'modulename')
        # Obtaining the member 'upper' of a type (line 1933)
        upper_50225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1933, 23), modulename_50224, 'upper')
        # Calling upper(args, kwargs) (line 1933)
        upper_call_result_50227 = invoke(stypy.reporting.localization.Localization(__file__, 1933, 23), upper_50225, *[], **kwargs_50226)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1933, 23), tuple_50222, upper_call_result_50227)
        # Adding element type (line 1933)
        # Getting the type of 'None' (line 1933)
        None_50228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1933, 48), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1933, 23), tuple_50222, None_50228)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1931, 21), list_50210, tuple_50222)
        
        # Assigning a type to the variable 'macros' (line 1931)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1931, 12), 'macros', list_50210)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to dict_append(...): (line 1935)
        # Processing the call arguments (line 1935)
        # Getting the type of 'info' (line 1935)
        info_50230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1935, 20), 'info', False)
        # Processing the call keyword arguments (line 1935)
        # Getting the type of 'macros' (line 1935)
        macros_50231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1935, 40), 'macros', False)
        keyword_50232 = macros_50231
        kwargs_50233 = {'define_macros': keyword_50232}
        # Getting the type of 'dict_append' (line 1935)
        dict_append_50229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1935, 8), 'dict_append', False)
        # Calling dict_append(args, kwargs) (line 1935)
        dict_append_call_result_50234 = invoke(stypy.reporting.localization.Localization(__file__, 1935, 8), dict_append_50229, *[info_50230], **kwargs_50233)
        
        
        # Assigning a Call to a Name (line 1936):
        
        # Assigning a Call to a Name (line 1936):
        
        # Call to get_include_dirs(...): (line 1936)
        # Processing the call keyword arguments (line 1936)
        kwargs_50237 = {}
        # Getting the type of 'self' (line 1936)
        self_50235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1936, 23), 'self', False)
        # Obtaining the member 'get_include_dirs' of a type (line 1936)
        get_include_dirs_50236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1936, 23), self_50235, 'get_include_dirs')
        # Calling get_include_dirs(args, kwargs) (line 1936)
        get_include_dirs_call_result_50238 = invoke(stypy.reporting.localization.Localization(__file__, 1936, 23), get_include_dirs_50236, *[], **kwargs_50237)
        
        # Assigning a type to the variable 'include_dirs' (line 1936)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1936, 8), 'include_dirs', get_include_dirs_call_result_50238)
        
        # Assigning a Name to a Name (line 1937):
        
        # Assigning a Name to a Name (line 1937):
        # Getting the type of 'None' (line 1937)
        None_50239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 18), 'None')
        # Assigning a type to the variable 'inc_dir' (line 1937)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1937, 8), 'inc_dir', None_50239)
        
        # Getting the type of 'include_dirs' (line 1938)
        include_dirs_50240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1938, 17), 'include_dirs')
        # Testing the type of a for loop iterable (line 1938)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1938, 8), include_dirs_50240)
        # Getting the type of the for loop variable (line 1938)
        for_loop_var_50241 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1938, 8), include_dirs_50240)
        # Assigning a type to the variable 'd' (line 1938)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1938, 8), 'd', for_loop_var_50241)
        # SSA begins for a for statement (line 1938)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to combine_paths(...): (line 1939)
        # Processing the call arguments (line 1939)
        # Getting the type of 'd' (line 1939)
        d_50244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 34), 'd', False)
        
        # Call to join(...): (line 1940)
        # Processing the call arguments (line 1940)
        # Getting the type of 'self' (line 1940)
        self_50248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1940, 47), 'self', False)
        # Obtaining the member 'modulename' of a type (line 1940)
        modulename_50249 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1940, 47), self_50248, 'modulename')
        str_50250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1941, 47), 'str', 'arrayobject.h')
        # Processing the call keyword arguments (line 1940)
        kwargs_50251 = {}
        # Getting the type of 'os' (line 1940)
        os_50245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1940, 34), 'os', False)
        # Obtaining the member 'path' of a type (line 1940)
        path_50246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1940, 34), os_50245, 'path')
        # Obtaining the member 'join' of a type (line 1940)
        join_50247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1940, 34), path_50246, 'join')
        # Calling join(args, kwargs) (line 1940)
        join_call_result_50252 = invoke(stypy.reporting.localization.Localization(__file__, 1940, 34), join_50247, *[modulename_50249, str_50250], **kwargs_50251)
        
        # Processing the call keyword arguments (line 1939)
        kwargs_50253 = {}
        # Getting the type of 'self' (line 1939)
        self_50242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 15), 'self', False)
        # Obtaining the member 'combine_paths' of a type (line 1939)
        combine_paths_50243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1939, 15), self_50242, 'combine_paths')
        # Calling combine_paths(args, kwargs) (line 1939)
        combine_paths_call_result_50254 = invoke(stypy.reporting.localization.Localization(__file__, 1939, 15), combine_paths_50243, *[d_50244, join_call_result_50252], **kwargs_50253)
        
        # Testing the type of an if condition (line 1939)
        if_condition_50255 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1939, 12), combine_paths_call_result_50254)
        # Assigning a type to the variable 'if_condition_50255' (line 1939)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1939, 12), 'if_condition_50255', if_condition_50255)
        # SSA begins for if statement (line 1939)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1942):
        
        # Assigning a Name to a Name (line 1942):
        # Getting the type of 'd' (line 1942)
        d_50256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1942, 26), 'd')
        # Assigning a type to the variable 'inc_dir' (line 1942)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1942, 16), 'inc_dir', d_50256)
        # SSA join for if statement (line 1939)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 1944)
        # Getting the type of 'inc_dir' (line 1944)
        inc_dir_50257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1944, 8), 'inc_dir')
        # Getting the type of 'None' (line 1944)
        None_50258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1944, 26), 'None')
        
        (may_be_50259, more_types_in_union_50260) = may_not_be_none(inc_dir_50257, None_50258)

        if may_be_50259:

            if more_types_in_union_50260:
                # Runtime conditional SSA (line 1944)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to dict_append(...): (line 1945)
            # Processing the call arguments (line 1945)
            # Getting the type of 'info' (line 1945)
            info_50262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1945, 24), 'info', False)
            # Processing the call keyword arguments (line 1945)
            
            # Obtaining an instance of the builtin type 'list' (line 1945)
            list_50263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1945, 43), 'list')
            # Adding type elements to the builtin type 'list' instance (line 1945)
            # Adding element type (line 1945)
            # Getting the type of 'inc_dir' (line 1945)
            inc_dir_50264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1945, 44), 'inc_dir', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1945, 43), list_50263, inc_dir_50264)
            
            keyword_50265 = list_50263
            kwargs_50266 = {'include_dirs': keyword_50265}
            # Getting the type of 'dict_append' (line 1945)
            dict_append_50261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1945, 12), 'dict_append', False)
            # Calling dict_append(args, kwargs) (line 1945)
            dict_append_call_result_50267 = invoke(stypy.reporting.localization.Localization(__file__, 1945, 12), dict_append_50261, *[info_50262], **kwargs_50266)
            

            if more_types_in_union_50260:
                # SSA join for if statement (line 1944)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Getting the type of 'info' (line 1946)
        info_50268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1946, 11), 'info')
        # Testing the type of an if condition (line 1946)
        if_condition_50269 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1946, 8), info_50268)
        # Assigning a type to the variable 'if_condition_50269' (line 1946)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1946, 8), 'if_condition_50269', if_condition_50269)
        # SSA begins for if statement (line 1946)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_info(...): (line 1947)
        # Processing the call keyword arguments (line 1947)
        # Getting the type of 'info' (line 1947)
        info_50272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1947, 28), 'info', False)
        kwargs_50273 = {'info_50272': info_50272}
        # Getting the type of 'self' (line 1947)
        self_50270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1947, 12), 'self', False)
        # Obtaining the member 'set_info' of a type (line 1947)
        set_info_50271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1947, 12), self_50270, 'set_info')
        # Calling set_info(args, kwargs) (line 1947)
        set_info_call_result_50274 = invoke(stypy.reporting.localization.Localization(__file__, 1947, 12), set_info_50271, *[], **kwargs_50273)
        
        # SSA join for if statement (line 1946)
        module_type_store = module_type_store.join_ssa_context()
        
        # Assigning a type to the variable 'stypy_return_type' (line 1948)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1948, 8), 'stypy_return_type', types.NoneType)
        
        # ################# End of 'calc_info(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'calc_info' in the type store
        # Getting the type of 'stypy_return_type' (line 1920)
        stypy_return_type_50275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1920, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_50275)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'calc_info'
        return stypy_return_type_50275


# Assigning a type to the variable '_numpy_info' (line 1881)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1881, 0), '_numpy_info', _numpy_info)

# Assigning a Str to a Name (line 1882):
str_50276 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1882, 14), 'str', 'Numeric')
# Getting the type of '_numpy_info'
_numpy_info_50277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_numpy_info')
# Setting the type of the member 'section' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _numpy_info_50277, 'section', str_50276)

# Assigning a Str to a Name (line 1883):
str_50278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1883, 17), 'str', 'Numeric')
# Getting the type of '_numpy_info'
_numpy_info_50279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_numpy_info')
# Setting the type of the member 'modulename' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _numpy_info_50279, 'modulename', str_50278)

# Assigning a Name to a Name (line 1884):
# Getting the type of 'NumericNotFoundError' (line 1884)
NumericNotFoundError_50280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1884, 20), 'NumericNotFoundError')
# Getting the type of '_numpy_info'
_numpy_info_50281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_numpy_info')
# Setting the type of the member 'notfounderror' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _numpy_info_50281, 'notfounderror', NumericNotFoundError_50280)
# Declaration of the 'numarray_info' class
# Getting the type of '_numpy_info' (line 1951)
_numpy_info_50282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1951, 20), '_numpy_info')

class numarray_info(_numpy_info_50282, ):
    
    # Assigning a Str to a Name (line 1952):
    
    # Assigning a Str to a Name (line 1953):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1951, 0, False)
        # Assigning a type to the variable 'self' (line 1952)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1952, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'numarray_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'numarray_info' (line 1951)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1951, 0), 'numarray_info', numarray_info)

# Assigning a Str to a Name (line 1952):
str_50283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1952, 14), 'str', 'numarray')
# Getting the type of 'numarray_info'
numarray_info_50284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'numarray_info')
# Setting the type of the member 'section' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), numarray_info_50284, 'section', str_50283)

# Assigning a Str to a Name (line 1953):
str_50285 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1953, 17), 'str', 'numarray')
# Getting the type of 'numarray_info'
numarray_info_50286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'numarray_info')
# Setting the type of the member 'modulename' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), numarray_info_50286, 'modulename', str_50285)
# Declaration of the 'Numeric_info' class
# Getting the type of '_numpy_info' (line 1956)
_numpy_info_50287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1956, 19), '_numpy_info')

class Numeric_info(_numpy_info_50287, ):
    
    # Assigning a Str to a Name (line 1957):
    
    # Assigning a Str to a Name (line 1958):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1956, 0, False)
        # Assigning a type to the variable 'self' (line 1957)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1957, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Numeric_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'Numeric_info' (line 1956)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1956, 0), 'Numeric_info', Numeric_info)

# Assigning a Str to a Name (line 1957):
str_50288 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1957, 14), 'str', 'Numeric')
# Getting the type of 'Numeric_info'
Numeric_info_50289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Numeric_info')
# Setting the type of the member 'section' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Numeric_info_50289, 'section', str_50288)

# Assigning a Str to a Name (line 1958):
str_50290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1958, 17), 'str', 'Numeric')
# Getting the type of 'Numeric_info'
Numeric_info_50291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Numeric_info')
# Setting the type of the member 'modulename' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Numeric_info_50291, 'modulename', str_50290)
# Declaration of the 'numpy_info' class
# Getting the type of '_numpy_info' (line 1961)
_numpy_info_50292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1961, 17), '_numpy_info')

class numpy_info(_numpy_info_50292, ):
    
    # Assigning a Str to a Name (line 1962):
    
    # Assigning a Str to a Name (line 1963):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1961, 0, False)
        # Assigning a type to the variable 'self' (line 1962)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1962, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'numpy_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'numpy_info' (line 1961)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1961, 0), 'numpy_info', numpy_info)

# Assigning a Str to a Name (line 1962):
str_50293 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1962, 14), 'str', 'numpy')
# Getting the type of 'numpy_info'
numpy_info_50294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'numpy_info')
# Setting the type of the member 'section' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), numpy_info_50294, 'section', str_50293)

# Assigning a Str to a Name (line 1963):
str_50295 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1963, 17), 'str', 'numpy')
# Getting the type of 'numpy_info'
numpy_info_50296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'numpy_info')
# Setting the type of the member 'modulename' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), numpy_info_50296, 'modulename', str_50295)
# Declaration of the 'numerix_info' class
# Getting the type of 'system_info' (line 1966)
system_info_50297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1966, 19), 'system_info')

class numerix_info(system_info_50297, ):
    
    # Assigning a Str to a Name (line 1967):

    @norecursion
    def calc_info(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'calc_info'
        module_type_store = module_type_store.open_function_context('calc_info', 1969, 4, False)
        # Assigning a type to the variable 'self' (line 1970)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1970, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        numerix_info.calc_info.__dict__.__setitem__('stypy_localization', localization)
        numerix_info.calc_info.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        numerix_info.calc_info.__dict__.__setitem__('stypy_type_store', module_type_store)
        numerix_info.calc_info.__dict__.__setitem__('stypy_function_name', 'numerix_info.calc_info')
        numerix_info.calc_info.__dict__.__setitem__('stypy_param_names_list', [])
        numerix_info.calc_info.__dict__.__setitem__('stypy_varargs_param_name', None)
        numerix_info.calc_info.__dict__.__setitem__('stypy_kwargs_param_name', None)
        numerix_info.calc_info.__dict__.__setitem__('stypy_call_defaults', defaults)
        numerix_info.calc_info.__dict__.__setitem__('stypy_call_varargs', varargs)
        numerix_info.calc_info.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        numerix_info.calc_info.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'numerix_info.calc_info', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'calc_info', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'calc_info(...)' code ##################

        
        # Assigning a Tuple to a Name (line 1970):
        
        # Assigning a Tuple to a Name (line 1970):
        
        # Obtaining an instance of the builtin type 'tuple' (line 1970)
        tuple_50298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1970, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1970)
        # Adding element type (line 1970)
        # Getting the type of 'None' (line 1970)
        None_50299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1970, 16), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1970, 16), tuple_50298, None_50299)
        # Adding element type (line 1970)
        # Getting the type of 'None' (line 1970)
        None_50300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1970, 22), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1970, 16), tuple_50298, None_50300)
        
        # Assigning a type to the variable 'which' (line 1970)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1970, 8), 'which', tuple_50298)
        
        
        # Call to getenv(...): (line 1971)
        # Processing the call arguments (line 1971)
        str_50303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1971, 21), 'str', 'NUMERIX')
        # Processing the call keyword arguments (line 1971)
        kwargs_50304 = {}
        # Getting the type of 'os' (line 1971)
        os_50301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1971, 11), 'os', False)
        # Obtaining the member 'getenv' of a type (line 1971)
        getenv_50302 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1971, 11), os_50301, 'getenv')
        # Calling getenv(args, kwargs) (line 1971)
        getenv_call_result_50305 = invoke(stypy.reporting.localization.Localization(__file__, 1971, 11), getenv_50302, *[str_50303], **kwargs_50304)
        
        # Testing the type of an if condition (line 1971)
        if_condition_50306 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1971, 8), getenv_call_result_50305)
        # Assigning a type to the variable 'if_condition_50306' (line 1971)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1971, 8), 'if_condition_50306', if_condition_50306)
        # SSA begins for if statement (line 1971)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Name (line 1972):
        
        # Assigning a Tuple to a Name (line 1972):
        
        # Obtaining an instance of the builtin type 'tuple' (line 1972)
        tuple_50307 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1972, 20), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1972)
        # Adding element type (line 1972)
        
        # Call to getenv(...): (line 1972)
        # Processing the call arguments (line 1972)
        str_50310 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1972, 30), 'str', 'NUMERIX')
        # Processing the call keyword arguments (line 1972)
        kwargs_50311 = {}
        # Getting the type of 'os' (line 1972)
        os_50308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 20), 'os', False)
        # Obtaining the member 'getenv' of a type (line 1972)
        getenv_50309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1972, 20), os_50308, 'getenv')
        # Calling getenv(args, kwargs) (line 1972)
        getenv_call_result_50312 = invoke(stypy.reporting.localization.Localization(__file__, 1972, 20), getenv_50309, *[str_50310], **kwargs_50311)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1972, 20), tuple_50307, getenv_call_result_50312)
        # Adding element type (line 1972)
        str_50313 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1972, 42), 'str', 'environment var')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1972, 20), tuple_50307, str_50313)
        
        # Assigning a type to the variable 'which' (line 1972)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1972, 12), 'which', tuple_50307)
        # SSA join for if statement (line 1971)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 1974)
        
        # Obtaining the type of the subscript
        int_50314 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1974, 17), 'int')
        # Getting the type of 'which' (line 1974)
        which_50315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1974, 11), 'which')
        # Obtaining the member '__getitem__' of a type (line 1974)
        getitem___50316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1974, 11), which_50315, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1974)
        subscript_call_result_50317 = invoke(stypy.reporting.localization.Localization(__file__, 1974, 11), getitem___50316, int_50314)
        
        # Getting the type of 'None' (line 1974)
        None_50318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1974, 23), 'None')
        
        (may_be_50319, more_types_in_union_50320) = may_be_none(subscript_call_result_50317, None_50318)

        if may_be_50319:

            if more_types_in_union_50320:
                # Runtime conditional SSA (line 1974)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Tuple to a Name (line 1975):
            
            # Assigning a Tuple to a Name (line 1975):
            
            # Obtaining an instance of the builtin type 'tuple' (line 1975)
            tuple_50321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1975, 20), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1975)
            # Adding element type (line 1975)
            str_50322 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1975, 20), 'str', 'numpy')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1975, 20), tuple_50321, str_50322)
            # Adding element type (line 1975)
            str_50323 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1975, 29), 'str', 'defaulted')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1975, 20), tuple_50321, str_50323)
            
            # Assigning a type to the variable 'which' (line 1975)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1975, 12), 'which', tuple_50321)
            
            
            # SSA begins for try-except statement (line 1976)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
            stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1977, 16))
            
            # 'import numpy' statement (line 1977)
            update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/distutils/')
            import_50324 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1977, 16), 'numpy')

            if (type(import_50324) is not StypyTypeError):

                if (import_50324 != 'pyd_module'):
                    __import__(import_50324)
                    sys_modules_50325 = sys.modules[import_50324]
                    import_module(stypy.reporting.localization.Localization(__file__, 1977, 16), 'numpy', sys_modules_50325.module_type_store, module_type_store)
                else:
                    import numpy

                    import_module(stypy.reporting.localization.Localization(__file__, 1977, 16), 'numpy', numpy, module_type_store)

            else:
                # Assigning a type to the variable 'numpy' (line 1977)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1977, 16), 'numpy', import_50324)

            remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/distutils/')
            
            
            # Assigning a Tuple to a Name (line 1978):
            
            # Assigning a Tuple to a Name (line 1978):
            
            # Obtaining an instance of the builtin type 'tuple' (line 1978)
            tuple_50326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1978, 24), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1978)
            # Adding element type (line 1978)
            str_50327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1978, 24), 'str', 'numpy')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1978, 24), tuple_50326, str_50327)
            # Adding element type (line 1978)
            str_50328 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1978, 33), 'str', 'defaulted')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1978, 24), tuple_50326, str_50328)
            
            # Assigning a type to the variable 'which' (line 1978)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1978, 16), 'which', tuple_50326)
            # SSA branch for the except part of a try statement (line 1976)
            # SSA branch for the except 'ImportError' branch of a try statement (line 1976)
            module_type_store.open_ssa_branch('except')
            
            # Assigning a Call to a Name (line 1980):
            
            # Assigning a Call to a Name (line 1980):
            
            # Call to str(...): (line 1980)
            # Processing the call arguments (line 1980)
            
            # Call to get_exception(...): (line 1980)
            # Processing the call keyword arguments (line 1980)
            kwargs_50331 = {}
            # Getting the type of 'get_exception' (line 1980)
            get_exception_50330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1980, 27), 'get_exception', False)
            # Calling get_exception(args, kwargs) (line 1980)
            get_exception_call_result_50332 = invoke(stypy.reporting.localization.Localization(__file__, 1980, 27), get_exception_50330, *[], **kwargs_50331)
            
            # Processing the call keyword arguments (line 1980)
            kwargs_50333 = {}
            # Getting the type of 'str' (line 1980)
            str_50329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1980, 23), 'str', False)
            # Calling str(args, kwargs) (line 1980)
            str_call_result_50334 = invoke(stypy.reporting.localization.Localization(__file__, 1980, 23), str_50329, *[get_exception_call_result_50332], **kwargs_50333)
            
            # Assigning a type to the variable 'msg1' (line 1980)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1980, 16), 'msg1', str_call_result_50334)
            
            
            # SSA begins for try-except statement (line 1981)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
            stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1982, 20))
            
            # 'import Numeric' statement (line 1982)
            update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/distutils/')
            import_50335 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1982, 20), 'Numeric')

            if (type(import_50335) is not StypyTypeError):

                if (import_50335 != 'pyd_module'):
                    __import__(import_50335)
                    sys_modules_50336 = sys.modules[import_50335]
                    import_module(stypy.reporting.localization.Localization(__file__, 1982, 20), 'Numeric', sys_modules_50336.module_type_store, module_type_store)
                else:
                    import Numeric

                    import_module(stypy.reporting.localization.Localization(__file__, 1982, 20), 'Numeric', Numeric, module_type_store)

            else:
                # Assigning a type to the variable 'Numeric' (line 1982)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1982, 20), 'Numeric', import_50335)

            remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/distutils/')
            
            
            # Assigning a Tuple to a Name (line 1983):
            
            # Assigning a Tuple to a Name (line 1983):
            
            # Obtaining an instance of the builtin type 'tuple' (line 1983)
            tuple_50337 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1983, 28), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1983)
            # Adding element type (line 1983)
            str_50338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1983, 28), 'str', 'numeric')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1983, 28), tuple_50337, str_50338)
            # Adding element type (line 1983)
            str_50339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1983, 39), 'str', 'defaulted')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1983, 28), tuple_50337, str_50339)
            
            # Assigning a type to the variable 'which' (line 1983)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1983, 20), 'which', tuple_50337)
            # SSA branch for the except part of a try statement (line 1981)
            # SSA branch for the except 'ImportError' branch of a try statement (line 1981)
            module_type_store.open_ssa_branch('except')
            
            # Assigning a Call to a Name (line 1985):
            
            # Assigning a Call to a Name (line 1985):
            
            # Call to str(...): (line 1985)
            # Processing the call arguments (line 1985)
            
            # Call to get_exception(...): (line 1985)
            # Processing the call keyword arguments (line 1985)
            kwargs_50342 = {}
            # Getting the type of 'get_exception' (line 1985)
            get_exception_50341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 31), 'get_exception', False)
            # Calling get_exception(args, kwargs) (line 1985)
            get_exception_call_result_50343 = invoke(stypy.reporting.localization.Localization(__file__, 1985, 31), get_exception_50341, *[], **kwargs_50342)
            
            # Processing the call keyword arguments (line 1985)
            kwargs_50344 = {}
            # Getting the type of 'str' (line 1985)
            str_50340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 27), 'str', False)
            # Calling str(args, kwargs) (line 1985)
            str_call_result_50345 = invoke(stypy.reporting.localization.Localization(__file__, 1985, 27), str_50340, *[get_exception_call_result_50343], **kwargs_50344)
            
            # Assigning a type to the variable 'msg2' (line 1985)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1985, 20), 'msg2', str_call_result_50345)
            
            
            # SSA begins for try-except statement (line 1986)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
            stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1987, 24))
            
            # 'import numarray' statement (line 1987)
            update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/distutils/')
            import_50346 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1987, 24), 'numarray')

            if (type(import_50346) is not StypyTypeError):

                if (import_50346 != 'pyd_module'):
                    __import__(import_50346)
                    sys_modules_50347 = sys.modules[import_50346]
                    import_module(stypy.reporting.localization.Localization(__file__, 1987, 24), 'numarray', sys_modules_50347.module_type_store, module_type_store)
                else:
                    import numarray

                    import_module(stypy.reporting.localization.Localization(__file__, 1987, 24), 'numarray', numarray, module_type_store)

            else:
                # Assigning a type to the variable 'numarray' (line 1987)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1987, 24), 'numarray', import_50346)

            remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/distutils/')
            
            
            # Assigning a Tuple to a Name (line 1988):
            
            # Assigning a Tuple to a Name (line 1988):
            
            # Obtaining an instance of the builtin type 'tuple' (line 1988)
            tuple_50348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1988, 32), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1988)
            # Adding element type (line 1988)
            str_50349 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1988, 32), 'str', 'numarray')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1988, 32), tuple_50348, str_50349)
            # Adding element type (line 1988)
            str_50350 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1988, 44), 'str', 'defaulted')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1988, 32), tuple_50348, str_50350)
            
            # Assigning a type to the variable 'which' (line 1988)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1988, 24), 'which', tuple_50348)
            # SSA branch for the except part of a try statement (line 1986)
            # SSA branch for the except 'ImportError' branch of a try statement (line 1986)
            module_type_store.open_ssa_branch('except')
            
            # Assigning a Call to a Name (line 1990):
            
            # Assigning a Call to a Name (line 1990):
            
            # Call to str(...): (line 1990)
            # Processing the call arguments (line 1990)
            
            # Call to get_exception(...): (line 1990)
            # Processing the call keyword arguments (line 1990)
            kwargs_50353 = {}
            # Getting the type of 'get_exception' (line 1990)
            get_exception_50352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1990, 35), 'get_exception', False)
            # Calling get_exception(args, kwargs) (line 1990)
            get_exception_call_result_50354 = invoke(stypy.reporting.localization.Localization(__file__, 1990, 35), get_exception_50352, *[], **kwargs_50353)
            
            # Processing the call keyword arguments (line 1990)
            kwargs_50355 = {}
            # Getting the type of 'str' (line 1990)
            str_50351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1990, 31), 'str', False)
            # Calling str(args, kwargs) (line 1990)
            str_call_result_50356 = invoke(stypy.reporting.localization.Localization(__file__, 1990, 31), str_50351, *[get_exception_call_result_50354], **kwargs_50355)
            
            # Assigning a type to the variable 'msg3' (line 1990)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1990, 24), 'msg3', str_call_result_50356)
            
            # Call to info(...): (line 1991)
            # Processing the call arguments (line 1991)
            # Getting the type of 'msg1' (line 1991)
            msg1_50359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 33), 'msg1', False)
            # Processing the call keyword arguments (line 1991)
            kwargs_50360 = {}
            # Getting the type of 'log' (line 1991)
            log_50357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 24), 'log', False)
            # Obtaining the member 'info' of a type (line 1991)
            info_50358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1991, 24), log_50357, 'info')
            # Calling info(args, kwargs) (line 1991)
            info_call_result_50361 = invoke(stypy.reporting.localization.Localization(__file__, 1991, 24), info_50358, *[msg1_50359], **kwargs_50360)
            
            
            # Call to info(...): (line 1992)
            # Processing the call arguments (line 1992)
            # Getting the type of 'msg2' (line 1992)
            msg2_50364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1992, 33), 'msg2', False)
            # Processing the call keyword arguments (line 1992)
            kwargs_50365 = {}
            # Getting the type of 'log' (line 1992)
            log_50362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1992, 24), 'log', False)
            # Obtaining the member 'info' of a type (line 1992)
            info_50363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1992, 24), log_50362, 'info')
            # Calling info(args, kwargs) (line 1992)
            info_call_result_50366 = invoke(stypy.reporting.localization.Localization(__file__, 1992, 24), info_50363, *[msg2_50364], **kwargs_50365)
            
            
            # Call to info(...): (line 1993)
            # Processing the call arguments (line 1993)
            # Getting the type of 'msg3' (line 1993)
            msg3_50369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1993, 33), 'msg3', False)
            # Processing the call keyword arguments (line 1993)
            kwargs_50370 = {}
            # Getting the type of 'log' (line 1993)
            log_50367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1993, 24), 'log', False)
            # Obtaining the member 'info' of a type (line 1993)
            info_50368 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1993, 24), log_50367, 'info')
            # Calling info(args, kwargs) (line 1993)
            info_call_result_50371 = invoke(stypy.reporting.localization.Localization(__file__, 1993, 24), info_50368, *[msg3_50369], **kwargs_50370)
            
            # SSA join for try-except statement (line 1986)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for try-except statement (line 1981)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for try-except statement (line 1976)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_50320:
                # SSA join for if statement (line 1974)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Tuple to a Name (line 1994):
        
        # Assigning a Tuple to a Name (line 1994):
        
        # Obtaining an instance of the builtin type 'tuple' (line 1994)
        tuple_50372 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1994, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1994)
        # Adding element type (line 1994)
        
        # Call to lower(...): (line 1994)
        # Processing the call keyword arguments (line 1994)
        kwargs_50381 = {}
        
        # Call to strip(...): (line 1994)
        # Processing the call keyword arguments (line 1994)
        kwargs_50378 = {}
        
        # Obtaining the type of the subscript
        int_50373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1994, 22), 'int')
        # Getting the type of 'which' (line 1994)
        which_50374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1994, 16), 'which', False)
        # Obtaining the member '__getitem__' of a type (line 1994)
        getitem___50375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1994, 16), which_50374, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1994)
        subscript_call_result_50376 = invoke(stypy.reporting.localization.Localization(__file__, 1994, 16), getitem___50375, int_50373)
        
        # Obtaining the member 'strip' of a type (line 1994)
        strip_50377 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1994, 16), subscript_call_result_50376, 'strip')
        # Calling strip(args, kwargs) (line 1994)
        strip_call_result_50379 = invoke(stypy.reporting.localization.Localization(__file__, 1994, 16), strip_50377, *[], **kwargs_50378)
        
        # Obtaining the member 'lower' of a type (line 1994)
        lower_50380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1994, 16), strip_call_result_50379, 'lower')
        # Calling lower(args, kwargs) (line 1994)
        lower_call_result_50382 = invoke(stypy.reporting.localization.Localization(__file__, 1994, 16), lower_50380, *[], **kwargs_50381)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1994, 16), tuple_50372, lower_call_result_50382)
        # Adding element type (line 1994)
        
        # Obtaining the type of the subscript
        int_50383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1994, 48), 'int')
        # Getting the type of 'which' (line 1994)
        which_50384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1994, 42), 'which')
        # Obtaining the member '__getitem__' of a type (line 1994)
        getitem___50385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1994, 42), which_50384, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1994)
        subscript_call_result_50386 = invoke(stypy.reporting.localization.Localization(__file__, 1994, 42), getitem___50385, int_50383)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1994, 16), tuple_50372, subscript_call_result_50386)
        
        # Assigning a type to the variable 'which' (line 1994)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1994, 8), 'which', tuple_50372)
        
        
        
        # Obtaining the type of the subscript
        int_50387 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1995, 17), 'int')
        # Getting the type of 'which' (line 1995)
        which_50388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1995, 11), 'which')
        # Obtaining the member '__getitem__' of a type (line 1995)
        getitem___50389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1995, 11), which_50388, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1995)
        subscript_call_result_50390 = invoke(stypy.reporting.localization.Localization(__file__, 1995, 11), getitem___50389, int_50387)
        
        
        # Obtaining an instance of the builtin type 'list' (line 1995)
        list_50391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1995, 27), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1995)
        # Adding element type (line 1995)
        str_50392 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1995, 28), 'str', 'numeric')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1995, 27), list_50391, str_50392)
        # Adding element type (line 1995)
        str_50393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1995, 39), 'str', 'numarray')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1995, 27), list_50391, str_50393)
        # Adding element type (line 1995)
        str_50394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1995, 51), 'str', 'numpy')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1995, 27), list_50391, str_50394)
        
        # Applying the binary operator 'notin' (line 1995)
        result_contains_50395 = python_operator(stypy.reporting.localization.Localization(__file__, 1995, 11), 'notin', subscript_call_result_50390, list_50391)
        
        # Testing the type of an if condition (line 1995)
        if_condition_50396 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1995, 8), result_contains_50395)
        # Assigning a type to the variable 'if_condition_50396' (line 1995)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1995, 8), 'if_condition_50396', if_condition_50396)
        # SSA begins for if statement (line 1995)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1996)
        # Processing the call arguments (line 1996)
        str_50398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1996, 29), 'str', "numerix selector must be either 'Numeric' or 'numarray' or 'numpy' but the value obtained from the %s was '%s'.")
        
        # Obtaining an instance of the builtin type 'tuple' (line 1998)
        tuple_50399 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1998, 57), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1998)
        # Adding element type (line 1998)
        
        # Obtaining the type of the subscript
        int_50400 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1998, 63), 'int')
        # Getting the type of 'which' (line 1998)
        which_50401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1998, 57), 'which', False)
        # Obtaining the member '__getitem__' of a type (line 1998)
        getitem___50402 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1998, 57), which_50401, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1998)
        subscript_call_result_50403 = invoke(stypy.reporting.localization.Localization(__file__, 1998, 57), getitem___50402, int_50400)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1998, 57), tuple_50399, subscript_call_result_50403)
        # Adding element type (line 1998)
        
        # Obtaining the type of the subscript
        int_50404 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1998, 73), 'int')
        # Getting the type of 'which' (line 1998)
        which_50405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1998, 67), 'which', False)
        # Obtaining the member '__getitem__' of a type (line 1998)
        getitem___50406 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1998, 67), which_50405, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1998)
        subscript_call_result_50407 = invoke(stypy.reporting.localization.Localization(__file__, 1998, 67), getitem___50406, int_50404)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1998, 57), tuple_50399, subscript_call_result_50407)
        
        # Applying the binary operator '%' (line 1996)
        result_mod_50408 = python_operator(stypy.reporting.localization.Localization(__file__, 1996, 29), '%', str_50398, tuple_50399)
        
        # Processing the call keyword arguments (line 1996)
        kwargs_50409 = {}
        # Getting the type of 'ValueError' (line 1996)
        ValueError_50397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1996, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1996)
        ValueError_call_result_50410 = invoke(stypy.reporting.localization.Localization(__file__, 1996, 18), ValueError_50397, *[result_mod_50408], **kwargs_50409)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1996, 12), ValueError_call_result_50410, 'raise parameter', BaseException)
        # SSA join for if statement (line 1995)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Subscript to a Subscript (line 1999):
        
        # Assigning a Subscript to a Subscript (line 1999):
        
        # Obtaining the type of the subscript
        int_50411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1999, 38), 'int')
        # Getting the type of 'which' (line 1999)
        which_50412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1999, 32), 'which')
        # Obtaining the member '__getitem__' of a type (line 1999)
        getitem___50413 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1999, 32), which_50412, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1999)
        subscript_call_result_50414 = invoke(stypy.reporting.localization.Localization(__file__, 1999, 32), getitem___50413, int_50411)
        
        # Getting the type of 'os' (line 1999)
        os_50415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1999, 8), 'os')
        # Obtaining the member 'environ' of a type (line 1999)
        environ_50416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1999, 8), os_50415, 'environ')
        str_50417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1999, 19), 'str', 'NUMERIX')
        # Storing an element on a container (line 1999)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1999, 8), environ_50416, (str_50417, subscript_call_result_50414))
        
        # Call to set_info(...): (line 2000)
        # Processing the call keyword arguments (line 2000)
        
        # Call to get_info(...): (line 2000)
        # Processing the call arguments (line 2000)
        
        # Obtaining the type of the subscript
        int_50421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2000, 39), 'int')
        # Getting the type of 'which' (line 2000)
        which_50422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2000, 33), 'which', False)
        # Obtaining the member '__getitem__' of a type (line 2000)
        getitem___50423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2000, 33), which_50422, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2000)
        subscript_call_result_50424 = invoke(stypy.reporting.localization.Localization(__file__, 2000, 33), getitem___50423, int_50421)
        
        # Processing the call keyword arguments (line 2000)
        kwargs_50425 = {}
        # Getting the type of 'get_info' (line 2000)
        get_info_50420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2000, 24), 'get_info', False)
        # Calling get_info(args, kwargs) (line 2000)
        get_info_call_result_50426 = invoke(stypy.reporting.localization.Localization(__file__, 2000, 24), get_info_50420, *[subscript_call_result_50424], **kwargs_50425)
        
        kwargs_50427 = {'get_info_call_result_50426': get_info_call_result_50426}
        # Getting the type of 'self' (line 2000)
        self_50418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2000, 8), 'self', False)
        # Obtaining the member 'set_info' of a type (line 2000)
        set_info_50419 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2000, 8), self_50418, 'set_info')
        # Calling set_info(args, kwargs) (line 2000)
        set_info_call_result_50428 = invoke(stypy.reporting.localization.Localization(__file__, 2000, 8), set_info_50419, *[], **kwargs_50427)
        
        
        # ################# End of 'calc_info(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'calc_info' in the type store
        # Getting the type of 'stypy_return_type' (line 1969)
        stypy_return_type_50429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1969, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_50429)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'calc_info'
        return stypy_return_type_50429


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1966, 0, False)
        # Assigning a type to the variable 'self' (line 1967)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1967, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'numerix_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'numerix_info' (line 1966)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1966, 0), 'numerix_info', numerix_info)

# Assigning a Str to a Name (line 1967):
str_50430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1967, 14), 'str', 'numerix')
# Getting the type of 'numerix_info'
numerix_info_50431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'numerix_info')
# Setting the type of the member 'section' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), numerix_info_50431, 'section', str_50430)
# Declaration of the 'f2py_info' class
# Getting the type of 'system_info' (line 2003)
system_info_50432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2003, 16), 'system_info')

class f2py_info(system_info_50432, ):

    @norecursion
    def calc_info(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'calc_info'
        module_type_store = module_type_store.open_function_context('calc_info', 2004, 4, False)
        # Assigning a type to the variable 'self' (line 2005)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2005, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        f2py_info.calc_info.__dict__.__setitem__('stypy_localization', localization)
        f2py_info.calc_info.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        f2py_info.calc_info.__dict__.__setitem__('stypy_type_store', module_type_store)
        f2py_info.calc_info.__dict__.__setitem__('stypy_function_name', 'f2py_info.calc_info')
        f2py_info.calc_info.__dict__.__setitem__('stypy_param_names_list', [])
        f2py_info.calc_info.__dict__.__setitem__('stypy_varargs_param_name', None)
        f2py_info.calc_info.__dict__.__setitem__('stypy_kwargs_param_name', None)
        f2py_info.calc_info.__dict__.__setitem__('stypy_call_defaults', defaults)
        f2py_info.calc_info.__dict__.__setitem__('stypy_call_varargs', varargs)
        f2py_info.calc_info.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        f2py_info.calc_info.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'f2py_info.calc_info', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'calc_info', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'calc_info(...)' code ##################

        
        
        # SSA begins for try-except statement (line 2005)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2006, 12))
        
        # 'import numpy.f2py' statement (line 2006)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/distutils/')
        import_50433 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2006, 12), 'numpy.f2py')

        if (type(import_50433) is not StypyTypeError):

            if (import_50433 != 'pyd_module'):
                __import__(import_50433)
                sys_modules_50434 = sys.modules[import_50433]
                import_module(stypy.reporting.localization.Localization(__file__, 2006, 12), 'f2py', sys_modules_50434.module_type_store, module_type_store)
            else:
                import numpy.f2py as f2py

                import_module(stypy.reporting.localization.Localization(__file__, 2006, 12), 'f2py', numpy.f2py, module_type_store)

        else:
            # Assigning a type to the variable 'numpy.f2py' (line 2006)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2006, 12), 'numpy.f2py', import_50433)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/distutils/')
        
        # SSA branch for the except part of a try statement (line 2005)
        # SSA branch for the except 'ImportError' branch of a try statement (line 2005)
        module_type_store.open_ssa_branch('except')
        # Assigning a type to the variable 'stypy_return_type' (line 2008)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2008, 12), 'stypy_return_type', types.NoneType)
        # SSA join for try-except statement (line 2005)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 2009):
        
        # Assigning a Call to a Name (line 2009):
        
        # Call to join(...): (line 2009)
        # Processing the call arguments (line 2009)
        
        # Call to dirname(...): (line 2009)
        # Processing the call arguments (line 2009)
        # Getting the type of 'f2py' (line 2009)
        f2py_50441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2009, 48), 'f2py', False)
        # Obtaining the member '__file__' of a type (line 2009)
        file___50442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2009, 48), f2py_50441, '__file__')
        # Processing the call keyword arguments (line 2009)
        kwargs_50443 = {}
        # Getting the type of 'os' (line 2009)
        os_50438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2009, 32), 'os', False)
        # Obtaining the member 'path' of a type (line 2009)
        path_50439 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2009, 32), os_50438, 'path')
        # Obtaining the member 'dirname' of a type (line 2009)
        dirname_50440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2009, 32), path_50439, 'dirname')
        # Calling dirname(args, kwargs) (line 2009)
        dirname_call_result_50444 = invoke(stypy.reporting.localization.Localization(__file__, 2009, 32), dirname_50440, *[file___50442], **kwargs_50443)
        
        str_50445 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2009, 64), 'str', 'src')
        # Processing the call keyword arguments (line 2009)
        kwargs_50446 = {}
        # Getting the type of 'os' (line 2009)
        os_50435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2009, 19), 'os', False)
        # Obtaining the member 'path' of a type (line 2009)
        path_50436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2009, 19), os_50435, 'path')
        # Obtaining the member 'join' of a type (line 2009)
        join_50437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2009, 19), path_50436, 'join')
        # Calling join(args, kwargs) (line 2009)
        join_call_result_50447 = invoke(stypy.reporting.localization.Localization(__file__, 2009, 19), join_50437, *[dirname_call_result_50444, str_50445], **kwargs_50446)
        
        # Assigning a type to the variable 'f2py_dir' (line 2009)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2009, 8), 'f2py_dir', join_call_result_50447)
        
        # Call to set_info(...): (line 2010)
        # Processing the call keyword arguments (line 2010)
        
        # Obtaining an instance of the builtin type 'list' (line 2010)
        list_50450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2010, 30), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2010)
        # Adding element type (line 2010)
        
        # Call to join(...): (line 2010)
        # Processing the call arguments (line 2010)
        # Getting the type of 'f2py_dir' (line 2010)
        f2py_dir_50454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2010, 44), 'f2py_dir', False)
        str_50455 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2010, 54), 'str', 'fortranobject.c')
        # Processing the call keyword arguments (line 2010)
        kwargs_50456 = {}
        # Getting the type of 'os' (line 2010)
        os_50451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2010, 31), 'os', False)
        # Obtaining the member 'path' of a type (line 2010)
        path_50452 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2010, 31), os_50451, 'path')
        # Obtaining the member 'join' of a type (line 2010)
        join_50453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2010, 31), path_50452, 'join')
        # Calling join(args, kwargs) (line 2010)
        join_call_result_50457 = invoke(stypy.reporting.localization.Localization(__file__, 2010, 31), join_50453, *[f2py_dir_50454, str_50455], **kwargs_50456)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2010, 30), list_50450, join_call_result_50457)
        
        keyword_50458 = list_50450
        
        # Obtaining an instance of the builtin type 'list' (line 2011)
        list_50459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2011, 35), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2011)
        # Adding element type (line 2011)
        # Getting the type of 'f2py_dir' (line 2011)
        f2py_dir_50460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2011, 36), 'f2py_dir', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2011, 35), list_50459, f2py_dir_50460)
        
        keyword_50461 = list_50459
        kwargs_50462 = {'sources': keyword_50458, 'include_dirs': keyword_50461}
        # Getting the type of 'self' (line 2010)
        self_50448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2010, 8), 'self', False)
        # Obtaining the member 'set_info' of a type (line 2010)
        set_info_50449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2010, 8), self_50448, 'set_info')
        # Calling set_info(args, kwargs) (line 2010)
        set_info_call_result_50463 = invoke(stypy.reporting.localization.Localization(__file__, 2010, 8), set_info_50449, *[], **kwargs_50462)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2012)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2012, 8), 'stypy_return_type', types.NoneType)
        
        # ################# End of 'calc_info(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'calc_info' in the type store
        # Getting the type of 'stypy_return_type' (line 2004)
        stypy_return_type_50464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2004, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_50464)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'calc_info'
        return stypy_return_type_50464


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2003, 0, False)
        # Assigning a type to the variable 'self' (line 2004)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2004, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'f2py_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'f2py_info' (line 2003)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2003, 0), 'f2py_info', f2py_info)
# Declaration of the 'boost_python_info' class
# Getting the type of 'system_info' (line 2015)
system_info_50465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2015, 24), 'system_info')

class boost_python_info(system_info_50465, ):
    
    # Assigning a Str to a Name (line 2016):
    
    # Assigning a Str to a Name (line 2017):

    @norecursion
    def get_paths(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_paths'
        module_type_store = module_type_store.open_function_context('get_paths', 2019, 4, False)
        # Assigning a type to the variable 'self' (line 2020)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2020, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        boost_python_info.get_paths.__dict__.__setitem__('stypy_localization', localization)
        boost_python_info.get_paths.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        boost_python_info.get_paths.__dict__.__setitem__('stypy_type_store', module_type_store)
        boost_python_info.get_paths.__dict__.__setitem__('stypy_function_name', 'boost_python_info.get_paths')
        boost_python_info.get_paths.__dict__.__setitem__('stypy_param_names_list', ['section', 'key'])
        boost_python_info.get_paths.__dict__.__setitem__('stypy_varargs_param_name', None)
        boost_python_info.get_paths.__dict__.__setitem__('stypy_kwargs_param_name', None)
        boost_python_info.get_paths.__dict__.__setitem__('stypy_call_defaults', defaults)
        boost_python_info.get_paths.__dict__.__setitem__('stypy_call_varargs', varargs)
        boost_python_info.get_paths.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        boost_python_info.get_paths.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'boost_python_info.get_paths', ['section', 'key'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_paths', localization, ['section', 'key'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_paths(...)' code ##################

        
        # Assigning a Call to a Name (line 2020):
        
        # Assigning a Call to a Name (line 2020):
        
        # Call to get_paths(...): (line 2020)
        # Processing the call arguments (line 2020)
        # Getting the type of 'self' (line 2020)
        self_50468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2020, 41), 'self', False)
        # Getting the type of 'section' (line 2020)
        section_50469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2020, 47), 'section', False)
        # Getting the type of 'key' (line 2020)
        key_50470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2020, 56), 'key', False)
        # Processing the call keyword arguments (line 2020)
        kwargs_50471 = {}
        # Getting the type of 'system_info' (line 2020)
        system_info_50466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2020, 19), 'system_info', False)
        # Obtaining the member 'get_paths' of a type (line 2020)
        get_paths_50467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2020, 19), system_info_50466, 'get_paths')
        # Calling get_paths(args, kwargs) (line 2020)
        get_paths_call_result_50472 = invoke(stypy.reporting.localization.Localization(__file__, 2020, 19), get_paths_50467, *[self_50468, section_50469, key_50470], **kwargs_50471)
        
        # Assigning a type to the variable 'pre_dirs' (line 2020)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2020, 8), 'pre_dirs', get_paths_call_result_50472)
        
        # Assigning a List to a Name (line 2021):
        
        # Assigning a List to a Name (line 2021):
        
        # Obtaining an instance of the builtin type 'list' (line 2021)
        list_50473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2021, 15), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2021)
        
        # Assigning a type to the variable 'dirs' (line 2021)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2021, 8), 'dirs', list_50473)
        
        # Getting the type of 'pre_dirs' (line 2022)
        pre_dirs_50474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2022, 17), 'pre_dirs')
        # Testing the type of a for loop iterable (line 2022)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2022, 8), pre_dirs_50474)
        # Getting the type of the for loop variable (line 2022)
        for_loop_var_50475 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2022, 8), pre_dirs_50474)
        # Assigning a type to the variable 'd' (line 2022)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2022, 8), 'd', for_loop_var_50475)
        # SSA begins for a for statement (line 2022)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to extend(...): (line 2023)
        # Processing the call arguments (line 2023)
        
        # Obtaining an instance of the builtin type 'list' (line 2023)
        list_50478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2023, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2023)
        # Adding element type (line 2023)
        # Getting the type of 'd' (line 2023)
        d_50479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2023, 25), 'd', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2023, 24), list_50478, d_50479)
        
        
        # Call to combine_paths(...): (line 2023)
        # Processing the call arguments (line 2023)
        # Getting the type of 'd' (line 2023)
        d_50482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2023, 49), 'd', False)
        
        # Obtaining an instance of the builtin type 'list' (line 2023)
        list_50483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2023, 52), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2023)
        # Adding element type (line 2023)
        str_50484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2023, 53), 'str', 'boost*')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2023, 52), list_50483, str_50484)
        
        # Processing the call keyword arguments (line 2023)
        kwargs_50485 = {}
        # Getting the type of 'self' (line 2023)
        self_50480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2023, 30), 'self', False)
        # Obtaining the member 'combine_paths' of a type (line 2023)
        combine_paths_50481 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2023, 30), self_50480, 'combine_paths')
        # Calling combine_paths(args, kwargs) (line 2023)
        combine_paths_call_result_50486 = invoke(stypy.reporting.localization.Localization(__file__, 2023, 30), combine_paths_50481, *[d_50482, list_50483], **kwargs_50485)
        
        # Applying the binary operator '+' (line 2023)
        result_add_50487 = python_operator(stypy.reporting.localization.Localization(__file__, 2023, 24), '+', list_50478, combine_paths_call_result_50486)
        
        # Processing the call keyword arguments (line 2023)
        kwargs_50488 = {}
        # Getting the type of 'dirs' (line 2023)
        dirs_50476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2023, 12), 'dirs', False)
        # Obtaining the member 'extend' of a type (line 2023)
        extend_50477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2023, 12), dirs_50476, 'extend')
        # Calling extend(args, kwargs) (line 2023)
        extend_call_result_50489 = invoke(stypy.reporting.localization.Localization(__file__, 2023, 12), extend_50477, *[result_add_50487], **kwargs_50488)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'dirs' (line 2024)
        dirs_50497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2024, 27), 'dirs')
        comprehension_50498 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2024, 16), dirs_50497)
        # Assigning a type to the variable 'd' (line 2024)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2024, 16), 'd', comprehension_50498)
        
        # Call to isdir(...): (line 2024)
        # Processing the call arguments (line 2024)
        # Getting the type of 'd' (line 2024)
        d_50494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2024, 49), 'd', False)
        # Processing the call keyword arguments (line 2024)
        kwargs_50495 = {}
        # Getting the type of 'os' (line 2024)
        os_50491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2024, 35), 'os', False)
        # Obtaining the member 'path' of a type (line 2024)
        path_50492 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2024, 35), os_50491, 'path')
        # Obtaining the member 'isdir' of a type (line 2024)
        isdir_50493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2024, 35), path_50492, 'isdir')
        # Calling isdir(args, kwargs) (line 2024)
        isdir_call_result_50496 = invoke(stypy.reporting.localization.Localization(__file__, 2024, 35), isdir_50493, *[d_50494], **kwargs_50495)
        
        # Getting the type of 'd' (line 2024)
        d_50490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2024, 16), 'd')
        list_50499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2024, 16), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2024, 16), list_50499, d_50490)
        # Assigning a type to the variable 'stypy_return_type' (line 2024)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2024, 8), 'stypy_return_type', list_50499)
        
        # ################# End of 'get_paths(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_paths' in the type store
        # Getting the type of 'stypy_return_type' (line 2019)
        stypy_return_type_50500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2019, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_50500)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_paths'
        return stypy_return_type_50500


    @norecursion
    def calc_info(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'calc_info'
        module_type_store = module_type_store.open_function_context('calc_info', 2026, 4, False)
        # Assigning a type to the variable 'self' (line 2027)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2027, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        boost_python_info.calc_info.__dict__.__setitem__('stypy_localization', localization)
        boost_python_info.calc_info.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        boost_python_info.calc_info.__dict__.__setitem__('stypy_type_store', module_type_store)
        boost_python_info.calc_info.__dict__.__setitem__('stypy_function_name', 'boost_python_info.calc_info')
        boost_python_info.calc_info.__dict__.__setitem__('stypy_param_names_list', [])
        boost_python_info.calc_info.__dict__.__setitem__('stypy_varargs_param_name', None)
        boost_python_info.calc_info.__dict__.__setitem__('stypy_kwargs_param_name', None)
        boost_python_info.calc_info.__dict__.__setitem__('stypy_call_defaults', defaults)
        boost_python_info.calc_info.__dict__.__setitem__('stypy_call_varargs', varargs)
        boost_python_info.calc_info.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        boost_python_info.calc_info.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'boost_python_info.calc_info', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'calc_info', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'calc_info(...)' code ##################

        
        # Assigning a Call to a Name (line 2027):
        
        # Assigning a Call to a Name (line 2027):
        
        # Call to get_src_dirs(...): (line 2027)
        # Processing the call keyword arguments (line 2027)
        kwargs_50503 = {}
        # Getting the type of 'self' (line 2027)
        self_50501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2027, 19), 'self', False)
        # Obtaining the member 'get_src_dirs' of a type (line 2027)
        get_src_dirs_50502 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2027, 19), self_50501, 'get_src_dirs')
        # Calling get_src_dirs(args, kwargs) (line 2027)
        get_src_dirs_call_result_50504 = invoke(stypy.reporting.localization.Localization(__file__, 2027, 19), get_src_dirs_50502, *[], **kwargs_50503)
        
        # Assigning a type to the variable 'src_dirs' (line 2027)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2027, 8), 'src_dirs', get_src_dirs_call_result_50504)
        
        # Assigning a Str to a Name (line 2028):
        
        # Assigning a Str to a Name (line 2028):
        str_50505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2028, 18), 'str', '')
        # Assigning a type to the variable 'src_dir' (line 2028)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2028, 8), 'src_dir', str_50505)
        
        # Getting the type of 'src_dirs' (line 2029)
        src_dirs_50506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2029, 17), 'src_dirs')
        # Testing the type of a for loop iterable (line 2029)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2029, 8), src_dirs_50506)
        # Getting the type of the for loop variable (line 2029)
        for_loop_var_50507 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2029, 8), src_dirs_50506)
        # Assigning a type to the variable 'd' (line 2029)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2029, 8), 'd', for_loop_var_50507)
        # SSA begins for a for statement (line 2029)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to isfile(...): (line 2030)
        # Processing the call arguments (line 2030)
        
        # Call to join(...): (line 2030)
        # Processing the call arguments (line 2030)
        # Getting the type of 'd' (line 2030)
        d_50514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2030, 43), 'd', False)
        str_50515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2030, 46), 'str', 'libs')
        str_50516 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2030, 54), 'str', 'python')
        str_50517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2030, 64), 'str', 'src')
        str_50518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2031, 43), 'str', 'module.cpp')
        # Processing the call keyword arguments (line 2030)
        kwargs_50519 = {}
        # Getting the type of 'os' (line 2030)
        os_50511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2030, 30), 'os', False)
        # Obtaining the member 'path' of a type (line 2030)
        path_50512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2030, 30), os_50511, 'path')
        # Obtaining the member 'join' of a type (line 2030)
        join_50513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2030, 30), path_50512, 'join')
        # Calling join(args, kwargs) (line 2030)
        join_call_result_50520 = invoke(stypy.reporting.localization.Localization(__file__, 2030, 30), join_50513, *[d_50514, str_50515, str_50516, str_50517, str_50518], **kwargs_50519)
        
        # Processing the call keyword arguments (line 2030)
        kwargs_50521 = {}
        # Getting the type of 'os' (line 2030)
        os_50508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2030, 15), 'os', False)
        # Obtaining the member 'path' of a type (line 2030)
        path_50509 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2030, 15), os_50508, 'path')
        # Obtaining the member 'isfile' of a type (line 2030)
        isfile_50510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2030, 15), path_50509, 'isfile')
        # Calling isfile(args, kwargs) (line 2030)
        isfile_call_result_50522 = invoke(stypy.reporting.localization.Localization(__file__, 2030, 15), isfile_50510, *[join_call_result_50520], **kwargs_50521)
        
        # Testing the type of an if condition (line 2030)
        if_condition_50523 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2030, 12), isfile_call_result_50522)
        # Assigning a type to the variable 'if_condition_50523' (line 2030)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2030, 12), 'if_condition_50523', if_condition_50523)
        # SSA begins for if statement (line 2030)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 2032):
        
        # Assigning a Name to a Name (line 2032):
        # Getting the type of 'd' (line 2032)
        d_50524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2032, 26), 'd')
        # Assigning a type to the variable 'src_dir' (line 2032)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2032, 16), 'src_dir', d_50524)
        # SSA join for if statement (line 2030)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'src_dir' (line 2034)
        src_dir_50525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2034, 15), 'src_dir')
        # Applying the 'not' unary operator (line 2034)
        result_not__50526 = python_operator(stypy.reporting.localization.Localization(__file__, 2034, 11), 'not', src_dir_50525)
        
        # Testing the type of an if condition (line 2034)
        if_condition_50527 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2034, 8), result_not__50526)
        # Assigning a type to the variable 'if_condition_50527' (line 2034)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2034, 8), 'if_condition_50527', if_condition_50527)
        # SSA begins for if statement (line 2034)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 2035)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2035, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 2034)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a List to a Name (line 2036):
        
        # Assigning a List to a Name (line 2036):
        
        # Obtaining an instance of the builtin type 'list' (line 2036)
        list_50528 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2036, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2036)
        # Adding element type (line 2036)
        
        # Call to get_python_inc(...): (line 2036)
        # Processing the call keyword arguments (line 2036)
        kwargs_50532 = {}
        # Getting the type of 'distutils' (line 2036)
        distutils_50529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2036, 24), 'distutils', False)
        # Obtaining the member 'sysconfig' of a type (line 2036)
        sysconfig_50530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2036, 24), distutils_50529, 'sysconfig')
        # Obtaining the member 'get_python_inc' of a type (line 2036)
        get_python_inc_50531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2036, 24), sysconfig_50530, 'get_python_inc')
        # Calling get_python_inc(args, kwargs) (line 2036)
        get_python_inc_call_result_50533 = invoke(stypy.reporting.localization.Localization(__file__, 2036, 24), get_python_inc_50531, *[], **kwargs_50532)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2036, 23), list_50528, get_python_inc_call_result_50533)
        
        # Assigning a type to the variable 'py_incl_dirs' (line 2036)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2036, 8), 'py_incl_dirs', list_50528)
        
        # Assigning a Call to a Name (line 2037):
        
        # Assigning a Call to a Name (line 2037):
        
        # Call to get_python_inc(...): (line 2037)
        # Processing the call keyword arguments (line 2037)
        # Getting the type of 'True' (line 2037)
        True_50537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2037, 72), 'True', False)
        keyword_50538 = True_50537
        kwargs_50539 = {'plat_specific': keyword_50538}
        # Getting the type of 'distutils' (line 2037)
        distutils_50534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2037, 23), 'distutils', False)
        # Obtaining the member 'sysconfig' of a type (line 2037)
        sysconfig_50535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2037, 23), distutils_50534, 'sysconfig')
        # Obtaining the member 'get_python_inc' of a type (line 2037)
        get_python_inc_50536 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2037, 23), sysconfig_50535, 'get_python_inc')
        # Calling get_python_inc(args, kwargs) (line 2037)
        get_python_inc_call_result_50540 = invoke(stypy.reporting.localization.Localization(__file__, 2037, 23), get_python_inc_50536, *[], **kwargs_50539)
        
        # Assigning a type to the variable 'py_pincl_dir' (line 2037)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2037, 8), 'py_pincl_dir', get_python_inc_call_result_50540)
        
        
        # Getting the type of 'py_pincl_dir' (line 2038)
        py_pincl_dir_50541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2038, 11), 'py_pincl_dir')
        # Getting the type of 'py_incl_dirs' (line 2038)
        py_incl_dirs_50542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2038, 31), 'py_incl_dirs')
        # Applying the binary operator 'notin' (line 2038)
        result_contains_50543 = python_operator(stypy.reporting.localization.Localization(__file__, 2038, 11), 'notin', py_pincl_dir_50541, py_incl_dirs_50542)
        
        # Testing the type of an if condition (line 2038)
        if_condition_50544 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2038, 8), result_contains_50543)
        # Assigning a type to the variable 'if_condition_50544' (line 2038)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2038, 8), 'if_condition_50544', if_condition_50544)
        # SSA begins for if statement (line 2038)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 2039)
        # Processing the call arguments (line 2039)
        # Getting the type of 'py_pincl_dir' (line 2039)
        py_pincl_dir_50547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2039, 32), 'py_pincl_dir', False)
        # Processing the call keyword arguments (line 2039)
        kwargs_50548 = {}
        # Getting the type of 'py_incl_dirs' (line 2039)
        py_incl_dirs_50545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2039, 12), 'py_incl_dirs', False)
        # Obtaining the member 'append' of a type (line 2039)
        append_50546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2039, 12), py_incl_dirs_50545, 'append')
        # Calling append(args, kwargs) (line 2039)
        append_call_result_50549 = invoke(stypy.reporting.localization.Localization(__file__, 2039, 12), append_50546, *[py_pincl_dir_50547], **kwargs_50548)
        
        # SSA join for if statement (line 2038)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 2040):
        
        # Assigning a Call to a Name (line 2040):
        
        # Call to join(...): (line 2040)
        # Processing the call arguments (line 2040)
        # Getting the type of 'src_dir' (line 2040)
        src_dir_50553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2040, 32), 'src_dir', False)
        str_50554 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2040, 41), 'str', 'libs')
        str_50555 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2040, 49), 'str', 'python')
        str_50556 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2040, 59), 'str', 'src')
        # Processing the call keyword arguments (line 2040)
        kwargs_50557 = {}
        # Getting the type of 'os' (line 2040)
        os_50550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2040, 19), 'os', False)
        # Obtaining the member 'path' of a type (line 2040)
        path_50551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2040, 19), os_50550, 'path')
        # Obtaining the member 'join' of a type (line 2040)
        join_50552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2040, 19), path_50551, 'join')
        # Calling join(args, kwargs) (line 2040)
        join_call_result_50558 = invoke(stypy.reporting.localization.Localization(__file__, 2040, 19), join_50552, *[src_dir_50553, str_50554, str_50555, str_50556], **kwargs_50557)
        
        # Assigning a type to the variable 'srcs_dir' (line 2040)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2040, 8), 'srcs_dir', join_call_result_50558)
        
        # Assigning a Call to a Name (line 2041):
        
        # Assigning a Call to a Name (line 2041):
        
        # Call to glob(...): (line 2041)
        # Processing the call arguments (line 2041)
        
        # Call to join(...): (line 2041)
        # Processing the call arguments (line 2041)
        # Getting the type of 'srcs_dir' (line 2041)
        srcs_dir_50563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 37), 'srcs_dir', False)
        str_50564 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2041, 47), 'str', '*.cpp')
        # Processing the call keyword arguments (line 2041)
        kwargs_50565 = {}
        # Getting the type of 'os' (line 2041)
        os_50560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 24), 'os', False)
        # Obtaining the member 'path' of a type (line 2041)
        path_50561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2041, 24), os_50560, 'path')
        # Obtaining the member 'join' of a type (line 2041)
        join_50562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2041, 24), path_50561, 'join')
        # Calling join(args, kwargs) (line 2041)
        join_call_result_50566 = invoke(stypy.reporting.localization.Localization(__file__, 2041, 24), join_50562, *[srcs_dir_50563, str_50564], **kwargs_50565)
        
        # Processing the call keyword arguments (line 2041)
        kwargs_50567 = {}
        # Getting the type of 'glob' (line 2041)
        glob_50559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2041, 19), 'glob', False)
        # Calling glob(args, kwargs) (line 2041)
        glob_call_result_50568 = invoke(stypy.reporting.localization.Localization(__file__, 2041, 19), glob_50559, *[join_call_result_50566], **kwargs_50567)
        
        # Assigning a type to the variable 'bpl_srcs' (line 2041)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2041, 8), 'bpl_srcs', glob_call_result_50568)
        
        # Getting the type of 'bpl_srcs' (line 2042)
        bpl_srcs_50569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 8), 'bpl_srcs')
        
        # Call to glob(...): (line 2042)
        # Processing the call arguments (line 2042)
        
        # Call to join(...): (line 2042)
        # Processing the call arguments (line 2042)
        # Getting the type of 'srcs_dir' (line 2042)
        srcs_dir_50574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 38), 'srcs_dir', False)
        str_50575 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2042, 48), 'str', '*')
        str_50576 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2042, 53), 'str', '*.cpp')
        # Processing the call keyword arguments (line 2042)
        kwargs_50577 = {}
        # Getting the type of 'os' (line 2042)
        os_50571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 25), 'os', False)
        # Obtaining the member 'path' of a type (line 2042)
        path_50572 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2042, 25), os_50571, 'path')
        # Obtaining the member 'join' of a type (line 2042)
        join_50573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2042, 25), path_50572, 'join')
        # Calling join(args, kwargs) (line 2042)
        join_call_result_50578 = invoke(stypy.reporting.localization.Localization(__file__, 2042, 25), join_50573, *[srcs_dir_50574, str_50575, str_50576], **kwargs_50577)
        
        # Processing the call keyword arguments (line 2042)
        kwargs_50579 = {}
        # Getting the type of 'glob' (line 2042)
        glob_50570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 20), 'glob', False)
        # Calling glob(args, kwargs) (line 2042)
        glob_call_result_50580 = invoke(stypy.reporting.localization.Localization(__file__, 2042, 20), glob_50570, *[join_call_result_50578], **kwargs_50579)
        
        # Applying the binary operator '+=' (line 2042)
        result_iadd_50581 = python_operator(stypy.reporting.localization.Localization(__file__, 2042, 8), '+=', bpl_srcs_50569, glob_call_result_50580)
        # Assigning a type to the variable 'bpl_srcs' (line 2042)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2042, 8), 'bpl_srcs', result_iadd_50581)
        
        
        # Assigning a Dict to a Name (line 2043):
        
        # Assigning a Dict to a Name (line 2043):
        
        # Obtaining an instance of the builtin type 'dict' (line 2043)
        dict_50582 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2043, 15), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 2043)
        # Adding element type (key, value) (line 2043)
        str_50583 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2043, 16), 'str', 'libraries')
        
        # Obtaining an instance of the builtin type 'list' (line 2043)
        list_50584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2043, 29), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2043)
        # Adding element type (line 2043)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2043)
        tuple_50585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2043, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2043)
        # Adding element type (line 2043)
        str_50586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2043, 31), 'str', 'boost_python_src')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2043, 31), tuple_50585, str_50586)
        # Adding element type (line 2043)
        
        # Obtaining an instance of the builtin type 'dict' (line 2044)
        dict_50587 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2044, 31), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 2044)
        # Adding element type (key, value) (line 2044)
        str_50588 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2044, 32), 'str', 'include_dirs')
        
        # Obtaining an instance of the builtin type 'list' (line 2044)
        list_50589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2044, 48), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2044)
        # Adding element type (line 2044)
        # Getting the type of 'src_dir' (line 2044)
        src_dir_50590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2044, 49), 'src_dir')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2044, 48), list_50589, src_dir_50590)
        
        # Getting the type of 'py_incl_dirs' (line 2044)
        py_incl_dirs_50591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2044, 60), 'py_incl_dirs')
        # Applying the binary operator '+' (line 2044)
        result_add_50592 = python_operator(stypy.reporting.localization.Localization(__file__, 2044, 48), '+', list_50589, py_incl_dirs_50591)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2044, 31), dict_50587, (str_50588, result_add_50592))
        # Adding element type (key, value) (line 2044)
        str_50593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2045, 32), 'str', 'sources')
        # Getting the type of 'bpl_srcs' (line 2045)
        bpl_srcs_50594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2045, 42), 'bpl_srcs')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2044, 31), dict_50587, (str_50593, bpl_srcs_50594))
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2043, 31), tuple_50585, dict_50587)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2043, 29), list_50584, tuple_50585)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2043, 15), dict_50582, (str_50583, list_50584))
        # Adding element type (key, value) (line 2043)
        str_50595 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2047, 16), 'str', 'include_dirs')
        
        # Obtaining an instance of the builtin type 'list' (line 2047)
        list_50596 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2047, 32), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2047)
        # Adding element type (line 2047)
        # Getting the type of 'src_dir' (line 2047)
        src_dir_50597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2047, 33), 'src_dir')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2047, 32), list_50596, src_dir_50597)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2043, 15), dict_50582, (str_50595, list_50596))
        
        # Assigning a type to the variable 'info' (line 2043)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2043, 8), 'info', dict_50582)
        
        # Getting the type of 'info' (line 2049)
        info_50598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2049, 11), 'info')
        # Testing the type of an if condition (line 2049)
        if_condition_50599 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2049, 8), info_50598)
        # Assigning a type to the variable 'if_condition_50599' (line 2049)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2049, 8), 'if_condition_50599', if_condition_50599)
        # SSA begins for if statement (line 2049)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_info(...): (line 2050)
        # Processing the call keyword arguments (line 2050)
        # Getting the type of 'info' (line 2050)
        info_50602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2050, 28), 'info', False)
        kwargs_50603 = {'info_50602': info_50602}
        # Getting the type of 'self' (line 2050)
        self_50600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2050, 12), 'self', False)
        # Obtaining the member 'set_info' of a type (line 2050)
        set_info_50601 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2050, 12), self_50600, 'set_info')
        # Calling set_info(args, kwargs) (line 2050)
        set_info_call_result_50604 = invoke(stypy.reporting.localization.Localization(__file__, 2050, 12), set_info_50601, *[], **kwargs_50603)
        
        # SSA join for if statement (line 2049)
        module_type_store = module_type_store.join_ssa_context()
        
        # Assigning a type to the variable 'stypy_return_type' (line 2051)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2051, 8), 'stypy_return_type', types.NoneType)
        
        # ################# End of 'calc_info(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'calc_info' in the type store
        # Getting the type of 'stypy_return_type' (line 2026)
        stypy_return_type_50605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2026, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_50605)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'calc_info'
        return stypy_return_type_50605


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2015, 0, False)
        # Assigning a type to the variable 'self' (line 2016)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2016, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'boost_python_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'boost_python_info' (line 2015)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2015, 0), 'boost_python_info', boost_python_info)

# Assigning a Str to a Name (line 2016):
str_50606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2016, 14), 'str', 'boost_python')
# Getting the type of 'boost_python_info'
boost_python_info_50607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'boost_python_info')
# Setting the type of the member 'section' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), boost_python_info_50607, 'section', str_50606)

# Assigning a Str to a Name (line 2017):
str_50608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2017, 18), 'str', 'BOOST')
# Getting the type of 'boost_python_info'
boost_python_info_50609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'boost_python_info')
# Setting the type of the member 'dir_env_var' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), boost_python_info_50609, 'dir_env_var', str_50608)
# Declaration of the 'agg2_info' class
# Getting the type of 'system_info' (line 2054)
system_info_50610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2054, 16), 'system_info')

class agg2_info(system_info_50610, ):
    
    # Assigning a Str to a Name (line 2055):
    
    # Assigning a Str to a Name (line 2056):

    @norecursion
    def get_paths(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_paths'
        module_type_store = module_type_store.open_function_context('get_paths', 2058, 4, False)
        # Assigning a type to the variable 'self' (line 2059)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2059, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        agg2_info.get_paths.__dict__.__setitem__('stypy_localization', localization)
        agg2_info.get_paths.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        agg2_info.get_paths.__dict__.__setitem__('stypy_type_store', module_type_store)
        agg2_info.get_paths.__dict__.__setitem__('stypy_function_name', 'agg2_info.get_paths')
        agg2_info.get_paths.__dict__.__setitem__('stypy_param_names_list', ['section', 'key'])
        agg2_info.get_paths.__dict__.__setitem__('stypy_varargs_param_name', None)
        agg2_info.get_paths.__dict__.__setitem__('stypy_kwargs_param_name', None)
        agg2_info.get_paths.__dict__.__setitem__('stypy_call_defaults', defaults)
        agg2_info.get_paths.__dict__.__setitem__('stypy_call_varargs', varargs)
        agg2_info.get_paths.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        agg2_info.get_paths.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'agg2_info.get_paths', ['section', 'key'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_paths', localization, ['section', 'key'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_paths(...)' code ##################

        
        # Assigning a Call to a Name (line 2059):
        
        # Assigning a Call to a Name (line 2059):
        
        # Call to get_paths(...): (line 2059)
        # Processing the call arguments (line 2059)
        # Getting the type of 'self' (line 2059)
        self_50613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2059, 41), 'self', False)
        # Getting the type of 'section' (line 2059)
        section_50614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2059, 47), 'section', False)
        # Getting the type of 'key' (line 2059)
        key_50615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2059, 56), 'key', False)
        # Processing the call keyword arguments (line 2059)
        kwargs_50616 = {}
        # Getting the type of 'system_info' (line 2059)
        system_info_50611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2059, 19), 'system_info', False)
        # Obtaining the member 'get_paths' of a type (line 2059)
        get_paths_50612 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2059, 19), system_info_50611, 'get_paths')
        # Calling get_paths(args, kwargs) (line 2059)
        get_paths_call_result_50617 = invoke(stypy.reporting.localization.Localization(__file__, 2059, 19), get_paths_50612, *[self_50613, section_50614, key_50615], **kwargs_50616)
        
        # Assigning a type to the variable 'pre_dirs' (line 2059)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2059, 8), 'pre_dirs', get_paths_call_result_50617)
        
        # Assigning a List to a Name (line 2060):
        
        # Assigning a List to a Name (line 2060):
        
        # Obtaining an instance of the builtin type 'list' (line 2060)
        list_50618 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2060, 15), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2060)
        
        # Assigning a type to the variable 'dirs' (line 2060)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2060, 8), 'dirs', list_50618)
        
        # Getting the type of 'pre_dirs' (line 2061)
        pre_dirs_50619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2061, 17), 'pre_dirs')
        # Testing the type of a for loop iterable (line 2061)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2061, 8), pre_dirs_50619)
        # Getting the type of the for loop variable (line 2061)
        for_loop_var_50620 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2061, 8), pre_dirs_50619)
        # Assigning a type to the variable 'd' (line 2061)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2061, 8), 'd', for_loop_var_50620)
        # SSA begins for a for statement (line 2061)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to extend(...): (line 2062)
        # Processing the call arguments (line 2062)
        
        # Obtaining an instance of the builtin type 'list' (line 2062)
        list_50623 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2062, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2062)
        # Adding element type (line 2062)
        # Getting the type of 'd' (line 2062)
        d_50624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2062, 25), 'd', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2062, 24), list_50623, d_50624)
        
        
        # Call to combine_paths(...): (line 2062)
        # Processing the call arguments (line 2062)
        # Getting the type of 'd' (line 2062)
        d_50627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2062, 49), 'd', False)
        
        # Obtaining an instance of the builtin type 'list' (line 2062)
        list_50628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2062, 52), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2062)
        # Adding element type (line 2062)
        str_50629 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2062, 53), 'str', 'agg2*')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2062, 52), list_50628, str_50629)
        
        # Processing the call keyword arguments (line 2062)
        kwargs_50630 = {}
        # Getting the type of 'self' (line 2062)
        self_50625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2062, 30), 'self', False)
        # Obtaining the member 'combine_paths' of a type (line 2062)
        combine_paths_50626 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2062, 30), self_50625, 'combine_paths')
        # Calling combine_paths(args, kwargs) (line 2062)
        combine_paths_call_result_50631 = invoke(stypy.reporting.localization.Localization(__file__, 2062, 30), combine_paths_50626, *[d_50627, list_50628], **kwargs_50630)
        
        # Applying the binary operator '+' (line 2062)
        result_add_50632 = python_operator(stypy.reporting.localization.Localization(__file__, 2062, 24), '+', list_50623, combine_paths_call_result_50631)
        
        # Processing the call keyword arguments (line 2062)
        kwargs_50633 = {}
        # Getting the type of 'dirs' (line 2062)
        dirs_50621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2062, 12), 'dirs', False)
        # Obtaining the member 'extend' of a type (line 2062)
        extend_50622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2062, 12), dirs_50621, 'extend')
        # Calling extend(args, kwargs) (line 2062)
        extend_call_result_50634 = invoke(stypy.reporting.localization.Localization(__file__, 2062, 12), extend_50622, *[result_add_50632], **kwargs_50633)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'dirs' (line 2063)
        dirs_50642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2063, 27), 'dirs')
        comprehension_50643 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2063, 16), dirs_50642)
        # Assigning a type to the variable 'd' (line 2063)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2063, 16), 'd', comprehension_50643)
        
        # Call to isdir(...): (line 2063)
        # Processing the call arguments (line 2063)
        # Getting the type of 'd' (line 2063)
        d_50639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2063, 49), 'd', False)
        # Processing the call keyword arguments (line 2063)
        kwargs_50640 = {}
        # Getting the type of 'os' (line 2063)
        os_50636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2063, 35), 'os', False)
        # Obtaining the member 'path' of a type (line 2063)
        path_50637 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2063, 35), os_50636, 'path')
        # Obtaining the member 'isdir' of a type (line 2063)
        isdir_50638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2063, 35), path_50637, 'isdir')
        # Calling isdir(args, kwargs) (line 2063)
        isdir_call_result_50641 = invoke(stypy.reporting.localization.Localization(__file__, 2063, 35), isdir_50638, *[d_50639], **kwargs_50640)
        
        # Getting the type of 'd' (line 2063)
        d_50635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2063, 16), 'd')
        list_50644 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2063, 16), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2063, 16), list_50644, d_50635)
        # Assigning a type to the variable 'stypy_return_type' (line 2063)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2063, 8), 'stypy_return_type', list_50644)
        
        # ################# End of 'get_paths(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_paths' in the type store
        # Getting the type of 'stypy_return_type' (line 2058)
        stypy_return_type_50645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2058, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_50645)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_paths'
        return stypy_return_type_50645


    @norecursion
    def calc_info(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'calc_info'
        module_type_store = module_type_store.open_function_context('calc_info', 2065, 4, False)
        # Assigning a type to the variable 'self' (line 2066)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2066, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        agg2_info.calc_info.__dict__.__setitem__('stypy_localization', localization)
        agg2_info.calc_info.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        agg2_info.calc_info.__dict__.__setitem__('stypy_type_store', module_type_store)
        agg2_info.calc_info.__dict__.__setitem__('stypy_function_name', 'agg2_info.calc_info')
        agg2_info.calc_info.__dict__.__setitem__('stypy_param_names_list', [])
        agg2_info.calc_info.__dict__.__setitem__('stypy_varargs_param_name', None)
        agg2_info.calc_info.__dict__.__setitem__('stypy_kwargs_param_name', None)
        agg2_info.calc_info.__dict__.__setitem__('stypy_call_defaults', defaults)
        agg2_info.calc_info.__dict__.__setitem__('stypy_call_varargs', varargs)
        agg2_info.calc_info.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        agg2_info.calc_info.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'agg2_info.calc_info', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'calc_info', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'calc_info(...)' code ##################

        
        # Assigning a Call to a Name (line 2066):
        
        # Assigning a Call to a Name (line 2066):
        
        # Call to get_src_dirs(...): (line 2066)
        # Processing the call keyword arguments (line 2066)
        kwargs_50648 = {}
        # Getting the type of 'self' (line 2066)
        self_50646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2066, 19), 'self', False)
        # Obtaining the member 'get_src_dirs' of a type (line 2066)
        get_src_dirs_50647 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2066, 19), self_50646, 'get_src_dirs')
        # Calling get_src_dirs(args, kwargs) (line 2066)
        get_src_dirs_call_result_50649 = invoke(stypy.reporting.localization.Localization(__file__, 2066, 19), get_src_dirs_50647, *[], **kwargs_50648)
        
        # Assigning a type to the variable 'src_dirs' (line 2066)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2066, 8), 'src_dirs', get_src_dirs_call_result_50649)
        
        # Assigning a Str to a Name (line 2067):
        
        # Assigning a Str to a Name (line 2067):
        str_50650 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2067, 18), 'str', '')
        # Assigning a type to the variable 'src_dir' (line 2067)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2067, 8), 'src_dir', str_50650)
        
        # Getting the type of 'src_dirs' (line 2068)
        src_dirs_50651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2068, 17), 'src_dirs')
        # Testing the type of a for loop iterable (line 2068)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2068, 8), src_dirs_50651)
        # Getting the type of the for loop variable (line 2068)
        for_loop_var_50652 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2068, 8), src_dirs_50651)
        # Assigning a type to the variable 'd' (line 2068)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2068, 8), 'd', for_loop_var_50652)
        # SSA begins for a for statement (line 2068)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to isfile(...): (line 2069)
        # Processing the call arguments (line 2069)
        
        # Call to join(...): (line 2069)
        # Processing the call arguments (line 2069)
        # Getting the type of 'd' (line 2069)
        d_50659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2069, 43), 'd', False)
        str_50660 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2069, 46), 'str', 'src')
        str_50661 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2069, 53), 'str', 'agg_affine_matrix.cpp')
        # Processing the call keyword arguments (line 2069)
        kwargs_50662 = {}
        # Getting the type of 'os' (line 2069)
        os_50656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2069, 30), 'os', False)
        # Obtaining the member 'path' of a type (line 2069)
        path_50657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2069, 30), os_50656, 'path')
        # Obtaining the member 'join' of a type (line 2069)
        join_50658 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2069, 30), path_50657, 'join')
        # Calling join(args, kwargs) (line 2069)
        join_call_result_50663 = invoke(stypy.reporting.localization.Localization(__file__, 2069, 30), join_50658, *[d_50659, str_50660, str_50661], **kwargs_50662)
        
        # Processing the call keyword arguments (line 2069)
        kwargs_50664 = {}
        # Getting the type of 'os' (line 2069)
        os_50653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2069, 15), 'os', False)
        # Obtaining the member 'path' of a type (line 2069)
        path_50654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2069, 15), os_50653, 'path')
        # Obtaining the member 'isfile' of a type (line 2069)
        isfile_50655 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2069, 15), path_50654, 'isfile')
        # Calling isfile(args, kwargs) (line 2069)
        isfile_call_result_50665 = invoke(stypy.reporting.localization.Localization(__file__, 2069, 15), isfile_50655, *[join_call_result_50663], **kwargs_50664)
        
        # Testing the type of an if condition (line 2069)
        if_condition_50666 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2069, 12), isfile_call_result_50665)
        # Assigning a type to the variable 'if_condition_50666' (line 2069)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2069, 12), 'if_condition_50666', if_condition_50666)
        # SSA begins for if statement (line 2069)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 2070):
        
        # Assigning a Name to a Name (line 2070):
        # Getting the type of 'd' (line 2070)
        d_50667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2070, 26), 'd')
        # Assigning a type to the variable 'src_dir' (line 2070)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2070, 16), 'src_dir', d_50667)
        # SSA join for if statement (line 2069)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'src_dir' (line 2072)
        src_dir_50668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2072, 15), 'src_dir')
        # Applying the 'not' unary operator (line 2072)
        result_not__50669 = python_operator(stypy.reporting.localization.Localization(__file__, 2072, 11), 'not', src_dir_50668)
        
        # Testing the type of an if condition (line 2072)
        if_condition_50670 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2072, 8), result_not__50669)
        # Assigning a type to the variable 'if_condition_50670' (line 2072)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2072, 8), 'if_condition_50670', if_condition_50670)
        # SSA begins for if statement (line 2072)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 2073)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2073, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 2072)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'sys' (line 2074)
        sys_50671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2074, 11), 'sys')
        # Obtaining the member 'platform' of a type (line 2074)
        platform_50672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2074, 11), sys_50671, 'platform')
        str_50673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2074, 27), 'str', 'win32')
        # Applying the binary operator '==' (line 2074)
        result_eq_50674 = python_operator(stypy.reporting.localization.Localization(__file__, 2074, 11), '==', platform_50672, str_50673)
        
        # Testing the type of an if condition (line 2074)
        if_condition_50675 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2074, 8), result_eq_50674)
        # Assigning a type to the variable 'if_condition_50675' (line 2074)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2074, 8), 'if_condition_50675', if_condition_50675)
        # SSA begins for if statement (line 2074)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2075):
        
        # Assigning a Call to a Name (line 2075):
        
        # Call to glob(...): (line 2075)
        # Processing the call arguments (line 2075)
        
        # Call to join(...): (line 2075)
        # Processing the call arguments (line 2075)
        # Getting the type of 'src_dir' (line 2075)
        src_dir_50680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2075, 42), 'src_dir', False)
        str_50681 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2075, 51), 'str', 'src')
        str_50682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2075, 58), 'str', 'platform')
        str_50683 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2076, 42), 'str', 'win32')
        str_50684 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2076, 51), 'str', 'agg_win32_bmp.cpp')
        # Processing the call keyword arguments (line 2075)
        kwargs_50685 = {}
        # Getting the type of 'os' (line 2075)
        os_50677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2075, 29), 'os', False)
        # Obtaining the member 'path' of a type (line 2075)
        path_50678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2075, 29), os_50677, 'path')
        # Obtaining the member 'join' of a type (line 2075)
        join_50679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2075, 29), path_50678, 'join')
        # Calling join(args, kwargs) (line 2075)
        join_call_result_50686 = invoke(stypy.reporting.localization.Localization(__file__, 2075, 29), join_50679, *[src_dir_50680, str_50681, str_50682, str_50683, str_50684], **kwargs_50685)
        
        # Processing the call keyword arguments (line 2075)
        kwargs_50687 = {}
        # Getting the type of 'glob' (line 2075)
        glob_50676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2075, 24), 'glob', False)
        # Calling glob(args, kwargs) (line 2075)
        glob_call_result_50688 = invoke(stypy.reporting.localization.Localization(__file__, 2075, 24), glob_50676, *[join_call_result_50686], **kwargs_50687)
        
        # Assigning a type to the variable 'agg2_srcs' (line 2075)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2075, 12), 'agg2_srcs', glob_call_result_50688)
        # SSA branch for the else part of an if statement (line 2074)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 2078):
        
        # Assigning a Call to a Name (line 2078):
        
        # Call to glob(...): (line 2078)
        # Processing the call arguments (line 2078)
        
        # Call to join(...): (line 2078)
        # Processing the call arguments (line 2078)
        # Getting the type of 'src_dir' (line 2078)
        src_dir_50693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2078, 42), 'src_dir', False)
        str_50694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2078, 51), 'str', 'src')
        str_50695 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2078, 58), 'str', '*.cpp')
        # Processing the call keyword arguments (line 2078)
        kwargs_50696 = {}
        # Getting the type of 'os' (line 2078)
        os_50690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2078, 29), 'os', False)
        # Obtaining the member 'path' of a type (line 2078)
        path_50691 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2078, 29), os_50690, 'path')
        # Obtaining the member 'join' of a type (line 2078)
        join_50692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2078, 29), path_50691, 'join')
        # Calling join(args, kwargs) (line 2078)
        join_call_result_50697 = invoke(stypy.reporting.localization.Localization(__file__, 2078, 29), join_50692, *[src_dir_50693, str_50694, str_50695], **kwargs_50696)
        
        # Processing the call keyword arguments (line 2078)
        kwargs_50698 = {}
        # Getting the type of 'glob' (line 2078)
        glob_50689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2078, 24), 'glob', False)
        # Calling glob(args, kwargs) (line 2078)
        glob_call_result_50699 = invoke(stypy.reporting.localization.Localization(__file__, 2078, 24), glob_50689, *[join_call_result_50697], **kwargs_50698)
        
        # Assigning a type to the variable 'agg2_srcs' (line 2078)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2078, 12), 'agg2_srcs', glob_call_result_50699)
        
        # Getting the type of 'agg2_srcs' (line 2079)
        agg2_srcs_50700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2079, 12), 'agg2_srcs')
        
        # Obtaining an instance of the builtin type 'list' (line 2079)
        list_50701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2079, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2079)
        # Adding element type (line 2079)
        
        # Call to join(...): (line 2079)
        # Processing the call arguments (line 2079)
        # Getting the type of 'src_dir' (line 2079)
        src_dir_50705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2079, 39), 'src_dir', False)
        str_50706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2079, 48), 'str', 'src')
        str_50707 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2079, 55), 'str', 'platform')
        str_50708 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2080, 39), 'str', 'X11')
        str_50709 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2081, 39), 'str', 'agg_platform_support.cpp')
        # Processing the call keyword arguments (line 2079)
        kwargs_50710 = {}
        # Getting the type of 'os' (line 2079)
        os_50702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2079, 26), 'os', False)
        # Obtaining the member 'path' of a type (line 2079)
        path_50703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2079, 26), os_50702, 'path')
        # Obtaining the member 'join' of a type (line 2079)
        join_50704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2079, 26), path_50703, 'join')
        # Calling join(args, kwargs) (line 2079)
        join_call_result_50711 = invoke(stypy.reporting.localization.Localization(__file__, 2079, 26), join_50704, *[src_dir_50705, str_50706, str_50707, str_50708, str_50709], **kwargs_50710)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2079, 25), list_50701, join_call_result_50711)
        
        # Applying the binary operator '+=' (line 2079)
        result_iadd_50712 = python_operator(stypy.reporting.localization.Localization(__file__, 2079, 12), '+=', agg2_srcs_50700, list_50701)
        # Assigning a type to the variable 'agg2_srcs' (line 2079)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2079, 12), 'agg2_srcs', result_iadd_50712)
        
        # SSA join for if statement (line 2074)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Dict to a Name (line 2083):
        
        # Assigning a Dict to a Name (line 2083):
        
        # Obtaining an instance of the builtin type 'dict' (line 2083)
        dict_50713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2083, 15), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 2083)
        # Adding element type (key, value) (line 2083)
        str_50714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2083, 16), 'str', 'libraries')
        
        # Obtaining an instance of the builtin type 'list' (line 2084)
        list_50715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2084, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2084)
        # Adding element type (line 2084)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2084)
        tuple_50716 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2084, 18), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2084)
        # Adding element type (line 2084)
        str_50717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2084, 18), 'str', 'agg2_src')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2084, 18), tuple_50716, str_50717)
        # Adding element type (line 2084)
        
        # Obtaining an instance of the builtin type 'dict' (line 2085)
        dict_50718 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2085, 18), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 2085)
        # Adding element type (key, value) (line 2085)
        str_50719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2085, 19), 'str', 'sources')
        # Getting the type of 'agg2_srcs' (line 2085)
        agg2_srcs_50720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2085, 30), 'agg2_srcs')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2085, 18), dict_50718, (str_50719, agg2_srcs_50720))
        # Adding element type (key, value) (line 2085)
        str_50721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2086, 19), 'str', 'include_dirs')
        
        # Obtaining an instance of the builtin type 'list' (line 2086)
        list_50722 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2086, 35), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2086)
        # Adding element type (line 2086)
        
        # Call to join(...): (line 2086)
        # Processing the call arguments (line 2086)
        # Getting the type of 'src_dir' (line 2086)
        src_dir_50726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2086, 49), 'src_dir', False)
        str_50727 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2086, 58), 'str', 'include')
        # Processing the call keyword arguments (line 2086)
        kwargs_50728 = {}
        # Getting the type of 'os' (line 2086)
        os_50723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2086, 36), 'os', False)
        # Obtaining the member 'path' of a type (line 2086)
        path_50724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2086, 36), os_50723, 'path')
        # Obtaining the member 'join' of a type (line 2086)
        join_50725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2086, 36), path_50724, 'join')
        # Calling join(args, kwargs) (line 2086)
        join_call_result_50729 = invoke(stypy.reporting.localization.Localization(__file__, 2086, 36), join_50725, *[src_dir_50726, str_50727], **kwargs_50728)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2086, 35), list_50722, join_call_result_50729)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2085, 18), dict_50718, (str_50721, list_50722))
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2084, 18), tuple_50716, dict_50718)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2084, 16), list_50715, tuple_50716)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2083, 15), dict_50713, (str_50714, list_50715))
        # Adding element type (key, value) (line 2083)
        str_50730 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2089, 16), 'str', 'include_dirs')
        
        # Obtaining an instance of the builtin type 'list' (line 2089)
        list_50731 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2089, 32), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2089)
        # Adding element type (line 2089)
        
        # Call to join(...): (line 2089)
        # Processing the call arguments (line 2089)
        # Getting the type of 'src_dir' (line 2089)
        src_dir_50735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2089, 46), 'src_dir', False)
        str_50736 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2089, 55), 'str', 'include')
        # Processing the call keyword arguments (line 2089)
        kwargs_50737 = {}
        # Getting the type of 'os' (line 2089)
        os_50732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2089, 33), 'os', False)
        # Obtaining the member 'path' of a type (line 2089)
        path_50733 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2089, 33), os_50732, 'path')
        # Obtaining the member 'join' of a type (line 2089)
        join_50734 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2089, 33), path_50733, 'join')
        # Calling join(args, kwargs) (line 2089)
        join_call_result_50738 = invoke(stypy.reporting.localization.Localization(__file__, 2089, 33), join_50734, *[src_dir_50735, str_50736], **kwargs_50737)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2089, 32), list_50731, join_call_result_50738)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2083, 15), dict_50713, (str_50730, list_50731))
        
        # Assigning a type to the variable 'info' (line 2083)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2083, 8), 'info', dict_50713)
        
        # Getting the type of 'info' (line 2091)
        info_50739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2091, 11), 'info')
        # Testing the type of an if condition (line 2091)
        if_condition_50740 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2091, 8), info_50739)
        # Assigning a type to the variable 'if_condition_50740' (line 2091)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2091, 8), 'if_condition_50740', if_condition_50740)
        # SSA begins for if statement (line 2091)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_info(...): (line 2092)
        # Processing the call keyword arguments (line 2092)
        # Getting the type of 'info' (line 2092)
        info_50743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2092, 28), 'info', False)
        kwargs_50744 = {'info_50743': info_50743}
        # Getting the type of 'self' (line 2092)
        self_50741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2092, 12), 'self', False)
        # Obtaining the member 'set_info' of a type (line 2092)
        set_info_50742 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2092, 12), self_50741, 'set_info')
        # Calling set_info(args, kwargs) (line 2092)
        set_info_call_result_50745 = invoke(stypy.reporting.localization.Localization(__file__, 2092, 12), set_info_50742, *[], **kwargs_50744)
        
        # SSA join for if statement (line 2091)
        module_type_store = module_type_store.join_ssa_context()
        
        # Assigning a type to the variable 'stypy_return_type' (line 2093)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2093, 8), 'stypy_return_type', types.NoneType)
        
        # ################# End of 'calc_info(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'calc_info' in the type store
        # Getting the type of 'stypy_return_type' (line 2065)
        stypy_return_type_50746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2065, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_50746)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'calc_info'
        return stypy_return_type_50746


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2054, 0, False)
        # Assigning a type to the variable 'self' (line 2055)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2055, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'agg2_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'agg2_info' (line 2054)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2054, 0), 'agg2_info', agg2_info)

# Assigning a Str to a Name (line 2055):
str_50747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2055, 14), 'str', 'agg2')
# Getting the type of 'agg2_info'
agg2_info_50748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'agg2_info')
# Setting the type of the member 'section' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), agg2_info_50748, 'section', str_50747)

# Assigning a Str to a Name (line 2056):
str_50749 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2056, 18), 'str', 'AGG2')
# Getting the type of 'agg2_info'
agg2_info_50750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'agg2_info')
# Setting the type of the member 'dir_env_var' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), agg2_info_50750, 'dir_env_var', str_50749)
# Declaration of the '_pkg_config_info' class
# Getting the type of 'system_info' (line 2096)
system_info_50751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2096, 23), 'system_info')

class _pkg_config_info(system_info_50751, ):
    
    # Assigning a Name to a Name (line 2097):
    
    # Assigning a Str to a Name (line 2098):
    
    # Assigning a Str to a Name (line 2099):
    
    # Assigning a Str to a Name (line 2100):
    
    # Assigning a Name to a Name (line 2101):
    
    # Assigning a Name to a Name (line 2102):
    
    # Assigning a Str to a Name (line 2103):
    
    # Assigning a Str to a Name (line 2104):

    @norecursion
    def get_config_exe(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_config_exe'
        module_type_store = module_type_store.open_function_context('get_config_exe', 2106, 4, False)
        # Assigning a type to the variable 'self' (line 2107)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2107, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _pkg_config_info.get_config_exe.__dict__.__setitem__('stypy_localization', localization)
        _pkg_config_info.get_config_exe.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _pkg_config_info.get_config_exe.__dict__.__setitem__('stypy_type_store', module_type_store)
        _pkg_config_info.get_config_exe.__dict__.__setitem__('stypy_function_name', '_pkg_config_info.get_config_exe')
        _pkg_config_info.get_config_exe.__dict__.__setitem__('stypy_param_names_list', [])
        _pkg_config_info.get_config_exe.__dict__.__setitem__('stypy_varargs_param_name', None)
        _pkg_config_info.get_config_exe.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _pkg_config_info.get_config_exe.__dict__.__setitem__('stypy_call_defaults', defaults)
        _pkg_config_info.get_config_exe.__dict__.__setitem__('stypy_call_varargs', varargs)
        _pkg_config_info.get_config_exe.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _pkg_config_info.get_config_exe.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_pkg_config_info.get_config_exe', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_config_exe', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_config_exe(...)' code ##################

        
        
        # Getting the type of 'self' (line 2107)
        self_50752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2107, 11), 'self')
        # Obtaining the member 'config_env_var' of a type (line 2107)
        config_env_var_50753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2107, 11), self_50752, 'config_env_var')
        # Getting the type of 'os' (line 2107)
        os_50754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2107, 34), 'os')
        # Obtaining the member 'environ' of a type (line 2107)
        environ_50755 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2107, 34), os_50754, 'environ')
        # Applying the binary operator 'in' (line 2107)
        result_contains_50756 = python_operator(stypy.reporting.localization.Localization(__file__, 2107, 11), 'in', config_env_var_50753, environ_50755)
        
        # Testing the type of an if condition (line 2107)
        if_condition_50757 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2107, 8), result_contains_50756)
        # Assigning a type to the variable 'if_condition_50757' (line 2107)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2107, 8), 'if_condition_50757', if_condition_50757)
        # SSA begins for if statement (line 2107)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining the type of the subscript
        # Getting the type of 'self' (line 2108)
        self_50758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2108, 30), 'self')
        # Obtaining the member 'config_env_var' of a type (line 2108)
        config_env_var_50759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2108, 30), self_50758, 'config_env_var')
        # Getting the type of 'os' (line 2108)
        os_50760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2108, 19), 'os')
        # Obtaining the member 'environ' of a type (line 2108)
        environ_50761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2108, 19), os_50760, 'environ')
        # Obtaining the member '__getitem__' of a type (line 2108)
        getitem___50762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2108, 19), environ_50761, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2108)
        subscript_call_result_50763 = invoke(stypy.reporting.localization.Localization(__file__, 2108, 19), getitem___50762, config_env_var_50759)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2108)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2108, 12), 'stypy_return_type', subscript_call_result_50763)
        # SSA join for if statement (line 2107)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'self' (line 2109)
        self_50764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2109, 15), 'self')
        # Obtaining the member 'default_config_exe' of a type (line 2109)
        default_config_exe_50765 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2109, 15), self_50764, 'default_config_exe')
        # Assigning a type to the variable 'stypy_return_type' (line 2109)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2109, 8), 'stypy_return_type', default_config_exe_50765)
        
        # ################# End of 'get_config_exe(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_config_exe' in the type store
        # Getting the type of 'stypy_return_type' (line 2106)
        stypy_return_type_50766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2106, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_50766)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_config_exe'
        return stypy_return_type_50766


    @norecursion
    def get_config_output(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_config_output'
        module_type_store = module_type_store.open_function_context('get_config_output', 2111, 4, False)
        # Assigning a type to the variable 'self' (line 2112)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2112, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _pkg_config_info.get_config_output.__dict__.__setitem__('stypy_localization', localization)
        _pkg_config_info.get_config_output.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _pkg_config_info.get_config_output.__dict__.__setitem__('stypy_type_store', module_type_store)
        _pkg_config_info.get_config_output.__dict__.__setitem__('stypy_function_name', '_pkg_config_info.get_config_output')
        _pkg_config_info.get_config_output.__dict__.__setitem__('stypy_param_names_list', ['config_exe', 'option'])
        _pkg_config_info.get_config_output.__dict__.__setitem__('stypy_varargs_param_name', None)
        _pkg_config_info.get_config_output.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _pkg_config_info.get_config_output.__dict__.__setitem__('stypy_call_defaults', defaults)
        _pkg_config_info.get_config_output.__dict__.__setitem__('stypy_call_varargs', varargs)
        _pkg_config_info.get_config_output.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _pkg_config_info.get_config_output.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_pkg_config_info.get_config_output', ['config_exe', 'option'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_config_output', localization, ['config_exe', 'option'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_config_output(...)' code ##################

        
        # Assigning a BinOp to a Name (line 2112):
        
        # Assigning a BinOp to a Name (line 2112):
        # Getting the type of 'config_exe' (line 2112)
        config_exe_50767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2112, 14), 'config_exe')
        str_50768 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2112, 27), 'str', ' ')
        # Applying the binary operator '+' (line 2112)
        result_add_50769 = python_operator(stypy.reporting.localization.Localization(__file__, 2112, 14), '+', config_exe_50767, str_50768)
        
        # Getting the type of 'self' (line 2112)
        self_50770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2112, 33), 'self')
        # Obtaining the member 'append_config_exe' of a type (line 2112)
        append_config_exe_50771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2112, 33), self_50770, 'append_config_exe')
        # Applying the binary operator '+' (line 2112)
        result_add_50772 = python_operator(stypy.reporting.localization.Localization(__file__, 2112, 31), '+', result_add_50769, append_config_exe_50771)
        
        str_50773 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2112, 58), 'str', ' ')
        # Applying the binary operator '+' (line 2112)
        result_add_50774 = python_operator(stypy.reporting.localization.Localization(__file__, 2112, 56), '+', result_add_50772, str_50773)
        
        # Getting the type of 'option' (line 2112)
        option_50775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2112, 64), 'option')
        # Applying the binary operator '+' (line 2112)
        result_add_50776 = python_operator(stypy.reporting.localization.Localization(__file__, 2112, 62), '+', result_add_50774, option_50775)
        
        # Assigning a type to the variable 'cmd' (line 2112)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2112, 8), 'cmd', result_add_50776)
        
        # Assigning a Call to a Tuple (line 2113):
        
        # Assigning a Call to a Name:
        
        # Call to exec_command(...): (line 2113)
        # Processing the call arguments (line 2113)
        # Getting the type of 'cmd' (line 2113)
        cmd_50778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2113, 28), 'cmd', False)
        # Processing the call keyword arguments (line 2113)
        int_50779 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2113, 41), 'int')
        keyword_50780 = int_50779
        kwargs_50781 = {'use_tee': keyword_50780}
        # Getting the type of 'exec_command' (line 2113)
        exec_command_50777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2113, 15), 'exec_command', False)
        # Calling exec_command(args, kwargs) (line 2113)
        exec_command_call_result_50782 = invoke(stypy.reporting.localization.Localization(__file__, 2113, 15), exec_command_50777, *[cmd_50778], **kwargs_50781)
        
        # Assigning a type to the variable 'call_assignment_45351' (line 2113)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2113, 8), 'call_assignment_45351', exec_command_call_result_50782)
        
        # Assigning a Call to a Name (line 2113):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_50785 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2113, 8), 'int')
        # Processing the call keyword arguments
        kwargs_50786 = {}
        # Getting the type of 'call_assignment_45351' (line 2113)
        call_assignment_45351_50783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2113, 8), 'call_assignment_45351', False)
        # Obtaining the member '__getitem__' of a type (line 2113)
        getitem___50784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2113, 8), call_assignment_45351_50783, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_50787 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___50784, *[int_50785], **kwargs_50786)
        
        # Assigning a type to the variable 'call_assignment_45352' (line 2113)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2113, 8), 'call_assignment_45352', getitem___call_result_50787)
        
        # Assigning a Name to a Name (line 2113):
        # Getting the type of 'call_assignment_45352' (line 2113)
        call_assignment_45352_50788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2113, 8), 'call_assignment_45352')
        # Assigning a type to the variable 's' (line 2113)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2113, 8), 's', call_assignment_45352_50788)
        
        # Assigning a Call to a Name (line 2113):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_50791 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2113, 8), 'int')
        # Processing the call keyword arguments
        kwargs_50792 = {}
        # Getting the type of 'call_assignment_45351' (line 2113)
        call_assignment_45351_50789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2113, 8), 'call_assignment_45351', False)
        # Obtaining the member '__getitem__' of a type (line 2113)
        getitem___50790 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2113, 8), call_assignment_45351_50789, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_50793 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___50790, *[int_50791], **kwargs_50792)
        
        # Assigning a type to the variable 'call_assignment_45353' (line 2113)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2113, 8), 'call_assignment_45353', getitem___call_result_50793)
        
        # Assigning a Name to a Name (line 2113):
        # Getting the type of 'call_assignment_45353' (line 2113)
        call_assignment_45353_50794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2113, 8), 'call_assignment_45353')
        # Assigning a type to the variable 'o' (line 2113)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2113, 11), 'o', call_assignment_45353_50794)
        
        
        # Getting the type of 's' (line 2114)
        s_50795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2114, 15), 's')
        # Applying the 'not' unary operator (line 2114)
        result_not__50796 = python_operator(stypy.reporting.localization.Localization(__file__, 2114, 11), 'not', s_50795)
        
        # Testing the type of an if condition (line 2114)
        if_condition_50797 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2114, 8), result_not__50796)
        # Assigning a type to the variable 'if_condition_50797' (line 2114)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2114, 8), 'if_condition_50797', if_condition_50797)
        # SSA begins for if statement (line 2114)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'o' (line 2115)
        o_50798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2115, 19), 'o')
        # Assigning a type to the variable 'stypy_return_type' (line 2115)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2115, 12), 'stypy_return_type', o_50798)
        # SSA join for if statement (line 2114)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'get_config_output(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_config_output' in the type store
        # Getting the type of 'stypy_return_type' (line 2111)
        stypy_return_type_50799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_50799)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_config_output'
        return stypy_return_type_50799


    @norecursion
    def calc_info(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'calc_info'
        module_type_store = module_type_store.open_function_context('calc_info', 2117, 4, False)
        # Assigning a type to the variable 'self' (line 2118)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2118, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _pkg_config_info.calc_info.__dict__.__setitem__('stypy_localization', localization)
        _pkg_config_info.calc_info.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _pkg_config_info.calc_info.__dict__.__setitem__('stypy_type_store', module_type_store)
        _pkg_config_info.calc_info.__dict__.__setitem__('stypy_function_name', '_pkg_config_info.calc_info')
        _pkg_config_info.calc_info.__dict__.__setitem__('stypy_param_names_list', [])
        _pkg_config_info.calc_info.__dict__.__setitem__('stypy_varargs_param_name', None)
        _pkg_config_info.calc_info.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _pkg_config_info.calc_info.__dict__.__setitem__('stypy_call_defaults', defaults)
        _pkg_config_info.calc_info.__dict__.__setitem__('stypy_call_varargs', varargs)
        _pkg_config_info.calc_info.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _pkg_config_info.calc_info.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_pkg_config_info.calc_info', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'calc_info', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'calc_info(...)' code ##################

        
        # Assigning a Call to a Name (line 2118):
        
        # Assigning a Call to a Name (line 2118):
        
        # Call to find_executable(...): (line 2118)
        # Processing the call arguments (line 2118)
        
        # Call to get_config_exe(...): (line 2118)
        # Processing the call keyword arguments (line 2118)
        kwargs_50803 = {}
        # Getting the type of 'self' (line 2118)
        self_50801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2118, 37), 'self', False)
        # Obtaining the member 'get_config_exe' of a type (line 2118)
        get_config_exe_50802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2118, 37), self_50801, 'get_config_exe')
        # Calling get_config_exe(args, kwargs) (line 2118)
        get_config_exe_call_result_50804 = invoke(stypy.reporting.localization.Localization(__file__, 2118, 37), get_config_exe_50802, *[], **kwargs_50803)
        
        # Processing the call keyword arguments (line 2118)
        kwargs_50805 = {}
        # Getting the type of 'find_executable' (line 2118)
        find_executable_50800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2118, 21), 'find_executable', False)
        # Calling find_executable(args, kwargs) (line 2118)
        find_executable_call_result_50806 = invoke(stypy.reporting.localization.Localization(__file__, 2118, 21), find_executable_50800, *[get_config_exe_call_result_50804], **kwargs_50805)
        
        # Assigning a type to the variable 'config_exe' (line 2118)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2118, 8), 'config_exe', find_executable_call_result_50806)
        
        
        # Getting the type of 'config_exe' (line 2119)
        config_exe_50807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2119, 15), 'config_exe')
        # Applying the 'not' unary operator (line 2119)
        result_not__50808 = python_operator(stypy.reporting.localization.Localization(__file__, 2119, 11), 'not', config_exe_50807)
        
        # Testing the type of an if condition (line 2119)
        if_condition_50809 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2119, 8), result_not__50808)
        # Assigning a type to the variable 'if_condition_50809' (line 2119)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2119, 8), 'if_condition_50809', if_condition_50809)
        # SSA begins for if statement (line 2119)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 2120)
        # Processing the call arguments (line 2120)
        str_50812 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2120, 21), 'str', 'File not found: %s. Cannot determine %s info.')
        
        # Obtaining an instance of the builtin type 'tuple' (line 2121)
        tuple_50813 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2121, 21), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2121)
        # Adding element type (line 2121)
        # Getting the type of 'config_exe' (line 2121)
        config_exe_50814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2121, 21), 'config_exe', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2121, 21), tuple_50813, config_exe_50814)
        # Adding element type (line 2121)
        # Getting the type of 'self' (line 2121)
        self_50815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2121, 33), 'self', False)
        # Obtaining the member 'section' of a type (line 2121)
        section_50816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2121, 33), self_50815, 'section')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2121, 21), tuple_50813, section_50816)
        
        # Applying the binary operator '%' (line 2120)
        result_mod_50817 = python_operator(stypy.reporting.localization.Localization(__file__, 2120, 21), '%', str_50812, tuple_50813)
        
        # Processing the call keyword arguments (line 2120)
        kwargs_50818 = {}
        # Getting the type of 'log' (line 2120)
        log_50810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2120, 12), 'log', False)
        # Obtaining the member 'warn' of a type (line 2120)
        warn_50811 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2120, 12), log_50810, 'warn')
        # Calling warn(args, kwargs) (line 2120)
        warn_call_result_50819 = invoke(stypy.reporting.localization.Localization(__file__, 2120, 12), warn_50811, *[result_mod_50817], **kwargs_50818)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2122)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2122, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 2119)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Dict to a Name (line 2123):
        
        # Assigning a Dict to a Name (line 2123):
        
        # Obtaining an instance of the builtin type 'dict' (line 2123)
        dict_50820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2123, 15), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 2123)
        
        # Assigning a type to the variable 'info' (line 2123)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2123, 8), 'info', dict_50820)
        
        # Assigning a List to a Name (line 2124):
        
        # Assigning a List to a Name (line 2124):
        
        # Obtaining an instance of the builtin type 'list' (line 2124)
        list_50821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2124, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2124)
        
        # Assigning a type to the variable 'macros' (line 2124)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2124, 8), 'macros', list_50821)
        
        # Assigning a List to a Name (line 2125):
        
        # Assigning a List to a Name (line 2125):
        
        # Obtaining an instance of the builtin type 'list' (line 2125)
        list_50822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2125, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2125)
        
        # Assigning a type to the variable 'libraries' (line 2125)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2125, 8), 'libraries', list_50822)
        
        # Assigning a List to a Name (line 2126):
        
        # Assigning a List to a Name (line 2126):
        
        # Obtaining an instance of the builtin type 'list' (line 2126)
        list_50823 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2126, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2126)
        
        # Assigning a type to the variable 'library_dirs' (line 2126)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2126, 8), 'library_dirs', list_50823)
        
        # Assigning a List to a Name (line 2127):
        
        # Assigning a List to a Name (line 2127):
        
        # Obtaining an instance of the builtin type 'list' (line 2127)
        list_50824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2127, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2127)
        
        # Assigning a type to the variable 'include_dirs' (line 2127)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2127, 8), 'include_dirs', list_50824)
        
        # Assigning a List to a Name (line 2128):
        
        # Assigning a List to a Name (line 2128):
        
        # Obtaining an instance of the builtin type 'list' (line 2128)
        list_50825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2128, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2128)
        
        # Assigning a type to the variable 'extra_link_args' (line 2128)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2128, 8), 'extra_link_args', list_50825)
        
        # Assigning a List to a Name (line 2129):
        
        # Assigning a List to a Name (line 2129):
        
        # Obtaining an instance of the builtin type 'list' (line 2129)
        list_50826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2129, 29), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2129)
        
        # Assigning a type to the variable 'extra_compile_args' (line 2129)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2129, 8), 'extra_compile_args', list_50826)
        
        # Assigning a Call to a Name (line 2130):
        
        # Assigning a Call to a Name (line 2130):
        
        # Call to get_config_output(...): (line 2130)
        # Processing the call arguments (line 2130)
        # Getting the type of 'config_exe' (line 2130)
        config_exe_50829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2130, 41), 'config_exe', False)
        # Getting the type of 'self' (line 2130)
        self_50830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2130, 53), 'self', False)
        # Obtaining the member 'version_flag' of a type (line 2130)
        version_flag_50831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2130, 53), self_50830, 'version_flag')
        # Processing the call keyword arguments (line 2130)
        kwargs_50832 = {}
        # Getting the type of 'self' (line 2130)
        self_50827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2130, 18), 'self', False)
        # Obtaining the member 'get_config_output' of a type (line 2130)
        get_config_output_50828 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2130, 18), self_50827, 'get_config_output')
        # Calling get_config_output(args, kwargs) (line 2130)
        get_config_output_call_result_50833 = invoke(stypy.reporting.localization.Localization(__file__, 2130, 18), get_config_output_50828, *[config_exe_50829, version_flag_50831], **kwargs_50832)
        
        # Assigning a type to the variable 'version' (line 2130)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2130, 8), 'version', get_config_output_call_result_50833)
        
        # Getting the type of 'version' (line 2131)
        version_50834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2131, 11), 'version')
        # Testing the type of an if condition (line 2131)
        if_condition_50835 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2131, 8), version_50834)
        # Assigning a type to the variable 'if_condition_50835' (line 2131)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2131, 8), 'if_condition_50835', if_condition_50835)
        # SSA begins for if statement (line 2131)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 2132)
        # Processing the call arguments (line 2132)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2132)
        tuple_50838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2132, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2132)
        # Adding element type (line 2132)
        
        # Call to upper(...): (line 2132)
        # Processing the call keyword arguments (line 2132)
        kwargs_50850 = {}
        
        # Obtaining the type of the subscript
        int_50839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2132, 62), 'int')
        
        # Call to split(...): (line 2132)
        # Processing the call arguments (line 2132)
        str_50844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2132, 57), 'str', '.')
        # Processing the call keyword arguments (line 2132)
        kwargs_50845 = {}
        # Getting the type of 'self' (line 2132)
        self_50840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2132, 27), 'self', False)
        # Obtaining the member '__class__' of a type (line 2132)
        class___50841 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2132, 27), self_50840, '__class__')
        # Obtaining the member '__name__' of a type (line 2132)
        name___50842 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2132, 27), class___50841, '__name__')
        # Obtaining the member 'split' of a type (line 2132)
        split_50843 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2132, 27), name___50842, 'split')
        # Calling split(args, kwargs) (line 2132)
        split_call_result_50846 = invoke(stypy.reporting.localization.Localization(__file__, 2132, 27), split_50843, *[str_50844], **kwargs_50845)
        
        # Obtaining the member '__getitem__' of a type (line 2132)
        getitem___50847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2132, 27), split_call_result_50846, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2132)
        subscript_call_result_50848 = invoke(stypy.reporting.localization.Localization(__file__, 2132, 27), getitem___50847, int_50839)
        
        # Obtaining the member 'upper' of a type (line 2132)
        upper_50849 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2132, 27), subscript_call_result_50848, 'upper')
        # Calling upper(args, kwargs) (line 2132)
        upper_call_result_50851 = invoke(stypy.reporting.localization.Localization(__file__, 2132, 27), upper_50849, *[], **kwargs_50850)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2132, 27), tuple_50838, upper_call_result_50851)
        # Adding element type (line 2132)
        str_50852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2133, 27), 'str', '"\\"%s\\""')
        # Getting the type of 'version' (line 2133)
        version_50853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2133, 43), 'version', False)
        # Applying the binary operator '%' (line 2133)
        result_mod_50854 = python_operator(stypy.reporting.localization.Localization(__file__, 2133, 27), '%', str_50852, version_50853)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2132, 27), tuple_50838, result_mod_50854)
        
        # Processing the call keyword arguments (line 2132)
        kwargs_50855 = {}
        # Getting the type of 'macros' (line 2132)
        macros_50836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2132, 12), 'macros', False)
        # Obtaining the member 'append' of a type (line 2132)
        append_50837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2132, 12), macros_50836, 'append')
        # Calling append(args, kwargs) (line 2132)
        append_call_result_50856 = invoke(stypy.reporting.localization.Localization(__file__, 2132, 12), append_50837, *[tuple_50838], **kwargs_50855)
        
        
        # Getting the type of 'self' (line 2134)
        self_50857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2134, 15), 'self')
        # Obtaining the member 'version_macro_name' of a type (line 2134)
        version_macro_name_50858 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2134, 15), self_50857, 'version_macro_name')
        # Testing the type of an if condition (line 2134)
        if_condition_50859 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2134, 12), version_macro_name_50858)
        # Assigning a type to the variable 'if_condition_50859' (line 2134)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2134, 12), 'if_condition_50859', if_condition_50859)
        # SSA begins for if statement (line 2134)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 2135)
        # Processing the call arguments (line 2135)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2135)
        tuple_50862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2135, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2135)
        # Adding element type (line 2135)
        # Getting the type of 'self' (line 2135)
        self_50863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2135, 31), 'self', False)
        # Obtaining the member 'version_macro_name' of a type (line 2135)
        version_macro_name_50864 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2135, 31), self_50863, 'version_macro_name')
        str_50865 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2135, 57), 'str', '_%s')
        
        # Call to replace(...): (line 2136)
        # Processing the call arguments (line 2136)
        str_50868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2136, 50), 'str', '.')
        str_50869 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2136, 55), 'str', '_')
        # Processing the call keyword arguments (line 2136)
        kwargs_50870 = {}
        # Getting the type of 'version' (line 2136)
        version_50866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2136, 34), 'version', False)
        # Obtaining the member 'replace' of a type (line 2136)
        replace_50867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2136, 34), version_50866, 'replace')
        # Calling replace(args, kwargs) (line 2136)
        replace_call_result_50871 = invoke(stypy.reporting.localization.Localization(__file__, 2136, 34), replace_50867, *[str_50868, str_50869], **kwargs_50870)
        
        # Applying the binary operator '%' (line 2135)
        result_mod_50872 = python_operator(stypy.reporting.localization.Localization(__file__, 2135, 57), '%', str_50865, replace_call_result_50871)
        
        # Applying the binary operator '+' (line 2135)
        result_add_50873 = python_operator(stypy.reporting.localization.Localization(__file__, 2135, 31), '+', version_macro_name_50864, result_mod_50872)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2135, 31), tuple_50862, result_add_50873)
        # Adding element type (line 2135)
        # Getting the type of 'None' (line 2136)
        None_50874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2136, 62), 'None', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2135, 31), tuple_50862, None_50874)
        
        # Processing the call keyword arguments (line 2135)
        kwargs_50875 = {}
        # Getting the type of 'macros' (line 2135)
        macros_50860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2135, 16), 'macros', False)
        # Obtaining the member 'append' of a type (line 2135)
        append_50861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2135, 16), macros_50860, 'append')
        # Calling append(args, kwargs) (line 2135)
        append_call_result_50876 = invoke(stypy.reporting.localization.Localization(__file__, 2135, 16), append_50861, *[tuple_50862], **kwargs_50875)
        
        # SSA join for if statement (line 2134)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2131)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 2137)
        self_50877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2137, 11), 'self')
        # Obtaining the member 'release_macro_name' of a type (line 2137)
        release_macro_name_50878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2137, 11), self_50877, 'release_macro_name')
        # Testing the type of an if condition (line 2137)
        if_condition_50879 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2137, 8), release_macro_name_50878)
        # Assigning a type to the variable 'if_condition_50879' (line 2137)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2137, 8), 'if_condition_50879', if_condition_50879)
        # SSA begins for if statement (line 2137)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2138):
        
        # Assigning a Call to a Name (line 2138):
        
        # Call to get_config_output(...): (line 2138)
        # Processing the call arguments (line 2138)
        # Getting the type of 'config_exe' (line 2138)
        config_exe_50882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2138, 45), 'config_exe', False)
        str_50883 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2138, 57), 'str', '--release')
        # Processing the call keyword arguments (line 2138)
        kwargs_50884 = {}
        # Getting the type of 'self' (line 2138)
        self_50880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2138, 22), 'self', False)
        # Obtaining the member 'get_config_output' of a type (line 2138)
        get_config_output_50881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2138, 22), self_50880, 'get_config_output')
        # Calling get_config_output(args, kwargs) (line 2138)
        get_config_output_call_result_50885 = invoke(stypy.reporting.localization.Localization(__file__, 2138, 22), get_config_output_50881, *[config_exe_50882, str_50883], **kwargs_50884)
        
        # Assigning a type to the variable 'release' (line 2138)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2138, 12), 'release', get_config_output_call_result_50885)
        
        # Getting the type of 'release' (line 2139)
        release_50886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2139, 15), 'release')
        # Testing the type of an if condition (line 2139)
        if_condition_50887 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2139, 12), release_50886)
        # Assigning a type to the variable 'if_condition_50887' (line 2139)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2139, 12), 'if_condition_50887', if_condition_50887)
        # SSA begins for if statement (line 2139)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 2140)
        # Processing the call arguments (line 2140)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2140)
        tuple_50890 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2140, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2140)
        # Adding element type (line 2140)
        # Getting the type of 'self' (line 2140)
        self_50891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2140, 31), 'self', False)
        # Obtaining the member 'release_macro_name' of a type (line 2140)
        release_macro_name_50892 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2140, 31), self_50891, 'release_macro_name')
        str_50893 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2140, 57), 'str', '_%s')
        
        # Call to replace(...): (line 2141)
        # Processing the call arguments (line 2141)
        str_50896 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2141, 50), 'str', '.')
        str_50897 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2141, 55), 'str', '_')
        # Processing the call keyword arguments (line 2141)
        kwargs_50898 = {}
        # Getting the type of 'release' (line 2141)
        release_50894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2141, 34), 'release', False)
        # Obtaining the member 'replace' of a type (line 2141)
        replace_50895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2141, 34), release_50894, 'replace')
        # Calling replace(args, kwargs) (line 2141)
        replace_call_result_50899 = invoke(stypy.reporting.localization.Localization(__file__, 2141, 34), replace_50895, *[str_50896, str_50897], **kwargs_50898)
        
        # Applying the binary operator '%' (line 2140)
        result_mod_50900 = python_operator(stypy.reporting.localization.Localization(__file__, 2140, 57), '%', str_50893, replace_call_result_50899)
        
        # Applying the binary operator '+' (line 2140)
        result_add_50901 = python_operator(stypy.reporting.localization.Localization(__file__, 2140, 31), '+', release_macro_name_50892, result_mod_50900)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2140, 31), tuple_50890, result_add_50901)
        # Adding element type (line 2140)
        # Getting the type of 'None' (line 2141)
        None_50902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2141, 62), 'None', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2140, 31), tuple_50890, None_50902)
        
        # Processing the call keyword arguments (line 2140)
        kwargs_50903 = {}
        # Getting the type of 'macros' (line 2140)
        macros_50888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2140, 16), 'macros', False)
        # Obtaining the member 'append' of a type (line 2140)
        append_50889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2140, 16), macros_50888, 'append')
        # Calling append(args, kwargs) (line 2140)
        append_call_result_50904 = invoke(stypy.reporting.localization.Localization(__file__, 2140, 16), append_50889, *[tuple_50890], **kwargs_50903)
        
        # SSA join for if statement (line 2139)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2137)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 2142):
        
        # Assigning a Call to a Name (line 2142):
        
        # Call to get_config_output(...): (line 2142)
        # Processing the call arguments (line 2142)
        # Getting the type of 'config_exe' (line 2142)
        config_exe_50907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2142, 38), 'config_exe', False)
        str_50908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2142, 50), 'str', '--libs')
        # Processing the call keyword arguments (line 2142)
        kwargs_50909 = {}
        # Getting the type of 'self' (line 2142)
        self_50905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2142, 15), 'self', False)
        # Obtaining the member 'get_config_output' of a type (line 2142)
        get_config_output_50906 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2142, 15), self_50905, 'get_config_output')
        # Calling get_config_output(args, kwargs) (line 2142)
        get_config_output_call_result_50910 = invoke(stypy.reporting.localization.Localization(__file__, 2142, 15), get_config_output_50906, *[config_exe_50907, str_50908], **kwargs_50909)
        
        # Assigning a type to the variable 'opts' (line 2142)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2142, 8), 'opts', get_config_output_call_result_50910)
        
        # Getting the type of 'opts' (line 2143)
        opts_50911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2143, 11), 'opts')
        # Testing the type of an if condition (line 2143)
        if_condition_50912 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2143, 8), opts_50911)
        # Assigning a type to the variable 'if_condition_50912' (line 2143)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2143, 8), 'if_condition_50912', if_condition_50912)
        # SSA begins for if statement (line 2143)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to split(...): (line 2144)
        # Processing the call keyword arguments (line 2144)
        kwargs_50915 = {}
        # Getting the type of 'opts' (line 2144)
        opts_50913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2144, 23), 'opts', False)
        # Obtaining the member 'split' of a type (line 2144)
        split_50914 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2144, 23), opts_50913, 'split')
        # Calling split(args, kwargs) (line 2144)
        split_call_result_50916 = invoke(stypy.reporting.localization.Localization(__file__, 2144, 23), split_50914, *[], **kwargs_50915)
        
        # Testing the type of a for loop iterable (line 2144)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2144, 12), split_call_result_50916)
        # Getting the type of the for loop variable (line 2144)
        for_loop_var_50917 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2144, 12), split_call_result_50916)
        # Assigning a type to the variable 'opt' (line 2144)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2144, 12), 'opt', for_loop_var_50917)
        # SSA begins for a for statement (line 2144)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        
        # Obtaining the type of the subscript
        int_50918 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2145, 24), 'int')
        slice_50919 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2145, 19), None, int_50918, None)
        # Getting the type of 'opt' (line 2145)
        opt_50920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2145, 19), 'opt')
        # Obtaining the member '__getitem__' of a type (line 2145)
        getitem___50921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2145, 19), opt_50920, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2145)
        subscript_call_result_50922 = invoke(stypy.reporting.localization.Localization(__file__, 2145, 19), getitem___50921, slice_50919)
        
        str_50923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2145, 30), 'str', '-l')
        # Applying the binary operator '==' (line 2145)
        result_eq_50924 = python_operator(stypy.reporting.localization.Localization(__file__, 2145, 19), '==', subscript_call_result_50922, str_50923)
        
        # Testing the type of an if condition (line 2145)
        if_condition_50925 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2145, 16), result_eq_50924)
        # Assigning a type to the variable 'if_condition_50925' (line 2145)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2145, 16), 'if_condition_50925', if_condition_50925)
        # SSA begins for if statement (line 2145)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 2146)
        # Processing the call arguments (line 2146)
        
        # Obtaining the type of the subscript
        int_50928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2146, 41), 'int')
        slice_50929 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2146, 37), int_50928, None, None)
        # Getting the type of 'opt' (line 2146)
        opt_50930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2146, 37), 'opt', False)
        # Obtaining the member '__getitem__' of a type (line 2146)
        getitem___50931 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2146, 37), opt_50930, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2146)
        subscript_call_result_50932 = invoke(stypy.reporting.localization.Localization(__file__, 2146, 37), getitem___50931, slice_50929)
        
        # Processing the call keyword arguments (line 2146)
        kwargs_50933 = {}
        # Getting the type of 'libraries' (line 2146)
        libraries_50926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2146, 20), 'libraries', False)
        # Obtaining the member 'append' of a type (line 2146)
        append_50927 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2146, 20), libraries_50926, 'append')
        # Calling append(args, kwargs) (line 2146)
        append_call_result_50934 = invoke(stypy.reporting.localization.Localization(__file__, 2146, 20), append_50927, *[subscript_call_result_50932], **kwargs_50933)
        
        # SSA branch for the else part of an if statement (line 2145)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Obtaining the type of the subscript
        int_50935 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2147, 26), 'int')
        slice_50936 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2147, 21), None, int_50935, None)
        # Getting the type of 'opt' (line 2147)
        opt_50937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2147, 21), 'opt')
        # Obtaining the member '__getitem__' of a type (line 2147)
        getitem___50938 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2147, 21), opt_50937, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2147)
        subscript_call_result_50939 = invoke(stypy.reporting.localization.Localization(__file__, 2147, 21), getitem___50938, slice_50936)
        
        str_50940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2147, 32), 'str', '-L')
        # Applying the binary operator '==' (line 2147)
        result_eq_50941 = python_operator(stypy.reporting.localization.Localization(__file__, 2147, 21), '==', subscript_call_result_50939, str_50940)
        
        # Testing the type of an if condition (line 2147)
        if_condition_50942 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2147, 21), result_eq_50941)
        # Assigning a type to the variable 'if_condition_50942' (line 2147)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2147, 21), 'if_condition_50942', if_condition_50942)
        # SSA begins for if statement (line 2147)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 2148)
        # Processing the call arguments (line 2148)
        
        # Obtaining the type of the subscript
        int_50945 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2148, 44), 'int')
        slice_50946 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2148, 40), int_50945, None, None)
        # Getting the type of 'opt' (line 2148)
        opt_50947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2148, 40), 'opt', False)
        # Obtaining the member '__getitem__' of a type (line 2148)
        getitem___50948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2148, 40), opt_50947, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2148)
        subscript_call_result_50949 = invoke(stypy.reporting.localization.Localization(__file__, 2148, 40), getitem___50948, slice_50946)
        
        # Processing the call keyword arguments (line 2148)
        kwargs_50950 = {}
        # Getting the type of 'library_dirs' (line 2148)
        library_dirs_50943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2148, 20), 'library_dirs', False)
        # Obtaining the member 'append' of a type (line 2148)
        append_50944 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2148, 20), library_dirs_50943, 'append')
        # Calling append(args, kwargs) (line 2148)
        append_call_result_50951 = invoke(stypy.reporting.localization.Localization(__file__, 2148, 20), append_50944, *[subscript_call_result_50949], **kwargs_50950)
        
        # SSA branch for the else part of an if statement (line 2147)
        module_type_store.open_ssa_branch('else')
        
        # Call to append(...): (line 2150)
        # Processing the call arguments (line 2150)
        # Getting the type of 'opt' (line 2150)
        opt_50954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2150, 43), 'opt', False)
        # Processing the call keyword arguments (line 2150)
        kwargs_50955 = {}
        # Getting the type of 'extra_link_args' (line 2150)
        extra_link_args_50952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2150, 20), 'extra_link_args', False)
        # Obtaining the member 'append' of a type (line 2150)
        append_50953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2150, 20), extra_link_args_50952, 'append')
        # Calling append(args, kwargs) (line 2150)
        append_call_result_50956 = invoke(stypy.reporting.localization.Localization(__file__, 2150, 20), append_50953, *[opt_50954], **kwargs_50955)
        
        # SSA join for if statement (line 2147)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2145)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2143)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 2151):
        
        # Assigning a Call to a Name (line 2151):
        
        # Call to get_config_output(...): (line 2151)
        # Processing the call arguments (line 2151)
        # Getting the type of 'config_exe' (line 2151)
        config_exe_50959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2151, 38), 'config_exe', False)
        # Getting the type of 'self' (line 2151)
        self_50960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2151, 50), 'self', False)
        # Obtaining the member 'cflags_flag' of a type (line 2151)
        cflags_flag_50961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2151, 50), self_50960, 'cflags_flag')
        # Processing the call keyword arguments (line 2151)
        kwargs_50962 = {}
        # Getting the type of 'self' (line 2151)
        self_50957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2151, 15), 'self', False)
        # Obtaining the member 'get_config_output' of a type (line 2151)
        get_config_output_50958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2151, 15), self_50957, 'get_config_output')
        # Calling get_config_output(args, kwargs) (line 2151)
        get_config_output_call_result_50963 = invoke(stypy.reporting.localization.Localization(__file__, 2151, 15), get_config_output_50958, *[config_exe_50959, cflags_flag_50961], **kwargs_50962)
        
        # Assigning a type to the variable 'opts' (line 2151)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2151, 8), 'opts', get_config_output_call_result_50963)
        
        # Getting the type of 'opts' (line 2152)
        opts_50964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2152, 11), 'opts')
        # Testing the type of an if condition (line 2152)
        if_condition_50965 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2152, 8), opts_50964)
        # Assigning a type to the variable 'if_condition_50965' (line 2152)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2152, 8), 'if_condition_50965', if_condition_50965)
        # SSA begins for if statement (line 2152)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to split(...): (line 2153)
        # Processing the call keyword arguments (line 2153)
        kwargs_50968 = {}
        # Getting the type of 'opts' (line 2153)
        opts_50966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2153, 23), 'opts', False)
        # Obtaining the member 'split' of a type (line 2153)
        split_50967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2153, 23), opts_50966, 'split')
        # Calling split(args, kwargs) (line 2153)
        split_call_result_50969 = invoke(stypy.reporting.localization.Localization(__file__, 2153, 23), split_50967, *[], **kwargs_50968)
        
        # Testing the type of a for loop iterable (line 2153)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2153, 12), split_call_result_50969)
        # Getting the type of the for loop variable (line 2153)
        for_loop_var_50970 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2153, 12), split_call_result_50969)
        # Assigning a type to the variable 'opt' (line 2153)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2153, 12), 'opt', for_loop_var_50970)
        # SSA begins for a for statement (line 2153)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        
        # Obtaining the type of the subscript
        int_50971 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2154, 24), 'int')
        slice_50972 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2154, 19), None, int_50971, None)
        # Getting the type of 'opt' (line 2154)
        opt_50973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2154, 19), 'opt')
        # Obtaining the member '__getitem__' of a type (line 2154)
        getitem___50974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2154, 19), opt_50973, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2154)
        subscript_call_result_50975 = invoke(stypy.reporting.localization.Localization(__file__, 2154, 19), getitem___50974, slice_50972)
        
        str_50976 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2154, 30), 'str', '-I')
        # Applying the binary operator '==' (line 2154)
        result_eq_50977 = python_operator(stypy.reporting.localization.Localization(__file__, 2154, 19), '==', subscript_call_result_50975, str_50976)
        
        # Testing the type of an if condition (line 2154)
        if_condition_50978 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2154, 16), result_eq_50977)
        # Assigning a type to the variable 'if_condition_50978' (line 2154)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2154, 16), 'if_condition_50978', if_condition_50978)
        # SSA begins for if statement (line 2154)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 2155)
        # Processing the call arguments (line 2155)
        
        # Obtaining the type of the subscript
        int_50981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2155, 44), 'int')
        slice_50982 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2155, 40), int_50981, None, None)
        # Getting the type of 'opt' (line 2155)
        opt_50983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2155, 40), 'opt', False)
        # Obtaining the member '__getitem__' of a type (line 2155)
        getitem___50984 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2155, 40), opt_50983, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2155)
        subscript_call_result_50985 = invoke(stypy.reporting.localization.Localization(__file__, 2155, 40), getitem___50984, slice_50982)
        
        # Processing the call keyword arguments (line 2155)
        kwargs_50986 = {}
        # Getting the type of 'include_dirs' (line 2155)
        include_dirs_50979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2155, 20), 'include_dirs', False)
        # Obtaining the member 'append' of a type (line 2155)
        append_50980 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2155, 20), include_dirs_50979, 'append')
        # Calling append(args, kwargs) (line 2155)
        append_call_result_50987 = invoke(stypy.reporting.localization.Localization(__file__, 2155, 20), append_50980, *[subscript_call_result_50985], **kwargs_50986)
        
        # SSA branch for the else part of an if statement (line 2154)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Obtaining the type of the subscript
        int_50988 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2156, 26), 'int')
        slice_50989 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2156, 21), None, int_50988, None)
        # Getting the type of 'opt' (line 2156)
        opt_50990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2156, 21), 'opt')
        # Obtaining the member '__getitem__' of a type (line 2156)
        getitem___50991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2156, 21), opt_50990, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2156)
        subscript_call_result_50992 = invoke(stypy.reporting.localization.Localization(__file__, 2156, 21), getitem___50991, slice_50989)
        
        str_50993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2156, 32), 'str', '-D')
        # Applying the binary operator '==' (line 2156)
        result_eq_50994 = python_operator(stypy.reporting.localization.Localization(__file__, 2156, 21), '==', subscript_call_result_50992, str_50993)
        
        # Testing the type of an if condition (line 2156)
        if_condition_50995 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2156, 21), result_eq_50994)
        # Assigning a type to the variable 'if_condition_50995' (line 2156)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2156, 21), 'if_condition_50995', if_condition_50995)
        # SSA begins for if statement (line 2156)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        str_50996 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2157, 23), 'str', '=')
        # Getting the type of 'opt' (line 2157)
        opt_50997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2157, 30), 'opt')
        # Applying the binary operator 'in' (line 2157)
        result_contains_50998 = python_operator(stypy.reporting.localization.Localization(__file__, 2157, 23), 'in', str_50996, opt_50997)
        
        # Testing the type of an if condition (line 2157)
        if_condition_50999 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2157, 20), result_contains_50998)
        # Assigning a type to the variable 'if_condition_50999' (line 2157)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2157, 20), 'if_condition_50999', if_condition_50999)
        # SSA begins for if statement (line 2157)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 2158):
        
        # Assigning a Call to a Name:
        
        # Call to split(...): (line 2158)
        # Processing the call arguments (line 2158)
        str_51006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2158, 45), 'str', '=')
        # Processing the call keyword arguments (line 2158)
        kwargs_51007 = {}
        
        # Obtaining the type of the subscript
        int_51000 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2158, 35), 'int')
        slice_51001 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2158, 31), int_51000, None, None)
        # Getting the type of 'opt' (line 2158)
        opt_51002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2158, 31), 'opt', False)
        # Obtaining the member '__getitem__' of a type (line 2158)
        getitem___51003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2158, 31), opt_51002, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2158)
        subscript_call_result_51004 = invoke(stypy.reporting.localization.Localization(__file__, 2158, 31), getitem___51003, slice_51001)
        
        # Obtaining the member 'split' of a type (line 2158)
        split_51005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2158, 31), subscript_call_result_51004, 'split')
        # Calling split(args, kwargs) (line 2158)
        split_call_result_51008 = invoke(stypy.reporting.localization.Localization(__file__, 2158, 31), split_51005, *[str_51006], **kwargs_51007)
        
        # Assigning a type to the variable 'call_assignment_45354' (line 2158)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2158, 24), 'call_assignment_45354', split_call_result_51008)
        
        # Assigning a Call to a Name (line 2158):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_51011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2158, 24), 'int')
        # Processing the call keyword arguments
        kwargs_51012 = {}
        # Getting the type of 'call_assignment_45354' (line 2158)
        call_assignment_45354_51009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2158, 24), 'call_assignment_45354', False)
        # Obtaining the member '__getitem__' of a type (line 2158)
        getitem___51010 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2158, 24), call_assignment_45354_51009, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_51013 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___51010, *[int_51011], **kwargs_51012)
        
        # Assigning a type to the variable 'call_assignment_45355' (line 2158)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2158, 24), 'call_assignment_45355', getitem___call_result_51013)
        
        # Assigning a Name to a Name (line 2158):
        # Getting the type of 'call_assignment_45355' (line 2158)
        call_assignment_45355_51014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2158, 24), 'call_assignment_45355')
        # Assigning a type to the variable 'n' (line 2158)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2158, 24), 'n', call_assignment_45355_51014)
        
        # Assigning a Call to a Name (line 2158):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_51017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2158, 24), 'int')
        # Processing the call keyword arguments
        kwargs_51018 = {}
        # Getting the type of 'call_assignment_45354' (line 2158)
        call_assignment_45354_51015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2158, 24), 'call_assignment_45354', False)
        # Obtaining the member '__getitem__' of a type (line 2158)
        getitem___51016 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2158, 24), call_assignment_45354_51015, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_51019 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___51016, *[int_51017], **kwargs_51018)
        
        # Assigning a type to the variable 'call_assignment_45356' (line 2158)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2158, 24), 'call_assignment_45356', getitem___call_result_51019)
        
        # Assigning a Name to a Name (line 2158):
        # Getting the type of 'call_assignment_45356' (line 2158)
        call_assignment_45356_51020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2158, 24), 'call_assignment_45356')
        # Assigning a type to the variable 'v' (line 2158)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2158, 27), 'v', call_assignment_45356_51020)
        
        # Call to append(...): (line 2159)
        # Processing the call arguments (line 2159)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2159)
        tuple_51023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2159, 39), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2159)
        # Adding element type (line 2159)
        # Getting the type of 'n' (line 2159)
        n_51024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2159, 39), 'n', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2159, 39), tuple_51023, n_51024)
        # Adding element type (line 2159)
        # Getting the type of 'v' (line 2159)
        v_51025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2159, 42), 'v', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2159, 39), tuple_51023, v_51025)
        
        # Processing the call keyword arguments (line 2159)
        kwargs_51026 = {}
        # Getting the type of 'macros' (line 2159)
        macros_51021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2159, 24), 'macros', False)
        # Obtaining the member 'append' of a type (line 2159)
        append_51022 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2159, 24), macros_51021, 'append')
        # Calling append(args, kwargs) (line 2159)
        append_call_result_51027 = invoke(stypy.reporting.localization.Localization(__file__, 2159, 24), append_51022, *[tuple_51023], **kwargs_51026)
        
        # SSA branch for the else part of an if statement (line 2157)
        module_type_store.open_ssa_branch('else')
        
        # Call to append(...): (line 2161)
        # Processing the call arguments (line 2161)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2161)
        tuple_51030 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2161, 39), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2161)
        # Adding element type (line 2161)
        
        # Obtaining the type of the subscript
        int_51031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2161, 43), 'int')
        slice_51032 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2161, 39), int_51031, None, None)
        # Getting the type of 'opt' (line 2161)
        opt_51033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2161, 39), 'opt', False)
        # Obtaining the member '__getitem__' of a type (line 2161)
        getitem___51034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2161, 39), opt_51033, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2161)
        subscript_call_result_51035 = invoke(stypy.reporting.localization.Localization(__file__, 2161, 39), getitem___51034, slice_51032)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2161, 39), tuple_51030, subscript_call_result_51035)
        # Adding element type (line 2161)
        # Getting the type of 'None' (line 2161)
        None_51036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2161, 48), 'None', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2161, 39), tuple_51030, None_51036)
        
        # Processing the call keyword arguments (line 2161)
        kwargs_51037 = {}
        # Getting the type of 'macros' (line 2161)
        macros_51028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2161, 24), 'macros', False)
        # Obtaining the member 'append' of a type (line 2161)
        append_51029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2161, 24), macros_51028, 'append')
        # Calling append(args, kwargs) (line 2161)
        append_call_result_51038 = invoke(stypy.reporting.localization.Localization(__file__, 2161, 24), append_51029, *[tuple_51030], **kwargs_51037)
        
        # SSA join for if statement (line 2157)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 2156)
        module_type_store.open_ssa_branch('else')
        
        # Call to append(...): (line 2163)
        # Processing the call arguments (line 2163)
        # Getting the type of 'opt' (line 2163)
        opt_51041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2163, 46), 'opt', False)
        # Processing the call keyword arguments (line 2163)
        kwargs_51042 = {}
        # Getting the type of 'extra_compile_args' (line 2163)
        extra_compile_args_51039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2163, 20), 'extra_compile_args', False)
        # Obtaining the member 'append' of a type (line 2163)
        append_51040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2163, 20), extra_compile_args_51039, 'append')
        # Calling append(args, kwargs) (line 2163)
        append_call_result_51043 = invoke(stypy.reporting.localization.Localization(__file__, 2163, 20), append_51040, *[opt_51041], **kwargs_51042)
        
        # SSA join for if statement (line 2156)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2154)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2152)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'macros' (line 2164)
        macros_51044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2164, 11), 'macros')
        # Testing the type of an if condition (line 2164)
        if_condition_51045 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2164, 8), macros_51044)
        # Assigning a type to the variable 'if_condition_51045' (line 2164)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2164, 8), 'if_condition_51045', if_condition_51045)
        # SSA begins for if statement (line 2164)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to dict_append(...): (line 2165)
        # Processing the call arguments (line 2165)
        # Getting the type of 'info' (line 2165)
        info_51047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2165, 24), 'info', False)
        # Processing the call keyword arguments (line 2165)
        # Getting the type of 'macros' (line 2165)
        macros_51048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2165, 44), 'macros', False)
        keyword_51049 = macros_51048
        kwargs_51050 = {'define_macros': keyword_51049}
        # Getting the type of 'dict_append' (line 2165)
        dict_append_51046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2165, 12), 'dict_append', False)
        # Calling dict_append(args, kwargs) (line 2165)
        dict_append_call_result_51051 = invoke(stypy.reporting.localization.Localization(__file__, 2165, 12), dict_append_51046, *[info_51047], **kwargs_51050)
        
        # SSA join for if statement (line 2164)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'libraries' (line 2166)
        libraries_51052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2166, 11), 'libraries')
        # Testing the type of an if condition (line 2166)
        if_condition_51053 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2166, 8), libraries_51052)
        # Assigning a type to the variable 'if_condition_51053' (line 2166)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2166, 8), 'if_condition_51053', if_condition_51053)
        # SSA begins for if statement (line 2166)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to dict_append(...): (line 2167)
        # Processing the call arguments (line 2167)
        # Getting the type of 'info' (line 2167)
        info_51055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2167, 24), 'info', False)
        # Processing the call keyword arguments (line 2167)
        # Getting the type of 'libraries' (line 2167)
        libraries_51056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2167, 40), 'libraries', False)
        keyword_51057 = libraries_51056
        kwargs_51058 = {'libraries': keyword_51057}
        # Getting the type of 'dict_append' (line 2167)
        dict_append_51054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2167, 12), 'dict_append', False)
        # Calling dict_append(args, kwargs) (line 2167)
        dict_append_call_result_51059 = invoke(stypy.reporting.localization.Localization(__file__, 2167, 12), dict_append_51054, *[info_51055], **kwargs_51058)
        
        # SSA join for if statement (line 2166)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'library_dirs' (line 2168)
        library_dirs_51060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2168, 11), 'library_dirs')
        # Testing the type of an if condition (line 2168)
        if_condition_51061 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2168, 8), library_dirs_51060)
        # Assigning a type to the variable 'if_condition_51061' (line 2168)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2168, 8), 'if_condition_51061', if_condition_51061)
        # SSA begins for if statement (line 2168)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to dict_append(...): (line 2169)
        # Processing the call arguments (line 2169)
        # Getting the type of 'info' (line 2169)
        info_51063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2169, 24), 'info', False)
        # Processing the call keyword arguments (line 2169)
        # Getting the type of 'library_dirs' (line 2169)
        library_dirs_51064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2169, 43), 'library_dirs', False)
        keyword_51065 = library_dirs_51064
        kwargs_51066 = {'library_dirs': keyword_51065}
        # Getting the type of 'dict_append' (line 2169)
        dict_append_51062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2169, 12), 'dict_append', False)
        # Calling dict_append(args, kwargs) (line 2169)
        dict_append_call_result_51067 = invoke(stypy.reporting.localization.Localization(__file__, 2169, 12), dict_append_51062, *[info_51063], **kwargs_51066)
        
        # SSA join for if statement (line 2168)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'include_dirs' (line 2170)
        include_dirs_51068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2170, 11), 'include_dirs')
        # Testing the type of an if condition (line 2170)
        if_condition_51069 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2170, 8), include_dirs_51068)
        # Assigning a type to the variable 'if_condition_51069' (line 2170)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2170, 8), 'if_condition_51069', if_condition_51069)
        # SSA begins for if statement (line 2170)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to dict_append(...): (line 2171)
        # Processing the call arguments (line 2171)
        # Getting the type of 'info' (line 2171)
        info_51071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2171, 24), 'info', False)
        # Processing the call keyword arguments (line 2171)
        # Getting the type of 'include_dirs' (line 2171)
        include_dirs_51072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2171, 43), 'include_dirs', False)
        keyword_51073 = include_dirs_51072
        kwargs_51074 = {'include_dirs': keyword_51073}
        # Getting the type of 'dict_append' (line 2171)
        dict_append_51070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2171, 12), 'dict_append', False)
        # Calling dict_append(args, kwargs) (line 2171)
        dict_append_call_result_51075 = invoke(stypy.reporting.localization.Localization(__file__, 2171, 12), dict_append_51070, *[info_51071], **kwargs_51074)
        
        # SSA join for if statement (line 2170)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'extra_link_args' (line 2172)
        extra_link_args_51076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2172, 11), 'extra_link_args')
        # Testing the type of an if condition (line 2172)
        if_condition_51077 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2172, 8), extra_link_args_51076)
        # Assigning a type to the variable 'if_condition_51077' (line 2172)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2172, 8), 'if_condition_51077', if_condition_51077)
        # SSA begins for if statement (line 2172)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to dict_append(...): (line 2173)
        # Processing the call arguments (line 2173)
        # Getting the type of 'info' (line 2173)
        info_51079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2173, 24), 'info', False)
        # Processing the call keyword arguments (line 2173)
        # Getting the type of 'extra_link_args' (line 2173)
        extra_link_args_51080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2173, 46), 'extra_link_args', False)
        keyword_51081 = extra_link_args_51080
        kwargs_51082 = {'extra_link_args': keyword_51081}
        # Getting the type of 'dict_append' (line 2173)
        dict_append_51078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2173, 12), 'dict_append', False)
        # Calling dict_append(args, kwargs) (line 2173)
        dict_append_call_result_51083 = invoke(stypy.reporting.localization.Localization(__file__, 2173, 12), dict_append_51078, *[info_51079], **kwargs_51082)
        
        # SSA join for if statement (line 2172)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'extra_compile_args' (line 2174)
        extra_compile_args_51084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2174, 11), 'extra_compile_args')
        # Testing the type of an if condition (line 2174)
        if_condition_51085 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2174, 8), extra_compile_args_51084)
        # Assigning a type to the variable 'if_condition_51085' (line 2174)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2174, 8), 'if_condition_51085', if_condition_51085)
        # SSA begins for if statement (line 2174)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to dict_append(...): (line 2175)
        # Processing the call arguments (line 2175)
        # Getting the type of 'info' (line 2175)
        info_51087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2175, 24), 'info', False)
        # Processing the call keyword arguments (line 2175)
        # Getting the type of 'extra_compile_args' (line 2175)
        extra_compile_args_51088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2175, 49), 'extra_compile_args', False)
        keyword_51089 = extra_compile_args_51088
        kwargs_51090 = {'extra_compile_args': keyword_51089}
        # Getting the type of 'dict_append' (line 2175)
        dict_append_51086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2175, 12), 'dict_append', False)
        # Calling dict_append(args, kwargs) (line 2175)
        dict_append_call_result_51091 = invoke(stypy.reporting.localization.Localization(__file__, 2175, 12), dict_append_51086, *[info_51087], **kwargs_51090)
        
        # SSA join for if statement (line 2174)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'info' (line 2176)
        info_51092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2176, 11), 'info')
        # Testing the type of an if condition (line 2176)
        if_condition_51093 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2176, 8), info_51092)
        # Assigning a type to the variable 'if_condition_51093' (line 2176)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2176, 8), 'if_condition_51093', if_condition_51093)
        # SSA begins for if statement (line 2176)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_info(...): (line 2177)
        # Processing the call keyword arguments (line 2177)
        # Getting the type of 'info' (line 2177)
        info_51096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2177, 28), 'info', False)
        kwargs_51097 = {'info_51096': info_51096}
        # Getting the type of 'self' (line 2177)
        self_51094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2177, 12), 'self', False)
        # Obtaining the member 'set_info' of a type (line 2177)
        set_info_51095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2177, 12), self_51094, 'set_info')
        # Calling set_info(args, kwargs) (line 2177)
        set_info_call_result_51098 = invoke(stypy.reporting.localization.Localization(__file__, 2177, 12), set_info_51095, *[], **kwargs_51097)
        
        # SSA join for if statement (line 2176)
        module_type_store = module_type_store.join_ssa_context()
        
        # Assigning a type to the variable 'stypy_return_type' (line 2178)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2178, 8), 'stypy_return_type', types.NoneType)
        
        # ################# End of 'calc_info(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'calc_info' in the type store
        # Getting the type of 'stypy_return_type' (line 2117)
        stypy_return_type_51099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2117, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_51099)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'calc_info'
        return stypy_return_type_51099


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2096, 0, False)
        # Assigning a type to the variable 'self' (line 2097)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2097, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_pkg_config_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable '_pkg_config_info' (line 2096)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2096, 0), '_pkg_config_info', _pkg_config_info)

# Assigning a Name to a Name (line 2097):
# Getting the type of 'None' (line 2097)
None_51100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2097, 14), 'None')
# Getting the type of '_pkg_config_info'
_pkg_config_info_51101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_pkg_config_info')
# Setting the type of the member 'section' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _pkg_config_info_51101, 'section', None_51100)

# Assigning a Str to a Name (line 2098):
str_51102 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2098, 21), 'str', 'PKG_CONFIG')
# Getting the type of '_pkg_config_info'
_pkg_config_info_51103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_pkg_config_info')
# Setting the type of the member 'config_env_var' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _pkg_config_info_51103, 'config_env_var', str_51102)

# Assigning a Str to a Name (line 2099):
str_51104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2099, 25), 'str', 'pkg-config')
# Getting the type of '_pkg_config_info'
_pkg_config_info_51105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_pkg_config_info')
# Setting the type of the member 'default_config_exe' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _pkg_config_info_51105, 'default_config_exe', str_51104)

# Assigning a Str to a Name (line 2100):
str_51106 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2100, 24), 'str', '')
# Getting the type of '_pkg_config_info'
_pkg_config_info_51107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_pkg_config_info')
# Setting the type of the member 'append_config_exe' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _pkg_config_info_51107, 'append_config_exe', str_51106)

# Assigning a Name to a Name (line 2101):
# Getting the type of 'None' (line 2101)
None_51108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2101, 25), 'None')
# Getting the type of '_pkg_config_info'
_pkg_config_info_51109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_pkg_config_info')
# Setting the type of the member 'version_macro_name' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _pkg_config_info_51109, 'version_macro_name', None_51108)

# Assigning a Name to a Name (line 2102):
# Getting the type of 'None' (line 2102)
None_51110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2102, 25), 'None')
# Getting the type of '_pkg_config_info'
_pkg_config_info_51111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_pkg_config_info')
# Setting the type of the member 'release_macro_name' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _pkg_config_info_51111, 'release_macro_name', None_51110)

# Assigning a Str to a Name (line 2103):
str_51112 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2103, 19), 'str', '--modversion')
# Getting the type of '_pkg_config_info'
_pkg_config_info_51113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_pkg_config_info')
# Setting the type of the member 'version_flag' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _pkg_config_info_51113, 'version_flag', str_51112)

# Assigning a Str to a Name (line 2104):
str_51114 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2104, 18), 'str', '--cflags')
# Getting the type of '_pkg_config_info'
_pkg_config_info_51115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_pkg_config_info')
# Setting the type of the member 'cflags_flag' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _pkg_config_info_51115, 'cflags_flag', str_51114)
# Declaration of the 'wx_info' class
# Getting the type of '_pkg_config_info' (line 2181)
_pkg_config_info_51116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2181, 14), '_pkg_config_info')

class wx_info(_pkg_config_info_51116, ):
    
    # Assigning a Str to a Name (line 2182):
    
    # Assigning a Str to a Name (line 2183):
    
    # Assigning a Str to a Name (line 2184):
    
    # Assigning a Str to a Name (line 2185):
    
    # Assigning a Str to a Name (line 2186):
    
    # Assigning a Str to a Name (line 2187):
    
    # Assigning a Str to a Name (line 2188):
    
    # Assigning a Str to a Name (line 2189):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2181, 0, False)
        # Assigning a type to the variable 'self' (line 2182)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2182, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'wx_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'wx_info' (line 2181)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2181, 0), 'wx_info', wx_info)

# Assigning a Str to a Name (line 2182):
str_51117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2182, 14), 'str', 'wx')
# Getting the type of 'wx_info'
wx_info_51118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'wx_info')
# Setting the type of the member 'section' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), wx_info_51118, 'section', str_51117)

# Assigning a Str to a Name (line 2183):
str_51119 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2183, 21), 'str', 'WX_CONFIG')
# Getting the type of 'wx_info'
wx_info_51120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'wx_info')
# Setting the type of the member 'config_env_var' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), wx_info_51120, 'config_env_var', str_51119)

# Assigning a Str to a Name (line 2184):
str_51121 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2184, 25), 'str', 'wx-config')
# Getting the type of 'wx_info'
wx_info_51122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'wx_info')
# Setting the type of the member 'default_config_exe' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), wx_info_51122, 'default_config_exe', str_51121)

# Assigning a Str to a Name (line 2185):
str_51123 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2185, 24), 'str', '')
# Getting the type of 'wx_info'
wx_info_51124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'wx_info')
# Setting the type of the member 'append_config_exe' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), wx_info_51124, 'append_config_exe', str_51123)

# Assigning a Str to a Name (line 2186):
str_51125 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2186, 25), 'str', 'WX_VERSION')
# Getting the type of 'wx_info'
wx_info_51126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'wx_info')
# Setting the type of the member 'version_macro_name' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), wx_info_51126, 'version_macro_name', str_51125)

# Assigning a Str to a Name (line 2187):
str_51127 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2187, 25), 'str', 'WX_RELEASE')
# Getting the type of 'wx_info'
wx_info_51128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'wx_info')
# Setting the type of the member 'release_macro_name' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), wx_info_51128, 'release_macro_name', str_51127)

# Assigning a Str to a Name (line 2188):
str_51129 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2188, 19), 'str', '--version')
# Getting the type of 'wx_info'
wx_info_51130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'wx_info')
# Setting the type of the member 'version_flag' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), wx_info_51130, 'version_flag', str_51129)

# Assigning a Str to a Name (line 2189):
str_51131 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2189, 18), 'str', '--cxxflags')
# Getting the type of 'wx_info'
wx_info_51132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'wx_info')
# Setting the type of the member 'cflags_flag' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), wx_info_51132, 'cflags_flag', str_51131)
# Declaration of the 'gdk_pixbuf_xlib_2_info' class
# Getting the type of '_pkg_config_info' (line 2192)
_pkg_config_info_51133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2192, 29), '_pkg_config_info')

class gdk_pixbuf_xlib_2_info(_pkg_config_info_51133, ):
    
    # Assigning a Str to a Name (line 2193):
    
    # Assigning a Str to a Name (line 2194):
    
    # Assigning a Str to a Name (line 2195):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2192, 0, False)
        # Assigning a type to the variable 'self' (line 2193)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2193, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'gdk_pixbuf_xlib_2_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'gdk_pixbuf_xlib_2_info' (line 2192)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2192, 0), 'gdk_pixbuf_xlib_2_info', gdk_pixbuf_xlib_2_info)

# Assigning a Str to a Name (line 2193):
str_51134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2193, 14), 'str', 'gdk_pixbuf_xlib_2')
# Getting the type of 'gdk_pixbuf_xlib_2_info'
gdk_pixbuf_xlib_2_info_51135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'gdk_pixbuf_xlib_2_info')
# Setting the type of the member 'section' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), gdk_pixbuf_xlib_2_info_51135, 'section', str_51134)

# Assigning a Str to a Name (line 2194):
str_51136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2194, 24), 'str', 'gdk-pixbuf-xlib-2.0')
# Getting the type of 'gdk_pixbuf_xlib_2_info'
gdk_pixbuf_xlib_2_info_51137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'gdk_pixbuf_xlib_2_info')
# Setting the type of the member 'append_config_exe' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), gdk_pixbuf_xlib_2_info_51137, 'append_config_exe', str_51136)

# Assigning a Str to a Name (line 2195):
str_51138 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2195, 25), 'str', 'GDK_PIXBUF_XLIB_VERSION')
# Getting the type of 'gdk_pixbuf_xlib_2_info'
gdk_pixbuf_xlib_2_info_51139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'gdk_pixbuf_xlib_2_info')
# Setting the type of the member 'version_macro_name' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), gdk_pixbuf_xlib_2_info_51139, 'version_macro_name', str_51138)
# Declaration of the 'gdk_pixbuf_2_info' class
# Getting the type of '_pkg_config_info' (line 2198)
_pkg_config_info_51140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2198, 24), '_pkg_config_info')

class gdk_pixbuf_2_info(_pkg_config_info_51140, ):
    
    # Assigning a Str to a Name (line 2199):
    
    # Assigning a Str to a Name (line 2200):
    
    # Assigning a Str to a Name (line 2201):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2198, 0, False)
        # Assigning a type to the variable 'self' (line 2199)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2199, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'gdk_pixbuf_2_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'gdk_pixbuf_2_info' (line 2198)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2198, 0), 'gdk_pixbuf_2_info', gdk_pixbuf_2_info)

# Assigning a Str to a Name (line 2199):
str_51141 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2199, 14), 'str', 'gdk_pixbuf_2')
# Getting the type of 'gdk_pixbuf_2_info'
gdk_pixbuf_2_info_51142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'gdk_pixbuf_2_info')
# Setting the type of the member 'section' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), gdk_pixbuf_2_info_51142, 'section', str_51141)

# Assigning a Str to a Name (line 2200):
str_51143 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2200, 24), 'str', 'gdk-pixbuf-2.0')
# Getting the type of 'gdk_pixbuf_2_info'
gdk_pixbuf_2_info_51144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'gdk_pixbuf_2_info')
# Setting the type of the member 'append_config_exe' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), gdk_pixbuf_2_info_51144, 'append_config_exe', str_51143)

# Assigning a Str to a Name (line 2201):
str_51145 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2201, 25), 'str', 'GDK_PIXBUF_VERSION')
# Getting the type of 'gdk_pixbuf_2_info'
gdk_pixbuf_2_info_51146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'gdk_pixbuf_2_info')
# Setting the type of the member 'version_macro_name' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), gdk_pixbuf_2_info_51146, 'version_macro_name', str_51145)
# Declaration of the 'gdk_x11_2_info' class
# Getting the type of '_pkg_config_info' (line 2204)
_pkg_config_info_51147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2204, 21), '_pkg_config_info')

class gdk_x11_2_info(_pkg_config_info_51147, ):
    
    # Assigning a Str to a Name (line 2205):
    
    # Assigning a Str to a Name (line 2206):
    
    # Assigning a Str to a Name (line 2207):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2204, 0, False)
        # Assigning a type to the variable 'self' (line 2205)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2205, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'gdk_x11_2_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'gdk_x11_2_info' (line 2204)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2204, 0), 'gdk_x11_2_info', gdk_x11_2_info)

# Assigning a Str to a Name (line 2205):
str_51148 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2205, 14), 'str', 'gdk_x11_2')
# Getting the type of 'gdk_x11_2_info'
gdk_x11_2_info_51149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'gdk_x11_2_info')
# Setting the type of the member 'section' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), gdk_x11_2_info_51149, 'section', str_51148)

# Assigning a Str to a Name (line 2206):
str_51150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2206, 24), 'str', 'gdk-x11-2.0')
# Getting the type of 'gdk_x11_2_info'
gdk_x11_2_info_51151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'gdk_x11_2_info')
# Setting the type of the member 'append_config_exe' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), gdk_x11_2_info_51151, 'append_config_exe', str_51150)

# Assigning a Str to a Name (line 2207):
str_51152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2207, 25), 'str', 'GDK_X11_VERSION')
# Getting the type of 'gdk_x11_2_info'
gdk_x11_2_info_51153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'gdk_x11_2_info')
# Setting the type of the member 'version_macro_name' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), gdk_x11_2_info_51153, 'version_macro_name', str_51152)
# Declaration of the 'gdk_2_info' class
# Getting the type of '_pkg_config_info' (line 2210)
_pkg_config_info_51154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2210, 17), '_pkg_config_info')

class gdk_2_info(_pkg_config_info_51154, ):
    
    # Assigning a Str to a Name (line 2211):
    
    # Assigning a Str to a Name (line 2212):
    
    # Assigning a Str to a Name (line 2213):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2210, 0, False)
        # Assigning a type to the variable 'self' (line 2211)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2211, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'gdk_2_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'gdk_2_info' (line 2210)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2210, 0), 'gdk_2_info', gdk_2_info)

# Assigning a Str to a Name (line 2211):
str_51155 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2211, 14), 'str', 'gdk_2')
# Getting the type of 'gdk_2_info'
gdk_2_info_51156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'gdk_2_info')
# Setting the type of the member 'section' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), gdk_2_info_51156, 'section', str_51155)

# Assigning a Str to a Name (line 2212):
str_51157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2212, 24), 'str', 'gdk-2.0')
# Getting the type of 'gdk_2_info'
gdk_2_info_51158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'gdk_2_info')
# Setting the type of the member 'append_config_exe' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), gdk_2_info_51158, 'append_config_exe', str_51157)

# Assigning a Str to a Name (line 2213):
str_51159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2213, 25), 'str', 'GDK_VERSION')
# Getting the type of 'gdk_2_info'
gdk_2_info_51160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'gdk_2_info')
# Setting the type of the member 'version_macro_name' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), gdk_2_info_51160, 'version_macro_name', str_51159)
# Declaration of the 'gdk_info' class
# Getting the type of '_pkg_config_info' (line 2216)
_pkg_config_info_51161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2216, 15), '_pkg_config_info')

class gdk_info(_pkg_config_info_51161, ):
    
    # Assigning a Str to a Name (line 2217):
    
    # Assigning a Str to a Name (line 2218):
    
    # Assigning a Str to a Name (line 2219):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2216, 0, False)
        # Assigning a type to the variable 'self' (line 2217)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2217, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'gdk_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'gdk_info' (line 2216)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2216, 0), 'gdk_info', gdk_info)

# Assigning a Str to a Name (line 2217):
str_51162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2217, 14), 'str', 'gdk')
# Getting the type of 'gdk_info'
gdk_info_51163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'gdk_info')
# Setting the type of the member 'section' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), gdk_info_51163, 'section', str_51162)

# Assigning a Str to a Name (line 2218):
str_51164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2218, 24), 'str', 'gdk')
# Getting the type of 'gdk_info'
gdk_info_51165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'gdk_info')
# Setting the type of the member 'append_config_exe' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), gdk_info_51165, 'append_config_exe', str_51164)

# Assigning a Str to a Name (line 2219):
str_51166 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2219, 25), 'str', 'GDK_VERSION')
# Getting the type of 'gdk_info'
gdk_info_51167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'gdk_info')
# Setting the type of the member 'version_macro_name' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), gdk_info_51167, 'version_macro_name', str_51166)
# Declaration of the 'gtkp_x11_2_info' class
# Getting the type of '_pkg_config_info' (line 2222)
_pkg_config_info_51168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2222, 22), '_pkg_config_info')

class gtkp_x11_2_info(_pkg_config_info_51168, ):
    
    # Assigning a Str to a Name (line 2223):
    
    # Assigning a Str to a Name (line 2224):
    
    # Assigning a Str to a Name (line 2225):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2222, 0, False)
        # Assigning a type to the variable 'self' (line 2223)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2223, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'gtkp_x11_2_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'gtkp_x11_2_info' (line 2222)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2222, 0), 'gtkp_x11_2_info', gtkp_x11_2_info)

# Assigning a Str to a Name (line 2223):
str_51169 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2223, 14), 'str', 'gtkp_x11_2')
# Getting the type of 'gtkp_x11_2_info'
gtkp_x11_2_info_51170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'gtkp_x11_2_info')
# Setting the type of the member 'section' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), gtkp_x11_2_info_51170, 'section', str_51169)

# Assigning a Str to a Name (line 2224):
str_51171 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2224, 24), 'str', 'gtk+-x11-2.0')
# Getting the type of 'gtkp_x11_2_info'
gtkp_x11_2_info_51172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'gtkp_x11_2_info')
# Setting the type of the member 'append_config_exe' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), gtkp_x11_2_info_51172, 'append_config_exe', str_51171)

# Assigning a Str to a Name (line 2225):
str_51173 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2225, 25), 'str', 'GTK_X11_VERSION')
# Getting the type of 'gtkp_x11_2_info'
gtkp_x11_2_info_51174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'gtkp_x11_2_info')
# Setting the type of the member 'version_macro_name' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), gtkp_x11_2_info_51174, 'version_macro_name', str_51173)
# Declaration of the 'gtkp_2_info' class
# Getting the type of '_pkg_config_info' (line 2228)
_pkg_config_info_51175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2228, 18), '_pkg_config_info')

class gtkp_2_info(_pkg_config_info_51175, ):
    
    # Assigning a Str to a Name (line 2229):
    
    # Assigning a Str to a Name (line 2230):
    
    # Assigning a Str to a Name (line 2231):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2228, 0, False)
        # Assigning a type to the variable 'self' (line 2229)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2229, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'gtkp_2_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'gtkp_2_info' (line 2228)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2228, 0), 'gtkp_2_info', gtkp_2_info)

# Assigning a Str to a Name (line 2229):
str_51176 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2229, 14), 'str', 'gtkp_2')
# Getting the type of 'gtkp_2_info'
gtkp_2_info_51177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'gtkp_2_info')
# Setting the type of the member 'section' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), gtkp_2_info_51177, 'section', str_51176)

# Assigning a Str to a Name (line 2230):
str_51178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2230, 24), 'str', 'gtk+-2.0')
# Getting the type of 'gtkp_2_info'
gtkp_2_info_51179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'gtkp_2_info')
# Setting the type of the member 'append_config_exe' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), gtkp_2_info_51179, 'append_config_exe', str_51178)

# Assigning a Str to a Name (line 2231):
str_51180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2231, 25), 'str', 'GTK_VERSION')
# Getting the type of 'gtkp_2_info'
gtkp_2_info_51181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'gtkp_2_info')
# Setting the type of the member 'version_macro_name' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), gtkp_2_info_51181, 'version_macro_name', str_51180)
# Declaration of the 'xft_info' class
# Getting the type of '_pkg_config_info' (line 2234)
_pkg_config_info_51182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2234, 15), '_pkg_config_info')

class xft_info(_pkg_config_info_51182, ):
    
    # Assigning a Str to a Name (line 2235):
    
    # Assigning a Str to a Name (line 2236):
    
    # Assigning a Str to a Name (line 2237):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2234, 0, False)
        # Assigning a type to the variable 'self' (line 2235)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2235, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'xft_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'xft_info' (line 2234)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2234, 0), 'xft_info', xft_info)

# Assigning a Str to a Name (line 2235):
str_51183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2235, 14), 'str', 'xft')
# Getting the type of 'xft_info'
xft_info_51184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'xft_info')
# Setting the type of the member 'section' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), xft_info_51184, 'section', str_51183)

# Assigning a Str to a Name (line 2236):
str_51185 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2236, 24), 'str', 'xft')
# Getting the type of 'xft_info'
xft_info_51186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'xft_info')
# Setting the type of the member 'append_config_exe' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), xft_info_51186, 'append_config_exe', str_51185)

# Assigning a Str to a Name (line 2237):
str_51187 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2237, 25), 'str', 'XFT_VERSION')
# Getting the type of 'xft_info'
xft_info_51188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'xft_info')
# Setting the type of the member 'version_macro_name' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), xft_info_51188, 'version_macro_name', str_51187)
# Declaration of the 'freetype2_info' class
# Getting the type of '_pkg_config_info' (line 2240)
_pkg_config_info_51189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2240, 21), '_pkg_config_info')

class freetype2_info(_pkg_config_info_51189, ):
    
    # Assigning a Str to a Name (line 2241):
    
    # Assigning a Str to a Name (line 2242):
    
    # Assigning a Str to a Name (line 2243):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2240, 0, False)
        # Assigning a type to the variable 'self' (line 2241)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2241, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'freetype2_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'freetype2_info' (line 2240)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2240, 0), 'freetype2_info', freetype2_info)

# Assigning a Str to a Name (line 2241):
str_51190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2241, 14), 'str', 'freetype2')
# Getting the type of 'freetype2_info'
freetype2_info_51191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'freetype2_info')
# Setting the type of the member 'section' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), freetype2_info_51191, 'section', str_51190)

# Assigning a Str to a Name (line 2242):
str_51192 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2242, 24), 'str', 'freetype2')
# Getting the type of 'freetype2_info'
freetype2_info_51193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'freetype2_info')
# Setting the type of the member 'append_config_exe' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), freetype2_info_51193, 'append_config_exe', str_51192)

# Assigning a Str to a Name (line 2243):
str_51194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2243, 25), 'str', 'FREETYPE2_VERSION')
# Getting the type of 'freetype2_info'
freetype2_info_51195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'freetype2_info')
# Setting the type of the member 'version_macro_name' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), freetype2_info_51195, 'version_macro_name', str_51194)
# Declaration of the 'amd_info' class
# Getting the type of 'system_info' (line 2246)
system_info_51196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2246, 15), 'system_info')

class amd_info(system_info_51196, ):
    
    # Assigning a Str to a Name (line 2247):
    
    # Assigning a Str to a Name (line 2248):
    
    # Assigning a List to a Name (line 2249):

    @norecursion
    def calc_info(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'calc_info'
        module_type_store = module_type_store.open_function_context('calc_info', 2251, 4, False)
        # Assigning a type to the variable 'self' (line 2252)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2252, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        amd_info.calc_info.__dict__.__setitem__('stypy_localization', localization)
        amd_info.calc_info.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        amd_info.calc_info.__dict__.__setitem__('stypy_type_store', module_type_store)
        amd_info.calc_info.__dict__.__setitem__('stypy_function_name', 'amd_info.calc_info')
        amd_info.calc_info.__dict__.__setitem__('stypy_param_names_list', [])
        amd_info.calc_info.__dict__.__setitem__('stypy_varargs_param_name', None)
        amd_info.calc_info.__dict__.__setitem__('stypy_kwargs_param_name', None)
        amd_info.calc_info.__dict__.__setitem__('stypy_call_defaults', defaults)
        amd_info.calc_info.__dict__.__setitem__('stypy_call_varargs', varargs)
        amd_info.calc_info.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        amd_info.calc_info.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'amd_info.calc_info', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'calc_info', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'calc_info(...)' code ##################

        
        # Assigning a Call to a Name (line 2252):
        
        # Assigning a Call to a Name (line 2252):
        
        # Call to get_lib_dirs(...): (line 2252)
        # Processing the call keyword arguments (line 2252)
        kwargs_51199 = {}
        # Getting the type of 'self' (line 2252)
        self_51197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2252, 19), 'self', False)
        # Obtaining the member 'get_lib_dirs' of a type (line 2252)
        get_lib_dirs_51198 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2252, 19), self_51197, 'get_lib_dirs')
        # Calling get_lib_dirs(args, kwargs) (line 2252)
        get_lib_dirs_call_result_51200 = invoke(stypy.reporting.localization.Localization(__file__, 2252, 19), get_lib_dirs_51198, *[], **kwargs_51199)
        
        # Assigning a type to the variable 'lib_dirs' (line 2252)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2252, 8), 'lib_dirs', get_lib_dirs_call_result_51200)
        
        # Assigning a Call to a Name (line 2254):
        
        # Assigning a Call to a Name (line 2254):
        
        # Call to get_libs(...): (line 2254)
        # Processing the call arguments (line 2254)
        str_51203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2254, 33), 'str', 'amd_libs')
        # Getting the type of 'self' (line 2254)
        self_51204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2254, 45), 'self', False)
        # Obtaining the member '_lib_names' of a type (line 2254)
        _lib_names_51205 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2254, 45), self_51204, '_lib_names')
        # Processing the call keyword arguments (line 2254)
        kwargs_51206 = {}
        # Getting the type of 'self' (line 2254)
        self_51201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2254, 19), 'self', False)
        # Obtaining the member 'get_libs' of a type (line 2254)
        get_libs_51202 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2254, 19), self_51201, 'get_libs')
        # Calling get_libs(args, kwargs) (line 2254)
        get_libs_call_result_51207 = invoke(stypy.reporting.localization.Localization(__file__, 2254, 19), get_libs_51202, *[str_51203, _lib_names_51205], **kwargs_51206)
        
        # Assigning a type to the variable 'amd_libs' (line 2254)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2254, 8), 'amd_libs', get_libs_call_result_51207)
        
        # Assigning a Call to a Name (line 2255):
        
        # Assigning a Call to a Name (line 2255):
        
        # Call to check_libs(...): (line 2255)
        # Processing the call arguments (line 2255)
        # Getting the type of 'lib_dirs' (line 2255)
        lib_dirs_51210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2255, 31), 'lib_dirs', False)
        # Getting the type of 'amd_libs' (line 2255)
        amd_libs_51211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2255, 41), 'amd_libs', False)
        
        # Obtaining an instance of the builtin type 'list' (line 2255)
        list_51212 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2255, 51), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2255)
        
        # Processing the call keyword arguments (line 2255)
        kwargs_51213 = {}
        # Getting the type of 'self' (line 2255)
        self_51208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2255, 15), 'self', False)
        # Obtaining the member 'check_libs' of a type (line 2255)
        check_libs_51209 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2255, 15), self_51208, 'check_libs')
        # Calling check_libs(args, kwargs) (line 2255)
        check_libs_call_result_51214 = invoke(stypy.reporting.localization.Localization(__file__, 2255, 15), check_libs_51209, *[lib_dirs_51210, amd_libs_51211, list_51212], **kwargs_51213)
        
        # Assigning a type to the variable 'info' (line 2255)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2255, 8), 'info', check_libs_call_result_51214)
        
        # Type idiom detected: calculating its left and rigth part (line 2256)
        # Getting the type of 'info' (line 2256)
        info_51215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2256, 11), 'info')
        # Getting the type of 'None' (line 2256)
        None_51216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2256, 19), 'None')
        
        (may_be_51217, more_types_in_union_51218) = may_be_none(info_51215, None_51216)

        if may_be_51217:

            if more_types_in_union_51218:
                # Runtime conditional SSA (line 2256)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'stypy_return_type' (line 2257)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2257, 12), 'stypy_return_type', types.NoneType)

            if more_types_in_union_51218:
                # SSA join for if statement (line 2256)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 2259):
        
        # Assigning a Call to a Name (line 2259):
        
        # Call to get_include_dirs(...): (line 2259)
        # Processing the call keyword arguments (line 2259)
        kwargs_51221 = {}
        # Getting the type of 'self' (line 2259)
        self_51219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2259, 23), 'self', False)
        # Obtaining the member 'get_include_dirs' of a type (line 2259)
        get_include_dirs_51220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2259, 23), self_51219, 'get_include_dirs')
        # Calling get_include_dirs(args, kwargs) (line 2259)
        get_include_dirs_call_result_51222 = invoke(stypy.reporting.localization.Localization(__file__, 2259, 23), get_include_dirs_51220, *[], **kwargs_51221)
        
        # Assigning a type to the variable 'include_dirs' (line 2259)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2259, 8), 'include_dirs', get_include_dirs_call_result_51222)
        
        # Assigning a Name to a Name (line 2261):
        
        # Assigning a Name to a Name (line 2261):
        # Getting the type of 'None' (line 2261)
        None_51223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2261, 18), 'None')
        # Assigning a type to the variable 'inc_dir' (line 2261)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2261, 8), 'inc_dir', None_51223)
        
        # Getting the type of 'include_dirs' (line 2262)
        include_dirs_51224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2262, 17), 'include_dirs')
        # Testing the type of a for loop iterable (line 2262)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2262, 8), include_dirs_51224)
        # Getting the type of the for loop variable (line 2262)
        for_loop_var_51225 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2262, 8), include_dirs_51224)
        # Assigning a type to the variable 'd' (line 2262)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2262, 8), 'd', for_loop_var_51225)
        # SSA begins for a for statement (line 2262)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 2263):
        
        # Assigning a Call to a Name (line 2263):
        
        # Call to combine_paths(...): (line 2263)
        # Processing the call arguments (line 2263)
        # Getting the type of 'd' (line 2263)
        d_51228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2263, 35), 'd', False)
        str_51229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2263, 38), 'str', 'amd.h')
        # Processing the call keyword arguments (line 2263)
        kwargs_51230 = {}
        # Getting the type of 'self' (line 2263)
        self_51226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2263, 16), 'self', False)
        # Obtaining the member 'combine_paths' of a type (line 2263)
        combine_paths_51227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2263, 16), self_51226, 'combine_paths')
        # Calling combine_paths(args, kwargs) (line 2263)
        combine_paths_call_result_51231 = invoke(stypy.reporting.localization.Localization(__file__, 2263, 16), combine_paths_51227, *[d_51228, str_51229], **kwargs_51230)
        
        # Assigning a type to the variable 'p' (line 2263)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2263, 12), 'p', combine_paths_call_result_51231)
        
        # Getting the type of 'p' (line 2264)
        p_51232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2264, 15), 'p')
        # Testing the type of an if condition (line 2264)
        if_condition_51233 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2264, 12), p_51232)
        # Assigning a type to the variable 'if_condition_51233' (line 2264)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2264, 12), 'if_condition_51233', if_condition_51233)
        # SSA begins for if statement (line 2264)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2265):
        
        # Assigning a Call to a Name (line 2265):
        
        # Call to dirname(...): (line 2265)
        # Processing the call arguments (line 2265)
        
        # Obtaining the type of the subscript
        int_51237 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2265, 44), 'int')
        # Getting the type of 'p' (line 2265)
        p_51238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2265, 42), 'p', False)
        # Obtaining the member '__getitem__' of a type (line 2265)
        getitem___51239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2265, 42), p_51238, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2265)
        subscript_call_result_51240 = invoke(stypy.reporting.localization.Localization(__file__, 2265, 42), getitem___51239, int_51237)
        
        # Processing the call keyword arguments (line 2265)
        kwargs_51241 = {}
        # Getting the type of 'os' (line 2265)
        os_51234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2265, 26), 'os', False)
        # Obtaining the member 'path' of a type (line 2265)
        path_51235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2265, 26), os_51234, 'path')
        # Obtaining the member 'dirname' of a type (line 2265)
        dirname_51236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2265, 26), path_51235, 'dirname')
        # Calling dirname(args, kwargs) (line 2265)
        dirname_call_result_51242 = invoke(stypy.reporting.localization.Localization(__file__, 2265, 26), dirname_51236, *[subscript_call_result_51240], **kwargs_51241)
        
        # Assigning a type to the variable 'inc_dir' (line 2265)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2265, 16), 'inc_dir', dirname_call_result_51242)
        # SSA join for if statement (line 2264)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 2267)
        # Getting the type of 'inc_dir' (line 2267)
        inc_dir_51243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2267, 8), 'inc_dir')
        # Getting the type of 'None' (line 2267)
        None_51244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2267, 26), 'None')
        
        (may_be_51245, more_types_in_union_51246) = may_not_be_none(inc_dir_51243, None_51244)

        if may_be_51245:

            if more_types_in_union_51246:
                # Runtime conditional SSA (line 2267)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to dict_append(...): (line 2268)
            # Processing the call arguments (line 2268)
            # Getting the type of 'info' (line 2268)
            info_51248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2268, 24), 'info', False)
            # Processing the call keyword arguments (line 2268)
            
            # Obtaining an instance of the builtin type 'list' (line 2268)
            list_51249 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2268, 43), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2268)
            # Adding element type (line 2268)
            # Getting the type of 'inc_dir' (line 2268)
            inc_dir_51250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2268, 44), 'inc_dir', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2268, 43), list_51249, inc_dir_51250)
            
            keyword_51251 = list_51249
            
            # Obtaining an instance of the builtin type 'list' (line 2269)
            list_51252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2269, 38), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2269)
            # Adding element type (line 2269)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2269)
            tuple_51253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2269, 40), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2269)
            # Adding element type (line 2269)
            str_51254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2269, 40), 'str', 'SCIPY_AMD_H')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2269, 40), tuple_51253, str_51254)
            # Adding element type (line 2269)
            # Getting the type of 'None' (line 2269)
            None_51255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 55), 'None', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2269, 40), tuple_51253, None_51255)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2269, 38), list_51252, tuple_51253)
            
            keyword_51256 = list_51252
            
            # Obtaining an instance of the builtin type 'list' (line 2270)
            list_51257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2270, 34), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2270)
            # Adding element type (line 2270)
            str_51258 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2270, 35), 'str', '-I')
            # Getting the type of 'inc_dir' (line 2270)
            inc_dir_51259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 42), 'inc_dir', False)
            # Applying the binary operator '+' (line 2270)
            result_add_51260 = python_operator(stypy.reporting.localization.Localization(__file__, 2270, 35), '+', str_51258, inc_dir_51259)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2270, 34), list_51257, result_add_51260)
            
            keyword_51261 = list_51257
            kwargs_51262 = {'swig_opts': keyword_51261, 'define_macros': keyword_51256, 'include_dirs': keyword_51251}
            # Getting the type of 'dict_append' (line 2268)
            dict_append_51247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2268, 12), 'dict_append', False)
            # Calling dict_append(args, kwargs) (line 2268)
            dict_append_call_result_51263 = invoke(stypy.reporting.localization.Localization(__file__, 2268, 12), dict_append_51247, *[info_51248], **kwargs_51262)
            

            if more_types_in_union_51246:
                # SSA join for if statement (line 2267)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to set_info(...): (line 2272)
        # Processing the call keyword arguments (line 2272)
        # Getting the type of 'info' (line 2272)
        info_51266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2272, 24), 'info', False)
        kwargs_51267 = {'info_51266': info_51266}
        # Getting the type of 'self' (line 2272)
        self_51264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2272, 8), 'self', False)
        # Obtaining the member 'set_info' of a type (line 2272)
        set_info_51265 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2272, 8), self_51264, 'set_info')
        # Calling set_info(args, kwargs) (line 2272)
        set_info_call_result_51268 = invoke(stypy.reporting.localization.Localization(__file__, 2272, 8), set_info_51265, *[], **kwargs_51267)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2273)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2273, 8), 'stypy_return_type', types.NoneType)
        
        # ################# End of 'calc_info(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'calc_info' in the type store
        # Getting the type of 'stypy_return_type' (line 2251)
        stypy_return_type_51269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2251, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_51269)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'calc_info'
        return stypy_return_type_51269


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2246, 0, False)
        # Assigning a type to the variable 'self' (line 2247)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2247, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'amd_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'amd_info' (line 2246)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2246, 0), 'amd_info', amd_info)

# Assigning a Str to a Name (line 2247):
str_51270 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2247, 14), 'str', 'amd')
# Getting the type of 'amd_info'
amd_info_51271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'amd_info')
# Setting the type of the member 'section' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), amd_info_51271, 'section', str_51270)

# Assigning a Str to a Name (line 2248):
str_51272 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2248, 18), 'str', 'AMD')
# Getting the type of 'amd_info'
amd_info_51273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'amd_info')
# Setting the type of the member 'dir_env_var' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), amd_info_51273, 'dir_env_var', str_51272)

# Assigning a List to a Name (line 2249):

# Obtaining an instance of the builtin type 'list' (line 2249)
list_51274 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2249, 17), 'list')
# Adding type elements to the builtin type 'list' instance (line 2249)
# Adding element type (line 2249)
str_51275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2249, 18), 'str', 'amd')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2249, 17), list_51274, str_51275)

# Getting the type of 'amd_info'
amd_info_51276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'amd_info')
# Setting the type of the member '_lib_names' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), amd_info_51276, '_lib_names', list_51274)
# Declaration of the 'umfpack_info' class
# Getting the type of 'system_info' (line 2276)
system_info_51277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2276, 19), 'system_info')

class umfpack_info(system_info_51277, ):
    
    # Assigning a Str to a Name (line 2277):
    
    # Assigning a Str to a Name (line 2278):
    
    # Assigning a Name to a Name (line 2279):
    
    # Assigning a List to a Name (line 2280):

    @norecursion
    def calc_info(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'calc_info'
        module_type_store = module_type_store.open_function_context('calc_info', 2282, 4, False)
        # Assigning a type to the variable 'self' (line 2283)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2283, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        umfpack_info.calc_info.__dict__.__setitem__('stypy_localization', localization)
        umfpack_info.calc_info.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        umfpack_info.calc_info.__dict__.__setitem__('stypy_type_store', module_type_store)
        umfpack_info.calc_info.__dict__.__setitem__('stypy_function_name', 'umfpack_info.calc_info')
        umfpack_info.calc_info.__dict__.__setitem__('stypy_param_names_list', [])
        umfpack_info.calc_info.__dict__.__setitem__('stypy_varargs_param_name', None)
        umfpack_info.calc_info.__dict__.__setitem__('stypy_kwargs_param_name', None)
        umfpack_info.calc_info.__dict__.__setitem__('stypy_call_defaults', defaults)
        umfpack_info.calc_info.__dict__.__setitem__('stypy_call_varargs', varargs)
        umfpack_info.calc_info.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        umfpack_info.calc_info.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'umfpack_info.calc_info', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'calc_info', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'calc_info(...)' code ##################

        
        # Assigning a Call to a Name (line 2283):
        
        # Assigning a Call to a Name (line 2283):
        
        # Call to get_lib_dirs(...): (line 2283)
        # Processing the call keyword arguments (line 2283)
        kwargs_51280 = {}
        # Getting the type of 'self' (line 2283)
        self_51278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2283, 19), 'self', False)
        # Obtaining the member 'get_lib_dirs' of a type (line 2283)
        get_lib_dirs_51279 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2283, 19), self_51278, 'get_lib_dirs')
        # Calling get_lib_dirs(args, kwargs) (line 2283)
        get_lib_dirs_call_result_51281 = invoke(stypy.reporting.localization.Localization(__file__, 2283, 19), get_lib_dirs_51279, *[], **kwargs_51280)
        
        # Assigning a type to the variable 'lib_dirs' (line 2283)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2283, 8), 'lib_dirs', get_lib_dirs_call_result_51281)
        
        # Assigning a Call to a Name (line 2285):
        
        # Assigning a Call to a Name (line 2285):
        
        # Call to get_libs(...): (line 2285)
        # Processing the call arguments (line 2285)
        str_51284 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2285, 37), 'str', 'umfpack_libs')
        # Getting the type of 'self' (line 2285)
        self_51285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2285, 53), 'self', False)
        # Obtaining the member '_lib_names' of a type (line 2285)
        _lib_names_51286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2285, 53), self_51285, '_lib_names')
        # Processing the call keyword arguments (line 2285)
        kwargs_51287 = {}
        # Getting the type of 'self' (line 2285)
        self_51282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2285, 23), 'self', False)
        # Obtaining the member 'get_libs' of a type (line 2285)
        get_libs_51283 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2285, 23), self_51282, 'get_libs')
        # Calling get_libs(args, kwargs) (line 2285)
        get_libs_call_result_51288 = invoke(stypy.reporting.localization.Localization(__file__, 2285, 23), get_libs_51283, *[str_51284, _lib_names_51286], **kwargs_51287)
        
        # Assigning a type to the variable 'umfpack_libs' (line 2285)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2285, 8), 'umfpack_libs', get_libs_call_result_51288)
        
        # Assigning a Call to a Name (line 2286):
        
        # Assigning a Call to a Name (line 2286):
        
        # Call to check_libs(...): (line 2286)
        # Processing the call arguments (line 2286)
        # Getting the type of 'lib_dirs' (line 2286)
        lib_dirs_51291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2286, 31), 'lib_dirs', False)
        # Getting the type of 'umfpack_libs' (line 2286)
        umfpack_libs_51292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2286, 41), 'umfpack_libs', False)
        
        # Obtaining an instance of the builtin type 'list' (line 2286)
        list_51293 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2286, 55), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2286)
        
        # Processing the call keyword arguments (line 2286)
        kwargs_51294 = {}
        # Getting the type of 'self' (line 2286)
        self_51289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2286, 15), 'self', False)
        # Obtaining the member 'check_libs' of a type (line 2286)
        check_libs_51290 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2286, 15), self_51289, 'check_libs')
        # Calling check_libs(args, kwargs) (line 2286)
        check_libs_call_result_51295 = invoke(stypy.reporting.localization.Localization(__file__, 2286, 15), check_libs_51290, *[lib_dirs_51291, umfpack_libs_51292, list_51293], **kwargs_51294)
        
        # Assigning a type to the variable 'info' (line 2286)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2286, 8), 'info', check_libs_call_result_51295)
        
        # Type idiom detected: calculating its left and rigth part (line 2287)
        # Getting the type of 'info' (line 2287)
        info_51296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2287, 11), 'info')
        # Getting the type of 'None' (line 2287)
        None_51297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2287, 19), 'None')
        
        (may_be_51298, more_types_in_union_51299) = may_be_none(info_51296, None_51297)

        if may_be_51298:

            if more_types_in_union_51299:
                # Runtime conditional SSA (line 2287)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'stypy_return_type' (line 2288)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2288, 12), 'stypy_return_type', types.NoneType)

            if more_types_in_union_51299:
                # SSA join for if statement (line 2287)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 2290):
        
        # Assigning a Call to a Name (line 2290):
        
        # Call to get_include_dirs(...): (line 2290)
        # Processing the call keyword arguments (line 2290)
        kwargs_51302 = {}
        # Getting the type of 'self' (line 2290)
        self_51300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2290, 23), 'self', False)
        # Obtaining the member 'get_include_dirs' of a type (line 2290)
        get_include_dirs_51301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2290, 23), self_51300, 'get_include_dirs')
        # Calling get_include_dirs(args, kwargs) (line 2290)
        get_include_dirs_call_result_51303 = invoke(stypy.reporting.localization.Localization(__file__, 2290, 23), get_include_dirs_51301, *[], **kwargs_51302)
        
        # Assigning a type to the variable 'include_dirs' (line 2290)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2290, 8), 'include_dirs', get_include_dirs_call_result_51303)
        
        # Assigning a Name to a Name (line 2292):
        
        # Assigning a Name to a Name (line 2292):
        # Getting the type of 'None' (line 2292)
        None_51304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2292, 18), 'None')
        # Assigning a type to the variable 'inc_dir' (line 2292)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2292, 8), 'inc_dir', None_51304)
        
        # Getting the type of 'include_dirs' (line 2293)
        include_dirs_51305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 17), 'include_dirs')
        # Testing the type of a for loop iterable (line 2293)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2293, 8), include_dirs_51305)
        # Getting the type of the for loop variable (line 2293)
        for_loop_var_51306 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2293, 8), include_dirs_51305)
        # Assigning a type to the variable 'd' (line 2293)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2293, 8), 'd', for_loop_var_51306)
        # SSA begins for a for statement (line 2293)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 2294):
        
        # Assigning a Call to a Name (line 2294):
        
        # Call to combine_paths(...): (line 2294)
        # Processing the call arguments (line 2294)
        # Getting the type of 'd' (line 2294)
        d_51309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2294, 35), 'd', False)
        
        # Obtaining an instance of the builtin type 'list' (line 2294)
        list_51310 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2294, 38), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2294)
        # Adding element type (line 2294)
        str_51311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2294, 39), 'str', '')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2294, 38), list_51310, str_51311)
        # Adding element type (line 2294)
        str_51312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2294, 43), 'str', 'umfpack')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2294, 38), list_51310, str_51312)
        
        str_51313 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2294, 55), 'str', 'umfpack.h')
        # Processing the call keyword arguments (line 2294)
        kwargs_51314 = {}
        # Getting the type of 'self' (line 2294)
        self_51307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2294, 16), 'self', False)
        # Obtaining the member 'combine_paths' of a type (line 2294)
        combine_paths_51308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2294, 16), self_51307, 'combine_paths')
        # Calling combine_paths(args, kwargs) (line 2294)
        combine_paths_call_result_51315 = invoke(stypy.reporting.localization.Localization(__file__, 2294, 16), combine_paths_51308, *[d_51309, list_51310, str_51313], **kwargs_51314)
        
        # Assigning a type to the variable 'p' (line 2294)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2294, 12), 'p', combine_paths_call_result_51315)
        
        # Getting the type of 'p' (line 2295)
        p_51316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2295, 15), 'p')
        # Testing the type of an if condition (line 2295)
        if_condition_51317 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2295, 12), p_51316)
        # Assigning a type to the variable 'if_condition_51317' (line 2295)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2295, 12), 'if_condition_51317', if_condition_51317)
        # SSA begins for if statement (line 2295)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2296):
        
        # Assigning a Call to a Name (line 2296):
        
        # Call to dirname(...): (line 2296)
        # Processing the call arguments (line 2296)
        
        # Obtaining the type of the subscript
        int_51321 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2296, 44), 'int')
        # Getting the type of 'p' (line 2296)
        p_51322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2296, 42), 'p', False)
        # Obtaining the member '__getitem__' of a type (line 2296)
        getitem___51323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2296, 42), p_51322, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2296)
        subscript_call_result_51324 = invoke(stypy.reporting.localization.Localization(__file__, 2296, 42), getitem___51323, int_51321)
        
        # Processing the call keyword arguments (line 2296)
        kwargs_51325 = {}
        # Getting the type of 'os' (line 2296)
        os_51318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2296, 26), 'os', False)
        # Obtaining the member 'path' of a type (line 2296)
        path_51319 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2296, 26), os_51318, 'path')
        # Obtaining the member 'dirname' of a type (line 2296)
        dirname_51320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2296, 26), path_51319, 'dirname')
        # Calling dirname(args, kwargs) (line 2296)
        dirname_call_result_51326 = invoke(stypy.reporting.localization.Localization(__file__, 2296, 26), dirname_51320, *[subscript_call_result_51324], **kwargs_51325)
        
        # Assigning a type to the variable 'inc_dir' (line 2296)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2296, 16), 'inc_dir', dirname_call_result_51326)
        # SSA join for if statement (line 2295)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 2298)
        # Getting the type of 'inc_dir' (line 2298)
        inc_dir_51327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2298, 8), 'inc_dir')
        # Getting the type of 'None' (line 2298)
        None_51328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2298, 26), 'None')
        
        (may_be_51329, more_types_in_union_51330) = may_not_be_none(inc_dir_51327, None_51328)

        if may_be_51329:

            if more_types_in_union_51330:
                # Runtime conditional SSA (line 2298)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to dict_append(...): (line 2299)
            # Processing the call arguments (line 2299)
            # Getting the type of 'info' (line 2299)
            info_51332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2299, 24), 'info', False)
            # Processing the call keyword arguments (line 2299)
            
            # Obtaining an instance of the builtin type 'list' (line 2299)
            list_51333 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2299, 43), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2299)
            # Adding element type (line 2299)
            # Getting the type of 'inc_dir' (line 2299)
            inc_dir_51334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2299, 44), 'inc_dir', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2299, 43), list_51333, inc_dir_51334)
            
            keyword_51335 = list_51333
            
            # Obtaining an instance of the builtin type 'list' (line 2300)
            list_51336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2300, 38), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2300)
            # Adding element type (line 2300)
            
            # Obtaining an instance of the builtin type 'tuple' (line 2300)
            tuple_51337 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2300, 40), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2300)
            # Adding element type (line 2300)
            str_51338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2300, 40), 'str', 'SCIPY_UMFPACK_H')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2300, 40), tuple_51337, str_51338)
            # Adding element type (line 2300)
            # Getting the type of 'None' (line 2300)
            None_51339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2300, 59), 'None', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2300, 40), tuple_51337, None_51339)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2300, 38), list_51336, tuple_51337)
            
            keyword_51340 = list_51336
            
            # Obtaining an instance of the builtin type 'list' (line 2301)
            list_51341 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2301, 34), 'list')
            # Adding type elements to the builtin type 'list' instance (line 2301)
            # Adding element type (line 2301)
            str_51342 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2301, 35), 'str', '-I')
            # Getting the type of 'inc_dir' (line 2301)
            inc_dir_51343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2301, 42), 'inc_dir', False)
            # Applying the binary operator '+' (line 2301)
            result_add_51344 = python_operator(stypy.reporting.localization.Localization(__file__, 2301, 35), '+', str_51342, inc_dir_51343)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2301, 34), list_51341, result_add_51344)
            
            keyword_51345 = list_51341
            kwargs_51346 = {'swig_opts': keyword_51345, 'define_macros': keyword_51340, 'include_dirs': keyword_51335}
            # Getting the type of 'dict_append' (line 2299)
            dict_append_51331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2299, 12), 'dict_append', False)
            # Calling dict_append(args, kwargs) (line 2299)
            dict_append_call_result_51347 = invoke(stypy.reporting.localization.Localization(__file__, 2299, 12), dict_append_51331, *[info_51332], **kwargs_51346)
            

            if more_types_in_union_51330:
                # SSA join for if statement (line 2298)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 2303):
        
        # Assigning a Call to a Name (line 2303):
        
        # Call to get_info(...): (line 2303)
        # Processing the call arguments (line 2303)
        str_51349 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2303, 23), 'str', 'amd')
        # Processing the call keyword arguments (line 2303)
        kwargs_51350 = {}
        # Getting the type of 'get_info' (line 2303)
        get_info_51348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2303, 14), 'get_info', False)
        # Calling get_info(args, kwargs) (line 2303)
        get_info_call_result_51351 = invoke(stypy.reporting.localization.Localization(__file__, 2303, 14), get_info_51348, *[str_51349], **kwargs_51350)
        
        # Assigning a type to the variable 'amd' (line 2303)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2303, 8), 'amd', get_info_call_result_51351)
        
        # Call to dict_append(...): (line 2304)
        # Processing the call arguments (line 2304)
        # Getting the type of 'info' (line 2304)
        info_51353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2304, 20), 'info', False)
        # Processing the call keyword arguments (line 2304)
        
        # Call to get_info(...): (line 2304)
        # Processing the call arguments (line 2304)
        str_51355 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2304, 37), 'str', 'amd')
        # Processing the call keyword arguments (line 2304)
        kwargs_51356 = {}
        # Getting the type of 'get_info' (line 2304)
        get_info_51354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2304, 28), 'get_info', False)
        # Calling get_info(args, kwargs) (line 2304)
        get_info_call_result_51357 = invoke(stypy.reporting.localization.Localization(__file__, 2304, 28), get_info_51354, *[str_51355], **kwargs_51356)
        
        kwargs_51358 = {'get_info_call_result_51357': get_info_call_result_51357}
        # Getting the type of 'dict_append' (line 2304)
        dict_append_51352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2304, 8), 'dict_append', False)
        # Calling dict_append(args, kwargs) (line 2304)
        dict_append_call_result_51359 = invoke(stypy.reporting.localization.Localization(__file__, 2304, 8), dict_append_51352, *[info_51353], **kwargs_51358)
        
        
        # Call to set_info(...): (line 2306)
        # Processing the call keyword arguments (line 2306)
        # Getting the type of 'info' (line 2306)
        info_51362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2306, 24), 'info', False)
        kwargs_51363 = {'info_51362': info_51362}
        # Getting the type of 'self' (line 2306)
        self_51360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2306, 8), 'self', False)
        # Obtaining the member 'set_info' of a type (line 2306)
        set_info_51361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2306, 8), self_51360, 'set_info')
        # Calling set_info(args, kwargs) (line 2306)
        set_info_call_result_51364 = invoke(stypy.reporting.localization.Localization(__file__, 2306, 8), set_info_51361, *[], **kwargs_51363)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2307)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2307, 8), 'stypy_return_type', types.NoneType)
        
        # ################# End of 'calc_info(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'calc_info' in the type store
        # Getting the type of 'stypy_return_type' (line 2282)
        stypy_return_type_51365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2282, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_51365)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'calc_info'
        return stypy_return_type_51365


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2276, 0, False)
        # Assigning a type to the variable 'self' (line 2277)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2277, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'umfpack_info.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'umfpack_info' (line 2276)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2276, 0), 'umfpack_info', umfpack_info)

# Assigning a Str to a Name (line 2277):
str_51366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2277, 14), 'str', 'umfpack')
# Getting the type of 'umfpack_info'
umfpack_info_51367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'umfpack_info')
# Setting the type of the member 'section' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), umfpack_info_51367, 'section', str_51366)

# Assigning a Str to a Name (line 2278):
str_51368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2278, 18), 'str', 'UMFPACK')
# Getting the type of 'umfpack_info'
umfpack_info_51369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'umfpack_info')
# Setting the type of the member 'dir_env_var' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), umfpack_info_51369, 'dir_env_var', str_51368)

# Assigning a Name to a Name (line 2279):
# Getting the type of 'UmfpackNotFoundError' (line 2279)
UmfpackNotFoundError_51370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2279, 20), 'UmfpackNotFoundError')
# Getting the type of 'umfpack_info'
umfpack_info_51371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'umfpack_info')
# Setting the type of the member 'notfounderror' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), umfpack_info_51371, 'notfounderror', UmfpackNotFoundError_51370)

# Assigning a List to a Name (line 2280):

# Obtaining an instance of the builtin type 'list' (line 2280)
list_51372 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2280, 17), 'list')
# Adding type elements to the builtin type 'list' instance (line 2280)
# Adding element type (line 2280)
str_51373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2280, 18), 'str', 'umfpack')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2280, 17), list_51372, str_51373)

# Getting the type of 'umfpack_info'
umfpack_info_51374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'umfpack_info')
# Setting the type of the member '_lib_names' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), umfpack_info_51374, '_lib_names', list_51372)

@norecursion
def combine_paths(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'combine_paths'
    module_type_store = module_type_store.open_function_context('combine_paths', 2310, 0, False)
    
    # Passed parameters checking function
    combine_paths.stypy_localization = localization
    combine_paths.stypy_type_of_self = None
    combine_paths.stypy_type_store = module_type_store
    combine_paths.stypy_function_name = 'combine_paths'
    combine_paths.stypy_param_names_list = []
    combine_paths.stypy_varargs_param_name = 'args'
    combine_paths.stypy_kwargs_param_name = 'kws'
    combine_paths.stypy_call_defaults = defaults
    combine_paths.stypy_call_varargs = varargs
    combine_paths.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'combine_paths', [], 'args', 'kws', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'combine_paths', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'combine_paths(...)' code ##################

    str_51375 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2313, (-1)), 'str', ' Return a list of existing paths composed by all combinations of\n        items from arguments.\n    ')
    
    # Assigning a List to a Name (line 2314):
    
    # Assigning a List to a Name (line 2314):
    
    # Obtaining an instance of the builtin type 'list' (line 2314)
    list_51376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2314, 8), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2314)
    
    # Assigning a type to the variable 'r' (line 2314)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2314, 4), 'r', list_51376)
    
    # Getting the type of 'args' (line 2315)
    args_51377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2315, 13), 'args')
    # Testing the type of a for loop iterable (line 2315)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2315, 4), args_51377)
    # Getting the type of the for loop variable (line 2315)
    for_loop_var_51378 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2315, 4), args_51377)
    # Assigning a type to the variable 'a' (line 2315)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2315, 4), 'a', for_loop_var_51378)
    # SSA begins for a for statement (line 2315)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'a' (line 2316)
    a_51379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2316, 15), 'a')
    # Applying the 'not' unary operator (line 2316)
    result_not__51380 = python_operator(stypy.reporting.localization.Localization(__file__, 2316, 11), 'not', a_51379)
    
    # Testing the type of an if condition (line 2316)
    if_condition_51381 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2316, 8), result_not__51380)
    # Assigning a type to the variable 'if_condition_51381' (line 2316)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2316, 8), 'if_condition_51381', if_condition_51381)
    # SSA begins for if statement (line 2316)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 2316)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to is_string(...): (line 2318)
    # Processing the call arguments (line 2318)
    # Getting the type of 'a' (line 2318)
    a_51383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2318, 21), 'a', False)
    # Processing the call keyword arguments (line 2318)
    kwargs_51384 = {}
    # Getting the type of 'is_string' (line 2318)
    is_string_51382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2318, 11), 'is_string', False)
    # Calling is_string(args, kwargs) (line 2318)
    is_string_call_result_51385 = invoke(stypy.reporting.localization.Localization(__file__, 2318, 11), is_string_51382, *[a_51383], **kwargs_51384)
    
    # Testing the type of an if condition (line 2318)
    if_condition_51386 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2318, 8), is_string_call_result_51385)
    # Assigning a type to the variable 'if_condition_51386' (line 2318)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2318, 8), 'if_condition_51386', if_condition_51386)
    # SSA begins for if statement (line 2318)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a List to a Name (line 2319):
    
    # Assigning a List to a Name (line 2319):
    
    # Obtaining an instance of the builtin type 'list' (line 2319)
    list_51387 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2319, 16), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2319)
    # Adding element type (line 2319)
    # Getting the type of 'a' (line 2319)
    a_51388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2319, 17), 'a')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2319, 16), list_51387, a_51388)
    
    # Assigning a type to the variable 'a' (line 2319)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2319, 12), 'a', list_51387)
    # SSA join for if statement (line 2318)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to append(...): (line 2320)
    # Processing the call arguments (line 2320)
    # Getting the type of 'a' (line 2320)
    a_51391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2320, 17), 'a', False)
    # Processing the call keyword arguments (line 2320)
    kwargs_51392 = {}
    # Getting the type of 'r' (line 2320)
    r_51389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2320, 8), 'r', False)
    # Obtaining the member 'append' of a type (line 2320)
    append_51390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2320, 8), r_51389, 'append')
    # Calling append(args, kwargs) (line 2320)
    append_call_result_51393 = invoke(stypy.reporting.localization.Localization(__file__, 2320, 8), append_51390, *[a_51391], **kwargs_51392)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Name (line 2321):
    
    # Assigning a Name to a Name (line 2321):
    # Getting the type of 'r' (line 2321)
    r_51394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2321, 11), 'r')
    # Assigning a type to the variable 'args' (line 2321)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2321, 4), 'args', r_51394)
    
    
    # Getting the type of 'args' (line 2322)
    args_51395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2322, 11), 'args')
    # Applying the 'not' unary operator (line 2322)
    result_not__51396 = python_operator(stypy.reporting.localization.Localization(__file__, 2322, 7), 'not', args_51395)
    
    # Testing the type of an if condition (line 2322)
    if_condition_51397 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2322, 4), result_not__51396)
    # Assigning a type to the variable 'if_condition_51397' (line 2322)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2322, 4), 'if_condition_51397', if_condition_51397)
    # SSA begins for if statement (line 2322)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'list' (line 2323)
    list_51398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2323, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2323)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2323)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2323, 8), 'stypy_return_type', list_51398)
    # SSA join for if statement (line 2322)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 2324)
    # Processing the call arguments (line 2324)
    # Getting the type of 'args' (line 2324)
    args_51400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2324, 11), 'args', False)
    # Processing the call keyword arguments (line 2324)
    kwargs_51401 = {}
    # Getting the type of 'len' (line 2324)
    len_51399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2324, 7), 'len', False)
    # Calling len(args, kwargs) (line 2324)
    len_call_result_51402 = invoke(stypy.reporting.localization.Localization(__file__, 2324, 7), len_51399, *[args_51400], **kwargs_51401)
    
    int_51403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2324, 20), 'int')
    # Applying the binary operator '==' (line 2324)
    result_eq_51404 = python_operator(stypy.reporting.localization.Localization(__file__, 2324, 7), '==', len_call_result_51402, int_51403)
    
    # Testing the type of an if condition (line 2324)
    if_condition_51405 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2324, 4), result_eq_51404)
    # Assigning a type to the variable 'if_condition_51405' (line 2324)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2324, 4), 'if_condition_51405', if_condition_51405)
    # SSA begins for if statement (line 2324)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2325):
    
    # Assigning a Call to a Name (line 2325):
    
    # Call to reduce(...): (line 2325)
    # Processing the call arguments (line 2325)

    @norecursion
    def _stypy_temp_lambda_19(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_19'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_19', 2325, 24, True)
        # Passed parameters checking function
        _stypy_temp_lambda_19.stypy_localization = localization
        _stypy_temp_lambda_19.stypy_type_of_self = None
        _stypy_temp_lambda_19.stypy_type_store = module_type_store
        _stypy_temp_lambda_19.stypy_function_name = '_stypy_temp_lambda_19'
        _stypy_temp_lambda_19.stypy_param_names_list = ['a', 'b']
        _stypy_temp_lambda_19.stypy_varargs_param_name = None
        _stypy_temp_lambda_19.stypy_kwargs_param_name = None
        _stypy_temp_lambda_19.stypy_call_defaults = defaults
        _stypy_temp_lambda_19.stypy_call_varargs = varargs
        _stypy_temp_lambda_19.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_19', ['a', 'b'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_19', ['a', 'b'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        # Getting the type of 'a' (line 2325)
        a_51407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2325, 37), 'a', False)
        # Getting the type of 'b' (line 2325)
        b_51408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2325, 41), 'b', False)
        # Applying the binary operator '+' (line 2325)
        result_add_51409 = python_operator(stypy.reporting.localization.Localization(__file__, 2325, 37), '+', a_51407, b_51408)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 2325)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2325, 24), 'stypy_return_type', result_add_51409)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_19' in the type store
        # Getting the type of 'stypy_return_type' (line 2325)
        stypy_return_type_51410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2325, 24), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_51410)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_19'
        return stypy_return_type_51410

    # Assigning a type to the variable '_stypy_temp_lambda_19' (line 2325)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2325, 24), '_stypy_temp_lambda_19', _stypy_temp_lambda_19)
    # Getting the type of '_stypy_temp_lambda_19' (line 2325)
    _stypy_temp_lambda_19_51411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2325, 24), '_stypy_temp_lambda_19')
    
    # Call to map(...): (line 2325)
    # Processing the call arguments (line 2325)
    # Getting the type of 'glob' (line 2325)
    glob_51413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2325, 48), 'glob', False)
    
    # Obtaining the type of the subscript
    int_51414 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2325, 59), 'int')
    # Getting the type of 'args' (line 2325)
    args_51415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2325, 54), 'args', False)
    # Obtaining the member '__getitem__' of a type (line 2325)
    getitem___51416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2325, 54), args_51415, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2325)
    subscript_call_result_51417 = invoke(stypy.reporting.localization.Localization(__file__, 2325, 54), getitem___51416, int_51414)
    
    # Processing the call keyword arguments (line 2325)
    kwargs_51418 = {}
    # Getting the type of 'map' (line 2325)
    map_51412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2325, 44), 'map', False)
    # Calling map(args, kwargs) (line 2325)
    map_call_result_51419 = invoke(stypy.reporting.localization.Localization(__file__, 2325, 44), map_51412, *[glob_51413, subscript_call_result_51417], **kwargs_51418)
    
    
    # Obtaining an instance of the builtin type 'list' (line 2325)
    list_51420 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2325, 64), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2325)
    
    # Processing the call keyword arguments (line 2325)
    kwargs_51421 = {}
    # Getting the type of 'reduce' (line 2325)
    reduce_51406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2325, 17), 'reduce', False)
    # Calling reduce(args, kwargs) (line 2325)
    reduce_call_result_51422 = invoke(stypy.reporting.localization.Localization(__file__, 2325, 17), reduce_51406, *[_stypy_temp_lambda_19_51411, map_call_result_51419, list_51420], **kwargs_51421)
    
    # Assigning a type to the variable 'result' (line 2325)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2325, 8), 'result', reduce_call_result_51422)
    # SSA branch for the else part of an if statement (line 2324)
    module_type_store.open_ssa_branch('else')
    
    
    
    # Call to len(...): (line 2326)
    # Processing the call arguments (line 2326)
    # Getting the type of 'args' (line 2326)
    args_51424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2326, 13), 'args', False)
    # Processing the call keyword arguments (line 2326)
    kwargs_51425 = {}
    # Getting the type of 'len' (line 2326)
    len_51423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2326, 9), 'len', False)
    # Calling len(args, kwargs) (line 2326)
    len_call_result_51426 = invoke(stypy.reporting.localization.Localization(__file__, 2326, 9), len_51423, *[args_51424], **kwargs_51425)
    
    int_51427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2326, 22), 'int')
    # Applying the binary operator '==' (line 2326)
    result_eq_51428 = python_operator(stypy.reporting.localization.Localization(__file__, 2326, 9), '==', len_call_result_51426, int_51427)
    
    # Testing the type of an if condition (line 2326)
    if_condition_51429 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2326, 9), result_eq_51428)
    # Assigning a type to the variable 'if_condition_51429' (line 2326)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2326, 9), 'if_condition_51429', if_condition_51429)
    # SSA begins for if statement (line 2326)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a List to a Name (line 2327):
    
    # Assigning a List to a Name (line 2327):
    
    # Obtaining an instance of the builtin type 'list' (line 2327)
    list_51430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2327, 17), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2327)
    
    # Assigning a type to the variable 'result' (line 2327)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2327, 8), 'result', list_51430)
    
    
    # Obtaining the type of the subscript
    int_51431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2328, 23), 'int')
    # Getting the type of 'args' (line 2328)
    args_51432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2328, 18), 'args')
    # Obtaining the member '__getitem__' of a type (line 2328)
    getitem___51433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2328, 18), args_51432, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2328)
    subscript_call_result_51434 = invoke(stypy.reporting.localization.Localization(__file__, 2328, 18), getitem___51433, int_51431)
    
    # Testing the type of a for loop iterable (line 2328)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2328, 8), subscript_call_result_51434)
    # Getting the type of the for loop variable (line 2328)
    for_loop_var_51435 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2328, 8), subscript_call_result_51434)
    # Assigning a type to the variable 'a0' (line 2328)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2328, 8), 'a0', for_loop_var_51435)
    # SSA begins for a for statement (line 2328)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Obtaining the type of the subscript
    int_51436 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2329, 27), 'int')
    # Getting the type of 'args' (line 2329)
    args_51437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2329, 22), 'args')
    # Obtaining the member '__getitem__' of a type (line 2329)
    getitem___51438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2329, 22), args_51437, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2329)
    subscript_call_result_51439 = invoke(stypy.reporting.localization.Localization(__file__, 2329, 22), getitem___51438, int_51436)
    
    # Testing the type of a for loop iterable (line 2329)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2329, 12), subscript_call_result_51439)
    # Getting the type of the for loop variable (line 2329)
    for_loop_var_51440 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2329, 12), subscript_call_result_51439)
    # Assigning a type to the variable 'a1' (line 2329)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2329, 12), 'a1', for_loop_var_51440)
    # SSA begins for a for statement (line 2329)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to extend(...): (line 2330)
    # Processing the call arguments (line 2330)
    
    # Call to glob(...): (line 2330)
    # Processing the call arguments (line 2330)
    
    # Call to join(...): (line 2330)
    # Processing the call arguments (line 2330)
    # Getting the type of 'a0' (line 2330)
    a0_51447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2330, 48), 'a0', False)
    # Getting the type of 'a1' (line 2330)
    a1_51448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2330, 52), 'a1', False)
    # Processing the call keyword arguments (line 2330)
    kwargs_51449 = {}
    # Getting the type of 'os' (line 2330)
    os_51444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2330, 35), 'os', False)
    # Obtaining the member 'path' of a type (line 2330)
    path_51445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2330, 35), os_51444, 'path')
    # Obtaining the member 'join' of a type (line 2330)
    join_51446 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2330, 35), path_51445, 'join')
    # Calling join(args, kwargs) (line 2330)
    join_call_result_51450 = invoke(stypy.reporting.localization.Localization(__file__, 2330, 35), join_51446, *[a0_51447, a1_51448], **kwargs_51449)
    
    # Processing the call keyword arguments (line 2330)
    kwargs_51451 = {}
    # Getting the type of 'glob' (line 2330)
    glob_51443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2330, 30), 'glob', False)
    # Calling glob(args, kwargs) (line 2330)
    glob_call_result_51452 = invoke(stypy.reporting.localization.Localization(__file__, 2330, 30), glob_51443, *[join_call_result_51450], **kwargs_51451)
    
    # Processing the call keyword arguments (line 2330)
    kwargs_51453 = {}
    # Getting the type of 'result' (line 2330)
    result_51441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2330, 16), 'result', False)
    # Obtaining the member 'extend' of a type (line 2330)
    extend_51442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2330, 16), result_51441, 'extend')
    # Calling extend(args, kwargs) (line 2330)
    extend_call_result_51454 = invoke(stypy.reporting.localization.Localization(__file__, 2330, 16), extend_51442, *[glob_call_result_51452], **kwargs_51453)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 2326)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 2332):
    
    # Assigning a Call to a Name (line 2332):
    
    # Call to combine_paths(...): (line 2332)
    
    # Call to combine_paths(...): (line 2332)
    # Processing the call arguments (line 2332)
    
    # Obtaining the type of the subscript
    int_51457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2332, 52), 'int')
    # Getting the type of 'args' (line 2332)
    args_51458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2332, 47), 'args', False)
    # Obtaining the member '__getitem__' of a type (line 2332)
    getitem___51459 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2332, 47), args_51458, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2332)
    subscript_call_result_51460 = invoke(stypy.reporting.localization.Localization(__file__, 2332, 47), getitem___51459, int_51457)
    
    
    # Obtaining the type of the subscript
    int_51461 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2332, 61), 'int')
    # Getting the type of 'args' (line 2332)
    args_51462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2332, 56), 'args', False)
    # Obtaining the member '__getitem__' of a type (line 2332)
    getitem___51463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2332, 56), args_51462, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2332)
    subscript_call_result_51464 = invoke(stypy.reporting.localization.Localization(__file__, 2332, 56), getitem___51463, int_51461)
    
    # Processing the call keyword arguments (line 2332)
    kwargs_51465 = {}
    # Getting the type of 'combine_paths' (line 2332)
    combine_paths_51456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2332, 33), 'combine_paths', False)
    # Calling combine_paths(args, kwargs) (line 2332)
    combine_paths_call_result_51466 = invoke(stypy.reporting.localization.Localization(__file__, 2332, 33), combine_paths_51456, *[subscript_call_result_51460, subscript_call_result_51464], **kwargs_51465)
    
    
    # Obtaining the type of the subscript
    int_51467 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2332, 72), 'int')
    slice_51468 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2332, 67), int_51467, None, None)
    # Getting the type of 'args' (line 2332)
    args_51469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2332, 67), 'args', False)
    # Obtaining the member '__getitem__' of a type (line 2332)
    getitem___51470 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2332, 67), args_51469, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2332)
    subscript_call_result_51471 = invoke(stypy.reporting.localization.Localization(__file__, 2332, 67), getitem___51470, slice_51468)
    
    # Applying the binary operator '+' (line 2332)
    result_add_51472 = python_operator(stypy.reporting.localization.Localization(__file__, 2332, 33), '+', combine_paths_call_result_51466, subscript_call_result_51471)
    
    # Processing the call keyword arguments (line 2332)
    kwargs_51473 = {}
    # Getting the type of 'combine_paths' (line 2332)
    combine_paths_51455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2332, 17), 'combine_paths', False)
    # Calling combine_paths(args, kwargs) (line 2332)
    combine_paths_call_result_51474 = invoke(stypy.reporting.localization.Localization(__file__, 2332, 17), combine_paths_51455, *[result_add_51472], **kwargs_51473)
    
    # Assigning a type to the variable 'result' (line 2332)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2332, 8), 'result', combine_paths_call_result_51474)
    # SSA join for if statement (line 2326)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2324)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2333):
    
    # Assigning a Call to a Name (line 2333):
    
    # Call to get(...): (line 2333)
    # Processing the call arguments (line 2333)
    str_51477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2333, 24), 'str', 'verbosity')
    int_51478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2333, 37), 'int')
    # Processing the call keyword arguments (line 2333)
    kwargs_51479 = {}
    # Getting the type of 'kws' (line 2333)
    kws_51475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2333, 16), 'kws', False)
    # Obtaining the member 'get' of a type (line 2333)
    get_51476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2333, 16), kws_51475, 'get')
    # Calling get(args, kwargs) (line 2333)
    get_call_result_51480 = invoke(stypy.reporting.localization.Localization(__file__, 2333, 16), get_51476, *[str_51477, int_51478], **kwargs_51479)
    
    # Assigning a type to the variable 'verbosity' (line 2333)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2333, 4), 'verbosity', get_call_result_51480)
    
    # Call to debug(...): (line 2334)
    # Processing the call arguments (line 2334)
    str_51483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2334, 14), 'str', '(paths: %s)')
    
    # Call to join(...): (line 2334)
    # Processing the call arguments (line 2334)
    # Getting the type of 'result' (line 2334)
    result_51486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2334, 38), 'result', False)
    # Processing the call keyword arguments (line 2334)
    kwargs_51487 = {}
    str_51484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2334, 29), 'str', ',')
    # Obtaining the member 'join' of a type (line 2334)
    join_51485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2334, 29), str_51484, 'join')
    # Calling join(args, kwargs) (line 2334)
    join_call_result_51488 = invoke(stypy.reporting.localization.Localization(__file__, 2334, 29), join_51485, *[result_51486], **kwargs_51487)
    
    # Processing the call keyword arguments (line 2334)
    kwargs_51489 = {}
    # Getting the type of 'log' (line 2334)
    log_51481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2334, 4), 'log', False)
    # Obtaining the member 'debug' of a type (line 2334)
    debug_51482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2334, 4), log_51481, 'debug')
    # Calling debug(args, kwargs) (line 2334)
    debug_call_result_51490 = invoke(stypy.reporting.localization.Localization(__file__, 2334, 4), debug_51482, *[str_51483, join_call_result_51488], **kwargs_51489)
    
    # Getting the type of 'result' (line 2335)
    result_51491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2335, 11), 'result')
    # Assigning a type to the variable 'stypy_return_type' (line 2335)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2335, 4), 'stypy_return_type', result_51491)
    
    # ################# End of 'combine_paths(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'combine_paths' in the type store
    # Getting the type of 'stypy_return_type' (line 2310)
    stypy_return_type_51492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2310, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_51492)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'combine_paths'
    return stypy_return_type_51492

# Assigning a type to the variable 'combine_paths' (line 2310)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2310, 0), 'combine_paths', combine_paths)

# Assigning a Dict to a Name (line 2337):

# Assigning a Dict to a Name (line 2337):

# Obtaining an instance of the builtin type 'dict' (line 2337)
dict_51493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2337, 15), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 2337)
# Adding element type (key, value) (line 2337)
str_51494 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2337, 16), 'str', 'c')
int_51495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2337, 21), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2337, 15), dict_51493, (str_51494, int_51495))
# Adding element type (key, value) (line 2337)
str_51496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2337, 24), 'str', 'c++')
int_51497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2337, 31), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2337, 15), dict_51493, (str_51496, int_51497))
# Adding element type (key, value) (line 2337)
str_51498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2337, 34), 'str', 'f77')
int_51499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2337, 41), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2337, 15), dict_51493, (str_51498, int_51499))
# Adding element type (key, value) (line 2337)
str_51500 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2337, 44), 'str', 'f90')
int_51501 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2337, 51), 'int')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2337, 15), dict_51493, (str_51500, int_51501))

# Assigning a type to the variable 'language_map' (line 2337)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2337, 0), 'language_map', dict_51493)

# Assigning a Dict to a Name (line 2338):

# Assigning a Dict to a Name (line 2338):

# Obtaining an instance of the builtin type 'dict' (line 2338)
dict_51502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2338, 19), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 2338)
# Adding element type (key, value) (line 2338)
int_51503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2338, 20), 'int')
str_51504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2338, 23), 'str', 'c')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2338, 19), dict_51502, (int_51503, str_51504))
# Adding element type (key, value) (line 2338)
int_51505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2338, 28), 'int')
str_51506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2338, 31), 'str', 'c++')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2338, 19), dict_51502, (int_51505, str_51506))
# Adding element type (key, value) (line 2338)
int_51507 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2338, 38), 'int')
str_51508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2338, 41), 'str', 'f77')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2338, 19), dict_51502, (int_51507, str_51508))
# Adding element type (key, value) (line 2338)
int_51509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2338, 48), 'int')
str_51510 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2338, 51), 'str', 'f90')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2338, 19), dict_51502, (int_51509, str_51510))

# Assigning a type to the variable 'inv_language_map' (line 2338)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2338, 0), 'inv_language_map', dict_51502)

@norecursion
def dict_append(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'dict_append'
    module_type_store = module_type_store.open_function_context('dict_append', 2341, 0, False)
    
    # Passed parameters checking function
    dict_append.stypy_localization = localization
    dict_append.stypy_type_of_self = None
    dict_append.stypy_type_store = module_type_store
    dict_append.stypy_function_name = 'dict_append'
    dict_append.stypy_param_names_list = ['d']
    dict_append.stypy_varargs_param_name = None
    dict_append.stypy_kwargs_param_name = 'kws'
    dict_append.stypy_call_defaults = defaults
    dict_append.stypy_call_varargs = varargs
    dict_append.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'dict_append', ['d'], None, 'kws', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'dict_append', localization, ['d'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'dict_append(...)' code ##################

    
    # Assigning a List to a Name (line 2342):
    
    # Assigning a List to a Name (line 2342):
    
    # Obtaining an instance of the builtin type 'list' (line 2342)
    list_51511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2342, 16), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2342)
    
    # Assigning a type to the variable 'languages' (line 2342)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2342, 4), 'languages', list_51511)
    
    
    # Call to items(...): (line 2343)
    # Processing the call keyword arguments (line 2343)
    kwargs_51514 = {}
    # Getting the type of 'kws' (line 2343)
    kws_51512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2343, 16), 'kws', False)
    # Obtaining the member 'items' of a type (line 2343)
    items_51513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2343, 16), kws_51512, 'items')
    # Calling items(args, kwargs) (line 2343)
    items_call_result_51515 = invoke(stypy.reporting.localization.Localization(__file__, 2343, 16), items_51513, *[], **kwargs_51514)
    
    # Testing the type of a for loop iterable (line 2343)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2343, 4), items_call_result_51515)
    # Getting the type of the for loop variable (line 2343)
    for_loop_var_51516 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2343, 4), items_call_result_51515)
    # Assigning a type to the variable 'k' (line 2343)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2343, 4), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2343, 4), for_loop_var_51516))
    # Assigning a type to the variable 'v' (line 2343)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2343, 4), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2343, 4), for_loop_var_51516))
    # SSA begins for a for statement (line 2343)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'k' (line 2344)
    k_51517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2344, 11), 'k')
    str_51518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2344, 16), 'str', 'language')
    # Applying the binary operator '==' (line 2344)
    result_eq_51519 = python_operator(stypy.reporting.localization.Localization(__file__, 2344, 11), '==', k_51517, str_51518)
    
    # Testing the type of an if condition (line 2344)
    if_condition_51520 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2344, 8), result_eq_51519)
    # Assigning a type to the variable 'if_condition_51520' (line 2344)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2344, 8), 'if_condition_51520', if_condition_51520)
    # SSA begins for if statement (line 2344)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 2345)
    # Processing the call arguments (line 2345)
    # Getting the type of 'v' (line 2345)
    v_51523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2345, 29), 'v', False)
    # Processing the call keyword arguments (line 2345)
    kwargs_51524 = {}
    # Getting the type of 'languages' (line 2345)
    languages_51521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2345, 12), 'languages', False)
    # Obtaining the member 'append' of a type (line 2345)
    append_51522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2345, 12), languages_51521, 'append')
    # Calling append(args, kwargs) (line 2345)
    append_call_result_51525 = invoke(stypy.reporting.localization.Localization(__file__, 2345, 12), append_51522, *[v_51523], **kwargs_51524)
    
    # SSA join for if statement (line 2344)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'k' (line 2347)
    k_51526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2347, 11), 'k')
    # Getting the type of 'd' (line 2347)
    d_51527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2347, 16), 'd')
    # Applying the binary operator 'in' (line 2347)
    result_contains_51528 = python_operator(stypy.reporting.localization.Localization(__file__, 2347, 11), 'in', k_51526, d_51527)
    
    # Testing the type of an if condition (line 2347)
    if_condition_51529 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2347, 8), result_contains_51528)
    # Assigning a type to the variable 'if_condition_51529' (line 2347)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2347, 8), 'if_condition_51529', if_condition_51529)
    # SSA begins for if statement (line 2347)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'k' (line 2348)
    k_51530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2348, 15), 'k')
    
    # Obtaining an instance of the builtin type 'list' (line 2348)
    list_51531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2348, 20), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2348)
    # Adding element type (line 2348)
    str_51532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2348, 21), 'str', 'library_dirs')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2348, 20), list_51531, str_51532)
    # Adding element type (line 2348)
    str_51533 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2348, 37), 'str', 'include_dirs')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2348, 20), list_51531, str_51533)
    # Adding element type (line 2348)
    str_51534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2349, 21), 'str', 'extra_compile_args')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2348, 20), list_51531, str_51534)
    # Adding element type (line 2348)
    str_51535 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2349, 43), 'str', 'extra_link_args')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2348, 20), list_51531, str_51535)
    # Adding element type (line 2348)
    str_51536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2350, 21), 'str', 'runtime_library_dirs')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2348, 20), list_51531, str_51536)
    # Adding element type (line 2348)
    str_51537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2350, 45), 'str', 'define_macros')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2348, 20), list_51531, str_51537)
    
    # Applying the binary operator 'in' (line 2348)
    result_contains_51538 = python_operator(stypy.reporting.localization.Localization(__file__, 2348, 15), 'in', k_51530, list_51531)
    
    # Testing the type of an if condition (line 2348)
    if_condition_51539 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2348, 12), result_contains_51538)
    # Assigning a type to the variable 'if_condition_51539' (line 2348)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2348, 12), 'if_condition_51539', if_condition_51539)
    # SSA begins for if statement (line 2348)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'v' (line 2351)
    v_51554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2351, 43), 'v')
    comprehension_51555 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2351, 17), v_51554)
    # Assigning a type to the variable 'vv' (line 2351)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2351, 17), 'vv', comprehension_51555)
    
    # Getting the type of 'vv' (line 2351)
    vv_51548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2351, 48), 'vv')
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 2351)
    k_51549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2351, 60), 'k')
    # Getting the type of 'd' (line 2351)
    d_51550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2351, 58), 'd')
    # Obtaining the member '__getitem__' of a type (line 2351)
    getitem___51551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2351, 58), d_51550, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2351)
    subscript_call_result_51552 = invoke(stypy.reporting.localization.Localization(__file__, 2351, 58), getitem___51551, k_51549)
    
    # Applying the binary operator 'notin' (line 2351)
    result_contains_51553 = python_operator(stypy.reporting.localization.Localization(__file__, 2351, 48), 'notin', vv_51548, subscript_call_result_51552)
    
    
    # Call to append(...): (line 2351)
    # Processing the call arguments (line 2351)
    # Getting the type of 'vv' (line 2351)
    vv_51545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2351, 29), 'vv', False)
    # Processing the call keyword arguments (line 2351)
    kwargs_51546 = {}
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 2351)
    k_51540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2351, 19), 'k', False)
    # Getting the type of 'd' (line 2351)
    d_51541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2351, 17), 'd', False)
    # Obtaining the member '__getitem__' of a type (line 2351)
    getitem___51542 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2351, 17), d_51541, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2351)
    subscript_call_result_51543 = invoke(stypy.reporting.localization.Localization(__file__, 2351, 17), getitem___51542, k_51540)
    
    # Obtaining the member 'append' of a type (line 2351)
    append_51544 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2351, 17), subscript_call_result_51543, 'append')
    # Calling append(args, kwargs) (line 2351)
    append_call_result_51547 = invoke(stypy.reporting.localization.Localization(__file__, 2351, 17), append_51544, *[vv_51545], **kwargs_51546)
    
    list_51556 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2351, 17), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2351, 17), list_51556, append_call_result_51547)
    # SSA branch for the else part of an if statement (line 2348)
    module_type_store.open_ssa_branch('else')
    
    # Call to extend(...): (line 2353)
    # Processing the call arguments (line 2353)
    # Getting the type of 'v' (line 2353)
    v_51562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2353, 28), 'v', False)
    # Processing the call keyword arguments (line 2353)
    kwargs_51563 = {}
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 2353)
    k_51557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2353, 18), 'k', False)
    # Getting the type of 'd' (line 2353)
    d_51558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2353, 16), 'd', False)
    # Obtaining the member '__getitem__' of a type (line 2353)
    getitem___51559 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2353, 16), d_51558, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2353)
    subscript_call_result_51560 = invoke(stypy.reporting.localization.Localization(__file__, 2353, 16), getitem___51559, k_51557)
    
    # Obtaining the member 'extend' of a type (line 2353)
    extend_51561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2353, 16), subscript_call_result_51560, 'extend')
    # Calling extend(args, kwargs) (line 2353)
    extend_call_result_51564 = invoke(stypy.reporting.localization.Localization(__file__, 2353, 16), extend_51561, *[v_51562], **kwargs_51563)
    
    # SSA join for if statement (line 2348)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 2347)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Subscript (line 2355):
    
    # Assigning a Name to a Subscript (line 2355):
    # Getting the type of 'v' (line 2355)
    v_51565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2355, 19), 'v')
    # Getting the type of 'd' (line 2355)
    d_51566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2355, 12), 'd')
    # Getting the type of 'k' (line 2355)
    k_51567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2355, 14), 'k')
    # Storing an element on a container (line 2355)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2355, 12), d_51566, (k_51567, v_51565))
    # SSA join for if statement (line 2347)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'languages' (line 2356)
    languages_51568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2356, 7), 'languages')
    # Testing the type of an if condition (line 2356)
    if_condition_51569 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2356, 4), languages_51568)
    # Assigning a type to the variable 'if_condition_51569' (line 2356)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2356, 4), 'if_condition_51569', if_condition_51569)
    # SSA begins for if statement (line 2356)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 2357):
    
    # Assigning a Subscript to a Name (line 2357):
    
    # Obtaining the type of the subscript
    
    # Call to max(...): (line 2357)
    # Processing the call arguments (line 2357)
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'languages' (line 2357)
    languages_51577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2357, 66), 'languages', False)
    comprehension_51578 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2357, 34), languages_51577)
    # Assigning a type to the variable 'l' (line 2357)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2357, 34), 'l', comprehension_51578)
    
    # Call to get(...): (line 2357)
    # Processing the call arguments (line 2357)
    # Getting the type of 'l' (line 2357)
    l_51573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2357, 51), 'l', False)
    int_51574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2357, 54), 'int')
    # Processing the call keyword arguments (line 2357)
    kwargs_51575 = {}
    # Getting the type of 'language_map' (line 2357)
    language_map_51571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2357, 34), 'language_map', False)
    # Obtaining the member 'get' of a type (line 2357)
    get_51572 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2357, 34), language_map_51571, 'get')
    # Calling get(args, kwargs) (line 2357)
    get_call_result_51576 = invoke(stypy.reporting.localization.Localization(__file__, 2357, 34), get_51572, *[l_51573, int_51574], **kwargs_51575)
    
    list_51579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2357, 34), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2357, 34), list_51579, get_call_result_51576)
    # Processing the call keyword arguments (line 2357)
    kwargs_51580 = {}
    # Getting the type of 'max' (line 2357)
    max_51570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2357, 29), 'max', False)
    # Calling max(args, kwargs) (line 2357)
    max_call_result_51581 = invoke(stypy.reporting.localization.Localization(__file__, 2357, 29), max_51570, *[list_51579], **kwargs_51580)
    
    # Getting the type of 'inv_language_map' (line 2357)
    inv_language_map_51582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2357, 12), 'inv_language_map')
    # Obtaining the member '__getitem__' of a type (line 2357)
    getitem___51583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2357, 12), inv_language_map_51582, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2357)
    subscript_call_result_51584 = invoke(stypy.reporting.localization.Localization(__file__, 2357, 12), getitem___51583, max_call_result_51581)
    
    # Assigning a type to the variable 'l' (line 2357)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2357, 8), 'l', subscript_call_result_51584)
    
    # Assigning a Name to a Subscript (line 2358):
    
    # Assigning a Name to a Subscript (line 2358):
    # Getting the type of 'l' (line 2358)
    l_51585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2358, 24), 'l')
    # Getting the type of 'd' (line 2358)
    d_51586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2358, 8), 'd')
    str_51587 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2358, 10), 'str', 'language')
    # Storing an element on a container (line 2358)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2358, 8), d_51586, (str_51587, l_51585))
    # SSA join for if statement (line 2356)
    module_type_store = module_type_store.join_ssa_context()
    
    # Assigning a type to the variable 'stypy_return_type' (line 2359)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2359, 4), 'stypy_return_type', types.NoneType)
    
    # ################# End of 'dict_append(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'dict_append' in the type store
    # Getting the type of 'stypy_return_type' (line 2341)
    stypy_return_type_51588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2341, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_51588)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'dict_append'
    return stypy_return_type_51588

# Assigning a type to the variable 'dict_append' (line 2341)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2341, 0), 'dict_append', dict_append)

@norecursion
def parseCmdLine(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    
    # Obtaining an instance of the builtin type 'tuple' (line 2362)
    tuple_51589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2362, 23), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2362)
    # Adding element type (line 2362)
    # Getting the type of 'None' (line 2362)
    None_51590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2362, 23), 'None')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2362, 23), tuple_51589, None_51590)
    
    defaults = [tuple_51589]
    # Create a new context for function 'parseCmdLine'
    module_type_store = module_type_store.open_function_context('parseCmdLine', 2362, 0, False)
    
    # Passed parameters checking function
    parseCmdLine.stypy_localization = localization
    parseCmdLine.stypy_type_of_self = None
    parseCmdLine.stypy_type_store = module_type_store
    parseCmdLine.stypy_function_name = 'parseCmdLine'
    parseCmdLine.stypy_param_names_list = ['argv']
    parseCmdLine.stypy_varargs_param_name = None
    parseCmdLine.stypy_kwargs_param_name = None
    parseCmdLine.stypy_call_defaults = defaults
    parseCmdLine.stypy_call_varargs = varargs
    parseCmdLine.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'parseCmdLine', ['argv'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'parseCmdLine', localization, ['argv'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'parseCmdLine(...)' code ##################

    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2363, 4))
    
    # 'import optparse' statement (line 2363)
    import optparse

    import_module(stypy.reporting.localization.Localization(__file__, 2363, 4), 'optparse', optparse, module_type_store)
    
    
    # Assigning a Call to a Name (line 2364):
    
    # Assigning a Call to a Name (line 2364):
    
    # Call to OptionParser(...): (line 2364)
    # Processing the call arguments (line 2364)
    str_51593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2364, 35), 'str', 'usage: %prog [-v] [info objs]')
    # Processing the call keyword arguments (line 2364)
    kwargs_51594 = {}
    # Getting the type of 'optparse' (line 2364)
    optparse_51591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2364, 13), 'optparse', False)
    # Obtaining the member 'OptionParser' of a type (line 2364)
    OptionParser_51592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2364, 13), optparse_51591, 'OptionParser')
    # Calling OptionParser(args, kwargs) (line 2364)
    OptionParser_call_result_51595 = invoke(stypy.reporting.localization.Localization(__file__, 2364, 13), OptionParser_51592, *[str_51593], **kwargs_51594)
    
    # Assigning a type to the variable 'parser' (line 2364)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2364, 4), 'parser', OptionParser_call_result_51595)
    
    # Call to add_option(...): (line 2365)
    # Processing the call arguments (line 2365)
    str_51598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2365, 22), 'str', '-v')
    str_51599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2365, 28), 'str', '--verbose')
    # Processing the call keyword arguments (line 2365)
    str_51600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2365, 48), 'str', 'store_true')
    keyword_51601 = str_51600
    str_51602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2365, 67), 'str', 'verbose')
    keyword_51603 = str_51602
    # Getting the type of 'False' (line 2366)
    False_51604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2366, 30), 'False', False)
    keyword_51605 = False_51604
    str_51606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2367, 27), 'str', 'be verbose and print more messages')
    keyword_51607 = str_51606
    kwargs_51608 = {'action': keyword_51601, 'dest': keyword_51603, 'default': keyword_51605, 'help': keyword_51607}
    # Getting the type of 'parser' (line 2365)
    parser_51596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2365, 4), 'parser', False)
    # Obtaining the member 'add_option' of a type (line 2365)
    add_option_51597 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2365, 4), parser_51596, 'add_option')
    # Calling add_option(args, kwargs) (line 2365)
    add_option_call_result_51609 = invoke(stypy.reporting.localization.Localization(__file__, 2365, 4), add_option_51597, *[str_51598, str_51599], **kwargs_51608)
    
    
    # Assigning a Call to a Tuple (line 2369):
    
    # Assigning a Call to a Name:
    
    # Call to parse_args(...): (line 2369)
    # Processing the call keyword arguments (line 2369)
    
    # Obtaining the type of the subscript
    int_51612 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2369, 45), 'int')
    slice_51613 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2369, 40), int_51612, None, None)
    # Getting the type of 'argv' (line 2369)
    argv_51614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2369, 40), 'argv', False)
    # Obtaining the member '__getitem__' of a type (line 2369)
    getitem___51615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2369, 40), argv_51614, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2369)
    subscript_call_result_51616 = invoke(stypy.reporting.localization.Localization(__file__, 2369, 40), getitem___51615, slice_51613)
    
    keyword_51617 = subscript_call_result_51616
    kwargs_51618 = {'args': keyword_51617}
    # Getting the type of 'parser' (line 2369)
    parser_51610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2369, 17), 'parser', False)
    # Obtaining the member 'parse_args' of a type (line 2369)
    parse_args_51611 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2369, 17), parser_51610, 'parse_args')
    # Calling parse_args(args, kwargs) (line 2369)
    parse_args_call_result_51619 = invoke(stypy.reporting.localization.Localization(__file__, 2369, 17), parse_args_51611, *[], **kwargs_51618)
    
    # Assigning a type to the variable 'call_assignment_45357' (line 2369)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2369, 4), 'call_assignment_45357', parse_args_call_result_51619)
    
    # Assigning a Call to a Name (line 2369):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_51622 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2369, 4), 'int')
    # Processing the call keyword arguments
    kwargs_51623 = {}
    # Getting the type of 'call_assignment_45357' (line 2369)
    call_assignment_45357_51620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2369, 4), 'call_assignment_45357', False)
    # Obtaining the member '__getitem__' of a type (line 2369)
    getitem___51621 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2369, 4), call_assignment_45357_51620, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_51624 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___51621, *[int_51622], **kwargs_51623)
    
    # Assigning a type to the variable 'call_assignment_45358' (line 2369)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2369, 4), 'call_assignment_45358', getitem___call_result_51624)
    
    # Assigning a Name to a Name (line 2369):
    # Getting the type of 'call_assignment_45358' (line 2369)
    call_assignment_45358_51625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2369, 4), 'call_assignment_45358')
    # Assigning a type to the variable 'opts' (line 2369)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2369, 4), 'opts', call_assignment_45358_51625)
    
    # Assigning a Call to a Name (line 2369):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_51628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2369, 4), 'int')
    # Processing the call keyword arguments
    kwargs_51629 = {}
    # Getting the type of 'call_assignment_45357' (line 2369)
    call_assignment_45357_51626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2369, 4), 'call_assignment_45357', False)
    # Obtaining the member '__getitem__' of a type (line 2369)
    getitem___51627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2369, 4), call_assignment_45357_51626, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_51630 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___51627, *[int_51628], **kwargs_51629)
    
    # Assigning a type to the variable 'call_assignment_45359' (line 2369)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2369, 4), 'call_assignment_45359', getitem___call_result_51630)
    
    # Assigning a Name to a Name (line 2369):
    # Getting the type of 'call_assignment_45359' (line 2369)
    call_assignment_45359_51631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2369, 4), 'call_assignment_45359')
    # Assigning a type to the variable 'args' (line 2369)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2369, 10), 'args', call_assignment_45359_51631)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2370)
    tuple_51632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2370, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2370)
    # Adding element type (line 2370)
    # Getting the type of 'opts' (line 2370)
    opts_51633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2370, 11), 'opts')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2370, 11), tuple_51632, opts_51633)
    # Adding element type (line 2370)
    # Getting the type of 'args' (line 2370)
    args_51634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2370, 17), 'args')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2370, 11), tuple_51632, args_51634)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2370)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2370, 4), 'stypy_return_type', tuple_51632)
    
    # ################# End of 'parseCmdLine(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'parseCmdLine' in the type store
    # Getting the type of 'stypy_return_type' (line 2362)
    stypy_return_type_51635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2362, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_51635)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'parseCmdLine'
    return stypy_return_type_51635

# Assigning a type to the variable 'parseCmdLine' (line 2362)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2362, 0), 'parseCmdLine', parseCmdLine)

@norecursion
def show_all(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2373)
    None_51636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2373, 18), 'None')
    defaults = [None_51636]
    # Create a new context for function 'show_all'
    module_type_store = module_type_store.open_function_context('show_all', 2373, 0, False)
    
    # Passed parameters checking function
    show_all.stypy_localization = localization
    show_all.stypy_type_of_self = None
    show_all.stypy_type_store = module_type_store
    show_all.stypy_function_name = 'show_all'
    show_all.stypy_param_names_list = ['argv']
    show_all.stypy_varargs_param_name = None
    show_all.stypy_kwargs_param_name = None
    show_all.stypy_call_defaults = defaults
    show_all.stypy_call_varargs = varargs
    show_all.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'show_all', ['argv'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'show_all', localization, ['argv'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'show_all(...)' code ##################

    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2374, 4))
    
    # 'import inspect' statement (line 2374)
    import inspect

    import_module(stypy.reporting.localization.Localization(__file__, 2374, 4), 'inspect', inspect, module_type_store)
    
    
    # Type idiom detected: calculating its left and rigth part (line 2375)
    # Getting the type of 'argv' (line 2375)
    argv_51637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2375, 7), 'argv')
    # Getting the type of 'None' (line 2375)
    None_51638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2375, 15), 'None')
    
    (may_be_51639, more_types_in_union_51640) = may_be_none(argv_51637, None_51638)

    if may_be_51639:

        if more_types_in_union_51640:
            # Runtime conditional SSA (line 2375)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Attribute to a Name (line 2376):
        
        # Assigning a Attribute to a Name (line 2376):
        # Getting the type of 'sys' (line 2376)
        sys_51641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2376, 15), 'sys')
        # Obtaining the member 'argv' of a type (line 2376)
        argv_51642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2376, 15), sys_51641, 'argv')
        # Assigning a type to the variable 'argv' (line 2376)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2376, 8), 'argv', argv_51642)

        if more_types_in_union_51640:
            # SSA join for if statement (line 2375)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Tuple (line 2377):
    
    # Assigning a Call to a Name:
    
    # Call to parseCmdLine(...): (line 2377)
    # Processing the call arguments (line 2377)
    # Getting the type of 'argv' (line 2377)
    argv_51644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2377, 30), 'argv', False)
    # Processing the call keyword arguments (line 2377)
    kwargs_51645 = {}
    # Getting the type of 'parseCmdLine' (line 2377)
    parseCmdLine_51643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2377, 17), 'parseCmdLine', False)
    # Calling parseCmdLine(args, kwargs) (line 2377)
    parseCmdLine_call_result_51646 = invoke(stypy.reporting.localization.Localization(__file__, 2377, 17), parseCmdLine_51643, *[argv_51644], **kwargs_51645)
    
    # Assigning a type to the variable 'call_assignment_45360' (line 2377)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2377, 4), 'call_assignment_45360', parseCmdLine_call_result_51646)
    
    # Assigning a Call to a Name (line 2377):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_51649 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2377, 4), 'int')
    # Processing the call keyword arguments
    kwargs_51650 = {}
    # Getting the type of 'call_assignment_45360' (line 2377)
    call_assignment_45360_51647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2377, 4), 'call_assignment_45360', False)
    # Obtaining the member '__getitem__' of a type (line 2377)
    getitem___51648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2377, 4), call_assignment_45360_51647, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_51651 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___51648, *[int_51649], **kwargs_51650)
    
    # Assigning a type to the variable 'call_assignment_45361' (line 2377)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2377, 4), 'call_assignment_45361', getitem___call_result_51651)
    
    # Assigning a Name to a Name (line 2377):
    # Getting the type of 'call_assignment_45361' (line 2377)
    call_assignment_45361_51652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2377, 4), 'call_assignment_45361')
    # Assigning a type to the variable 'opts' (line 2377)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2377, 4), 'opts', call_assignment_45361_51652)
    
    # Assigning a Call to a Name (line 2377):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_51655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2377, 4), 'int')
    # Processing the call keyword arguments
    kwargs_51656 = {}
    # Getting the type of 'call_assignment_45360' (line 2377)
    call_assignment_45360_51653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2377, 4), 'call_assignment_45360', False)
    # Obtaining the member '__getitem__' of a type (line 2377)
    getitem___51654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2377, 4), call_assignment_45360_51653, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_51657 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___51654, *[int_51655], **kwargs_51656)
    
    # Assigning a type to the variable 'call_assignment_45362' (line 2377)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2377, 4), 'call_assignment_45362', getitem___call_result_51657)
    
    # Assigning a Name to a Name (line 2377):
    # Getting the type of 'call_assignment_45362' (line 2377)
    call_assignment_45362_51658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2377, 4), 'call_assignment_45362')
    # Assigning a type to the variable 'args' (line 2377)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2377, 10), 'args', call_assignment_45362_51658)
    
    # Getting the type of 'opts' (line 2378)
    opts_51659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2378, 7), 'opts')
    # Obtaining the member 'verbose' of a type (line 2378)
    verbose_51660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2378, 7), opts_51659, 'verbose')
    # Testing the type of an if condition (line 2378)
    if_condition_51661 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2378, 4), verbose_51660)
    # Assigning a type to the variable 'if_condition_51661' (line 2378)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2378, 4), 'if_condition_51661', if_condition_51661)
    # SSA begins for if statement (line 2378)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to set_threshold(...): (line 2379)
    # Processing the call arguments (line 2379)
    # Getting the type of 'log' (line 2379)
    log_51664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2379, 26), 'log', False)
    # Obtaining the member 'DEBUG' of a type (line 2379)
    DEBUG_51665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2379, 26), log_51664, 'DEBUG')
    # Processing the call keyword arguments (line 2379)
    kwargs_51666 = {}
    # Getting the type of 'log' (line 2379)
    log_51662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2379, 8), 'log', False)
    # Obtaining the member 'set_threshold' of a type (line 2379)
    set_threshold_51663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2379, 8), log_51662, 'set_threshold')
    # Calling set_threshold(args, kwargs) (line 2379)
    set_threshold_call_result_51667 = invoke(stypy.reporting.localization.Localization(__file__, 2379, 8), set_threshold_51663, *[DEBUG_51665], **kwargs_51666)
    
    # SSA branch for the else part of an if statement (line 2378)
    module_type_store.open_ssa_branch('else')
    
    # Call to set_threshold(...): (line 2381)
    # Processing the call arguments (line 2381)
    # Getting the type of 'log' (line 2381)
    log_51670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2381, 26), 'log', False)
    # Obtaining the member 'INFO' of a type (line 2381)
    INFO_51671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2381, 26), log_51670, 'INFO')
    # Processing the call keyword arguments (line 2381)
    kwargs_51672 = {}
    # Getting the type of 'log' (line 2381)
    log_51668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2381, 8), 'log', False)
    # Obtaining the member 'set_threshold' of a type (line 2381)
    set_threshold_51669 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2381, 8), log_51668, 'set_threshold')
    # Calling set_threshold(args, kwargs) (line 2381)
    set_threshold_call_result_51673 = invoke(stypy.reporting.localization.Localization(__file__, 2381, 8), set_threshold_51669, *[INFO_51671], **kwargs_51672)
    
    # SSA join for if statement (line 2378)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a List to a Name (line 2382):
    
    # Assigning a List to a Name (line 2382):
    
    # Obtaining an instance of the builtin type 'list' (line 2382)
    list_51674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2382, 16), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2382)
    
    # Assigning a type to the variable 'show_only' (line 2382)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2382, 4), 'show_only', list_51674)
    
    # Getting the type of 'args' (line 2383)
    args_51675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2383, 13), 'args')
    # Testing the type of a for loop iterable (line 2383)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2383, 4), args_51675)
    # Getting the type of the for loop variable (line 2383)
    for_loop_var_51676 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2383, 4), args_51675)
    # Assigning a type to the variable 'n' (line 2383)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2383, 4), 'n', for_loop_var_51676)
    # SSA begins for a for statement (line 2383)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    
    # Obtaining the type of the subscript
    int_51677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2384, 13), 'int')
    slice_51678 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2384, 11), int_51677, None, None)
    # Getting the type of 'n' (line 2384)
    n_51679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2384, 11), 'n')
    # Obtaining the member '__getitem__' of a type (line 2384)
    getitem___51680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2384, 11), n_51679, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2384)
    subscript_call_result_51681 = invoke(stypy.reporting.localization.Localization(__file__, 2384, 11), getitem___51680, slice_51678)
    
    str_51682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2384, 21), 'str', '_info')
    # Applying the binary operator '!=' (line 2384)
    result_ne_51683 = python_operator(stypy.reporting.localization.Localization(__file__, 2384, 11), '!=', subscript_call_result_51681, str_51682)
    
    # Testing the type of an if condition (line 2384)
    if_condition_51684 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2384, 8), result_ne_51683)
    # Assigning a type to the variable 'if_condition_51684' (line 2384)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2384, 8), 'if_condition_51684', if_condition_51684)
    # SSA begins for if statement (line 2384)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 2385):
    
    # Assigning a BinOp to a Name (line 2385):
    # Getting the type of 'n' (line 2385)
    n_51685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2385, 16), 'n')
    str_51686 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2385, 20), 'str', '_info')
    # Applying the binary operator '+' (line 2385)
    result_add_51687 = python_operator(stypy.reporting.localization.Localization(__file__, 2385, 16), '+', n_51685, str_51686)
    
    # Assigning a type to the variable 'n' (line 2385)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2385, 12), 'n', result_add_51687)
    # SSA join for if statement (line 2384)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to append(...): (line 2386)
    # Processing the call arguments (line 2386)
    # Getting the type of 'n' (line 2386)
    n_51690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2386, 25), 'n', False)
    # Processing the call keyword arguments (line 2386)
    kwargs_51691 = {}
    # Getting the type of 'show_only' (line 2386)
    show_only_51688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2386, 8), 'show_only', False)
    # Obtaining the member 'append' of a type (line 2386)
    append_51689 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2386, 8), show_only_51688, 'append')
    # Calling append(args, kwargs) (line 2386)
    append_call_result_51692 = invoke(stypy.reporting.localization.Localization(__file__, 2386, 8), append_51689, *[n_51690], **kwargs_51691)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a UnaryOp to a Name (line 2387):
    
    # Assigning a UnaryOp to a Name (line 2387):
    
    # Getting the type of 'show_only' (line 2387)
    show_only_51693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2387, 19), 'show_only')
    # Applying the 'not' unary operator (line 2387)
    result_not__51694 = python_operator(stypy.reporting.localization.Localization(__file__, 2387, 15), 'not', show_only_51693)
    
    # Assigning a type to the variable 'show_all' (line 2387)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2387, 4), 'show_all', result_not__51694)
    
    # Assigning a Call to a Name (line 2388):
    
    # Assigning a Call to a Name (line 2388):
    
    # Call to copy(...): (line 2388)
    # Processing the call keyword arguments (line 2388)
    kwargs_51699 = {}
    
    # Call to globals(...): (line 2388)
    # Processing the call keyword arguments (line 2388)
    kwargs_51696 = {}
    # Getting the type of 'globals' (line 2388)
    globals_51695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2388, 14), 'globals', False)
    # Calling globals(args, kwargs) (line 2388)
    globals_call_result_51697 = invoke(stypy.reporting.localization.Localization(__file__, 2388, 14), globals_51695, *[], **kwargs_51696)
    
    # Obtaining the member 'copy' of a type (line 2388)
    copy_51698 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2388, 14), globals_call_result_51697, 'copy')
    # Calling copy(args, kwargs) (line 2388)
    copy_call_result_51700 = invoke(stypy.reporting.localization.Localization(__file__, 2388, 14), copy_51698, *[], **kwargs_51699)
    
    # Assigning a type to the variable '_gdict_' (line 2388)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2388, 4), '_gdict_', copy_call_result_51700)
    
    
    # Call to items(...): (line 2389)
    # Processing the call keyword arguments (line 2389)
    kwargs_51703 = {}
    # Getting the type of '_gdict_' (line 2389)
    _gdict__51701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2389, 19), '_gdict_', False)
    # Obtaining the member 'items' of a type (line 2389)
    items_51702 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2389, 19), _gdict__51701, 'items')
    # Calling items(args, kwargs) (line 2389)
    items_call_result_51704 = invoke(stypy.reporting.localization.Localization(__file__, 2389, 19), items_51702, *[], **kwargs_51703)
    
    # Testing the type of a for loop iterable (line 2389)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2389, 4), items_call_result_51704)
    # Getting the type of the for loop variable (line 2389)
    for_loop_var_51705 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2389, 4), items_call_result_51704)
    # Assigning a type to the variable 'name' (line 2389)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2389, 4), 'name', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2389, 4), for_loop_var_51705))
    # Assigning a type to the variable 'c' (line 2389)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2389, 4), 'c', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2389, 4), for_loop_var_51705))
    # SSA begins for a for statement (line 2389)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    
    # Call to isclass(...): (line 2390)
    # Processing the call arguments (line 2390)
    # Getting the type of 'c' (line 2390)
    c_51708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2390, 31), 'c', False)
    # Processing the call keyword arguments (line 2390)
    kwargs_51709 = {}
    # Getting the type of 'inspect' (line 2390)
    inspect_51706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2390, 15), 'inspect', False)
    # Obtaining the member 'isclass' of a type (line 2390)
    isclass_51707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2390, 15), inspect_51706, 'isclass')
    # Calling isclass(args, kwargs) (line 2390)
    isclass_call_result_51710 = invoke(stypy.reporting.localization.Localization(__file__, 2390, 15), isclass_51707, *[c_51708], **kwargs_51709)
    
    # Applying the 'not' unary operator (line 2390)
    result_not__51711 = python_operator(stypy.reporting.localization.Localization(__file__, 2390, 11), 'not', isclass_call_result_51710)
    
    # Testing the type of an if condition (line 2390)
    if_condition_51712 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2390, 8), result_not__51711)
    # Assigning a type to the variable 'if_condition_51712' (line 2390)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2390, 8), 'if_condition_51712', if_condition_51712)
    # SSA begins for if statement (line 2390)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 2390)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    
    # Call to issubclass(...): (line 2392)
    # Processing the call arguments (line 2392)
    # Getting the type of 'c' (line 2392)
    c_51714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2392, 26), 'c', False)
    # Getting the type of 'system_info' (line 2392)
    system_info_51715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2392, 29), 'system_info', False)
    # Processing the call keyword arguments (line 2392)
    kwargs_51716 = {}
    # Getting the type of 'issubclass' (line 2392)
    issubclass_51713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2392, 15), 'issubclass', False)
    # Calling issubclass(args, kwargs) (line 2392)
    issubclass_call_result_51717 = invoke(stypy.reporting.localization.Localization(__file__, 2392, 15), issubclass_51713, *[c_51714, system_info_51715], **kwargs_51716)
    
    # Applying the 'not' unary operator (line 2392)
    result_not__51718 = python_operator(stypy.reporting.localization.Localization(__file__, 2392, 11), 'not', issubclass_call_result_51717)
    
    
    # Getting the type of 'c' (line 2392)
    c_51719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2392, 45), 'c')
    # Getting the type of 'system_info' (line 2392)
    system_info_51720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2392, 50), 'system_info')
    # Applying the binary operator 'is' (line 2392)
    result_is__51721 = python_operator(stypy.reporting.localization.Localization(__file__, 2392, 45), 'is', c_51719, system_info_51720)
    
    # Applying the binary operator 'or' (line 2392)
    result_or_keyword_51722 = python_operator(stypy.reporting.localization.Localization(__file__, 2392, 11), 'or', result_not__51718, result_is__51721)
    
    # Testing the type of an if condition (line 2392)
    if_condition_51723 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2392, 8), result_or_keyword_51722)
    # Assigning a type to the variable 'if_condition_51723' (line 2392)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2392, 8), 'if_condition_51723', if_condition_51723)
    # SSA begins for if statement (line 2392)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 2392)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'show_all' (line 2394)
    show_all_51724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2394, 15), 'show_all')
    # Applying the 'not' unary operator (line 2394)
    result_not__51725 = python_operator(stypy.reporting.localization.Localization(__file__, 2394, 11), 'not', show_all_51724)
    
    # Testing the type of an if condition (line 2394)
    if_condition_51726 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2394, 8), result_not__51725)
    # Assigning a type to the variable 'if_condition_51726' (line 2394)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2394, 8), 'if_condition_51726', if_condition_51726)
    # SSA begins for if statement (line 2394)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'name' (line 2395)
    name_51727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2395, 15), 'name')
    # Getting the type of 'show_only' (line 2395)
    show_only_51728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2395, 27), 'show_only')
    # Applying the binary operator 'notin' (line 2395)
    result_contains_51729 = python_operator(stypy.reporting.localization.Localization(__file__, 2395, 15), 'notin', name_51727, show_only_51728)
    
    # Testing the type of an if condition (line 2395)
    if_condition_51730 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2395, 12), result_contains_51729)
    # Assigning a type to the variable 'if_condition_51730' (line 2395)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2395, 12), 'if_condition_51730', if_condition_51730)
    # SSA begins for if statement (line 2395)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 2395)
    module_type_store = module_type_store.join_ssa_context()
    
    # Deleting a member
    # Getting the type of 'show_only' (line 2397)
    show_only_51731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2397, 16), 'show_only')
    
    # Obtaining the type of the subscript
    
    # Call to index(...): (line 2397)
    # Processing the call arguments (line 2397)
    # Getting the type of 'name' (line 2397)
    name_51734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2397, 42), 'name', False)
    # Processing the call keyword arguments (line 2397)
    kwargs_51735 = {}
    # Getting the type of 'show_only' (line 2397)
    show_only_51732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2397, 26), 'show_only', False)
    # Obtaining the member 'index' of a type (line 2397)
    index_51733 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2397, 26), show_only_51732, 'index')
    # Calling index(args, kwargs) (line 2397)
    index_call_result_51736 = invoke(stypy.reporting.localization.Localization(__file__, 2397, 26), index_51733, *[name_51734], **kwargs_51735)
    
    # Getting the type of 'show_only' (line 2397)
    show_only_51737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2397, 16), 'show_only')
    # Obtaining the member '__getitem__' of a type (line 2397)
    getitem___51738 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2397, 16), show_only_51737, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2397)
    subscript_call_result_51739 = invoke(stypy.reporting.localization.Localization(__file__, 2397, 16), getitem___51738, index_call_result_51736)
    
    del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2397, 12), show_only_51731, subscript_call_result_51739)
    # SSA join for if statement (line 2394)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2398):
    
    # Assigning a Call to a Name (line 2398):
    
    # Call to c(...): (line 2398)
    # Processing the call keyword arguments (line 2398)
    kwargs_51741 = {}
    # Getting the type of 'c' (line 2398)
    c_51740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2398, 15), 'c', False)
    # Calling c(args, kwargs) (line 2398)
    c_call_result_51742 = invoke(stypy.reporting.localization.Localization(__file__, 2398, 15), c_51740, *[], **kwargs_51741)
    
    # Assigning a type to the variable 'conf' (line 2398)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2398, 8), 'conf', c_call_result_51742)
    
    # Assigning a Num to a Attribute (line 2399):
    
    # Assigning a Num to a Attribute (line 2399):
    int_51743 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2399, 25), 'int')
    # Getting the type of 'conf' (line 2399)
    conf_51744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2399, 8), 'conf')
    # Setting the type of the member 'verbosity' of a type (line 2399)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2399, 8), conf_51744, 'verbosity', int_51743)
    
    # Assigning a Call to a Name (line 2400):
    
    # Assigning a Call to a Name (line 2400):
    
    # Call to get_info(...): (line 2400)
    # Processing the call keyword arguments (line 2400)
    kwargs_51747 = {}
    # Getting the type of 'conf' (line 2400)
    conf_51745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2400, 12), 'conf', False)
    # Obtaining the member 'get_info' of a type (line 2400)
    get_info_51746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2400, 12), conf_51745, 'get_info')
    # Calling get_info(args, kwargs) (line 2400)
    get_info_call_result_51748 = invoke(stypy.reporting.localization.Localization(__file__, 2400, 12), get_info_51746, *[], **kwargs_51747)
    
    # Assigning a type to the variable 'r' (line 2400)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2400, 8), 'r', get_info_call_result_51748)
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'show_only' (line 2401)
    show_only_51749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2401, 7), 'show_only')
    # Testing the type of an if condition (line 2401)
    if_condition_51750 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2401, 4), show_only_51749)
    # Assigning a type to the variable 'if_condition_51750' (line 2401)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2401, 4), 'if_condition_51750', if_condition_51750)
    # SSA begins for if statement (line 2401)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to info(...): (line 2402)
    # Processing the call arguments (line 2402)
    str_51753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2402, 17), 'str', 'Info classes not defined: %s')
    
    # Call to join(...): (line 2402)
    # Processing the call arguments (line 2402)
    # Getting the type of 'show_only' (line 2402)
    show_only_51756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2402, 58), 'show_only', False)
    # Processing the call keyword arguments (line 2402)
    kwargs_51757 = {}
    str_51754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2402, 49), 'str', ',')
    # Obtaining the member 'join' of a type (line 2402)
    join_51755 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2402, 49), str_51754, 'join')
    # Calling join(args, kwargs) (line 2402)
    join_call_result_51758 = invoke(stypy.reporting.localization.Localization(__file__, 2402, 49), join_51755, *[show_only_51756], **kwargs_51757)
    
    # Processing the call keyword arguments (line 2402)
    kwargs_51759 = {}
    # Getting the type of 'log' (line 2402)
    log_51751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2402, 8), 'log', False)
    # Obtaining the member 'info' of a type (line 2402)
    info_51752 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2402, 8), log_51751, 'info')
    # Calling info(args, kwargs) (line 2402)
    info_call_result_51760 = invoke(stypy.reporting.localization.Localization(__file__, 2402, 8), info_51752, *[str_51753, join_call_result_51758], **kwargs_51759)
    
    # SSA join for if statement (line 2401)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'show_all(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'show_all' in the type store
    # Getting the type of 'stypy_return_type' (line 2373)
    stypy_return_type_51761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2373, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_51761)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'show_all'
    return stypy_return_type_51761

# Assigning a type to the variable 'show_all' (line 2373)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2373, 0), 'show_all', show_all)

if (__name__ == '__main__'):
    
    # Call to show_all(...): (line 2405)
    # Processing the call keyword arguments (line 2405)
    kwargs_51763 = {}
    # Getting the type of 'show_all' (line 2405)
    show_all_51762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2405, 4), 'show_all', False)
    # Calling show_all(args, kwargs) (line 2405)
    show_all_call_result_51764 = invoke(stypy.reporting.localization.Localization(__file__, 2405, 4), show_all_51762, *[], **kwargs_51763)
    


# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
