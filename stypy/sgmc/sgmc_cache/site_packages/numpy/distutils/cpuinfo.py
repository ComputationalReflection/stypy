
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: #!/usr/bin/env python
2: '''
3: cpuinfo
4: 
5: Copyright 2002 Pearu Peterson all rights reserved,
6: Pearu Peterson <pearu@cens.ioc.ee>
7: Permission to use, modify, and distribute this software is given under the
8: terms of the NumPy (BSD style) license.  See LICENSE.txt that came with
9: this distribution for specifics.
10: 
11: NO WARRANTY IS EXPRESSED OR IMPLIED.  USE AT YOUR OWN RISK.
12: Pearu Peterson
13: 
14: '''
15: from __future__ import division, absolute_import, print_function
16: 
17: __all__ = ['cpu']
18: 
19: import sys, re, types
20: import os
21: 
22: if sys.version_info[0] >= 3:
23:     from subprocess import getstatusoutput
24: else:
25:     from commands import getstatusoutput
26: 
27: import warnings
28: import platform
29: 
30: from numpy.distutils.compat import get_exception
31: 
32: def getoutput(cmd, successful_status=(0,), stacklevel=1):
33:     try:
34:         status, output = getstatusoutput(cmd)
35:     except EnvironmentError:
36:         e = get_exception()
37:         warnings.warn(str(e), UserWarning, stacklevel=stacklevel)
38:         return False, output
39:     if os.WIFEXITED(status) and os.WEXITSTATUS(status) in successful_status:
40:         return True, output
41:     return False, output
42: 
43: def command_info(successful_status=(0,), stacklevel=1, **kw):
44:     info = {}
45:     for key in kw:
46:         ok, output = getoutput(kw[key], successful_status=successful_status,
47:                                stacklevel=stacklevel+1)
48:         if ok:
49:             info[key] = output.strip()
50:     return info
51: 
52: def command_by_line(cmd, successful_status=(0,), stacklevel=1):
53:     ok, output = getoutput(cmd, successful_status=successful_status,
54:                            stacklevel=stacklevel+1)
55:     if not ok:
56:         return
57:     for line in output.splitlines():
58:         yield line.strip()
59: 
60: def key_value_from_command(cmd, sep, successful_status=(0,),
61:                            stacklevel=1):
62:     d = {}
63:     for line in command_by_line(cmd, successful_status=successful_status,
64:                                 stacklevel=stacklevel+1):
65:         l = [s.strip() for s in line.split(sep, 1)]
66:         if len(l) == 2:
67:             d[l[0]] = l[1]
68:     return d
69: 
70: class CPUInfoBase(object):
71:     '''Holds CPU information and provides methods for requiring
72:     the availability of various CPU features.
73:     '''
74: 
75:     def _try_call(self, func):
76:         try:
77:             return func()
78:         except:
79:             pass
80: 
81:     def __getattr__(self, name):
82:         if not name.startswith('_'):
83:             if hasattr(self, '_'+name):
84:                 attr = getattr(self, '_'+name)
85:                 if isinstance(attr, types.MethodType):
86:                     return lambda func=self._try_call,attr=attr : func(attr)
87:             else:
88:                 return lambda : None
89:         raise AttributeError(name)
90: 
91:     def _getNCPUs(self):
92:         return 1
93: 
94:     def __get_nbits(self):
95:         abits = platform.architecture()[0]
96:         nbits = re.compile('(\d+)bit').search(abits).group(1)
97:         return nbits
98: 
99:     def _is_32bit(self):
100:         return self.__get_nbits() == '32'
101: 
102:     def _is_64bit(self):
103:         return self.__get_nbits() == '64'
104: 
105: class LinuxCPUInfo(CPUInfoBase):
106: 
107:     info = None
108: 
109:     def __init__(self):
110:         if self.info is not None:
111:             return
112:         info = [ {} ]
113:         ok, output = getoutput('uname -m')
114:         if ok:
115:             info[0]['uname_m'] = output.strip()
116:         try:
117:             fo = open('/proc/cpuinfo')
118:         except EnvironmentError:
119:             e = get_exception()
120:             warnings.warn(str(e), UserWarning)
121:         else:
122:             for line in fo:
123:                 name_value = [s.strip() for s in line.split(':', 1)]
124:                 if len(name_value) != 2:
125:                     continue
126:                 name, value = name_value
127:                 if not info or name in info[-1]: # next processor
128:                     info.append({})
129:                 info[-1][name] = value
130:             fo.close()
131:         self.__class__.info = info
132: 
133:     def _not_impl(self): pass
134: 
135:     # Athlon
136: 
137:     def _is_AMD(self):
138:         return self.info[0]['vendor_id']=='AuthenticAMD'
139: 
140:     def _is_AthlonK6_2(self):
141:         return self._is_AMD() and self.info[0]['model'] == '2'
142: 
143:     def _is_AthlonK6_3(self):
144:         return self._is_AMD() and self.info[0]['model'] == '3'
145: 
146:     def _is_AthlonK6(self):
147:         return re.match(r'.*?AMD-K6', self.info[0]['model name']) is not None
148: 
149:     def _is_AthlonK7(self):
150:         return re.match(r'.*?AMD-K7', self.info[0]['model name']) is not None
151: 
152:     def _is_AthlonMP(self):
153:         return re.match(r'.*?Athlon\(tm\) MP\b',
154:                         self.info[0]['model name']) is not None
155: 
156:     def _is_AMD64(self):
157:         return self.is_AMD() and self.info[0]['family'] == '15'
158: 
159:     def _is_Athlon64(self):
160:         return re.match(r'.*?Athlon\(tm\) 64\b',
161:                         self.info[0]['model name']) is not None
162: 
163:     def _is_AthlonHX(self):
164:         return re.match(r'.*?Athlon HX\b',
165:                         self.info[0]['model name']) is not None
166: 
167:     def _is_Opteron(self):
168:         return re.match(r'.*?Opteron\b',
169:                         self.info[0]['model name']) is not None
170: 
171:     def _is_Hammer(self):
172:         return re.match(r'.*?Hammer\b',
173:                         self.info[0]['model name']) is not None
174: 
175:     # Alpha
176: 
177:     def _is_Alpha(self):
178:         return self.info[0]['cpu']=='Alpha'
179: 
180:     def _is_EV4(self):
181:         return self.is_Alpha() and self.info[0]['cpu model'] == 'EV4'
182: 
183:     def _is_EV5(self):
184:         return self.is_Alpha() and self.info[0]['cpu model'] == 'EV5'
185: 
186:     def _is_EV56(self):
187:         return self.is_Alpha() and self.info[0]['cpu model'] == 'EV56'
188: 
189:     def _is_PCA56(self):
190:         return self.is_Alpha() and self.info[0]['cpu model'] == 'PCA56'
191: 
192:     # Intel
193: 
194:     #XXX
195:     _is_i386 = _not_impl
196: 
197:     def _is_Intel(self):
198:         return self.info[0]['vendor_id']=='GenuineIntel'
199: 
200:     def _is_i486(self):
201:         return self.info[0]['cpu']=='i486'
202: 
203:     def _is_i586(self):
204:         return self.is_Intel() and self.info[0]['cpu family'] == '5'
205: 
206:     def _is_i686(self):
207:         return self.is_Intel() and self.info[0]['cpu family'] == '6'
208: 
209:     def _is_Celeron(self):
210:         return re.match(r'.*?Celeron',
211:                         self.info[0]['model name']) is not None
212: 
213:     def _is_Pentium(self):
214:         return re.match(r'.*?Pentium',
215:                         self.info[0]['model name']) is not None
216: 
217:     def _is_PentiumII(self):
218:         return re.match(r'.*?Pentium.*?II\b',
219:                         self.info[0]['model name']) is not None
220: 
221:     def _is_PentiumPro(self):
222:         return re.match(r'.*?PentiumPro\b',
223:                         self.info[0]['model name']) is not None
224: 
225:     def _is_PentiumMMX(self):
226:         return re.match(r'.*?Pentium.*?MMX\b',
227:                         self.info[0]['model name']) is not None
228: 
229:     def _is_PentiumIII(self):
230:         return re.match(r'.*?Pentium.*?III\b',
231:                         self.info[0]['model name']) is not None
232: 
233:     def _is_PentiumIV(self):
234:         return re.match(r'.*?Pentium.*?(IV|4)\b',
235:                         self.info[0]['model name']) is not None
236: 
237:     def _is_PentiumM(self):
238:         return re.match(r'.*?Pentium.*?M\b',
239:                         self.info[0]['model name']) is not None
240: 
241:     def _is_Prescott(self):
242:         return self.is_PentiumIV() and self.has_sse3()
243: 
244:     def _is_Nocona(self):
245:         return self.is_Intel() \
246:                and (self.info[0]['cpu family'] == '6' \
247:                     or self.info[0]['cpu family'] == '15' ) \
248:                and (self.has_sse3() and not self.has_ssse3())\
249:                and re.match(r'.*?\blm\b', self.info[0]['flags']) is not None
250: 
251:     def _is_Core2(self):
252:         return self.is_64bit() and self.is_Intel() and \
253:                re.match(r'.*?Core\(TM\)2\b', \
254:                         self.info[0]['model name']) is not None
255: 
256:     def _is_Itanium(self):
257:         return re.match(r'.*?Itanium\b',
258:                         self.info[0]['family']) is not None
259: 
260:     def _is_XEON(self):
261:         return re.match(r'.*?XEON\b',
262:                         self.info[0]['model name'], re.IGNORECASE) is not None
263: 
264:     _is_Xeon = _is_XEON
265: 
266:     # Varia
267: 
268:     def _is_singleCPU(self):
269:         return len(self.info) == 1
270: 
271:     def _getNCPUs(self):
272:         return len(self.info)
273: 
274:     def _has_fdiv_bug(self):
275:         return self.info[0]['fdiv_bug']=='yes'
276: 
277:     def _has_f00f_bug(self):
278:         return self.info[0]['f00f_bug']=='yes'
279: 
280:     def _has_mmx(self):
281:         return re.match(r'.*?\bmmx\b', self.info[0]['flags']) is not None
282: 
283:     def _has_sse(self):
284:         return re.match(r'.*?\bsse\b', self.info[0]['flags']) is not None
285: 
286:     def _has_sse2(self):
287:         return re.match(r'.*?\bsse2\b', self.info[0]['flags']) is not None
288: 
289:     def _has_sse3(self):
290:         return re.match(r'.*?\bpni\b', self.info[0]['flags']) is not None
291: 
292:     def _has_ssse3(self):
293:         return re.match(r'.*?\bssse3\b', self.info[0]['flags']) is not None
294: 
295:     def _has_3dnow(self):
296:         return re.match(r'.*?\b3dnow\b', self.info[0]['flags']) is not None
297: 
298:     def _has_3dnowext(self):
299:         return re.match(r'.*?\b3dnowext\b', self.info[0]['flags']) is not None
300: 
301: class IRIXCPUInfo(CPUInfoBase):
302:     info = None
303: 
304:     def __init__(self):
305:         if self.info is not None:
306:             return
307:         info = key_value_from_command('sysconf', sep=' ',
308:                                       successful_status=(0, 1))
309:         self.__class__.info = info
310: 
311:     def _not_impl(self): pass
312: 
313:     def _is_singleCPU(self):
314:         return self.info.get('NUM_PROCESSORS') == '1'
315: 
316:     def _getNCPUs(self):
317:         return int(self.info.get('NUM_PROCESSORS', 1))
318: 
319:     def __cputype(self, n):
320:         return self.info.get('PROCESSORS').split()[0].lower() == 'r%s' % (n)
321:     def _is_r2000(self): return self.__cputype(2000)
322:     def _is_r3000(self): return self.__cputype(3000)
323:     def _is_r3900(self): return self.__cputype(3900)
324:     def _is_r4000(self): return self.__cputype(4000)
325:     def _is_r4100(self): return self.__cputype(4100)
326:     def _is_r4300(self): return self.__cputype(4300)
327:     def _is_r4400(self): return self.__cputype(4400)
328:     def _is_r4600(self): return self.__cputype(4600)
329:     def _is_r4650(self): return self.__cputype(4650)
330:     def _is_r5000(self): return self.__cputype(5000)
331:     def _is_r6000(self): return self.__cputype(6000)
332:     def _is_r8000(self): return self.__cputype(8000)
333:     def _is_r10000(self): return self.__cputype(10000)
334:     def _is_r12000(self): return self.__cputype(12000)
335:     def _is_rorion(self): return self.__cputype('orion')
336: 
337:     def get_ip(self):
338:         try: return self.info.get('MACHINE')
339:         except: pass
340:     def __machine(self, n):
341:         return self.info.get('MACHINE').lower() == 'ip%s' % (n)
342:     def _is_IP19(self): return self.__machine(19)
343:     def _is_IP20(self): return self.__machine(20)
344:     def _is_IP21(self): return self.__machine(21)
345:     def _is_IP22(self): return self.__machine(22)
346:     def _is_IP22_4k(self): return self.__machine(22) and self._is_r4000()
347:     def _is_IP22_5k(self): return self.__machine(22)  and self._is_r5000()
348:     def _is_IP24(self): return self.__machine(24)
349:     def _is_IP25(self): return self.__machine(25)
350:     def _is_IP26(self): return self.__machine(26)
351:     def _is_IP27(self): return self.__machine(27)
352:     def _is_IP28(self): return self.__machine(28)
353:     def _is_IP30(self): return self.__machine(30)
354:     def _is_IP32(self): return self.__machine(32)
355:     def _is_IP32_5k(self): return self.__machine(32) and self._is_r5000()
356:     def _is_IP32_10k(self): return self.__machine(32) and self._is_r10000()
357: 
358: 
359: class DarwinCPUInfo(CPUInfoBase):
360:     info = None
361: 
362:     def __init__(self):
363:         if self.info is not None:
364:             return
365:         info = command_info(arch='arch',
366:                             machine='machine')
367:         info['sysctl_hw'] = key_value_from_command('sysctl hw', sep='=')
368:         self.__class__.info = info
369: 
370:     def _not_impl(self): pass
371: 
372:     def _getNCPUs(self):
373:         return int(self.info['sysctl_hw'].get('hw.ncpu', 1))
374: 
375:     def _is_Power_Macintosh(self):
376:         return self.info['sysctl_hw']['hw.machine']=='Power Macintosh'
377: 
378:     def _is_i386(self):
379:         return self.info['arch']=='i386'
380:     def _is_ppc(self):
381:         return self.info['arch']=='ppc'
382: 
383:     def __machine(self, n):
384:         return self.info['machine'] == 'ppc%s'%n
385:     def _is_ppc601(self): return self.__machine(601)
386:     def _is_ppc602(self): return self.__machine(602)
387:     def _is_ppc603(self): return self.__machine(603)
388:     def _is_ppc603e(self): return self.__machine('603e')
389:     def _is_ppc604(self): return self.__machine(604)
390:     def _is_ppc604e(self): return self.__machine('604e')
391:     def _is_ppc620(self): return self.__machine(620)
392:     def _is_ppc630(self): return self.__machine(630)
393:     def _is_ppc740(self): return self.__machine(740)
394:     def _is_ppc7400(self): return self.__machine(7400)
395:     def _is_ppc7450(self): return self.__machine(7450)
396:     def _is_ppc750(self): return self.__machine(750)
397:     def _is_ppc403(self): return self.__machine(403)
398:     def _is_ppc505(self): return self.__machine(505)
399:     def _is_ppc801(self): return self.__machine(801)
400:     def _is_ppc821(self): return self.__machine(821)
401:     def _is_ppc823(self): return self.__machine(823)
402:     def _is_ppc860(self): return self.__machine(860)
403: 
404: 
405: class SunOSCPUInfo(CPUInfoBase):
406: 
407:     info = None
408: 
409:     def __init__(self):
410:         if self.info is not None:
411:             return
412:         info = command_info(arch='arch',
413:                             mach='mach',
414:                             uname_i='uname_i',
415:                             isainfo_b='isainfo -b',
416:                             isainfo_n='isainfo -n',
417:                             )
418:         info['uname_X'] = key_value_from_command('uname -X', sep='=')
419:         for line in command_by_line('psrinfo -v 0'):
420:             m = re.match(r'\s*The (?P<p>[\w\d]+) processor operates at', line)
421:             if m:
422:                 info['processor'] = m.group('p')
423:                 break
424:         self.__class__.info = info
425: 
426:     def _not_impl(self): pass
427: 
428:     def _is_i386(self):
429:         return self.info['isainfo_n']=='i386'
430:     def _is_sparc(self):
431:         return self.info['isainfo_n']=='sparc'
432:     def _is_sparcv9(self):
433:         return self.info['isainfo_n']=='sparcv9'
434: 
435:     def _getNCPUs(self):
436:         return int(self.info['uname_X'].get('NumCPU', 1))
437: 
438:     def _is_sun4(self):
439:         return self.info['arch']=='sun4'
440: 
441:     def _is_SUNW(self):
442:         return re.match(r'SUNW', self.info['uname_i']) is not None
443:     def _is_sparcstation5(self):
444:         return re.match(r'.*SPARCstation-5', self.info['uname_i']) is not None
445:     def _is_ultra1(self):
446:         return re.match(r'.*Ultra-1', self.info['uname_i']) is not None
447:     def _is_ultra250(self):
448:         return re.match(r'.*Ultra-250', self.info['uname_i']) is not None
449:     def _is_ultra2(self):
450:         return re.match(r'.*Ultra-2', self.info['uname_i']) is not None
451:     def _is_ultra30(self):
452:         return re.match(r'.*Ultra-30', self.info['uname_i']) is not None
453:     def _is_ultra4(self):
454:         return re.match(r'.*Ultra-4', self.info['uname_i']) is not None
455:     def _is_ultra5_10(self):
456:         return re.match(r'.*Ultra-5_10', self.info['uname_i']) is not None
457:     def _is_ultra5(self):
458:         return re.match(r'.*Ultra-5', self.info['uname_i']) is not None
459:     def _is_ultra60(self):
460:         return re.match(r'.*Ultra-60', self.info['uname_i']) is not None
461:     def _is_ultra80(self):
462:         return re.match(r'.*Ultra-80', self.info['uname_i']) is not None
463:     def _is_ultraenterprice(self):
464:         return re.match(r'.*Ultra-Enterprise', self.info['uname_i']) is not None
465:     def _is_ultraenterprice10k(self):
466:         return re.match(r'.*Ultra-Enterprise-10000', self.info['uname_i']) is not None
467:     def _is_sunfire(self):
468:         return re.match(r'.*Sun-Fire', self.info['uname_i']) is not None
469:     def _is_ultra(self):
470:         return re.match(r'.*Ultra', self.info['uname_i']) is not None
471: 
472:     def _is_cpusparcv7(self):
473:         return self.info['processor']=='sparcv7'
474:     def _is_cpusparcv8(self):
475:         return self.info['processor']=='sparcv8'
476:     def _is_cpusparcv9(self):
477:         return self.info['processor']=='sparcv9'
478: 
479: class Win32CPUInfo(CPUInfoBase):
480: 
481:     info = None
482:     pkey = r"HARDWARE\DESCRIPTION\System\CentralProcessor"
483:     # XXX: what does the value of
484:     #   HKEY_LOCAL_MACHINE\HARDWARE\DESCRIPTION\System\CentralProcessor\0
485:     # mean?
486: 
487:     def __init__(self):
488:         if self.info is not None:
489:             return
490:         info = []
491:         try:
492:             #XXX: Bad style to use so long `try:...except:...`. Fix it!
493:             if sys.version_info[0] >= 3:
494:                 import winreg
495:             else:
496:                 import _winreg as winreg
497: 
498:             prgx = re.compile(r"family\s+(?P<FML>\d+)\s+model\s+(?P<MDL>\d+)"\
499:                               "\s+stepping\s+(?P<STP>\d+)", re.IGNORECASE)
500:             chnd=winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, self.pkey)
501:             pnum=0
502:             while True:
503:                 try:
504:                     proc=winreg.EnumKey(chnd, pnum)
505:                 except winreg.error:
506:                     break
507:                 else:
508:                     pnum+=1
509:                     info.append({"Processor":proc})
510:                     phnd=winreg.OpenKey(chnd, proc)
511:                     pidx=0
512:                     while True:
513:                         try:
514:                             name, value, vtpe=winreg.EnumValue(phnd, pidx)
515:                         except winreg.error:
516:                             break
517:                         else:
518:                             pidx=pidx+1
519:                             info[-1][name]=value
520:                             if name=="Identifier":
521:                                 srch=prgx.search(value)
522:                                 if srch:
523:                                     info[-1]["Family"]=int(srch.group("FML"))
524:                                     info[-1]["Model"]=int(srch.group("MDL"))
525:                                     info[-1]["Stepping"]=int(srch.group("STP"))
526:         except:
527:             print(sys.exc_info()[1], '(ignoring)')
528:         self.__class__.info = info
529: 
530:     def _not_impl(self): pass
531: 
532:     # Athlon
533: 
534:     def _is_AMD(self):
535:         return self.info[0]['VendorIdentifier']=='AuthenticAMD'
536: 
537:     def _is_Am486(self):
538:         return self.is_AMD() and self.info[0]['Family']==4
539: 
540:     def _is_Am5x86(self):
541:         return self.is_AMD() and self.info[0]['Family']==4
542: 
543:     def _is_AMDK5(self):
544:         return self.is_AMD() and self.info[0]['Family']==5 \
545:                and self.info[0]['Model'] in [0, 1, 2, 3]
546: 
547:     def _is_AMDK6(self):
548:         return self.is_AMD() and self.info[0]['Family']==5 \
549:                and self.info[0]['Model'] in [6, 7]
550: 
551:     def _is_AMDK6_2(self):
552:         return self.is_AMD() and self.info[0]['Family']==5 \
553:                and self.info[0]['Model']==8
554: 
555:     def _is_AMDK6_3(self):
556:         return self.is_AMD() and self.info[0]['Family']==5 \
557:                and self.info[0]['Model']==9
558: 
559:     def _is_AMDK7(self):
560:         return self.is_AMD() and self.info[0]['Family'] == 6
561: 
562:     # To reliably distinguish between the different types of AMD64 chips
563:     # (Athlon64, Operton, Athlon64 X2, Semperon, Turion 64, etc.) would
564:     # require looking at the 'brand' from cpuid
565: 
566:     def _is_AMD64(self):
567:         return self.is_AMD() and self.info[0]['Family'] == 15
568: 
569:     # Intel
570: 
571:     def _is_Intel(self):
572:         return self.info[0]['VendorIdentifier']=='GenuineIntel'
573: 
574:     def _is_i386(self):
575:         return self.info[0]['Family']==3
576: 
577:     def _is_i486(self):
578:         return self.info[0]['Family']==4
579: 
580:     def _is_i586(self):
581:         return self.is_Intel() and self.info[0]['Family']==5
582: 
583:     def _is_i686(self):
584:         return self.is_Intel() and self.info[0]['Family']==6
585: 
586:     def _is_Pentium(self):
587:         return self.is_Intel() and self.info[0]['Family']==5
588: 
589:     def _is_PentiumMMX(self):
590:         return self.is_Intel() and self.info[0]['Family']==5 \
591:                and self.info[0]['Model']==4
592: 
593:     def _is_PentiumPro(self):
594:         return self.is_Intel() and self.info[0]['Family']==6 \
595:                and self.info[0]['Model']==1
596: 
597:     def _is_PentiumII(self):
598:         return self.is_Intel() and self.info[0]['Family']==6 \
599:                and self.info[0]['Model'] in [3, 5, 6]
600: 
601:     def _is_PentiumIII(self):
602:         return self.is_Intel() and self.info[0]['Family']==6 \
603:                and self.info[0]['Model'] in [7, 8, 9, 10, 11]
604: 
605:     def _is_PentiumIV(self):
606:         return self.is_Intel() and self.info[0]['Family']==15
607: 
608:     def _is_PentiumM(self):
609:         return self.is_Intel() and self.info[0]['Family'] == 6 \
610:                and self.info[0]['Model'] in [9, 13, 14]
611: 
612:     def _is_Core2(self):
613:         return self.is_Intel() and self.info[0]['Family'] == 6 \
614:                and self.info[0]['Model'] in [15, 16, 17]
615: 
616:     # Varia
617: 
618:     def _is_singleCPU(self):
619:         return len(self.info) == 1
620: 
621:     def _getNCPUs(self):
622:         return len(self.info)
623: 
624:     def _has_mmx(self):
625:         if self.is_Intel():
626:             return (self.info[0]['Family']==5 and self.info[0]['Model']==4) \
627:                    or (self.info[0]['Family'] in [6, 15])
628:         elif self.is_AMD():
629:             return self.info[0]['Family'] in [5, 6, 15]
630:         else:
631:             return False
632: 
633:     def _has_sse(self):
634:         if self.is_Intel():
635:             return (self.info[0]['Family']==6 and \
636:                     self.info[0]['Model'] in [7, 8, 9, 10, 11]) \
637:                     or self.info[0]['Family']==15
638:         elif self.is_AMD():
639:             return (self.info[0]['Family']==6 and \
640:                     self.info[0]['Model'] in [6, 7, 8, 10]) \
641:                     or self.info[0]['Family']==15
642:         else:
643:             return False
644: 
645:     def _has_sse2(self):
646:         if self.is_Intel():
647:             return self.is_Pentium4() or self.is_PentiumM() \
648:                    or self.is_Core2()
649:         elif self.is_AMD():
650:             return self.is_AMD64()
651:         else:
652:             return False
653: 
654:     def _has_3dnow(self):
655:         return self.is_AMD() and self.info[0]['Family'] in [5, 6, 15]
656: 
657:     def _has_3dnowext(self):
658:         return self.is_AMD() and self.info[0]['Family'] in [6, 15]
659: 
660: if sys.platform.startswith('linux'): # variations: linux2,linux-i386 (any others?)
661:     cpuinfo = LinuxCPUInfo
662: elif sys.platform.startswith('irix'):
663:     cpuinfo = IRIXCPUInfo
664: elif sys.platform == 'darwin':
665:     cpuinfo = DarwinCPUInfo
666: elif sys.platform.startswith('sunos'):
667:     cpuinfo = SunOSCPUInfo
668: elif sys.platform.startswith('win32'):
669:     cpuinfo = Win32CPUInfo
670: elif sys.platform.startswith('cygwin'):
671:     cpuinfo = LinuxCPUInfo
672: #XXX: other OS's. Eg. use _winreg on Win32. Or os.uname on unices.
673: else:
674:     cpuinfo = CPUInfoBase
675: 
676: cpu = cpuinfo()
677: 
678: #if __name__ == "__main__":
679: #
680: #    cpu.is_blaa()
681: #    cpu.is_Intel()
682: #    cpu.is_Alpha()
683: #
684: #    print 'CPU information:',
685: #    for name in dir(cpuinfo):
686: #        if name[0]=='_' and name[1]!='_':
687: #            r = getattr(cpu,name[1:])()
688: #            if r:
689: #                if r!=1:
690: #                    print '%s=%s' %(name[1:],r),
691: #                else:
692: #                    print name[1:],
693: #    print
694: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

str_29455 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 14, (-1)), 'str', '\ncpuinfo\n\nCopyright 2002 Pearu Peterson all rights reserved,\nPearu Peterson <pearu@cens.ioc.ee>\nPermission to use, modify, and distribute this software is given under the\nterms of the NumPy (BSD style) license.  See LICENSE.txt that came with\nthis distribution for specifics.\n\nNO WARRANTY IS EXPRESSED OR IMPLIED.  USE AT YOUR OWN RISK.\nPearu Peterson\n\n')

# Assigning a List to a Name (line 17):

# Assigning a List to a Name (line 17):
__all__ = ['cpu']
module_type_store.set_exportable_members(['cpu'])

# Obtaining an instance of the builtin type 'list' (line 17)
list_29456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 17, 10), 'list')
# Adding type elements to the builtin type 'list' instance (line 17)
# Adding element type (line 17)
str_29457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 17, 11), 'str', 'cpu')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 17, 10), list_29456, str_29457)

# Assigning a type to the variable '__all__' (line 17)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 17, 0), '__all__', list_29456)
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 19, 0))

# Multiple import statement. import sys (1/3) (line 19)
import sys

import_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'sys', sys, module_type_store)
# Multiple import statement. import re (2/3) (line 19)
import re

import_module(stypy.reporting.localization.Localization(__file__, 19, 0), 're', re, module_type_store)
# Multiple import statement. import types (3/3) (line 19)
import types

import_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'types', types, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 20, 0))

# 'import os' statement (line 20)
import os

import_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'os', os, module_type_store)




# Obtaining the type of the subscript
int_29458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 22, 20), 'int')
# Getting the type of 'sys' (line 22)
sys_29459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 22, 3), 'sys')
# Obtaining the member 'version_info' of a type (line 22)
version_info_29460 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 22, 3), sys_29459, 'version_info')
# Obtaining the member '__getitem__' of a type (line 22)
getitem___29461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 22, 3), version_info_29460, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 22)
subscript_call_result_29462 = invoke(stypy.reporting.localization.Localization(__file__, 22, 3), getitem___29461, int_29458)

int_29463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 22, 26), 'int')
# Applying the binary operator '>=' (line 22)
result_ge_29464 = python_operator(stypy.reporting.localization.Localization(__file__, 22, 3), '>=', subscript_call_result_29462, int_29463)

# Testing the type of an if condition (line 22)
if_condition_29465 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 22, 0), result_ge_29464)
# Assigning a type to the variable 'if_condition_29465' (line 22)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 22, 0), 'if_condition_29465', if_condition_29465)
# SSA begins for if statement (line 22)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 23, 4))

# 'from subprocess import getstatusoutput' statement (line 23)
from subprocess import getstatusoutput

import_from_module(stypy.reporting.localization.Localization(__file__, 23, 4), 'subprocess', None, module_type_store, ['getstatusoutput'], [getstatusoutput])

# SSA branch for the else part of an if statement (line 22)
module_type_store.open_ssa_branch('else')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 25, 4))

# 'from commands import getstatusoutput' statement (line 25)
from commands import getstatusoutput

import_from_module(stypy.reporting.localization.Localization(__file__, 25, 4), 'commands', None, module_type_store, ['getstatusoutput'], [getstatusoutput])

# SSA join for if statement (line 22)
module_type_store = module_type_store.join_ssa_context()

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 27, 0))

# 'import warnings' statement (line 27)
import warnings

import_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'warnings', warnings, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 28, 0))

# 'import platform' statement (line 28)
import platform

import_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'platform', platform, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 30, 0))

# 'from numpy.distutils.compat import get_exception' statement (line 30)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/distutils/')
import_29466 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'numpy.distutils.compat')

if (type(import_29466) is not StypyTypeError):

    if (import_29466 != 'pyd_module'):
        __import__(import_29466)
        sys_modules_29467 = sys.modules[import_29466]
        import_from_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'numpy.distutils.compat', sys_modules_29467.module_type_store, module_type_store, ['get_exception'])
        nest_module(stypy.reporting.localization.Localization(__file__, 30, 0), __file__, sys_modules_29467, sys_modules_29467.module_type_store, module_type_store)
    else:
        from numpy.distutils.compat import get_exception

        import_from_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'numpy.distutils.compat', None, module_type_store, ['get_exception'], [get_exception])

else:
    # Assigning a type to the variable 'numpy.distutils.compat' (line 30)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 30, 0), 'numpy.distutils.compat', import_29466)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/distutils/')


@norecursion
def getoutput(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    
    # Obtaining an instance of the builtin type 'tuple' (line 32)
    tuple_29468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 32, 38), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 32)
    # Adding element type (line 32)
    int_29469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 32, 38), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 32, 38), tuple_29468, int_29469)
    
    int_29470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 32, 54), 'int')
    defaults = [tuple_29468, int_29470]
    # Create a new context for function 'getoutput'
    module_type_store = module_type_store.open_function_context('getoutput', 32, 0, False)
    
    # Passed parameters checking function
    getoutput.stypy_localization = localization
    getoutput.stypy_type_of_self = None
    getoutput.stypy_type_store = module_type_store
    getoutput.stypy_function_name = 'getoutput'
    getoutput.stypy_param_names_list = ['cmd', 'successful_status', 'stacklevel']
    getoutput.stypy_varargs_param_name = None
    getoutput.stypy_kwargs_param_name = None
    getoutput.stypy_call_defaults = defaults
    getoutput.stypy_call_varargs = varargs
    getoutput.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'getoutput', ['cmd', 'successful_status', 'stacklevel'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'getoutput', localization, ['cmd', 'successful_status', 'stacklevel'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'getoutput(...)' code ##################

    
    
    # SSA begins for try-except statement (line 33)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Tuple (line 34):
    
    # Assigning a Call to a Name:
    
    # Call to getstatusoutput(...): (line 34)
    # Processing the call arguments (line 34)
    # Getting the type of 'cmd' (line 34)
    cmd_29472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 34, 41), 'cmd', False)
    # Processing the call keyword arguments (line 34)
    kwargs_29473 = {}
    # Getting the type of 'getstatusoutput' (line 34)
    getstatusoutput_29471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 34, 25), 'getstatusoutput', False)
    # Calling getstatusoutput(args, kwargs) (line 34)
    getstatusoutput_call_result_29474 = invoke(stypy.reporting.localization.Localization(__file__, 34, 25), getstatusoutput_29471, *[cmd_29472], **kwargs_29473)
    
    # Assigning a type to the variable 'call_assignment_29437' (line 34)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 34, 8), 'call_assignment_29437', getstatusoutput_call_result_29474)
    
    # Assigning a Call to a Name (line 34):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_29477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 8), 'int')
    # Processing the call keyword arguments
    kwargs_29478 = {}
    # Getting the type of 'call_assignment_29437' (line 34)
    call_assignment_29437_29475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 34, 8), 'call_assignment_29437', False)
    # Obtaining the member '__getitem__' of a type (line 34)
    getitem___29476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 34, 8), call_assignment_29437_29475, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_29479 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___29476, *[int_29477], **kwargs_29478)
    
    # Assigning a type to the variable 'call_assignment_29438' (line 34)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 34, 8), 'call_assignment_29438', getitem___call_result_29479)
    
    # Assigning a Name to a Name (line 34):
    # Getting the type of 'call_assignment_29438' (line 34)
    call_assignment_29438_29480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 34, 8), 'call_assignment_29438')
    # Assigning a type to the variable 'status' (line 34)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 34, 8), 'status', call_assignment_29438_29480)
    
    # Assigning a Call to a Name (line 34):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_29483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 8), 'int')
    # Processing the call keyword arguments
    kwargs_29484 = {}
    # Getting the type of 'call_assignment_29437' (line 34)
    call_assignment_29437_29481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 34, 8), 'call_assignment_29437', False)
    # Obtaining the member '__getitem__' of a type (line 34)
    getitem___29482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 34, 8), call_assignment_29437_29481, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_29485 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___29482, *[int_29483], **kwargs_29484)
    
    # Assigning a type to the variable 'call_assignment_29439' (line 34)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 34, 8), 'call_assignment_29439', getitem___call_result_29485)
    
    # Assigning a Name to a Name (line 34):
    # Getting the type of 'call_assignment_29439' (line 34)
    call_assignment_29439_29486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 34, 8), 'call_assignment_29439')
    # Assigning a type to the variable 'output' (line 34)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 34, 16), 'output', call_assignment_29439_29486)
    # SSA branch for the except part of a try statement (line 33)
    # SSA branch for the except 'EnvironmentError' branch of a try statement (line 33)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Call to a Name (line 36):
    
    # Assigning a Call to a Name (line 36):
    
    # Call to get_exception(...): (line 36)
    # Processing the call keyword arguments (line 36)
    kwargs_29488 = {}
    # Getting the type of 'get_exception' (line 36)
    get_exception_29487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 36, 12), 'get_exception', False)
    # Calling get_exception(args, kwargs) (line 36)
    get_exception_call_result_29489 = invoke(stypy.reporting.localization.Localization(__file__, 36, 12), get_exception_29487, *[], **kwargs_29488)
    
    # Assigning a type to the variable 'e' (line 36)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 36, 8), 'e', get_exception_call_result_29489)
    
    # Call to warn(...): (line 37)
    # Processing the call arguments (line 37)
    
    # Call to str(...): (line 37)
    # Processing the call arguments (line 37)
    # Getting the type of 'e' (line 37)
    e_29493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 37, 26), 'e', False)
    # Processing the call keyword arguments (line 37)
    kwargs_29494 = {}
    # Getting the type of 'str' (line 37)
    str_29492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 37, 22), 'str', False)
    # Calling str(args, kwargs) (line 37)
    str_call_result_29495 = invoke(stypy.reporting.localization.Localization(__file__, 37, 22), str_29492, *[e_29493], **kwargs_29494)
    
    # Getting the type of 'UserWarning' (line 37)
    UserWarning_29496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 37, 30), 'UserWarning', False)
    # Processing the call keyword arguments (line 37)
    # Getting the type of 'stacklevel' (line 37)
    stacklevel_29497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 37, 54), 'stacklevel', False)
    keyword_29498 = stacklevel_29497
    kwargs_29499 = {'stacklevel': keyword_29498}
    # Getting the type of 'warnings' (line 37)
    warnings_29490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 37, 8), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 37)
    warn_29491 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 37, 8), warnings_29490, 'warn')
    # Calling warn(args, kwargs) (line 37)
    warn_call_result_29500 = invoke(stypy.reporting.localization.Localization(__file__, 37, 8), warn_29491, *[str_call_result_29495, UserWarning_29496], **kwargs_29499)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 38)
    tuple_29501 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 38, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 38)
    # Adding element type (line 38)
    # Getting the type of 'False' (line 38)
    False_29502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 38, 15), 'False')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 38, 15), tuple_29501, False_29502)
    # Adding element type (line 38)
    # Getting the type of 'output' (line 38)
    output_29503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 38, 22), 'output')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 38, 15), tuple_29501, output_29503)
    
    # Assigning a type to the variable 'stypy_return_type' (line 38)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 38, 8), 'stypy_return_type', tuple_29501)
    # SSA join for try-except statement (line 33)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Call to WIFEXITED(...): (line 39)
    # Processing the call arguments (line 39)
    # Getting the type of 'status' (line 39)
    status_29506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 39, 20), 'status', False)
    # Processing the call keyword arguments (line 39)
    kwargs_29507 = {}
    # Getting the type of 'os' (line 39)
    os_29504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 39, 7), 'os', False)
    # Obtaining the member 'WIFEXITED' of a type (line 39)
    WIFEXITED_29505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 39, 7), os_29504, 'WIFEXITED')
    # Calling WIFEXITED(args, kwargs) (line 39)
    WIFEXITED_call_result_29508 = invoke(stypy.reporting.localization.Localization(__file__, 39, 7), WIFEXITED_29505, *[status_29506], **kwargs_29507)
    
    
    
    # Call to WEXITSTATUS(...): (line 39)
    # Processing the call arguments (line 39)
    # Getting the type of 'status' (line 39)
    status_29511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 39, 47), 'status', False)
    # Processing the call keyword arguments (line 39)
    kwargs_29512 = {}
    # Getting the type of 'os' (line 39)
    os_29509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 39, 32), 'os', False)
    # Obtaining the member 'WEXITSTATUS' of a type (line 39)
    WEXITSTATUS_29510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 39, 32), os_29509, 'WEXITSTATUS')
    # Calling WEXITSTATUS(args, kwargs) (line 39)
    WEXITSTATUS_call_result_29513 = invoke(stypy.reporting.localization.Localization(__file__, 39, 32), WEXITSTATUS_29510, *[status_29511], **kwargs_29512)
    
    # Getting the type of 'successful_status' (line 39)
    successful_status_29514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 39, 58), 'successful_status')
    # Applying the binary operator 'in' (line 39)
    result_contains_29515 = python_operator(stypy.reporting.localization.Localization(__file__, 39, 32), 'in', WEXITSTATUS_call_result_29513, successful_status_29514)
    
    # Applying the binary operator 'and' (line 39)
    result_and_keyword_29516 = python_operator(stypy.reporting.localization.Localization(__file__, 39, 7), 'and', WIFEXITED_call_result_29508, result_contains_29515)
    
    # Testing the type of an if condition (line 39)
    if_condition_29517 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 39, 4), result_and_keyword_29516)
    # Assigning a type to the variable 'if_condition_29517' (line 39)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 39, 4), 'if_condition_29517', if_condition_29517)
    # SSA begins for if statement (line 39)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 40)
    tuple_29518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 40, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 40)
    # Adding element type (line 40)
    # Getting the type of 'True' (line 40)
    True_29519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 40, 15), 'True')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 40, 15), tuple_29518, True_29519)
    # Adding element type (line 40)
    # Getting the type of 'output' (line 40)
    output_29520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 40, 21), 'output')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 40, 15), tuple_29518, output_29520)
    
    # Assigning a type to the variable 'stypy_return_type' (line 40)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 40, 8), 'stypy_return_type', tuple_29518)
    # SSA join for if statement (line 39)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 41)
    tuple_29521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 41, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 41)
    # Adding element type (line 41)
    # Getting the type of 'False' (line 41)
    False_29522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 41, 11), 'False')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 41, 11), tuple_29521, False_29522)
    # Adding element type (line 41)
    # Getting the type of 'output' (line 41)
    output_29523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 41, 18), 'output')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 41, 11), tuple_29521, output_29523)
    
    # Assigning a type to the variable 'stypy_return_type' (line 41)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 41, 4), 'stypy_return_type', tuple_29521)
    
    # ################# End of 'getoutput(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'getoutput' in the type store
    # Getting the type of 'stypy_return_type' (line 32)
    stypy_return_type_29524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 32, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_29524)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'getoutput'
    return stypy_return_type_29524

# Assigning a type to the variable 'getoutput' (line 32)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 32, 0), 'getoutput', getoutput)

@norecursion
def command_info(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    
    # Obtaining an instance of the builtin type 'tuple' (line 43)
    tuple_29525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, 36), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 43)
    # Adding element type (line 43)
    int_29526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, 36), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 43, 36), tuple_29525, int_29526)
    
    int_29527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, 52), 'int')
    defaults = [tuple_29525, int_29527]
    # Create a new context for function 'command_info'
    module_type_store = module_type_store.open_function_context('command_info', 43, 0, False)
    
    # Passed parameters checking function
    command_info.stypy_localization = localization
    command_info.stypy_type_of_self = None
    command_info.stypy_type_store = module_type_store
    command_info.stypy_function_name = 'command_info'
    command_info.stypy_param_names_list = ['successful_status', 'stacklevel']
    command_info.stypy_varargs_param_name = None
    command_info.stypy_kwargs_param_name = 'kw'
    command_info.stypy_call_defaults = defaults
    command_info.stypy_call_varargs = varargs
    command_info.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'command_info', ['successful_status', 'stacklevel'], None, 'kw', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'command_info', localization, ['successful_status', 'stacklevel'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'command_info(...)' code ##################

    
    # Assigning a Dict to a Name (line 44):
    
    # Assigning a Dict to a Name (line 44):
    
    # Obtaining an instance of the builtin type 'dict' (line 44)
    dict_29528 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 11), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 44)
    
    # Assigning a type to the variable 'info' (line 44)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 44, 4), 'info', dict_29528)
    
    # Getting the type of 'kw' (line 45)
    kw_29529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 45, 15), 'kw')
    # Testing the type of a for loop iterable (line 45)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 45, 4), kw_29529)
    # Getting the type of the for loop variable (line 45)
    for_loop_var_29530 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 45, 4), kw_29529)
    # Assigning a type to the variable 'key' (line 45)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 45, 4), 'key', for_loop_var_29530)
    # SSA begins for a for statement (line 45)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Tuple (line 46):
    
    # Assigning a Call to a Name:
    
    # Call to getoutput(...): (line 46)
    # Processing the call arguments (line 46)
    
    # Obtaining the type of the subscript
    # Getting the type of 'key' (line 46)
    key_29532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 46, 34), 'key', False)
    # Getting the type of 'kw' (line 46)
    kw_29533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 46, 31), 'kw', False)
    # Obtaining the member '__getitem__' of a type (line 46)
    getitem___29534 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 46, 31), kw_29533, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 46)
    subscript_call_result_29535 = invoke(stypy.reporting.localization.Localization(__file__, 46, 31), getitem___29534, key_29532)
    
    # Processing the call keyword arguments (line 46)
    # Getting the type of 'successful_status' (line 46)
    successful_status_29536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 46, 58), 'successful_status', False)
    keyword_29537 = successful_status_29536
    # Getting the type of 'stacklevel' (line 47)
    stacklevel_29538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 47, 42), 'stacklevel', False)
    int_29539 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 47, 53), 'int')
    # Applying the binary operator '+' (line 47)
    result_add_29540 = python_operator(stypy.reporting.localization.Localization(__file__, 47, 42), '+', stacklevel_29538, int_29539)
    
    keyword_29541 = result_add_29540
    kwargs_29542 = {'stacklevel': keyword_29541, 'successful_status': keyword_29537}
    # Getting the type of 'getoutput' (line 46)
    getoutput_29531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 46, 21), 'getoutput', False)
    # Calling getoutput(args, kwargs) (line 46)
    getoutput_call_result_29543 = invoke(stypy.reporting.localization.Localization(__file__, 46, 21), getoutput_29531, *[subscript_call_result_29535], **kwargs_29542)
    
    # Assigning a type to the variable 'call_assignment_29440' (line 46)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 46, 8), 'call_assignment_29440', getoutput_call_result_29543)
    
    # Assigning a Call to a Name (line 46):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_29546 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 8), 'int')
    # Processing the call keyword arguments
    kwargs_29547 = {}
    # Getting the type of 'call_assignment_29440' (line 46)
    call_assignment_29440_29544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 46, 8), 'call_assignment_29440', False)
    # Obtaining the member '__getitem__' of a type (line 46)
    getitem___29545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 46, 8), call_assignment_29440_29544, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_29548 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___29545, *[int_29546], **kwargs_29547)
    
    # Assigning a type to the variable 'call_assignment_29441' (line 46)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 46, 8), 'call_assignment_29441', getitem___call_result_29548)
    
    # Assigning a Name to a Name (line 46):
    # Getting the type of 'call_assignment_29441' (line 46)
    call_assignment_29441_29549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 46, 8), 'call_assignment_29441')
    # Assigning a type to the variable 'ok' (line 46)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 46, 8), 'ok', call_assignment_29441_29549)
    
    # Assigning a Call to a Name (line 46):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_29552 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 8), 'int')
    # Processing the call keyword arguments
    kwargs_29553 = {}
    # Getting the type of 'call_assignment_29440' (line 46)
    call_assignment_29440_29550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 46, 8), 'call_assignment_29440', False)
    # Obtaining the member '__getitem__' of a type (line 46)
    getitem___29551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 46, 8), call_assignment_29440_29550, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_29554 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___29551, *[int_29552], **kwargs_29553)
    
    # Assigning a type to the variable 'call_assignment_29442' (line 46)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 46, 8), 'call_assignment_29442', getitem___call_result_29554)
    
    # Assigning a Name to a Name (line 46):
    # Getting the type of 'call_assignment_29442' (line 46)
    call_assignment_29442_29555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 46, 8), 'call_assignment_29442')
    # Assigning a type to the variable 'output' (line 46)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 46, 12), 'output', call_assignment_29442_29555)
    
    # Getting the type of 'ok' (line 48)
    ok_29556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 48, 11), 'ok')
    # Testing the type of an if condition (line 48)
    if_condition_29557 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 48, 8), ok_29556)
    # Assigning a type to the variable 'if_condition_29557' (line 48)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 48, 8), 'if_condition_29557', if_condition_29557)
    # SSA begins for if statement (line 48)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Subscript (line 49):
    
    # Assigning a Call to a Subscript (line 49):
    
    # Call to strip(...): (line 49)
    # Processing the call keyword arguments (line 49)
    kwargs_29560 = {}
    # Getting the type of 'output' (line 49)
    output_29558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 49, 24), 'output', False)
    # Obtaining the member 'strip' of a type (line 49)
    strip_29559 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 49, 24), output_29558, 'strip')
    # Calling strip(args, kwargs) (line 49)
    strip_call_result_29561 = invoke(stypy.reporting.localization.Localization(__file__, 49, 24), strip_29559, *[], **kwargs_29560)
    
    # Getting the type of 'info' (line 49)
    info_29562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 49, 12), 'info')
    # Getting the type of 'key' (line 49)
    key_29563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 49, 17), 'key')
    # Storing an element on a container (line 49)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 49, 12), info_29562, (key_29563, strip_call_result_29561))
    # SSA join for if statement (line 48)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'info' (line 50)
    info_29564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 50, 11), 'info')
    # Assigning a type to the variable 'stypy_return_type' (line 50)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 50, 4), 'stypy_return_type', info_29564)
    
    # ################# End of 'command_info(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'command_info' in the type store
    # Getting the type of 'stypy_return_type' (line 43)
    stypy_return_type_29565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 43, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_29565)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'command_info'
    return stypy_return_type_29565

# Assigning a type to the variable 'command_info' (line 43)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 43, 0), 'command_info', command_info)

@norecursion
def command_by_line(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    
    # Obtaining an instance of the builtin type 'tuple' (line 52)
    tuple_29566 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 52, 44), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 52)
    # Adding element type (line 52)
    int_29567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 52, 44), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 52, 44), tuple_29566, int_29567)
    
    int_29568 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 52, 60), 'int')
    defaults = [tuple_29566, int_29568]
    # Create a new context for function 'command_by_line'
    module_type_store = module_type_store.open_function_context('command_by_line', 52, 0, False)
    
    # Passed parameters checking function
    command_by_line.stypy_localization = localization
    command_by_line.stypy_type_of_self = None
    command_by_line.stypy_type_store = module_type_store
    command_by_line.stypy_function_name = 'command_by_line'
    command_by_line.stypy_param_names_list = ['cmd', 'successful_status', 'stacklevel']
    command_by_line.stypy_varargs_param_name = None
    command_by_line.stypy_kwargs_param_name = None
    command_by_line.stypy_call_defaults = defaults
    command_by_line.stypy_call_varargs = varargs
    command_by_line.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'command_by_line', ['cmd', 'successful_status', 'stacklevel'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'command_by_line', localization, ['cmd', 'successful_status', 'stacklevel'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'command_by_line(...)' code ##################

    
    # Assigning a Call to a Tuple (line 53):
    
    # Assigning a Call to a Name:
    
    # Call to getoutput(...): (line 53)
    # Processing the call arguments (line 53)
    # Getting the type of 'cmd' (line 53)
    cmd_29570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 53, 27), 'cmd', False)
    # Processing the call keyword arguments (line 53)
    # Getting the type of 'successful_status' (line 53)
    successful_status_29571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 53, 50), 'successful_status', False)
    keyword_29572 = successful_status_29571
    # Getting the type of 'stacklevel' (line 54)
    stacklevel_29573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 54, 38), 'stacklevel', False)
    int_29574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 54, 49), 'int')
    # Applying the binary operator '+' (line 54)
    result_add_29575 = python_operator(stypy.reporting.localization.Localization(__file__, 54, 38), '+', stacklevel_29573, int_29574)
    
    keyword_29576 = result_add_29575
    kwargs_29577 = {'stacklevel': keyword_29576, 'successful_status': keyword_29572}
    # Getting the type of 'getoutput' (line 53)
    getoutput_29569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 53, 17), 'getoutput', False)
    # Calling getoutput(args, kwargs) (line 53)
    getoutput_call_result_29578 = invoke(stypy.reporting.localization.Localization(__file__, 53, 17), getoutput_29569, *[cmd_29570], **kwargs_29577)
    
    # Assigning a type to the variable 'call_assignment_29443' (line 53)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 53, 4), 'call_assignment_29443', getoutput_call_result_29578)
    
    # Assigning a Call to a Name (line 53):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_29581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 53, 4), 'int')
    # Processing the call keyword arguments
    kwargs_29582 = {}
    # Getting the type of 'call_assignment_29443' (line 53)
    call_assignment_29443_29579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 53, 4), 'call_assignment_29443', False)
    # Obtaining the member '__getitem__' of a type (line 53)
    getitem___29580 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 53, 4), call_assignment_29443_29579, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_29583 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___29580, *[int_29581], **kwargs_29582)
    
    # Assigning a type to the variable 'call_assignment_29444' (line 53)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 53, 4), 'call_assignment_29444', getitem___call_result_29583)
    
    # Assigning a Name to a Name (line 53):
    # Getting the type of 'call_assignment_29444' (line 53)
    call_assignment_29444_29584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 53, 4), 'call_assignment_29444')
    # Assigning a type to the variable 'ok' (line 53)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 53, 4), 'ok', call_assignment_29444_29584)
    
    # Assigning a Call to a Name (line 53):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_29587 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 53, 4), 'int')
    # Processing the call keyword arguments
    kwargs_29588 = {}
    # Getting the type of 'call_assignment_29443' (line 53)
    call_assignment_29443_29585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 53, 4), 'call_assignment_29443', False)
    # Obtaining the member '__getitem__' of a type (line 53)
    getitem___29586 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 53, 4), call_assignment_29443_29585, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_29589 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___29586, *[int_29587], **kwargs_29588)
    
    # Assigning a type to the variable 'call_assignment_29445' (line 53)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 53, 4), 'call_assignment_29445', getitem___call_result_29589)
    
    # Assigning a Name to a Name (line 53):
    # Getting the type of 'call_assignment_29445' (line 53)
    call_assignment_29445_29590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 53, 4), 'call_assignment_29445')
    # Assigning a type to the variable 'output' (line 53)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 53, 8), 'output', call_assignment_29445_29590)
    
    
    # Getting the type of 'ok' (line 55)
    ok_29591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 55, 11), 'ok')
    # Applying the 'not' unary operator (line 55)
    result_not__29592 = python_operator(stypy.reporting.localization.Localization(__file__, 55, 7), 'not', ok_29591)
    
    # Testing the type of an if condition (line 55)
    if_condition_29593 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 55, 4), result_not__29592)
    # Assigning a type to the variable 'if_condition_29593' (line 55)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 55, 4), 'if_condition_29593', if_condition_29593)
    # SSA begins for if statement (line 55)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Assigning a type to the variable 'stypy_return_type' (line 56)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 56, 8), 'stypy_return_type', types.NoneType)
    # SSA join for if statement (line 55)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to splitlines(...): (line 57)
    # Processing the call keyword arguments (line 57)
    kwargs_29596 = {}
    # Getting the type of 'output' (line 57)
    output_29594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 57, 16), 'output', False)
    # Obtaining the member 'splitlines' of a type (line 57)
    splitlines_29595 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 57, 16), output_29594, 'splitlines')
    # Calling splitlines(args, kwargs) (line 57)
    splitlines_call_result_29597 = invoke(stypy.reporting.localization.Localization(__file__, 57, 16), splitlines_29595, *[], **kwargs_29596)
    
    # Testing the type of a for loop iterable (line 57)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 57, 4), splitlines_call_result_29597)
    # Getting the type of the for loop variable (line 57)
    for_loop_var_29598 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 57, 4), splitlines_call_result_29597)
    # Assigning a type to the variable 'line' (line 57)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 57, 4), 'line', for_loop_var_29598)
    # SSA begins for a for statement (line 57)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    # Creating a generator
    
    # Call to strip(...): (line 58)
    # Processing the call keyword arguments (line 58)
    kwargs_29601 = {}
    # Getting the type of 'line' (line 58)
    line_29599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 58, 14), 'line', False)
    # Obtaining the member 'strip' of a type (line 58)
    strip_29600 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 58, 14), line_29599, 'strip')
    # Calling strip(args, kwargs) (line 58)
    strip_call_result_29602 = invoke(stypy.reporting.localization.Localization(__file__, 58, 14), strip_29600, *[], **kwargs_29601)
    
    GeneratorType_29603 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 58, 8), 'GeneratorType')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 58, 8), GeneratorType_29603, strip_call_result_29602)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 58, 8), 'stypy_return_type', GeneratorType_29603)
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'command_by_line(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'command_by_line' in the type store
    # Getting the type of 'stypy_return_type' (line 52)
    stypy_return_type_29604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 52, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_29604)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'command_by_line'
    return stypy_return_type_29604

# Assigning a type to the variable 'command_by_line' (line 52)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 52, 0), 'command_by_line', command_by_line)

@norecursion
def key_value_from_command(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    
    # Obtaining an instance of the builtin type 'tuple' (line 60)
    tuple_29605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 60, 56), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 60)
    # Adding element type (line 60)
    int_29606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 60, 56), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 60, 56), tuple_29605, int_29606)
    
    int_29607 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 61, 38), 'int')
    defaults = [tuple_29605, int_29607]
    # Create a new context for function 'key_value_from_command'
    module_type_store = module_type_store.open_function_context('key_value_from_command', 60, 0, False)
    
    # Passed parameters checking function
    key_value_from_command.stypy_localization = localization
    key_value_from_command.stypy_type_of_self = None
    key_value_from_command.stypy_type_store = module_type_store
    key_value_from_command.stypy_function_name = 'key_value_from_command'
    key_value_from_command.stypy_param_names_list = ['cmd', 'sep', 'successful_status', 'stacklevel']
    key_value_from_command.stypy_varargs_param_name = None
    key_value_from_command.stypy_kwargs_param_name = None
    key_value_from_command.stypy_call_defaults = defaults
    key_value_from_command.stypy_call_varargs = varargs
    key_value_from_command.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'key_value_from_command', ['cmd', 'sep', 'successful_status', 'stacklevel'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'key_value_from_command', localization, ['cmd', 'sep', 'successful_status', 'stacklevel'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'key_value_from_command(...)' code ##################

    
    # Assigning a Dict to a Name (line 62):
    
    # Assigning a Dict to a Name (line 62):
    
    # Obtaining an instance of the builtin type 'dict' (line 62)
    dict_29608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 62, 8), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 62)
    
    # Assigning a type to the variable 'd' (line 62)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 62, 4), 'd', dict_29608)
    
    
    # Call to command_by_line(...): (line 63)
    # Processing the call arguments (line 63)
    # Getting the type of 'cmd' (line 63)
    cmd_29610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 63, 32), 'cmd', False)
    # Processing the call keyword arguments (line 63)
    # Getting the type of 'successful_status' (line 63)
    successful_status_29611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 63, 55), 'successful_status', False)
    keyword_29612 = successful_status_29611
    # Getting the type of 'stacklevel' (line 64)
    stacklevel_29613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 64, 43), 'stacklevel', False)
    int_29614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 64, 54), 'int')
    # Applying the binary operator '+' (line 64)
    result_add_29615 = python_operator(stypy.reporting.localization.Localization(__file__, 64, 43), '+', stacklevel_29613, int_29614)
    
    keyword_29616 = result_add_29615
    kwargs_29617 = {'stacklevel': keyword_29616, 'successful_status': keyword_29612}
    # Getting the type of 'command_by_line' (line 63)
    command_by_line_29609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 63, 16), 'command_by_line', False)
    # Calling command_by_line(args, kwargs) (line 63)
    command_by_line_call_result_29618 = invoke(stypy.reporting.localization.Localization(__file__, 63, 16), command_by_line_29609, *[cmd_29610], **kwargs_29617)
    
    # Testing the type of a for loop iterable (line 63)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 63, 4), command_by_line_call_result_29618)
    # Getting the type of the for loop variable (line 63)
    for_loop_var_29619 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 63, 4), command_by_line_call_result_29618)
    # Assigning a type to the variable 'line' (line 63)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 63, 4), 'line', for_loop_var_29619)
    # SSA begins for a for statement (line 63)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a ListComp to a Name (line 65):
    
    # Assigning a ListComp to a Name (line 65):
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to split(...): (line 65)
    # Processing the call arguments (line 65)
    # Getting the type of 'sep' (line 65)
    sep_29626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 65, 43), 'sep', False)
    int_29627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 65, 48), 'int')
    # Processing the call keyword arguments (line 65)
    kwargs_29628 = {}
    # Getting the type of 'line' (line 65)
    line_29624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 65, 32), 'line', False)
    # Obtaining the member 'split' of a type (line 65)
    split_29625 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 65, 32), line_29624, 'split')
    # Calling split(args, kwargs) (line 65)
    split_call_result_29629 = invoke(stypy.reporting.localization.Localization(__file__, 65, 32), split_29625, *[sep_29626, int_29627], **kwargs_29628)
    
    comprehension_29630 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 65, 13), split_call_result_29629)
    # Assigning a type to the variable 's' (line 65)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 65, 13), 's', comprehension_29630)
    
    # Call to strip(...): (line 65)
    # Processing the call keyword arguments (line 65)
    kwargs_29622 = {}
    # Getting the type of 's' (line 65)
    s_29620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 65, 13), 's', False)
    # Obtaining the member 'strip' of a type (line 65)
    strip_29621 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 65, 13), s_29620, 'strip')
    # Calling strip(args, kwargs) (line 65)
    strip_call_result_29623 = invoke(stypy.reporting.localization.Localization(__file__, 65, 13), strip_29621, *[], **kwargs_29622)
    
    list_29631 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 65, 13), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 65, 13), list_29631, strip_call_result_29623)
    # Assigning a type to the variable 'l' (line 65)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 65, 8), 'l', list_29631)
    
    
    
    # Call to len(...): (line 66)
    # Processing the call arguments (line 66)
    # Getting the type of 'l' (line 66)
    l_29633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 66, 15), 'l', False)
    # Processing the call keyword arguments (line 66)
    kwargs_29634 = {}
    # Getting the type of 'len' (line 66)
    len_29632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 66, 11), 'len', False)
    # Calling len(args, kwargs) (line 66)
    len_call_result_29635 = invoke(stypy.reporting.localization.Localization(__file__, 66, 11), len_29632, *[l_29633], **kwargs_29634)
    
    int_29636 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 66, 21), 'int')
    # Applying the binary operator '==' (line 66)
    result_eq_29637 = python_operator(stypy.reporting.localization.Localization(__file__, 66, 11), '==', len_call_result_29635, int_29636)
    
    # Testing the type of an if condition (line 66)
    if_condition_29638 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 66, 8), result_eq_29637)
    # Assigning a type to the variable 'if_condition_29638' (line 66)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 66, 8), 'if_condition_29638', if_condition_29638)
    # SSA begins for if statement (line 66)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Subscript (line 67):
    
    # Assigning a Subscript to a Subscript (line 67):
    
    # Obtaining the type of the subscript
    int_29639 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 67, 24), 'int')
    # Getting the type of 'l' (line 67)
    l_29640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 67, 22), 'l')
    # Obtaining the member '__getitem__' of a type (line 67)
    getitem___29641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 67, 22), l_29640, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 67)
    subscript_call_result_29642 = invoke(stypy.reporting.localization.Localization(__file__, 67, 22), getitem___29641, int_29639)
    
    # Getting the type of 'd' (line 67)
    d_29643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 67, 12), 'd')
    
    # Obtaining the type of the subscript
    int_29644 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 67, 16), 'int')
    # Getting the type of 'l' (line 67)
    l_29645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 67, 14), 'l')
    # Obtaining the member '__getitem__' of a type (line 67)
    getitem___29646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 67, 14), l_29645, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 67)
    subscript_call_result_29647 = invoke(stypy.reporting.localization.Localization(__file__, 67, 14), getitem___29646, int_29644)
    
    # Storing an element on a container (line 67)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 67, 12), d_29643, (subscript_call_result_29647, subscript_call_result_29642))
    # SSA join for if statement (line 66)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'd' (line 68)
    d_29648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 68, 11), 'd')
    # Assigning a type to the variable 'stypy_return_type' (line 68)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 68, 4), 'stypy_return_type', d_29648)
    
    # ################# End of 'key_value_from_command(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'key_value_from_command' in the type store
    # Getting the type of 'stypy_return_type' (line 60)
    stypy_return_type_29649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 60, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_29649)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'key_value_from_command'
    return stypy_return_type_29649

# Assigning a type to the variable 'key_value_from_command' (line 60)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 60, 0), 'key_value_from_command', key_value_from_command)
# Declaration of the 'CPUInfoBase' class

class CPUInfoBase(object, ):
    str_29650 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 73, (-1)), 'str', 'Holds CPU information and provides methods for requiring\n    the availability of various CPU features.\n    ')

    @norecursion
    def _try_call(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_try_call'
        module_type_store = module_type_store.open_function_context('_try_call', 75, 4, False)
        # Assigning a type to the variable 'self' (line 76)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 76, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        CPUInfoBase._try_call.__dict__.__setitem__('stypy_localization', localization)
        CPUInfoBase._try_call.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        CPUInfoBase._try_call.__dict__.__setitem__('stypy_type_store', module_type_store)
        CPUInfoBase._try_call.__dict__.__setitem__('stypy_function_name', 'CPUInfoBase._try_call')
        CPUInfoBase._try_call.__dict__.__setitem__('stypy_param_names_list', ['func'])
        CPUInfoBase._try_call.__dict__.__setitem__('stypy_varargs_param_name', None)
        CPUInfoBase._try_call.__dict__.__setitem__('stypy_kwargs_param_name', None)
        CPUInfoBase._try_call.__dict__.__setitem__('stypy_call_defaults', defaults)
        CPUInfoBase._try_call.__dict__.__setitem__('stypy_call_varargs', varargs)
        CPUInfoBase._try_call.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        CPUInfoBase._try_call.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CPUInfoBase._try_call', ['func'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_try_call', localization, ['func'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_try_call(...)' code ##################

        
        
        # SSA begins for try-except statement (line 76)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to func(...): (line 77)
        # Processing the call keyword arguments (line 77)
        kwargs_29652 = {}
        # Getting the type of 'func' (line 77)
        func_29651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 77, 19), 'func', False)
        # Calling func(args, kwargs) (line 77)
        func_call_result_29653 = invoke(stypy.reporting.localization.Localization(__file__, 77, 19), func_29651, *[], **kwargs_29652)
        
        # Assigning a type to the variable 'stypy_return_type' (line 77)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 77, 12), 'stypy_return_type', func_call_result_29653)
        # SSA branch for the except part of a try statement (line 76)
        # SSA branch for the except '<any exception>' branch of a try statement (line 76)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 76)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_try_call(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_try_call' in the type store
        # Getting the type of 'stypy_return_type' (line 75)
        stypy_return_type_29654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_29654)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_try_call'
        return stypy_return_type_29654


    @norecursion
    def __getattr__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__getattr__'
        module_type_store = module_type_store.open_function_context('__getattr__', 81, 4, False)
        # Assigning a type to the variable 'self' (line 82)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 82, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        CPUInfoBase.__getattr__.__dict__.__setitem__('stypy_localization', localization)
        CPUInfoBase.__getattr__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        CPUInfoBase.__getattr__.__dict__.__setitem__('stypy_type_store', module_type_store)
        CPUInfoBase.__getattr__.__dict__.__setitem__('stypy_function_name', 'CPUInfoBase.__getattr__')
        CPUInfoBase.__getattr__.__dict__.__setitem__('stypy_param_names_list', ['name'])
        CPUInfoBase.__getattr__.__dict__.__setitem__('stypy_varargs_param_name', None)
        CPUInfoBase.__getattr__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        CPUInfoBase.__getattr__.__dict__.__setitem__('stypy_call_defaults', defaults)
        CPUInfoBase.__getattr__.__dict__.__setitem__('stypy_call_varargs', varargs)
        CPUInfoBase.__getattr__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        CPUInfoBase.__getattr__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CPUInfoBase.__getattr__', ['name'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__getattr__', localization, ['name'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__getattr__(...)' code ##################

        
        
        
        # Call to startswith(...): (line 82)
        # Processing the call arguments (line 82)
        str_29657 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 82, 31), 'str', '_')
        # Processing the call keyword arguments (line 82)
        kwargs_29658 = {}
        # Getting the type of 'name' (line 82)
        name_29655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 82, 15), 'name', False)
        # Obtaining the member 'startswith' of a type (line 82)
        startswith_29656 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 82, 15), name_29655, 'startswith')
        # Calling startswith(args, kwargs) (line 82)
        startswith_call_result_29659 = invoke(stypy.reporting.localization.Localization(__file__, 82, 15), startswith_29656, *[str_29657], **kwargs_29658)
        
        # Applying the 'not' unary operator (line 82)
        result_not__29660 = python_operator(stypy.reporting.localization.Localization(__file__, 82, 11), 'not', startswith_call_result_29659)
        
        # Testing the type of an if condition (line 82)
        if_condition_29661 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 82, 8), result_not__29660)
        # Assigning a type to the variable 'if_condition_29661' (line 82)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 82, 8), 'if_condition_29661', if_condition_29661)
        # SSA begins for if statement (line 82)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to hasattr(...): (line 83)
        # Processing the call arguments (line 83)
        # Getting the type of 'self' (line 83)
        self_29663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 83, 23), 'self', False)
        str_29664 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 83, 29), 'str', '_')
        # Getting the type of 'name' (line 83)
        name_29665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 83, 33), 'name', False)
        # Applying the binary operator '+' (line 83)
        result_add_29666 = python_operator(stypy.reporting.localization.Localization(__file__, 83, 29), '+', str_29664, name_29665)
        
        # Processing the call keyword arguments (line 83)
        kwargs_29667 = {}
        # Getting the type of 'hasattr' (line 83)
        hasattr_29662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 83, 15), 'hasattr', False)
        # Calling hasattr(args, kwargs) (line 83)
        hasattr_call_result_29668 = invoke(stypy.reporting.localization.Localization(__file__, 83, 15), hasattr_29662, *[self_29663, result_add_29666], **kwargs_29667)
        
        # Testing the type of an if condition (line 83)
        if_condition_29669 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 83, 12), hasattr_call_result_29668)
        # Assigning a type to the variable 'if_condition_29669' (line 83)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 83, 12), 'if_condition_29669', if_condition_29669)
        # SSA begins for if statement (line 83)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 84):
        
        # Assigning a Call to a Name (line 84):
        
        # Call to getattr(...): (line 84)
        # Processing the call arguments (line 84)
        # Getting the type of 'self' (line 84)
        self_29671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 84, 31), 'self', False)
        str_29672 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 84, 37), 'str', '_')
        # Getting the type of 'name' (line 84)
        name_29673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 84, 41), 'name', False)
        # Applying the binary operator '+' (line 84)
        result_add_29674 = python_operator(stypy.reporting.localization.Localization(__file__, 84, 37), '+', str_29672, name_29673)
        
        # Processing the call keyword arguments (line 84)
        kwargs_29675 = {}
        # Getting the type of 'getattr' (line 84)
        getattr_29670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 84, 23), 'getattr', False)
        # Calling getattr(args, kwargs) (line 84)
        getattr_call_result_29676 = invoke(stypy.reporting.localization.Localization(__file__, 84, 23), getattr_29670, *[self_29671, result_add_29674], **kwargs_29675)
        
        # Assigning a type to the variable 'attr' (line 84)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 84, 16), 'attr', getattr_call_result_29676)
        
        
        # Call to isinstance(...): (line 85)
        # Processing the call arguments (line 85)
        # Getting the type of 'attr' (line 85)
        attr_29678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 30), 'attr', False)
        # Getting the type of 'types' (line 85)
        types_29679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 36), 'types', False)
        # Obtaining the member 'MethodType' of a type (line 85)
        MethodType_29680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 85, 36), types_29679, 'MethodType')
        # Processing the call keyword arguments (line 85)
        kwargs_29681 = {}
        # Getting the type of 'isinstance' (line 85)
        isinstance_29677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 19), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 85)
        isinstance_call_result_29682 = invoke(stypy.reporting.localization.Localization(__file__, 85, 19), isinstance_29677, *[attr_29678, MethodType_29680], **kwargs_29681)
        
        # Testing the type of an if condition (line 85)
        if_condition_29683 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 85, 16), isinstance_call_result_29682)
        # Assigning a type to the variable 'if_condition_29683' (line 85)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 85, 16), 'if_condition_29683', if_condition_29683)
        # SSA begins for if statement (line 85)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

        @norecursion
        def _stypy_temp_lambda_15(localization, *varargs, **kwargs):
            global module_type_store
            # Getting the type of 'self' (line 86)
            self_29684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 86, 39), 'self')
            # Obtaining the member '_try_call' of a type (line 86)
            _try_call_29685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 86, 39), self_29684, '_try_call')
            # Getting the type of 'attr' (line 86)
            attr_29686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 86, 59), 'attr')
            # Assign values to the parameters with defaults
            defaults = [_try_call_29685, attr_29686]
            # Create a new context for function '_stypy_temp_lambda_15'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_15', 86, 27, True)
            # Passed parameters checking function
            _stypy_temp_lambda_15.stypy_localization = localization
            _stypy_temp_lambda_15.stypy_type_of_self = None
            _stypy_temp_lambda_15.stypy_type_store = module_type_store
            _stypy_temp_lambda_15.stypy_function_name = '_stypy_temp_lambda_15'
            _stypy_temp_lambda_15.stypy_param_names_list = ['func', 'attr']
            _stypy_temp_lambda_15.stypy_varargs_param_name = None
            _stypy_temp_lambda_15.stypy_kwargs_param_name = None
            _stypy_temp_lambda_15.stypy_call_defaults = defaults
            _stypy_temp_lambda_15.stypy_call_varargs = varargs
            _stypy_temp_lambda_15.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_15', ['func', 'attr'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_15', ['func', 'attr'], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            
            # Call to func(...): (line 86)
            # Processing the call arguments (line 86)
            # Getting the type of 'attr' (line 86)
            attr_29688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 86, 71), 'attr', False)
            # Processing the call keyword arguments (line 86)
            kwargs_29689 = {}
            # Getting the type of 'func' (line 86)
            func_29687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 86, 66), 'func', False)
            # Calling func(args, kwargs) (line 86)
            func_call_result_29690 = invoke(stypy.reporting.localization.Localization(__file__, 86, 66), func_29687, *[attr_29688], **kwargs_29689)
            
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 86)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 86, 27), 'stypy_return_type', func_call_result_29690)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_15' in the type store
            # Getting the type of 'stypy_return_type' (line 86)
            stypy_return_type_29691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 86, 27), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_29691)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_15'
            return stypy_return_type_29691

        # Assigning a type to the variable '_stypy_temp_lambda_15' (line 86)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 86, 27), '_stypy_temp_lambda_15', _stypy_temp_lambda_15)
        # Getting the type of '_stypy_temp_lambda_15' (line 86)
        _stypy_temp_lambda_15_29692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 86, 27), '_stypy_temp_lambda_15')
        # Assigning a type to the variable 'stypy_return_type' (line 86)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 86, 20), 'stypy_return_type', _stypy_temp_lambda_15_29692)
        # SSA join for if statement (line 85)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 83)
        module_type_store.open_ssa_branch('else')

        @norecursion
        def _stypy_temp_lambda_16(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_16'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_16', 88, 23, True)
            # Passed parameters checking function
            _stypy_temp_lambda_16.stypy_localization = localization
            _stypy_temp_lambda_16.stypy_type_of_self = None
            _stypy_temp_lambda_16.stypy_type_store = module_type_store
            _stypy_temp_lambda_16.stypy_function_name = '_stypy_temp_lambda_16'
            _stypy_temp_lambda_16.stypy_param_names_list = []
            _stypy_temp_lambda_16.stypy_varargs_param_name = None
            _stypy_temp_lambda_16.stypy_kwargs_param_name = None
            _stypy_temp_lambda_16.stypy_call_defaults = defaults
            _stypy_temp_lambda_16.stypy_call_varargs = varargs
            _stypy_temp_lambda_16.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_16', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_16', [], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            # Getting the type of 'None' (line 88)
            None_29693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 88, 32), 'None')
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 88)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 88, 23), 'stypy_return_type', None_29693)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_16' in the type store
            # Getting the type of 'stypy_return_type' (line 88)
            stypy_return_type_29694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 88, 23), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_29694)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_16'
            return stypy_return_type_29694

        # Assigning a type to the variable '_stypy_temp_lambda_16' (line 88)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 88, 23), '_stypy_temp_lambda_16', _stypy_temp_lambda_16)
        # Getting the type of '_stypy_temp_lambda_16' (line 88)
        _stypy_temp_lambda_16_29695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 88, 23), '_stypy_temp_lambda_16')
        # Assigning a type to the variable 'stypy_return_type' (line 88)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 88, 16), 'stypy_return_type', _stypy_temp_lambda_16_29695)
        # SSA join for if statement (line 83)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 82)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to AttributeError(...): (line 89)
        # Processing the call arguments (line 89)
        # Getting the type of 'name' (line 89)
        name_29697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 89, 29), 'name', False)
        # Processing the call keyword arguments (line 89)
        kwargs_29698 = {}
        # Getting the type of 'AttributeError' (line 89)
        AttributeError_29696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 89, 14), 'AttributeError', False)
        # Calling AttributeError(args, kwargs) (line 89)
        AttributeError_call_result_29699 = invoke(stypy.reporting.localization.Localization(__file__, 89, 14), AttributeError_29696, *[name_29697], **kwargs_29698)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 89, 8), AttributeError_call_result_29699, 'raise parameter', BaseException)
        
        # ################# End of '__getattr__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__getattr__' in the type store
        # Getting the type of 'stypy_return_type' (line 81)
        stypy_return_type_29700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 81, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_29700)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__getattr__'
        return stypy_return_type_29700


    @norecursion
    def _getNCPUs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_getNCPUs'
        module_type_store = module_type_store.open_function_context('_getNCPUs', 91, 4, False)
        # Assigning a type to the variable 'self' (line 92)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 92, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        CPUInfoBase._getNCPUs.__dict__.__setitem__('stypy_localization', localization)
        CPUInfoBase._getNCPUs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        CPUInfoBase._getNCPUs.__dict__.__setitem__('stypy_type_store', module_type_store)
        CPUInfoBase._getNCPUs.__dict__.__setitem__('stypy_function_name', 'CPUInfoBase._getNCPUs')
        CPUInfoBase._getNCPUs.__dict__.__setitem__('stypy_param_names_list', [])
        CPUInfoBase._getNCPUs.__dict__.__setitem__('stypy_varargs_param_name', None)
        CPUInfoBase._getNCPUs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        CPUInfoBase._getNCPUs.__dict__.__setitem__('stypy_call_defaults', defaults)
        CPUInfoBase._getNCPUs.__dict__.__setitem__('stypy_call_varargs', varargs)
        CPUInfoBase._getNCPUs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        CPUInfoBase._getNCPUs.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CPUInfoBase._getNCPUs', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_getNCPUs', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_getNCPUs(...)' code ##################

        int_29701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 92, 15), 'int')
        # Assigning a type to the variable 'stypy_return_type' (line 92)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 92, 8), 'stypy_return_type', int_29701)
        
        # ################# End of '_getNCPUs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_getNCPUs' in the type store
        # Getting the type of 'stypy_return_type' (line 91)
        stypy_return_type_29702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 91, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_29702)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_getNCPUs'
        return stypy_return_type_29702


    @norecursion
    def __get_nbits(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__get_nbits'
        module_type_store = module_type_store.open_function_context('__get_nbits', 94, 4, False)
        # Assigning a type to the variable 'self' (line 95)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 95, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        CPUInfoBase.__get_nbits.__dict__.__setitem__('stypy_localization', localization)
        CPUInfoBase.__get_nbits.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        CPUInfoBase.__get_nbits.__dict__.__setitem__('stypy_type_store', module_type_store)
        CPUInfoBase.__get_nbits.__dict__.__setitem__('stypy_function_name', 'CPUInfoBase.__get_nbits')
        CPUInfoBase.__get_nbits.__dict__.__setitem__('stypy_param_names_list', [])
        CPUInfoBase.__get_nbits.__dict__.__setitem__('stypy_varargs_param_name', None)
        CPUInfoBase.__get_nbits.__dict__.__setitem__('stypy_kwargs_param_name', None)
        CPUInfoBase.__get_nbits.__dict__.__setitem__('stypy_call_defaults', defaults)
        CPUInfoBase.__get_nbits.__dict__.__setitem__('stypy_call_varargs', varargs)
        CPUInfoBase.__get_nbits.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        CPUInfoBase.__get_nbits.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CPUInfoBase.__get_nbits', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__get_nbits', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__get_nbits(...)' code ##################

        
        # Assigning a Subscript to a Name (line 95):
        
        # Assigning a Subscript to a Name (line 95):
        
        # Obtaining the type of the subscript
        int_29703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 95, 40), 'int')
        
        # Call to architecture(...): (line 95)
        # Processing the call keyword arguments (line 95)
        kwargs_29706 = {}
        # Getting the type of 'platform' (line 95)
        platform_29704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 16), 'platform', False)
        # Obtaining the member 'architecture' of a type (line 95)
        architecture_29705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 95, 16), platform_29704, 'architecture')
        # Calling architecture(args, kwargs) (line 95)
        architecture_call_result_29707 = invoke(stypy.reporting.localization.Localization(__file__, 95, 16), architecture_29705, *[], **kwargs_29706)
        
        # Obtaining the member '__getitem__' of a type (line 95)
        getitem___29708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 95, 16), architecture_call_result_29707, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 95)
        subscript_call_result_29709 = invoke(stypy.reporting.localization.Localization(__file__, 95, 16), getitem___29708, int_29703)
        
        # Assigning a type to the variable 'abits' (line 95)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 95, 8), 'abits', subscript_call_result_29709)
        
        # Assigning a Call to a Name (line 96):
        
        # Assigning a Call to a Name (line 96):
        
        # Call to group(...): (line 96)
        # Processing the call arguments (line 96)
        int_29720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 96, 59), 'int')
        # Processing the call keyword arguments (line 96)
        kwargs_29721 = {}
        
        # Call to search(...): (line 96)
        # Processing the call arguments (line 96)
        # Getting the type of 'abits' (line 96)
        abits_29716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 96, 46), 'abits', False)
        # Processing the call keyword arguments (line 96)
        kwargs_29717 = {}
        
        # Call to compile(...): (line 96)
        # Processing the call arguments (line 96)
        str_29712 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 96, 27), 'str', '(\\d+)bit')
        # Processing the call keyword arguments (line 96)
        kwargs_29713 = {}
        # Getting the type of 're' (line 96)
        re_29710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 96, 16), 're', False)
        # Obtaining the member 'compile' of a type (line 96)
        compile_29711 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 96, 16), re_29710, 'compile')
        # Calling compile(args, kwargs) (line 96)
        compile_call_result_29714 = invoke(stypy.reporting.localization.Localization(__file__, 96, 16), compile_29711, *[str_29712], **kwargs_29713)
        
        # Obtaining the member 'search' of a type (line 96)
        search_29715 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 96, 16), compile_call_result_29714, 'search')
        # Calling search(args, kwargs) (line 96)
        search_call_result_29718 = invoke(stypy.reporting.localization.Localization(__file__, 96, 16), search_29715, *[abits_29716], **kwargs_29717)
        
        # Obtaining the member 'group' of a type (line 96)
        group_29719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 96, 16), search_call_result_29718, 'group')
        # Calling group(args, kwargs) (line 96)
        group_call_result_29722 = invoke(stypy.reporting.localization.Localization(__file__, 96, 16), group_29719, *[int_29720], **kwargs_29721)
        
        # Assigning a type to the variable 'nbits' (line 96)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 96, 8), 'nbits', group_call_result_29722)
        # Getting the type of 'nbits' (line 97)
        nbits_29723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 97, 15), 'nbits')
        # Assigning a type to the variable 'stypy_return_type' (line 97)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 97, 8), 'stypy_return_type', nbits_29723)
        
        # ################# End of '__get_nbits(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__get_nbits' in the type store
        # Getting the type of 'stypy_return_type' (line 94)
        stypy_return_type_29724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_29724)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__get_nbits'
        return stypy_return_type_29724


    @norecursion
    def _is_32bit(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_32bit'
        module_type_store = module_type_store.open_function_context('_is_32bit', 99, 4, False)
        # Assigning a type to the variable 'self' (line 100)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 100, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        CPUInfoBase._is_32bit.__dict__.__setitem__('stypy_localization', localization)
        CPUInfoBase._is_32bit.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        CPUInfoBase._is_32bit.__dict__.__setitem__('stypy_type_store', module_type_store)
        CPUInfoBase._is_32bit.__dict__.__setitem__('stypy_function_name', 'CPUInfoBase._is_32bit')
        CPUInfoBase._is_32bit.__dict__.__setitem__('stypy_param_names_list', [])
        CPUInfoBase._is_32bit.__dict__.__setitem__('stypy_varargs_param_name', None)
        CPUInfoBase._is_32bit.__dict__.__setitem__('stypy_kwargs_param_name', None)
        CPUInfoBase._is_32bit.__dict__.__setitem__('stypy_call_defaults', defaults)
        CPUInfoBase._is_32bit.__dict__.__setitem__('stypy_call_varargs', varargs)
        CPUInfoBase._is_32bit.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        CPUInfoBase._is_32bit.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CPUInfoBase._is_32bit', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_32bit', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_32bit(...)' code ##################

        
        
        # Call to __get_nbits(...): (line 100)
        # Processing the call keyword arguments (line 100)
        kwargs_29727 = {}
        # Getting the type of 'self' (line 100)
        self_29725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 100, 15), 'self', False)
        # Obtaining the member '__get_nbits' of a type (line 100)
        get_nbits_29726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 100, 15), self_29725, '__get_nbits')
        # Calling __get_nbits(args, kwargs) (line 100)
        get_nbits_call_result_29728 = invoke(stypy.reporting.localization.Localization(__file__, 100, 15), get_nbits_29726, *[], **kwargs_29727)
        
        str_29729 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 100, 37), 'str', '32')
        # Applying the binary operator '==' (line 100)
        result_eq_29730 = python_operator(stypy.reporting.localization.Localization(__file__, 100, 15), '==', get_nbits_call_result_29728, str_29729)
        
        # Assigning a type to the variable 'stypy_return_type' (line 100)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 100, 8), 'stypy_return_type', result_eq_29730)
        
        # ################# End of '_is_32bit(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_32bit' in the type store
        # Getting the type of 'stypy_return_type' (line 99)
        stypy_return_type_29731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 99, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_29731)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_32bit'
        return stypy_return_type_29731


    @norecursion
    def _is_64bit(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_64bit'
        module_type_store = module_type_store.open_function_context('_is_64bit', 102, 4, False)
        # Assigning a type to the variable 'self' (line 103)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 103, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        CPUInfoBase._is_64bit.__dict__.__setitem__('stypy_localization', localization)
        CPUInfoBase._is_64bit.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        CPUInfoBase._is_64bit.__dict__.__setitem__('stypy_type_store', module_type_store)
        CPUInfoBase._is_64bit.__dict__.__setitem__('stypy_function_name', 'CPUInfoBase._is_64bit')
        CPUInfoBase._is_64bit.__dict__.__setitem__('stypy_param_names_list', [])
        CPUInfoBase._is_64bit.__dict__.__setitem__('stypy_varargs_param_name', None)
        CPUInfoBase._is_64bit.__dict__.__setitem__('stypy_kwargs_param_name', None)
        CPUInfoBase._is_64bit.__dict__.__setitem__('stypy_call_defaults', defaults)
        CPUInfoBase._is_64bit.__dict__.__setitem__('stypy_call_varargs', varargs)
        CPUInfoBase._is_64bit.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        CPUInfoBase._is_64bit.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CPUInfoBase._is_64bit', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_64bit', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_64bit(...)' code ##################

        
        
        # Call to __get_nbits(...): (line 103)
        # Processing the call keyword arguments (line 103)
        kwargs_29734 = {}
        # Getting the type of 'self' (line 103)
        self_29732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 15), 'self', False)
        # Obtaining the member '__get_nbits' of a type (line 103)
        get_nbits_29733 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 103, 15), self_29732, '__get_nbits')
        # Calling __get_nbits(args, kwargs) (line 103)
        get_nbits_call_result_29735 = invoke(stypy.reporting.localization.Localization(__file__, 103, 15), get_nbits_29733, *[], **kwargs_29734)
        
        str_29736 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 103, 37), 'str', '64')
        # Applying the binary operator '==' (line 103)
        result_eq_29737 = python_operator(stypy.reporting.localization.Localization(__file__, 103, 15), '==', get_nbits_call_result_29735, str_29736)
        
        # Assigning a type to the variable 'stypy_return_type' (line 103)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 103, 8), 'stypy_return_type', result_eq_29737)
        
        # ################# End of '_is_64bit(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_64bit' in the type store
        # Getting the type of 'stypy_return_type' (line 102)
        stypy_return_type_29738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_29738)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_64bit'
        return stypy_return_type_29738


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 70, 0, False)
        # Assigning a type to the variable 'self' (line 71)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 71, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'CPUInfoBase.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'CPUInfoBase' (line 70)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 70, 0), 'CPUInfoBase', CPUInfoBase)
# Declaration of the 'LinuxCPUInfo' class
# Getting the type of 'CPUInfoBase' (line 105)
CPUInfoBase_29739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 19), 'CPUInfoBase')

class LinuxCPUInfo(CPUInfoBase_29739, ):
    
    # Assigning a Name to a Name (line 107):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 109, 4, False)
        # Assigning a type to the variable 'self' (line 110)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 110, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        
        # Getting the type of 'self' (line 110)
        self_29740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 110, 11), 'self')
        # Obtaining the member 'info' of a type (line 110)
        info_29741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 110, 11), self_29740, 'info')
        # Getting the type of 'None' (line 110)
        None_29742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 110, 28), 'None')
        # Applying the binary operator 'isnot' (line 110)
        result_is_not_29743 = python_operator(stypy.reporting.localization.Localization(__file__, 110, 11), 'isnot', info_29741, None_29742)
        
        # Testing the type of an if condition (line 110)
        if_condition_29744 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 110, 8), result_is_not_29743)
        # Assigning a type to the variable 'if_condition_29744' (line 110)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 110, 8), 'if_condition_29744', if_condition_29744)
        # SSA begins for if statement (line 110)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 111)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 111, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 110)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a List to a Name (line 112):
        
        # Assigning a List to a Name (line 112):
        
        # Obtaining an instance of the builtin type 'list' (line 112)
        list_29745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 112, 15), 'list')
        # Adding type elements to the builtin type 'list' instance (line 112)
        # Adding element type (line 112)
        
        # Obtaining an instance of the builtin type 'dict' (line 112)
        dict_29746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 112, 17), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 112)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 112, 15), list_29745, dict_29746)
        
        # Assigning a type to the variable 'info' (line 112)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 112, 8), 'info', list_29745)
        
        # Assigning a Call to a Tuple (line 113):
        
        # Assigning a Call to a Name:
        
        # Call to getoutput(...): (line 113)
        # Processing the call arguments (line 113)
        str_29748 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 113, 31), 'str', 'uname -m')
        # Processing the call keyword arguments (line 113)
        kwargs_29749 = {}
        # Getting the type of 'getoutput' (line 113)
        getoutput_29747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 21), 'getoutput', False)
        # Calling getoutput(args, kwargs) (line 113)
        getoutput_call_result_29750 = invoke(stypy.reporting.localization.Localization(__file__, 113, 21), getoutput_29747, *[str_29748], **kwargs_29749)
        
        # Assigning a type to the variable 'call_assignment_29446' (line 113)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 113, 8), 'call_assignment_29446', getoutput_call_result_29750)
        
        # Assigning a Call to a Name (line 113):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_29753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 113, 8), 'int')
        # Processing the call keyword arguments
        kwargs_29754 = {}
        # Getting the type of 'call_assignment_29446' (line 113)
        call_assignment_29446_29751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 8), 'call_assignment_29446', False)
        # Obtaining the member '__getitem__' of a type (line 113)
        getitem___29752 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 113, 8), call_assignment_29446_29751, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_29755 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___29752, *[int_29753], **kwargs_29754)
        
        # Assigning a type to the variable 'call_assignment_29447' (line 113)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 113, 8), 'call_assignment_29447', getitem___call_result_29755)
        
        # Assigning a Name to a Name (line 113):
        # Getting the type of 'call_assignment_29447' (line 113)
        call_assignment_29447_29756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 8), 'call_assignment_29447')
        # Assigning a type to the variable 'ok' (line 113)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 113, 8), 'ok', call_assignment_29447_29756)
        
        # Assigning a Call to a Name (line 113):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_29759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 113, 8), 'int')
        # Processing the call keyword arguments
        kwargs_29760 = {}
        # Getting the type of 'call_assignment_29446' (line 113)
        call_assignment_29446_29757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 8), 'call_assignment_29446', False)
        # Obtaining the member '__getitem__' of a type (line 113)
        getitem___29758 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 113, 8), call_assignment_29446_29757, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_29761 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___29758, *[int_29759], **kwargs_29760)
        
        # Assigning a type to the variable 'call_assignment_29448' (line 113)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 113, 8), 'call_assignment_29448', getitem___call_result_29761)
        
        # Assigning a Name to a Name (line 113):
        # Getting the type of 'call_assignment_29448' (line 113)
        call_assignment_29448_29762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 8), 'call_assignment_29448')
        # Assigning a type to the variable 'output' (line 113)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 113, 12), 'output', call_assignment_29448_29762)
        
        # Getting the type of 'ok' (line 114)
        ok_29763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 114, 11), 'ok')
        # Testing the type of an if condition (line 114)
        if_condition_29764 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 114, 8), ok_29763)
        # Assigning a type to the variable 'if_condition_29764' (line 114)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 114, 8), 'if_condition_29764', if_condition_29764)
        # SSA begins for if statement (line 114)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Subscript (line 115):
        
        # Assigning a Call to a Subscript (line 115):
        
        # Call to strip(...): (line 115)
        # Processing the call keyword arguments (line 115)
        kwargs_29767 = {}
        # Getting the type of 'output' (line 115)
        output_29765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 115, 33), 'output', False)
        # Obtaining the member 'strip' of a type (line 115)
        strip_29766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 115, 33), output_29765, 'strip')
        # Calling strip(args, kwargs) (line 115)
        strip_call_result_29768 = invoke(stypy.reporting.localization.Localization(__file__, 115, 33), strip_29766, *[], **kwargs_29767)
        
        
        # Obtaining the type of the subscript
        int_29769 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 115, 17), 'int')
        # Getting the type of 'info' (line 115)
        info_29770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 115, 12), 'info')
        # Obtaining the member '__getitem__' of a type (line 115)
        getitem___29771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 115, 12), info_29770, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 115)
        subscript_call_result_29772 = invoke(stypy.reporting.localization.Localization(__file__, 115, 12), getitem___29771, int_29769)
        
        str_29773 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 115, 20), 'str', 'uname_m')
        # Storing an element on a container (line 115)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 115, 12), subscript_call_result_29772, (str_29773, strip_call_result_29768))
        # SSA join for if statement (line 114)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # SSA begins for try-except statement (line 116)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 117):
        
        # Assigning a Call to a Name (line 117):
        
        # Call to open(...): (line 117)
        # Processing the call arguments (line 117)
        str_29775 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 117, 22), 'str', '/proc/cpuinfo')
        # Processing the call keyword arguments (line 117)
        kwargs_29776 = {}
        # Getting the type of 'open' (line 117)
        open_29774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 117, 17), 'open', False)
        # Calling open(args, kwargs) (line 117)
        open_call_result_29777 = invoke(stypy.reporting.localization.Localization(__file__, 117, 17), open_29774, *[str_29775], **kwargs_29776)
        
        # Assigning a type to the variable 'fo' (line 117)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 117, 12), 'fo', open_call_result_29777)
        # SSA branch for the except part of a try statement (line 116)
        # SSA branch for the except 'EnvironmentError' branch of a try statement (line 116)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Call to a Name (line 119):
        
        # Assigning a Call to a Name (line 119):
        
        # Call to get_exception(...): (line 119)
        # Processing the call keyword arguments (line 119)
        kwargs_29779 = {}
        # Getting the type of 'get_exception' (line 119)
        get_exception_29778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 119, 16), 'get_exception', False)
        # Calling get_exception(args, kwargs) (line 119)
        get_exception_call_result_29780 = invoke(stypy.reporting.localization.Localization(__file__, 119, 16), get_exception_29778, *[], **kwargs_29779)
        
        # Assigning a type to the variable 'e' (line 119)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 119, 12), 'e', get_exception_call_result_29780)
        
        # Call to warn(...): (line 120)
        # Processing the call arguments (line 120)
        
        # Call to str(...): (line 120)
        # Processing the call arguments (line 120)
        # Getting the type of 'e' (line 120)
        e_29784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 30), 'e', False)
        # Processing the call keyword arguments (line 120)
        kwargs_29785 = {}
        # Getting the type of 'str' (line 120)
        str_29783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 26), 'str', False)
        # Calling str(args, kwargs) (line 120)
        str_call_result_29786 = invoke(stypy.reporting.localization.Localization(__file__, 120, 26), str_29783, *[e_29784], **kwargs_29785)
        
        # Getting the type of 'UserWarning' (line 120)
        UserWarning_29787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 34), 'UserWarning', False)
        # Processing the call keyword arguments (line 120)
        kwargs_29788 = {}
        # Getting the type of 'warnings' (line 120)
        warnings_29781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 12), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 120)
        warn_29782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 120, 12), warnings_29781, 'warn')
        # Calling warn(args, kwargs) (line 120)
        warn_call_result_29789 = invoke(stypy.reporting.localization.Localization(__file__, 120, 12), warn_29782, *[str_call_result_29786, UserWarning_29787], **kwargs_29788)
        
        # SSA branch for the else branch of a try statement (line 116)
        module_type_store.open_ssa_branch('except else')
        
        # Getting the type of 'fo' (line 122)
        fo_29790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 122, 24), 'fo')
        # Testing the type of a for loop iterable (line 122)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 122, 12), fo_29790)
        # Getting the type of the for loop variable (line 122)
        for_loop_var_29791 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 122, 12), fo_29790)
        # Assigning a type to the variable 'line' (line 122)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 122, 12), 'line', for_loop_var_29791)
        # SSA begins for a for statement (line 122)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a ListComp to a Name (line 123):
        
        # Assigning a ListComp to a Name (line 123):
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to split(...): (line 123)
        # Processing the call arguments (line 123)
        str_29798 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 123, 60), 'str', ':')
        int_29799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 123, 65), 'int')
        # Processing the call keyword arguments (line 123)
        kwargs_29800 = {}
        # Getting the type of 'line' (line 123)
        line_29796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 49), 'line', False)
        # Obtaining the member 'split' of a type (line 123)
        split_29797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 123, 49), line_29796, 'split')
        # Calling split(args, kwargs) (line 123)
        split_call_result_29801 = invoke(stypy.reporting.localization.Localization(__file__, 123, 49), split_29797, *[str_29798, int_29799], **kwargs_29800)
        
        comprehension_29802 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 123, 30), split_call_result_29801)
        # Assigning a type to the variable 's' (line 123)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 123, 30), 's', comprehension_29802)
        
        # Call to strip(...): (line 123)
        # Processing the call keyword arguments (line 123)
        kwargs_29794 = {}
        # Getting the type of 's' (line 123)
        s_29792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 123, 30), 's', False)
        # Obtaining the member 'strip' of a type (line 123)
        strip_29793 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 123, 30), s_29792, 'strip')
        # Calling strip(args, kwargs) (line 123)
        strip_call_result_29795 = invoke(stypy.reporting.localization.Localization(__file__, 123, 30), strip_29793, *[], **kwargs_29794)
        
        list_29803 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 123, 30), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 123, 30), list_29803, strip_call_result_29795)
        # Assigning a type to the variable 'name_value' (line 123)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 123, 16), 'name_value', list_29803)
        
        
        
        # Call to len(...): (line 124)
        # Processing the call arguments (line 124)
        # Getting the type of 'name_value' (line 124)
        name_value_29805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 23), 'name_value', False)
        # Processing the call keyword arguments (line 124)
        kwargs_29806 = {}
        # Getting the type of 'len' (line 124)
        len_29804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 19), 'len', False)
        # Calling len(args, kwargs) (line 124)
        len_call_result_29807 = invoke(stypy.reporting.localization.Localization(__file__, 124, 19), len_29804, *[name_value_29805], **kwargs_29806)
        
        int_29808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 124, 38), 'int')
        # Applying the binary operator '!=' (line 124)
        result_ne_29809 = python_operator(stypy.reporting.localization.Localization(__file__, 124, 19), '!=', len_call_result_29807, int_29808)
        
        # Testing the type of an if condition (line 124)
        if_condition_29810 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 124, 16), result_ne_29809)
        # Assigning a type to the variable 'if_condition_29810' (line 124)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 124, 16), 'if_condition_29810', if_condition_29810)
        # SSA begins for if statement (line 124)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA join for if statement (line 124)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Tuple (line 126):
        
        # Assigning a Subscript to a Name (line 126):
        
        # Obtaining the type of the subscript
        int_29811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 126, 16), 'int')
        # Getting the type of 'name_value' (line 126)
        name_value_29812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 30), 'name_value')
        # Obtaining the member '__getitem__' of a type (line 126)
        getitem___29813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 126, 16), name_value_29812, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 126)
        subscript_call_result_29814 = invoke(stypy.reporting.localization.Localization(__file__, 126, 16), getitem___29813, int_29811)
        
        # Assigning a type to the variable 'tuple_var_assignment_29449' (line 126)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 126, 16), 'tuple_var_assignment_29449', subscript_call_result_29814)
        
        # Assigning a Subscript to a Name (line 126):
        
        # Obtaining the type of the subscript
        int_29815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 126, 16), 'int')
        # Getting the type of 'name_value' (line 126)
        name_value_29816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 30), 'name_value')
        # Obtaining the member '__getitem__' of a type (line 126)
        getitem___29817 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 126, 16), name_value_29816, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 126)
        subscript_call_result_29818 = invoke(stypy.reporting.localization.Localization(__file__, 126, 16), getitem___29817, int_29815)
        
        # Assigning a type to the variable 'tuple_var_assignment_29450' (line 126)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 126, 16), 'tuple_var_assignment_29450', subscript_call_result_29818)
        
        # Assigning a Name to a Name (line 126):
        # Getting the type of 'tuple_var_assignment_29449' (line 126)
        tuple_var_assignment_29449_29819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 16), 'tuple_var_assignment_29449')
        # Assigning a type to the variable 'name' (line 126)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 126, 16), 'name', tuple_var_assignment_29449_29819)
        
        # Assigning a Name to a Name (line 126):
        # Getting the type of 'tuple_var_assignment_29450' (line 126)
        tuple_var_assignment_29450_29820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 16), 'tuple_var_assignment_29450')
        # Assigning a type to the variable 'value' (line 126)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 126, 22), 'value', tuple_var_assignment_29450_29820)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'info' (line 127)
        info_29821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 127, 23), 'info')
        # Applying the 'not' unary operator (line 127)
        result_not__29822 = python_operator(stypy.reporting.localization.Localization(__file__, 127, 19), 'not', info_29821)
        
        
        # Getting the type of 'name' (line 127)
        name_29823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 127, 31), 'name')
        
        # Obtaining the type of the subscript
        int_29824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 127, 44), 'int')
        # Getting the type of 'info' (line 127)
        info_29825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 127, 39), 'info')
        # Obtaining the member '__getitem__' of a type (line 127)
        getitem___29826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 127, 39), info_29825, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 127)
        subscript_call_result_29827 = invoke(stypy.reporting.localization.Localization(__file__, 127, 39), getitem___29826, int_29824)
        
        # Applying the binary operator 'in' (line 127)
        result_contains_29828 = python_operator(stypy.reporting.localization.Localization(__file__, 127, 31), 'in', name_29823, subscript_call_result_29827)
        
        # Applying the binary operator 'or' (line 127)
        result_or_keyword_29829 = python_operator(stypy.reporting.localization.Localization(__file__, 127, 19), 'or', result_not__29822, result_contains_29828)
        
        # Testing the type of an if condition (line 127)
        if_condition_29830 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 127, 16), result_or_keyword_29829)
        # Assigning a type to the variable 'if_condition_29830' (line 127)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 127, 16), 'if_condition_29830', if_condition_29830)
        # SSA begins for if statement (line 127)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 128)
        # Processing the call arguments (line 128)
        
        # Obtaining an instance of the builtin type 'dict' (line 128)
        dict_29833 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 128, 32), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 128)
        
        # Processing the call keyword arguments (line 128)
        kwargs_29834 = {}
        # Getting the type of 'info' (line 128)
        info_29831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 20), 'info', False)
        # Obtaining the member 'append' of a type (line 128)
        append_29832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 128, 20), info_29831, 'append')
        # Calling append(args, kwargs) (line 128)
        append_call_result_29835 = invoke(stypy.reporting.localization.Localization(__file__, 128, 20), append_29832, *[dict_29833], **kwargs_29834)
        
        # SSA join for if statement (line 127)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Subscript (line 129):
        
        # Assigning a Name to a Subscript (line 129):
        # Getting the type of 'value' (line 129)
        value_29836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 129, 33), 'value')
        
        # Obtaining the type of the subscript
        int_29837 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 129, 21), 'int')
        # Getting the type of 'info' (line 129)
        info_29838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 129, 16), 'info')
        # Obtaining the member '__getitem__' of a type (line 129)
        getitem___29839 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 129, 16), info_29838, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 129)
        subscript_call_result_29840 = invoke(stypy.reporting.localization.Localization(__file__, 129, 16), getitem___29839, int_29837)
        
        # Getting the type of 'name' (line 129)
        name_29841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 129, 25), 'name')
        # Storing an element on a container (line 129)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 129, 16), subscript_call_result_29840, (name_29841, value_29836))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to close(...): (line 130)
        # Processing the call keyword arguments (line 130)
        kwargs_29844 = {}
        # Getting the type of 'fo' (line 130)
        fo_29842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 12), 'fo', False)
        # Obtaining the member 'close' of a type (line 130)
        close_29843 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 130, 12), fo_29842, 'close')
        # Calling close(args, kwargs) (line 130)
        close_call_result_29845 = invoke(stypy.reporting.localization.Localization(__file__, 130, 12), close_29843, *[], **kwargs_29844)
        
        # SSA join for try-except statement (line 116)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 131):
        
        # Assigning a Name to a Attribute (line 131):
        # Getting the type of 'info' (line 131)
        info_29846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 131, 30), 'info')
        # Getting the type of 'self' (line 131)
        self_29847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 131, 8), 'self')
        # Obtaining the member '__class__' of a type (line 131)
        class___29848 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 131, 8), self_29847, '__class__')
        # Setting the type of the member 'info' of a type (line 131)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 131, 8), class___29848, 'info', info_29846)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _not_impl(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_not_impl'
        module_type_store = module_type_store.open_function_context('_not_impl', 133, 4, False)
        # Assigning a type to the variable 'self' (line 134)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 134, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._not_impl.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._not_impl.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._not_impl.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._not_impl.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._not_impl')
        LinuxCPUInfo._not_impl.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._not_impl.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._not_impl.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._not_impl.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._not_impl.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._not_impl.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._not_impl.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._not_impl', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_not_impl', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_not_impl(...)' code ##################

        pass
        
        # ################# End of '_not_impl(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_not_impl' in the type store
        # Getting the type of 'stypy_return_type' (line 133)
        stypy_return_type_29849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_29849)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_not_impl'
        return stypy_return_type_29849


    @norecursion
    def _is_AMD(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_AMD'
        module_type_store = module_type_store.open_function_context('_is_AMD', 137, 4, False)
        # Assigning a type to the variable 'self' (line 138)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 138, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._is_AMD.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._is_AMD.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._is_AMD.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._is_AMD.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._is_AMD')
        LinuxCPUInfo._is_AMD.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._is_AMD.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._is_AMD.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._is_AMD.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._is_AMD.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._is_AMD.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._is_AMD.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._is_AMD', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_AMD', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_AMD(...)' code ##################

        
        
        # Obtaining the type of the subscript
        str_29850 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 138, 28), 'str', 'vendor_id')
        
        # Obtaining the type of the subscript
        int_29851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 138, 25), 'int')
        # Getting the type of 'self' (line 138)
        self_29852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 138, 15), 'self')
        # Obtaining the member 'info' of a type (line 138)
        info_29853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 138, 15), self_29852, 'info')
        # Obtaining the member '__getitem__' of a type (line 138)
        getitem___29854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 138, 15), info_29853, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 138)
        subscript_call_result_29855 = invoke(stypy.reporting.localization.Localization(__file__, 138, 15), getitem___29854, int_29851)
        
        # Obtaining the member '__getitem__' of a type (line 138)
        getitem___29856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 138, 15), subscript_call_result_29855, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 138)
        subscript_call_result_29857 = invoke(stypy.reporting.localization.Localization(__file__, 138, 15), getitem___29856, str_29850)
        
        str_29858 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 138, 42), 'str', 'AuthenticAMD')
        # Applying the binary operator '==' (line 138)
        result_eq_29859 = python_operator(stypy.reporting.localization.Localization(__file__, 138, 15), '==', subscript_call_result_29857, str_29858)
        
        # Assigning a type to the variable 'stypy_return_type' (line 138)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 138, 8), 'stypy_return_type', result_eq_29859)
        
        # ################# End of '_is_AMD(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_AMD' in the type store
        # Getting the type of 'stypy_return_type' (line 137)
        stypy_return_type_29860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 137, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_29860)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_AMD'
        return stypy_return_type_29860


    @norecursion
    def _is_AthlonK6_2(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_AthlonK6_2'
        module_type_store = module_type_store.open_function_context('_is_AthlonK6_2', 140, 4, False)
        # Assigning a type to the variable 'self' (line 141)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 141, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._is_AthlonK6_2.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._is_AthlonK6_2.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._is_AthlonK6_2.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._is_AthlonK6_2.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._is_AthlonK6_2')
        LinuxCPUInfo._is_AthlonK6_2.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._is_AthlonK6_2.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._is_AthlonK6_2.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._is_AthlonK6_2.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._is_AthlonK6_2.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._is_AthlonK6_2.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._is_AthlonK6_2.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._is_AthlonK6_2', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_AthlonK6_2', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_AthlonK6_2(...)' code ##################

        
        # Evaluating a boolean operation
        
        # Call to _is_AMD(...): (line 141)
        # Processing the call keyword arguments (line 141)
        kwargs_29863 = {}
        # Getting the type of 'self' (line 141)
        self_29861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 141, 15), 'self', False)
        # Obtaining the member '_is_AMD' of a type (line 141)
        _is_AMD_29862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 141, 15), self_29861, '_is_AMD')
        # Calling _is_AMD(args, kwargs) (line 141)
        _is_AMD_call_result_29864 = invoke(stypy.reporting.localization.Localization(__file__, 141, 15), _is_AMD_29862, *[], **kwargs_29863)
        
        
        
        # Obtaining the type of the subscript
        str_29865 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 141, 47), 'str', 'model')
        
        # Obtaining the type of the subscript
        int_29866 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 141, 44), 'int')
        # Getting the type of 'self' (line 141)
        self_29867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 141, 34), 'self')
        # Obtaining the member 'info' of a type (line 141)
        info_29868 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 141, 34), self_29867, 'info')
        # Obtaining the member '__getitem__' of a type (line 141)
        getitem___29869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 141, 34), info_29868, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 141)
        subscript_call_result_29870 = invoke(stypy.reporting.localization.Localization(__file__, 141, 34), getitem___29869, int_29866)
        
        # Obtaining the member '__getitem__' of a type (line 141)
        getitem___29871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 141, 34), subscript_call_result_29870, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 141)
        subscript_call_result_29872 = invoke(stypy.reporting.localization.Localization(__file__, 141, 34), getitem___29871, str_29865)
        
        str_29873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 141, 59), 'str', '2')
        # Applying the binary operator '==' (line 141)
        result_eq_29874 = python_operator(stypy.reporting.localization.Localization(__file__, 141, 34), '==', subscript_call_result_29872, str_29873)
        
        # Applying the binary operator 'and' (line 141)
        result_and_keyword_29875 = python_operator(stypy.reporting.localization.Localization(__file__, 141, 15), 'and', _is_AMD_call_result_29864, result_eq_29874)
        
        # Assigning a type to the variable 'stypy_return_type' (line 141)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 141, 8), 'stypy_return_type', result_and_keyword_29875)
        
        # ################# End of '_is_AthlonK6_2(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_AthlonK6_2' in the type store
        # Getting the type of 'stypy_return_type' (line 140)
        stypy_return_type_29876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 140, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_29876)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_AthlonK6_2'
        return stypy_return_type_29876


    @norecursion
    def _is_AthlonK6_3(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_AthlonK6_3'
        module_type_store = module_type_store.open_function_context('_is_AthlonK6_3', 143, 4, False)
        # Assigning a type to the variable 'self' (line 144)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 144, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._is_AthlonK6_3.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._is_AthlonK6_3.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._is_AthlonK6_3.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._is_AthlonK6_3.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._is_AthlonK6_3')
        LinuxCPUInfo._is_AthlonK6_3.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._is_AthlonK6_3.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._is_AthlonK6_3.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._is_AthlonK6_3.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._is_AthlonK6_3.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._is_AthlonK6_3.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._is_AthlonK6_3.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._is_AthlonK6_3', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_AthlonK6_3', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_AthlonK6_3(...)' code ##################

        
        # Evaluating a boolean operation
        
        # Call to _is_AMD(...): (line 144)
        # Processing the call keyword arguments (line 144)
        kwargs_29879 = {}
        # Getting the type of 'self' (line 144)
        self_29877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 15), 'self', False)
        # Obtaining the member '_is_AMD' of a type (line 144)
        _is_AMD_29878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 144, 15), self_29877, '_is_AMD')
        # Calling _is_AMD(args, kwargs) (line 144)
        _is_AMD_call_result_29880 = invoke(stypy.reporting.localization.Localization(__file__, 144, 15), _is_AMD_29878, *[], **kwargs_29879)
        
        
        
        # Obtaining the type of the subscript
        str_29881 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 144, 47), 'str', 'model')
        
        # Obtaining the type of the subscript
        int_29882 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 144, 44), 'int')
        # Getting the type of 'self' (line 144)
        self_29883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 34), 'self')
        # Obtaining the member 'info' of a type (line 144)
        info_29884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 144, 34), self_29883, 'info')
        # Obtaining the member '__getitem__' of a type (line 144)
        getitem___29885 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 144, 34), info_29884, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 144)
        subscript_call_result_29886 = invoke(stypy.reporting.localization.Localization(__file__, 144, 34), getitem___29885, int_29882)
        
        # Obtaining the member '__getitem__' of a type (line 144)
        getitem___29887 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 144, 34), subscript_call_result_29886, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 144)
        subscript_call_result_29888 = invoke(stypy.reporting.localization.Localization(__file__, 144, 34), getitem___29887, str_29881)
        
        str_29889 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 144, 59), 'str', '3')
        # Applying the binary operator '==' (line 144)
        result_eq_29890 = python_operator(stypy.reporting.localization.Localization(__file__, 144, 34), '==', subscript_call_result_29888, str_29889)
        
        # Applying the binary operator 'and' (line 144)
        result_and_keyword_29891 = python_operator(stypy.reporting.localization.Localization(__file__, 144, 15), 'and', _is_AMD_call_result_29880, result_eq_29890)
        
        # Assigning a type to the variable 'stypy_return_type' (line 144)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 144, 8), 'stypy_return_type', result_and_keyword_29891)
        
        # ################# End of '_is_AthlonK6_3(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_AthlonK6_3' in the type store
        # Getting the type of 'stypy_return_type' (line 143)
        stypy_return_type_29892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 143, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_29892)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_AthlonK6_3'
        return stypy_return_type_29892


    @norecursion
    def _is_AthlonK6(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_AthlonK6'
        module_type_store = module_type_store.open_function_context('_is_AthlonK6', 146, 4, False)
        # Assigning a type to the variable 'self' (line 147)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 147, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._is_AthlonK6.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._is_AthlonK6.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._is_AthlonK6.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._is_AthlonK6.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._is_AthlonK6')
        LinuxCPUInfo._is_AthlonK6.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._is_AthlonK6.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._is_AthlonK6.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._is_AthlonK6.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._is_AthlonK6.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._is_AthlonK6.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._is_AthlonK6.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._is_AthlonK6', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_AthlonK6', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_AthlonK6(...)' code ##################

        
        
        # Call to match(...): (line 147)
        # Processing the call arguments (line 147)
        str_29895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 147, 24), 'str', '.*?AMD-K6')
        
        # Obtaining the type of the subscript
        str_29896 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 147, 51), 'str', 'model name')
        
        # Obtaining the type of the subscript
        int_29897 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 147, 48), 'int')
        # Getting the type of 'self' (line 147)
        self_29898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 147, 38), 'self', False)
        # Obtaining the member 'info' of a type (line 147)
        info_29899 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 147, 38), self_29898, 'info')
        # Obtaining the member '__getitem__' of a type (line 147)
        getitem___29900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 147, 38), info_29899, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 147)
        subscript_call_result_29901 = invoke(stypy.reporting.localization.Localization(__file__, 147, 38), getitem___29900, int_29897)
        
        # Obtaining the member '__getitem__' of a type (line 147)
        getitem___29902 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 147, 38), subscript_call_result_29901, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 147)
        subscript_call_result_29903 = invoke(stypy.reporting.localization.Localization(__file__, 147, 38), getitem___29902, str_29896)
        
        # Processing the call keyword arguments (line 147)
        kwargs_29904 = {}
        # Getting the type of 're' (line 147)
        re_29893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 147, 15), 're', False)
        # Obtaining the member 'match' of a type (line 147)
        match_29894 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 147, 15), re_29893, 'match')
        # Calling match(args, kwargs) (line 147)
        match_call_result_29905 = invoke(stypy.reporting.localization.Localization(__file__, 147, 15), match_29894, *[str_29895, subscript_call_result_29903], **kwargs_29904)
        
        # Getting the type of 'None' (line 147)
        None_29906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 147, 73), 'None')
        # Applying the binary operator 'isnot' (line 147)
        result_is_not_29907 = python_operator(stypy.reporting.localization.Localization(__file__, 147, 15), 'isnot', match_call_result_29905, None_29906)
        
        # Assigning a type to the variable 'stypy_return_type' (line 147)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 147, 8), 'stypy_return_type', result_is_not_29907)
        
        # ################# End of '_is_AthlonK6(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_AthlonK6' in the type store
        # Getting the type of 'stypy_return_type' (line 146)
        stypy_return_type_29908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_29908)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_AthlonK6'
        return stypy_return_type_29908


    @norecursion
    def _is_AthlonK7(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_AthlonK7'
        module_type_store = module_type_store.open_function_context('_is_AthlonK7', 149, 4, False)
        # Assigning a type to the variable 'self' (line 150)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 150, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._is_AthlonK7.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._is_AthlonK7.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._is_AthlonK7.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._is_AthlonK7.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._is_AthlonK7')
        LinuxCPUInfo._is_AthlonK7.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._is_AthlonK7.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._is_AthlonK7.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._is_AthlonK7.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._is_AthlonK7.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._is_AthlonK7.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._is_AthlonK7.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._is_AthlonK7', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_AthlonK7', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_AthlonK7(...)' code ##################

        
        
        # Call to match(...): (line 150)
        # Processing the call arguments (line 150)
        str_29911 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 150, 24), 'str', '.*?AMD-K7')
        
        # Obtaining the type of the subscript
        str_29912 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 150, 51), 'str', 'model name')
        
        # Obtaining the type of the subscript
        int_29913 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 150, 48), 'int')
        # Getting the type of 'self' (line 150)
        self_29914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 150, 38), 'self', False)
        # Obtaining the member 'info' of a type (line 150)
        info_29915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 150, 38), self_29914, 'info')
        # Obtaining the member '__getitem__' of a type (line 150)
        getitem___29916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 150, 38), info_29915, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 150)
        subscript_call_result_29917 = invoke(stypy.reporting.localization.Localization(__file__, 150, 38), getitem___29916, int_29913)
        
        # Obtaining the member '__getitem__' of a type (line 150)
        getitem___29918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 150, 38), subscript_call_result_29917, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 150)
        subscript_call_result_29919 = invoke(stypy.reporting.localization.Localization(__file__, 150, 38), getitem___29918, str_29912)
        
        # Processing the call keyword arguments (line 150)
        kwargs_29920 = {}
        # Getting the type of 're' (line 150)
        re_29909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 150, 15), 're', False)
        # Obtaining the member 'match' of a type (line 150)
        match_29910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 150, 15), re_29909, 'match')
        # Calling match(args, kwargs) (line 150)
        match_call_result_29921 = invoke(stypy.reporting.localization.Localization(__file__, 150, 15), match_29910, *[str_29911, subscript_call_result_29919], **kwargs_29920)
        
        # Getting the type of 'None' (line 150)
        None_29922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 150, 73), 'None')
        # Applying the binary operator 'isnot' (line 150)
        result_is_not_29923 = python_operator(stypy.reporting.localization.Localization(__file__, 150, 15), 'isnot', match_call_result_29921, None_29922)
        
        # Assigning a type to the variable 'stypy_return_type' (line 150)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 150, 8), 'stypy_return_type', result_is_not_29923)
        
        # ################# End of '_is_AthlonK7(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_AthlonK7' in the type store
        # Getting the type of 'stypy_return_type' (line 149)
        stypy_return_type_29924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 149, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_29924)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_AthlonK7'
        return stypy_return_type_29924


    @norecursion
    def _is_AthlonMP(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_AthlonMP'
        module_type_store = module_type_store.open_function_context('_is_AthlonMP', 152, 4, False)
        # Assigning a type to the variable 'self' (line 153)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 153, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._is_AthlonMP.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._is_AthlonMP.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._is_AthlonMP.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._is_AthlonMP.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._is_AthlonMP')
        LinuxCPUInfo._is_AthlonMP.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._is_AthlonMP.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._is_AthlonMP.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._is_AthlonMP.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._is_AthlonMP.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._is_AthlonMP.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._is_AthlonMP.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._is_AthlonMP', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_AthlonMP', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_AthlonMP(...)' code ##################

        
        
        # Call to match(...): (line 153)
        # Processing the call arguments (line 153)
        str_29927 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 153, 24), 'str', '.*?Athlon\\(tm\\) MP\\b')
        
        # Obtaining the type of the subscript
        str_29928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 154, 37), 'str', 'model name')
        
        # Obtaining the type of the subscript
        int_29929 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 154, 34), 'int')
        # Getting the type of 'self' (line 154)
        self_29930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 24), 'self', False)
        # Obtaining the member 'info' of a type (line 154)
        info_29931 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 154, 24), self_29930, 'info')
        # Obtaining the member '__getitem__' of a type (line 154)
        getitem___29932 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 154, 24), info_29931, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 154)
        subscript_call_result_29933 = invoke(stypy.reporting.localization.Localization(__file__, 154, 24), getitem___29932, int_29929)
        
        # Obtaining the member '__getitem__' of a type (line 154)
        getitem___29934 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 154, 24), subscript_call_result_29933, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 154)
        subscript_call_result_29935 = invoke(stypy.reporting.localization.Localization(__file__, 154, 24), getitem___29934, str_29928)
        
        # Processing the call keyword arguments (line 153)
        kwargs_29936 = {}
        # Getting the type of 're' (line 153)
        re_29925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 15), 're', False)
        # Obtaining the member 'match' of a type (line 153)
        match_29926 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 153, 15), re_29925, 'match')
        # Calling match(args, kwargs) (line 153)
        match_call_result_29937 = invoke(stypy.reporting.localization.Localization(__file__, 153, 15), match_29926, *[str_29927, subscript_call_result_29935], **kwargs_29936)
        
        # Getting the type of 'None' (line 154)
        None_29938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 59), 'None')
        # Applying the binary operator 'isnot' (line 153)
        result_is_not_29939 = python_operator(stypy.reporting.localization.Localization(__file__, 153, 15), 'isnot', match_call_result_29937, None_29938)
        
        # Assigning a type to the variable 'stypy_return_type' (line 153)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 153, 8), 'stypy_return_type', result_is_not_29939)
        
        # ################# End of '_is_AthlonMP(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_AthlonMP' in the type store
        # Getting the type of 'stypy_return_type' (line 152)
        stypy_return_type_29940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_29940)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_AthlonMP'
        return stypy_return_type_29940


    @norecursion
    def _is_AMD64(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_AMD64'
        module_type_store = module_type_store.open_function_context('_is_AMD64', 156, 4, False)
        # Assigning a type to the variable 'self' (line 157)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 157, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._is_AMD64.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._is_AMD64.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._is_AMD64.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._is_AMD64.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._is_AMD64')
        LinuxCPUInfo._is_AMD64.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._is_AMD64.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._is_AMD64.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._is_AMD64.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._is_AMD64.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._is_AMD64.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._is_AMD64.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._is_AMD64', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_AMD64', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_AMD64(...)' code ##################

        
        # Evaluating a boolean operation
        
        # Call to is_AMD(...): (line 157)
        # Processing the call keyword arguments (line 157)
        kwargs_29943 = {}
        # Getting the type of 'self' (line 157)
        self_29941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 157, 15), 'self', False)
        # Obtaining the member 'is_AMD' of a type (line 157)
        is_AMD_29942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 157, 15), self_29941, 'is_AMD')
        # Calling is_AMD(args, kwargs) (line 157)
        is_AMD_call_result_29944 = invoke(stypy.reporting.localization.Localization(__file__, 157, 15), is_AMD_29942, *[], **kwargs_29943)
        
        
        
        # Obtaining the type of the subscript
        str_29945 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 157, 46), 'str', 'family')
        
        # Obtaining the type of the subscript
        int_29946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 157, 43), 'int')
        # Getting the type of 'self' (line 157)
        self_29947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 157, 33), 'self')
        # Obtaining the member 'info' of a type (line 157)
        info_29948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 157, 33), self_29947, 'info')
        # Obtaining the member '__getitem__' of a type (line 157)
        getitem___29949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 157, 33), info_29948, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 157)
        subscript_call_result_29950 = invoke(stypy.reporting.localization.Localization(__file__, 157, 33), getitem___29949, int_29946)
        
        # Obtaining the member '__getitem__' of a type (line 157)
        getitem___29951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 157, 33), subscript_call_result_29950, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 157)
        subscript_call_result_29952 = invoke(stypy.reporting.localization.Localization(__file__, 157, 33), getitem___29951, str_29945)
        
        str_29953 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 157, 59), 'str', '15')
        # Applying the binary operator '==' (line 157)
        result_eq_29954 = python_operator(stypy.reporting.localization.Localization(__file__, 157, 33), '==', subscript_call_result_29952, str_29953)
        
        # Applying the binary operator 'and' (line 157)
        result_and_keyword_29955 = python_operator(stypy.reporting.localization.Localization(__file__, 157, 15), 'and', is_AMD_call_result_29944, result_eq_29954)
        
        # Assigning a type to the variable 'stypy_return_type' (line 157)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 157, 8), 'stypy_return_type', result_and_keyword_29955)
        
        # ################# End of '_is_AMD64(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_AMD64' in the type store
        # Getting the type of 'stypy_return_type' (line 156)
        stypy_return_type_29956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_29956)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_AMD64'
        return stypy_return_type_29956


    @norecursion
    def _is_Athlon64(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_Athlon64'
        module_type_store = module_type_store.open_function_context('_is_Athlon64', 159, 4, False)
        # Assigning a type to the variable 'self' (line 160)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 160, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._is_Athlon64.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._is_Athlon64.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._is_Athlon64.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._is_Athlon64.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._is_Athlon64')
        LinuxCPUInfo._is_Athlon64.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._is_Athlon64.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._is_Athlon64.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._is_Athlon64.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._is_Athlon64.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._is_Athlon64.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._is_Athlon64.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._is_Athlon64', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_Athlon64', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_Athlon64(...)' code ##################

        
        
        # Call to match(...): (line 160)
        # Processing the call arguments (line 160)
        str_29959 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 160, 24), 'str', '.*?Athlon\\(tm\\) 64\\b')
        
        # Obtaining the type of the subscript
        str_29960 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 161, 37), 'str', 'model name')
        
        # Obtaining the type of the subscript
        int_29961 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 161, 34), 'int')
        # Getting the type of 'self' (line 161)
        self_29962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 24), 'self', False)
        # Obtaining the member 'info' of a type (line 161)
        info_29963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 161, 24), self_29962, 'info')
        # Obtaining the member '__getitem__' of a type (line 161)
        getitem___29964 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 161, 24), info_29963, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 161)
        subscript_call_result_29965 = invoke(stypy.reporting.localization.Localization(__file__, 161, 24), getitem___29964, int_29961)
        
        # Obtaining the member '__getitem__' of a type (line 161)
        getitem___29966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 161, 24), subscript_call_result_29965, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 161)
        subscript_call_result_29967 = invoke(stypy.reporting.localization.Localization(__file__, 161, 24), getitem___29966, str_29960)
        
        # Processing the call keyword arguments (line 160)
        kwargs_29968 = {}
        # Getting the type of 're' (line 160)
        re_29957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 160, 15), 're', False)
        # Obtaining the member 'match' of a type (line 160)
        match_29958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 160, 15), re_29957, 'match')
        # Calling match(args, kwargs) (line 160)
        match_call_result_29969 = invoke(stypy.reporting.localization.Localization(__file__, 160, 15), match_29958, *[str_29959, subscript_call_result_29967], **kwargs_29968)
        
        # Getting the type of 'None' (line 161)
        None_29970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 59), 'None')
        # Applying the binary operator 'isnot' (line 160)
        result_is_not_29971 = python_operator(stypy.reporting.localization.Localization(__file__, 160, 15), 'isnot', match_call_result_29969, None_29970)
        
        # Assigning a type to the variable 'stypy_return_type' (line 160)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 160, 8), 'stypy_return_type', result_is_not_29971)
        
        # ################# End of '_is_Athlon64(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_Athlon64' in the type store
        # Getting the type of 'stypy_return_type' (line 159)
        stypy_return_type_29972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_29972)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_Athlon64'
        return stypy_return_type_29972


    @norecursion
    def _is_AthlonHX(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_AthlonHX'
        module_type_store = module_type_store.open_function_context('_is_AthlonHX', 163, 4, False)
        # Assigning a type to the variable 'self' (line 164)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 164, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._is_AthlonHX.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._is_AthlonHX.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._is_AthlonHX.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._is_AthlonHX.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._is_AthlonHX')
        LinuxCPUInfo._is_AthlonHX.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._is_AthlonHX.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._is_AthlonHX.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._is_AthlonHX.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._is_AthlonHX.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._is_AthlonHX.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._is_AthlonHX.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._is_AthlonHX', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_AthlonHX', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_AthlonHX(...)' code ##################

        
        
        # Call to match(...): (line 164)
        # Processing the call arguments (line 164)
        str_29975 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 164, 24), 'str', '.*?Athlon HX\\b')
        
        # Obtaining the type of the subscript
        str_29976 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 165, 37), 'str', 'model name')
        
        # Obtaining the type of the subscript
        int_29977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 165, 34), 'int')
        # Getting the type of 'self' (line 165)
        self_29978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 24), 'self', False)
        # Obtaining the member 'info' of a type (line 165)
        info_29979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 165, 24), self_29978, 'info')
        # Obtaining the member '__getitem__' of a type (line 165)
        getitem___29980 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 165, 24), info_29979, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 165)
        subscript_call_result_29981 = invoke(stypy.reporting.localization.Localization(__file__, 165, 24), getitem___29980, int_29977)
        
        # Obtaining the member '__getitem__' of a type (line 165)
        getitem___29982 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 165, 24), subscript_call_result_29981, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 165)
        subscript_call_result_29983 = invoke(stypy.reporting.localization.Localization(__file__, 165, 24), getitem___29982, str_29976)
        
        # Processing the call keyword arguments (line 164)
        kwargs_29984 = {}
        # Getting the type of 're' (line 164)
        re_29973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 15), 're', False)
        # Obtaining the member 'match' of a type (line 164)
        match_29974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 164, 15), re_29973, 'match')
        # Calling match(args, kwargs) (line 164)
        match_call_result_29985 = invoke(stypy.reporting.localization.Localization(__file__, 164, 15), match_29974, *[str_29975, subscript_call_result_29983], **kwargs_29984)
        
        # Getting the type of 'None' (line 165)
        None_29986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 59), 'None')
        # Applying the binary operator 'isnot' (line 164)
        result_is_not_29987 = python_operator(stypy.reporting.localization.Localization(__file__, 164, 15), 'isnot', match_call_result_29985, None_29986)
        
        # Assigning a type to the variable 'stypy_return_type' (line 164)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 164, 8), 'stypy_return_type', result_is_not_29987)
        
        # ################# End of '_is_AthlonHX(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_AthlonHX' in the type store
        # Getting the type of 'stypy_return_type' (line 163)
        stypy_return_type_29988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 163, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_29988)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_AthlonHX'
        return stypy_return_type_29988


    @norecursion
    def _is_Opteron(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_Opteron'
        module_type_store = module_type_store.open_function_context('_is_Opteron', 167, 4, False)
        # Assigning a type to the variable 'self' (line 168)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 168, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._is_Opteron.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._is_Opteron.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._is_Opteron.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._is_Opteron.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._is_Opteron')
        LinuxCPUInfo._is_Opteron.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._is_Opteron.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._is_Opteron.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._is_Opteron.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._is_Opteron.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._is_Opteron.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._is_Opteron.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._is_Opteron', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_Opteron', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_Opteron(...)' code ##################

        
        
        # Call to match(...): (line 168)
        # Processing the call arguments (line 168)
        str_29991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 168, 24), 'str', '.*?Opteron\\b')
        
        # Obtaining the type of the subscript
        str_29992 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 169, 37), 'str', 'model name')
        
        # Obtaining the type of the subscript
        int_29993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 169, 34), 'int')
        # Getting the type of 'self' (line 169)
        self_29994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 24), 'self', False)
        # Obtaining the member 'info' of a type (line 169)
        info_29995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 169, 24), self_29994, 'info')
        # Obtaining the member '__getitem__' of a type (line 169)
        getitem___29996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 169, 24), info_29995, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 169)
        subscript_call_result_29997 = invoke(stypy.reporting.localization.Localization(__file__, 169, 24), getitem___29996, int_29993)
        
        # Obtaining the member '__getitem__' of a type (line 169)
        getitem___29998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 169, 24), subscript_call_result_29997, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 169)
        subscript_call_result_29999 = invoke(stypy.reporting.localization.Localization(__file__, 169, 24), getitem___29998, str_29992)
        
        # Processing the call keyword arguments (line 168)
        kwargs_30000 = {}
        # Getting the type of 're' (line 168)
        re_29989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 15), 're', False)
        # Obtaining the member 'match' of a type (line 168)
        match_29990 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 168, 15), re_29989, 'match')
        # Calling match(args, kwargs) (line 168)
        match_call_result_30001 = invoke(stypy.reporting.localization.Localization(__file__, 168, 15), match_29990, *[str_29991, subscript_call_result_29999], **kwargs_30000)
        
        # Getting the type of 'None' (line 169)
        None_30002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 59), 'None')
        # Applying the binary operator 'isnot' (line 168)
        result_is_not_30003 = python_operator(stypy.reporting.localization.Localization(__file__, 168, 15), 'isnot', match_call_result_30001, None_30002)
        
        # Assigning a type to the variable 'stypy_return_type' (line 168)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 168, 8), 'stypy_return_type', result_is_not_30003)
        
        # ################# End of '_is_Opteron(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_Opteron' in the type store
        # Getting the type of 'stypy_return_type' (line 167)
        stypy_return_type_30004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 167, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30004)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_Opteron'
        return stypy_return_type_30004


    @norecursion
    def _is_Hammer(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_Hammer'
        module_type_store = module_type_store.open_function_context('_is_Hammer', 171, 4, False)
        # Assigning a type to the variable 'self' (line 172)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 172, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._is_Hammer.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._is_Hammer.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._is_Hammer.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._is_Hammer.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._is_Hammer')
        LinuxCPUInfo._is_Hammer.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._is_Hammer.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._is_Hammer.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._is_Hammer.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._is_Hammer.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._is_Hammer.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._is_Hammer.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._is_Hammer', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_Hammer', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_Hammer(...)' code ##################

        
        
        # Call to match(...): (line 172)
        # Processing the call arguments (line 172)
        str_30007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 172, 24), 'str', '.*?Hammer\\b')
        
        # Obtaining the type of the subscript
        str_30008 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 173, 37), 'str', 'model name')
        
        # Obtaining the type of the subscript
        int_30009 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 173, 34), 'int')
        # Getting the type of 'self' (line 173)
        self_30010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 24), 'self', False)
        # Obtaining the member 'info' of a type (line 173)
        info_30011 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 173, 24), self_30010, 'info')
        # Obtaining the member '__getitem__' of a type (line 173)
        getitem___30012 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 173, 24), info_30011, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 173)
        subscript_call_result_30013 = invoke(stypy.reporting.localization.Localization(__file__, 173, 24), getitem___30012, int_30009)
        
        # Obtaining the member '__getitem__' of a type (line 173)
        getitem___30014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 173, 24), subscript_call_result_30013, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 173)
        subscript_call_result_30015 = invoke(stypy.reporting.localization.Localization(__file__, 173, 24), getitem___30014, str_30008)
        
        # Processing the call keyword arguments (line 172)
        kwargs_30016 = {}
        # Getting the type of 're' (line 172)
        re_30005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 15), 're', False)
        # Obtaining the member 'match' of a type (line 172)
        match_30006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 172, 15), re_30005, 'match')
        # Calling match(args, kwargs) (line 172)
        match_call_result_30017 = invoke(stypy.reporting.localization.Localization(__file__, 172, 15), match_30006, *[str_30007, subscript_call_result_30015], **kwargs_30016)
        
        # Getting the type of 'None' (line 173)
        None_30018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 59), 'None')
        # Applying the binary operator 'isnot' (line 172)
        result_is_not_30019 = python_operator(stypy.reporting.localization.Localization(__file__, 172, 15), 'isnot', match_call_result_30017, None_30018)
        
        # Assigning a type to the variable 'stypy_return_type' (line 172)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 172, 8), 'stypy_return_type', result_is_not_30019)
        
        # ################# End of '_is_Hammer(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_Hammer' in the type store
        # Getting the type of 'stypy_return_type' (line 171)
        stypy_return_type_30020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30020)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_Hammer'
        return stypy_return_type_30020


    @norecursion
    def _is_Alpha(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_Alpha'
        module_type_store = module_type_store.open_function_context('_is_Alpha', 177, 4, False)
        # Assigning a type to the variable 'self' (line 178)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 178, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._is_Alpha.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._is_Alpha.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._is_Alpha.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._is_Alpha.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._is_Alpha')
        LinuxCPUInfo._is_Alpha.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._is_Alpha.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._is_Alpha.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._is_Alpha.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._is_Alpha.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._is_Alpha.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._is_Alpha.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._is_Alpha', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_Alpha', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_Alpha(...)' code ##################

        
        
        # Obtaining the type of the subscript
        str_30021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 178, 28), 'str', 'cpu')
        
        # Obtaining the type of the subscript
        int_30022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 178, 25), 'int')
        # Getting the type of 'self' (line 178)
        self_30023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 178, 15), 'self')
        # Obtaining the member 'info' of a type (line 178)
        info_30024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 178, 15), self_30023, 'info')
        # Obtaining the member '__getitem__' of a type (line 178)
        getitem___30025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 178, 15), info_30024, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 178)
        subscript_call_result_30026 = invoke(stypy.reporting.localization.Localization(__file__, 178, 15), getitem___30025, int_30022)
        
        # Obtaining the member '__getitem__' of a type (line 178)
        getitem___30027 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 178, 15), subscript_call_result_30026, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 178)
        subscript_call_result_30028 = invoke(stypy.reporting.localization.Localization(__file__, 178, 15), getitem___30027, str_30021)
        
        str_30029 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 178, 36), 'str', 'Alpha')
        # Applying the binary operator '==' (line 178)
        result_eq_30030 = python_operator(stypy.reporting.localization.Localization(__file__, 178, 15), '==', subscript_call_result_30028, str_30029)
        
        # Assigning a type to the variable 'stypy_return_type' (line 178)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 178, 8), 'stypy_return_type', result_eq_30030)
        
        # ################# End of '_is_Alpha(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_Alpha' in the type store
        # Getting the type of 'stypy_return_type' (line 177)
        stypy_return_type_30031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 177, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30031)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_Alpha'
        return stypy_return_type_30031


    @norecursion
    def _is_EV4(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_EV4'
        module_type_store = module_type_store.open_function_context('_is_EV4', 180, 4, False)
        # Assigning a type to the variable 'self' (line 181)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 181, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._is_EV4.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._is_EV4.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._is_EV4.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._is_EV4.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._is_EV4')
        LinuxCPUInfo._is_EV4.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._is_EV4.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._is_EV4.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._is_EV4.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._is_EV4.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._is_EV4.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._is_EV4.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._is_EV4', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_EV4', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_EV4(...)' code ##################

        
        # Evaluating a boolean operation
        
        # Call to is_Alpha(...): (line 181)
        # Processing the call keyword arguments (line 181)
        kwargs_30034 = {}
        # Getting the type of 'self' (line 181)
        self_30032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 181, 15), 'self', False)
        # Obtaining the member 'is_Alpha' of a type (line 181)
        is_Alpha_30033 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 181, 15), self_30032, 'is_Alpha')
        # Calling is_Alpha(args, kwargs) (line 181)
        is_Alpha_call_result_30035 = invoke(stypy.reporting.localization.Localization(__file__, 181, 15), is_Alpha_30033, *[], **kwargs_30034)
        
        
        
        # Obtaining the type of the subscript
        str_30036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 181, 48), 'str', 'cpu model')
        
        # Obtaining the type of the subscript
        int_30037 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 181, 45), 'int')
        # Getting the type of 'self' (line 181)
        self_30038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 181, 35), 'self')
        # Obtaining the member 'info' of a type (line 181)
        info_30039 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 181, 35), self_30038, 'info')
        # Obtaining the member '__getitem__' of a type (line 181)
        getitem___30040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 181, 35), info_30039, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 181)
        subscript_call_result_30041 = invoke(stypy.reporting.localization.Localization(__file__, 181, 35), getitem___30040, int_30037)
        
        # Obtaining the member '__getitem__' of a type (line 181)
        getitem___30042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 181, 35), subscript_call_result_30041, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 181)
        subscript_call_result_30043 = invoke(stypy.reporting.localization.Localization(__file__, 181, 35), getitem___30042, str_30036)
        
        str_30044 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 181, 64), 'str', 'EV4')
        # Applying the binary operator '==' (line 181)
        result_eq_30045 = python_operator(stypy.reporting.localization.Localization(__file__, 181, 35), '==', subscript_call_result_30043, str_30044)
        
        # Applying the binary operator 'and' (line 181)
        result_and_keyword_30046 = python_operator(stypy.reporting.localization.Localization(__file__, 181, 15), 'and', is_Alpha_call_result_30035, result_eq_30045)
        
        # Assigning a type to the variable 'stypy_return_type' (line 181)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 181, 8), 'stypy_return_type', result_and_keyword_30046)
        
        # ################# End of '_is_EV4(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_EV4' in the type store
        # Getting the type of 'stypy_return_type' (line 180)
        stypy_return_type_30047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 180, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30047)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_EV4'
        return stypy_return_type_30047


    @norecursion
    def _is_EV5(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_EV5'
        module_type_store = module_type_store.open_function_context('_is_EV5', 183, 4, False)
        # Assigning a type to the variable 'self' (line 184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 184, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._is_EV5.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._is_EV5.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._is_EV5.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._is_EV5.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._is_EV5')
        LinuxCPUInfo._is_EV5.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._is_EV5.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._is_EV5.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._is_EV5.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._is_EV5.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._is_EV5.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._is_EV5.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._is_EV5', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_EV5', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_EV5(...)' code ##################

        
        # Evaluating a boolean operation
        
        # Call to is_Alpha(...): (line 184)
        # Processing the call keyword arguments (line 184)
        kwargs_30050 = {}
        # Getting the type of 'self' (line 184)
        self_30048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 184, 15), 'self', False)
        # Obtaining the member 'is_Alpha' of a type (line 184)
        is_Alpha_30049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 184, 15), self_30048, 'is_Alpha')
        # Calling is_Alpha(args, kwargs) (line 184)
        is_Alpha_call_result_30051 = invoke(stypy.reporting.localization.Localization(__file__, 184, 15), is_Alpha_30049, *[], **kwargs_30050)
        
        
        
        # Obtaining the type of the subscript
        str_30052 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 184, 48), 'str', 'cpu model')
        
        # Obtaining the type of the subscript
        int_30053 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 184, 45), 'int')
        # Getting the type of 'self' (line 184)
        self_30054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 184, 35), 'self')
        # Obtaining the member 'info' of a type (line 184)
        info_30055 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 184, 35), self_30054, 'info')
        # Obtaining the member '__getitem__' of a type (line 184)
        getitem___30056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 184, 35), info_30055, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 184)
        subscript_call_result_30057 = invoke(stypy.reporting.localization.Localization(__file__, 184, 35), getitem___30056, int_30053)
        
        # Obtaining the member '__getitem__' of a type (line 184)
        getitem___30058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 184, 35), subscript_call_result_30057, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 184)
        subscript_call_result_30059 = invoke(stypy.reporting.localization.Localization(__file__, 184, 35), getitem___30058, str_30052)
        
        str_30060 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 184, 64), 'str', 'EV5')
        # Applying the binary operator '==' (line 184)
        result_eq_30061 = python_operator(stypy.reporting.localization.Localization(__file__, 184, 35), '==', subscript_call_result_30059, str_30060)
        
        # Applying the binary operator 'and' (line 184)
        result_and_keyword_30062 = python_operator(stypy.reporting.localization.Localization(__file__, 184, 15), 'and', is_Alpha_call_result_30051, result_eq_30061)
        
        # Assigning a type to the variable 'stypy_return_type' (line 184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 184, 8), 'stypy_return_type', result_and_keyword_30062)
        
        # ################# End of '_is_EV5(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_EV5' in the type store
        # Getting the type of 'stypy_return_type' (line 183)
        stypy_return_type_30063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30063)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_EV5'
        return stypy_return_type_30063


    @norecursion
    def _is_EV56(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_EV56'
        module_type_store = module_type_store.open_function_context('_is_EV56', 186, 4, False)
        # Assigning a type to the variable 'self' (line 187)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 187, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._is_EV56.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._is_EV56.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._is_EV56.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._is_EV56.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._is_EV56')
        LinuxCPUInfo._is_EV56.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._is_EV56.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._is_EV56.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._is_EV56.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._is_EV56.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._is_EV56.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._is_EV56.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._is_EV56', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_EV56', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_EV56(...)' code ##################

        
        # Evaluating a boolean operation
        
        # Call to is_Alpha(...): (line 187)
        # Processing the call keyword arguments (line 187)
        kwargs_30066 = {}
        # Getting the type of 'self' (line 187)
        self_30064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 187, 15), 'self', False)
        # Obtaining the member 'is_Alpha' of a type (line 187)
        is_Alpha_30065 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 187, 15), self_30064, 'is_Alpha')
        # Calling is_Alpha(args, kwargs) (line 187)
        is_Alpha_call_result_30067 = invoke(stypy.reporting.localization.Localization(__file__, 187, 15), is_Alpha_30065, *[], **kwargs_30066)
        
        
        
        # Obtaining the type of the subscript
        str_30068 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 187, 48), 'str', 'cpu model')
        
        # Obtaining the type of the subscript
        int_30069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 187, 45), 'int')
        # Getting the type of 'self' (line 187)
        self_30070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 187, 35), 'self')
        # Obtaining the member 'info' of a type (line 187)
        info_30071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 187, 35), self_30070, 'info')
        # Obtaining the member '__getitem__' of a type (line 187)
        getitem___30072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 187, 35), info_30071, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 187)
        subscript_call_result_30073 = invoke(stypy.reporting.localization.Localization(__file__, 187, 35), getitem___30072, int_30069)
        
        # Obtaining the member '__getitem__' of a type (line 187)
        getitem___30074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 187, 35), subscript_call_result_30073, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 187)
        subscript_call_result_30075 = invoke(stypy.reporting.localization.Localization(__file__, 187, 35), getitem___30074, str_30068)
        
        str_30076 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 187, 64), 'str', 'EV56')
        # Applying the binary operator '==' (line 187)
        result_eq_30077 = python_operator(stypy.reporting.localization.Localization(__file__, 187, 35), '==', subscript_call_result_30075, str_30076)
        
        # Applying the binary operator 'and' (line 187)
        result_and_keyword_30078 = python_operator(stypy.reporting.localization.Localization(__file__, 187, 15), 'and', is_Alpha_call_result_30067, result_eq_30077)
        
        # Assigning a type to the variable 'stypy_return_type' (line 187)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 187, 8), 'stypy_return_type', result_and_keyword_30078)
        
        # ################# End of '_is_EV56(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_EV56' in the type store
        # Getting the type of 'stypy_return_type' (line 186)
        stypy_return_type_30079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 186, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30079)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_EV56'
        return stypy_return_type_30079


    @norecursion
    def _is_PCA56(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_PCA56'
        module_type_store = module_type_store.open_function_context('_is_PCA56', 189, 4, False)
        # Assigning a type to the variable 'self' (line 190)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 190, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._is_PCA56.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._is_PCA56.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._is_PCA56.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._is_PCA56.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._is_PCA56')
        LinuxCPUInfo._is_PCA56.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._is_PCA56.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._is_PCA56.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._is_PCA56.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._is_PCA56.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._is_PCA56.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._is_PCA56.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._is_PCA56', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_PCA56', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_PCA56(...)' code ##################

        
        # Evaluating a boolean operation
        
        # Call to is_Alpha(...): (line 190)
        # Processing the call keyword arguments (line 190)
        kwargs_30082 = {}
        # Getting the type of 'self' (line 190)
        self_30080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 15), 'self', False)
        # Obtaining the member 'is_Alpha' of a type (line 190)
        is_Alpha_30081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 190, 15), self_30080, 'is_Alpha')
        # Calling is_Alpha(args, kwargs) (line 190)
        is_Alpha_call_result_30083 = invoke(stypy.reporting.localization.Localization(__file__, 190, 15), is_Alpha_30081, *[], **kwargs_30082)
        
        
        
        # Obtaining the type of the subscript
        str_30084 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 190, 48), 'str', 'cpu model')
        
        # Obtaining the type of the subscript
        int_30085 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 190, 45), 'int')
        # Getting the type of 'self' (line 190)
        self_30086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 35), 'self')
        # Obtaining the member 'info' of a type (line 190)
        info_30087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 190, 35), self_30086, 'info')
        # Obtaining the member '__getitem__' of a type (line 190)
        getitem___30088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 190, 35), info_30087, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 190)
        subscript_call_result_30089 = invoke(stypy.reporting.localization.Localization(__file__, 190, 35), getitem___30088, int_30085)
        
        # Obtaining the member '__getitem__' of a type (line 190)
        getitem___30090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 190, 35), subscript_call_result_30089, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 190)
        subscript_call_result_30091 = invoke(stypy.reporting.localization.Localization(__file__, 190, 35), getitem___30090, str_30084)
        
        str_30092 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 190, 64), 'str', 'PCA56')
        # Applying the binary operator '==' (line 190)
        result_eq_30093 = python_operator(stypy.reporting.localization.Localization(__file__, 190, 35), '==', subscript_call_result_30091, str_30092)
        
        # Applying the binary operator 'and' (line 190)
        result_and_keyword_30094 = python_operator(stypy.reporting.localization.Localization(__file__, 190, 15), 'and', is_Alpha_call_result_30083, result_eq_30093)
        
        # Assigning a type to the variable 'stypy_return_type' (line 190)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 190, 8), 'stypy_return_type', result_and_keyword_30094)
        
        # ################# End of '_is_PCA56(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_PCA56' in the type store
        # Getting the type of 'stypy_return_type' (line 189)
        stypy_return_type_30095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 189, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30095)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_PCA56'
        return stypy_return_type_30095

    
    # Assigning a Name to a Name (line 195):

    @norecursion
    def _is_Intel(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_Intel'
        module_type_store = module_type_store.open_function_context('_is_Intel', 197, 4, False)
        # Assigning a type to the variable 'self' (line 198)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 198, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._is_Intel.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._is_Intel.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._is_Intel.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._is_Intel.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._is_Intel')
        LinuxCPUInfo._is_Intel.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._is_Intel.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._is_Intel.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._is_Intel.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._is_Intel.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._is_Intel.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._is_Intel.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._is_Intel', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_Intel', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_Intel(...)' code ##################

        
        
        # Obtaining the type of the subscript
        str_30096 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 198, 28), 'str', 'vendor_id')
        
        # Obtaining the type of the subscript
        int_30097 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 198, 25), 'int')
        # Getting the type of 'self' (line 198)
        self_30098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 15), 'self')
        # Obtaining the member 'info' of a type (line 198)
        info_30099 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 198, 15), self_30098, 'info')
        # Obtaining the member '__getitem__' of a type (line 198)
        getitem___30100 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 198, 15), info_30099, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 198)
        subscript_call_result_30101 = invoke(stypy.reporting.localization.Localization(__file__, 198, 15), getitem___30100, int_30097)
        
        # Obtaining the member '__getitem__' of a type (line 198)
        getitem___30102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 198, 15), subscript_call_result_30101, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 198)
        subscript_call_result_30103 = invoke(stypy.reporting.localization.Localization(__file__, 198, 15), getitem___30102, str_30096)
        
        str_30104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 198, 42), 'str', 'GenuineIntel')
        # Applying the binary operator '==' (line 198)
        result_eq_30105 = python_operator(stypy.reporting.localization.Localization(__file__, 198, 15), '==', subscript_call_result_30103, str_30104)
        
        # Assigning a type to the variable 'stypy_return_type' (line 198)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 198, 8), 'stypy_return_type', result_eq_30105)
        
        # ################# End of '_is_Intel(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_Intel' in the type store
        # Getting the type of 'stypy_return_type' (line 197)
        stypy_return_type_30106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 197, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30106)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_Intel'
        return stypy_return_type_30106


    @norecursion
    def _is_i486(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_i486'
        module_type_store = module_type_store.open_function_context('_is_i486', 200, 4, False)
        # Assigning a type to the variable 'self' (line 201)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 201, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._is_i486.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._is_i486.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._is_i486.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._is_i486.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._is_i486')
        LinuxCPUInfo._is_i486.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._is_i486.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._is_i486.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._is_i486.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._is_i486.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._is_i486.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._is_i486.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._is_i486', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_i486', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_i486(...)' code ##################

        
        
        # Obtaining the type of the subscript
        str_30107 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 201, 28), 'str', 'cpu')
        
        # Obtaining the type of the subscript
        int_30108 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 201, 25), 'int')
        # Getting the type of 'self' (line 201)
        self_30109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 15), 'self')
        # Obtaining the member 'info' of a type (line 201)
        info_30110 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 201, 15), self_30109, 'info')
        # Obtaining the member '__getitem__' of a type (line 201)
        getitem___30111 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 201, 15), info_30110, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 201)
        subscript_call_result_30112 = invoke(stypy.reporting.localization.Localization(__file__, 201, 15), getitem___30111, int_30108)
        
        # Obtaining the member '__getitem__' of a type (line 201)
        getitem___30113 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 201, 15), subscript_call_result_30112, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 201)
        subscript_call_result_30114 = invoke(stypy.reporting.localization.Localization(__file__, 201, 15), getitem___30113, str_30107)
        
        str_30115 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 201, 36), 'str', 'i486')
        # Applying the binary operator '==' (line 201)
        result_eq_30116 = python_operator(stypy.reporting.localization.Localization(__file__, 201, 15), '==', subscript_call_result_30114, str_30115)
        
        # Assigning a type to the variable 'stypy_return_type' (line 201)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 201, 8), 'stypy_return_type', result_eq_30116)
        
        # ################# End of '_is_i486(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_i486' in the type store
        # Getting the type of 'stypy_return_type' (line 200)
        stypy_return_type_30117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 200, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30117)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_i486'
        return stypy_return_type_30117


    @norecursion
    def _is_i586(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_i586'
        module_type_store = module_type_store.open_function_context('_is_i586', 203, 4, False)
        # Assigning a type to the variable 'self' (line 204)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 204, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._is_i586.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._is_i586.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._is_i586.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._is_i586.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._is_i586')
        LinuxCPUInfo._is_i586.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._is_i586.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._is_i586.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._is_i586.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._is_i586.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._is_i586.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._is_i586.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._is_i586', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_i586', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_i586(...)' code ##################

        
        # Evaluating a boolean operation
        
        # Call to is_Intel(...): (line 204)
        # Processing the call keyword arguments (line 204)
        kwargs_30120 = {}
        # Getting the type of 'self' (line 204)
        self_30118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 15), 'self', False)
        # Obtaining the member 'is_Intel' of a type (line 204)
        is_Intel_30119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 204, 15), self_30118, 'is_Intel')
        # Calling is_Intel(args, kwargs) (line 204)
        is_Intel_call_result_30121 = invoke(stypy.reporting.localization.Localization(__file__, 204, 15), is_Intel_30119, *[], **kwargs_30120)
        
        
        
        # Obtaining the type of the subscript
        str_30122 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 204, 48), 'str', 'cpu family')
        
        # Obtaining the type of the subscript
        int_30123 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 204, 45), 'int')
        # Getting the type of 'self' (line 204)
        self_30124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 35), 'self')
        # Obtaining the member 'info' of a type (line 204)
        info_30125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 204, 35), self_30124, 'info')
        # Obtaining the member '__getitem__' of a type (line 204)
        getitem___30126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 204, 35), info_30125, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 204)
        subscript_call_result_30127 = invoke(stypy.reporting.localization.Localization(__file__, 204, 35), getitem___30126, int_30123)
        
        # Obtaining the member '__getitem__' of a type (line 204)
        getitem___30128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 204, 35), subscript_call_result_30127, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 204)
        subscript_call_result_30129 = invoke(stypy.reporting.localization.Localization(__file__, 204, 35), getitem___30128, str_30122)
        
        str_30130 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 204, 65), 'str', '5')
        # Applying the binary operator '==' (line 204)
        result_eq_30131 = python_operator(stypy.reporting.localization.Localization(__file__, 204, 35), '==', subscript_call_result_30129, str_30130)
        
        # Applying the binary operator 'and' (line 204)
        result_and_keyword_30132 = python_operator(stypy.reporting.localization.Localization(__file__, 204, 15), 'and', is_Intel_call_result_30121, result_eq_30131)
        
        # Assigning a type to the variable 'stypy_return_type' (line 204)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 204, 8), 'stypy_return_type', result_and_keyword_30132)
        
        # ################# End of '_is_i586(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_i586' in the type store
        # Getting the type of 'stypy_return_type' (line 203)
        stypy_return_type_30133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 203, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30133)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_i586'
        return stypy_return_type_30133


    @norecursion
    def _is_i686(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_i686'
        module_type_store = module_type_store.open_function_context('_is_i686', 206, 4, False)
        # Assigning a type to the variable 'self' (line 207)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 207, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._is_i686.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._is_i686.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._is_i686.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._is_i686.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._is_i686')
        LinuxCPUInfo._is_i686.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._is_i686.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._is_i686.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._is_i686.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._is_i686.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._is_i686.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._is_i686.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._is_i686', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_i686', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_i686(...)' code ##################

        
        # Evaluating a boolean operation
        
        # Call to is_Intel(...): (line 207)
        # Processing the call keyword arguments (line 207)
        kwargs_30136 = {}
        # Getting the type of 'self' (line 207)
        self_30134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 15), 'self', False)
        # Obtaining the member 'is_Intel' of a type (line 207)
        is_Intel_30135 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 207, 15), self_30134, 'is_Intel')
        # Calling is_Intel(args, kwargs) (line 207)
        is_Intel_call_result_30137 = invoke(stypy.reporting.localization.Localization(__file__, 207, 15), is_Intel_30135, *[], **kwargs_30136)
        
        
        
        # Obtaining the type of the subscript
        str_30138 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 207, 48), 'str', 'cpu family')
        
        # Obtaining the type of the subscript
        int_30139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 207, 45), 'int')
        # Getting the type of 'self' (line 207)
        self_30140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 35), 'self')
        # Obtaining the member 'info' of a type (line 207)
        info_30141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 207, 35), self_30140, 'info')
        # Obtaining the member '__getitem__' of a type (line 207)
        getitem___30142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 207, 35), info_30141, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 207)
        subscript_call_result_30143 = invoke(stypy.reporting.localization.Localization(__file__, 207, 35), getitem___30142, int_30139)
        
        # Obtaining the member '__getitem__' of a type (line 207)
        getitem___30144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 207, 35), subscript_call_result_30143, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 207)
        subscript_call_result_30145 = invoke(stypy.reporting.localization.Localization(__file__, 207, 35), getitem___30144, str_30138)
        
        str_30146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 207, 65), 'str', '6')
        # Applying the binary operator '==' (line 207)
        result_eq_30147 = python_operator(stypy.reporting.localization.Localization(__file__, 207, 35), '==', subscript_call_result_30145, str_30146)
        
        # Applying the binary operator 'and' (line 207)
        result_and_keyword_30148 = python_operator(stypy.reporting.localization.Localization(__file__, 207, 15), 'and', is_Intel_call_result_30137, result_eq_30147)
        
        # Assigning a type to the variable 'stypy_return_type' (line 207)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 207, 8), 'stypy_return_type', result_and_keyword_30148)
        
        # ################# End of '_is_i686(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_i686' in the type store
        # Getting the type of 'stypy_return_type' (line 206)
        stypy_return_type_30149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30149)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_i686'
        return stypy_return_type_30149


    @norecursion
    def _is_Celeron(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_Celeron'
        module_type_store = module_type_store.open_function_context('_is_Celeron', 209, 4, False)
        # Assigning a type to the variable 'self' (line 210)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 210, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._is_Celeron.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._is_Celeron.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._is_Celeron.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._is_Celeron.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._is_Celeron')
        LinuxCPUInfo._is_Celeron.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._is_Celeron.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._is_Celeron.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._is_Celeron.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._is_Celeron.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._is_Celeron.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._is_Celeron.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._is_Celeron', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_Celeron', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_Celeron(...)' code ##################

        
        
        # Call to match(...): (line 210)
        # Processing the call arguments (line 210)
        str_30152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 210, 24), 'str', '.*?Celeron')
        
        # Obtaining the type of the subscript
        str_30153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 211, 37), 'str', 'model name')
        
        # Obtaining the type of the subscript
        int_30154 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 211, 34), 'int')
        # Getting the type of 'self' (line 211)
        self_30155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 24), 'self', False)
        # Obtaining the member 'info' of a type (line 211)
        info_30156 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 211, 24), self_30155, 'info')
        # Obtaining the member '__getitem__' of a type (line 211)
        getitem___30157 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 211, 24), info_30156, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 211)
        subscript_call_result_30158 = invoke(stypy.reporting.localization.Localization(__file__, 211, 24), getitem___30157, int_30154)
        
        # Obtaining the member '__getitem__' of a type (line 211)
        getitem___30159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 211, 24), subscript_call_result_30158, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 211)
        subscript_call_result_30160 = invoke(stypy.reporting.localization.Localization(__file__, 211, 24), getitem___30159, str_30153)
        
        # Processing the call keyword arguments (line 210)
        kwargs_30161 = {}
        # Getting the type of 're' (line 210)
        re_30150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 15), 're', False)
        # Obtaining the member 'match' of a type (line 210)
        match_30151 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 210, 15), re_30150, 'match')
        # Calling match(args, kwargs) (line 210)
        match_call_result_30162 = invoke(stypy.reporting.localization.Localization(__file__, 210, 15), match_30151, *[str_30152, subscript_call_result_30160], **kwargs_30161)
        
        # Getting the type of 'None' (line 211)
        None_30163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 59), 'None')
        # Applying the binary operator 'isnot' (line 210)
        result_is_not_30164 = python_operator(stypy.reporting.localization.Localization(__file__, 210, 15), 'isnot', match_call_result_30162, None_30163)
        
        # Assigning a type to the variable 'stypy_return_type' (line 210)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 210, 8), 'stypy_return_type', result_is_not_30164)
        
        # ################# End of '_is_Celeron(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_Celeron' in the type store
        # Getting the type of 'stypy_return_type' (line 209)
        stypy_return_type_30165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30165)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_Celeron'
        return stypy_return_type_30165


    @norecursion
    def _is_Pentium(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_Pentium'
        module_type_store = module_type_store.open_function_context('_is_Pentium', 213, 4, False)
        # Assigning a type to the variable 'self' (line 214)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 214, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._is_Pentium.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._is_Pentium.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._is_Pentium.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._is_Pentium.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._is_Pentium')
        LinuxCPUInfo._is_Pentium.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._is_Pentium.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._is_Pentium.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._is_Pentium.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._is_Pentium.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._is_Pentium.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._is_Pentium.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._is_Pentium', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_Pentium', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_Pentium(...)' code ##################

        
        
        # Call to match(...): (line 214)
        # Processing the call arguments (line 214)
        str_30168 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 214, 24), 'str', '.*?Pentium')
        
        # Obtaining the type of the subscript
        str_30169 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 215, 37), 'str', 'model name')
        
        # Obtaining the type of the subscript
        int_30170 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 215, 34), 'int')
        # Getting the type of 'self' (line 215)
        self_30171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 24), 'self', False)
        # Obtaining the member 'info' of a type (line 215)
        info_30172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 215, 24), self_30171, 'info')
        # Obtaining the member '__getitem__' of a type (line 215)
        getitem___30173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 215, 24), info_30172, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 215)
        subscript_call_result_30174 = invoke(stypy.reporting.localization.Localization(__file__, 215, 24), getitem___30173, int_30170)
        
        # Obtaining the member '__getitem__' of a type (line 215)
        getitem___30175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 215, 24), subscript_call_result_30174, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 215)
        subscript_call_result_30176 = invoke(stypy.reporting.localization.Localization(__file__, 215, 24), getitem___30175, str_30169)
        
        # Processing the call keyword arguments (line 214)
        kwargs_30177 = {}
        # Getting the type of 're' (line 214)
        re_30166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 15), 're', False)
        # Obtaining the member 'match' of a type (line 214)
        match_30167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 214, 15), re_30166, 'match')
        # Calling match(args, kwargs) (line 214)
        match_call_result_30178 = invoke(stypy.reporting.localization.Localization(__file__, 214, 15), match_30167, *[str_30168, subscript_call_result_30176], **kwargs_30177)
        
        # Getting the type of 'None' (line 215)
        None_30179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 59), 'None')
        # Applying the binary operator 'isnot' (line 214)
        result_is_not_30180 = python_operator(stypy.reporting.localization.Localization(__file__, 214, 15), 'isnot', match_call_result_30178, None_30179)
        
        # Assigning a type to the variable 'stypy_return_type' (line 214)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 214, 8), 'stypy_return_type', result_is_not_30180)
        
        # ################# End of '_is_Pentium(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_Pentium' in the type store
        # Getting the type of 'stypy_return_type' (line 213)
        stypy_return_type_30181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30181)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_Pentium'
        return stypy_return_type_30181


    @norecursion
    def _is_PentiumII(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_PentiumII'
        module_type_store = module_type_store.open_function_context('_is_PentiumII', 217, 4, False)
        # Assigning a type to the variable 'self' (line 218)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 218, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._is_PentiumII.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._is_PentiumII.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._is_PentiumII.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._is_PentiumII.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._is_PentiumII')
        LinuxCPUInfo._is_PentiumII.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._is_PentiumII.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._is_PentiumII.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._is_PentiumII.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._is_PentiumII.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._is_PentiumII.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._is_PentiumII.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._is_PentiumII', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_PentiumII', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_PentiumII(...)' code ##################

        
        
        # Call to match(...): (line 218)
        # Processing the call arguments (line 218)
        str_30184 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 218, 24), 'str', '.*?Pentium.*?II\\b')
        
        # Obtaining the type of the subscript
        str_30185 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 219, 37), 'str', 'model name')
        
        # Obtaining the type of the subscript
        int_30186 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 219, 34), 'int')
        # Getting the type of 'self' (line 219)
        self_30187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 24), 'self', False)
        # Obtaining the member 'info' of a type (line 219)
        info_30188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 219, 24), self_30187, 'info')
        # Obtaining the member '__getitem__' of a type (line 219)
        getitem___30189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 219, 24), info_30188, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 219)
        subscript_call_result_30190 = invoke(stypy.reporting.localization.Localization(__file__, 219, 24), getitem___30189, int_30186)
        
        # Obtaining the member '__getitem__' of a type (line 219)
        getitem___30191 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 219, 24), subscript_call_result_30190, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 219)
        subscript_call_result_30192 = invoke(stypy.reporting.localization.Localization(__file__, 219, 24), getitem___30191, str_30185)
        
        # Processing the call keyword arguments (line 218)
        kwargs_30193 = {}
        # Getting the type of 're' (line 218)
        re_30182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 218, 15), 're', False)
        # Obtaining the member 'match' of a type (line 218)
        match_30183 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 218, 15), re_30182, 'match')
        # Calling match(args, kwargs) (line 218)
        match_call_result_30194 = invoke(stypy.reporting.localization.Localization(__file__, 218, 15), match_30183, *[str_30184, subscript_call_result_30192], **kwargs_30193)
        
        # Getting the type of 'None' (line 219)
        None_30195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 59), 'None')
        # Applying the binary operator 'isnot' (line 218)
        result_is_not_30196 = python_operator(stypy.reporting.localization.Localization(__file__, 218, 15), 'isnot', match_call_result_30194, None_30195)
        
        # Assigning a type to the variable 'stypy_return_type' (line 218)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 218, 8), 'stypy_return_type', result_is_not_30196)
        
        # ################# End of '_is_PentiumII(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_PentiumII' in the type store
        # Getting the type of 'stypy_return_type' (line 217)
        stypy_return_type_30197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30197)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_PentiumII'
        return stypy_return_type_30197


    @norecursion
    def _is_PentiumPro(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_PentiumPro'
        module_type_store = module_type_store.open_function_context('_is_PentiumPro', 221, 4, False)
        # Assigning a type to the variable 'self' (line 222)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 222, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._is_PentiumPro.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._is_PentiumPro.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._is_PentiumPro.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._is_PentiumPro.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._is_PentiumPro')
        LinuxCPUInfo._is_PentiumPro.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._is_PentiumPro.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._is_PentiumPro.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._is_PentiumPro.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._is_PentiumPro.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._is_PentiumPro.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._is_PentiumPro.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._is_PentiumPro', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_PentiumPro', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_PentiumPro(...)' code ##################

        
        
        # Call to match(...): (line 222)
        # Processing the call arguments (line 222)
        str_30200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 222, 24), 'str', '.*?PentiumPro\\b')
        
        # Obtaining the type of the subscript
        str_30201 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 223, 37), 'str', 'model name')
        
        # Obtaining the type of the subscript
        int_30202 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 223, 34), 'int')
        # Getting the type of 'self' (line 223)
        self_30203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 24), 'self', False)
        # Obtaining the member 'info' of a type (line 223)
        info_30204 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 223, 24), self_30203, 'info')
        # Obtaining the member '__getitem__' of a type (line 223)
        getitem___30205 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 223, 24), info_30204, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 223)
        subscript_call_result_30206 = invoke(stypy.reporting.localization.Localization(__file__, 223, 24), getitem___30205, int_30202)
        
        # Obtaining the member '__getitem__' of a type (line 223)
        getitem___30207 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 223, 24), subscript_call_result_30206, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 223)
        subscript_call_result_30208 = invoke(stypy.reporting.localization.Localization(__file__, 223, 24), getitem___30207, str_30201)
        
        # Processing the call keyword arguments (line 222)
        kwargs_30209 = {}
        # Getting the type of 're' (line 222)
        re_30198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 15), 're', False)
        # Obtaining the member 'match' of a type (line 222)
        match_30199 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 222, 15), re_30198, 'match')
        # Calling match(args, kwargs) (line 222)
        match_call_result_30210 = invoke(stypy.reporting.localization.Localization(__file__, 222, 15), match_30199, *[str_30200, subscript_call_result_30208], **kwargs_30209)
        
        # Getting the type of 'None' (line 223)
        None_30211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 59), 'None')
        # Applying the binary operator 'isnot' (line 222)
        result_is_not_30212 = python_operator(stypy.reporting.localization.Localization(__file__, 222, 15), 'isnot', match_call_result_30210, None_30211)
        
        # Assigning a type to the variable 'stypy_return_type' (line 222)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 222, 8), 'stypy_return_type', result_is_not_30212)
        
        # ################# End of '_is_PentiumPro(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_PentiumPro' in the type store
        # Getting the type of 'stypy_return_type' (line 221)
        stypy_return_type_30213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30213)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_PentiumPro'
        return stypy_return_type_30213


    @norecursion
    def _is_PentiumMMX(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_PentiumMMX'
        module_type_store = module_type_store.open_function_context('_is_PentiumMMX', 225, 4, False)
        # Assigning a type to the variable 'self' (line 226)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 226, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._is_PentiumMMX.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._is_PentiumMMX.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._is_PentiumMMX.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._is_PentiumMMX.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._is_PentiumMMX')
        LinuxCPUInfo._is_PentiumMMX.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._is_PentiumMMX.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._is_PentiumMMX.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._is_PentiumMMX.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._is_PentiumMMX.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._is_PentiumMMX.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._is_PentiumMMX.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._is_PentiumMMX', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_PentiumMMX', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_PentiumMMX(...)' code ##################

        
        
        # Call to match(...): (line 226)
        # Processing the call arguments (line 226)
        str_30216 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 226, 24), 'str', '.*?Pentium.*?MMX\\b')
        
        # Obtaining the type of the subscript
        str_30217 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 227, 37), 'str', 'model name')
        
        # Obtaining the type of the subscript
        int_30218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 227, 34), 'int')
        # Getting the type of 'self' (line 227)
        self_30219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 24), 'self', False)
        # Obtaining the member 'info' of a type (line 227)
        info_30220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 227, 24), self_30219, 'info')
        # Obtaining the member '__getitem__' of a type (line 227)
        getitem___30221 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 227, 24), info_30220, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 227)
        subscript_call_result_30222 = invoke(stypy.reporting.localization.Localization(__file__, 227, 24), getitem___30221, int_30218)
        
        # Obtaining the member '__getitem__' of a type (line 227)
        getitem___30223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 227, 24), subscript_call_result_30222, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 227)
        subscript_call_result_30224 = invoke(stypy.reporting.localization.Localization(__file__, 227, 24), getitem___30223, str_30217)
        
        # Processing the call keyword arguments (line 226)
        kwargs_30225 = {}
        # Getting the type of 're' (line 226)
        re_30214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 226, 15), 're', False)
        # Obtaining the member 'match' of a type (line 226)
        match_30215 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 226, 15), re_30214, 'match')
        # Calling match(args, kwargs) (line 226)
        match_call_result_30226 = invoke(stypy.reporting.localization.Localization(__file__, 226, 15), match_30215, *[str_30216, subscript_call_result_30224], **kwargs_30225)
        
        # Getting the type of 'None' (line 227)
        None_30227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 59), 'None')
        # Applying the binary operator 'isnot' (line 226)
        result_is_not_30228 = python_operator(stypy.reporting.localization.Localization(__file__, 226, 15), 'isnot', match_call_result_30226, None_30227)
        
        # Assigning a type to the variable 'stypy_return_type' (line 226)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 226, 8), 'stypy_return_type', result_is_not_30228)
        
        # ################# End of '_is_PentiumMMX(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_PentiumMMX' in the type store
        # Getting the type of 'stypy_return_type' (line 225)
        stypy_return_type_30229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30229)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_PentiumMMX'
        return stypy_return_type_30229


    @norecursion
    def _is_PentiumIII(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_PentiumIII'
        module_type_store = module_type_store.open_function_context('_is_PentiumIII', 229, 4, False)
        # Assigning a type to the variable 'self' (line 230)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 230, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._is_PentiumIII.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._is_PentiumIII.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._is_PentiumIII.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._is_PentiumIII.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._is_PentiumIII')
        LinuxCPUInfo._is_PentiumIII.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._is_PentiumIII.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._is_PentiumIII.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._is_PentiumIII.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._is_PentiumIII.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._is_PentiumIII.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._is_PentiumIII.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._is_PentiumIII', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_PentiumIII', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_PentiumIII(...)' code ##################

        
        
        # Call to match(...): (line 230)
        # Processing the call arguments (line 230)
        str_30232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 230, 24), 'str', '.*?Pentium.*?III\\b')
        
        # Obtaining the type of the subscript
        str_30233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 231, 37), 'str', 'model name')
        
        # Obtaining the type of the subscript
        int_30234 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 231, 34), 'int')
        # Getting the type of 'self' (line 231)
        self_30235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 24), 'self', False)
        # Obtaining the member 'info' of a type (line 231)
        info_30236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 231, 24), self_30235, 'info')
        # Obtaining the member '__getitem__' of a type (line 231)
        getitem___30237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 231, 24), info_30236, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 231)
        subscript_call_result_30238 = invoke(stypy.reporting.localization.Localization(__file__, 231, 24), getitem___30237, int_30234)
        
        # Obtaining the member '__getitem__' of a type (line 231)
        getitem___30239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 231, 24), subscript_call_result_30238, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 231)
        subscript_call_result_30240 = invoke(stypy.reporting.localization.Localization(__file__, 231, 24), getitem___30239, str_30233)
        
        # Processing the call keyword arguments (line 230)
        kwargs_30241 = {}
        # Getting the type of 're' (line 230)
        re_30230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 15), 're', False)
        # Obtaining the member 'match' of a type (line 230)
        match_30231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 230, 15), re_30230, 'match')
        # Calling match(args, kwargs) (line 230)
        match_call_result_30242 = invoke(stypy.reporting.localization.Localization(__file__, 230, 15), match_30231, *[str_30232, subscript_call_result_30240], **kwargs_30241)
        
        # Getting the type of 'None' (line 231)
        None_30243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 59), 'None')
        # Applying the binary operator 'isnot' (line 230)
        result_is_not_30244 = python_operator(stypy.reporting.localization.Localization(__file__, 230, 15), 'isnot', match_call_result_30242, None_30243)
        
        # Assigning a type to the variable 'stypy_return_type' (line 230)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 230, 8), 'stypy_return_type', result_is_not_30244)
        
        # ################# End of '_is_PentiumIII(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_PentiumIII' in the type store
        # Getting the type of 'stypy_return_type' (line 229)
        stypy_return_type_30245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30245)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_PentiumIII'
        return stypy_return_type_30245


    @norecursion
    def _is_PentiumIV(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_PentiumIV'
        module_type_store = module_type_store.open_function_context('_is_PentiumIV', 233, 4, False)
        # Assigning a type to the variable 'self' (line 234)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 234, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._is_PentiumIV.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._is_PentiumIV.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._is_PentiumIV.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._is_PentiumIV.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._is_PentiumIV')
        LinuxCPUInfo._is_PentiumIV.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._is_PentiumIV.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._is_PentiumIV.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._is_PentiumIV.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._is_PentiumIV.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._is_PentiumIV.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._is_PentiumIV.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._is_PentiumIV', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_PentiumIV', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_PentiumIV(...)' code ##################

        
        
        # Call to match(...): (line 234)
        # Processing the call arguments (line 234)
        str_30248 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 234, 24), 'str', '.*?Pentium.*?(IV|4)\\b')
        
        # Obtaining the type of the subscript
        str_30249 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 235, 37), 'str', 'model name')
        
        # Obtaining the type of the subscript
        int_30250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 235, 34), 'int')
        # Getting the type of 'self' (line 235)
        self_30251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 235, 24), 'self', False)
        # Obtaining the member 'info' of a type (line 235)
        info_30252 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 235, 24), self_30251, 'info')
        # Obtaining the member '__getitem__' of a type (line 235)
        getitem___30253 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 235, 24), info_30252, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 235)
        subscript_call_result_30254 = invoke(stypy.reporting.localization.Localization(__file__, 235, 24), getitem___30253, int_30250)
        
        # Obtaining the member '__getitem__' of a type (line 235)
        getitem___30255 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 235, 24), subscript_call_result_30254, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 235)
        subscript_call_result_30256 = invoke(stypy.reporting.localization.Localization(__file__, 235, 24), getitem___30255, str_30249)
        
        # Processing the call keyword arguments (line 234)
        kwargs_30257 = {}
        # Getting the type of 're' (line 234)
        re_30246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 234, 15), 're', False)
        # Obtaining the member 'match' of a type (line 234)
        match_30247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 234, 15), re_30246, 'match')
        # Calling match(args, kwargs) (line 234)
        match_call_result_30258 = invoke(stypy.reporting.localization.Localization(__file__, 234, 15), match_30247, *[str_30248, subscript_call_result_30256], **kwargs_30257)
        
        # Getting the type of 'None' (line 235)
        None_30259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 235, 59), 'None')
        # Applying the binary operator 'isnot' (line 234)
        result_is_not_30260 = python_operator(stypy.reporting.localization.Localization(__file__, 234, 15), 'isnot', match_call_result_30258, None_30259)
        
        # Assigning a type to the variable 'stypy_return_type' (line 234)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 234, 8), 'stypy_return_type', result_is_not_30260)
        
        # ################# End of '_is_PentiumIV(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_PentiumIV' in the type store
        # Getting the type of 'stypy_return_type' (line 233)
        stypy_return_type_30261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30261)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_PentiumIV'
        return stypy_return_type_30261


    @norecursion
    def _is_PentiumM(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_PentiumM'
        module_type_store = module_type_store.open_function_context('_is_PentiumM', 237, 4, False)
        # Assigning a type to the variable 'self' (line 238)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 238, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._is_PentiumM.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._is_PentiumM.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._is_PentiumM.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._is_PentiumM.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._is_PentiumM')
        LinuxCPUInfo._is_PentiumM.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._is_PentiumM.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._is_PentiumM.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._is_PentiumM.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._is_PentiumM.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._is_PentiumM.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._is_PentiumM.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._is_PentiumM', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_PentiumM', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_PentiumM(...)' code ##################

        
        
        # Call to match(...): (line 238)
        # Processing the call arguments (line 238)
        str_30264 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 238, 24), 'str', '.*?Pentium.*?M\\b')
        
        # Obtaining the type of the subscript
        str_30265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 239, 37), 'str', 'model name')
        
        # Obtaining the type of the subscript
        int_30266 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 239, 34), 'int')
        # Getting the type of 'self' (line 239)
        self_30267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 239, 24), 'self', False)
        # Obtaining the member 'info' of a type (line 239)
        info_30268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 239, 24), self_30267, 'info')
        # Obtaining the member '__getitem__' of a type (line 239)
        getitem___30269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 239, 24), info_30268, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 239)
        subscript_call_result_30270 = invoke(stypy.reporting.localization.Localization(__file__, 239, 24), getitem___30269, int_30266)
        
        # Obtaining the member '__getitem__' of a type (line 239)
        getitem___30271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 239, 24), subscript_call_result_30270, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 239)
        subscript_call_result_30272 = invoke(stypy.reporting.localization.Localization(__file__, 239, 24), getitem___30271, str_30265)
        
        # Processing the call keyword arguments (line 238)
        kwargs_30273 = {}
        # Getting the type of 're' (line 238)
        re_30262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 238, 15), 're', False)
        # Obtaining the member 'match' of a type (line 238)
        match_30263 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 238, 15), re_30262, 'match')
        # Calling match(args, kwargs) (line 238)
        match_call_result_30274 = invoke(stypy.reporting.localization.Localization(__file__, 238, 15), match_30263, *[str_30264, subscript_call_result_30272], **kwargs_30273)
        
        # Getting the type of 'None' (line 239)
        None_30275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 239, 59), 'None')
        # Applying the binary operator 'isnot' (line 238)
        result_is_not_30276 = python_operator(stypy.reporting.localization.Localization(__file__, 238, 15), 'isnot', match_call_result_30274, None_30275)
        
        # Assigning a type to the variable 'stypy_return_type' (line 238)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 238, 8), 'stypy_return_type', result_is_not_30276)
        
        # ################# End of '_is_PentiumM(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_PentiumM' in the type store
        # Getting the type of 'stypy_return_type' (line 237)
        stypy_return_type_30277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30277)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_PentiumM'
        return stypy_return_type_30277


    @norecursion
    def _is_Prescott(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_Prescott'
        module_type_store = module_type_store.open_function_context('_is_Prescott', 241, 4, False)
        # Assigning a type to the variable 'self' (line 242)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 242, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._is_Prescott.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._is_Prescott.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._is_Prescott.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._is_Prescott.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._is_Prescott')
        LinuxCPUInfo._is_Prescott.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._is_Prescott.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._is_Prescott.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._is_Prescott.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._is_Prescott.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._is_Prescott.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._is_Prescott.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._is_Prescott', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_Prescott', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_Prescott(...)' code ##################

        
        # Evaluating a boolean operation
        
        # Call to is_PentiumIV(...): (line 242)
        # Processing the call keyword arguments (line 242)
        kwargs_30280 = {}
        # Getting the type of 'self' (line 242)
        self_30278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 15), 'self', False)
        # Obtaining the member 'is_PentiumIV' of a type (line 242)
        is_PentiumIV_30279 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 242, 15), self_30278, 'is_PentiumIV')
        # Calling is_PentiumIV(args, kwargs) (line 242)
        is_PentiumIV_call_result_30281 = invoke(stypy.reporting.localization.Localization(__file__, 242, 15), is_PentiumIV_30279, *[], **kwargs_30280)
        
        
        # Call to has_sse3(...): (line 242)
        # Processing the call keyword arguments (line 242)
        kwargs_30284 = {}
        # Getting the type of 'self' (line 242)
        self_30282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 39), 'self', False)
        # Obtaining the member 'has_sse3' of a type (line 242)
        has_sse3_30283 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 242, 39), self_30282, 'has_sse3')
        # Calling has_sse3(args, kwargs) (line 242)
        has_sse3_call_result_30285 = invoke(stypy.reporting.localization.Localization(__file__, 242, 39), has_sse3_30283, *[], **kwargs_30284)
        
        # Applying the binary operator 'and' (line 242)
        result_and_keyword_30286 = python_operator(stypy.reporting.localization.Localization(__file__, 242, 15), 'and', is_PentiumIV_call_result_30281, has_sse3_call_result_30285)
        
        # Assigning a type to the variable 'stypy_return_type' (line 242)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 242, 8), 'stypy_return_type', result_and_keyword_30286)
        
        # ################# End of '_is_Prescott(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_Prescott' in the type store
        # Getting the type of 'stypy_return_type' (line 241)
        stypy_return_type_30287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30287)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_Prescott'
        return stypy_return_type_30287


    @norecursion
    def _is_Nocona(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_Nocona'
        module_type_store = module_type_store.open_function_context('_is_Nocona', 244, 4, False)
        # Assigning a type to the variable 'self' (line 245)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 245, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._is_Nocona.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._is_Nocona.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._is_Nocona.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._is_Nocona.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._is_Nocona')
        LinuxCPUInfo._is_Nocona.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._is_Nocona.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._is_Nocona.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._is_Nocona.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._is_Nocona.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._is_Nocona.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._is_Nocona.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._is_Nocona', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_Nocona', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_Nocona(...)' code ##################

        
        # Evaluating a boolean operation
        
        # Call to is_Intel(...): (line 245)
        # Processing the call keyword arguments (line 245)
        kwargs_30290 = {}
        # Getting the type of 'self' (line 245)
        self_30288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 15), 'self', False)
        # Obtaining the member 'is_Intel' of a type (line 245)
        is_Intel_30289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 245, 15), self_30288, 'is_Intel')
        # Calling is_Intel(args, kwargs) (line 245)
        is_Intel_call_result_30291 = invoke(stypy.reporting.localization.Localization(__file__, 245, 15), is_Intel_30289, *[], **kwargs_30290)
        
        
        # Evaluating a boolean operation
        
        
        # Obtaining the type of the subscript
        str_30292 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 246, 33), 'str', 'cpu family')
        
        # Obtaining the type of the subscript
        int_30293 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 246, 30), 'int')
        # Getting the type of 'self' (line 246)
        self_30294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 246, 20), 'self')
        # Obtaining the member 'info' of a type (line 246)
        info_30295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 246, 20), self_30294, 'info')
        # Obtaining the member '__getitem__' of a type (line 246)
        getitem___30296 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 246, 20), info_30295, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 246)
        subscript_call_result_30297 = invoke(stypy.reporting.localization.Localization(__file__, 246, 20), getitem___30296, int_30293)
        
        # Obtaining the member '__getitem__' of a type (line 246)
        getitem___30298 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 246, 20), subscript_call_result_30297, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 246)
        subscript_call_result_30299 = invoke(stypy.reporting.localization.Localization(__file__, 246, 20), getitem___30298, str_30292)
        
        str_30300 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 246, 50), 'str', '6')
        # Applying the binary operator '==' (line 246)
        result_eq_30301 = python_operator(stypy.reporting.localization.Localization(__file__, 246, 20), '==', subscript_call_result_30299, str_30300)
        
        
        
        # Obtaining the type of the subscript
        str_30302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 247, 36), 'str', 'cpu family')
        
        # Obtaining the type of the subscript
        int_30303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 247, 33), 'int')
        # Getting the type of 'self' (line 247)
        self_30304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 23), 'self')
        # Obtaining the member 'info' of a type (line 247)
        info_30305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 247, 23), self_30304, 'info')
        # Obtaining the member '__getitem__' of a type (line 247)
        getitem___30306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 247, 23), info_30305, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 247)
        subscript_call_result_30307 = invoke(stypy.reporting.localization.Localization(__file__, 247, 23), getitem___30306, int_30303)
        
        # Obtaining the member '__getitem__' of a type (line 247)
        getitem___30308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 247, 23), subscript_call_result_30307, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 247)
        subscript_call_result_30309 = invoke(stypy.reporting.localization.Localization(__file__, 247, 23), getitem___30308, str_30302)
        
        str_30310 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 247, 53), 'str', '15')
        # Applying the binary operator '==' (line 247)
        result_eq_30311 = python_operator(stypy.reporting.localization.Localization(__file__, 247, 23), '==', subscript_call_result_30309, str_30310)
        
        # Applying the binary operator 'or' (line 246)
        result_or_keyword_30312 = python_operator(stypy.reporting.localization.Localization(__file__, 246, 20), 'or', result_eq_30301, result_eq_30311)
        
        # Applying the binary operator 'and' (line 245)
        result_and_keyword_30313 = python_operator(stypy.reporting.localization.Localization(__file__, 245, 15), 'and', is_Intel_call_result_30291, result_or_keyword_30312)
        
        # Evaluating a boolean operation
        
        # Call to has_sse3(...): (line 248)
        # Processing the call keyword arguments (line 248)
        kwargs_30316 = {}
        # Getting the type of 'self' (line 248)
        self_30314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 20), 'self', False)
        # Obtaining the member 'has_sse3' of a type (line 248)
        has_sse3_30315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 248, 20), self_30314, 'has_sse3')
        # Calling has_sse3(args, kwargs) (line 248)
        has_sse3_call_result_30317 = invoke(stypy.reporting.localization.Localization(__file__, 248, 20), has_sse3_30315, *[], **kwargs_30316)
        
        
        
        # Call to has_ssse3(...): (line 248)
        # Processing the call keyword arguments (line 248)
        kwargs_30320 = {}
        # Getting the type of 'self' (line 248)
        self_30318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 44), 'self', False)
        # Obtaining the member 'has_ssse3' of a type (line 248)
        has_ssse3_30319 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 248, 44), self_30318, 'has_ssse3')
        # Calling has_ssse3(args, kwargs) (line 248)
        has_ssse3_call_result_30321 = invoke(stypy.reporting.localization.Localization(__file__, 248, 44), has_ssse3_30319, *[], **kwargs_30320)
        
        # Applying the 'not' unary operator (line 248)
        result_not__30322 = python_operator(stypy.reporting.localization.Localization(__file__, 248, 40), 'not', has_ssse3_call_result_30321)
        
        # Applying the binary operator 'and' (line 248)
        result_and_keyword_30323 = python_operator(stypy.reporting.localization.Localization(__file__, 248, 20), 'and', has_sse3_call_result_30317, result_not__30322)
        
        # Applying the binary operator 'and' (line 245)
        result_and_keyword_30324 = python_operator(stypy.reporting.localization.Localization(__file__, 245, 15), 'and', result_and_keyword_30313, result_and_keyword_30323)
        
        
        # Call to match(...): (line 249)
        # Processing the call arguments (line 249)
        str_30327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 249, 28), 'str', '.*?\\blm\\b')
        
        # Obtaining the type of the subscript
        str_30328 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 249, 55), 'str', 'flags')
        
        # Obtaining the type of the subscript
        int_30329 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 249, 52), 'int')
        # Getting the type of 'self' (line 249)
        self_30330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 42), 'self', False)
        # Obtaining the member 'info' of a type (line 249)
        info_30331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 249, 42), self_30330, 'info')
        # Obtaining the member '__getitem__' of a type (line 249)
        getitem___30332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 249, 42), info_30331, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 249)
        subscript_call_result_30333 = invoke(stypy.reporting.localization.Localization(__file__, 249, 42), getitem___30332, int_30329)
        
        # Obtaining the member '__getitem__' of a type (line 249)
        getitem___30334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 249, 42), subscript_call_result_30333, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 249)
        subscript_call_result_30335 = invoke(stypy.reporting.localization.Localization(__file__, 249, 42), getitem___30334, str_30328)
        
        # Processing the call keyword arguments (line 249)
        kwargs_30336 = {}
        # Getting the type of 're' (line 249)
        re_30325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 19), 're', False)
        # Obtaining the member 'match' of a type (line 249)
        match_30326 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 249, 19), re_30325, 'match')
        # Calling match(args, kwargs) (line 249)
        match_call_result_30337 = invoke(stypy.reporting.localization.Localization(__file__, 249, 19), match_30326, *[str_30327, subscript_call_result_30335], **kwargs_30336)
        
        # Getting the type of 'None' (line 249)
        None_30338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 72), 'None')
        # Applying the binary operator 'isnot' (line 249)
        result_is_not_30339 = python_operator(stypy.reporting.localization.Localization(__file__, 249, 19), 'isnot', match_call_result_30337, None_30338)
        
        # Applying the binary operator 'and' (line 245)
        result_and_keyword_30340 = python_operator(stypy.reporting.localization.Localization(__file__, 245, 15), 'and', result_and_keyword_30324, result_is_not_30339)
        
        # Assigning a type to the variable 'stypy_return_type' (line 245)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 245, 8), 'stypy_return_type', result_and_keyword_30340)
        
        # ################# End of '_is_Nocona(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_Nocona' in the type store
        # Getting the type of 'stypy_return_type' (line 244)
        stypy_return_type_30341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30341)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_Nocona'
        return stypy_return_type_30341


    @norecursion
    def _is_Core2(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_Core2'
        module_type_store = module_type_store.open_function_context('_is_Core2', 251, 4, False)
        # Assigning a type to the variable 'self' (line 252)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 252, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._is_Core2.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._is_Core2.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._is_Core2.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._is_Core2.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._is_Core2')
        LinuxCPUInfo._is_Core2.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._is_Core2.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._is_Core2.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._is_Core2.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._is_Core2.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._is_Core2.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._is_Core2.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._is_Core2', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_Core2', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_Core2(...)' code ##################

        
        # Evaluating a boolean operation
        
        # Call to is_64bit(...): (line 252)
        # Processing the call keyword arguments (line 252)
        kwargs_30344 = {}
        # Getting the type of 'self' (line 252)
        self_30342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 15), 'self', False)
        # Obtaining the member 'is_64bit' of a type (line 252)
        is_64bit_30343 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 252, 15), self_30342, 'is_64bit')
        # Calling is_64bit(args, kwargs) (line 252)
        is_64bit_call_result_30345 = invoke(stypy.reporting.localization.Localization(__file__, 252, 15), is_64bit_30343, *[], **kwargs_30344)
        
        
        # Call to is_Intel(...): (line 252)
        # Processing the call keyword arguments (line 252)
        kwargs_30348 = {}
        # Getting the type of 'self' (line 252)
        self_30346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 35), 'self', False)
        # Obtaining the member 'is_Intel' of a type (line 252)
        is_Intel_30347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 252, 35), self_30346, 'is_Intel')
        # Calling is_Intel(args, kwargs) (line 252)
        is_Intel_call_result_30349 = invoke(stypy.reporting.localization.Localization(__file__, 252, 35), is_Intel_30347, *[], **kwargs_30348)
        
        # Applying the binary operator 'and' (line 252)
        result_and_keyword_30350 = python_operator(stypy.reporting.localization.Localization(__file__, 252, 15), 'and', is_64bit_call_result_30345, is_Intel_call_result_30349)
        
        
        # Call to match(...): (line 253)
        # Processing the call arguments (line 253)
        str_30353 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 253, 24), 'str', '.*?Core\\(TM\\)2\\b')
        
        # Obtaining the type of the subscript
        str_30354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 254, 37), 'str', 'model name')
        
        # Obtaining the type of the subscript
        int_30355 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 254, 34), 'int')
        # Getting the type of 'self' (line 254)
        self_30356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 24), 'self', False)
        # Obtaining the member 'info' of a type (line 254)
        info_30357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 254, 24), self_30356, 'info')
        # Obtaining the member '__getitem__' of a type (line 254)
        getitem___30358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 254, 24), info_30357, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 254)
        subscript_call_result_30359 = invoke(stypy.reporting.localization.Localization(__file__, 254, 24), getitem___30358, int_30355)
        
        # Obtaining the member '__getitem__' of a type (line 254)
        getitem___30360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 254, 24), subscript_call_result_30359, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 254)
        subscript_call_result_30361 = invoke(stypy.reporting.localization.Localization(__file__, 254, 24), getitem___30360, str_30354)
        
        # Processing the call keyword arguments (line 253)
        kwargs_30362 = {}
        # Getting the type of 're' (line 253)
        re_30351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 15), 're', False)
        # Obtaining the member 'match' of a type (line 253)
        match_30352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 253, 15), re_30351, 'match')
        # Calling match(args, kwargs) (line 253)
        match_call_result_30363 = invoke(stypy.reporting.localization.Localization(__file__, 253, 15), match_30352, *[str_30353, subscript_call_result_30361], **kwargs_30362)
        
        # Getting the type of 'None' (line 254)
        None_30364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 59), 'None')
        # Applying the binary operator 'isnot' (line 253)
        result_is_not_30365 = python_operator(stypy.reporting.localization.Localization(__file__, 253, 15), 'isnot', match_call_result_30363, None_30364)
        
        # Applying the binary operator 'and' (line 252)
        result_and_keyword_30366 = python_operator(stypy.reporting.localization.Localization(__file__, 252, 15), 'and', result_and_keyword_30350, result_is_not_30365)
        
        # Assigning a type to the variable 'stypy_return_type' (line 252)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 252, 8), 'stypy_return_type', result_and_keyword_30366)
        
        # ################# End of '_is_Core2(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_Core2' in the type store
        # Getting the type of 'stypy_return_type' (line 251)
        stypy_return_type_30367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30367)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_Core2'
        return stypy_return_type_30367


    @norecursion
    def _is_Itanium(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_Itanium'
        module_type_store = module_type_store.open_function_context('_is_Itanium', 256, 4, False)
        # Assigning a type to the variable 'self' (line 257)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 257, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._is_Itanium.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._is_Itanium.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._is_Itanium.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._is_Itanium.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._is_Itanium')
        LinuxCPUInfo._is_Itanium.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._is_Itanium.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._is_Itanium.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._is_Itanium.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._is_Itanium.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._is_Itanium.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._is_Itanium.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._is_Itanium', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_Itanium', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_Itanium(...)' code ##################

        
        
        # Call to match(...): (line 257)
        # Processing the call arguments (line 257)
        str_30370 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 257, 24), 'str', '.*?Itanium\\b')
        
        # Obtaining the type of the subscript
        str_30371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 258, 37), 'str', 'family')
        
        # Obtaining the type of the subscript
        int_30372 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 258, 34), 'int')
        # Getting the type of 'self' (line 258)
        self_30373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 24), 'self', False)
        # Obtaining the member 'info' of a type (line 258)
        info_30374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 258, 24), self_30373, 'info')
        # Obtaining the member '__getitem__' of a type (line 258)
        getitem___30375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 258, 24), info_30374, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 258)
        subscript_call_result_30376 = invoke(stypy.reporting.localization.Localization(__file__, 258, 24), getitem___30375, int_30372)
        
        # Obtaining the member '__getitem__' of a type (line 258)
        getitem___30377 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 258, 24), subscript_call_result_30376, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 258)
        subscript_call_result_30378 = invoke(stypy.reporting.localization.Localization(__file__, 258, 24), getitem___30377, str_30371)
        
        # Processing the call keyword arguments (line 257)
        kwargs_30379 = {}
        # Getting the type of 're' (line 257)
        re_30368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 15), 're', False)
        # Obtaining the member 'match' of a type (line 257)
        match_30369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 257, 15), re_30368, 'match')
        # Calling match(args, kwargs) (line 257)
        match_call_result_30380 = invoke(stypy.reporting.localization.Localization(__file__, 257, 15), match_30369, *[str_30370, subscript_call_result_30378], **kwargs_30379)
        
        # Getting the type of 'None' (line 258)
        None_30381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 55), 'None')
        # Applying the binary operator 'isnot' (line 257)
        result_is_not_30382 = python_operator(stypy.reporting.localization.Localization(__file__, 257, 15), 'isnot', match_call_result_30380, None_30381)
        
        # Assigning a type to the variable 'stypy_return_type' (line 257)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 257, 8), 'stypy_return_type', result_is_not_30382)
        
        # ################# End of '_is_Itanium(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_Itanium' in the type store
        # Getting the type of 'stypy_return_type' (line 256)
        stypy_return_type_30383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 256, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30383)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_Itanium'
        return stypy_return_type_30383


    @norecursion
    def _is_XEON(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_XEON'
        module_type_store = module_type_store.open_function_context('_is_XEON', 260, 4, False)
        # Assigning a type to the variable 'self' (line 261)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 261, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._is_XEON.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._is_XEON.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._is_XEON.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._is_XEON.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._is_XEON')
        LinuxCPUInfo._is_XEON.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._is_XEON.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._is_XEON.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._is_XEON.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._is_XEON.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._is_XEON.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._is_XEON.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._is_XEON', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_XEON', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_XEON(...)' code ##################

        
        
        # Call to match(...): (line 261)
        # Processing the call arguments (line 261)
        str_30386 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 261, 24), 'str', '.*?XEON\\b')
        
        # Obtaining the type of the subscript
        str_30387 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 262, 37), 'str', 'model name')
        
        # Obtaining the type of the subscript
        int_30388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 262, 34), 'int')
        # Getting the type of 'self' (line 262)
        self_30389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 262, 24), 'self', False)
        # Obtaining the member 'info' of a type (line 262)
        info_30390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 262, 24), self_30389, 'info')
        # Obtaining the member '__getitem__' of a type (line 262)
        getitem___30391 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 262, 24), info_30390, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 262)
        subscript_call_result_30392 = invoke(stypy.reporting.localization.Localization(__file__, 262, 24), getitem___30391, int_30388)
        
        # Obtaining the member '__getitem__' of a type (line 262)
        getitem___30393 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 262, 24), subscript_call_result_30392, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 262)
        subscript_call_result_30394 = invoke(stypy.reporting.localization.Localization(__file__, 262, 24), getitem___30393, str_30387)
        
        # Getting the type of 're' (line 262)
        re_30395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 262, 52), 're', False)
        # Obtaining the member 'IGNORECASE' of a type (line 262)
        IGNORECASE_30396 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 262, 52), re_30395, 'IGNORECASE')
        # Processing the call keyword arguments (line 261)
        kwargs_30397 = {}
        # Getting the type of 're' (line 261)
        re_30384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 15), 're', False)
        # Obtaining the member 'match' of a type (line 261)
        match_30385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 261, 15), re_30384, 'match')
        # Calling match(args, kwargs) (line 261)
        match_call_result_30398 = invoke(stypy.reporting.localization.Localization(__file__, 261, 15), match_30385, *[str_30386, subscript_call_result_30394, IGNORECASE_30396], **kwargs_30397)
        
        # Getting the type of 'None' (line 262)
        None_30399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 262, 74), 'None')
        # Applying the binary operator 'isnot' (line 261)
        result_is_not_30400 = python_operator(stypy.reporting.localization.Localization(__file__, 261, 15), 'isnot', match_call_result_30398, None_30399)
        
        # Assigning a type to the variable 'stypy_return_type' (line 261)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 261, 8), 'stypy_return_type', result_is_not_30400)
        
        # ################# End of '_is_XEON(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_XEON' in the type store
        # Getting the type of 'stypy_return_type' (line 260)
        stypy_return_type_30401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30401)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_XEON'
        return stypy_return_type_30401

    
    # Assigning a Name to a Name (line 264):

    @norecursion
    def _is_singleCPU(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_singleCPU'
        module_type_store = module_type_store.open_function_context('_is_singleCPU', 268, 4, False)
        # Assigning a type to the variable 'self' (line 269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 269, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._is_singleCPU.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._is_singleCPU.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._is_singleCPU.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._is_singleCPU.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._is_singleCPU')
        LinuxCPUInfo._is_singleCPU.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._is_singleCPU.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._is_singleCPU.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._is_singleCPU.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._is_singleCPU.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._is_singleCPU.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._is_singleCPU.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._is_singleCPU', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_singleCPU', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_singleCPU(...)' code ##################

        
        
        # Call to len(...): (line 269)
        # Processing the call arguments (line 269)
        # Getting the type of 'self' (line 269)
        self_30403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 19), 'self', False)
        # Obtaining the member 'info' of a type (line 269)
        info_30404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 269, 19), self_30403, 'info')
        # Processing the call keyword arguments (line 269)
        kwargs_30405 = {}
        # Getting the type of 'len' (line 269)
        len_30402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 15), 'len', False)
        # Calling len(args, kwargs) (line 269)
        len_call_result_30406 = invoke(stypy.reporting.localization.Localization(__file__, 269, 15), len_30402, *[info_30404], **kwargs_30405)
        
        int_30407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 269, 33), 'int')
        # Applying the binary operator '==' (line 269)
        result_eq_30408 = python_operator(stypy.reporting.localization.Localization(__file__, 269, 15), '==', len_call_result_30406, int_30407)
        
        # Assigning a type to the variable 'stypy_return_type' (line 269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 269, 8), 'stypy_return_type', result_eq_30408)
        
        # ################# End of '_is_singleCPU(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_singleCPU' in the type store
        # Getting the type of 'stypy_return_type' (line 268)
        stypy_return_type_30409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 268, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30409)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_singleCPU'
        return stypy_return_type_30409


    @norecursion
    def _getNCPUs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_getNCPUs'
        module_type_store = module_type_store.open_function_context('_getNCPUs', 271, 4, False)
        # Assigning a type to the variable 'self' (line 272)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 272, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._getNCPUs.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._getNCPUs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._getNCPUs.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._getNCPUs.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._getNCPUs')
        LinuxCPUInfo._getNCPUs.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._getNCPUs.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._getNCPUs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._getNCPUs.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._getNCPUs.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._getNCPUs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._getNCPUs.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._getNCPUs', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_getNCPUs', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_getNCPUs(...)' code ##################

        
        # Call to len(...): (line 272)
        # Processing the call arguments (line 272)
        # Getting the type of 'self' (line 272)
        self_30411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 19), 'self', False)
        # Obtaining the member 'info' of a type (line 272)
        info_30412 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 272, 19), self_30411, 'info')
        # Processing the call keyword arguments (line 272)
        kwargs_30413 = {}
        # Getting the type of 'len' (line 272)
        len_30410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 15), 'len', False)
        # Calling len(args, kwargs) (line 272)
        len_call_result_30414 = invoke(stypy.reporting.localization.Localization(__file__, 272, 15), len_30410, *[info_30412], **kwargs_30413)
        
        # Assigning a type to the variable 'stypy_return_type' (line 272)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 272, 8), 'stypy_return_type', len_call_result_30414)
        
        # ################# End of '_getNCPUs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_getNCPUs' in the type store
        # Getting the type of 'stypy_return_type' (line 271)
        stypy_return_type_30415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 271, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30415)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_getNCPUs'
        return stypy_return_type_30415


    @norecursion
    def _has_fdiv_bug(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_has_fdiv_bug'
        module_type_store = module_type_store.open_function_context('_has_fdiv_bug', 274, 4, False)
        # Assigning a type to the variable 'self' (line 275)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 275, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._has_fdiv_bug.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._has_fdiv_bug.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._has_fdiv_bug.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._has_fdiv_bug.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._has_fdiv_bug')
        LinuxCPUInfo._has_fdiv_bug.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._has_fdiv_bug.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._has_fdiv_bug.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._has_fdiv_bug.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._has_fdiv_bug.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._has_fdiv_bug.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._has_fdiv_bug.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._has_fdiv_bug', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_has_fdiv_bug', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_has_fdiv_bug(...)' code ##################

        
        
        # Obtaining the type of the subscript
        str_30416 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 275, 28), 'str', 'fdiv_bug')
        
        # Obtaining the type of the subscript
        int_30417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 275, 25), 'int')
        # Getting the type of 'self' (line 275)
        self_30418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 15), 'self')
        # Obtaining the member 'info' of a type (line 275)
        info_30419 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 275, 15), self_30418, 'info')
        # Obtaining the member '__getitem__' of a type (line 275)
        getitem___30420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 275, 15), info_30419, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 275)
        subscript_call_result_30421 = invoke(stypy.reporting.localization.Localization(__file__, 275, 15), getitem___30420, int_30417)
        
        # Obtaining the member '__getitem__' of a type (line 275)
        getitem___30422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 275, 15), subscript_call_result_30421, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 275)
        subscript_call_result_30423 = invoke(stypy.reporting.localization.Localization(__file__, 275, 15), getitem___30422, str_30416)
        
        str_30424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 275, 41), 'str', 'yes')
        # Applying the binary operator '==' (line 275)
        result_eq_30425 = python_operator(stypy.reporting.localization.Localization(__file__, 275, 15), '==', subscript_call_result_30423, str_30424)
        
        # Assigning a type to the variable 'stypy_return_type' (line 275)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 275, 8), 'stypy_return_type', result_eq_30425)
        
        # ################# End of '_has_fdiv_bug(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_has_fdiv_bug' in the type store
        # Getting the type of 'stypy_return_type' (line 274)
        stypy_return_type_30426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 274, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30426)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_has_fdiv_bug'
        return stypy_return_type_30426


    @norecursion
    def _has_f00f_bug(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_has_f00f_bug'
        module_type_store = module_type_store.open_function_context('_has_f00f_bug', 277, 4, False)
        # Assigning a type to the variable 'self' (line 278)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 278, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._has_f00f_bug.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._has_f00f_bug.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._has_f00f_bug.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._has_f00f_bug.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._has_f00f_bug')
        LinuxCPUInfo._has_f00f_bug.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._has_f00f_bug.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._has_f00f_bug.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._has_f00f_bug.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._has_f00f_bug.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._has_f00f_bug.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._has_f00f_bug.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._has_f00f_bug', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_has_f00f_bug', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_has_f00f_bug(...)' code ##################

        
        
        # Obtaining the type of the subscript
        str_30427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 278, 28), 'str', 'f00f_bug')
        
        # Obtaining the type of the subscript
        int_30428 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 278, 25), 'int')
        # Getting the type of 'self' (line 278)
        self_30429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 15), 'self')
        # Obtaining the member 'info' of a type (line 278)
        info_30430 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 278, 15), self_30429, 'info')
        # Obtaining the member '__getitem__' of a type (line 278)
        getitem___30431 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 278, 15), info_30430, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 278)
        subscript_call_result_30432 = invoke(stypy.reporting.localization.Localization(__file__, 278, 15), getitem___30431, int_30428)
        
        # Obtaining the member '__getitem__' of a type (line 278)
        getitem___30433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 278, 15), subscript_call_result_30432, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 278)
        subscript_call_result_30434 = invoke(stypy.reporting.localization.Localization(__file__, 278, 15), getitem___30433, str_30427)
        
        str_30435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 278, 41), 'str', 'yes')
        # Applying the binary operator '==' (line 278)
        result_eq_30436 = python_operator(stypy.reporting.localization.Localization(__file__, 278, 15), '==', subscript_call_result_30434, str_30435)
        
        # Assigning a type to the variable 'stypy_return_type' (line 278)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 278, 8), 'stypy_return_type', result_eq_30436)
        
        # ################# End of '_has_f00f_bug(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_has_f00f_bug' in the type store
        # Getting the type of 'stypy_return_type' (line 277)
        stypy_return_type_30437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30437)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_has_f00f_bug'
        return stypy_return_type_30437


    @norecursion
    def _has_mmx(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_has_mmx'
        module_type_store = module_type_store.open_function_context('_has_mmx', 280, 4, False)
        # Assigning a type to the variable 'self' (line 281)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 281, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._has_mmx.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._has_mmx.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._has_mmx.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._has_mmx.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._has_mmx')
        LinuxCPUInfo._has_mmx.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._has_mmx.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._has_mmx.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._has_mmx.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._has_mmx.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._has_mmx.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._has_mmx.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._has_mmx', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_has_mmx', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_has_mmx(...)' code ##################

        
        
        # Call to match(...): (line 281)
        # Processing the call arguments (line 281)
        str_30440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 281, 24), 'str', '.*?\\bmmx\\b')
        
        # Obtaining the type of the subscript
        str_30441 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 281, 52), 'str', 'flags')
        
        # Obtaining the type of the subscript
        int_30442 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 281, 49), 'int')
        # Getting the type of 'self' (line 281)
        self_30443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 39), 'self', False)
        # Obtaining the member 'info' of a type (line 281)
        info_30444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 281, 39), self_30443, 'info')
        # Obtaining the member '__getitem__' of a type (line 281)
        getitem___30445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 281, 39), info_30444, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 281)
        subscript_call_result_30446 = invoke(stypy.reporting.localization.Localization(__file__, 281, 39), getitem___30445, int_30442)
        
        # Obtaining the member '__getitem__' of a type (line 281)
        getitem___30447 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 281, 39), subscript_call_result_30446, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 281)
        subscript_call_result_30448 = invoke(stypy.reporting.localization.Localization(__file__, 281, 39), getitem___30447, str_30441)
        
        # Processing the call keyword arguments (line 281)
        kwargs_30449 = {}
        # Getting the type of 're' (line 281)
        re_30438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 15), 're', False)
        # Obtaining the member 'match' of a type (line 281)
        match_30439 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 281, 15), re_30438, 'match')
        # Calling match(args, kwargs) (line 281)
        match_call_result_30450 = invoke(stypy.reporting.localization.Localization(__file__, 281, 15), match_30439, *[str_30440, subscript_call_result_30448], **kwargs_30449)
        
        # Getting the type of 'None' (line 281)
        None_30451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 69), 'None')
        # Applying the binary operator 'isnot' (line 281)
        result_is_not_30452 = python_operator(stypy.reporting.localization.Localization(__file__, 281, 15), 'isnot', match_call_result_30450, None_30451)
        
        # Assigning a type to the variable 'stypy_return_type' (line 281)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 281, 8), 'stypy_return_type', result_is_not_30452)
        
        # ################# End of '_has_mmx(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_has_mmx' in the type store
        # Getting the type of 'stypy_return_type' (line 280)
        stypy_return_type_30453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30453)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_has_mmx'
        return stypy_return_type_30453


    @norecursion
    def _has_sse(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_has_sse'
        module_type_store = module_type_store.open_function_context('_has_sse', 283, 4, False)
        # Assigning a type to the variable 'self' (line 284)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 284, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._has_sse.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._has_sse.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._has_sse.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._has_sse.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._has_sse')
        LinuxCPUInfo._has_sse.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._has_sse.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._has_sse.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._has_sse.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._has_sse.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._has_sse.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._has_sse.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._has_sse', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_has_sse', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_has_sse(...)' code ##################

        
        
        # Call to match(...): (line 284)
        # Processing the call arguments (line 284)
        str_30456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 284, 24), 'str', '.*?\\bsse\\b')
        
        # Obtaining the type of the subscript
        str_30457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 284, 52), 'str', 'flags')
        
        # Obtaining the type of the subscript
        int_30458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 284, 49), 'int')
        # Getting the type of 'self' (line 284)
        self_30459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 284, 39), 'self', False)
        # Obtaining the member 'info' of a type (line 284)
        info_30460 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 284, 39), self_30459, 'info')
        # Obtaining the member '__getitem__' of a type (line 284)
        getitem___30461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 284, 39), info_30460, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 284)
        subscript_call_result_30462 = invoke(stypy.reporting.localization.Localization(__file__, 284, 39), getitem___30461, int_30458)
        
        # Obtaining the member '__getitem__' of a type (line 284)
        getitem___30463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 284, 39), subscript_call_result_30462, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 284)
        subscript_call_result_30464 = invoke(stypy.reporting.localization.Localization(__file__, 284, 39), getitem___30463, str_30457)
        
        # Processing the call keyword arguments (line 284)
        kwargs_30465 = {}
        # Getting the type of 're' (line 284)
        re_30454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 284, 15), 're', False)
        # Obtaining the member 'match' of a type (line 284)
        match_30455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 284, 15), re_30454, 'match')
        # Calling match(args, kwargs) (line 284)
        match_call_result_30466 = invoke(stypy.reporting.localization.Localization(__file__, 284, 15), match_30455, *[str_30456, subscript_call_result_30464], **kwargs_30465)
        
        # Getting the type of 'None' (line 284)
        None_30467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 284, 69), 'None')
        # Applying the binary operator 'isnot' (line 284)
        result_is_not_30468 = python_operator(stypy.reporting.localization.Localization(__file__, 284, 15), 'isnot', match_call_result_30466, None_30467)
        
        # Assigning a type to the variable 'stypy_return_type' (line 284)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 284, 8), 'stypy_return_type', result_is_not_30468)
        
        # ################# End of '_has_sse(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_has_sse' in the type store
        # Getting the type of 'stypy_return_type' (line 283)
        stypy_return_type_30469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 283, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30469)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_has_sse'
        return stypy_return_type_30469


    @norecursion
    def _has_sse2(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_has_sse2'
        module_type_store = module_type_store.open_function_context('_has_sse2', 286, 4, False)
        # Assigning a type to the variable 'self' (line 287)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 287, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._has_sse2.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._has_sse2.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._has_sse2.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._has_sse2.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._has_sse2')
        LinuxCPUInfo._has_sse2.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._has_sse2.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._has_sse2.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._has_sse2.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._has_sse2.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._has_sse2.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._has_sse2.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._has_sse2', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_has_sse2', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_has_sse2(...)' code ##################

        
        
        # Call to match(...): (line 287)
        # Processing the call arguments (line 287)
        str_30472 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 287, 24), 'str', '.*?\\bsse2\\b')
        
        # Obtaining the type of the subscript
        str_30473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 287, 53), 'str', 'flags')
        
        # Obtaining the type of the subscript
        int_30474 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 287, 50), 'int')
        # Getting the type of 'self' (line 287)
        self_30475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 40), 'self', False)
        # Obtaining the member 'info' of a type (line 287)
        info_30476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 287, 40), self_30475, 'info')
        # Obtaining the member '__getitem__' of a type (line 287)
        getitem___30477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 287, 40), info_30476, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 287)
        subscript_call_result_30478 = invoke(stypy.reporting.localization.Localization(__file__, 287, 40), getitem___30477, int_30474)
        
        # Obtaining the member '__getitem__' of a type (line 287)
        getitem___30479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 287, 40), subscript_call_result_30478, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 287)
        subscript_call_result_30480 = invoke(stypy.reporting.localization.Localization(__file__, 287, 40), getitem___30479, str_30473)
        
        # Processing the call keyword arguments (line 287)
        kwargs_30481 = {}
        # Getting the type of 're' (line 287)
        re_30470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 15), 're', False)
        # Obtaining the member 'match' of a type (line 287)
        match_30471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 287, 15), re_30470, 'match')
        # Calling match(args, kwargs) (line 287)
        match_call_result_30482 = invoke(stypy.reporting.localization.Localization(__file__, 287, 15), match_30471, *[str_30472, subscript_call_result_30480], **kwargs_30481)
        
        # Getting the type of 'None' (line 287)
        None_30483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 70), 'None')
        # Applying the binary operator 'isnot' (line 287)
        result_is_not_30484 = python_operator(stypy.reporting.localization.Localization(__file__, 287, 15), 'isnot', match_call_result_30482, None_30483)
        
        # Assigning a type to the variable 'stypy_return_type' (line 287)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 287, 8), 'stypy_return_type', result_is_not_30484)
        
        # ################# End of '_has_sse2(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_has_sse2' in the type store
        # Getting the type of 'stypy_return_type' (line 286)
        stypy_return_type_30485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30485)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_has_sse2'
        return stypy_return_type_30485


    @norecursion
    def _has_sse3(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_has_sse3'
        module_type_store = module_type_store.open_function_context('_has_sse3', 289, 4, False)
        # Assigning a type to the variable 'self' (line 290)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 290, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._has_sse3.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._has_sse3.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._has_sse3.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._has_sse3.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._has_sse3')
        LinuxCPUInfo._has_sse3.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._has_sse3.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._has_sse3.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._has_sse3.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._has_sse3.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._has_sse3.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._has_sse3.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._has_sse3', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_has_sse3', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_has_sse3(...)' code ##################

        
        
        # Call to match(...): (line 290)
        # Processing the call arguments (line 290)
        str_30488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 290, 24), 'str', '.*?\\bpni\\b')
        
        # Obtaining the type of the subscript
        str_30489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 290, 52), 'str', 'flags')
        
        # Obtaining the type of the subscript
        int_30490 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 290, 49), 'int')
        # Getting the type of 'self' (line 290)
        self_30491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 39), 'self', False)
        # Obtaining the member 'info' of a type (line 290)
        info_30492 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 290, 39), self_30491, 'info')
        # Obtaining the member '__getitem__' of a type (line 290)
        getitem___30493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 290, 39), info_30492, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 290)
        subscript_call_result_30494 = invoke(stypy.reporting.localization.Localization(__file__, 290, 39), getitem___30493, int_30490)
        
        # Obtaining the member '__getitem__' of a type (line 290)
        getitem___30495 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 290, 39), subscript_call_result_30494, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 290)
        subscript_call_result_30496 = invoke(stypy.reporting.localization.Localization(__file__, 290, 39), getitem___30495, str_30489)
        
        # Processing the call keyword arguments (line 290)
        kwargs_30497 = {}
        # Getting the type of 're' (line 290)
        re_30486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 15), 're', False)
        # Obtaining the member 'match' of a type (line 290)
        match_30487 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 290, 15), re_30486, 'match')
        # Calling match(args, kwargs) (line 290)
        match_call_result_30498 = invoke(stypy.reporting.localization.Localization(__file__, 290, 15), match_30487, *[str_30488, subscript_call_result_30496], **kwargs_30497)
        
        # Getting the type of 'None' (line 290)
        None_30499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 69), 'None')
        # Applying the binary operator 'isnot' (line 290)
        result_is_not_30500 = python_operator(stypy.reporting.localization.Localization(__file__, 290, 15), 'isnot', match_call_result_30498, None_30499)
        
        # Assigning a type to the variable 'stypy_return_type' (line 290)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 290, 8), 'stypy_return_type', result_is_not_30500)
        
        # ################# End of '_has_sse3(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_has_sse3' in the type store
        # Getting the type of 'stypy_return_type' (line 289)
        stypy_return_type_30501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30501)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_has_sse3'
        return stypy_return_type_30501


    @norecursion
    def _has_ssse3(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_has_ssse3'
        module_type_store = module_type_store.open_function_context('_has_ssse3', 292, 4, False)
        # Assigning a type to the variable 'self' (line 293)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 293, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._has_ssse3.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._has_ssse3.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._has_ssse3.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._has_ssse3.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._has_ssse3')
        LinuxCPUInfo._has_ssse3.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._has_ssse3.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._has_ssse3.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._has_ssse3.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._has_ssse3.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._has_ssse3.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._has_ssse3.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._has_ssse3', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_has_ssse3', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_has_ssse3(...)' code ##################

        
        
        # Call to match(...): (line 293)
        # Processing the call arguments (line 293)
        str_30504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 293, 24), 'str', '.*?\\bssse3\\b')
        
        # Obtaining the type of the subscript
        str_30505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 293, 54), 'str', 'flags')
        
        # Obtaining the type of the subscript
        int_30506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 293, 51), 'int')
        # Getting the type of 'self' (line 293)
        self_30507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 41), 'self', False)
        # Obtaining the member 'info' of a type (line 293)
        info_30508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 293, 41), self_30507, 'info')
        # Obtaining the member '__getitem__' of a type (line 293)
        getitem___30509 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 293, 41), info_30508, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 293)
        subscript_call_result_30510 = invoke(stypy.reporting.localization.Localization(__file__, 293, 41), getitem___30509, int_30506)
        
        # Obtaining the member '__getitem__' of a type (line 293)
        getitem___30511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 293, 41), subscript_call_result_30510, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 293)
        subscript_call_result_30512 = invoke(stypy.reporting.localization.Localization(__file__, 293, 41), getitem___30511, str_30505)
        
        # Processing the call keyword arguments (line 293)
        kwargs_30513 = {}
        # Getting the type of 're' (line 293)
        re_30502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 15), 're', False)
        # Obtaining the member 'match' of a type (line 293)
        match_30503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 293, 15), re_30502, 'match')
        # Calling match(args, kwargs) (line 293)
        match_call_result_30514 = invoke(stypy.reporting.localization.Localization(__file__, 293, 15), match_30503, *[str_30504, subscript_call_result_30512], **kwargs_30513)
        
        # Getting the type of 'None' (line 293)
        None_30515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 293, 71), 'None')
        # Applying the binary operator 'isnot' (line 293)
        result_is_not_30516 = python_operator(stypy.reporting.localization.Localization(__file__, 293, 15), 'isnot', match_call_result_30514, None_30515)
        
        # Assigning a type to the variable 'stypy_return_type' (line 293)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 293, 8), 'stypy_return_type', result_is_not_30516)
        
        # ################# End of '_has_ssse3(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_has_ssse3' in the type store
        # Getting the type of 'stypy_return_type' (line 292)
        stypy_return_type_30517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30517)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_has_ssse3'
        return stypy_return_type_30517


    @norecursion
    def _has_3dnow(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_has_3dnow'
        module_type_store = module_type_store.open_function_context('_has_3dnow', 295, 4, False)
        # Assigning a type to the variable 'self' (line 296)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 296, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._has_3dnow.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._has_3dnow.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._has_3dnow.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._has_3dnow.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._has_3dnow')
        LinuxCPUInfo._has_3dnow.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._has_3dnow.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._has_3dnow.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._has_3dnow.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._has_3dnow.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._has_3dnow.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._has_3dnow.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._has_3dnow', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_has_3dnow', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_has_3dnow(...)' code ##################

        
        
        # Call to match(...): (line 296)
        # Processing the call arguments (line 296)
        str_30520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 296, 24), 'str', '.*?\\b3dnow\\b')
        
        # Obtaining the type of the subscript
        str_30521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 296, 54), 'str', 'flags')
        
        # Obtaining the type of the subscript
        int_30522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 296, 51), 'int')
        # Getting the type of 'self' (line 296)
        self_30523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 41), 'self', False)
        # Obtaining the member 'info' of a type (line 296)
        info_30524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 296, 41), self_30523, 'info')
        # Obtaining the member '__getitem__' of a type (line 296)
        getitem___30525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 296, 41), info_30524, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 296)
        subscript_call_result_30526 = invoke(stypy.reporting.localization.Localization(__file__, 296, 41), getitem___30525, int_30522)
        
        # Obtaining the member '__getitem__' of a type (line 296)
        getitem___30527 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 296, 41), subscript_call_result_30526, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 296)
        subscript_call_result_30528 = invoke(stypy.reporting.localization.Localization(__file__, 296, 41), getitem___30527, str_30521)
        
        # Processing the call keyword arguments (line 296)
        kwargs_30529 = {}
        # Getting the type of 're' (line 296)
        re_30518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 15), 're', False)
        # Obtaining the member 'match' of a type (line 296)
        match_30519 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 296, 15), re_30518, 'match')
        # Calling match(args, kwargs) (line 296)
        match_call_result_30530 = invoke(stypy.reporting.localization.Localization(__file__, 296, 15), match_30519, *[str_30520, subscript_call_result_30528], **kwargs_30529)
        
        # Getting the type of 'None' (line 296)
        None_30531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 71), 'None')
        # Applying the binary operator 'isnot' (line 296)
        result_is_not_30532 = python_operator(stypy.reporting.localization.Localization(__file__, 296, 15), 'isnot', match_call_result_30530, None_30531)
        
        # Assigning a type to the variable 'stypy_return_type' (line 296)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 296, 8), 'stypy_return_type', result_is_not_30532)
        
        # ################# End of '_has_3dnow(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_has_3dnow' in the type store
        # Getting the type of 'stypy_return_type' (line 295)
        stypy_return_type_30533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30533)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_has_3dnow'
        return stypy_return_type_30533


    @norecursion
    def _has_3dnowext(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_has_3dnowext'
        module_type_store = module_type_store.open_function_context('_has_3dnowext', 298, 4, False)
        # Assigning a type to the variable 'self' (line 299)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 299, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        LinuxCPUInfo._has_3dnowext.__dict__.__setitem__('stypy_localization', localization)
        LinuxCPUInfo._has_3dnowext.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        LinuxCPUInfo._has_3dnowext.__dict__.__setitem__('stypy_type_store', module_type_store)
        LinuxCPUInfo._has_3dnowext.__dict__.__setitem__('stypy_function_name', 'LinuxCPUInfo._has_3dnowext')
        LinuxCPUInfo._has_3dnowext.__dict__.__setitem__('stypy_param_names_list', [])
        LinuxCPUInfo._has_3dnowext.__dict__.__setitem__('stypy_varargs_param_name', None)
        LinuxCPUInfo._has_3dnowext.__dict__.__setitem__('stypy_kwargs_param_name', None)
        LinuxCPUInfo._has_3dnowext.__dict__.__setitem__('stypy_call_defaults', defaults)
        LinuxCPUInfo._has_3dnowext.__dict__.__setitem__('stypy_call_varargs', varargs)
        LinuxCPUInfo._has_3dnowext.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        LinuxCPUInfo._has_3dnowext.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'LinuxCPUInfo._has_3dnowext', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_has_3dnowext', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_has_3dnowext(...)' code ##################

        
        
        # Call to match(...): (line 299)
        # Processing the call arguments (line 299)
        str_30536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 299, 24), 'str', '.*?\\b3dnowext\\b')
        
        # Obtaining the type of the subscript
        str_30537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 299, 57), 'str', 'flags')
        
        # Obtaining the type of the subscript
        int_30538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 299, 54), 'int')
        # Getting the type of 'self' (line 299)
        self_30539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 44), 'self', False)
        # Obtaining the member 'info' of a type (line 299)
        info_30540 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 299, 44), self_30539, 'info')
        # Obtaining the member '__getitem__' of a type (line 299)
        getitem___30541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 299, 44), info_30540, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 299)
        subscript_call_result_30542 = invoke(stypy.reporting.localization.Localization(__file__, 299, 44), getitem___30541, int_30538)
        
        # Obtaining the member '__getitem__' of a type (line 299)
        getitem___30543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 299, 44), subscript_call_result_30542, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 299)
        subscript_call_result_30544 = invoke(stypy.reporting.localization.Localization(__file__, 299, 44), getitem___30543, str_30537)
        
        # Processing the call keyword arguments (line 299)
        kwargs_30545 = {}
        # Getting the type of 're' (line 299)
        re_30534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 15), 're', False)
        # Obtaining the member 'match' of a type (line 299)
        match_30535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 299, 15), re_30534, 'match')
        # Calling match(args, kwargs) (line 299)
        match_call_result_30546 = invoke(stypy.reporting.localization.Localization(__file__, 299, 15), match_30535, *[str_30536, subscript_call_result_30544], **kwargs_30545)
        
        # Getting the type of 'None' (line 299)
        None_30547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 74), 'None')
        # Applying the binary operator 'isnot' (line 299)
        result_is_not_30548 = python_operator(stypy.reporting.localization.Localization(__file__, 299, 15), 'isnot', match_call_result_30546, None_30547)
        
        # Assigning a type to the variable 'stypy_return_type' (line 299)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 299, 8), 'stypy_return_type', result_is_not_30548)
        
        # ################# End of '_has_3dnowext(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_has_3dnowext' in the type store
        # Getting the type of 'stypy_return_type' (line 298)
        stypy_return_type_30549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30549)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_has_3dnowext'
        return stypy_return_type_30549


# Assigning a type to the variable 'LinuxCPUInfo' (line 105)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 105, 0), 'LinuxCPUInfo', LinuxCPUInfo)

# Assigning a Name to a Name (line 107):
# Getting the type of 'None' (line 107)
None_30550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 107, 11), 'None')
# Getting the type of 'LinuxCPUInfo'
LinuxCPUInfo_30551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'LinuxCPUInfo')
# Setting the type of the member 'info' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), LinuxCPUInfo_30551, 'info', None_30550)

# Assigning a Name to a Name (line 195):
# Getting the type of 'LinuxCPUInfo'
LinuxCPUInfo_30552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'LinuxCPUInfo')
# Obtaining the member '_not_impl' of a type
_not_impl_30553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), LinuxCPUInfo_30552, '_not_impl')
# Getting the type of 'LinuxCPUInfo'
LinuxCPUInfo_30554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'LinuxCPUInfo')
# Setting the type of the member '_is_i386' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), LinuxCPUInfo_30554, '_is_i386', _not_impl_30553)

# Assigning a Name to a Name (line 264):
# Getting the type of 'LinuxCPUInfo'
LinuxCPUInfo_30555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'LinuxCPUInfo')
# Obtaining the member '_is_XEON' of a type
_is_XEON_30556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), LinuxCPUInfo_30555, '_is_XEON')
# Getting the type of 'LinuxCPUInfo'
LinuxCPUInfo_30557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'LinuxCPUInfo')
# Setting the type of the member '_is_Xeon' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), LinuxCPUInfo_30557, '_is_Xeon', _is_XEON_30556)
# Declaration of the 'IRIXCPUInfo' class
# Getting the type of 'CPUInfoBase' (line 301)
CPUInfoBase_30558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 301, 18), 'CPUInfoBase')

class IRIXCPUInfo(CPUInfoBase_30558, ):
    
    # Assigning a Name to a Name (line 302):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 304, 4, False)
        # Assigning a type to the variable 'self' (line 305)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 305, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IRIXCPUInfo.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        
        # Getting the type of 'self' (line 305)
        self_30559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 11), 'self')
        # Obtaining the member 'info' of a type (line 305)
        info_30560 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 305, 11), self_30559, 'info')
        # Getting the type of 'None' (line 305)
        None_30561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 28), 'None')
        # Applying the binary operator 'isnot' (line 305)
        result_is_not_30562 = python_operator(stypy.reporting.localization.Localization(__file__, 305, 11), 'isnot', info_30560, None_30561)
        
        # Testing the type of an if condition (line 305)
        if_condition_30563 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 305, 8), result_is_not_30562)
        # Assigning a type to the variable 'if_condition_30563' (line 305)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 305, 8), 'if_condition_30563', if_condition_30563)
        # SSA begins for if statement (line 305)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 306)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 306, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 305)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 307):
        
        # Assigning a Call to a Name (line 307):
        
        # Call to key_value_from_command(...): (line 307)
        # Processing the call arguments (line 307)
        str_30565 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 307, 38), 'str', 'sysconf')
        # Processing the call keyword arguments (line 307)
        str_30566 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 307, 53), 'str', ' ')
        keyword_30567 = str_30566
        
        # Obtaining an instance of the builtin type 'tuple' (line 308)
        tuple_30568 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 308, 57), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 308)
        # Adding element type (line 308)
        int_30569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 308, 57), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 308, 57), tuple_30568, int_30569)
        # Adding element type (line 308)
        int_30570 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 308, 60), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 308, 57), tuple_30568, int_30570)
        
        keyword_30571 = tuple_30568
        kwargs_30572 = {'successful_status': keyword_30571, 'sep': keyword_30567}
        # Getting the type of 'key_value_from_command' (line 307)
        key_value_from_command_30564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 307, 15), 'key_value_from_command', False)
        # Calling key_value_from_command(args, kwargs) (line 307)
        key_value_from_command_call_result_30573 = invoke(stypy.reporting.localization.Localization(__file__, 307, 15), key_value_from_command_30564, *[str_30565], **kwargs_30572)
        
        # Assigning a type to the variable 'info' (line 307)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 307, 8), 'info', key_value_from_command_call_result_30573)
        
        # Assigning a Name to a Attribute (line 309):
        
        # Assigning a Name to a Attribute (line 309):
        # Getting the type of 'info' (line 309)
        info_30574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 30), 'info')
        # Getting the type of 'self' (line 309)
        self_30575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 8), 'self')
        # Obtaining the member '__class__' of a type (line 309)
        class___30576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 309, 8), self_30575, '__class__')
        # Setting the type of the member 'info' of a type (line 309)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 309, 8), class___30576, 'info', info_30574)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _not_impl(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_not_impl'
        module_type_store = module_type_store.open_function_context('_not_impl', 311, 4, False)
        # Assigning a type to the variable 'self' (line 312)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 312, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IRIXCPUInfo._not_impl.__dict__.__setitem__('stypy_localization', localization)
        IRIXCPUInfo._not_impl.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IRIXCPUInfo._not_impl.__dict__.__setitem__('stypy_type_store', module_type_store)
        IRIXCPUInfo._not_impl.__dict__.__setitem__('stypy_function_name', 'IRIXCPUInfo._not_impl')
        IRIXCPUInfo._not_impl.__dict__.__setitem__('stypy_param_names_list', [])
        IRIXCPUInfo._not_impl.__dict__.__setitem__('stypy_varargs_param_name', None)
        IRIXCPUInfo._not_impl.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IRIXCPUInfo._not_impl.__dict__.__setitem__('stypy_call_defaults', defaults)
        IRIXCPUInfo._not_impl.__dict__.__setitem__('stypy_call_varargs', varargs)
        IRIXCPUInfo._not_impl.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IRIXCPUInfo._not_impl.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IRIXCPUInfo._not_impl', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_not_impl', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_not_impl(...)' code ##################

        pass
        
        # ################# End of '_not_impl(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_not_impl' in the type store
        # Getting the type of 'stypy_return_type' (line 311)
        stypy_return_type_30577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30577)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_not_impl'
        return stypy_return_type_30577


    @norecursion
    def _is_singleCPU(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_singleCPU'
        module_type_store = module_type_store.open_function_context('_is_singleCPU', 313, 4, False)
        # Assigning a type to the variable 'self' (line 314)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 314, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IRIXCPUInfo._is_singleCPU.__dict__.__setitem__('stypy_localization', localization)
        IRIXCPUInfo._is_singleCPU.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IRIXCPUInfo._is_singleCPU.__dict__.__setitem__('stypy_type_store', module_type_store)
        IRIXCPUInfo._is_singleCPU.__dict__.__setitem__('stypy_function_name', 'IRIXCPUInfo._is_singleCPU')
        IRIXCPUInfo._is_singleCPU.__dict__.__setitem__('stypy_param_names_list', [])
        IRIXCPUInfo._is_singleCPU.__dict__.__setitem__('stypy_varargs_param_name', None)
        IRIXCPUInfo._is_singleCPU.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IRIXCPUInfo._is_singleCPU.__dict__.__setitem__('stypy_call_defaults', defaults)
        IRIXCPUInfo._is_singleCPU.__dict__.__setitem__('stypy_call_varargs', varargs)
        IRIXCPUInfo._is_singleCPU.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IRIXCPUInfo._is_singleCPU.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IRIXCPUInfo._is_singleCPU', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_singleCPU', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_singleCPU(...)' code ##################

        
        
        # Call to get(...): (line 314)
        # Processing the call arguments (line 314)
        str_30581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 314, 29), 'str', 'NUM_PROCESSORS')
        # Processing the call keyword arguments (line 314)
        kwargs_30582 = {}
        # Getting the type of 'self' (line 314)
        self_30578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 15), 'self', False)
        # Obtaining the member 'info' of a type (line 314)
        info_30579 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 314, 15), self_30578, 'info')
        # Obtaining the member 'get' of a type (line 314)
        get_30580 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 314, 15), info_30579, 'get')
        # Calling get(args, kwargs) (line 314)
        get_call_result_30583 = invoke(stypy.reporting.localization.Localization(__file__, 314, 15), get_30580, *[str_30581], **kwargs_30582)
        
        str_30584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 314, 50), 'str', '1')
        # Applying the binary operator '==' (line 314)
        result_eq_30585 = python_operator(stypy.reporting.localization.Localization(__file__, 314, 15), '==', get_call_result_30583, str_30584)
        
        # Assigning a type to the variable 'stypy_return_type' (line 314)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 314, 8), 'stypy_return_type', result_eq_30585)
        
        # ################# End of '_is_singleCPU(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_singleCPU' in the type store
        # Getting the type of 'stypy_return_type' (line 313)
        stypy_return_type_30586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 313, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30586)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_singleCPU'
        return stypy_return_type_30586


    @norecursion
    def _getNCPUs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_getNCPUs'
        module_type_store = module_type_store.open_function_context('_getNCPUs', 316, 4, False)
        # Assigning a type to the variable 'self' (line 317)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 317, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IRIXCPUInfo._getNCPUs.__dict__.__setitem__('stypy_localization', localization)
        IRIXCPUInfo._getNCPUs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IRIXCPUInfo._getNCPUs.__dict__.__setitem__('stypy_type_store', module_type_store)
        IRIXCPUInfo._getNCPUs.__dict__.__setitem__('stypy_function_name', 'IRIXCPUInfo._getNCPUs')
        IRIXCPUInfo._getNCPUs.__dict__.__setitem__('stypy_param_names_list', [])
        IRIXCPUInfo._getNCPUs.__dict__.__setitem__('stypy_varargs_param_name', None)
        IRIXCPUInfo._getNCPUs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IRIXCPUInfo._getNCPUs.__dict__.__setitem__('stypy_call_defaults', defaults)
        IRIXCPUInfo._getNCPUs.__dict__.__setitem__('stypy_call_varargs', varargs)
        IRIXCPUInfo._getNCPUs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IRIXCPUInfo._getNCPUs.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IRIXCPUInfo._getNCPUs', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_getNCPUs', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_getNCPUs(...)' code ##################

        
        # Call to int(...): (line 317)
        # Processing the call arguments (line 317)
        
        # Call to get(...): (line 317)
        # Processing the call arguments (line 317)
        str_30591 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 317, 33), 'str', 'NUM_PROCESSORS')
        int_30592 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 317, 51), 'int')
        # Processing the call keyword arguments (line 317)
        kwargs_30593 = {}
        # Getting the type of 'self' (line 317)
        self_30588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 19), 'self', False)
        # Obtaining the member 'info' of a type (line 317)
        info_30589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 317, 19), self_30588, 'info')
        # Obtaining the member 'get' of a type (line 317)
        get_30590 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 317, 19), info_30589, 'get')
        # Calling get(args, kwargs) (line 317)
        get_call_result_30594 = invoke(stypy.reporting.localization.Localization(__file__, 317, 19), get_30590, *[str_30591, int_30592], **kwargs_30593)
        
        # Processing the call keyword arguments (line 317)
        kwargs_30595 = {}
        # Getting the type of 'int' (line 317)
        int_30587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 15), 'int', False)
        # Calling int(args, kwargs) (line 317)
        int_call_result_30596 = invoke(stypy.reporting.localization.Localization(__file__, 317, 15), int_30587, *[get_call_result_30594], **kwargs_30595)
        
        # Assigning a type to the variable 'stypy_return_type' (line 317)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 317, 8), 'stypy_return_type', int_call_result_30596)
        
        # ################# End of '_getNCPUs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_getNCPUs' in the type store
        # Getting the type of 'stypy_return_type' (line 316)
        stypy_return_type_30597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30597)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_getNCPUs'
        return stypy_return_type_30597


    @norecursion
    def __cputype(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__cputype'
        module_type_store = module_type_store.open_function_context('__cputype', 319, 4, False)
        # Assigning a type to the variable 'self' (line 320)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 320, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IRIXCPUInfo.__cputype.__dict__.__setitem__('stypy_localization', localization)
        IRIXCPUInfo.__cputype.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IRIXCPUInfo.__cputype.__dict__.__setitem__('stypy_type_store', module_type_store)
        IRIXCPUInfo.__cputype.__dict__.__setitem__('stypy_function_name', 'IRIXCPUInfo.__cputype')
        IRIXCPUInfo.__cputype.__dict__.__setitem__('stypy_param_names_list', ['n'])
        IRIXCPUInfo.__cputype.__dict__.__setitem__('stypy_varargs_param_name', None)
        IRIXCPUInfo.__cputype.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IRIXCPUInfo.__cputype.__dict__.__setitem__('stypy_call_defaults', defaults)
        IRIXCPUInfo.__cputype.__dict__.__setitem__('stypy_call_varargs', varargs)
        IRIXCPUInfo.__cputype.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IRIXCPUInfo.__cputype.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IRIXCPUInfo.__cputype', ['n'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__cputype', localization, ['n'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__cputype(...)' code ##################

        
        
        # Call to lower(...): (line 320)
        # Processing the call keyword arguments (line 320)
        kwargs_30611 = {}
        
        # Obtaining the type of the subscript
        int_30598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 320, 51), 'int')
        
        # Call to split(...): (line 320)
        # Processing the call keyword arguments (line 320)
        kwargs_30606 = {}
        
        # Call to get(...): (line 320)
        # Processing the call arguments (line 320)
        str_30602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 320, 29), 'str', 'PROCESSORS')
        # Processing the call keyword arguments (line 320)
        kwargs_30603 = {}
        # Getting the type of 'self' (line 320)
        self_30599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 15), 'self', False)
        # Obtaining the member 'info' of a type (line 320)
        info_30600 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 320, 15), self_30599, 'info')
        # Obtaining the member 'get' of a type (line 320)
        get_30601 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 320, 15), info_30600, 'get')
        # Calling get(args, kwargs) (line 320)
        get_call_result_30604 = invoke(stypy.reporting.localization.Localization(__file__, 320, 15), get_30601, *[str_30602], **kwargs_30603)
        
        # Obtaining the member 'split' of a type (line 320)
        split_30605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 320, 15), get_call_result_30604, 'split')
        # Calling split(args, kwargs) (line 320)
        split_call_result_30607 = invoke(stypy.reporting.localization.Localization(__file__, 320, 15), split_30605, *[], **kwargs_30606)
        
        # Obtaining the member '__getitem__' of a type (line 320)
        getitem___30608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 320, 15), split_call_result_30607, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 320)
        subscript_call_result_30609 = invoke(stypy.reporting.localization.Localization(__file__, 320, 15), getitem___30608, int_30598)
        
        # Obtaining the member 'lower' of a type (line 320)
        lower_30610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 320, 15), subscript_call_result_30609, 'lower')
        # Calling lower(args, kwargs) (line 320)
        lower_call_result_30612 = invoke(stypy.reporting.localization.Localization(__file__, 320, 15), lower_30610, *[], **kwargs_30611)
        
        str_30613 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 320, 65), 'str', 'r%s')
        # Getting the type of 'n' (line 320)
        n_30614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 74), 'n')
        # Applying the binary operator '%' (line 320)
        result_mod_30615 = python_operator(stypy.reporting.localization.Localization(__file__, 320, 65), '%', str_30613, n_30614)
        
        # Applying the binary operator '==' (line 320)
        result_eq_30616 = python_operator(stypy.reporting.localization.Localization(__file__, 320, 15), '==', lower_call_result_30612, result_mod_30615)
        
        # Assigning a type to the variable 'stypy_return_type' (line 320)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 320, 8), 'stypy_return_type', result_eq_30616)
        
        # ################# End of '__cputype(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__cputype' in the type store
        # Getting the type of 'stypy_return_type' (line 319)
        stypy_return_type_30617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30617)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__cputype'
        return stypy_return_type_30617


    @norecursion
    def _is_r2000(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_r2000'
        module_type_store = module_type_store.open_function_context('_is_r2000', 321, 4, False)
        # Assigning a type to the variable 'self' (line 322)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 322, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IRIXCPUInfo._is_r2000.__dict__.__setitem__('stypy_localization', localization)
        IRIXCPUInfo._is_r2000.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IRIXCPUInfo._is_r2000.__dict__.__setitem__('stypy_type_store', module_type_store)
        IRIXCPUInfo._is_r2000.__dict__.__setitem__('stypy_function_name', 'IRIXCPUInfo._is_r2000')
        IRIXCPUInfo._is_r2000.__dict__.__setitem__('stypy_param_names_list', [])
        IRIXCPUInfo._is_r2000.__dict__.__setitem__('stypy_varargs_param_name', None)
        IRIXCPUInfo._is_r2000.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IRIXCPUInfo._is_r2000.__dict__.__setitem__('stypy_call_defaults', defaults)
        IRIXCPUInfo._is_r2000.__dict__.__setitem__('stypy_call_varargs', varargs)
        IRIXCPUInfo._is_r2000.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IRIXCPUInfo._is_r2000.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IRIXCPUInfo._is_r2000', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_r2000', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_r2000(...)' code ##################

        
        # Call to __cputype(...): (line 321)
        # Processing the call arguments (line 321)
        int_30620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 321, 47), 'int')
        # Processing the call keyword arguments (line 321)
        kwargs_30621 = {}
        # Getting the type of 'self' (line 321)
        self_30618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 32), 'self', False)
        # Obtaining the member '__cputype' of a type (line 321)
        cputype_30619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 321, 32), self_30618, '__cputype')
        # Calling __cputype(args, kwargs) (line 321)
        cputype_call_result_30622 = invoke(stypy.reporting.localization.Localization(__file__, 321, 32), cputype_30619, *[int_30620], **kwargs_30621)
        
        # Assigning a type to the variable 'stypy_return_type' (line 321)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 321, 25), 'stypy_return_type', cputype_call_result_30622)
        
        # ################# End of '_is_r2000(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_r2000' in the type store
        # Getting the type of 'stypy_return_type' (line 321)
        stypy_return_type_30623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30623)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_r2000'
        return stypy_return_type_30623


    @norecursion
    def _is_r3000(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_r3000'
        module_type_store = module_type_store.open_function_context('_is_r3000', 322, 4, False)
        # Assigning a type to the variable 'self' (line 323)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 323, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IRIXCPUInfo._is_r3000.__dict__.__setitem__('stypy_localization', localization)
        IRIXCPUInfo._is_r3000.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IRIXCPUInfo._is_r3000.__dict__.__setitem__('stypy_type_store', module_type_store)
        IRIXCPUInfo._is_r3000.__dict__.__setitem__('stypy_function_name', 'IRIXCPUInfo._is_r3000')
        IRIXCPUInfo._is_r3000.__dict__.__setitem__('stypy_param_names_list', [])
        IRIXCPUInfo._is_r3000.__dict__.__setitem__('stypy_varargs_param_name', None)
        IRIXCPUInfo._is_r3000.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IRIXCPUInfo._is_r3000.__dict__.__setitem__('stypy_call_defaults', defaults)
        IRIXCPUInfo._is_r3000.__dict__.__setitem__('stypy_call_varargs', varargs)
        IRIXCPUInfo._is_r3000.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IRIXCPUInfo._is_r3000.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IRIXCPUInfo._is_r3000', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_r3000', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_r3000(...)' code ##################

        
        # Call to __cputype(...): (line 322)
        # Processing the call arguments (line 322)
        int_30626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 322, 47), 'int')
        # Processing the call keyword arguments (line 322)
        kwargs_30627 = {}
        # Getting the type of 'self' (line 322)
        self_30624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 32), 'self', False)
        # Obtaining the member '__cputype' of a type (line 322)
        cputype_30625 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 322, 32), self_30624, '__cputype')
        # Calling __cputype(args, kwargs) (line 322)
        cputype_call_result_30628 = invoke(stypy.reporting.localization.Localization(__file__, 322, 32), cputype_30625, *[int_30626], **kwargs_30627)
        
        # Assigning a type to the variable 'stypy_return_type' (line 322)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 322, 25), 'stypy_return_type', cputype_call_result_30628)
        
        # ################# End of '_is_r3000(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_r3000' in the type store
        # Getting the type of 'stypy_return_type' (line 322)
        stypy_return_type_30629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30629)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_r3000'
        return stypy_return_type_30629


    @norecursion
    def _is_r3900(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_r3900'
        module_type_store = module_type_store.open_function_context('_is_r3900', 323, 4, False)
        # Assigning a type to the variable 'self' (line 324)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 324, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IRIXCPUInfo._is_r3900.__dict__.__setitem__('stypy_localization', localization)
        IRIXCPUInfo._is_r3900.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IRIXCPUInfo._is_r3900.__dict__.__setitem__('stypy_type_store', module_type_store)
        IRIXCPUInfo._is_r3900.__dict__.__setitem__('stypy_function_name', 'IRIXCPUInfo._is_r3900')
        IRIXCPUInfo._is_r3900.__dict__.__setitem__('stypy_param_names_list', [])
        IRIXCPUInfo._is_r3900.__dict__.__setitem__('stypy_varargs_param_name', None)
        IRIXCPUInfo._is_r3900.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IRIXCPUInfo._is_r3900.__dict__.__setitem__('stypy_call_defaults', defaults)
        IRIXCPUInfo._is_r3900.__dict__.__setitem__('stypy_call_varargs', varargs)
        IRIXCPUInfo._is_r3900.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IRIXCPUInfo._is_r3900.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IRIXCPUInfo._is_r3900', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_r3900', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_r3900(...)' code ##################

        
        # Call to __cputype(...): (line 323)
        # Processing the call arguments (line 323)
        int_30632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 323, 47), 'int')
        # Processing the call keyword arguments (line 323)
        kwargs_30633 = {}
        # Getting the type of 'self' (line 323)
        self_30630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 32), 'self', False)
        # Obtaining the member '__cputype' of a type (line 323)
        cputype_30631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 323, 32), self_30630, '__cputype')
        # Calling __cputype(args, kwargs) (line 323)
        cputype_call_result_30634 = invoke(stypy.reporting.localization.Localization(__file__, 323, 32), cputype_30631, *[int_30632], **kwargs_30633)
        
        # Assigning a type to the variable 'stypy_return_type' (line 323)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 323, 25), 'stypy_return_type', cputype_call_result_30634)
        
        # ################# End of '_is_r3900(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_r3900' in the type store
        # Getting the type of 'stypy_return_type' (line 323)
        stypy_return_type_30635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30635)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_r3900'
        return stypy_return_type_30635


    @norecursion
    def _is_r4000(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_r4000'
        module_type_store = module_type_store.open_function_context('_is_r4000', 324, 4, False)
        # Assigning a type to the variable 'self' (line 325)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 325, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IRIXCPUInfo._is_r4000.__dict__.__setitem__('stypy_localization', localization)
        IRIXCPUInfo._is_r4000.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IRIXCPUInfo._is_r4000.__dict__.__setitem__('stypy_type_store', module_type_store)
        IRIXCPUInfo._is_r4000.__dict__.__setitem__('stypy_function_name', 'IRIXCPUInfo._is_r4000')
        IRIXCPUInfo._is_r4000.__dict__.__setitem__('stypy_param_names_list', [])
        IRIXCPUInfo._is_r4000.__dict__.__setitem__('stypy_varargs_param_name', None)
        IRIXCPUInfo._is_r4000.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IRIXCPUInfo._is_r4000.__dict__.__setitem__('stypy_call_defaults', defaults)
        IRIXCPUInfo._is_r4000.__dict__.__setitem__('stypy_call_varargs', varargs)
        IRIXCPUInfo._is_r4000.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IRIXCPUInfo._is_r4000.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IRIXCPUInfo._is_r4000', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_r4000', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_r4000(...)' code ##################

        
        # Call to __cputype(...): (line 324)
        # Processing the call arguments (line 324)
        int_30638 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 324, 47), 'int')
        # Processing the call keyword arguments (line 324)
        kwargs_30639 = {}
        # Getting the type of 'self' (line 324)
        self_30636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 324, 32), 'self', False)
        # Obtaining the member '__cputype' of a type (line 324)
        cputype_30637 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 324, 32), self_30636, '__cputype')
        # Calling __cputype(args, kwargs) (line 324)
        cputype_call_result_30640 = invoke(stypy.reporting.localization.Localization(__file__, 324, 32), cputype_30637, *[int_30638], **kwargs_30639)
        
        # Assigning a type to the variable 'stypy_return_type' (line 324)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 324, 25), 'stypy_return_type', cputype_call_result_30640)
        
        # ################# End of '_is_r4000(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_r4000' in the type store
        # Getting the type of 'stypy_return_type' (line 324)
        stypy_return_type_30641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 324, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30641)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_r4000'
        return stypy_return_type_30641


    @norecursion
    def _is_r4100(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_r4100'
        module_type_store = module_type_store.open_function_context('_is_r4100', 325, 4, False)
        # Assigning a type to the variable 'self' (line 326)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 326, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IRIXCPUInfo._is_r4100.__dict__.__setitem__('stypy_localization', localization)
        IRIXCPUInfo._is_r4100.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IRIXCPUInfo._is_r4100.__dict__.__setitem__('stypy_type_store', module_type_store)
        IRIXCPUInfo._is_r4100.__dict__.__setitem__('stypy_function_name', 'IRIXCPUInfo._is_r4100')
        IRIXCPUInfo._is_r4100.__dict__.__setitem__('stypy_param_names_list', [])
        IRIXCPUInfo._is_r4100.__dict__.__setitem__('stypy_varargs_param_name', None)
        IRIXCPUInfo._is_r4100.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IRIXCPUInfo._is_r4100.__dict__.__setitem__('stypy_call_defaults', defaults)
        IRIXCPUInfo._is_r4100.__dict__.__setitem__('stypy_call_varargs', varargs)
        IRIXCPUInfo._is_r4100.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IRIXCPUInfo._is_r4100.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IRIXCPUInfo._is_r4100', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_r4100', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_r4100(...)' code ##################

        
        # Call to __cputype(...): (line 325)
        # Processing the call arguments (line 325)
        int_30644 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 325, 47), 'int')
        # Processing the call keyword arguments (line 325)
        kwargs_30645 = {}
        # Getting the type of 'self' (line 325)
        self_30642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 32), 'self', False)
        # Obtaining the member '__cputype' of a type (line 325)
        cputype_30643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 325, 32), self_30642, '__cputype')
        # Calling __cputype(args, kwargs) (line 325)
        cputype_call_result_30646 = invoke(stypy.reporting.localization.Localization(__file__, 325, 32), cputype_30643, *[int_30644], **kwargs_30645)
        
        # Assigning a type to the variable 'stypy_return_type' (line 325)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 325, 25), 'stypy_return_type', cputype_call_result_30646)
        
        # ################# End of '_is_r4100(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_r4100' in the type store
        # Getting the type of 'stypy_return_type' (line 325)
        stypy_return_type_30647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30647)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_r4100'
        return stypy_return_type_30647


    @norecursion
    def _is_r4300(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_r4300'
        module_type_store = module_type_store.open_function_context('_is_r4300', 326, 4, False)
        # Assigning a type to the variable 'self' (line 327)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 327, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IRIXCPUInfo._is_r4300.__dict__.__setitem__('stypy_localization', localization)
        IRIXCPUInfo._is_r4300.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IRIXCPUInfo._is_r4300.__dict__.__setitem__('stypy_type_store', module_type_store)
        IRIXCPUInfo._is_r4300.__dict__.__setitem__('stypy_function_name', 'IRIXCPUInfo._is_r4300')
        IRIXCPUInfo._is_r4300.__dict__.__setitem__('stypy_param_names_list', [])
        IRIXCPUInfo._is_r4300.__dict__.__setitem__('stypy_varargs_param_name', None)
        IRIXCPUInfo._is_r4300.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IRIXCPUInfo._is_r4300.__dict__.__setitem__('stypy_call_defaults', defaults)
        IRIXCPUInfo._is_r4300.__dict__.__setitem__('stypy_call_varargs', varargs)
        IRIXCPUInfo._is_r4300.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IRIXCPUInfo._is_r4300.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IRIXCPUInfo._is_r4300', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_r4300', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_r4300(...)' code ##################

        
        # Call to __cputype(...): (line 326)
        # Processing the call arguments (line 326)
        int_30650 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 326, 47), 'int')
        # Processing the call keyword arguments (line 326)
        kwargs_30651 = {}
        # Getting the type of 'self' (line 326)
        self_30648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 32), 'self', False)
        # Obtaining the member '__cputype' of a type (line 326)
        cputype_30649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 326, 32), self_30648, '__cputype')
        # Calling __cputype(args, kwargs) (line 326)
        cputype_call_result_30652 = invoke(stypy.reporting.localization.Localization(__file__, 326, 32), cputype_30649, *[int_30650], **kwargs_30651)
        
        # Assigning a type to the variable 'stypy_return_type' (line 326)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 326, 25), 'stypy_return_type', cputype_call_result_30652)
        
        # ################# End of '_is_r4300(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_r4300' in the type store
        # Getting the type of 'stypy_return_type' (line 326)
        stypy_return_type_30653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30653)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_r4300'
        return stypy_return_type_30653


    @norecursion
    def _is_r4400(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_r4400'
        module_type_store = module_type_store.open_function_context('_is_r4400', 327, 4, False)
        # Assigning a type to the variable 'self' (line 328)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 328, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IRIXCPUInfo._is_r4400.__dict__.__setitem__('stypy_localization', localization)
        IRIXCPUInfo._is_r4400.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IRIXCPUInfo._is_r4400.__dict__.__setitem__('stypy_type_store', module_type_store)
        IRIXCPUInfo._is_r4400.__dict__.__setitem__('stypy_function_name', 'IRIXCPUInfo._is_r4400')
        IRIXCPUInfo._is_r4400.__dict__.__setitem__('stypy_param_names_list', [])
        IRIXCPUInfo._is_r4400.__dict__.__setitem__('stypy_varargs_param_name', None)
        IRIXCPUInfo._is_r4400.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IRIXCPUInfo._is_r4400.__dict__.__setitem__('stypy_call_defaults', defaults)
        IRIXCPUInfo._is_r4400.__dict__.__setitem__('stypy_call_varargs', varargs)
        IRIXCPUInfo._is_r4400.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IRIXCPUInfo._is_r4400.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IRIXCPUInfo._is_r4400', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_r4400', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_r4400(...)' code ##################

        
        # Call to __cputype(...): (line 327)
        # Processing the call arguments (line 327)
        int_30656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 327, 47), 'int')
        # Processing the call keyword arguments (line 327)
        kwargs_30657 = {}
        # Getting the type of 'self' (line 327)
        self_30654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 32), 'self', False)
        # Obtaining the member '__cputype' of a type (line 327)
        cputype_30655 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 327, 32), self_30654, '__cputype')
        # Calling __cputype(args, kwargs) (line 327)
        cputype_call_result_30658 = invoke(stypy.reporting.localization.Localization(__file__, 327, 32), cputype_30655, *[int_30656], **kwargs_30657)
        
        # Assigning a type to the variable 'stypy_return_type' (line 327)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 327, 25), 'stypy_return_type', cputype_call_result_30658)
        
        # ################# End of '_is_r4400(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_r4400' in the type store
        # Getting the type of 'stypy_return_type' (line 327)
        stypy_return_type_30659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30659)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_r4400'
        return stypy_return_type_30659


    @norecursion
    def _is_r4600(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_r4600'
        module_type_store = module_type_store.open_function_context('_is_r4600', 328, 4, False)
        # Assigning a type to the variable 'self' (line 329)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 329, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IRIXCPUInfo._is_r4600.__dict__.__setitem__('stypy_localization', localization)
        IRIXCPUInfo._is_r4600.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IRIXCPUInfo._is_r4600.__dict__.__setitem__('stypy_type_store', module_type_store)
        IRIXCPUInfo._is_r4600.__dict__.__setitem__('stypy_function_name', 'IRIXCPUInfo._is_r4600')
        IRIXCPUInfo._is_r4600.__dict__.__setitem__('stypy_param_names_list', [])
        IRIXCPUInfo._is_r4600.__dict__.__setitem__('stypy_varargs_param_name', None)
        IRIXCPUInfo._is_r4600.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IRIXCPUInfo._is_r4600.__dict__.__setitem__('stypy_call_defaults', defaults)
        IRIXCPUInfo._is_r4600.__dict__.__setitem__('stypy_call_varargs', varargs)
        IRIXCPUInfo._is_r4600.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IRIXCPUInfo._is_r4600.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IRIXCPUInfo._is_r4600', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_r4600', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_r4600(...)' code ##################

        
        # Call to __cputype(...): (line 328)
        # Processing the call arguments (line 328)
        int_30662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 328, 47), 'int')
        # Processing the call keyword arguments (line 328)
        kwargs_30663 = {}
        # Getting the type of 'self' (line 328)
        self_30660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 328, 32), 'self', False)
        # Obtaining the member '__cputype' of a type (line 328)
        cputype_30661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 328, 32), self_30660, '__cputype')
        # Calling __cputype(args, kwargs) (line 328)
        cputype_call_result_30664 = invoke(stypy.reporting.localization.Localization(__file__, 328, 32), cputype_30661, *[int_30662], **kwargs_30663)
        
        # Assigning a type to the variable 'stypy_return_type' (line 328)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 328, 25), 'stypy_return_type', cputype_call_result_30664)
        
        # ################# End of '_is_r4600(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_r4600' in the type store
        # Getting the type of 'stypy_return_type' (line 328)
        stypy_return_type_30665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 328, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30665)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_r4600'
        return stypy_return_type_30665


    @norecursion
    def _is_r4650(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_r4650'
        module_type_store = module_type_store.open_function_context('_is_r4650', 329, 4, False)
        # Assigning a type to the variable 'self' (line 330)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 330, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IRIXCPUInfo._is_r4650.__dict__.__setitem__('stypy_localization', localization)
        IRIXCPUInfo._is_r4650.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IRIXCPUInfo._is_r4650.__dict__.__setitem__('stypy_type_store', module_type_store)
        IRIXCPUInfo._is_r4650.__dict__.__setitem__('stypy_function_name', 'IRIXCPUInfo._is_r4650')
        IRIXCPUInfo._is_r4650.__dict__.__setitem__('stypy_param_names_list', [])
        IRIXCPUInfo._is_r4650.__dict__.__setitem__('stypy_varargs_param_name', None)
        IRIXCPUInfo._is_r4650.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IRIXCPUInfo._is_r4650.__dict__.__setitem__('stypy_call_defaults', defaults)
        IRIXCPUInfo._is_r4650.__dict__.__setitem__('stypy_call_varargs', varargs)
        IRIXCPUInfo._is_r4650.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IRIXCPUInfo._is_r4650.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IRIXCPUInfo._is_r4650', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_r4650', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_r4650(...)' code ##################

        
        # Call to __cputype(...): (line 329)
        # Processing the call arguments (line 329)
        int_30668 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 329, 47), 'int')
        # Processing the call keyword arguments (line 329)
        kwargs_30669 = {}
        # Getting the type of 'self' (line 329)
        self_30666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 32), 'self', False)
        # Obtaining the member '__cputype' of a type (line 329)
        cputype_30667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 329, 32), self_30666, '__cputype')
        # Calling __cputype(args, kwargs) (line 329)
        cputype_call_result_30670 = invoke(stypy.reporting.localization.Localization(__file__, 329, 32), cputype_30667, *[int_30668], **kwargs_30669)
        
        # Assigning a type to the variable 'stypy_return_type' (line 329)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 329, 25), 'stypy_return_type', cputype_call_result_30670)
        
        # ################# End of '_is_r4650(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_r4650' in the type store
        # Getting the type of 'stypy_return_type' (line 329)
        stypy_return_type_30671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30671)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_r4650'
        return stypy_return_type_30671


    @norecursion
    def _is_r5000(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_r5000'
        module_type_store = module_type_store.open_function_context('_is_r5000', 330, 4, False)
        # Assigning a type to the variable 'self' (line 331)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 331, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IRIXCPUInfo._is_r5000.__dict__.__setitem__('stypy_localization', localization)
        IRIXCPUInfo._is_r5000.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IRIXCPUInfo._is_r5000.__dict__.__setitem__('stypy_type_store', module_type_store)
        IRIXCPUInfo._is_r5000.__dict__.__setitem__('stypy_function_name', 'IRIXCPUInfo._is_r5000')
        IRIXCPUInfo._is_r5000.__dict__.__setitem__('stypy_param_names_list', [])
        IRIXCPUInfo._is_r5000.__dict__.__setitem__('stypy_varargs_param_name', None)
        IRIXCPUInfo._is_r5000.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IRIXCPUInfo._is_r5000.__dict__.__setitem__('stypy_call_defaults', defaults)
        IRIXCPUInfo._is_r5000.__dict__.__setitem__('stypy_call_varargs', varargs)
        IRIXCPUInfo._is_r5000.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IRIXCPUInfo._is_r5000.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IRIXCPUInfo._is_r5000', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_r5000', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_r5000(...)' code ##################

        
        # Call to __cputype(...): (line 330)
        # Processing the call arguments (line 330)
        int_30674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 330, 47), 'int')
        # Processing the call keyword arguments (line 330)
        kwargs_30675 = {}
        # Getting the type of 'self' (line 330)
        self_30672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 330, 32), 'self', False)
        # Obtaining the member '__cputype' of a type (line 330)
        cputype_30673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 330, 32), self_30672, '__cputype')
        # Calling __cputype(args, kwargs) (line 330)
        cputype_call_result_30676 = invoke(stypy.reporting.localization.Localization(__file__, 330, 32), cputype_30673, *[int_30674], **kwargs_30675)
        
        # Assigning a type to the variable 'stypy_return_type' (line 330)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 330, 25), 'stypy_return_type', cputype_call_result_30676)
        
        # ################# End of '_is_r5000(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_r5000' in the type store
        # Getting the type of 'stypy_return_type' (line 330)
        stypy_return_type_30677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 330, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30677)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_r5000'
        return stypy_return_type_30677


    @norecursion
    def _is_r6000(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_r6000'
        module_type_store = module_type_store.open_function_context('_is_r6000', 331, 4, False)
        # Assigning a type to the variable 'self' (line 332)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 332, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IRIXCPUInfo._is_r6000.__dict__.__setitem__('stypy_localization', localization)
        IRIXCPUInfo._is_r6000.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IRIXCPUInfo._is_r6000.__dict__.__setitem__('stypy_type_store', module_type_store)
        IRIXCPUInfo._is_r6000.__dict__.__setitem__('stypy_function_name', 'IRIXCPUInfo._is_r6000')
        IRIXCPUInfo._is_r6000.__dict__.__setitem__('stypy_param_names_list', [])
        IRIXCPUInfo._is_r6000.__dict__.__setitem__('stypy_varargs_param_name', None)
        IRIXCPUInfo._is_r6000.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IRIXCPUInfo._is_r6000.__dict__.__setitem__('stypy_call_defaults', defaults)
        IRIXCPUInfo._is_r6000.__dict__.__setitem__('stypy_call_varargs', varargs)
        IRIXCPUInfo._is_r6000.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IRIXCPUInfo._is_r6000.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IRIXCPUInfo._is_r6000', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_r6000', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_r6000(...)' code ##################

        
        # Call to __cputype(...): (line 331)
        # Processing the call arguments (line 331)
        int_30680 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 331, 47), 'int')
        # Processing the call keyword arguments (line 331)
        kwargs_30681 = {}
        # Getting the type of 'self' (line 331)
        self_30678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 32), 'self', False)
        # Obtaining the member '__cputype' of a type (line 331)
        cputype_30679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 331, 32), self_30678, '__cputype')
        # Calling __cputype(args, kwargs) (line 331)
        cputype_call_result_30682 = invoke(stypy.reporting.localization.Localization(__file__, 331, 32), cputype_30679, *[int_30680], **kwargs_30681)
        
        # Assigning a type to the variable 'stypy_return_type' (line 331)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 331, 25), 'stypy_return_type', cputype_call_result_30682)
        
        # ################# End of '_is_r6000(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_r6000' in the type store
        # Getting the type of 'stypy_return_type' (line 331)
        stypy_return_type_30683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30683)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_r6000'
        return stypy_return_type_30683


    @norecursion
    def _is_r8000(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_r8000'
        module_type_store = module_type_store.open_function_context('_is_r8000', 332, 4, False)
        # Assigning a type to the variable 'self' (line 333)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 333, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IRIXCPUInfo._is_r8000.__dict__.__setitem__('stypy_localization', localization)
        IRIXCPUInfo._is_r8000.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IRIXCPUInfo._is_r8000.__dict__.__setitem__('stypy_type_store', module_type_store)
        IRIXCPUInfo._is_r8000.__dict__.__setitem__('stypy_function_name', 'IRIXCPUInfo._is_r8000')
        IRIXCPUInfo._is_r8000.__dict__.__setitem__('stypy_param_names_list', [])
        IRIXCPUInfo._is_r8000.__dict__.__setitem__('stypy_varargs_param_name', None)
        IRIXCPUInfo._is_r8000.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IRIXCPUInfo._is_r8000.__dict__.__setitem__('stypy_call_defaults', defaults)
        IRIXCPUInfo._is_r8000.__dict__.__setitem__('stypy_call_varargs', varargs)
        IRIXCPUInfo._is_r8000.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IRIXCPUInfo._is_r8000.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IRIXCPUInfo._is_r8000', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_r8000', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_r8000(...)' code ##################

        
        # Call to __cputype(...): (line 332)
        # Processing the call arguments (line 332)
        int_30686 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 332, 47), 'int')
        # Processing the call keyword arguments (line 332)
        kwargs_30687 = {}
        # Getting the type of 'self' (line 332)
        self_30684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 32), 'self', False)
        # Obtaining the member '__cputype' of a type (line 332)
        cputype_30685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 332, 32), self_30684, '__cputype')
        # Calling __cputype(args, kwargs) (line 332)
        cputype_call_result_30688 = invoke(stypy.reporting.localization.Localization(__file__, 332, 32), cputype_30685, *[int_30686], **kwargs_30687)
        
        # Assigning a type to the variable 'stypy_return_type' (line 332)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 332, 25), 'stypy_return_type', cputype_call_result_30688)
        
        # ################# End of '_is_r8000(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_r8000' in the type store
        # Getting the type of 'stypy_return_type' (line 332)
        stypy_return_type_30689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30689)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_r8000'
        return stypy_return_type_30689


    @norecursion
    def _is_r10000(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_r10000'
        module_type_store = module_type_store.open_function_context('_is_r10000', 333, 4, False)
        # Assigning a type to the variable 'self' (line 334)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 334, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IRIXCPUInfo._is_r10000.__dict__.__setitem__('stypy_localization', localization)
        IRIXCPUInfo._is_r10000.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IRIXCPUInfo._is_r10000.__dict__.__setitem__('stypy_type_store', module_type_store)
        IRIXCPUInfo._is_r10000.__dict__.__setitem__('stypy_function_name', 'IRIXCPUInfo._is_r10000')
        IRIXCPUInfo._is_r10000.__dict__.__setitem__('stypy_param_names_list', [])
        IRIXCPUInfo._is_r10000.__dict__.__setitem__('stypy_varargs_param_name', None)
        IRIXCPUInfo._is_r10000.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IRIXCPUInfo._is_r10000.__dict__.__setitem__('stypy_call_defaults', defaults)
        IRIXCPUInfo._is_r10000.__dict__.__setitem__('stypy_call_varargs', varargs)
        IRIXCPUInfo._is_r10000.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IRIXCPUInfo._is_r10000.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IRIXCPUInfo._is_r10000', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_r10000', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_r10000(...)' code ##################

        
        # Call to __cputype(...): (line 333)
        # Processing the call arguments (line 333)
        int_30692 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 333, 48), 'int')
        # Processing the call keyword arguments (line 333)
        kwargs_30693 = {}
        # Getting the type of 'self' (line 333)
        self_30690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 33), 'self', False)
        # Obtaining the member '__cputype' of a type (line 333)
        cputype_30691 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 333, 33), self_30690, '__cputype')
        # Calling __cputype(args, kwargs) (line 333)
        cputype_call_result_30694 = invoke(stypy.reporting.localization.Localization(__file__, 333, 33), cputype_30691, *[int_30692], **kwargs_30693)
        
        # Assigning a type to the variable 'stypy_return_type' (line 333)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 333, 26), 'stypy_return_type', cputype_call_result_30694)
        
        # ################# End of '_is_r10000(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_r10000' in the type store
        # Getting the type of 'stypy_return_type' (line 333)
        stypy_return_type_30695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30695)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_r10000'
        return stypy_return_type_30695


    @norecursion
    def _is_r12000(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_r12000'
        module_type_store = module_type_store.open_function_context('_is_r12000', 334, 4, False)
        # Assigning a type to the variable 'self' (line 335)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 335, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IRIXCPUInfo._is_r12000.__dict__.__setitem__('stypy_localization', localization)
        IRIXCPUInfo._is_r12000.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IRIXCPUInfo._is_r12000.__dict__.__setitem__('stypy_type_store', module_type_store)
        IRIXCPUInfo._is_r12000.__dict__.__setitem__('stypy_function_name', 'IRIXCPUInfo._is_r12000')
        IRIXCPUInfo._is_r12000.__dict__.__setitem__('stypy_param_names_list', [])
        IRIXCPUInfo._is_r12000.__dict__.__setitem__('stypy_varargs_param_name', None)
        IRIXCPUInfo._is_r12000.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IRIXCPUInfo._is_r12000.__dict__.__setitem__('stypy_call_defaults', defaults)
        IRIXCPUInfo._is_r12000.__dict__.__setitem__('stypy_call_varargs', varargs)
        IRIXCPUInfo._is_r12000.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IRIXCPUInfo._is_r12000.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IRIXCPUInfo._is_r12000', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_r12000', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_r12000(...)' code ##################

        
        # Call to __cputype(...): (line 334)
        # Processing the call arguments (line 334)
        int_30698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 334, 48), 'int')
        # Processing the call keyword arguments (line 334)
        kwargs_30699 = {}
        # Getting the type of 'self' (line 334)
        self_30696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 334, 33), 'self', False)
        # Obtaining the member '__cputype' of a type (line 334)
        cputype_30697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 334, 33), self_30696, '__cputype')
        # Calling __cputype(args, kwargs) (line 334)
        cputype_call_result_30700 = invoke(stypy.reporting.localization.Localization(__file__, 334, 33), cputype_30697, *[int_30698], **kwargs_30699)
        
        # Assigning a type to the variable 'stypy_return_type' (line 334)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 334, 26), 'stypy_return_type', cputype_call_result_30700)
        
        # ################# End of '_is_r12000(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_r12000' in the type store
        # Getting the type of 'stypy_return_type' (line 334)
        stypy_return_type_30701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 334, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30701)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_r12000'
        return stypy_return_type_30701


    @norecursion
    def _is_rorion(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_rorion'
        module_type_store = module_type_store.open_function_context('_is_rorion', 335, 4, False)
        # Assigning a type to the variable 'self' (line 336)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 336, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IRIXCPUInfo._is_rorion.__dict__.__setitem__('stypy_localization', localization)
        IRIXCPUInfo._is_rorion.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IRIXCPUInfo._is_rorion.__dict__.__setitem__('stypy_type_store', module_type_store)
        IRIXCPUInfo._is_rorion.__dict__.__setitem__('stypy_function_name', 'IRIXCPUInfo._is_rorion')
        IRIXCPUInfo._is_rorion.__dict__.__setitem__('stypy_param_names_list', [])
        IRIXCPUInfo._is_rorion.__dict__.__setitem__('stypy_varargs_param_name', None)
        IRIXCPUInfo._is_rorion.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IRIXCPUInfo._is_rorion.__dict__.__setitem__('stypy_call_defaults', defaults)
        IRIXCPUInfo._is_rorion.__dict__.__setitem__('stypy_call_varargs', varargs)
        IRIXCPUInfo._is_rorion.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IRIXCPUInfo._is_rorion.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IRIXCPUInfo._is_rorion', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_rorion', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_rorion(...)' code ##################

        
        # Call to __cputype(...): (line 335)
        # Processing the call arguments (line 335)
        str_30704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 335, 48), 'str', 'orion')
        # Processing the call keyword arguments (line 335)
        kwargs_30705 = {}
        # Getting the type of 'self' (line 335)
        self_30702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 33), 'self', False)
        # Obtaining the member '__cputype' of a type (line 335)
        cputype_30703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 335, 33), self_30702, '__cputype')
        # Calling __cputype(args, kwargs) (line 335)
        cputype_call_result_30706 = invoke(stypy.reporting.localization.Localization(__file__, 335, 33), cputype_30703, *[str_30704], **kwargs_30705)
        
        # Assigning a type to the variable 'stypy_return_type' (line 335)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 335, 26), 'stypy_return_type', cputype_call_result_30706)
        
        # ################# End of '_is_rorion(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_rorion' in the type store
        # Getting the type of 'stypy_return_type' (line 335)
        stypy_return_type_30707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30707)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_rorion'
        return stypy_return_type_30707


    @norecursion
    def get_ip(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_ip'
        module_type_store = module_type_store.open_function_context('get_ip', 337, 4, False)
        # Assigning a type to the variable 'self' (line 338)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 338, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IRIXCPUInfo.get_ip.__dict__.__setitem__('stypy_localization', localization)
        IRIXCPUInfo.get_ip.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IRIXCPUInfo.get_ip.__dict__.__setitem__('stypy_type_store', module_type_store)
        IRIXCPUInfo.get_ip.__dict__.__setitem__('stypy_function_name', 'IRIXCPUInfo.get_ip')
        IRIXCPUInfo.get_ip.__dict__.__setitem__('stypy_param_names_list', [])
        IRIXCPUInfo.get_ip.__dict__.__setitem__('stypy_varargs_param_name', None)
        IRIXCPUInfo.get_ip.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IRIXCPUInfo.get_ip.__dict__.__setitem__('stypy_call_defaults', defaults)
        IRIXCPUInfo.get_ip.__dict__.__setitem__('stypy_call_varargs', varargs)
        IRIXCPUInfo.get_ip.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IRIXCPUInfo.get_ip.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IRIXCPUInfo.get_ip', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_ip', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_ip(...)' code ##################

        
        
        # SSA begins for try-except statement (line 338)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to get(...): (line 338)
        # Processing the call arguments (line 338)
        str_30711 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 338, 34), 'str', 'MACHINE')
        # Processing the call keyword arguments (line 338)
        kwargs_30712 = {}
        # Getting the type of 'self' (line 338)
        self_30708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 338, 20), 'self', False)
        # Obtaining the member 'info' of a type (line 338)
        info_30709 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 338, 20), self_30708, 'info')
        # Obtaining the member 'get' of a type (line 338)
        get_30710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 338, 20), info_30709, 'get')
        # Calling get(args, kwargs) (line 338)
        get_call_result_30713 = invoke(stypy.reporting.localization.Localization(__file__, 338, 20), get_30710, *[str_30711], **kwargs_30712)
        
        # Assigning a type to the variable 'stypy_return_type' (line 338)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 338, 13), 'stypy_return_type', get_call_result_30713)
        # SSA branch for the except part of a try statement (line 338)
        # SSA branch for the except '<any exception>' branch of a try statement (line 338)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 338)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'get_ip(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_ip' in the type store
        # Getting the type of 'stypy_return_type' (line 337)
        stypy_return_type_30714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 337, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30714)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_ip'
        return stypy_return_type_30714


    @norecursion
    def __machine(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__machine'
        module_type_store = module_type_store.open_function_context('__machine', 340, 4, False)
        # Assigning a type to the variable 'self' (line 341)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 341, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IRIXCPUInfo.__machine.__dict__.__setitem__('stypy_localization', localization)
        IRIXCPUInfo.__machine.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IRIXCPUInfo.__machine.__dict__.__setitem__('stypy_type_store', module_type_store)
        IRIXCPUInfo.__machine.__dict__.__setitem__('stypy_function_name', 'IRIXCPUInfo.__machine')
        IRIXCPUInfo.__machine.__dict__.__setitem__('stypy_param_names_list', ['n'])
        IRIXCPUInfo.__machine.__dict__.__setitem__('stypy_varargs_param_name', None)
        IRIXCPUInfo.__machine.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IRIXCPUInfo.__machine.__dict__.__setitem__('stypy_call_defaults', defaults)
        IRIXCPUInfo.__machine.__dict__.__setitem__('stypy_call_varargs', varargs)
        IRIXCPUInfo.__machine.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IRIXCPUInfo.__machine.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IRIXCPUInfo.__machine', ['n'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__machine', localization, ['n'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__machine(...)' code ##################

        
        
        # Call to lower(...): (line 341)
        # Processing the call keyword arguments (line 341)
        kwargs_30722 = {}
        
        # Call to get(...): (line 341)
        # Processing the call arguments (line 341)
        str_30718 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 341, 29), 'str', 'MACHINE')
        # Processing the call keyword arguments (line 341)
        kwargs_30719 = {}
        # Getting the type of 'self' (line 341)
        self_30715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 15), 'self', False)
        # Obtaining the member 'info' of a type (line 341)
        info_30716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 341, 15), self_30715, 'info')
        # Obtaining the member 'get' of a type (line 341)
        get_30717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 341, 15), info_30716, 'get')
        # Calling get(args, kwargs) (line 341)
        get_call_result_30720 = invoke(stypy.reporting.localization.Localization(__file__, 341, 15), get_30717, *[str_30718], **kwargs_30719)
        
        # Obtaining the member 'lower' of a type (line 341)
        lower_30721 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 341, 15), get_call_result_30720, 'lower')
        # Calling lower(args, kwargs) (line 341)
        lower_call_result_30723 = invoke(stypy.reporting.localization.Localization(__file__, 341, 15), lower_30721, *[], **kwargs_30722)
        
        str_30724 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 341, 51), 'str', 'ip%s')
        # Getting the type of 'n' (line 341)
        n_30725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 61), 'n')
        # Applying the binary operator '%' (line 341)
        result_mod_30726 = python_operator(stypy.reporting.localization.Localization(__file__, 341, 51), '%', str_30724, n_30725)
        
        # Applying the binary operator '==' (line 341)
        result_eq_30727 = python_operator(stypy.reporting.localization.Localization(__file__, 341, 15), '==', lower_call_result_30723, result_mod_30726)
        
        # Assigning a type to the variable 'stypy_return_type' (line 341)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 341, 8), 'stypy_return_type', result_eq_30727)
        
        # ################# End of '__machine(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__machine' in the type store
        # Getting the type of 'stypy_return_type' (line 340)
        stypy_return_type_30728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30728)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__machine'
        return stypy_return_type_30728


    @norecursion
    def _is_IP19(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_IP19'
        module_type_store = module_type_store.open_function_context('_is_IP19', 342, 4, False)
        # Assigning a type to the variable 'self' (line 343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 343, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IRIXCPUInfo._is_IP19.__dict__.__setitem__('stypy_localization', localization)
        IRIXCPUInfo._is_IP19.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IRIXCPUInfo._is_IP19.__dict__.__setitem__('stypy_type_store', module_type_store)
        IRIXCPUInfo._is_IP19.__dict__.__setitem__('stypy_function_name', 'IRIXCPUInfo._is_IP19')
        IRIXCPUInfo._is_IP19.__dict__.__setitem__('stypy_param_names_list', [])
        IRIXCPUInfo._is_IP19.__dict__.__setitem__('stypy_varargs_param_name', None)
        IRIXCPUInfo._is_IP19.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IRIXCPUInfo._is_IP19.__dict__.__setitem__('stypy_call_defaults', defaults)
        IRIXCPUInfo._is_IP19.__dict__.__setitem__('stypy_call_varargs', varargs)
        IRIXCPUInfo._is_IP19.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IRIXCPUInfo._is_IP19.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IRIXCPUInfo._is_IP19', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_IP19', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_IP19(...)' code ##################

        
        # Call to __machine(...): (line 342)
        # Processing the call arguments (line 342)
        int_30731 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 342, 46), 'int')
        # Processing the call keyword arguments (line 342)
        kwargs_30732 = {}
        # Getting the type of 'self' (line 342)
        self_30729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 31), 'self', False)
        # Obtaining the member '__machine' of a type (line 342)
        machine_30730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 342, 31), self_30729, '__machine')
        # Calling __machine(args, kwargs) (line 342)
        machine_call_result_30733 = invoke(stypy.reporting.localization.Localization(__file__, 342, 31), machine_30730, *[int_30731], **kwargs_30732)
        
        # Assigning a type to the variable 'stypy_return_type' (line 342)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 342, 24), 'stypy_return_type', machine_call_result_30733)
        
        # ################# End of '_is_IP19(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_IP19' in the type store
        # Getting the type of 'stypy_return_type' (line 342)
        stypy_return_type_30734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30734)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_IP19'
        return stypy_return_type_30734


    @norecursion
    def _is_IP20(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_IP20'
        module_type_store = module_type_store.open_function_context('_is_IP20', 343, 4, False)
        # Assigning a type to the variable 'self' (line 344)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 344, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IRIXCPUInfo._is_IP20.__dict__.__setitem__('stypy_localization', localization)
        IRIXCPUInfo._is_IP20.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IRIXCPUInfo._is_IP20.__dict__.__setitem__('stypy_type_store', module_type_store)
        IRIXCPUInfo._is_IP20.__dict__.__setitem__('stypy_function_name', 'IRIXCPUInfo._is_IP20')
        IRIXCPUInfo._is_IP20.__dict__.__setitem__('stypy_param_names_list', [])
        IRIXCPUInfo._is_IP20.__dict__.__setitem__('stypy_varargs_param_name', None)
        IRIXCPUInfo._is_IP20.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IRIXCPUInfo._is_IP20.__dict__.__setitem__('stypy_call_defaults', defaults)
        IRIXCPUInfo._is_IP20.__dict__.__setitem__('stypy_call_varargs', varargs)
        IRIXCPUInfo._is_IP20.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IRIXCPUInfo._is_IP20.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IRIXCPUInfo._is_IP20', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_IP20', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_IP20(...)' code ##################

        
        # Call to __machine(...): (line 343)
        # Processing the call arguments (line 343)
        int_30737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 343, 46), 'int')
        # Processing the call keyword arguments (line 343)
        kwargs_30738 = {}
        # Getting the type of 'self' (line 343)
        self_30735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 31), 'self', False)
        # Obtaining the member '__machine' of a type (line 343)
        machine_30736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 343, 31), self_30735, '__machine')
        # Calling __machine(args, kwargs) (line 343)
        machine_call_result_30739 = invoke(stypy.reporting.localization.Localization(__file__, 343, 31), machine_30736, *[int_30737], **kwargs_30738)
        
        # Assigning a type to the variable 'stypy_return_type' (line 343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 343, 24), 'stypy_return_type', machine_call_result_30739)
        
        # ################# End of '_is_IP20(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_IP20' in the type store
        # Getting the type of 'stypy_return_type' (line 343)
        stypy_return_type_30740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30740)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_IP20'
        return stypy_return_type_30740


    @norecursion
    def _is_IP21(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_IP21'
        module_type_store = module_type_store.open_function_context('_is_IP21', 344, 4, False)
        # Assigning a type to the variable 'self' (line 345)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 345, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IRIXCPUInfo._is_IP21.__dict__.__setitem__('stypy_localization', localization)
        IRIXCPUInfo._is_IP21.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IRIXCPUInfo._is_IP21.__dict__.__setitem__('stypy_type_store', module_type_store)
        IRIXCPUInfo._is_IP21.__dict__.__setitem__('stypy_function_name', 'IRIXCPUInfo._is_IP21')
        IRIXCPUInfo._is_IP21.__dict__.__setitem__('stypy_param_names_list', [])
        IRIXCPUInfo._is_IP21.__dict__.__setitem__('stypy_varargs_param_name', None)
        IRIXCPUInfo._is_IP21.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IRIXCPUInfo._is_IP21.__dict__.__setitem__('stypy_call_defaults', defaults)
        IRIXCPUInfo._is_IP21.__dict__.__setitem__('stypy_call_varargs', varargs)
        IRIXCPUInfo._is_IP21.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IRIXCPUInfo._is_IP21.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IRIXCPUInfo._is_IP21', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_IP21', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_IP21(...)' code ##################

        
        # Call to __machine(...): (line 344)
        # Processing the call arguments (line 344)
        int_30743 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 344, 46), 'int')
        # Processing the call keyword arguments (line 344)
        kwargs_30744 = {}
        # Getting the type of 'self' (line 344)
        self_30741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 31), 'self', False)
        # Obtaining the member '__machine' of a type (line 344)
        machine_30742 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 344, 31), self_30741, '__machine')
        # Calling __machine(args, kwargs) (line 344)
        machine_call_result_30745 = invoke(stypy.reporting.localization.Localization(__file__, 344, 31), machine_30742, *[int_30743], **kwargs_30744)
        
        # Assigning a type to the variable 'stypy_return_type' (line 344)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 344, 24), 'stypy_return_type', machine_call_result_30745)
        
        # ################# End of '_is_IP21(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_IP21' in the type store
        # Getting the type of 'stypy_return_type' (line 344)
        stypy_return_type_30746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30746)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_IP21'
        return stypy_return_type_30746


    @norecursion
    def _is_IP22(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_IP22'
        module_type_store = module_type_store.open_function_context('_is_IP22', 345, 4, False)
        # Assigning a type to the variable 'self' (line 346)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 346, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IRIXCPUInfo._is_IP22.__dict__.__setitem__('stypy_localization', localization)
        IRIXCPUInfo._is_IP22.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IRIXCPUInfo._is_IP22.__dict__.__setitem__('stypy_type_store', module_type_store)
        IRIXCPUInfo._is_IP22.__dict__.__setitem__('stypy_function_name', 'IRIXCPUInfo._is_IP22')
        IRIXCPUInfo._is_IP22.__dict__.__setitem__('stypy_param_names_list', [])
        IRIXCPUInfo._is_IP22.__dict__.__setitem__('stypy_varargs_param_name', None)
        IRIXCPUInfo._is_IP22.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IRIXCPUInfo._is_IP22.__dict__.__setitem__('stypy_call_defaults', defaults)
        IRIXCPUInfo._is_IP22.__dict__.__setitem__('stypy_call_varargs', varargs)
        IRIXCPUInfo._is_IP22.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IRIXCPUInfo._is_IP22.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IRIXCPUInfo._is_IP22', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_IP22', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_IP22(...)' code ##################

        
        # Call to __machine(...): (line 345)
        # Processing the call arguments (line 345)
        int_30749 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 345, 46), 'int')
        # Processing the call keyword arguments (line 345)
        kwargs_30750 = {}
        # Getting the type of 'self' (line 345)
        self_30747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 31), 'self', False)
        # Obtaining the member '__machine' of a type (line 345)
        machine_30748 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 345, 31), self_30747, '__machine')
        # Calling __machine(args, kwargs) (line 345)
        machine_call_result_30751 = invoke(stypy.reporting.localization.Localization(__file__, 345, 31), machine_30748, *[int_30749], **kwargs_30750)
        
        # Assigning a type to the variable 'stypy_return_type' (line 345)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 345, 24), 'stypy_return_type', machine_call_result_30751)
        
        # ################# End of '_is_IP22(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_IP22' in the type store
        # Getting the type of 'stypy_return_type' (line 345)
        stypy_return_type_30752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30752)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_IP22'
        return stypy_return_type_30752


    @norecursion
    def _is_IP22_4k(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_IP22_4k'
        module_type_store = module_type_store.open_function_context('_is_IP22_4k', 346, 4, False)
        # Assigning a type to the variable 'self' (line 347)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 347, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IRIXCPUInfo._is_IP22_4k.__dict__.__setitem__('stypy_localization', localization)
        IRIXCPUInfo._is_IP22_4k.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IRIXCPUInfo._is_IP22_4k.__dict__.__setitem__('stypy_type_store', module_type_store)
        IRIXCPUInfo._is_IP22_4k.__dict__.__setitem__('stypy_function_name', 'IRIXCPUInfo._is_IP22_4k')
        IRIXCPUInfo._is_IP22_4k.__dict__.__setitem__('stypy_param_names_list', [])
        IRIXCPUInfo._is_IP22_4k.__dict__.__setitem__('stypy_varargs_param_name', None)
        IRIXCPUInfo._is_IP22_4k.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IRIXCPUInfo._is_IP22_4k.__dict__.__setitem__('stypy_call_defaults', defaults)
        IRIXCPUInfo._is_IP22_4k.__dict__.__setitem__('stypy_call_varargs', varargs)
        IRIXCPUInfo._is_IP22_4k.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IRIXCPUInfo._is_IP22_4k.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IRIXCPUInfo._is_IP22_4k', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_IP22_4k', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_IP22_4k(...)' code ##################

        
        # Evaluating a boolean operation
        
        # Call to __machine(...): (line 346)
        # Processing the call arguments (line 346)
        int_30755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 346, 49), 'int')
        # Processing the call keyword arguments (line 346)
        kwargs_30756 = {}
        # Getting the type of 'self' (line 346)
        self_30753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 34), 'self', False)
        # Obtaining the member '__machine' of a type (line 346)
        machine_30754 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 346, 34), self_30753, '__machine')
        # Calling __machine(args, kwargs) (line 346)
        machine_call_result_30757 = invoke(stypy.reporting.localization.Localization(__file__, 346, 34), machine_30754, *[int_30755], **kwargs_30756)
        
        
        # Call to _is_r4000(...): (line 346)
        # Processing the call keyword arguments (line 346)
        kwargs_30760 = {}
        # Getting the type of 'self' (line 346)
        self_30758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 57), 'self', False)
        # Obtaining the member '_is_r4000' of a type (line 346)
        _is_r4000_30759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 346, 57), self_30758, '_is_r4000')
        # Calling _is_r4000(args, kwargs) (line 346)
        _is_r4000_call_result_30761 = invoke(stypy.reporting.localization.Localization(__file__, 346, 57), _is_r4000_30759, *[], **kwargs_30760)
        
        # Applying the binary operator 'and' (line 346)
        result_and_keyword_30762 = python_operator(stypy.reporting.localization.Localization(__file__, 346, 34), 'and', machine_call_result_30757, _is_r4000_call_result_30761)
        
        # Assigning a type to the variable 'stypy_return_type' (line 346)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 346, 27), 'stypy_return_type', result_and_keyword_30762)
        
        # ################# End of '_is_IP22_4k(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_IP22_4k' in the type store
        # Getting the type of 'stypy_return_type' (line 346)
        stypy_return_type_30763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30763)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_IP22_4k'
        return stypy_return_type_30763


    @norecursion
    def _is_IP22_5k(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_IP22_5k'
        module_type_store = module_type_store.open_function_context('_is_IP22_5k', 347, 4, False)
        # Assigning a type to the variable 'self' (line 348)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 348, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IRIXCPUInfo._is_IP22_5k.__dict__.__setitem__('stypy_localization', localization)
        IRIXCPUInfo._is_IP22_5k.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IRIXCPUInfo._is_IP22_5k.__dict__.__setitem__('stypy_type_store', module_type_store)
        IRIXCPUInfo._is_IP22_5k.__dict__.__setitem__('stypy_function_name', 'IRIXCPUInfo._is_IP22_5k')
        IRIXCPUInfo._is_IP22_5k.__dict__.__setitem__('stypy_param_names_list', [])
        IRIXCPUInfo._is_IP22_5k.__dict__.__setitem__('stypy_varargs_param_name', None)
        IRIXCPUInfo._is_IP22_5k.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IRIXCPUInfo._is_IP22_5k.__dict__.__setitem__('stypy_call_defaults', defaults)
        IRIXCPUInfo._is_IP22_5k.__dict__.__setitem__('stypy_call_varargs', varargs)
        IRIXCPUInfo._is_IP22_5k.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IRIXCPUInfo._is_IP22_5k.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IRIXCPUInfo._is_IP22_5k', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_IP22_5k', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_IP22_5k(...)' code ##################

        
        # Evaluating a boolean operation
        
        # Call to __machine(...): (line 347)
        # Processing the call arguments (line 347)
        int_30766 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 347, 49), 'int')
        # Processing the call keyword arguments (line 347)
        kwargs_30767 = {}
        # Getting the type of 'self' (line 347)
        self_30764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 347, 34), 'self', False)
        # Obtaining the member '__machine' of a type (line 347)
        machine_30765 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 347, 34), self_30764, '__machine')
        # Calling __machine(args, kwargs) (line 347)
        machine_call_result_30768 = invoke(stypy.reporting.localization.Localization(__file__, 347, 34), machine_30765, *[int_30766], **kwargs_30767)
        
        
        # Call to _is_r5000(...): (line 347)
        # Processing the call keyword arguments (line 347)
        kwargs_30771 = {}
        # Getting the type of 'self' (line 347)
        self_30769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 347, 58), 'self', False)
        # Obtaining the member '_is_r5000' of a type (line 347)
        _is_r5000_30770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 347, 58), self_30769, '_is_r5000')
        # Calling _is_r5000(args, kwargs) (line 347)
        _is_r5000_call_result_30772 = invoke(stypy.reporting.localization.Localization(__file__, 347, 58), _is_r5000_30770, *[], **kwargs_30771)
        
        # Applying the binary operator 'and' (line 347)
        result_and_keyword_30773 = python_operator(stypy.reporting.localization.Localization(__file__, 347, 34), 'and', machine_call_result_30768, _is_r5000_call_result_30772)
        
        # Assigning a type to the variable 'stypy_return_type' (line 347)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 347, 27), 'stypy_return_type', result_and_keyword_30773)
        
        # ################# End of '_is_IP22_5k(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_IP22_5k' in the type store
        # Getting the type of 'stypy_return_type' (line 347)
        stypy_return_type_30774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 347, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30774)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_IP22_5k'
        return stypy_return_type_30774


    @norecursion
    def _is_IP24(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_IP24'
        module_type_store = module_type_store.open_function_context('_is_IP24', 348, 4, False)
        # Assigning a type to the variable 'self' (line 349)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 349, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IRIXCPUInfo._is_IP24.__dict__.__setitem__('stypy_localization', localization)
        IRIXCPUInfo._is_IP24.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IRIXCPUInfo._is_IP24.__dict__.__setitem__('stypy_type_store', module_type_store)
        IRIXCPUInfo._is_IP24.__dict__.__setitem__('stypy_function_name', 'IRIXCPUInfo._is_IP24')
        IRIXCPUInfo._is_IP24.__dict__.__setitem__('stypy_param_names_list', [])
        IRIXCPUInfo._is_IP24.__dict__.__setitem__('stypy_varargs_param_name', None)
        IRIXCPUInfo._is_IP24.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IRIXCPUInfo._is_IP24.__dict__.__setitem__('stypy_call_defaults', defaults)
        IRIXCPUInfo._is_IP24.__dict__.__setitem__('stypy_call_varargs', varargs)
        IRIXCPUInfo._is_IP24.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IRIXCPUInfo._is_IP24.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IRIXCPUInfo._is_IP24', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_IP24', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_IP24(...)' code ##################

        
        # Call to __machine(...): (line 348)
        # Processing the call arguments (line 348)
        int_30777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 348, 46), 'int')
        # Processing the call keyword arguments (line 348)
        kwargs_30778 = {}
        # Getting the type of 'self' (line 348)
        self_30775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 348, 31), 'self', False)
        # Obtaining the member '__machine' of a type (line 348)
        machine_30776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 348, 31), self_30775, '__machine')
        # Calling __machine(args, kwargs) (line 348)
        machine_call_result_30779 = invoke(stypy.reporting.localization.Localization(__file__, 348, 31), machine_30776, *[int_30777], **kwargs_30778)
        
        # Assigning a type to the variable 'stypy_return_type' (line 348)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 348, 24), 'stypy_return_type', machine_call_result_30779)
        
        # ################# End of '_is_IP24(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_IP24' in the type store
        # Getting the type of 'stypy_return_type' (line 348)
        stypy_return_type_30780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 348, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30780)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_IP24'
        return stypy_return_type_30780


    @norecursion
    def _is_IP25(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_IP25'
        module_type_store = module_type_store.open_function_context('_is_IP25', 349, 4, False)
        # Assigning a type to the variable 'self' (line 350)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 350, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IRIXCPUInfo._is_IP25.__dict__.__setitem__('stypy_localization', localization)
        IRIXCPUInfo._is_IP25.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IRIXCPUInfo._is_IP25.__dict__.__setitem__('stypy_type_store', module_type_store)
        IRIXCPUInfo._is_IP25.__dict__.__setitem__('stypy_function_name', 'IRIXCPUInfo._is_IP25')
        IRIXCPUInfo._is_IP25.__dict__.__setitem__('stypy_param_names_list', [])
        IRIXCPUInfo._is_IP25.__dict__.__setitem__('stypy_varargs_param_name', None)
        IRIXCPUInfo._is_IP25.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IRIXCPUInfo._is_IP25.__dict__.__setitem__('stypy_call_defaults', defaults)
        IRIXCPUInfo._is_IP25.__dict__.__setitem__('stypy_call_varargs', varargs)
        IRIXCPUInfo._is_IP25.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IRIXCPUInfo._is_IP25.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IRIXCPUInfo._is_IP25', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_IP25', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_IP25(...)' code ##################

        
        # Call to __machine(...): (line 349)
        # Processing the call arguments (line 349)
        int_30783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 349, 46), 'int')
        # Processing the call keyword arguments (line 349)
        kwargs_30784 = {}
        # Getting the type of 'self' (line 349)
        self_30781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 31), 'self', False)
        # Obtaining the member '__machine' of a type (line 349)
        machine_30782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 349, 31), self_30781, '__machine')
        # Calling __machine(args, kwargs) (line 349)
        machine_call_result_30785 = invoke(stypy.reporting.localization.Localization(__file__, 349, 31), machine_30782, *[int_30783], **kwargs_30784)
        
        # Assigning a type to the variable 'stypy_return_type' (line 349)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 349, 24), 'stypy_return_type', machine_call_result_30785)
        
        # ################# End of '_is_IP25(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_IP25' in the type store
        # Getting the type of 'stypy_return_type' (line 349)
        stypy_return_type_30786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30786)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_IP25'
        return stypy_return_type_30786


    @norecursion
    def _is_IP26(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_IP26'
        module_type_store = module_type_store.open_function_context('_is_IP26', 350, 4, False)
        # Assigning a type to the variable 'self' (line 351)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 351, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IRIXCPUInfo._is_IP26.__dict__.__setitem__('stypy_localization', localization)
        IRIXCPUInfo._is_IP26.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IRIXCPUInfo._is_IP26.__dict__.__setitem__('stypy_type_store', module_type_store)
        IRIXCPUInfo._is_IP26.__dict__.__setitem__('stypy_function_name', 'IRIXCPUInfo._is_IP26')
        IRIXCPUInfo._is_IP26.__dict__.__setitem__('stypy_param_names_list', [])
        IRIXCPUInfo._is_IP26.__dict__.__setitem__('stypy_varargs_param_name', None)
        IRIXCPUInfo._is_IP26.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IRIXCPUInfo._is_IP26.__dict__.__setitem__('stypy_call_defaults', defaults)
        IRIXCPUInfo._is_IP26.__dict__.__setitem__('stypy_call_varargs', varargs)
        IRIXCPUInfo._is_IP26.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IRIXCPUInfo._is_IP26.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IRIXCPUInfo._is_IP26', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_IP26', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_IP26(...)' code ##################

        
        # Call to __machine(...): (line 350)
        # Processing the call arguments (line 350)
        int_30789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 350, 46), 'int')
        # Processing the call keyword arguments (line 350)
        kwargs_30790 = {}
        # Getting the type of 'self' (line 350)
        self_30787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 350, 31), 'self', False)
        # Obtaining the member '__machine' of a type (line 350)
        machine_30788 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 350, 31), self_30787, '__machine')
        # Calling __machine(args, kwargs) (line 350)
        machine_call_result_30791 = invoke(stypy.reporting.localization.Localization(__file__, 350, 31), machine_30788, *[int_30789], **kwargs_30790)
        
        # Assigning a type to the variable 'stypy_return_type' (line 350)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 350, 24), 'stypy_return_type', machine_call_result_30791)
        
        # ################# End of '_is_IP26(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_IP26' in the type store
        # Getting the type of 'stypy_return_type' (line 350)
        stypy_return_type_30792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 350, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30792)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_IP26'
        return stypy_return_type_30792


    @norecursion
    def _is_IP27(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_IP27'
        module_type_store = module_type_store.open_function_context('_is_IP27', 351, 4, False)
        # Assigning a type to the variable 'self' (line 352)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 352, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IRIXCPUInfo._is_IP27.__dict__.__setitem__('stypy_localization', localization)
        IRIXCPUInfo._is_IP27.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IRIXCPUInfo._is_IP27.__dict__.__setitem__('stypy_type_store', module_type_store)
        IRIXCPUInfo._is_IP27.__dict__.__setitem__('stypy_function_name', 'IRIXCPUInfo._is_IP27')
        IRIXCPUInfo._is_IP27.__dict__.__setitem__('stypy_param_names_list', [])
        IRIXCPUInfo._is_IP27.__dict__.__setitem__('stypy_varargs_param_name', None)
        IRIXCPUInfo._is_IP27.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IRIXCPUInfo._is_IP27.__dict__.__setitem__('stypy_call_defaults', defaults)
        IRIXCPUInfo._is_IP27.__dict__.__setitem__('stypy_call_varargs', varargs)
        IRIXCPUInfo._is_IP27.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IRIXCPUInfo._is_IP27.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IRIXCPUInfo._is_IP27', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_IP27', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_IP27(...)' code ##################

        
        # Call to __machine(...): (line 351)
        # Processing the call arguments (line 351)
        int_30795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 351, 46), 'int')
        # Processing the call keyword arguments (line 351)
        kwargs_30796 = {}
        # Getting the type of 'self' (line 351)
        self_30793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 351, 31), 'self', False)
        # Obtaining the member '__machine' of a type (line 351)
        machine_30794 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 351, 31), self_30793, '__machine')
        # Calling __machine(args, kwargs) (line 351)
        machine_call_result_30797 = invoke(stypy.reporting.localization.Localization(__file__, 351, 31), machine_30794, *[int_30795], **kwargs_30796)
        
        # Assigning a type to the variable 'stypy_return_type' (line 351)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 351, 24), 'stypy_return_type', machine_call_result_30797)
        
        # ################# End of '_is_IP27(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_IP27' in the type store
        # Getting the type of 'stypy_return_type' (line 351)
        stypy_return_type_30798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 351, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30798)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_IP27'
        return stypy_return_type_30798


    @norecursion
    def _is_IP28(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_IP28'
        module_type_store = module_type_store.open_function_context('_is_IP28', 352, 4, False)
        # Assigning a type to the variable 'self' (line 353)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 353, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IRIXCPUInfo._is_IP28.__dict__.__setitem__('stypy_localization', localization)
        IRIXCPUInfo._is_IP28.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IRIXCPUInfo._is_IP28.__dict__.__setitem__('stypy_type_store', module_type_store)
        IRIXCPUInfo._is_IP28.__dict__.__setitem__('stypy_function_name', 'IRIXCPUInfo._is_IP28')
        IRIXCPUInfo._is_IP28.__dict__.__setitem__('stypy_param_names_list', [])
        IRIXCPUInfo._is_IP28.__dict__.__setitem__('stypy_varargs_param_name', None)
        IRIXCPUInfo._is_IP28.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IRIXCPUInfo._is_IP28.__dict__.__setitem__('stypy_call_defaults', defaults)
        IRIXCPUInfo._is_IP28.__dict__.__setitem__('stypy_call_varargs', varargs)
        IRIXCPUInfo._is_IP28.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IRIXCPUInfo._is_IP28.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IRIXCPUInfo._is_IP28', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_IP28', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_IP28(...)' code ##################

        
        # Call to __machine(...): (line 352)
        # Processing the call arguments (line 352)
        int_30801 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 352, 46), 'int')
        # Processing the call keyword arguments (line 352)
        kwargs_30802 = {}
        # Getting the type of 'self' (line 352)
        self_30799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 31), 'self', False)
        # Obtaining the member '__machine' of a type (line 352)
        machine_30800 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 352, 31), self_30799, '__machine')
        # Calling __machine(args, kwargs) (line 352)
        machine_call_result_30803 = invoke(stypy.reporting.localization.Localization(__file__, 352, 31), machine_30800, *[int_30801], **kwargs_30802)
        
        # Assigning a type to the variable 'stypy_return_type' (line 352)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 352, 24), 'stypy_return_type', machine_call_result_30803)
        
        # ################# End of '_is_IP28(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_IP28' in the type store
        # Getting the type of 'stypy_return_type' (line 352)
        stypy_return_type_30804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30804)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_IP28'
        return stypy_return_type_30804


    @norecursion
    def _is_IP30(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_IP30'
        module_type_store = module_type_store.open_function_context('_is_IP30', 353, 4, False)
        # Assigning a type to the variable 'self' (line 354)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 354, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IRIXCPUInfo._is_IP30.__dict__.__setitem__('stypy_localization', localization)
        IRIXCPUInfo._is_IP30.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IRIXCPUInfo._is_IP30.__dict__.__setitem__('stypy_type_store', module_type_store)
        IRIXCPUInfo._is_IP30.__dict__.__setitem__('stypy_function_name', 'IRIXCPUInfo._is_IP30')
        IRIXCPUInfo._is_IP30.__dict__.__setitem__('stypy_param_names_list', [])
        IRIXCPUInfo._is_IP30.__dict__.__setitem__('stypy_varargs_param_name', None)
        IRIXCPUInfo._is_IP30.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IRIXCPUInfo._is_IP30.__dict__.__setitem__('stypy_call_defaults', defaults)
        IRIXCPUInfo._is_IP30.__dict__.__setitem__('stypy_call_varargs', varargs)
        IRIXCPUInfo._is_IP30.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IRIXCPUInfo._is_IP30.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IRIXCPUInfo._is_IP30', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_IP30', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_IP30(...)' code ##################

        
        # Call to __machine(...): (line 353)
        # Processing the call arguments (line 353)
        int_30807 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 353, 46), 'int')
        # Processing the call keyword arguments (line 353)
        kwargs_30808 = {}
        # Getting the type of 'self' (line 353)
        self_30805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 353, 31), 'self', False)
        # Obtaining the member '__machine' of a type (line 353)
        machine_30806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 353, 31), self_30805, '__machine')
        # Calling __machine(args, kwargs) (line 353)
        machine_call_result_30809 = invoke(stypy.reporting.localization.Localization(__file__, 353, 31), machine_30806, *[int_30807], **kwargs_30808)
        
        # Assigning a type to the variable 'stypy_return_type' (line 353)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 353, 24), 'stypy_return_type', machine_call_result_30809)
        
        # ################# End of '_is_IP30(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_IP30' in the type store
        # Getting the type of 'stypy_return_type' (line 353)
        stypy_return_type_30810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 353, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30810)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_IP30'
        return stypy_return_type_30810


    @norecursion
    def _is_IP32(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_IP32'
        module_type_store = module_type_store.open_function_context('_is_IP32', 354, 4, False)
        # Assigning a type to the variable 'self' (line 355)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 355, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IRIXCPUInfo._is_IP32.__dict__.__setitem__('stypy_localization', localization)
        IRIXCPUInfo._is_IP32.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IRIXCPUInfo._is_IP32.__dict__.__setitem__('stypy_type_store', module_type_store)
        IRIXCPUInfo._is_IP32.__dict__.__setitem__('stypy_function_name', 'IRIXCPUInfo._is_IP32')
        IRIXCPUInfo._is_IP32.__dict__.__setitem__('stypy_param_names_list', [])
        IRIXCPUInfo._is_IP32.__dict__.__setitem__('stypy_varargs_param_name', None)
        IRIXCPUInfo._is_IP32.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IRIXCPUInfo._is_IP32.__dict__.__setitem__('stypy_call_defaults', defaults)
        IRIXCPUInfo._is_IP32.__dict__.__setitem__('stypy_call_varargs', varargs)
        IRIXCPUInfo._is_IP32.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IRIXCPUInfo._is_IP32.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IRIXCPUInfo._is_IP32', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_IP32', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_IP32(...)' code ##################

        
        # Call to __machine(...): (line 354)
        # Processing the call arguments (line 354)
        int_30813 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 354, 46), 'int')
        # Processing the call keyword arguments (line 354)
        kwargs_30814 = {}
        # Getting the type of 'self' (line 354)
        self_30811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 354, 31), 'self', False)
        # Obtaining the member '__machine' of a type (line 354)
        machine_30812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 354, 31), self_30811, '__machine')
        # Calling __machine(args, kwargs) (line 354)
        machine_call_result_30815 = invoke(stypy.reporting.localization.Localization(__file__, 354, 31), machine_30812, *[int_30813], **kwargs_30814)
        
        # Assigning a type to the variable 'stypy_return_type' (line 354)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 354, 24), 'stypy_return_type', machine_call_result_30815)
        
        # ################# End of '_is_IP32(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_IP32' in the type store
        # Getting the type of 'stypy_return_type' (line 354)
        stypy_return_type_30816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 354, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30816)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_IP32'
        return stypy_return_type_30816


    @norecursion
    def _is_IP32_5k(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_IP32_5k'
        module_type_store = module_type_store.open_function_context('_is_IP32_5k', 355, 4, False)
        # Assigning a type to the variable 'self' (line 356)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 356, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IRIXCPUInfo._is_IP32_5k.__dict__.__setitem__('stypy_localization', localization)
        IRIXCPUInfo._is_IP32_5k.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IRIXCPUInfo._is_IP32_5k.__dict__.__setitem__('stypy_type_store', module_type_store)
        IRIXCPUInfo._is_IP32_5k.__dict__.__setitem__('stypy_function_name', 'IRIXCPUInfo._is_IP32_5k')
        IRIXCPUInfo._is_IP32_5k.__dict__.__setitem__('stypy_param_names_list', [])
        IRIXCPUInfo._is_IP32_5k.__dict__.__setitem__('stypy_varargs_param_name', None)
        IRIXCPUInfo._is_IP32_5k.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IRIXCPUInfo._is_IP32_5k.__dict__.__setitem__('stypy_call_defaults', defaults)
        IRIXCPUInfo._is_IP32_5k.__dict__.__setitem__('stypy_call_varargs', varargs)
        IRIXCPUInfo._is_IP32_5k.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IRIXCPUInfo._is_IP32_5k.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IRIXCPUInfo._is_IP32_5k', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_IP32_5k', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_IP32_5k(...)' code ##################

        
        # Evaluating a boolean operation
        
        # Call to __machine(...): (line 355)
        # Processing the call arguments (line 355)
        int_30819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 355, 49), 'int')
        # Processing the call keyword arguments (line 355)
        kwargs_30820 = {}
        # Getting the type of 'self' (line 355)
        self_30817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 34), 'self', False)
        # Obtaining the member '__machine' of a type (line 355)
        machine_30818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 355, 34), self_30817, '__machine')
        # Calling __machine(args, kwargs) (line 355)
        machine_call_result_30821 = invoke(stypy.reporting.localization.Localization(__file__, 355, 34), machine_30818, *[int_30819], **kwargs_30820)
        
        
        # Call to _is_r5000(...): (line 355)
        # Processing the call keyword arguments (line 355)
        kwargs_30824 = {}
        # Getting the type of 'self' (line 355)
        self_30822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 57), 'self', False)
        # Obtaining the member '_is_r5000' of a type (line 355)
        _is_r5000_30823 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 355, 57), self_30822, '_is_r5000')
        # Calling _is_r5000(args, kwargs) (line 355)
        _is_r5000_call_result_30825 = invoke(stypy.reporting.localization.Localization(__file__, 355, 57), _is_r5000_30823, *[], **kwargs_30824)
        
        # Applying the binary operator 'and' (line 355)
        result_and_keyword_30826 = python_operator(stypy.reporting.localization.Localization(__file__, 355, 34), 'and', machine_call_result_30821, _is_r5000_call_result_30825)
        
        # Assigning a type to the variable 'stypy_return_type' (line 355)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 355, 27), 'stypy_return_type', result_and_keyword_30826)
        
        # ################# End of '_is_IP32_5k(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_IP32_5k' in the type store
        # Getting the type of 'stypy_return_type' (line 355)
        stypy_return_type_30827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30827)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_IP32_5k'
        return stypy_return_type_30827


    @norecursion
    def _is_IP32_10k(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_IP32_10k'
        module_type_store = module_type_store.open_function_context('_is_IP32_10k', 356, 4, False)
        # Assigning a type to the variable 'self' (line 357)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 357, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        IRIXCPUInfo._is_IP32_10k.__dict__.__setitem__('stypy_localization', localization)
        IRIXCPUInfo._is_IP32_10k.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        IRIXCPUInfo._is_IP32_10k.__dict__.__setitem__('stypy_type_store', module_type_store)
        IRIXCPUInfo._is_IP32_10k.__dict__.__setitem__('stypy_function_name', 'IRIXCPUInfo._is_IP32_10k')
        IRIXCPUInfo._is_IP32_10k.__dict__.__setitem__('stypy_param_names_list', [])
        IRIXCPUInfo._is_IP32_10k.__dict__.__setitem__('stypy_varargs_param_name', None)
        IRIXCPUInfo._is_IP32_10k.__dict__.__setitem__('stypy_kwargs_param_name', None)
        IRIXCPUInfo._is_IP32_10k.__dict__.__setitem__('stypy_call_defaults', defaults)
        IRIXCPUInfo._is_IP32_10k.__dict__.__setitem__('stypy_call_varargs', varargs)
        IRIXCPUInfo._is_IP32_10k.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        IRIXCPUInfo._is_IP32_10k.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'IRIXCPUInfo._is_IP32_10k', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_IP32_10k', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_IP32_10k(...)' code ##################

        
        # Evaluating a boolean operation
        
        # Call to __machine(...): (line 356)
        # Processing the call arguments (line 356)
        int_30830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 356, 50), 'int')
        # Processing the call keyword arguments (line 356)
        kwargs_30831 = {}
        # Getting the type of 'self' (line 356)
        self_30828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 35), 'self', False)
        # Obtaining the member '__machine' of a type (line 356)
        machine_30829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 356, 35), self_30828, '__machine')
        # Calling __machine(args, kwargs) (line 356)
        machine_call_result_30832 = invoke(stypy.reporting.localization.Localization(__file__, 356, 35), machine_30829, *[int_30830], **kwargs_30831)
        
        
        # Call to _is_r10000(...): (line 356)
        # Processing the call keyword arguments (line 356)
        kwargs_30835 = {}
        # Getting the type of 'self' (line 356)
        self_30833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 58), 'self', False)
        # Obtaining the member '_is_r10000' of a type (line 356)
        _is_r10000_30834 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 356, 58), self_30833, '_is_r10000')
        # Calling _is_r10000(args, kwargs) (line 356)
        _is_r10000_call_result_30836 = invoke(stypy.reporting.localization.Localization(__file__, 356, 58), _is_r10000_30834, *[], **kwargs_30835)
        
        # Applying the binary operator 'and' (line 356)
        result_and_keyword_30837 = python_operator(stypy.reporting.localization.Localization(__file__, 356, 35), 'and', machine_call_result_30832, _is_r10000_call_result_30836)
        
        # Assigning a type to the variable 'stypy_return_type' (line 356)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 356, 28), 'stypy_return_type', result_and_keyword_30837)
        
        # ################# End of '_is_IP32_10k(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_IP32_10k' in the type store
        # Getting the type of 'stypy_return_type' (line 356)
        stypy_return_type_30838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30838)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_IP32_10k'
        return stypy_return_type_30838


# Assigning a type to the variable 'IRIXCPUInfo' (line 301)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 301, 0), 'IRIXCPUInfo', IRIXCPUInfo)

# Assigning a Name to a Name (line 302):
# Getting the type of 'None' (line 302)
None_30839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 11), 'None')
# Getting the type of 'IRIXCPUInfo'
IRIXCPUInfo_30840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'IRIXCPUInfo')
# Setting the type of the member 'info' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), IRIXCPUInfo_30840, 'info', None_30839)
# Declaration of the 'DarwinCPUInfo' class
# Getting the type of 'CPUInfoBase' (line 359)
CPUInfoBase_30841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 20), 'CPUInfoBase')

class DarwinCPUInfo(CPUInfoBase_30841, ):
    
    # Assigning a Name to a Name (line 360):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 362, 4, False)
        # Assigning a type to the variable 'self' (line 363)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 363, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DarwinCPUInfo.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        
        # Getting the type of 'self' (line 363)
        self_30842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 11), 'self')
        # Obtaining the member 'info' of a type (line 363)
        info_30843 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 363, 11), self_30842, 'info')
        # Getting the type of 'None' (line 363)
        None_30844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 28), 'None')
        # Applying the binary operator 'isnot' (line 363)
        result_is_not_30845 = python_operator(stypy.reporting.localization.Localization(__file__, 363, 11), 'isnot', info_30843, None_30844)
        
        # Testing the type of an if condition (line 363)
        if_condition_30846 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 363, 8), result_is_not_30845)
        # Assigning a type to the variable 'if_condition_30846' (line 363)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 363, 8), 'if_condition_30846', if_condition_30846)
        # SSA begins for if statement (line 363)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 364)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 364, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 363)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 365):
        
        # Assigning a Call to a Name (line 365):
        
        # Call to command_info(...): (line 365)
        # Processing the call keyword arguments (line 365)
        str_30848 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 365, 33), 'str', 'arch')
        keyword_30849 = str_30848
        str_30850 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 366, 36), 'str', 'machine')
        keyword_30851 = str_30850
        kwargs_30852 = {'machine': keyword_30851, 'arch': keyword_30849}
        # Getting the type of 'command_info' (line 365)
        command_info_30847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 15), 'command_info', False)
        # Calling command_info(args, kwargs) (line 365)
        command_info_call_result_30853 = invoke(stypy.reporting.localization.Localization(__file__, 365, 15), command_info_30847, *[], **kwargs_30852)
        
        # Assigning a type to the variable 'info' (line 365)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 365, 8), 'info', command_info_call_result_30853)
        
        # Assigning a Call to a Subscript (line 367):
        
        # Assigning a Call to a Subscript (line 367):
        
        # Call to key_value_from_command(...): (line 367)
        # Processing the call arguments (line 367)
        str_30855 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 367, 51), 'str', 'sysctl hw')
        # Processing the call keyword arguments (line 367)
        str_30856 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 367, 68), 'str', '=')
        keyword_30857 = str_30856
        kwargs_30858 = {'sep': keyword_30857}
        # Getting the type of 'key_value_from_command' (line 367)
        key_value_from_command_30854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 28), 'key_value_from_command', False)
        # Calling key_value_from_command(args, kwargs) (line 367)
        key_value_from_command_call_result_30859 = invoke(stypy.reporting.localization.Localization(__file__, 367, 28), key_value_from_command_30854, *[str_30855], **kwargs_30858)
        
        # Getting the type of 'info' (line 367)
        info_30860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 8), 'info')
        str_30861 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 367, 13), 'str', 'sysctl_hw')
        # Storing an element on a container (line 367)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 367, 8), info_30860, (str_30861, key_value_from_command_call_result_30859))
        
        # Assigning a Name to a Attribute (line 368):
        
        # Assigning a Name to a Attribute (line 368):
        # Getting the type of 'info' (line 368)
        info_30862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 30), 'info')
        # Getting the type of 'self' (line 368)
        self_30863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 8), 'self')
        # Obtaining the member '__class__' of a type (line 368)
        class___30864 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 368, 8), self_30863, '__class__')
        # Setting the type of the member 'info' of a type (line 368)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 368, 8), class___30864, 'info', info_30862)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _not_impl(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_not_impl'
        module_type_store = module_type_store.open_function_context('_not_impl', 370, 4, False)
        # Assigning a type to the variable 'self' (line 371)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 371, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DarwinCPUInfo._not_impl.__dict__.__setitem__('stypy_localization', localization)
        DarwinCPUInfo._not_impl.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DarwinCPUInfo._not_impl.__dict__.__setitem__('stypy_type_store', module_type_store)
        DarwinCPUInfo._not_impl.__dict__.__setitem__('stypy_function_name', 'DarwinCPUInfo._not_impl')
        DarwinCPUInfo._not_impl.__dict__.__setitem__('stypy_param_names_list', [])
        DarwinCPUInfo._not_impl.__dict__.__setitem__('stypy_varargs_param_name', None)
        DarwinCPUInfo._not_impl.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DarwinCPUInfo._not_impl.__dict__.__setitem__('stypy_call_defaults', defaults)
        DarwinCPUInfo._not_impl.__dict__.__setitem__('stypy_call_varargs', varargs)
        DarwinCPUInfo._not_impl.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DarwinCPUInfo._not_impl.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DarwinCPUInfo._not_impl', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_not_impl', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_not_impl(...)' code ##################

        pass
        
        # ################# End of '_not_impl(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_not_impl' in the type store
        # Getting the type of 'stypy_return_type' (line 370)
        stypy_return_type_30865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30865)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_not_impl'
        return stypy_return_type_30865


    @norecursion
    def _getNCPUs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_getNCPUs'
        module_type_store = module_type_store.open_function_context('_getNCPUs', 372, 4, False)
        # Assigning a type to the variable 'self' (line 373)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 373, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DarwinCPUInfo._getNCPUs.__dict__.__setitem__('stypy_localization', localization)
        DarwinCPUInfo._getNCPUs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DarwinCPUInfo._getNCPUs.__dict__.__setitem__('stypy_type_store', module_type_store)
        DarwinCPUInfo._getNCPUs.__dict__.__setitem__('stypy_function_name', 'DarwinCPUInfo._getNCPUs')
        DarwinCPUInfo._getNCPUs.__dict__.__setitem__('stypy_param_names_list', [])
        DarwinCPUInfo._getNCPUs.__dict__.__setitem__('stypy_varargs_param_name', None)
        DarwinCPUInfo._getNCPUs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DarwinCPUInfo._getNCPUs.__dict__.__setitem__('stypy_call_defaults', defaults)
        DarwinCPUInfo._getNCPUs.__dict__.__setitem__('stypy_call_varargs', varargs)
        DarwinCPUInfo._getNCPUs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DarwinCPUInfo._getNCPUs.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DarwinCPUInfo._getNCPUs', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_getNCPUs', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_getNCPUs(...)' code ##################

        
        # Call to int(...): (line 373)
        # Processing the call arguments (line 373)
        
        # Call to get(...): (line 373)
        # Processing the call arguments (line 373)
        str_30873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 373, 46), 'str', 'hw.ncpu')
        int_30874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 373, 57), 'int')
        # Processing the call keyword arguments (line 373)
        kwargs_30875 = {}
        
        # Obtaining the type of the subscript
        str_30867 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 373, 29), 'str', 'sysctl_hw')
        # Getting the type of 'self' (line 373)
        self_30868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 19), 'self', False)
        # Obtaining the member 'info' of a type (line 373)
        info_30869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 373, 19), self_30868, 'info')
        # Obtaining the member '__getitem__' of a type (line 373)
        getitem___30870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 373, 19), info_30869, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 373)
        subscript_call_result_30871 = invoke(stypy.reporting.localization.Localization(__file__, 373, 19), getitem___30870, str_30867)
        
        # Obtaining the member 'get' of a type (line 373)
        get_30872 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 373, 19), subscript_call_result_30871, 'get')
        # Calling get(args, kwargs) (line 373)
        get_call_result_30876 = invoke(stypy.reporting.localization.Localization(__file__, 373, 19), get_30872, *[str_30873, int_30874], **kwargs_30875)
        
        # Processing the call keyword arguments (line 373)
        kwargs_30877 = {}
        # Getting the type of 'int' (line 373)
        int_30866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 373, 15), 'int', False)
        # Calling int(args, kwargs) (line 373)
        int_call_result_30878 = invoke(stypy.reporting.localization.Localization(__file__, 373, 15), int_30866, *[get_call_result_30876], **kwargs_30877)
        
        # Assigning a type to the variable 'stypy_return_type' (line 373)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 373, 8), 'stypy_return_type', int_call_result_30878)
        
        # ################# End of '_getNCPUs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_getNCPUs' in the type store
        # Getting the type of 'stypy_return_type' (line 372)
        stypy_return_type_30879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30879)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_getNCPUs'
        return stypy_return_type_30879


    @norecursion
    def _is_Power_Macintosh(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_Power_Macintosh'
        module_type_store = module_type_store.open_function_context('_is_Power_Macintosh', 375, 4, False)
        # Assigning a type to the variable 'self' (line 376)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 376, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DarwinCPUInfo._is_Power_Macintosh.__dict__.__setitem__('stypy_localization', localization)
        DarwinCPUInfo._is_Power_Macintosh.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DarwinCPUInfo._is_Power_Macintosh.__dict__.__setitem__('stypy_type_store', module_type_store)
        DarwinCPUInfo._is_Power_Macintosh.__dict__.__setitem__('stypy_function_name', 'DarwinCPUInfo._is_Power_Macintosh')
        DarwinCPUInfo._is_Power_Macintosh.__dict__.__setitem__('stypy_param_names_list', [])
        DarwinCPUInfo._is_Power_Macintosh.__dict__.__setitem__('stypy_varargs_param_name', None)
        DarwinCPUInfo._is_Power_Macintosh.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DarwinCPUInfo._is_Power_Macintosh.__dict__.__setitem__('stypy_call_defaults', defaults)
        DarwinCPUInfo._is_Power_Macintosh.__dict__.__setitem__('stypy_call_varargs', varargs)
        DarwinCPUInfo._is_Power_Macintosh.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DarwinCPUInfo._is_Power_Macintosh.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DarwinCPUInfo._is_Power_Macintosh', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_Power_Macintosh', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_Power_Macintosh(...)' code ##################

        
        
        # Obtaining the type of the subscript
        str_30880 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 376, 38), 'str', 'hw.machine')
        
        # Obtaining the type of the subscript
        str_30881 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 376, 25), 'str', 'sysctl_hw')
        # Getting the type of 'self' (line 376)
        self_30882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 376, 15), 'self')
        # Obtaining the member 'info' of a type (line 376)
        info_30883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 376, 15), self_30882, 'info')
        # Obtaining the member '__getitem__' of a type (line 376)
        getitem___30884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 376, 15), info_30883, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 376)
        subscript_call_result_30885 = invoke(stypy.reporting.localization.Localization(__file__, 376, 15), getitem___30884, str_30881)
        
        # Obtaining the member '__getitem__' of a type (line 376)
        getitem___30886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 376, 15), subscript_call_result_30885, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 376)
        subscript_call_result_30887 = invoke(stypy.reporting.localization.Localization(__file__, 376, 15), getitem___30886, str_30880)
        
        str_30888 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 376, 53), 'str', 'Power Macintosh')
        # Applying the binary operator '==' (line 376)
        result_eq_30889 = python_operator(stypy.reporting.localization.Localization(__file__, 376, 15), '==', subscript_call_result_30887, str_30888)
        
        # Assigning a type to the variable 'stypy_return_type' (line 376)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 376, 8), 'stypy_return_type', result_eq_30889)
        
        # ################# End of '_is_Power_Macintosh(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_Power_Macintosh' in the type store
        # Getting the type of 'stypy_return_type' (line 375)
        stypy_return_type_30890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30890)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_Power_Macintosh'
        return stypy_return_type_30890


    @norecursion
    def _is_i386(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_i386'
        module_type_store = module_type_store.open_function_context('_is_i386', 378, 4, False)
        # Assigning a type to the variable 'self' (line 379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 379, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DarwinCPUInfo._is_i386.__dict__.__setitem__('stypy_localization', localization)
        DarwinCPUInfo._is_i386.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DarwinCPUInfo._is_i386.__dict__.__setitem__('stypy_type_store', module_type_store)
        DarwinCPUInfo._is_i386.__dict__.__setitem__('stypy_function_name', 'DarwinCPUInfo._is_i386')
        DarwinCPUInfo._is_i386.__dict__.__setitem__('stypy_param_names_list', [])
        DarwinCPUInfo._is_i386.__dict__.__setitem__('stypy_varargs_param_name', None)
        DarwinCPUInfo._is_i386.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DarwinCPUInfo._is_i386.__dict__.__setitem__('stypy_call_defaults', defaults)
        DarwinCPUInfo._is_i386.__dict__.__setitem__('stypy_call_varargs', varargs)
        DarwinCPUInfo._is_i386.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DarwinCPUInfo._is_i386.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DarwinCPUInfo._is_i386', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_i386', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_i386(...)' code ##################

        
        
        # Obtaining the type of the subscript
        str_30891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 379, 25), 'str', 'arch')
        # Getting the type of 'self' (line 379)
        self_30892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 15), 'self')
        # Obtaining the member 'info' of a type (line 379)
        info_30893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 379, 15), self_30892, 'info')
        # Obtaining the member '__getitem__' of a type (line 379)
        getitem___30894 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 379, 15), info_30893, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 379)
        subscript_call_result_30895 = invoke(stypy.reporting.localization.Localization(__file__, 379, 15), getitem___30894, str_30891)
        
        str_30896 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 379, 34), 'str', 'i386')
        # Applying the binary operator '==' (line 379)
        result_eq_30897 = python_operator(stypy.reporting.localization.Localization(__file__, 379, 15), '==', subscript_call_result_30895, str_30896)
        
        # Assigning a type to the variable 'stypy_return_type' (line 379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 379, 8), 'stypy_return_type', result_eq_30897)
        
        # ################# End of '_is_i386(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_i386' in the type store
        # Getting the type of 'stypy_return_type' (line 378)
        stypy_return_type_30898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30898)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_i386'
        return stypy_return_type_30898


    @norecursion
    def _is_ppc(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_ppc'
        module_type_store = module_type_store.open_function_context('_is_ppc', 380, 4, False)
        # Assigning a type to the variable 'self' (line 381)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 381, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DarwinCPUInfo._is_ppc.__dict__.__setitem__('stypy_localization', localization)
        DarwinCPUInfo._is_ppc.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DarwinCPUInfo._is_ppc.__dict__.__setitem__('stypy_type_store', module_type_store)
        DarwinCPUInfo._is_ppc.__dict__.__setitem__('stypy_function_name', 'DarwinCPUInfo._is_ppc')
        DarwinCPUInfo._is_ppc.__dict__.__setitem__('stypy_param_names_list', [])
        DarwinCPUInfo._is_ppc.__dict__.__setitem__('stypy_varargs_param_name', None)
        DarwinCPUInfo._is_ppc.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DarwinCPUInfo._is_ppc.__dict__.__setitem__('stypy_call_defaults', defaults)
        DarwinCPUInfo._is_ppc.__dict__.__setitem__('stypy_call_varargs', varargs)
        DarwinCPUInfo._is_ppc.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DarwinCPUInfo._is_ppc.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DarwinCPUInfo._is_ppc', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_ppc', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_ppc(...)' code ##################

        
        
        # Obtaining the type of the subscript
        str_30899 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 381, 25), 'str', 'arch')
        # Getting the type of 'self' (line 381)
        self_30900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 381, 15), 'self')
        # Obtaining the member 'info' of a type (line 381)
        info_30901 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 381, 15), self_30900, 'info')
        # Obtaining the member '__getitem__' of a type (line 381)
        getitem___30902 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 381, 15), info_30901, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 381)
        subscript_call_result_30903 = invoke(stypy.reporting.localization.Localization(__file__, 381, 15), getitem___30902, str_30899)
        
        str_30904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 381, 34), 'str', 'ppc')
        # Applying the binary operator '==' (line 381)
        result_eq_30905 = python_operator(stypy.reporting.localization.Localization(__file__, 381, 15), '==', subscript_call_result_30903, str_30904)
        
        # Assigning a type to the variable 'stypy_return_type' (line 381)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 381, 8), 'stypy_return_type', result_eq_30905)
        
        # ################# End of '_is_ppc(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_ppc' in the type store
        # Getting the type of 'stypy_return_type' (line 380)
        stypy_return_type_30906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30906)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_ppc'
        return stypy_return_type_30906


    @norecursion
    def __machine(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__machine'
        module_type_store = module_type_store.open_function_context('__machine', 383, 4, False)
        # Assigning a type to the variable 'self' (line 384)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 384, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DarwinCPUInfo.__machine.__dict__.__setitem__('stypy_localization', localization)
        DarwinCPUInfo.__machine.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DarwinCPUInfo.__machine.__dict__.__setitem__('stypy_type_store', module_type_store)
        DarwinCPUInfo.__machine.__dict__.__setitem__('stypy_function_name', 'DarwinCPUInfo.__machine')
        DarwinCPUInfo.__machine.__dict__.__setitem__('stypy_param_names_list', ['n'])
        DarwinCPUInfo.__machine.__dict__.__setitem__('stypy_varargs_param_name', None)
        DarwinCPUInfo.__machine.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DarwinCPUInfo.__machine.__dict__.__setitem__('stypy_call_defaults', defaults)
        DarwinCPUInfo.__machine.__dict__.__setitem__('stypy_call_varargs', varargs)
        DarwinCPUInfo.__machine.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DarwinCPUInfo.__machine.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DarwinCPUInfo.__machine', ['n'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__machine', localization, ['n'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__machine(...)' code ##################

        
        
        # Obtaining the type of the subscript
        str_30907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 384, 25), 'str', 'machine')
        # Getting the type of 'self' (line 384)
        self_30908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 15), 'self')
        # Obtaining the member 'info' of a type (line 384)
        info_30909 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 384, 15), self_30908, 'info')
        # Obtaining the member '__getitem__' of a type (line 384)
        getitem___30910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 384, 15), info_30909, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 384)
        subscript_call_result_30911 = invoke(stypy.reporting.localization.Localization(__file__, 384, 15), getitem___30910, str_30907)
        
        str_30912 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 384, 39), 'str', 'ppc%s')
        # Getting the type of 'n' (line 384)
        n_30913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 47), 'n')
        # Applying the binary operator '%' (line 384)
        result_mod_30914 = python_operator(stypy.reporting.localization.Localization(__file__, 384, 39), '%', str_30912, n_30913)
        
        # Applying the binary operator '==' (line 384)
        result_eq_30915 = python_operator(stypy.reporting.localization.Localization(__file__, 384, 15), '==', subscript_call_result_30911, result_mod_30914)
        
        # Assigning a type to the variable 'stypy_return_type' (line 384)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 384, 8), 'stypy_return_type', result_eq_30915)
        
        # ################# End of '__machine(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__machine' in the type store
        # Getting the type of 'stypy_return_type' (line 383)
        stypy_return_type_30916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30916)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__machine'
        return stypy_return_type_30916


    @norecursion
    def _is_ppc601(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_ppc601'
        module_type_store = module_type_store.open_function_context('_is_ppc601', 385, 4, False)
        # Assigning a type to the variable 'self' (line 386)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 386, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DarwinCPUInfo._is_ppc601.__dict__.__setitem__('stypy_localization', localization)
        DarwinCPUInfo._is_ppc601.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DarwinCPUInfo._is_ppc601.__dict__.__setitem__('stypy_type_store', module_type_store)
        DarwinCPUInfo._is_ppc601.__dict__.__setitem__('stypy_function_name', 'DarwinCPUInfo._is_ppc601')
        DarwinCPUInfo._is_ppc601.__dict__.__setitem__('stypy_param_names_list', [])
        DarwinCPUInfo._is_ppc601.__dict__.__setitem__('stypy_varargs_param_name', None)
        DarwinCPUInfo._is_ppc601.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DarwinCPUInfo._is_ppc601.__dict__.__setitem__('stypy_call_defaults', defaults)
        DarwinCPUInfo._is_ppc601.__dict__.__setitem__('stypy_call_varargs', varargs)
        DarwinCPUInfo._is_ppc601.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DarwinCPUInfo._is_ppc601.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DarwinCPUInfo._is_ppc601', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_ppc601', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_ppc601(...)' code ##################

        
        # Call to __machine(...): (line 385)
        # Processing the call arguments (line 385)
        int_30919 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 385, 48), 'int')
        # Processing the call keyword arguments (line 385)
        kwargs_30920 = {}
        # Getting the type of 'self' (line 385)
        self_30917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 33), 'self', False)
        # Obtaining the member '__machine' of a type (line 385)
        machine_30918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 385, 33), self_30917, '__machine')
        # Calling __machine(args, kwargs) (line 385)
        machine_call_result_30921 = invoke(stypy.reporting.localization.Localization(__file__, 385, 33), machine_30918, *[int_30919], **kwargs_30920)
        
        # Assigning a type to the variable 'stypy_return_type' (line 385)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 385, 26), 'stypy_return_type', machine_call_result_30921)
        
        # ################# End of '_is_ppc601(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_ppc601' in the type store
        # Getting the type of 'stypy_return_type' (line 385)
        stypy_return_type_30922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30922)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_ppc601'
        return stypy_return_type_30922


    @norecursion
    def _is_ppc602(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_ppc602'
        module_type_store = module_type_store.open_function_context('_is_ppc602', 386, 4, False)
        # Assigning a type to the variable 'self' (line 387)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 387, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DarwinCPUInfo._is_ppc602.__dict__.__setitem__('stypy_localization', localization)
        DarwinCPUInfo._is_ppc602.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DarwinCPUInfo._is_ppc602.__dict__.__setitem__('stypy_type_store', module_type_store)
        DarwinCPUInfo._is_ppc602.__dict__.__setitem__('stypy_function_name', 'DarwinCPUInfo._is_ppc602')
        DarwinCPUInfo._is_ppc602.__dict__.__setitem__('stypy_param_names_list', [])
        DarwinCPUInfo._is_ppc602.__dict__.__setitem__('stypy_varargs_param_name', None)
        DarwinCPUInfo._is_ppc602.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DarwinCPUInfo._is_ppc602.__dict__.__setitem__('stypy_call_defaults', defaults)
        DarwinCPUInfo._is_ppc602.__dict__.__setitem__('stypy_call_varargs', varargs)
        DarwinCPUInfo._is_ppc602.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DarwinCPUInfo._is_ppc602.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DarwinCPUInfo._is_ppc602', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_ppc602', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_ppc602(...)' code ##################

        
        # Call to __machine(...): (line 386)
        # Processing the call arguments (line 386)
        int_30925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 386, 48), 'int')
        # Processing the call keyword arguments (line 386)
        kwargs_30926 = {}
        # Getting the type of 'self' (line 386)
        self_30923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 33), 'self', False)
        # Obtaining the member '__machine' of a type (line 386)
        machine_30924 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 386, 33), self_30923, '__machine')
        # Calling __machine(args, kwargs) (line 386)
        machine_call_result_30927 = invoke(stypy.reporting.localization.Localization(__file__, 386, 33), machine_30924, *[int_30925], **kwargs_30926)
        
        # Assigning a type to the variable 'stypy_return_type' (line 386)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 386, 26), 'stypy_return_type', machine_call_result_30927)
        
        # ################# End of '_is_ppc602(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_ppc602' in the type store
        # Getting the type of 'stypy_return_type' (line 386)
        stypy_return_type_30928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30928)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_ppc602'
        return stypy_return_type_30928


    @norecursion
    def _is_ppc603(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_ppc603'
        module_type_store = module_type_store.open_function_context('_is_ppc603', 387, 4, False)
        # Assigning a type to the variable 'self' (line 388)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 388, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DarwinCPUInfo._is_ppc603.__dict__.__setitem__('stypy_localization', localization)
        DarwinCPUInfo._is_ppc603.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DarwinCPUInfo._is_ppc603.__dict__.__setitem__('stypy_type_store', module_type_store)
        DarwinCPUInfo._is_ppc603.__dict__.__setitem__('stypy_function_name', 'DarwinCPUInfo._is_ppc603')
        DarwinCPUInfo._is_ppc603.__dict__.__setitem__('stypy_param_names_list', [])
        DarwinCPUInfo._is_ppc603.__dict__.__setitem__('stypy_varargs_param_name', None)
        DarwinCPUInfo._is_ppc603.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DarwinCPUInfo._is_ppc603.__dict__.__setitem__('stypy_call_defaults', defaults)
        DarwinCPUInfo._is_ppc603.__dict__.__setitem__('stypy_call_varargs', varargs)
        DarwinCPUInfo._is_ppc603.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DarwinCPUInfo._is_ppc603.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DarwinCPUInfo._is_ppc603', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_ppc603', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_ppc603(...)' code ##################

        
        # Call to __machine(...): (line 387)
        # Processing the call arguments (line 387)
        int_30931 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 387, 48), 'int')
        # Processing the call keyword arguments (line 387)
        kwargs_30932 = {}
        # Getting the type of 'self' (line 387)
        self_30929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 33), 'self', False)
        # Obtaining the member '__machine' of a type (line 387)
        machine_30930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 387, 33), self_30929, '__machine')
        # Calling __machine(args, kwargs) (line 387)
        machine_call_result_30933 = invoke(stypy.reporting.localization.Localization(__file__, 387, 33), machine_30930, *[int_30931], **kwargs_30932)
        
        # Assigning a type to the variable 'stypy_return_type' (line 387)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 387, 26), 'stypy_return_type', machine_call_result_30933)
        
        # ################# End of '_is_ppc603(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_ppc603' in the type store
        # Getting the type of 'stypy_return_type' (line 387)
        stypy_return_type_30934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30934)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_ppc603'
        return stypy_return_type_30934


    @norecursion
    def _is_ppc603e(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_ppc603e'
        module_type_store = module_type_store.open_function_context('_is_ppc603e', 388, 4, False)
        # Assigning a type to the variable 'self' (line 389)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 389, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DarwinCPUInfo._is_ppc603e.__dict__.__setitem__('stypy_localization', localization)
        DarwinCPUInfo._is_ppc603e.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DarwinCPUInfo._is_ppc603e.__dict__.__setitem__('stypy_type_store', module_type_store)
        DarwinCPUInfo._is_ppc603e.__dict__.__setitem__('stypy_function_name', 'DarwinCPUInfo._is_ppc603e')
        DarwinCPUInfo._is_ppc603e.__dict__.__setitem__('stypy_param_names_list', [])
        DarwinCPUInfo._is_ppc603e.__dict__.__setitem__('stypy_varargs_param_name', None)
        DarwinCPUInfo._is_ppc603e.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DarwinCPUInfo._is_ppc603e.__dict__.__setitem__('stypy_call_defaults', defaults)
        DarwinCPUInfo._is_ppc603e.__dict__.__setitem__('stypy_call_varargs', varargs)
        DarwinCPUInfo._is_ppc603e.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DarwinCPUInfo._is_ppc603e.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DarwinCPUInfo._is_ppc603e', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_ppc603e', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_ppc603e(...)' code ##################

        
        # Call to __machine(...): (line 388)
        # Processing the call arguments (line 388)
        str_30937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 388, 49), 'str', '603e')
        # Processing the call keyword arguments (line 388)
        kwargs_30938 = {}
        # Getting the type of 'self' (line 388)
        self_30935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 34), 'self', False)
        # Obtaining the member '__machine' of a type (line 388)
        machine_30936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 388, 34), self_30935, '__machine')
        # Calling __machine(args, kwargs) (line 388)
        machine_call_result_30939 = invoke(stypy.reporting.localization.Localization(__file__, 388, 34), machine_30936, *[str_30937], **kwargs_30938)
        
        # Assigning a type to the variable 'stypy_return_type' (line 388)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 388, 27), 'stypy_return_type', machine_call_result_30939)
        
        # ################# End of '_is_ppc603e(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_ppc603e' in the type store
        # Getting the type of 'stypy_return_type' (line 388)
        stypy_return_type_30940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30940)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_ppc603e'
        return stypy_return_type_30940


    @norecursion
    def _is_ppc604(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_ppc604'
        module_type_store = module_type_store.open_function_context('_is_ppc604', 389, 4, False)
        # Assigning a type to the variable 'self' (line 390)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 390, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DarwinCPUInfo._is_ppc604.__dict__.__setitem__('stypy_localization', localization)
        DarwinCPUInfo._is_ppc604.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DarwinCPUInfo._is_ppc604.__dict__.__setitem__('stypy_type_store', module_type_store)
        DarwinCPUInfo._is_ppc604.__dict__.__setitem__('stypy_function_name', 'DarwinCPUInfo._is_ppc604')
        DarwinCPUInfo._is_ppc604.__dict__.__setitem__('stypy_param_names_list', [])
        DarwinCPUInfo._is_ppc604.__dict__.__setitem__('stypy_varargs_param_name', None)
        DarwinCPUInfo._is_ppc604.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DarwinCPUInfo._is_ppc604.__dict__.__setitem__('stypy_call_defaults', defaults)
        DarwinCPUInfo._is_ppc604.__dict__.__setitem__('stypy_call_varargs', varargs)
        DarwinCPUInfo._is_ppc604.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DarwinCPUInfo._is_ppc604.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DarwinCPUInfo._is_ppc604', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_ppc604', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_ppc604(...)' code ##################

        
        # Call to __machine(...): (line 389)
        # Processing the call arguments (line 389)
        int_30943 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 389, 48), 'int')
        # Processing the call keyword arguments (line 389)
        kwargs_30944 = {}
        # Getting the type of 'self' (line 389)
        self_30941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 33), 'self', False)
        # Obtaining the member '__machine' of a type (line 389)
        machine_30942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 389, 33), self_30941, '__machine')
        # Calling __machine(args, kwargs) (line 389)
        machine_call_result_30945 = invoke(stypy.reporting.localization.Localization(__file__, 389, 33), machine_30942, *[int_30943], **kwargs_30944)
        
        # Assigning a type to the variable 'stypy_return_type' (line 389)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 389, 26), 'stypy_return_type', machine_call_result_30945)
        
        # ################# End of '_is_ppc604(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_ppc604' in the type store
        # Getting the type of 'stypy_return_type' (line 389)
        stypy_return_type_30946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30946)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_ppc604'
        return stypy_return_type_30946


    @norecursion
    def _is_ppc604e(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_ppc604e'
        module_type_store = module_type_store.open_function_context('_is_ppc604e', 390, 4, False)
        # Assigning a type to the variable 'self' (line 391)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 391, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DarwinCPUInfo._is_ppc604e.__dict__.__setitem__('stypy_localization', localization)
        DarwinCPUInfo._is_ppc604e.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DarwinCPUInfo._is_ppc604e.__dict__.__setitem__('stypy_type_store', module_type_store)
        DarwinCPUInfo._is_ppc604e.__dict__.__setitem__('stypy_function_name', 'DarwinCPUInfo._is_ppc604e')
        DarwinCPUInfo._is_ppc604e.__dict__.__setitem__('stypy_param_names_list', [])
        DarwinCPUInfo._is_ppc604e.__dict__.__setitem__('stypy_varargs_param_name', None)
        DarwinCPUInfo._is_ppc604e.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DarwinCPUInfo._is_ppc604e.__dict__.__setitem__('stypy_call_defaults', defaults)
        DarwinCPUInfo._is_ppc604e.__dict__.__setitem__('stypy_call_varargs', varargs)
        DarwinCPUInfo._is_ppc604e.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DarwinCPUInfo._is_ppc604e.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DarwinCPUInfo._is_ppc604e', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_ppc604e', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_ppc604e(...)' code ##################

        
        # Call to __machine(...): (line 390)
        # Processing the call arguments (line 390)
        str_30949 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 390, 49), 'str', '604e')
        # Processing the call keyword arguments (line 390)
        kwargs_30950 = {}
        # Getting the type of 'self' (line 390)
        self_30947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 34), 'self', False)
        # Obtaining the member '__machine' of a type (line 390)
        machine_30948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 390, 34), self_30947, '__machine')
        # Calling __machine(args, kwargs) (line 390)
        machine_call_result_30951 = invoke(stypy.reporting.localization.Localization(__file__, 390, 34), machine_30948, *[str_30949], **kwargs_30950)
        
        # Assigning a type to the variable 'stypy_return_type' (line 390)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 390, 27), 'stypy_return_type', machine_call_result_30951)
        
        # ################# End of '_is_ppc604e(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_ppc604e' in the type store
        # Getting the type of 'stypy_return_type' (line 390)
        stypy_return_type_30952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30952)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_ppc604e'
        return stypy_return_type_30952


    @norecursion
    def _is_ppc620(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_ppc620'
        module_type_store = module_type_store.open_function_context('_is_ppc620', 391, 4, False)
        # Assigning a type to the variable 'self' (line 392)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 392, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DarwinCPUInfo._is_ppc620.__dict__.__setitem__('stypy_localization', localization)
        DarwinCPUInfo._is_ppc620.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DarwinCPUInfo._is_ppc620.__dict__.__setitem__('stypy_type_store', module_type_store)
        DarwinCPUInfo._is_ppc620.__dict__.__setitem__('stypy_function_name', 'DarwinCPUInfo._is_ppc620')
        DarwinCPUInfo._is_ppc620.__dict__.__setitem__('stypy_param_names_list', [])
        DarwinCPUInfo._is_ppc620.__dict__.__setitem__('stypy_varargs_param_name', None)
        DarwinCPUInfo._is_ppc620.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DarwinCPUInfo._is_ppc620.__dict__.__setitem__('stypy_call_defaults', defaults)
        DarwinCPUInfo._is_ppc620.__dict__.__setitem__('stypy_call_varargs', varargs)
        DarwinCPUInfo._is_ppc620.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DarwinCPUInfo._is_ppc620.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DarwinCPUInfo._is_ppc620', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_ppc620', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_ppc620(...)' code ##################

        
        # Call to __machine(...): (line 391)
        # Processing the call arguments (line 391)
        int_30955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 391, 48), 'int')
        # Processing the call keyword arguments (line 391)
        kwargs_30956 = {}
        # Getting the type of 'self' (line 391)
        self_30953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 33), 'self', False)
        # Obtaining the member '__machine' of a type (line 391)
        machine_30954 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 391, 33), self_30953, '__machine')
        # Calling __machine(args, kwargs) (line 391)
        machine_call_result_30957 = invoke(stypy.reporting.localization.Localization(__file__, 391, 33), machine_30954, *[int_30955], **kwargs_30956)
        
        # Assigning a type to the variable 'stypy_return_type' (line 391)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 391, 26), 'stypy_return_type', machine_call_result_30957)
        
        # ################# End of '_is_ppc620(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_ppc620' in the type store
        # Getting the type of 'stypy_return_type' (line 391)
        stypy_return_type_30958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30958)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_ppc620'
        return stypy_return_type_30958


    @norecursion
    def _is_ppc630(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_ppc630'
        module_type_store = module_type_store.open_function_context('_is_ppc630', 392, 4, False)
        # Assigning a type to the variable 'self' (line 393)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 393, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DarwinCPUInfo._is_ppc630.__dict__.__setitem__('stypy_localization', localization)
        DarwinCPUInfo._is_ppc630.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DarwinCPUInfo._is_ppc630.__dict__.__setitem__('stypy_type_store', module_type_store)
        DarwinCPUInfo._is_ppc630.__dict__.__setitem__('stypy_function_name', 'DarwinCPUInfo._is_ppc630')
        DarwinCPUInfo._is_ppc630.__dict__.__setitem__('stypy_param_names_list', [])
        DarwinCPUInfo._is_ppc630.__dict__.__setitem__('stypy_varargs_param_name', None)
        DarwinCPUInfo._is_ppc630.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DarwinCPUInfo._is_ppc630.__dict__.__setitem__('stypy_call_defaults', defaults)
        DarwinCPUInfo._is_ppc630.__dict__.__setitem__('stypy_call_varargs', varargs)
        DarwinCPUInfo._is_ppc630.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DarwinCPUInfo._is_ppc630.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DarwinCPUInfo._is_ppc630', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_ppc630', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_ppc630(...)' code ##################

        
        # Call to __machine(...): (line 392)
        # Processing the call arguments (line 392)
        int_30961 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 392, 48), 'int')
        # Processing the call keyword arguments (line 392)
        kwargs_30962 = {}
        # Getting the type of 'self' (line 392)
        self_30959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 33), 'self', False)
        # Obtaining the member '__machine' of a type (line 392)
        machine_30960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 392, 33), self_30959, '__machine')
        # Calling __machine(args, kwargs) (line 392)
        machine_call_result_30963 = invoke(stypy.reporting.localization.Localization(__file__, 392, 33), machine_30960, *[int_30961], **kwargs_30962)
        
        # Assigning a type to the variable 'stypy_return_type' (line 392)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 392, 26), 'stypy_return_type', machine_call_result_30963)
        
        # ################# End of '_is_ppc630(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_ppc630' in the type store
        # Getting the type of 'stypy_return_type' (line 392)
        stypy_return_type_30964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30964)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_ppc630'
        return stypy_return_type_30964


    @norecursion
    def _is_ppc740(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_ppc740'
        module_type_store = module_type_store.open_function_context('_is_ppc740', 393, 4, False)
        # Assigning a type to the variable 'self' (line 394)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 394, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DarwinCPUInfo._is_ppc740.__dict__.__setitem__('stypy_localization', localization)
        DarwinCPUInfo._is_ppc740.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DarwinCPUInfo._is_ppc740.__dict__.__setitem__('stypy_type_store', module_type_store)
        DarwinCPUInfo._is_ppc740.__dict__.__setitem__('stypy_function_name', 'DarwinCPUInfo._is_ppc740')
        DarwinCPUInfo._is_ppc740.__dict__.__setitem__('stypy_param_names_list', [])
        DarwinCPUInfo._is_ppc740.__dict__.__setitem__('stypy_varargs_param_name', None)
        DarwinCPUInfo._is_ppc740.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DarwinCPUInfo._is_ppc740.__dict__.__setitem__('stypy_call_defaults', defaults)
        DarwinCPUInfo._is_ppc740.__dict__.__setitem__('stypy_call_varargs', varargs)
        DarwinCPUInfo._is_ppc740.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DarwinCPUInfo._is_ppc740.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DarwinCPUInfo._is_ppc740', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_ppc740', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_ppc740(...)' code ##################

        
        # Call to __machine(...): (line 393)
        # Processing the call arguments (line 393)
        int_30967 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 393, 48), 'int')
        # Processing the call keyword arguments (line 393)
        kwargs_30968 = {}
        # Getting the type of 'self' (line 393)
        self_30965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 33), 'self', False)
        # Obtaining the member '__machine' of a type (line 393)
        machine_30966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 393, 33), self_30965, '__machine')
        # Calling __machine(args, kwargs) (line 393)
        machine_call_result_30969 = invoke(stypy.reporting.localization.Localization(__file__, 393, 33), machine_30966, *[int_30967], **kwargs_30968)
        
        # Assigning a type to the variable 'stypy_return_type' (line 393)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 393, 26), 'stypy_return_type', machine_call_result_30969)
        
        # ################# End of '_is_ppc740(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_ppc740' in the type store
        # Getting the type of 'stypy_return_type' (line 393)
        stypy_return_type_30970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30970)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_ppc740'
        return stypy_return_type_30970


    @norecursion
    def _is_ppc7400(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_ppc7400'
        module_type_store = module_type_store.open_function_context('_is_ppc7400', 394, 4, False)
        # Assigning a type to the variable 'self' (line 395)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 395, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DarwinCPUInfo._is_ppc7400.__dict__.__setitem__('stypy_localization', localization)
        DarwinCPUInfo._is_ppc7400.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DarwinCPUInfo._is_ppc7400.__dict__.__setitem__('stypy_type_store', module_type_store)
        DarwinCPUInfo._is_ppc7400.__dict__.__setitem__('stypy_function_name', 'DarwinCPUInfo._is_ppc7400')
        DarwinCPUInfo._is_ppc7400.__dict__.__setitem__('stypy_param_names_list', [])
        DarwinCPUInfo._is_ppc7400.__dict__.__setitem__('stypy_varargs_param_name', None)
        DarwinCPUInfo._is_ppc7400.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DarwinCPUInfo._is_ppc7400.__dict__.__setitem__('stypy_call_defaults', defaults)
        DarwinCPUInfo._is_ppc7400.__dict__.__setitem__('stypy_call_varargs', varargs)
        DarwinCPUInfo._is_ppc7400.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DarwinCPUInfo._is_ppc7400.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DarwinCPUInfo._is_ppc7400', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_ppc7400', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_ppc7400(...)' code ##################

        
        # Call to __machine(...): (line 394)
        # Processing the call arguments (line 394)
        int_30973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 394, 49), 'int')
        # Processing the call keyword arguments (line 394)
        kwargs_30974 = {}
        # Getting the type of 'self' (line 394)
        self_30971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 34), 'self', False)
        # Obtaining the member '__machine' of a type (line 394)
        machine_30972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 394, 34), self_30971, '__machine')
        # Calling __machine(args, kwargs) (line 394)
        machine_call_result_30975 = invoke(stypy.reporting.localization.Localization(__file__, 394, 34), machine_30972, *[int_30973], **kwargs_30974)
        
        # Assigning a type to the variable 'stypy_return_type' (line 394)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 394, 27), 'stypy_return_type', machine_call_result_30975)
        
        # ################# End of '_is_ppc7400(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_ppc7400' in the type store
        # Getting the type of 'stypy_return_type' (line 394)
        stypy_return_type_30976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30976)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_ppc7400'
        return stypy_return_type_30976


    @norecursion
    def _is_ppc7450(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_ppc7450'
        module_type_store = module_type_store.open_function_context('_is_ppc7450', 395, 4, False)
        # Assigning a type to the variable 'self' (line 396)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 396, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DarwinCPUInfo._is_ppc7450.__dict__.__setitem__('stypy_localization', localization)
        DarwinCPUInfo._is_ppc7450.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DarwinCPUInfo._is_ppc7450.__dict__.__setitem__('stypy_type_store', module_type_store)
        DarwinCPUInfo._is_ppc7450.__dict__.__setitem__('stypy_function_name', 'DarwinCPUInfo._is_ppc7450')
        DarwinCPUInfo._is_ppc7450.__dict__.__setitem__('stypy_param_names_list', [])
        DarwinCPUInfo._is_ppc7450.__dict__.__setitem__('stypy_varargs_param_name', None)
        DarwinCPUInfo._is_ppc7450.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DarwinCPUInfo._is_ppc7450.__dict__.__setitem__('stypy_call_defaults', defaults)
        DarwinCPUInfo._is_ppc7450.__dict__.__setitem__('stypy_call_varargs', varargs)
        DarwinCPUInfo._is_ppc7450.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DarwinCPUInfo._is_ppc7450.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DarwinCPUInfo._is_ppc7450', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_ppc7450', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_ppc7450(...)' code ##################

        
        # Call to __machine(...): (line 395)
        # Processing the call arguments (line 395)
        int_30979 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 395, 49), 'int')
        # Processing the call keyword arguments (line 395)
        kwargs_30980 = {}
        # Getting the type of 'self' (line 395)
        self_30977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 34), 'self', False)
        # Obtaining the member '__machine' of a type (line 395)
        machine_30978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 395, 34), self_30977, '__machine')
        # Calling __machine(args, kwargs) (line 395)
        machine_call_result_30981 = invoke(stypy.reporting.localization.Localization(__file__, 395, 34), machine_30978, *[int_30979], **kwargs_30980)
        
        # Assigning a type to the variable 'stypy_return_type' (line 395)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 395, 27), 'stypy_return_type', machine_call_result_30981)
        
        # ################# End of '_is_ppc7450(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_ppc7450' in the type store
        # Getting the type of 'stypy_return_type' (line 395)
        stypy_return_type_30982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30982)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_ppc7450'
        return stypy_return_type_30982


    @norecursion
    def _is_ppc750(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_ppc750'
        module_type_store = module_type_store.open_function_context('_is_ppc750', 396, 4, False)
        # Assigning a type to the variable 'self' (line 397)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 397, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DarwinCPUInfo._is_ppc750.__dict__.__setitem__('stypy_localization', localization)
        DarwinCPUInfo._is_ppc750.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DarwinCPUInfo._is_ppc750.__dict__.__setitem__('stypy_type_store', module_type_store)
        DarwinCPUInfo._is_ppc750.__dict__.__setitem__('stypy_function_name', 'DarwinCPUInfo._is_ppc750')
        DarwinCPUInfo._is_ppc750.__dict__.__setitem__('stypy_param_names_list', [])
        DarwinCPUInfo._is_ppc750.__dict__.__setitem__('stypy_varargs_param_name', None)
        DarwinCPUInfo._is_ppc750.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DarwinCPUInfo._is_ppc750.__dict__.__setitem__('stypy_call_defaults', defaults)
        DarwinCPUInfo._is_ppc750.__dict__.__setitem__('stypy_call_varargs', varargs)
        DarwinCPUInfo._is_ppc750.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DarwinCPUInfo._is_ppc750.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DarwinCPUInfo._is_ppc750', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_ppc750', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_ppc750(...)' code ##################

        
        # Call to __machine(...): (line 396)
        # Processing the call arguments (line 396)
        int_30985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 396, 48), 'int')
        # Processing the call keyword arguments (line 396)
        kwargs_30986 = {}
        # Getting the type of 'self' (line 396)
        self_30983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 33), 'self', False)
        # Obtaining the member '__machine' of a type (line 396)
        machine_30984 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 396, 33), self_30983, '__machine')
        # Calling __machine(args, kwargs) (line 396)
        machine_call_result_30987 = invoke(stypy.reporting.localization.Localization(__file__, 396, 33), machine_30984, *[int_30985], **kwargs_30986)
        
        # Assigning a type to the variable 'stypy_return_type' (line 396)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 396, 26), 'stypy_return_type', machine_call_result_30987)
        
        # ################# End of '_is_ppc750(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_ppc750' in the type store
        # Getting the type of 'stypy_return_type' (line 396)
        stypy_return_type_30988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30988)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_ppc750'
        return stypy_return_type_30988


    @norecursion
    def _is_ppc403(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_ppc403'
        module_type_store = module_type_store.open_function_context('_is_ppc403', 397, 4, False)
        # Assigning a type to the variable 'self' (line 398)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 398, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DarwinCPUInfo._is_ppc403.__dict__.__setitem__('stypy_localization', localization)
        DarwinCPUInfo._is_ppc403.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DarwinCPUInfo._is_ppc403.__dict__.__setitem__('stypy_type_store', module_type_store)
        DarwinCPUInfo._is_ppc403.__dict__.__setitem__('stypy_function_name', 'DarwinCPUInfo._is_ppc403')
        DarwinCPUInfo._is_ppc403.__dict__.__setitem__('stypy_param_names_list', [])
        DarwinCPUInfo._is_ppc403.__dict__.__setitem__('stypy_varargs_param_name', None)
        DarwinCPUInfo._is_ppc403.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DarwinCPUInfo._is_ppc403.__dict__.__setitem__('stypy_call_defaults', defaults)
        DarwinCPUInfo._is_ppc403.__dict__.__setitem__('stypy_call_varargs', varargs)
        DarwinCPUInfo._is_ppc403.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DarwinCPUInfo._is_ppc403.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DarwinCPUInfo._is_ppc403', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_ppc403', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_ppc403(...)' code ##################

        
        # Call to __machine(...): (line 397)
        # Processing the call arguments (line 397)
        int_30991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 397, 48), 'int')
        # Processing the call keyword arguments (line 397)
        kwargs_30992 = {}
        # Getting the type of 'self' (line 397)
        self_30989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 397, 33), 'self', False)
        # Obtaining the member '__machine' of a type (line 397)
        machine_30990 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 397, 33), self_30989, '__machine')
        # Calling __machine(args, kwargs) (line 397)
        machine_call_result_30993 = invoke(stypy.reporting.localization.Localization(__file__, 397, 33), machine_30990, *[int_30991], **kwargs_30992)
        
        # Assigning a type to the variable 'stypy_return_type' (line 397)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 397, 26), 'stypy_return_type', machine_call_result_30993)
        
        # ################# End of '_is_ppc403(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_ppc403' in the type store
        # Getting the type of 'stypy_return_type' (line 397)
        stypy_return_type_30994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 397, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_30994)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_ppc403'
        return stypy_return_type_30994


    @norecursion
    def _is_ppc505(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_ppc505'
        module_type_store = module_type_store.open_function_context('_is_ppc505', 398, 4, False)
        # Assigning a type to the variable 'self' (line 399)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 399, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DarwinCPUInfo._is_ppc505.__dict__.__setitem__('stypy_localization', localization)
        DarwinCPUInfo._is_ppc505.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DarwinCPUInfo._is_ppc505.__dict__.__setitem__('stypy_type_store', module_type_store)
        DarwinCPUInfo._is_ppc505.__dict__.__setitem__('stypy_function_name', 'DarwinCPUInfo._is_ppc505')
        DarwinCPUInfo._is_ppc505.__dict__.__setitem__('stypy_param_names_list', [])
        DarwinCPUInfo._is_ppc505.__dict__.__setitem__('stypy_varargs_param_name', None)
        DarwinCPUInfo._is_ppc505.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DarwinCPUInfo._is_ppc505.__dict__.__setitem__('stypy_call_defaults', defaults)
        DarwinCPUInfo._is_ppc505.__dict__.__setitem__('stypy_call_varargs', varargs)
        DarwinCPUInfo._is_ppc505.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DarwinCPUInfo._is_ppc505.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DarwinCPUInfo._is_ppc505', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_ppc505', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_ppc505(...)' code ##################

        
        # Call to __machine(...): (line 398)
        # Processing the call arguments (line 398)
        int_30997 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 398, 48), 'int')
        # Processing the call keyword arguments (line 398)
        kwargs_30998 = {}
        # Getting the type of 'self' (line 398)
        self_30995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 398, 33), 'self', False)
        # Obtaining the member '__machine' of a type (line 398)
        machine_30996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 398, 33), self_30995, '__machine')
        # Calling __machine(args, kwargs) (line 398)
        machine_call_result_30999 = invoke(stypy.reporting.localization.Localization(__file__, 398, 33), machine_30996, *[int_30997], **kwargs_30998)
        
        # Assigning a type to the variable 'stypy_return_type' (line 398)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 398, 26), 'stypy_return_type', machine_call_result_30999)
        
        # ################# End of '_is_ppc505(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_ppc505' in the type store
        # Getting the type of 'stypy_return_type' (line 398)
        stypy_return_type_31000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 398, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31000)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_ppc505'
        return stypy_return_type_31000


    @norecursion
    def _is_ppc801(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_ppc801'
        module_type_store = module_type_store.open_function_context('_is_ppc801', 399, 4, False)
        # Assigning a type to the variable 'self' (line 400)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 400, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DarwinCPUInfo._is_ppc801.__dict__.__setitem__('stypy_localization', localization)
        DarwinCPUInfo._is_ppc801.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DarwinCPUInfo._is_ppc801.__dict__.__setitem__('stypy_type_store', module_type_store)
        DarwinCPUInfo._is_ppc801.__dict__.__setitem__('stypy_function_name', 'DarwinCPUInfo._is_ppc801')
        DarwinCPUInfo._is_ppc801.__dict__.__setitem__('stypy_param_names_list', [])
        DarwinCPUInfo._is_ppc801.__dict__.__setitem__('stypy_varargs_param_name', None)
        DarwinCPUInfo._is_ppc801.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DarwinCPUInfo._is_ppc801.__dict__.__setitem__('stypy_call_defaults', defaults)
        DarwinCPUInfo._is_ppc801.__dict__.__setitem__('stypy_call_varargs', varargs)
        DarwinCPUInfo._is_ppc801.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DarwinCPUInfo._is_ppc801.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DarwinCPUInfo._is_ppc801', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_ppc801', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_ppc801(...)' code ##################

        
        # Call to __machine(...): (line 399)
        # Processing the call arguments (line 399)
        int_31003 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 399, 48), 'int')
        # Processing the call keyword arguments (line 399)
        kwargs_31004 = {}
        # Getting the type of 'self' (line 399)
        self_31001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 399, 33), 'self', False)
        # Obtaining the member '__machine' of a type (line 399)
        machine_31002 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 399, 33), self_31001, '__machine')
        # Calling __machine(args, kwargs) (line 399)
        machine_call_result_31005 = invoke(stypy.reporting.localization.Localization(__file__, 399, 33), machine_31002, *[int_31003], **kwargs_31004)
        
        # Assigning a type to the variable 'stypy_return_type' (line 399)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 399, 26), 'stypy_return_type', machine_call_result_31005)
        
        # ################# End of '_is_ppc801(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_ppc801' in the type store
        # Getting the type of 'stypy_return_type' (line 399)
        stypy_return_type_31006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 399, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31006)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_ppc801'
        return stypy_return_type_31006


    @norecursion
    def _is_ppc821(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_ppc821'
        module_type_store = module_type_store.open_function_context('_is_ppc821', 400, 4, False)
        # Assigning a type to the variable 'self' (line 401)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 401, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DarwinCPUInfo._is_ppc821.__dict__.__setitem__('stypy_localization', localization)
        DarwinCPUInfo._is_ppc821.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DarwinCPUInfo._is_ppc821.__dict__.__setitem__('stypy_type_store', module_type_store)
        DarwinCPUInfo._is_ppc821.__dict__.__setitem__('stypy_function_name', 'DarwinCPUInfo._is_ppc821')
        DarwinCPUInfo._is_ppc821.__dict__.__setitem__('stypy_param_names_list', [])
        DarwinCPUInfo._is_ppc821.__dict__.__setitem__('stypy_varargs_param_name', None)
        DarwinCPUInfo._is_ppc821.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DarwinCPUInfo._is_ppc821.__dict__.__setitem__('stypy_call_defaults', defaults)
        DarwinCPUInfo._is_ppc821.__dict__.__setitem__('stypy_call_varargs', varargs)
        DarwinCPUInfo._is_ppc821.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DarwinCPUInfo._is_ppc821.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DarwinCPUInfo._is_ppc821', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_ppc821', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_ppc821(...)' code ##################

        
        # Call to __machine(...): (line 400)
        # Processing the call arguments (line 400)
        int_31009 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 400, 48), 'int')
        # Processing the call keyword arguments (line 400)
        kwargs_31010 = {}
        # Getting the type of 'self' (line 400)
        self_31007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 400, 33), 'self', False)
        # Obtaining the member '__machine' of a type (line 400)
        machine_31008 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 400, 33), self_31007, '__machine')
        # Calling __machine(args, kwargs) (line 400)
        machine_call_result_31011 = invoke(stypy.reporting.localization.Localization(__file__, 400, 33), machine_31008, *[int_31009], **kwargs_31010)
        
        # Assigning a type to the variable 'stypy_return_type' (line 400)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 400, 26), 'stypy_return_type', machine_call_result_31011)
        
        # ################# End of '_is_ppc821(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_ppc821' in the type store
        # Getting the type of 'stypy_return_type' (line 400)
        stypy_return_type_31012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 400, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31012)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_ppc821'
        return stypy_return_type_31012


    @norecursion
    def _is_ppc823(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_ppc823'
        module_type_store = module_type_store.open_function_context('_is_ppc823', 401, 4, False)
        # Assigning a type to the variable 'self' (line 402)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 402, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DarwinCPUInfo._is_ppc823.__dict__.__setitem__('stypy_localization', localization)
        DarwinCPUInfo._is_ppc823.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DarwinCPUInfo._is_ppc823.__dict__.__setitem__('stypy_type_store', module_type_store)
        DarwinCPUInfo._is_ppc823.__dict__.__setitem__('stypy_function_name', 'DarwinCPUInfo._is_ppc823')
        DarwinCPUInfo._is_ppc823.__dict__.__setitem__('stypy_param_names_list', [])
        DarwinCPUInfo._is_ppc823.__dict__.__setitem__('stypy_varargs_param_name', None)
        DarwinCPUInfo._is_ppc823.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DarwinCPUInfo._is_ppc823.__dict__.__setitem__('stypy_call_defaults', defaults)
        DarwinCPUInfo._is_ppc823.__dict__.__setitem__('stypy_call_varargs', varargs)
        DarwinCPUInfo._is_ppc823.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DarwinCPUInfo._is_ppc823.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DarwinCPUInfo._is_ppc823', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_ppc823', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_ppc823(...)' code ##################

        
        # Call to __machine(...): (line 401)
        # Processing the call arguments (line 401)
        int_31015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 401, 48), 'int')
        # Processing the call keyword arguments (line 401)
        kwargs_31016 = {}
        # Getting the type of 'self' (line 401)
        self_31013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 401, 33), 'self', False)
        # Obtaining the member '__machine' of a type (line 401)
        machine_31014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 401, 33), self_31013, '__machine')
        # Calling __machine(args, kwargs) (line 401)
        machine_call_result_31017 = invoke(stypy.reporting.localization.Localization(__file__, 401, 33), machine_31014, *[int_31015], **kwargs_31016)
        
        # Assigning a type to the variable 'stypy_return_type' (line 401)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 401, 26), 'stypy_return_type', machine_call_result_31017)
        
        # ################# End of '_is_ppc823(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_ppc823' in the type store
        # Getting the type of 'stypy_return_type' (line 401)
        stypy_return_type_31018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 401, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31018)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_ppc823'
        return stypy_return_type_31018


    @norecursion
    def _is_ppc860(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_ppc860'
        module_type_store = module_type_store.open_function_context('_is_ppc860', 402, 4, False)
        # Assigning a type to the variable 'self' (line 403)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 403, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        DarwinCPUInfo._is_ppc860.__dict__.__setitem__('stypy_localization', localization)
        DarwinCPUInfo._is_ppc860.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        DarwinCPUInfo._is_ppc860.__dict__.__setitem__('stypy_type_store', module_type_store)
        DarwinCPUInfo._is_ppc860.__dict__.__setitem__('stypy_function_name', 'DarwinCPUInfo._is_ppc860')
        DarwinCPUInfo._is_ppc860.__dict__.__setitem__('stypy_param_names_list', [])
        DarwinCPUInfo._is_ppc860.__dict__.__setitem__('stypy_varargs_param_name', None)
        DarwinCPUInfo._is_ppc860.__dict__.__setitem__('stypy_kwargs_param_name', None)
        DarwinCPUInfo._is_ppc860.__dict__.__setitem__('stypy_call_defaults', defaults)
        DarwinCPUInfo._is_ppc860.__dict__.__setitem__('stypy_call_varargs', varargs)
        DarwinCPUInfo._is_ppc860.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        DarwinCPUInfo._is_ppc860.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'DarwinCPUInfo._is_ppc860', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_ppc860', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_ppc860(...)' code ##################

        
        # Call to __machine(...): (line 402)
        # Processing the call arguments (line 402)
        int_31021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 402, 48), 'int')
        # Processing the call keyword arguments (line 402)
        kwargs_31022 = {}
        # Getting the type of 'self' (line 402)
        self_31019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 33), 'self', False)
        # Obtaining the member '__machine' of a type (line 402)
        machine_31020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 402, 33), self_31019, '__machine')
        # Calling __machine(args, kwargs) (line 402)
        machine_call_result_31023 = invoke(stypy.reporting.localization.Localization(__file__, 402, 33), machine_31020, *[int_31021], **kwargs_31022)
        
        # Assigning a type to the variable 'stypy_return_type' (line 402)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 402, 26), 'stypy_return_type', machine_call_result_31023)
        
        # ################# End of '_is_ppc860(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_ppc860' in the type store
        # Getting the type of 'stypy_return_type' (line 402)
        stypy_return_type_31024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31024)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_ppc860'
        return stypy_return_type_31024


# Assigning a type to the variable 'DarwinCPUInfo' (line 359)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 359, 0), 'DarwinCPUInfo', DarwinCPUInfo)

# Assigning a Name to a Name (line 360):
# Getting the type of 'None' (line 360)
None_31025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 11), 'None')
# Getting the type of 'DarwinCPUInfo'
DarwinCPUInfo_31026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'DarwinCPUInfo')
# Setting the type of the member 'info' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), DarwinCPUInfo_31026, 'info', None_31025)
# Declaration of the 'SunOSCPUInfo' class
# Getting the type of 'CPUInfoBase' (line 405)
CPUInfoBase_31027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 19), 'CPUInfoBase')

class SunOSCPUInfo(CPUInfoBase_31027, ):
    
    # Assigning a Name to a Name (line 407):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 409, 4, False)
        # Assigning a type to the variable 'self' (line 410)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 410, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SunOSCPUInfo.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        
        # Getting the type of 'self' (line 410)
        self_31028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 11), 'self')
        # Obtaining the member 'info' of a type (line 410)
        info_31029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 410, 11), self_31028, 'info')
        # Getting the type of 'None' (line 410)
        None_31030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 28), 'None')
        # Applying the binary operator 'isnot' (line 410)
        result_is_not_31031 = python_operator(stypy.reporting.localization.Localization(__file__, 410, 11), 'isnot', info_31029, None_31030)
        
        # Testing the type of an if condition (line 410)
        if_condition_31032 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 410, 8), result_is_not_31031)
        # Assigning a type to the variable 'if_condition_31032' (line 410)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 410, 8), 'if_condition_31032', if_condition_31032)
        # SSA begins for if statement (line 410)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 411)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 411, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 410)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 412):
        
        # Assigning a Call to a Name (line 412):
        
        # Call to command_info(...): (line 412)
        # Processing the call keyword arguments (line 412)
        str_31034 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 412, 33), 'str', 'arch')
        keyword_31035 = str_31034
        str_31036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 413, 33), 'str', 'mach')
        keyword_31037 = str_31036
        str_31038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 414, 36), 'str', 'uname_i')
        keyword_31039 = str_31038
        str_31040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 415, 38), 'str', 'isainfo -b')
        keyword_31041 = str_31040
        str_31042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 416, 38), 'str', 'isainfo -n')
        keyword_31043 = str_31042
        kwargs_31044 = {'isainfo_n': keyword_31043, 'isainfo_b': keyword_31041, 'uname_i': keyword_31039, 'arch': keyword_31035, 'mach': keyword_31037}
        # Getting the type of 'command_info' (line 412)
        command_info_31033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 15), 'command_info', False)
        # Calling command_info(args, kwargs) (line 412)
        command_info_call_result_31045 = invoke(stypy.reporting.localization.Localization(__file__, 412, 15), command_info_31033, *[], **kwargs_31044)
        
        # Assigning a type to the variable 'info' (line 412)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 412, 8), 'info', command_info_call_result_31045)
        
        # Assigning a Call to a Subscript (line 418):
        
        # Assigning a Call to a Subscript (line 418):
        
        # Call to key_value_from_command(...): (line 418)
        # Processing the call arguments (line 418)
        str_31047 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 418, 49), 'str', 'uname -X')
        # Processing the call keyword arguments (line 418)
        str_31048 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 418, 65), 'str', '=')
        keyword_31049 = str_31048
        kwargs_31050 = {'sep': keyword_31049}
        # Getting the type of 'key_value_from_command' (line 418)
        key_value_from_command_31046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 26), 'key_value_from_command', False)
        # Calling key_value_from_command(args, kwargs) (line 418)
        key_value_from_command_call_result_31051 = invoke(stypy.reporting.localization.Localization(__file__, 418, 26), key_value_from_command_31046, *[str_31047], **kwargs_31050)
        
        # Getting the type of 'info' (line 418)
        info_31052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 8), 'info')
        str_31053 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 418, 13), 'str', 'uname_X')
        # Storing an element on a container (line 418)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 418, 8), info_31052, (str_31053, key_value_from_command_call_result_31051))
        
        
        # Call to command_by_line(...): (line 419)
        # Processing the call arguments (line 419)
        str_31055 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 419, 36), 'str', 'psrinfo -v 0')
        # Processing the call keyword arguments (line 419)
        kwargs_31056 = {}
        # Getting the type of 'command_by_line' (line 419)
        command_by_line_31054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 20), 'command_by_line', False)
        # Calling command_by_line(args, kwargs) (line 419)
        command_by_line_call_result_31057 = invoke(stypy.reporting.localization.Localization(__file__, 419, 20), command_by_line_31054, *[str_31055], **kwargs_31056)
        
        # Testing the type of a for loop iterable (line 419)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 419, 8), command_by_line_call_result_31057)
        # Getting the type of the for loop variable (line 419)
        for_loop_var_31058 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 419, 8), command_by_line_call_result_31057)
        # Assigning a type to the variable 'line' (line 419)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 419, 8), 'line', for_loop_var_31058)
        # SSA begins for a for statement (line 419)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 420):
        
        # Assigning a Call to a Name (line 420):
        
        # Call to match(...): (line 420)
        # Processing the call arguments (line 420)
        str_31061 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 420, 25), 'str', '\\s*The (?P<p>[\\w\\d]+) processor operates at')
        # Getting the type of 'line' (line 420)
        line_31062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 73), 'line', False)
        # Processing the call keyword arguments (line 420)
        kwargs_31063 = {}
        # Getting the type of 're' (line 420)
        re_31059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 16), 're', False)
        # Obtaining the member 'match' of a type (line 420)
        match_31060 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 420, 16), re_31059, 'match')
        # Calling match(args, kwargs) (line 420)
        match_call_result_31064 = invoke(stypy.reporting.localization.Localization(__file__, 420, 16), match_31060, *[str_31061, line_31062], **kwargs_31063)
        
        # Assigning a type to the variable 'm' (line 420)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 420, 12), 'm', match_call_result_31064)
        
        # Getting the type of 'm' (line 421)
        m_31065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 15), 'm')
        # Testing the type of an if condition (line 421)
        if_condition_31066 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 421, 12), m_31065)
        # Assigning a type to the variable 'if_condition_31066' (line 421)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 421, 12), 'if_condition_31066', if_condition_31066)
        # SSA begins for if statement (line 421)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Subscript (line 422):
        
        # Assigning a Call to a Subscript (line 422):
        
        # Call to group(...): (line 422)
        # Processing the call arguments (line 422)
        str_31069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 422, 44), 'str', 'p')
        # Processing the call keyword arguments (line 422)
        kwargs_31070 = {}
        # Getting the type of 'm' (line 422)
        m_31067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 36), 'm', False)
        # Obtaining the member 'group' of a type (line 422)
        group_31068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 422, 36), m_31067, 'group')
        # Calling group(args, kwargs) (line 422)
        group_call_result_31071 = invoke(stypy.reporting.localization.Localization(__file__, 422, 36), group_31068, *[str_31069], **kwargs_31070)
        
        # Getting the type of 'info' (line 422)
        info_31072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 16), 'info')
        str_31073 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 422, 21), 'str', 'processor')
        # Storing an element on a container (line 422)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 422, 16), info_31072, (str_31073, group_call_result_31071))
        # SSA join for if statement (line 421)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 424):
        
        # Assigning a Name to a Attribute (line 424):
        # Getting the type of 'info' (line 424)
        info_31074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 30), 'info')
        # Getting the type of 'self' (line 424)
        self_31075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 8), 'self')
        # Obtaining the member '__class__' of a type (line 424)
        class___31076 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 424, 8), self_31075, '__class__')
        # Setting the type of the member 'info' of a type (line 424)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 424, 8), class___31076, 'info', info_31074)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _not_impl(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_not_impl'
        module_type_store = module_type_store.open_function_context('_not_impl', 426, 4, False)
        # Assigning a type to the variable 'self' (line 427)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 427, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SunOSCPUInfo._not_impl.__dict__.__setitem__('stypy_localization', localization)
        SunOSCPUInfo._not_impl.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SunOSCPUInfo._not_impl.__dict__.__setitem__('stypy_type_store', module_type_store)
        SunOSCPUInfo._not_impl.__dict__.__setitem__('stypy_function_name', 'SunOSCPUInfo._not_impl')
        SunOSCPUInfo._not_impl.__dict__.__setitem__('stypy_param_names_list', [])
        SunOSCPUInfo._not_impl.__dict__.__setitem__('stypy_varargs_param_name', None)
        SunOSCPUInfo._not_impl.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SunOSCPUInfo._not_impl.__dict__.__setitem__('stypy_call_defaults', defaults)
        SunOSCPUInfo._not_impl.__dict__.__setitem__('stypy_call_varargs', varargs)
        SunOSCPUInfo._not_impl.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SunOSCPUInfo._not_impl.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SunOSCPUInfo._not_impl', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_not_impl', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_not_impl(...)' code ##################

        pass
        
        # ################# End of '_not_impl(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_not_impl' in the type store
        # Getting the type of 'stypy_return_type' (line 426)
        stypy_return_type_31077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31077)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_not_impl'
        return stypy_return_type_31077


    @norecursion
    def _is_i386(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_i386'
        module_type_store = module_type_store.open_function_context('_is_i386', 428, 4, False)
        # Assigning a type to the variable 'self' (line 429)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 429, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SunOSCPUInfo._is_i386.__dict__.__setitem__('stypy_localization', localization)
        SunOSCPUInfo._is_i386.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SunOSCPUInfo._is_i386.__dict__.__setitem__('stypy_type_store', module_type_store)
        SunOSCPUInfo._is_i386.__dict__.__setitem__('stypy_function_name', 'SunOSCPUInfo._is_i386')
        SunOSCPUInfo._is_i386.__dict__.__setitem__('stypy_param_names_list', [])
        SunOSCPUInfo._is_i386.__dict__.__setitem__('stypy_varargs_param_name', None)
        SunOSCPUInfo._is_i386.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SunOSCPUInfo._is_i386.__dict__.__setitem__('stypy_call_defaults', defaults)
        SunOSCPUInfo._is_i386.__dict__.__setitem__('stypy_call_varargs', varargs)
        SunOSCPUInfo._is_i386.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SunOSCPUInfo._is_i386.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SunOSCPUInfo._is_i386', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_i386', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_i386(...)' code ##################

        
        
        # Obtaining the type of the subscript
        str_31078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 429, 25), 'str', 'isainfo_n')
        # Getting the type of 'self' (line 429)
        self_31079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 429, 15), 'self')
        # Obtaining the member 'info' of a type (line 429)
        info_31080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 429, 15), self_31079, 'info')
        # Obtaining the member '__getitem__' of a type (line 429)
        getitem___31081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 429, 15), info_31080, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 429)
        subscript_call_result_31082 = invoke(stypy.reporting.localization.Localization(__file__, 429, 15), getitem___31081, str_31078)
        
        str_31083 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 429, 39), 'str', 'i386')
        # Applying the binary operator '==' (line 429)
        result_eq_31084 = python_operator(stypy.reporting.localization.Localization(__file__, 429, 15), '==', subscript_call_result_31082, str_31083)
        
        # Assigning a type to the variable 'stypy_return_type' (line 429)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 429, 8), 'stypy_return_type', result_eq_31084)
        
        # ################# End of '_is_i386(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_i386' in the type store
        # Getting the type of 'stypy_return_type' (line 428)
        stypy_return_type_31085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31085)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_i386'
        return stypy_return_type_31085


    @norecursion
    def _is_sparc(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_sparc'
        module_type_store = module_type_store.open_function_context('_is_sparc', 430, 4, False)
        # Assigning a type to the variable 'self' (line 431)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 431, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SunOSCPUInfo._is_sparc.__dict__.__setitem__('stypy_localization', localization)
        SunOSCPUInfo._is_sparc.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SunOSCPUInfo._is_sparc.__dict__.__setitem__('stypy_type_store', module_type_store)
        SunOSCPUInfo._is_sparc.__dict__.__setitem__('stypy_function_name', 'SunOSCPUInfo._is_sparc')
        SunOSCPUInfo._is_sparc.__dict__.__setitem__('stypy_param_names_list', [])
        SunOSCPUInfo._is_sparc.__dict__.__setitem__('stypy_varargs_param_name', None)
        SunOSCPUInfo._is_sparc.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SunOSCPUInfo._is_sparc.__dict__.__setitem__('stypy_call_defaults', defaults)
        SunOSCPUInfo._is_sparc.__dict__.__setitem__('stypy_call_varargs', varargs)
        SunOSCPUInfo._is_sparc.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SunOSCPUInfo._is_sparc.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SunOSCPUInfo._is_sparc', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_sparc', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_sparc(...)' code ##################

        
        
        # Obtaining the type of the subscript
        str_31086 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 431, 25), 'str', 'isainfo_n')
        # Getting the type of 'self' (line 431)
        self_31087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 431, 15), 'self')
        # Obtaining the member 'info' of a type (line 431)
        info_31088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 431, 15), self_31087, 'info')
        # Obtaining the member '__getitem__' of a type (line 431)
        getitem___31089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 431, 15), info_31088, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 431)
        subscript_call_result_31090 = invoke(stypy.reporting.localization.Localization(__file__, 431, 15), getitem___31089, str_31086)
        
        str_31091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 431, 39), 'str', 'sparc')
        # Applying the binary operator '==' (line 431)
        result_eq_31092 = python_operator(stypy.reporting.localization.Localization(__file__, 431, 15), '==', subscript_call_result_31090, str_31091)
        
        # Assigning a type to the variable 'stypy_return_type' (line 431)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 431, 8), 'stypy_return_type', result_eq_31092)
        
        # ################# End of '_is_sparc(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_sparc' in the type store
        # Getting the type of 'stypy_return_type' (line 430)
        stypy_return_type_31093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31093)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_sparc'
        return stypy_return_type_31093


    @norecursion
    def _is_sparcv9(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_sparcv9'
        module_type_store = module_type_store.open_function_context('_is_sparcv9', 432, 4, False)
        # Assigning a type to the variable 'self' (line 433)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 433, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SunOSCPUInfo._is_sparcv9.__dict__.__setitem__('stypy_localization', localization)
        SunOSCPUInfo._is_sparcv9.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SunOSCPUInfo._is_sparcv9.__dict__.__setitem__('stypy_type_store', module_type_store)
        SunOSCPUInfo._is_sparcv9.__dict__.__setitem__('stypy_function_name', 'SunOSCPUInfo._is_sparcv9')
        SunOSCPUInfo._is_sparcv9.__dict__.__setitem__('stypy_param_names_list', [])
        SunOSCPUInfo._is_sparcv9.__dict__.__setitem__('stypy_varargs_param_name', None)
        SunOSCPUInfo._is_sparcv9.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SunOSCPUInfo._is_sparcv9.__dict__.__setitem__('stypy_call_defaults', defaults)
        SunOSCPUInfo._is_sparcv9.__dict__.__setitem__('stypy_call_varargs', varargs)
        SunOSCPUInfo._is_sparcv9.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SunOSCPUInfo._is_sparcv9.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SunOSCPUInfo._is_sparcv9', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_sparcv9', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_sparcv9(...)' code ##################

        
        
        # Obtaining the type of the subscript
        str_31094 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 433, 25), 'str', 'isainfo_n')
        # Getting the type of 'self' (line 433)
        self_31095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 15), 'self')
        # Obtaining the member 'info' of a type (line 433)
        info_31096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 433, 15), self_31095, 'info')
        # Obtaining the member '__getitem__' of a type (line 433)
        getitem___31097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 433, 15), info_31096, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 433)
        subscript_call_result_31098 = invoke(stypy.reporting.localization.Localization(__file__, 433, 15), getitem___31097, str_31094)
        
        str_31099 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 433, 39), 'str', 'sparcv9')
        # Applying the binary operator '==' (line 433)
        result_eq_31100 = python_operator(stypy.reporting.localization.Localization(__file__, 433, 15), '==', subscript_call_result_31098, str_31099)
        
        # Assigning a type to the variable 'stypy_return_type' (line 433)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 433, 8), 'stypy_return_type', result_eq_31100)
        
        # ################# End of '_is_sparcv9(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_sparcv9' in the type store
        # Getting the type of 'stypy_return_type' (line 432)
        stypy_return_type_31101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31101)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_sparcv9'
        return stypy_return_type_31101


    @norecursion
    def _getNCPUs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_getNCPUs'
        module_type_store = module_type_store.open_function_context('_getNCPUs', 435, 4, False)
        # Assigning a type to the variable 'self' (line 436)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 436, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SunOSCPUInfo._getNCPUs.__dict__.__setitem__('stypy_localization', localization)
        SunOSCPUInfo._getNCPUs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SunOSCPUInfo._getNCPUs.__dict__.__setitem__('stypy_type_store', module_type_store)
        SunOSCPUInfo._getNCPUs.__dict__.__setitem__('stypy_function_name', 'SunOSCPUInfo._getNCPUs')
        SunOSCPUInfo._getNCPUs.__dict__.__setitem__('stypy_param_names_list', [])
        SunOSCPUInfo._getNCPUs.__dict__.__setitem__('stypy_varargs_param_name', None)
        SunOSCPUInfo._getNCPUs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SunOSCPUInfo._getNCPUs.__dict__.__setitem__('stypy_call_defaults', defaults)
        SunOSCPUInfo._getNCPUs.__dict__.__setitem__('stypy_call_varargs', varargs)
        SunOSCPUInfo._getNCPUs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SunOSCPUInfo._getNCPUs.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SunOSCPUInfo._getNCPUs', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_getNCPUs', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_getNCPUs(...)' code ##################

        
        # Call to int(...): (line 436)
        # Processing the call arguments (line 436)
        
        # Call to get(...): (line 436)
        # Processing the call arguments (line 436)
        str_31109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 436, 44), 'str', 'NumCPU')
        int_31110 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 436, 54), 'int')
        # Processing the call keyword arguments (line 436)
        kwargs_31111 = {}
        
        # Obtaining the type of the subscript
        str_31103 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 436, 29), 'str', 'uname_X')
        # Getting the type of 'self' (line 436)
        self_31104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 19), 'self', False)
        # Obtaining the member 'info' of a type (line 436)
        info_31105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 436, 19), self_31104, 'info')
        # Obtaining the member '__getitem__' of a type (line 436)
        getitem___31106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 436, 19), info_31105, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 436)
        subscript_call_result_31107 = invoke(stypy.reporting.localization.Localization(__file__, 436, 19), getitem___31106, str_31103)
        
        # Obtaining the member 'get' of a type (line 436)
        get_31108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 436, 19), subscript_call_result_31107, 'get')
        # Calling get(args, kwargs) (line 436)
        get_call_result_31112 = invoke(stypy.reporting.localization.Localization(__file__, 436, 19), get_31108, *[str_31109, int_31110], **kwargs_31111)
        
        # Processing the call keyword arguments (line 436)
        kwargs_31113 = {}
        # Getting the type of 'int' (line 436)
        int_31102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 15), 'int', False)
        # Calling int(args, kwargs) (line 436)
        int_call_result_31114 = invoke(stypy.reporting.localization.Localization(__file__, 436, 15), int_31102, *[get_call_result_31112], **kwargs_31113)
        
        # Assigning a type to the variable 'stypy_return_type' (line 436)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 436, 8), 'stypy_return_type', int_call_result_31114)
        
        # ################# End of '_getNCPUs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_getNCPUs' in the type store
        # Getting the type of 'stypy_return_type' (line 435)
        stypy_return_type_31115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31115)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_getNCPUs'
        return stypy_return_type_31115


    @norecursion
    def _is_sun4(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_sun4'
        module_type_store = module_type_store.open_function_context('_is_sun4', 438, 4, False)
        # Assigning a type to the variable 'self' (line 439)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 439, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SunOSCPUInfo._is_sun4.__dict__.__setitem__('stypy_localization', localization)
        SunOSCPUInfo._is_sun4.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SunOSCPUInfo._is_sun4.__dict__.__setitem__('stypy_type_store', module_type_store)
        SunOSCPUInfo._is_sun4.__dict__.__setitem__('stypy_function_name', 'SunOSCPUInfo._is_sun4')
        SunOSCPUInfo._is_sun4.__dict__.__setitem__('stypy_param_names_list', [])
        SunOSCPUInfo._is_sun4.__dict__.__setitem__('stypy_varargs_param_name', None)
        SunOSCPUInfo._is_sun4.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SunOSCPUInfo._is_sun4.__dict__.__setitem__('stypy_call_defaults', defaults)
        SunOSCPUInfo._is_sun4.__dict__.__setitem__('stypy_call_varargs', varargs)
        SunOSCPUInfo._is_sun4.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SunOSCPUInfo._is_sun4.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SunOSCPUInfo._is_sun4', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_sun4', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_sun4(...)' code ##################

        
        
        # Obtaining the type of the subscript
        str_31116 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 439, 25), 'str', 'arch')
        # Getting the type of 'self' (line 439)
        self_31117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 15), 'self')
        # Obtaining the member 'info' of a type (line 439)
        info_31118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 439, 15), self_31117, 'info')
        # Obtaining the member '__getitem__' of a type (line 439)
        getitem___31119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 439, 15), info_31118, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 439)
        subscript_call_result_31120 = invoke(stypy.reporting.localization.Localization(__file__, 439, 15), getitem___31119, str_31116)
        
        str_31121 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 439, 34), 'str', 'sun4')
        # Applying the binary operator '==' (line 439)
        result_eq_31122 = python_operator(stypy.reporting.localization.Localization(__file__, 439, 15), '==', subscript_call_result_31120, str_31121)
        
        # Assigning a type to the variable 'stypy_return_type' (line 439)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 439, 8), 'stypy_return_type', result_eq_31122)
        
        # ################# End of '_is_sun4(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_sun4' in the type store
        # Getting the type of 'stypy_return_type' (line 438)
        stypy_return_type_31123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31123)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_sun4'
        return stypy_return_type_31123


    @norecursion
    def _is_SUNW(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_SUNW'
        module_type_store = module_type_store.open_function_context('_is_SUNW', 441, 4, False)
        # Assigning a type to the variable 'self' (line 442)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 442, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SunOSCPUInfo._is_SUNW.__dict__.__setitem__('stypy_localization', localization)
        SunOSCPUInfo._is_SUNW.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SunOSCPUInfo._is_SUNW.__dict__.__setitem__('stypy_type_store', module_type_store)
        SunOSCPUInfo._is_SUNW.__dict__.__setitem__('stypy_function_name', 'SunOSCPUInfo._is_SUNW')
        SunOSCPUInfo._is_SUNW.__dict__.__setitem__('stypy_param_names_list', [])
        SunOSCPUInfo._is_SUNW.__dict__.__setitem__('stypy_varargs_param_name', None)
        SunOSCPUInfo._is_SUNW.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SunOSCPUInfo._is_SUNW.__dict__.__setitem__('stypy_call_defaults', defaults)
        SunOSCPUInfo._is_SUNW.__dict__.__setitem__('stypy_call_varargs', varargs)
        SunOSCPUInfo._is_SUNW.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SunOSCPUInfo._is_SUNW.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SunOSCPUInfo._is_SUNW', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_SUNW', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_SUNW(...)' code ##################

        
        
        # Call to match(...): (line 442)
        # Processing the call arguments (line 442)
        str_31126 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 442, 24), 'str', 'SUNW')
        
        # Obtaining the type of the subscript
        str_31127 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 442, 43), 'str', 'uname_i')
        # Getting the type of 'self' (line 442)
        self_31128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 442, 33), 'self', False)
        # Obtaining the member 'info' of a type (line 442)
        info_31129 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 442, 33), self_31128, 'info')
        # Obtaining the member '__getitem__' of a type (line 442)
        getitem___31130 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 442, 33), info_31129, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 442)
        subscript_call_result_31131 = invoke(stypy.reporting.localization.Localization(__file__, 442, 33), getitem___31130, str_31127)
        
        # Processing the call keyword arguments (line 442)
        kwargs_31132 = {}
        # Getting the type of 're' (line 442)
        re_31124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 442, 15), 're', False)
        # Obtaining the member 'match' of a type (line 442)
        match_31125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 442, 15), re_31124, 'match')
        # Calling match(args, kwargs) (line 442)
        match_call_result_31133 = invoke(stypy.reporting.localization.Localization(__file__, 442, 15), match_31125, *[str_31126, subscript_call_result_31131], **kwargs_31132)
        
        # Getting the type of 'None' (line 442)
        None_31134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 442, 62), 'None')
        # Applying the binary operator 'isnot' (line 442)
        result_is_not_31135 = python_operator(stypy.reporting.localization.Localization(__file__, 442, 15), 'isnot', match_call_result_31133, None_31134)
        
        # Assigning a type to the variable 'stypy_return_type' (line 442)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 442, 8), 'stypy_return_type', result_is_not_31135)
        
        # ################# End of '_is_SUNW(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_SUNW' in the type store
        # Getting the type of 'stypy_return_type' (line 441)
        stypy_return_type_31136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31136)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_SUNW'
        return stypy_return_type_31136


    @norecursion
    def _is_sparcstation5(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_sparcstation5'
        module_type_store = module_type_store.open_function_context('_is_sparcstation5', 443, 4, False)
        # Assigning a type to the variable 'self' (line 444)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 444, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SunOSCPUInfo._is_sparcstation5.__dict__.__setitem__('stypy_localization', localization)
        SunOSCPUInfo._is_sparcstation5.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SunOSCPUInfo._is_sparcstation5.__dict__.__setitem__('stypy_type_store', module_type_store)
        SunOSCPUInfo._is_sparcstation5.__dict__.__setitem__('stypy_function_name', 'SunOSCPUInfo._is_sparcstation5')
        SunOSCPUInfo._is_sparcstation5.__dict__.__setitem__('stypy_param_names_list', [])
        SunOSCPUInfo._is_sparcstation5.__dict__.__setitem__('stypy_varargs_param_name', None)
        SunOSCPUInfo._is_sparcstation5.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SunOSCPUInfo._is_sparcstation5.__dict__.__setitem__('stypy_call_defaults', defaults)
        SunOSCPUInfo._is_sparcstation5.__dict__.__setitem__('stypy_call_varargs', varargs)
        SunOSCPUInfo._is_sparcstation5.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SunOSCPUInfo._is_sparcstation5.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SunOSCPUInfo._is_sparcstation5', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_sparcstation5', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_sparcstation5(...)' code ##################

        
        
        # Call to match(...): (line 444)
        # Processing the call arguments (line 444)
        str_31139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 444, 24), 'str', '.*SPARCstation-5')
        
        # Obtaining the type of the subscript
        str_31140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 444, 55), 'str', 'uname_i')
        # Getting the type of 'self' (line 444)
        self_31141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 45), 'self', False)
        # Obtaining the member 'info' of a type (line 444)
        info_31142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 444, 45), self_31141, 'info')
        # Obtaining the member '__getitem__' of a type (line 444)
        getitem___31143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 444, 45), info_31142, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 444)
        subscript_call_result_31144 = invoke(stypy.reporting.localization.Localization(__file__, 444, 45), getitem___31143, str_31140)
        
        # Processing the call keyword arguments (line 444)
        kwargs_31145 = {}
        # Getting the type of 're' (line 444)
        re_31137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 15), 're', False)
        # Obtaining the member 'match' of a type (line 444)
        match_31138 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 444, 15), re_31137, 'match')
        # Calling match(args, kwargs) (line 444)
        match_call_result_31146 = invoke(stypy.reporting.localization.Localization(__file__, 444, 15), match_31138, *[str_31139, subscript_call_result_31144], **kwargs_31145)
        
        # Getting the type of 'None' (line 444)
        None_31147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 74), 'None')
        # Applying the binary operator 'isnot' (line 444)
        result_is_not_31148 = python_operator(stypy.reporting.localization.Localization(__file__, 444, 15), 'isnot', match_call_result_31146, None_31147)
        
        # Assigning a type to the variable 'stypy_return_type' (line 444)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 444, 8), 'stypy_return_type', result_is_not_31148)
        
        # ################# End of '_is_sparcstation5(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_sparcstation5' in the type store
        # Getting the type of 'stypy_return_type' (line 443)
        stypy_return_type_31149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 443, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31149)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_sparcstation5'
        return stypy_return_type_31149


    @norecursion
    def _is_ultra1(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_ultra1'
        module_type_store = module_type_store.open_function_context('_is_ultra1', 445, 4, False)
        # Assigning a type to the variable 'self' (line 446)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 446, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SunOSCPUInfo._is_ultra1.__dict__.__setitem__('stypy_localization', localization)
        SunOSCPUInfo._is_ultra1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SunOSCPUInfo._is_ultra1.__dict__.__setitem__('stypy_type_store', module_type_store)
        SunOSCPUInfo._is_ultra1.__dict__.__setitem__('stypy_function_name', 'SunOSCPUInfo._is_ultra1')
        SunOSCPUInfo._is_ultra1.__dict__.__setitem__('stypy_param_names_list', [])
        SunOSCPUInfo._is_ultra1.__dict__.__setitem__('stypy_varargs_param_name', None)
        SunOSCPUInfo._is_ultra1.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SunOSCPUInfo._is_ultra1.__dict__.__setitem__('stypy_call_defaults', defaults)
        SunOSCPUInfo._is_ultra1.__dict__.__setitem__('stypy_call_varargs', varargs)
        SunOSCPUInfo._is_ultra1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SunOSCPUInfo._is_ultra1.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SunOSCPUInfo._is_ultra1', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_ultra1', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_ultra1(...)' code ##################

        
        
        # Call to match(...): (line 446)
        # Processing the call arguments (line 446)
        str_31152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 446, 24), 'str', '.*Ultra-1')
        
        # Obtaining the type of the subscript
        str_31153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 446, 48), 'str', 'uname_i')
        # Getting the type of 'self' (line 446)
        self_31154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 38), 'self', False)
        # Obtaining the member 'info' of a type (line 446)
        info_31155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 446, 38), self_31154, 'info')
        # Obtaining the member '__getitem__' of a type (line 446)
        getitem___31156 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 446, 38), info_31155, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 446)
        subscript_call_result_31157 = invoke(stypy.reporting.localization.Localization(__file__, 446, 38), getitem___31156, str_31153)
        
        # Processing the call keyword arguments (line 446)
        kwargs_31158 = {}
        # Getting the type of 're' (line 446)
        re_31150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 15), 're', False)
        # Obtaining the member 'match' of a type (line 446)
        match_31151 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 446, 15), re_31150, 'match')
        # Calling match(args, kwargs) (line 446)
        match_call_result_31159 = invoke(stypy.reporting.localization.Localization(__file__, 446, 15), match_31151, *[str_31152, subscript_call_result_31157], **kwargs_31158)
        
        # Getting the type of 'None' (line 446)
        None_31160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 67), 'None')
        # Applying the binary operator 'isnot' (line 446)
        result_is_not_31161 = python_operator(stypy.reporting.localization.Localization(__file__, 446, 15), 'isnot', match_call_result_31159, None_31160)
        
        # Assigning a type to the variable 'stypy_return_type' (line 446)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 446, 8), 'stypy_return_type', result_is_not_31161)
        
        # ################# End of '_is_ultra1(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_ultra1' in the type store
        # Getting the type of 'stypy_return_type' (line 445)
        stypy_return_type_31162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31162)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_ultra1'
        return stypy_return_type_31162


    @norecursion
    def _is_ultra250(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_ultra250'
        module_type_store = module_type_store.open_function_context('_is_ultra250', 447, 4, False)
        # Assigning a type to the variable 'self' (line 448)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 448, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SunOSCPUInfo._is_ultra250.__dict__.__setitem__('stypy_localization', localization)
        SunOSCPUInfo._is_ultra250.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SunOSCPUInfo._is_ultra250.__dict__.__setitem__('stypy_type_store', module_type_store)
        SunOSCPUInfo._is_ultra250.__dict__.__setitem__('stypy_function_name', 'SunOSCPUInfo._is_ultra250')
        SunOSCPUInfo._is_ultra250.__dict__.__setitem__('stypy_param_names_list', [])
        SunOSCPUInfo._is_ultra250.__dict__.__setitem__('stypy_varargs_param_name', None)
        SunOSCPUInfo._is_ultra250.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SunOSCPUInfo._is_ultra250.__dict__.__setitem__('stypy_call_defaults', defaults)
        SunOSCPUInfo._is_ultra250.__dict__.__setitem__('stypy_call_varargs', varargs)
        SunOSCPUInfo._is_ultra250.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SunOSCPUInfo._is_ultra250.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SunOSCPUInfo._is_ultra250', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_ultra250', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_ultra250(...)' code ##################

        
        
        # Call to match(...): (line 448)
        # Processing the call arguments (line 448)
        str_31165 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 448, 24), 'str', '.*Ultra-250')
        
        # Obtaining the type of the subscript
        str_31166 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 448, 50), 'str', 'uname_i')
        # Getting the type of 'self' (line 448)
        self_31167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 448, 40), 'self', False)
        # Obtaining the member 'info' of a type (line 448)
        info_31168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 448, 40), self_31167, 'info')
        # Obtaining the member '__getitem__' of a type (line 448)
        getitem___31169 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 448, 40), info_31168, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 448)
        subscript_call_result_31170 = invoke(stypy.reporting.localization.Localization(__file__, 448, 40), getitem___31169, str_31166)
        
        # Processing the call keyword arguments (line 448)
        kwargs_31171 = {}
        # Getting the type of 're' (line 448)
        re_31163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 448, 15), 're', False)
        # Obtaining the member 'match' of a type (line 448)
        match_31164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 448, 15), re_31163, 'match')
        # Calling match(args, kwargs) (line 448)
        match_call_result_31172 = invoke(stypy.reporting.localization.Localization(__file__, 448, 15), match_31164, *[str_31165, subscript_call_result_31170], **kwargs_31171)
        
        # Getting the type of 'None' (line 448)
        None_31173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 448, 69), 'None')
        # Applying the binary operator 'isnot' (line 448)
        result_is_not_31174 = python_operator(stypy.reporting.localization.Localization(__file__, 448, 15), 'isnot', match_call_result_31172, None_31173)
        
        # Assigning a type to the variable 'stypy_return_type' (line 448)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 448, 8), 'stypy_return_type', result_is_not_31174)
        
        # ################# End of '_is_ultra250(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_ultra250' in the type store
        # Getting the type of 'stypy_return_type' (line 447)
        stypy_return_type_31175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31175)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_ultra250'
        return stypy_return_type_31175


    @norecursion
    def _is_ultra2(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_ultra2'
        module_type_store = module_type_store.open_function_context('_is_ultra2', 449, 4, False)
        # Assigning a type to the variable 'self' (line 450)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 450, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SunOSCPUInfo._is_ultra2.__dict__.__setitem__('stypy_localization', localization)
        SunOSCPUInfo._is_ultra2.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SunOSCPUInfo._is_ultra2.__dict__.__setitem__('stypy_type_store', module_type_store)
        SunOSCPUInfo._is_ultra2.__dict__.__setitem__('stypy_function_name', 'SunOSCPUInfo._is_ultra2')
        SunOSCPUInfo._is_ultra2.__dict__.__setitem__('stypy_param_names_list', [])
        SunOSCPUInfo._is_ultra2.__dict__.__setitem__('stypy_varargs_param_name', None)
        SunOSCPUInfo._is_ultra2.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SunOSCPUInfo._is_ultra2.__dict__.__setitem__('stypy_call_defaults', defaults)
        SunOSCPUInfo._is_ultra2.__dict__.__setitem__('stypy_call_varargs', varargs)
        SunOSCPUInfo._is_ultra2.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SunOSCPUInfo._is_ultra2.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SunOSCPUInfo._is_ultra2', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_ultra2', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_ultra2(...)' code ##################

        
        
        # Call to match(...): (line 450)
        # Processing the call arguments (line 450)
        str_31178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 450, 24), 'str', '.*Ultra-2')
        
        # Obtaining the type of the subscript
        str_31179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 450, 48), 'str', 'uname_i')
        # Getting the type of 'self' (line 450)
        self_31180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 450, 38), 'self', False)
        # Obtaining the member 'info' of a type (line 450)
        info_31181 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 450, 38), self_31180, 'info')
        # Obtaining the member '__getitem__' of a type (line 450)
        getitem___31182 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 450, 38), info_31181, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 450)
        subscript_call_result_31183 = invoke(stypy.reporting.localization.Localization(__file__, 450, 38), getitem___31182, str_31179)
        
        # Processing the call keyword arguments (line 450)
        kwargs_31184 = {}
        # Getting the type of 're' (line 450)
        re_31176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 450, 15), 're', False)
        # Obtaining the member 'match' of a type (line 450)
        match_31177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 450, 15), re_31176, 'match')
        # Calling match(args, kwargs) (line 450)
        match_call_result_31185 = invoke(stypy.reporting.localization.Localization(__file__, 450, 15), match_31177, *[str_31178, subscript_call_result_31183], **kwargs_31184)
        
        # Getting the type of 'None' (line 450)
        None_31186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 450, 67), 'None')
        # Applying the binary operator 'isnot' (line 450)
        result_is_not_31187 = python_operator(stypy.reporting.localization.Localization(__file__, 450, 15), 'isnot', match_call_result_31185, None_31186)
        
        # Assigning a type to the variable 'stypy_return_type' (line 450)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 450, 8), 'stypy_return_type', result_is_not_31187)
        
        # ################# End of '_is_ultra2(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_ultra2' in the type store
        # Getting the type of 'stypy_return_type' (line 449)
        stypy_return_type_31188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31188)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_ultra2'
        return stypy_return_type_31188


    @norecursion
    def _is_ultra30(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_ultra30'
        module_type_store = module_type_store.open_function_context('_is_ultra30', 451, 4, False)
        # Assigning a type to the variable 'self' (line 452)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 452, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SunOSCPUInfo._is_ultra30.__dict__.__setitem__('stypy_localization', localization)
        SunOSCPUInfo._is_ultra30.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SunOSCPUInfo._is_ultra30.__dict__.__setitem__('stypy_type_store', module_type_store)
        SunOSCPUInfo._is_ultra30.__dict__.__setitem__('stypy_function_name', 'SunOSCPUInfo._is_ultra30')
        SunOSCPUInfo._is_ultra30.__dict__.__setitem__('stypy_param_names_list', [])
        SunOSCPUInfo._is_ultra30.__dict__.__setitem__('stypy_varargs_param_name', None)
        SunOSCPUInfo._is_ultra30.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SunOSCPUInfo._is_ultra30.__dict__.__setitem__('stypy_call_defaults', defaults)
        SunOSCPUInfo._is_ultra30.__dict__.__setitem__('stypy_call_varargs', varargs)
        SunOSCPUInfo._is_ultra30.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SunOSCPUInfo._is_ultra30.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SunOSCPUInfo._is_ultra30', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_ultra30', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_ultra30(...)' code ##################

        
        
        # Call to match(...): (line 452)
        # Processing the call arguments (line 452)
        str_31191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 452, 24), 'str', '.*Ultra-30')
        
        # Obtaining the type of the subscript
        str_31192 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 452, 49), 'str', 'uname_i')
        # Getting the type of 'self' (line 452)
        self_31193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 452, 39), 'self', False)
        # Obtaining the member 'info' of a type (line 452)
        info_31194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 452, 39), self_31193, 'info')
        # Obtaining the member '__getitem__' of a type (line 452)
        getitem___31195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 452, 39), info_31194, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 452)
        subscript_call_result_31196 = invoke(stypy.reporting.localization.Localization(__file__, 452, 39), getitem___31195, str_31192)
        
        # Processing the call keyword arguments (line 452)
        kwargs_31197 = {}
        # Getting the type of 're' (line 452)
        re_31189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 452, 15), 're', False)
        # Obtaining the member 'match' of a type (line 452)
        match_31190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 452, 15), re_31189, 'match')
        # Calling match(args, kwargs) (line 452)
        match_call_result_31198 = invoke(stypy.reporting.localization.Localization(__file__, 452, 15), match_31190, *[str_31191, subscript_call_result_31196], **kwargs_31197)
        
        # Getting the type of 'None' (line 452)
        None_31199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 452, 68), 'None')
        # Applying the binary operator 'isnot' (line 452)
        result_is_not_31200 = python_operator(stypy.reporting.localization.Localization(__file__, 452, 15), 'isnot', match_call_result_31198, None_31199)
        
        # Assigning a type to the variable 'stypy_return_type' (line 452)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 452, 8), 'stypy_return_type', result_is_not_31200)
        
        # ################# End of '_is_ultra30(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_ultra30' in the type store
        # Getting the type of 'stypy_return_type' (line 451)
        stypy_return_type_31201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 451, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31201)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_ultra30'
        return stypy_return_type_31201


    @norecursion
    def _is_ultra4(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_ultra4'
        module_type_store = module_type_store.open_function_context('_is_ultra4', 453, 4, False)
        # Assigning a type to the variable 'self' (line 454)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 454, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SunOSCPUInfo._is_ultra4.__dict__.__setitem__('stypy_localization', localization)
        SunOSCPUInfo._is_ultra4.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SunOSCPUInfo._is_ultra4.__dict__.__setitem__('stypy_type_store', module_type_store)
        SunOSCPUInfo._is_ultra4.__dict__.__setitem__('stypy_function_name', 'SunOSCPUInfo._is_ultra4')
        SunOSCPUInfo._is_ultra4.__dict__.__setitem__('stypy_param_names_list', [])
        SunOSCPUInfo._is_ultra4.__dict__.__setitem__('stypy_varargs_param_name', None)
        SunOSCPUInfo._is_ultra4.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SunOSCPUInfo._is_ultra4.__dict__.__setitem__('stypy_call_defaults', defaults)
        SunOSCPUInfo._is_ultra4.__dict__.__setitem__('stypy_call_varargs', varargs)
        SunOSCPUInfo._is_ultra4.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SunOSCPUInfo._is_ultra4.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SunOSCPUInfo._is_ultra4', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_ultra4', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_ultra4(...)' code ##################

        
        
        # Call to match(...): (line 454)
        # Processing the call arguments (line 454)
        str_31204 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 454, 24), 'str', '.*Ultra-4')
        
        # Obtaining the type of the subscript
        str_31205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 454, 48), 'str', 'uname_i')
        # Getting the type of 'self' (line 454)
        self_31206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 454, 38), 'self', False)
        # Obtaining the member 'info' of a type (line 454)
        info_31207 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 454, 38), self_31206, 'info')
        # Obtaining the member '__getitem__' of a type (line 454)
        getitem___31208 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 454, 38), info_31207, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 454)
        subscript_call_result_31209 = invoke(stypy.reporting.localization.Localization(__file__, 454, 38), getitem___31208, str_31205)
        
        # Processing the call keyword arguments (line 454)
        kwargs_31210 = {}
        # Getting the type of 're' (line 454)
        re_31202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 454, 15), 're', False)
        # Obtaining the member 'match' of a type (line 454)
        match_31203 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 454, 15), re_31202, 'match')
        # Calling match(args, kwargs) (line 454)
        match_call_result_31211 = invoke(stypy.reporting.localization.Localization(__file__, 454, 15), match_31203, *[str_31204, subscript_call_result_31209], **kwargs_31210)
        
        # Getting the type of 'None' (line 454)
        None_31212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 454, 67), 'None')
        # Applying the binary operator 'isnot' (line 454)
        result_is_not_31213 = python_operator(stypy.reporting.localization.Localization(__file__, 454, 15), 'isnot', match_call_result_31211, None_31212)
        
        # Assigning a type to the variable 'stypy_return_type' (line 454)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 454, 8), 'stypy_return_type', result_is_not_31213)
        
        # ################# End of '_is_ultra4(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_ultra4' in the type store
        # Getting the type of 'stypy_return_type' (line 453)
        stypy_return_type_31214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 453, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31214)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_ultra4'
        return stypy_return_type_31214


    @norecursion
    def _is_ultra5_10(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_ultra5_10'
        module_type_store = module_type_store.open_function_context('_is_ultra5_10', 455, 4, False)
        # Assigning a type to the variable 'self' (line 456)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 456, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SunOSCPUInfo._is_ultra5_10.__dict__.__setitem__('stypy_localization', localization)
        SunOSCPUInfo._is_ultra5_10.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SunOSCPUInfo._is_ultra5_10.__dict__.__setitem__('stypy_type_store', module_type_store)
        SunOSCPUInfo._is_ultra5_10.__dict__.__setitem__('stypy_function_name', 'SunOSCPUInfo._is_ultra5_10')
        SunOSCPUInfo._is_ultra5_10.__dict__.__setitem__('stypy_param_names_list', [])
        SunOSCPUInfo._is_ultra5_10.__dict__.__setitem__('stypy_varargs_param_name', None)
        SunOSCPUInfo._is_ultra5_10.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SunOSCPUInfo._is_ultra5_10.__dict__.__setitem__('stypy_call_defaults', defaults)
        SunOSCPUInfo._is_ultra5_10.__dict__.__setitem__('stypy_call_varargs', varargs)
        SunOSCPUInfo._is_ultra5_10.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SunOSCPUInfo._is_ultra5_10.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SunOSCPUInfo._is_ultra5_10', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_ultra5_10', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_ultra5_10(...)' code ##################

        
        
        # Call to match(...): (line 456)
        # Processing the call arguments (line 456)
        str_31217 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 456, 24), 'str', '.*Ultra-5_10')
        
        # Obtaining the type of the subscript
        str_31218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 456, 51), 'str', 'uname_i')
        # Getting the type of 'self' (line 456)
        self_31219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 41), 'self', False)
        # Obtaining the member 'info' of a type (line 456)
        info_31220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 456, 41), self_31219, 'info')
        # Obtaining the member '__getitem__' of a type (line 456)
        getitem___31221 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 456, 41), info_31220, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 456)
        subscript_call_result_31222 = invoke(stypy.reporting.localization.Localization(__file__, 456, 41), getitem___31221, str_31218)
        
        # Processing the call keyword arguments (line 456)
        kwargs_31223 = {}
        # Getting the type of 're' (line 456)
        re_31215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 15), 're', False)
        # Obtaining the member 'match' of a type (line 456)
        match_31216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 456, 15), re_31215, 'match')
        # Calling match(args, kwargs) (line 456)
        match_call_result_31224 = invoke(stypy.reporting.localization.Localization(__file__, 456, 15), match_31216, *[str_31217, subscript_call_result_31222], **kwargs_31223)
        
        # Getting the type of 'None' (line 456)
        None_31225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 70), 'None')
        # Applying the binary operator 'isnot' (line 456)
        result_is_not_31226 = python_operator(stypy.reporting.localization.Localization(__file__, 456, 15), 'isnot', match_call_result_31224, None_31225)
        
        # Assigning a type to the variable 'stypy_return_type' (line 456)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 456, 8), 'stypy_return_type', result_is_not_31226)
        
        # ################# End of '_is_ultra5_10(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_ultra5_10' in the type store
        # Getting the type of 'stypy_return_type' (line 455)
        stypy_return_type_31227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31227)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_ultra5_10'
        return stypy_return_type_31227


    @norecursion
    def _is_ultra5(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_ultra5'
        module_type_store = module_type_store.open_function_context('_is_ultra5', 457, 4, False)
        # Assigning a type to the variable 'self' (line 458)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 458, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SunOSCPUInfo._is_ultra5.__dict__.__setitem__('stypy_localization', localization)
        SunOSCPUInfo._is_ultra5.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SunOSCPUInfo._is_ultra5.__dict__.__setitem__('stypy_type_store', module_type_store)
        SunOSCPUInfo._is_ultra5.__dict__.__setitem__('stypy_function_name', 'SunOSCPUInfo._is_ultra5')
        SunOSCPUInfo._is_ultra5.__dict__.__setitem__('stypy_param_names_list', [])
        SunOSCPUInfo._is_ultra5.__dict__.__setitem__('stypy_varargs_param_name', None)
        SunOSCPUInfo._is_ultra5.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SunOSCPUInfo._is_ultra5.__dict__.__setitem__('stypy_call_defaults', defaults)
        SunOSCPUInfo._is_ultra5.__dict__.__setitem__('stypy_call_varargs', varargs)
        SunOSCPUInfo._is_ultra5.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SunOSCPUInfo._is_ultra5.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SunOSCPUInfo._is_ultra5', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_ultra5', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_ultra5(...)' code ##################

        
        
        # Call to match(...): (line 458)
        # Processing the call arguments (line 458)
        str_31230 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 458, 24), 'str', '.*Ultra-5')
        
        # Obtaining the type of the subscript
        str_31231 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 458, 48), 'str', 'uname_i')
        # Getting the type of 'self' (line 458)
        self_31232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 458, 38), 'self', False)
        # Obtaining the member 'info' of a type (line 458)
        info_31233 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 458, 38), self_31232, 'info')
        # Obtaining the member '__getitem__' of a type (line 458)
        getitem___31234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 458, 38), info_31233, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 458)
        subscript_call_result_31235 = invoke(stypy.reporting.localization.Localization(__file__, 458, 38), getitem___31234, str_31231)
        
        # Processing the call keyword arguments (line 458)
        kwargs_31236 = {}
        # Getting the type of 're' (line 458)
        re_31228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 458, 15), 're', False)
        # Obtaining the member 'match' of a type (line 458)
        match_31229 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 458, 15), re_31228, 'match')
        # Calling match(args, kwargs) (line 458)
        match_call_result_31237 = invoke(stypy.reporting.localization.Localization(__file__, 458, 15), match_31229, *[str_31230, subscript_call_result_31235], **kwargs_31236)
        
        # Getting the type of 'None' (line 458)
        None_31238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 458, 67), 'None')
        # Applying the binary operator 'isnot' (line 458)
        result_is_not_31239 = python_operator(stypy.reporting.localization.Localization(__file__, 458, 15), 'isnot', match_call_result_31237, None_31238)
        
        # Assigning a type to the variable 'stypy_return_type' (line 458)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 458, 8), 'stypy_return_type', result_is_not_31239)
        
        # ################# End of '_is_ultra5(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_ultra5' in the type store
        # Getting the type of 'stypy_return_type' (line 457)
        stypy_return_type_31240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 457, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31240)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_ultra5'
        return stypy_return_type_31240


    @norecursion
    def _is_ultra60(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_ultra60'
        module_type_store = module_type_store.open_function_context('_is_ultra60', 459, 4, False)
        # Assigning a type to the variable 'self' (line 460)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 460, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SunOSCPUInfo._is_ultra60.__dict__.__setitem__('stypy_localization', localization)
        SunOSCPUInfo._is_ultra60.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SunOSCPUInfo._is_ultra60.__dict__.__setitem__('stypy_type_store', module_type_store)
        SunOSCPUInfo._is_ultra60.__dict__.__setitem__('stypy_function_name', 'SunOSCPUInfo._is_ultra60')
        SunOSCPUInfo._is_ultra60.__dict__.__setitem__('stypy_param_names_list', [])
        SunOSCPUInfo._is_ultra60.__dict__.__setitem__('stypy_varargs_param_name', None)
        SunOSCPUInfo._is_ultra60.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SunOSCPUInfo._is_ultra60.__dict__.__setitem__('stypy_call_defaults', defaults)
        SunOSCPUInfo._is_ultra60.__dict__.__setitem__('stypy_call_varargs', varargs)
        SunOSCPUInfo._is_ultra60.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SunOSCPUInfo._is_ultra60.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SunOSCPUInfo._is_ultra60', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_ultra60', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_ultra60(...)' code ##################

        
        
        # Call to match(...): (line 460)
        # Processing the call arguments (line 460)
        str_31243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 460, 24), 'str', '.*Ultra-60')
        
        # Obtaining the type of the subscript
        str_31244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 460, 49), 'str', 'uname_i')
        # Getting the type of 'self' (line 460)
        self_31245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 39), 'self', False)
        # Obtaining the member 'info' of a type (line 460)
        info_31246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 460, 39), self_31245, 'info')
        # Obtaining the member '__getitem__' of a type (line 460)
        getitem___31247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 460, 39), info_31246, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 460)
        subscript_call_result_31248 = invoke(stypy.reporting.localization.Localization(__file__, 460, 39), getitem___31247, str_31244)
        
        # Processing the call keyword arguments (line 460)
        kwargs_31249 = {}
        # Getting the type of 're' (line 460)
        re_31241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 15), 're', False)
        # Obtaining the member 'match' of a type (line 460)
        match_31242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 460, 15), re_31241, 'match')
        # Calling match(args, kwargs) (line 460)
        match_call_result_31250 = invoke(stypy.reporting.localization.Localization(__file__, 460, 15), match_31242, *[str_31243, subscript_call_result_31248], **kwargs_31249)
        
        # Getting the type of 'None' (line 460)
        None_31251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 68), 'None')
        # Applying the binary operator 'isnot' (line 460)
        result_is_not_31252 = python_operator(stypy.reporting.localization.Localization(__file__, 460, 15), 'isnot', match_call_result_31250, None_31251)
        
        # Assigning a type to the variable 'stypy_return_type' (line 460)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 460, 8), 'stypy_return_type', result_is_not_31252)
        
        # ################# End of '_is_ultra60(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_ultra60' in the type store
        # Getting the type of 'stypy_return_type' (line 459)
        stypy_return_type_31253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 459, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31253)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_ultra60'
        return stypy_return_type_31253


    @norecursion
    def _is_ultra80(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_ultra80'
        module_type_store = module_type_store.open_function_context('_is_ultra80', 461, 4, False)
        # Assigning a type to the variable 'self' (line 462)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 462, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SunOSCPUInfo._is_ultra80.__dict__.__setitem__('stypy_localization', localization)
        SunOSCPUInfo._is_ultra80.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SunOSCPUInfo._is_ultra80.__dict__.__setitem__('stypy_type_store', module_type_store)
        SunOSCPUInfo._is_ultra80.__dict__.__setitem__('stypy_function_name', 'SunOSCPUInfo._is_ultra80')
        SunOSCPUInfo._is_ultra80.__dict__.__setitem__('stypy_param_names_list', [])
        SunOSCPUInfo._is_ultra80.__dict__.__setitem__('stypy_varargs_param_name', None)
        SunOSCPUInfo._is_ultra80.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SunOSCPUInfo._is_ultra80.__dict__.__setitem__('stypy_call_defaults', defaults)
        SunOSCPUInfo._is_ultra80.__dict__.__setitem__('stypy_call_varargs', varargs)
        SunOSCPUInfo._is_ultra80.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SunOSCPUInfo._is_ultra80.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SunOSCPUInfo._is_ultra80', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_ultra80', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_ultra80(...)' code ##################

        
        
        # Call to match(...): (line 462)
        # Processing the call arguments (line 462)
        str_31256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 462, 24), 'str', '.*Ultra-80')
        
        # Obtaining the type of the subscript
        str_31257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 462, 49), 'str', 'uname_i')
        # Getting the type of 'self' (line 462)
        self_31258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 39), 'self', False)
        # Obtaining the member 'info' of a type (line 462)
        info_31259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 462, 39), self_31258, 'info')
        # Obtaining the member '__getitem__' of a type (line 462)
        getitem___31260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 462, 39), info_31259, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 462)
        subscript_call_result_31261 = invoke(stypy.reporting.localization.Localization(__file__, 462, 39), getitem___31260, str_31257)
        
        # Processing the call keyword arguments (line 462)
        kwargs_31262 = {}
        # Getting the type of 're' (line 462)
        re_31254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 15), 're', False)
        # Obtaining the member 'match' of a type (line 462)
        match_31255 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 462, 15), re_31254, 'match')
        # Calling match(args, kwargs) (line 462)
        match_call_result_31263 = invoke(stypy.reporting.localization.Localization(__file__, 462, 15), match_31255, *[str_31256, subscript_call_result_31261], **kwargs_31262)
        
        # Getting the type of 'None' (line 462)
        None_31264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 68), 'None')
        # Applying the binary operator 'isnot' (line 462)
        result_is_not_31265 = python_operator(stypy.reporting.localization.Localization(__file__, 462, 15), 'isnot', match_call_result_31263, None_31264)
        
        # Assigning a type to the variable 'stypy_return_type' (line 462)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 462, 8), 'stypy_return_type', result_is_not_31265)
        
        # ################# End of '_is_ultra80(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_ultra80' in the type store
        # Getting the type of 'stypy_return_type' (line 461)
        stypy_return_type_31266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31266)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_ultra80'
        return stypy_return_type_31266


    @norecursion
    def _is_ultraenterprice(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_ultraenterprice'
        module_type_store = module_type_store.open_function_context('_is_ultraenterprice', 463, 4, False)
        # Assigning a type to the variable 'self' (line 464)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 464, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SunOSCPUInfo._is_ultraenterprice.__dict__.__setitem__('stypy_localization', localization)
        SunOSCPUInfo._is_ultraenterprice.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SunOSCPUInfo._is_ultraenterprice.__dict__.__setitem__('stypy_type_store', module_type_store)
        SunOSCPUInfo._is_ultraenterprice.__dict__.__setitem__('stypy_function_name', 'SunOSCPUInfo._is_ultraenterprice')
        SunOSCPUInfo._is_ultraenterprice.__dict__.__setitem__('stypy_param_names_list', [])
        SunOSCPUInfo._is_ultraenterprice.__dict__.__setitem__('stypy_varargs_param_name', None)
        SunOSCPUInfo._is_ultraenterprice.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SunOSCPUInfo._is_ultraenterprice.__dict__.__setitem__('stypy_call_defaults', defaults)
        SunOSCPUInfo._is_ultraenterprice.__dict__.__setitem__('stypy_call_varargs', varargs)
        SunOSCPUInfo._is_ultraenterprice.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SunOSCPUInfo._is_ultraenterprice.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SunOSCPUInfo._is_ultraenterprice', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_ultraenterprice', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_ultraenterprice(...)' code ##################

        
        
        # Call to match(...): (line 464)
        # Processing the call arguments (line 464)
        str_31269 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 464, 24), 'str', '.*Ultra-Enterprise')
        
        # Obtaining the type of the subscript
        str_31270 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 464, 57), 'str', 'uname_i')
        # Getting the type of 'self' (line 464)
        self_31271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 47), 'self', False)
        # Obtaining the member 'info' of a type (line 464)
        info_31272 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 464, 47), self_31271, 'info')
        # Obtaining the member '__getitem__' of a type (line 464)
        getitem___31273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 464, 47), info_31272, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 464)
        subscript_call_result_31274 = invoke(stypy.reporting.localization.Localization(__file__, 464, 47), getitem___31273, str_31270)
        
        # Processing the call keyword arguments (line 464)
        kwargs_31275 = {}
        # Getting the type of 're' (line 464)
        re_31267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 15), 're', False)
        # Obtaining the member 'match' of a type (line 464)
        match_31268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 464, 15), re_31267, 'match')
        # Calling match(args, kwargs) (line 464)
        match_call_result_31276 = invoke(stypy.reporting.localization.Localization(__file__, 464, 15), match_31268, *[str_31269, subscript_call_result_31274], **kwargs_31275)
        
        # Getting the type of 'None' (line 464)
        None_31277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 76), 'None')
        # Applying the binary operator 'isnot' (line 464)
        result_is_not_31278 = python_operator(stypy.reporting.localization.Localization(__file__, 464, 15), 'isnot', match_call_result_31276, None_31277)
        
        # Assigning a type to the variable 'stypy_return_type' (line 464)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 464, 8), 'stypy_return_type', result_is_not_31278)
        
        # ################# End of '_is_ultraenterprice(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_ultraenterprice' in the type store
        # Getting the type of 'stypy_return_type' (line 463)
        stypy_return_type_31279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 463, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31279)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_ultraenterprice'
        return stypy_return_type_31279


    @norecursion
    def _is_ultraenterprice10k(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_ultraenterprice10k'
        module_type_store = module_type_store.open_function_context('_is_ultraenterprice10k', 465, 4, False)
        # Assigning a type to the variable 'self' (line 466)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 466, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SunOSCPUInfo._is_ultraenterprice10k.__dict__.__setitem__('stypy_localization', localization)
        SunOSCPUInfo._is_ultraenterprice10k.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SunOSCPUInfo._is_ultraenterprice10k.__dict__.__setitem__('stypy_type_store', module_type_store)
        SunOSCPUInfo._is_ultraenterprice10k.__dict__.__setitem__('stypy_function_name', 'SunOSCPUInfo._is_ultraenterprice10k')
        SunOSCPUInfo._is_ultraenterprice10k.__dict__.__setitem__('stypy_param_names_list', [])
        SunOSCPUInfo._is_ultraenterprice10k.__dict__.__setitem__('stypy_varargs_param_name', None)
        SunOSCPUInfo._is_ultraenterprice10k.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SunOSCPUInfo._is_ultraenterprice10k.__dict__.__setitem__('stypy_call_defaults', defaults)
        SunOSCPUInfo._is_ultraenterprice10k.__dict__.__setitem__('stypy_call_varargs', varargs)
        SunOSCPUInfo._is_ultraenterprice10k.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SunOSCPUInfo._is_ultraenterprice10k.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SunOSCPUInfo._is_ultraenterprice10k', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_ultraenterprice10k', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_ultraenterprice10k(...)' code ##################

        
        
        # Call to match(...): (line 466)
        # Processing the call arguments (line 466)
        str_31282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 466, 24), 'str', '.*Ultra-Enterprise-10000')
        
        # Obtaining the type of the subscript
        str_31283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 466, 63), 'str', 'uname_i')
        # Getting the type of 'self' (line 466)
        self_31284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 53), 'self', False)
        # Obtaining the member 'info' of a type (line 466)
        info_31285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 466, 53), self_31284, 'info')
        # Obtaining the member '__getitem__' of a type (line 466)
        getitem___31286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 466, 53), info_31285, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 466)
        subscript_call_result_31287 = invoke(stypy.reporting.localization.Localization(__file__, 466, 53), getitem___31286, str_31283)
        
        # Processing the call keyword arguments (line 466)
        kwargs_31288 = {}
        # Getting the type of 're' (line 466)
        re_31280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 15), 're', False)
        # Obtaining the member 'match' of a type (line 466)
        match_31281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 466, 15), re_31280, 'match')
        # Calling match(args, kwargs) (line 466)
        match_call_result_31289 = invoke(stypy.reporting.localization.Localization(__file__, 466, 15), match_31281, *[str_31282, subscript_call_result_31287], **kwargs_31288)
        
        # Getting the type of 'None' (line 466)
        None_31290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 82), 'None')
        # Applying the binary operator 'isnot' (line 466)
        result_is_not_31291 = python_operator(stypy.reporting.localization.Localization(__file__, 466, 15), 'isnot', match_call_result_31289, None_31290)
        
        # Assigning a type to the variable 'stypy_return_type' (line 466)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 466, 8), 'stypy_return_type', result_is_not_31291)
        
        # ################# End of '_is_ultraenterprice10k(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_ultraenterprice10k' in the type store
        # Getting the type of 'stypy_return_type' (line 465)
        stypy_return_type_31292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 465, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31292)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_ultraenterprice10k'
        return stypy_return_type_31292


    @norecursion
    def _is_sunfire(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_sunfire'
        module_type_store = module_type_store.open_function_context('_is_sunfire', 467, 4, False)
        # Assigning a type to the variable 'self' (line 468)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 468, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SunOSCPUInfo._is_sunfire.__dict__.__setitem__('stypy_localization', localization)
        SunOSCPUInfo._is_sunfire.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SunOSCPUInfo._is_sunfire.__dict__.__setitem__('stypy_type_store', module_type_store)
        SunOSCPUInfo._is_sunfire.__dict__.__setitem__('stypy_function_name', 'SunOSCPUInfo._is_sunfire')
        SunOSCPUInfo._is_sunfire.__dict__.__setitem__('stypy_param_names_list', [])
        SunOSCPUInfo._is_sunfire.__dict__.__setitem__('stypy_varargs_param_name', None)
        SunOSCPUInfo._is_sunfire.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SunOSCPUInfo._is_sunfire.__dict__.__setitem__('stypy_call_defaults', defaults)
        SunOSCPUInfo._is_sunfire.__dict__.__setitem__('stypy_call_varargs', varargs)
        SunOSCPUInfo._is_sunfire.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SunOSCPUInfo._is_sunfire.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SunOSCPUInfo._is_sunfire', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_sunfire', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_sunfire(...)' code ##################

        
        
        # Call to match(...): (line 468)
        # Processing the call arguments (line 468)
        str_31295 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 468, 24), 'str', '.*Sun-Fire')
        
        # Obtaining the type of the subscript
        str_31296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 468, 49), 'str', 'uname_i')
        # Getting the type of 'self' (line 468)
        self_31297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 39), 'self', False)
        # Obtaining the member 'info' of a type (line 468)
        info_31298 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 39), self_31297, 'info')
        # Obtaining the member '__getitem__' of a type (line 468)
        getitem___31299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 39), info_31298, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 468)
        subscript_call_result_31300 = invoke(stypy.reporting.localization.Localization(__file__, 468, 39), getitem___31299, str_31296)
        
        # Processing the call keyword arguments (line 468)
        kwargs_31301 = {}
        # Getting the type of 're' (line 468)
        re_31293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 15), 're', False)
        # Obtaining the member 'match' of a type (line 468)
        match_31294 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 15), re_31293, 'match')
        # Calling match(args, kwargs) (line 468)
        match_call_result_31302 = invoke(stypy.reporting.localization.Localization(__file__, 468, 15), match_31294, *[str_31295, subscript_call_result_31300], **kwargs_31301)
        
        # Getting the type of 'None' (line 468)
        None_31303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 68), 'None')
        # Applying the binary operator 'isnot' (line 468)
        result_is_not_31304 = python_operator(stypy.reporting.localization.Localization(__file__, 468, 15), 'isnot', match_call_result_31302, None_31303)
        
        # Assigning a type to the variable 'stypy_return_type' (line 468)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 468, 8), 'stypy_return_type', result_is_not_31304)
        
        # ################# End of '_is_sunfire(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_sunfire' in the type store
        # Getting the type of 'stypy_return_type' (line 467)
        stypy_return_type_31305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31305)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_sunfire'
        return stypy_return_type_31305


    @norecursion
    def _is_ultra(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_ultra'
        module_type_store = module_type_store.open_function_context('_is_ultra', 469, 4, False)
        # Assigning a type to the variable 'self' (line 470)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 470, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SunOSCPUInfo._is_ultra.__dict__.__setitem__('stypy_localization', localization)
        SunOSCPUInfo._is_ultra.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SunOSCPUInfo._is_ultra.__dict__.__setitem__('stypy_type_store', module_type_store)
        SunOSCPUInfo._is_ultra.__dict__.__setitem__('stypy_function_name', 'SunOSCPUInfo._is_ultra')
        SunOSCPUInfo._is_ultra.__dict__.__setitem__('stypy_param_names_list', [])
        SunOSCPUInfo._is_ultra.__dict__.__setitem__('stypy_varargs_param_name', None)
        SunOSCPUInfo._is_ultra.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SunOSCPUInfo._is_ultra.__dict__.__setitem__('stypy_call_defaults', defaults)
        SunOSCPUInfo._is_ultra.__dict__.__setitem__('stypy_call_varargs', varargs)
        SunOSCPUInfo._is_ultra.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SunOSCPUInfo._is_ultra.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SunOSCPUInfo._is_ultra', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_ultra', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_ultra(...)' code ##################

        
        
        # Call to match(...): (line 470)
        # Processing the call arguments (line 470)
        str_31308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 470, 24), 'str', '.*Ultra')
        
        # Obtaining the type of the subscript
        str_31309 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 470, 46), 'str', 'uname_i')
        # Getting the type of 'self' (line 470)
        self_31310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 36), 'self', False)
        # Obtaining the member 'info' of a type (line 470)
        info_31311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 470, 36), self_31310, 'info')
        # Obtaining the member '__getitem__' of a type (line 470)
        getitem___31312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 470, 36), info_31311, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 470)
        subscript_call_result_31313 = invoke(stypy.reporting.localization.Localization(__file__, 470, 36), getitem___31312, str_31309)
        
        # Processing the call keyword arguments (line 470)
        kwargs_31314 = {}
        # Getting the type of 're' (line 470)
        re_31306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 15), 're', False)
        # Obtaining the member 'match' of a type (line 470)
        match_31307 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 470, 15), re_31306, 'match')
        # Calling match(args, kwargs) (line 470)
        match_call_result_31315 = invoke(stypy.reporting.localization.Localization(__file__, 470, 15), match_31307, *[str_31308, subscript_call_result_31313], **kwargs_31314)
        
        # Getting the type of 'None' (line 470)
        None_31316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 65), 'None')
        # Applying the binary operator 'isnot' (line 470)
        result_is_not_31317 = python_operator(stypy.reporting.localization.Localization(__file__, 470, 15), 'isnot', match_call_result_31315, None_31316)
        
        # Assigning a type to the variable 'stypy_return_type' (line 470)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 470, 8), 'stypy_return_type', result_is_not_31317)
        
        # ################# End of '_is_ultra(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_ultra' in the type store
        # Getting the type of 'stypy_return_type' (line 469)
        stypy_return_type_31318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31318)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_ultra'
        return stypy_return_type_31318


    @norecursion
    def _is_cpusparcv7(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_cpusparcv7'
        module_type_store = module_type_store.open_function_context('_is_cpusparcv7', 472, 4, False)
        # Assigning a type to the variable 'self' (line 473)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 473, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SunOSCPUInfo._is_cpusparcv7.__dict__.__setitem__('stypy_localization', localization)
        SunOSCPUInfo._is_cpusparcv7.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SunOSCPUInfo._is_cpusparcv7.__dict__.__setitem__('stypy_type_store', module_type_store)
        SunOSCPUInfo._is_cpusparcv7.__dict__.__setitem__('stypy_function_name', 'SunOSCPUInfo._is_cpusparcv7')
        SunOSCPUInfo._is_cpusparcv7.__dict__.__setitem__('stypy_param_names_list', [])
        SunOSCPUInfo._is_cpusparcv7.__dict__.__setitem__('stypy_varargs_param_name', None)
        SunOSCPUInfo._is_cpusparcv7.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SunOSCPUInfo._is_cpusparcv7.__dict__.__setitem__('stypy_call_defaults', defaults)
        SunOSCPUInfo._is_cpusparcv7.__dict__.__setitem__('stypy_call_varargs', varargs)
        SunOSCPUInfo._is_cpusparcv7.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SunOSCPUInfo._is_cpusparcv7.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SunOSCPUInfo._is_cpusparcv7', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_cpusparcv7', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_cpusparcv7(...)' code ##################

        
        
        # Obtaining the type of the subscript
        str_31319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 473, 25), 'str', 'processor')
        # Getting the type of 'self' (line 473)
        self_31320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 15), 'self')
        # Obtaining the member 'info' of a type (line 473)
        info_31321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 473, 15), self_31320, 'info')
        # Obtaining the member '__getitem__' of a type (line 473)
        getitem___31322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 473, 15), info_31321, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 473)
        subscript_call_result_31323 = invoke(stypy.reporting.localization.Localization(__file__, 473, 15), getitem___31322, str_31319)
        
        str_31324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 473, 39), 'str', 'sparcv7')
        # Applying the binary operator '==' (line 473)
        result_eq_31325 = python_operator(stypy.reporting.localization.Localization(__file__, 473, 15), '==', subscript_call_result_31323, str_31324)
        
        # Assigning a type to the variable 'stypy_return_type' (line 473)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 473, 8), 'stypy_return_type', result_eq_31325)
        
        # ################# End of '_is_cpusparcv7(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_cpusparcv7' in the type store
        # Getting the type of 'stypy_return_type' (line 472)
        stypy_return_type_31326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31326)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_cpusparcv7'
        return stypy_return_type_31326


    @norecursion
    def _is_cpusparcv8(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_cpusparcv8'
        module_type_store = module_type_store.open_function_context('_is_cpusparcv8', 474, 4, False)
        # Assigning a type to the variable 'self' (line 475)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 475, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SunOSCPUInfo._is_cpusparcv8.__dict__.__setitem__('stypy_localization', localization)
        SunOSCPUInfo._is_cpusparcv8.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SunOSCPUInfo._is_cpusparcv8.__dict__.__setitem__('stypy_type_store', module_type_store)
        SunOSCPUInfo._is_cpusparcv8.__dict__.__setitem__('stypy_function_name', 'SunOSCPUInfo._is_cpusparcv8')
        SunOSCPUInfo._is_cpusparcv8.__dict__.__setitem__('stypy_param_names_list', [])
        SunOSCPUInfo._is_cpusparcv8.__dict__.__setitem__('stypy_varargs_param_name', None)
        SunOSCPUInfo._is_cpusparcv8.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SunOSCPUInfo._is_cpusparcv8.__dict__.__setitem__('stypy_call_defaults', defaults)
        SunOSCPUInfo._is_cpusparcv8.__dict__.__setitem__('stypy_call_varargs', varargs)
        SunOSCPUInfo._is_cpusparcv8.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SunOSCPUInfo._is_cpusparcv8.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SunOSCPUInfo._is_cpusparcv8', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_cpusparcv8', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_cpusparcv8(...)' code ##################

        
        
        # Obtaining the type of the subscript
        str_31327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 475, 25), 'str', 'processor')
        # Getting the type of 'self' (line 475)
        self_31328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 15), 'self')
        # Obtaining the member 'info' of a type (line 475)
        info_31329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 475, 15), self_31328, 'info')
        # Obtaining the member '__getitem__' of a type (line 475)
        getitem___31330 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 475, 15), info_31329, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 475)
        subscript_call_result_31331 = invoke(stypy.reporting.localization.Localization(__file__, 475, 15), getitem___31330, str_31327)
        
        str_31332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 475, 39), 'str', 'sparcv8')
        # Applying the binary operator '==' (line 475)
        result_eq_31333 = python_operator(stypy.reporting.localization.Localization(__file__, 475, 15), '==', subscript_call_result_31331, str_31332)
        
        # Assigning a type to the variable 'stypy_return_type' (line 475)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 475, 8), 'stypy_return_type', result_eq_31333)
        
        # ################# End of '_is_cpusparcv8(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_cpusparcv8' in the type store
        # Getting the type of 'stypy_return_type' (line 474)
        stypy_return_type_31334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31334)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_cpusparcv8'
        return stypy_return_type_31334


    @norecursion
    def _is_cpusparcv9(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_cpusparcv9'
        module_type_store = module_type_store.open_function_context('_is_cpusparcv9', 476, 4, False)
        # Assigning a type to the variable 'self' (line 477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 477, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SunOSCPUInfo._is_cpusparcv9.__dict__.__setitem__('stypy_localization', localization)
        SunOSCPUInfo._is_cpusparcv9.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SunOSCPUInfo._is_cpusparcv9.__dict__.__setitem__('stypy_type_store', module_type_store)
        SunOSCPUInfo._is_cpusparcv9.__dict__.__setitem__('stypy_function_name', 'SunOSCPUInfo._is_cpusparcv9')
        SunOSCPUInfo._is_cpusparcv9.__dict__.__setitem__('stypy_param_names_list', [])
        SunOSCPUInfo._is_cpusparcv9.__dict__.__setitem__('stypy_varargs_param_name', None)
        SunOSCPUInfo._is_cpusparcv9.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SunOSCPUInfo._is_cpusparcv9.__dict__.__setitem__('stypy_call_defaults', defaults)
        SunOSCPUInfo._is_cpusparcv9.__dict__.__setitem__('stypy_call_varargs', varargs)
        SunOSCPUInfo._is_cpusparcv9.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SunOSCPUInfo._is_cpusparcv9.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SunOSCPUInfo._is_cpusparcv9', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_cpusparcv9', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_cpusparcv9(...)' code ##################

        
        
        # Obtaining the type of the subscript
        str_31335 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 477, 25), 'str', 'processor')
        # Getting the type of 'self' (line 477)
        self_31336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 15), 'self')
        # Obtaining the member 'info' of a type (line 477)
        info_31337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 477, 15), self_31336, 'info')
        # Obtaining the member '__getitem__' of a type (line 477)
        getitem___31338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 477, 15), info_31337, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 477)
        subscript_call_result_31339 = invoke(stypy.reporting.localization.Localization(__file__, 477, 15), getitem___31338, str_31335)
        
        str_31340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 477, 39), 'str', 'sparcv9')
        # Applying the binary operator '==' (line 477)
        result_eq_31341 = python_operator(stypy.reporting.localization.Localization(__file__, 477, 15), '==', subscript_call_result_31339, str_31340)
        
        # Assigning a type to the variable 'stypy_return_type' (line 477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 477, 8), 'stypy_return_type', result_eq_31341)
        
        # ################# End of '_is_cpusparcv9(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_cpusparcv9' in the type store
        # Getting the type of 'stypy_return_type' (line 476)
        stypy_return_type_31342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31342)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_cpusparcv9'
        return stypy_return_type_31342


# Assigning a type to the variable 'SunOSCPUInfo' (line 405)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 405, 0), 'SunOSCPUInfo', SunOSCPUInfo)

# Assigning a Name to a Name (line 407):
# Getting the type of 'None' (line 407)
None_31343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 407, 11), 'None')
# Getting the type of 'SunOSCPUInfo'
SunOSCPUInfo_31344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'SunOSCPUInfo')
# Setting the type of the member 'info' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), SunOSCPUInfo_31344, 'info', None_31343)
# Declaration of the 'Win32CPUInfo' class
# Getting the type of 'CPUInfoBase' (line 479)
CPUInfoBase_31345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 19), 'CPUInfoBase')

class Win32CPUInfo(CPUInfoBase_31345, ):
    
    # Assigning a Name to a Name (line 481):
    
    # Assigning a Str to a Name (line 482):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 487, 4, False)
        # Assigning a type to the variable 'self' (line 488)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 488, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Win32CPUInfo.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        
        # Getting the type of 'self' (line 488)
        self_31346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 11), 'self')
        # Obtaining the member 'info' of a type (line 488)
        info_31347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 488, 11), self_31346, 'info')
        # Getting the type of 'None' (line 488)
        None_31348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 28), 'None')
        # Applying the binary operator 'isnot' (line 488)
        result_is_not_31349 = python_operator(stypy.reporting.localization.Localization(__file__, 488, 11), 'isnot', info_31347, None_31348)
        
        # Testing the type of an if condition (line 488)
        if_condition_31350 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 488, 8), result_is_not_31349)
        # Assigning a type to the variable 'if_condition_31350' (line 488)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 488, 8), 'if_condition_31350', if_condition_31350)
        # SSA begins for if statement (line 488)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 489)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 489, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 488)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a List to a Name (line 490):
        
        # Assigning a List to a Name (line 490):
        
        # Obtaining an instance of the builtin type 'list' (line 490)
        list_31351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 490, 15), 'list')
        # Adding type elements to the builtin type 'list' instance (line 490)
        
        # Assigning a type to the variable 'info' (line 490)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 490, 8), 'info', list_31351)
        
        
        # SSA begins for try-except statement (line 491)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        
        
        # Obtaining the type of the subscript
        int_31352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 493, 32), 'int')
        # Getting the type of 'sys' (line 493)
        sys_31353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 15), 'sys')
        # Obtaining the member 'version_info' of a type (line 493)
        version_info_31354 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 493, 15), sys_31353, 'version_info')
        # Obtaining the member '__getitem__' of a type (line 493)
        getitem___31355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 493, 15), version_info_31354, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 493)
        subscript_call_result_31356 = invoke(stypy.reporting.localization.Localization(__file__, 493, 15), getitem___31355, int_31352)
        
        int_31357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 493, 38), 'int')
        # Applying the binary operator '>=' (line 493)
        result_ge_31358 = python_operator(stypy.reporting.localization.Localization(__file__, 493, 15), '>=', subscript_call_result_31356, int_31357)
        
        # Testing the type of an if condition (line 493)
        if_condition_31359 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 493, 12), result_ge_31358)
        # Assigning a type to the variable 'if_condition_31359' (line 493)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 493, 12), 'if_condition_31359', if_condition_31359)
        # SSA begins for if statement (line 493)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 494, 16))
        
        # 'import winreg' statement (line 494)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/distutils/')
        import_31360 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 494, 16), 'winreg')

        if (type(import_31360) is not StypyTypeError):

            if (import_31360 != 'pyd_module'):
                __import__(import_31360)
                sys_modules_31361 = sys.modules[import_31360]
                import_module(stypy.reporting.localization.Localization(__file__, 494, 16), 'winreg', sys_modules_31361.module_type_store, module_type_store)
            else:
                import winreg

                import_module(stypy.reporting.localization.Localization(__file__, 494, 16), 'winreg', winreg, module_type_store)

        else:
            # Assigning a type to the variable 'winreg' (line 494)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 494, 16), 'winreg', import_31360)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/distutils/')
        
        # SSA branch for the else part of an if statement (line 493)
        module_type_store.open_ssa_branch('else')
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 496, 16))
        
        # 'import _winreg' statement (line 496)
        import _winreg as winreg

        import_module(stypy.reporting.localization.Localization(__file__, 496, 16), 'winreg', winreg, module_type_store)
        
        # SSA join for if statement (line 493)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 498):
        
        # Assigning a Call to a Name (line 498):
        
        # Call to compile(...): (line 498)
        # Processing the call arguments (line 498)
        str_31364 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 498, 30), 'str', 'family\\s+(?P<FML>\\d+)\\s+model\\s+(?P<MDL>\\d+)\\s+stepping\\s+(?P<STP>\\d+)')
        # Getting the type of 're' (line 499)
        re_31365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 60), 're', False)
        # Obtaining the member 'IGNORECASE' of a type (line 499)
        IGNORECASE_31366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 499, 60), re_31365, 'IGNORECASE')
        # Processing the call keyword arguments (line 498)
        kwargs_31367 = {}
        # Getting the type of 're' (line 498)
        re_31362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 19), 're', False)
        # Obtaining the member 'compile' of a type (line 498)
        compile_31363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 498, 19), re_31362, 'compile')
        # Calling compile(args, kwargs) (line 498)
        compile_call_result_31368 = invoke(stypy.reporting.localization.Localization(__file__, 498, 19), compile_31363, *[str_31364, IGNORECASE_31366], **kwargs_31367)
        
        # Assigning a type to the variable 'prgx' (line 498)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 498, 12), 'prgx', compile_call_result_31368)
        
        # Assigning a Call to a Name (line 500):
        
        # Assigning a Call to a Name (line 500):
        
        # Call to OpenKey(...): (line 500)
        # Processing the call arguments (line 500)
        # Getting the type of 'winreg' (line 500)
        winreg_31371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 32), 'winreg', False)
        # Obtaining the member 'HKEY_LOCAL_MACHINE' of a type (line 500)
        HKEY_LOCAL_MACHINE_31372 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 500, 32), winreg_31371, 'HKEY_LOCAL_MACHINE')
        # Getting the type of 'self' (line 500)
        self_31373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 59), 'self', False)
        # Obtaining the member 'pkey' of a type (line 500)
        pkey_31374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 500, 59), self_31373, 'pkey')
        # Processing the call keyword arguments (line 500)
        kwargs_31375 = {}
        # Getting the type of 'winreg' (line 500)
        winreg_31369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 17), 'winreg', False)
        # Obtaining the member 'OpenKey' of a type (line 500)
        OpenKey_31370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 500, 17), winreg_31369, 'OpenKey')
        # Calling OpenKey(args, kwargs) (line 500)
        OpenKey_call_result_31376 = invoke(stypy.reporting.localization.Localization(__file__, 500, 17), OpenKey_31370, *[HKEY_LOCAL_MACHINE_31372, pkey_31374], **kwargs_31375)
        
        # Assigning a type to the variable 'chnd' (line 500)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 500, 12), 'chnd', OpenKey_call_result_31376)
        
        # Assigning a Num to a Name (line 501):
        
        # Assigning a Num to a Name (line 501):
        int_31377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 501, 17), 'int')
        # Assigning a type to the variable 'pnum' (line 501)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 501, 12), 'pnum', int_31377)
        
        # Getting the type of 'True' (line 502)
        True_31378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 18), 'True')
        # Testing the type of an if condition (line 502)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 502, 12), True_31378)
        # SSA begins for while statement (line 502)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
        
        
        # SSA begins for try-except statement (line 503)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 504):
        
        # Assigning a Call to a Name (line 504):
        
        # Call to EnumKey(...): (line 504)
        # Processing the call arguments (line 504)
        # Getting the type of 'chnd' (line 504)
        chnd_31381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 504, 40), 'chnd', False)
        # Getting the type of 'pnum' (line 504)
        pnum_31382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 504, 46), 'pnum', False)
        # Processing the call keyword arguments (line 504)
        kwargs_31383 = {}
        # Getting the type of 'winreg' (line 504)
        winreg_31379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 504, 25), 'winreg', False)
        # Obtaining the member 'EnumKey' of a type (line 504)
        EnumKey_31380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 504, 25), winreg_31379, 'EnumKey')
        # Calling EnumKey(args, kwargs) (line 504)
        EnumKey_call_result_31384 = invoke(stypy.reporting.localization.Localization(__file__, 504, 25), EnumKey_31380, *[chnd_31381, pnum_31382], **kwargs_31383)
        
        # Assigning a type to the variable 'proc' (line 504)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 504, 20), 'proc', EnumKey_call_result_31384)
        # SSA branch for the except part of a try statement (line 503)
        # SSA branch for the except 'Attribute' branch of a try statement (line 503)
        module_type_store.open_ssa_branch('except')
        # SSA branch for the else branch of a try statement (line 503)
        module_type_store.open_ssa_branch('except else')
        
        # Getting the type of 'pnum' (line 508)
        pnum_31385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 20), 'pnum')
        int_31386 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 508, 26), 'int')
        # Applying the binary operator '+=' (line 508)
        result_iadd_31387 = python_operator(stypy.reporting.localization.Localization(__file__, 508, 20), '+=', pnum_31385, int_31386)
        # Assigning a type to the variable 'pnum' (line 508)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 508, 20), 'pnum', result_iadd_31387)
        
        
        # Call to append(...): (line 509)
        # Processing the call arguments (line 509)
        
        # Obtaining an instance of the builtin type 'dict' (line 509)
        dict_31390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 509, 32), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 509)
        # Adding element type (key, value) (line 509)
        str_31391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 509, 33), 'str', 'Processor')
        # Getting the type of 'proc' (line 509)
        proc_31392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 509, 45), 'proc', False)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 509, 32), dict_31390, (str_31391, proc_31392))
        
        # Processing the call keyword arguments (line 509)
        kwargs_31393 = {}
        # Getting the type of 'info' (line 509)
        info_31388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 509, 20), 'info', False)
        # Obtaining the member 'append' of a type (line 509)
        append_31389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 509, 20), info_31388, 'append')
        # Calling append(args, kwargs) (line 509)
        append_call_result_31394 = invoke(stypy.reporting.localization.Localization(__file__, 509, 20), append_31389, *[dict_31390], **kwargs_31393)
        
        
        # Assigning a Call to a Name (line 510):
        
        # Assigning a Call to a Name (line 510):
        
        # Call to OpenKey(...): (line 510)
        # Processing the call arguments (line 510)
        # Getting the type of 'chnd' (line 510)
        chnd_31397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 40), 'chnd', False)
        # Getting the type of 'proc' (line 510)
        proc_31398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 46), 'proc', False)
        # Processing the call keyword arguments (line 510)
        kwargs_31399 = {}
        # Getting the type of 'winreg' (line 510)
        winreg_31395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 25), 'winreg', False)
        # Obtaining the member 'OpenKey' of a type (line 510)
        OpenKey_31396 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 510, 25), winreg_31395, 'OpenKey')
        # Calling OpenKey(args, kwargs) (line 510)
        OpenKey_call_result_31400 = invoke(stypy.reporting.localization.Localization(__file__, 510, 25), OpenKey_31396, *[chnd_31397, proc_31398], **kwargs_31399)
        
        # Assigning a type to the variable 'phnd' (line 510)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 510, 20), 'phnd', OpenKey_call_result_31400)
        
        # Assigning a Num to a Name (line 511):
        
        # Assigning a Num to a Name (line 511):
        int_31401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 511, 25), 'int')
        # Assigning a type to the variable 'pidx' (line 511)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 511, 20), 'pidx', int_31401)
        
        # Getting the type of 'True' (line 512)
        True_31402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 26), 'True')
        # Testing the type of an if condition (line 512)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 512, 20), True_31402)
        # SSA begins for while statement (line 512)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
        
        
        # SSA begins for try-except statement (line 513)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Tuple (line 514):
        
        # Assigning a Call to a Name:
        
        # Call to EnumValue(...): (line 514)
        # Processing the call arguments (line 514)
        # Getting the type of 'phnd' (line 514)
        phnd_31405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 63), 'phnd', False)
        # Getting the type of 'pidx' (line 514)
        pidx_31406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 69), 'pidx', False)
        # Processing the call keyword arguments (line 514)
        kwargs_31407 = {}
        # Getting the type of 'winreg' (line 514)
        winreg_31403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 46), 'winreg', False)
        # Obtaining the member 'EnumValue' of a type (line 514)
        EnumValue_31404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 514, 46), winreg_31403, 'EnumValue')
        # Calling EnumValue(args, kwargs) (line 514)
        EnumValue_call_result_31408 = invoke(stypy.reporting.localization.Localization(__file__, 514, 46), EnumValue_31404, *[phnd_31405, pidx_31406], **kwargs_31407)
        
        # Assigning a type to the variable 'call_assignment_29451' (line 514)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 514, 28), 'call_assignment_29451', EnumValue_call_result_31408)
        
        # Assigning a Call to a Name (line 514):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_31411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 514, 28), 'int')
        # Processing the call keyword arguments
        kwargs_31412 = {}
        # Getting the type of 'call_assignment_29451' (line 514)
        call_assignment_29451_31409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 28), 'call_assignment_29451', False)
        # Obtaining the member '__getitem__' of a type (line 514)
        getitem___31410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 514, 28), call_assignment_29451_31409, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_31413 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___31410, *[int_31411], **kwargs_31412)
        
        # Assigning a type to the variable 'call_assignment_29452' (line 514)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 514, 28), 'call_assignment_29452', getitem___call_result_31413)
        
        # Assigning a Name to a Name (line 514):
        # Getting the type of 'call_assignment_29452' (line 514)
        call_assignment_29452_31414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 28), 'call_assignment_29452')
        # Assigning a type to the variable 'name' (line 514)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 514, 28), 'name', call_assignment_29452_31414)
        
        # Assigning a Call to a Name (line 514):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_31417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 514, 28), 'int')
        # Processing the call keyword arguments
        kwargs_31418 = {}
        # Getting the type of 'call_assignment_29451' (line 514)
        call_assignment_29451_31415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 28), 'call_assignment_29451', False)
        # Obtaining the member '__getitem__' of a type (line 514)
        getitem___31416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 514, 28), call_assignment_29451_31415, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_31419 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___31416, *[int_31417], **kwargs_31418)
        
        # Assigning a type to the variable 'call_assignment_29453' (line 514)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 514, 28), 'call_assignment_29453', getitem___call_result_31419)
        
        # Assigning a Name to a Name (line 514):
        # Getting the type of 'call_assignment_29453' (line 514)
        call_assignment_29453_31420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 28), 'call_assignment_29453')
        # Assigning a type to the variable 'value' (line 514)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 514, 34), 'value', call_assignment_29453_31420)
        
        # Assigning a Call to a Name (line 514):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_31423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 514, 28), 'int')
        # Processing the call keyword arguments
        kwargs_31424 = {}
        # Getting the type of 'call_assignment_29451' (line 514)
        call_assignment_29451_31421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 28), 'call_assignment_29451', False)
        # Obtaining the member '__getitem__' of a type (line 514)
        getitem___31422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 514, 28), call_assignment_29451_31421, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_31425 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___31422, *[int_31423], **kwargs_31424)
        
        # Assigning a type to the variable 'call_assignment_29454' (line 514)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 514, 28), 'call_assignment_29454', getitem___call_result_31425)
        
        # Assigning a Name to a Name (line 514):
        # Getting the type of 'call_assignment_29454' (line 514)
        call_assignment_29454_31426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 28), 'call_assignment_29454')
        # Assigning a type to the variable 'vtpe' (line 514)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 514, 41), 'vtpe', call_assignment_29454_31426)
        # SSA branch for the except part of a try statement (line 513)
        # SSA branch for the except 'Attribute' branch of a try statement (line 513)
        module_type_store.open_ssa_branch('except')
        # SSA branch for the else branch of a try statement (line 513)
        module_type_store.open_ssa_branch('except else')
        
        # Assigning a BinOp to a Name (line 518):
        
        # Assigning a BinOp to a Name (line 518):
        # Getting the type of 'pidx' (line 518)
        pidx_31427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 33), 'pidx')
        int_31428 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 518, 38), 'int')
        # Applying the binary operator '+' (line 518)
        result_add_31429 = python_operator(stypy.reporting.localization.Localization(__file__, 518, 33), '+', pidx_31427, int_31428)
        
        # Assigning a type to the variable 'pidx' (line 518)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 518, 28), 'pidx', result_add_31429)
        
        # Assigning a Name to a Subscript (line 519):
        
        # Assigning a Name to a Subscript (line 519):
        # Getting the type of 'value' (line 519)
        value_31430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 43), 'value')
        
        # Obtaining the type of the subscript
        int_31431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 519, 33), 'int')
        # Getting the type of 'info' (line 519)
        info_31432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 28), 'info')
        # Obtaining the member '__getitem__' of a type (line 519)
        getitem___31433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 519, 28), info_31432, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 519)
        subscript_call_result_31434 = invoke(stypy.reporting.localization.Localization(__file__, 519, 28), getitem___31433, int_31431)
        
        # Getting the type of 'name' (line 519)
        name_31435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 37), 'name')
        # Storing an element on a container (line 519)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 519, 28), subscript_call_result_31434, (name_31435, value_31430))
        
        
        # Getting the type of 'name' (line 520)
        name_31436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 31), 'name')
        str_31437 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 520, 37), 'str', 'Identifier')
        # Applying the binary operator '==' (line 520)
        result_eq_31438 = python_operator(stypy.reporting.localization.Localization(__file__, 520, 31), '==', name_31436, str_31437)
        
        # Testing the type of an if condition (line 520)
        if_condition_31439 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 520, 28), result_eq_31438)
        # Assigning a type to the variable 'if_condition_31439' (line 520)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 520, 28), 'if_condition_31439', if_condition_31439)
        # SSA begins for if statement (line 520)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 521):
        
        # Assigning a Call to a Name (line 521):
        
        # Call to search(...): (line 521)
        # Processing the call arguments (line 521)
        # Getting the type of 'value' (line 521)
        value_31442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 49), 'value', False)
        # Processing the call keyword arguments (line 521)
        kwargs_31443 = {}
        # Getting the type of 'prgx' (line 521)
        prgx_31440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 37), 'prgx', False)
        # Obtaining the member 'search' of a type (line 521)
        search_31441 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 521, 37), prgx_31440, 'search')
        # Calling search(args, kwargs) (line 521)
        search_call_result_31444 = invoke(stypy.reporting.localization.Localization(__file__, 521, 37), search_31441, *[value_31442], **kwargs_31443)
        
        # Assigning a type to the variable 'srch' (line 521)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 521, 32), 'srch', search_call_result_31444)
        
        # Getting the type of 'srch' (line 522)
        srch_31445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 35), 'srch')
        # Testing the type of an if condition (line 522)
        if_condition_31446 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 522, 32), srch_31445)
        # Assigning a type to the variable 'if_condition_31446' (line 522)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 522, 32), 'if_condition_31446', if_condition_31446)
        # SSA begins for if statement (line 522)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Subscript (line 523):
        
        # Assigning a Call to a Subscript (line 523):
        
        # Call to int(...): (line 523)
        # Processing the call arguments (line 523)
        
        # Call to group(...): (line 523)
        # Processing the call arguments (line 523)
        str_31450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 523, 70), 'str', 'FML')
        # Processing the call keyword arguments (line 523)
        kwargs_31451 = {}
        # Getting the type of 'srch' (line 523)
        srch_31448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 59), 'srch', False)
        # Obtaining the member 'group' of a type (line 523)
        group_31449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 523, 59), srch_31448, 'group')
        # Calling group(args, kwargs) (line 523)
        group_call_result_31452 = invoke(stypy.reporting.localization.Localization(__file__, 523, 59), group_31449, *[str_31450], **kwargs_31451)
        
        # Processing the call keyword arguments (line 523)
        kwargs_31453 = {}
        # Getting the type of 'int' (line 523)
        int_31447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 55), 'int', False)
        # Calling int(args, kwargs) (line 523)
        int_call_result_31454 = invoke(stypy.reporting.localization.Localization(__file__, 523, 55), int_31447, *[group_call_result_31452], **kwargs_31453)
        
        
        # Obtaining the type of the subscript
        int_31455 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 523, 41), 'int')
        # Getting the type of 'info' (line 523)
        info_31456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 36), 'info')
        # Obtaining the member '__getitem__' of a type (line 523)
        getitem___31457 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 523, 36), info_31456, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 523)
        subscript_call_result_31458 = invoke(stypy.reporting.localization.Localization(__file__, 523, 36), getitem___31457, int_31455)
        
        str_31459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 523, 45), 'str', 'Family')
        # Storing an element on a container (line 523)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 523, 36), subscript_call_result_31458, (str_31459, int_call_result_31454))
        
        # Assigning a Call to a Subscript (line 524):
        
        # Assigning a Call to a Subscript (line 524):
        
        # Call to int(...): (line 524)
        # Processing the call arguments (line 524)
        
        # Call to group(...): (line 524)
        # Processing the call arguments (line 524)
        str_31463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 524, 69), 'str', 'MDL')
        # Processing the call keyword arguments (line 524)
        kwargs_31464 = {}
        # Getting the type of 'srch' (line 524)
        srch_31461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 58), 'srch', False)
        # Obtaining the member 'group' of a type (line 524)
        group_31462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 524, 58), srch_31461, 'group')
        # Calling group(args, kwargs) (line 524)
        group_call_result_31465 = invoke(stypy.reporting.localization.Localization(__file__, 524, 58), group_31462, *[str_31463], **kwargs_31464)
        
        # Processing the call keyword arguments (line 524)
        kwargs_31466 = {}
        # Getting the type of 'int' (line 524)
        int_31460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 54), 'int', False)
        # Calling int(args, kwargs) (line 524)
        int_call_result_31467 = invoke(stypy.reporting.localization.Localization(__file__, 524, 54), int_31460, *[group_call_result_31465], **kwargs_31466)
        
        
        # Obtaining the type of the subscript
        int_31468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 524, 41), 'int')
        # Getting the type of 'info' (line 524)
        info_31469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 36), 'info')
        # Obtaining the member '__getitem__' of a type (line 524)
        getitem___31470 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 524, 36), info_31469, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 524)
        subscript_call_result_31471 = invoke(stypy.reporting.localization.Localization(__file__, 524, 36), getitem___31470, int_31468)
        
        str_31472 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 524, 45), 'str', 'Model')
        # Storing an element on a container (line 524)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 524, 36), subscript_call_result_31471, (str_31472, int_call_result_31467))
        
        # Assigning a Call to a Subscript (line 525):
        
        # Assigning a Call to a Subscript (line 525):
        
        # Call to int(...): (line 525)
        # Processing the call arguments (line 525)
        
        # Call to group(...): (line 525)
        # Processing the call arguments (line 525)
        str_31476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 525, 72), 'str', 'STP')
        # Processing the call keyword arguments (line 525)
        kwargs_31477 = {}
        # Getting the type of 'srch' (line 525)
        srch_31474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 61), 'srch', False)
        # Obtaining the member 'group' of a type (line 525)
        group_31475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 525, 61), srch_31474, 'group')
        # Calling group(args, kwargs) (line 525)
        group_call_result_31478 = invoke(stypy.reporting.localization.Localization(__file__, 525, 61), group_31475, *[str_31476], **kwargs_31477)
        
        # Processing the call keyword arguments (line 525)
        kwargs_31479 = {}
        # Getting the type of 'int' (line 525)
        int_31473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 57), 'int', False)
        # Calling int(args, kwargs) (line 525)
        int_call_result_31480 = invoke(stypy.reporting.localization.Localization(__file__, 525, 57), int_31473, *[group_call_result_31478], **kwargs_31479)
        
        
        # Obtaining the type of the subscript
        int_31481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 525, 41), 'int')
        # Getting the type of 'info' (line 525)
        info_31482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 36), 'info')
        # Obtaining the member '__getitem__' of a type (line 525)
        getitem___31483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 525, 36), info_31482, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 525)
        subscript_call_result_31484 = invoke(stypy.reporting.localization.Localization(__file__, 525, 36), getitem___31483, int_31481)
        
        str_31485 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 525, 45), 'str', 'Stepping')
        # Storing an element on a container (line 525)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 525, 36), subscript_call_result_31484, (str_31485, int_call_result_31480))
        # SSA join for if statement (line 522)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 520)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for try-except statement (line 513)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for while statement (line 512)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for try-except statement (line 503)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for while statement (line 502)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the except part of a try statement (line 491)
        # SSA branch for the except '<any exception>' branch of a try statement (line 491)
        module_type_store.open_ssa_branch('except')
        
        # Call to print(...): (line 527)
        # Processing the call arguments (line 527)
        
        # Obtaining the type of the subscript
        int_31487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 527, 33), 'int')
        
        # Call to exc_info(...): (line 527)
        # Processing the call keyword arguments (line 527)
        kwargs_31490 = {}
        # Getting the type of 'sys' (line 527)
        sys_31488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 18), 'sys', False)
        # Obtaining the member 'exc_info' of a type (line 527)
        exc_info_31489 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 527, 18), sys_31488, 'exc_info')
        # Calling exc_info(args, kwargs) (line 527)
        exc_info_call_result_31491 = invoke(stypy.reporting.localization.Localization(__file__, 527, 18), exc_info_31489, *[], **kwargs_31490)
        
        # Obtaining the member '__getitem__' of a type (line 527)
        getitem___31492 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 527, 18), exc_info_call_result_31491, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 527)
        subscript_call_result_31493 = invoke(stypy.reporting.localization.Localization(__file__, 527, 18), getitem___31492, int_31487)
        
        str_31494 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 527, 37), 'str', '(ignoring)')
        # Processing the call keyword arguments (line 527)
        kwargs_31495 = {}
        # Getting the type of 'print' (line 527)
        print_31486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 12), 'print', False)
        # Calling print(args, kwargs) (line 527)
        print_call_result_31496 = invoke(stypy.reporting.localization.Localization(__file__, 527, 12), print_31486, *[subscript_call_result_31493, str_31494], **kwargs_31495)
        
        # SSA join for try-except statement (line 491)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 528):
        
        # Assigning a Name to a Attribute (line 528):
        # Getting the type of 'info' (line 528)
        info_31497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 30), 'info')
        # Getting the type of 'self' (line 528)
        self_31498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 8), 'self')
        # Obtaining the member '__class__' of a type (line 528)
        class___31499 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 528, 8), self_31498, '__class__')
        # Setting the type of the member 'info' of a type (line 528)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 528, 8), class___31499, 'info', info_31497)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _not_impl(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_not_impl'
        module_type_store = module_type_store.open_function_context('_not_impl', 530, 4, False)
        # Assigning a type to the variable 'self' (line 531)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 531, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Win32CPUInfo._not_impl.__dict__.__setitem__('stypy_localization', localization)
        Win32CPUInfo._not_impl.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Win32CPUInfo._not_impl.__dict__.__setitem__('stypy_type_store', module_type_store)
        Win32CPUInfo._not_impl.__dict__.__setitem__('stypy_function_name', 'Win32CPUInfo._not_impl')
        Win32CPUInfo._not_impl.__dict__.__setitem__('stypy_param_names_list', [])
        Win32CPUInfo._not_impl.__dict__.__setitem__('stypy_varargs_param_name', None)
        Win32CPUInfo._not_impl.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Win32CPUInfo._not_impl.__dict__.__setitem__('stypy_call_defaults', defaults)
        Win32CPUInfo._not_impl.__dict__.__setitem__('stypy_call_varargs', varargs)
        Win32CPUInfo._not_impl.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Win32CPUInfo._not_impl.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Win32CPUInfo._not_impl', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_not_impl', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_not_impl(...)' code ##################

        pass
        
        # ################# End of '_not_impl(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_not_impl' in the type store
        # Getting the type of 'stypy_return_type' (line 530)
        stypy_return_type_31500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31500)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_not_impl'
        return stypy_return_type_31500


    @norecursion
    def _is_AMD(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_AMD'
        module_type_store = module_type_store.open_function_context('_is_AMD', 534, 4, False)
        # Assigning a type to the variable 'self' (line 535)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 535, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Win32CPUInfo._is_AMD.__dict__.__setitem__('stypy_localization', localization)
        Win32CPUInfo._is_AMD.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Win32CPUInfo._is_AMD.__dict__.__setitem__('stypy_type_store', module_type_store)
        Win32CPUInfo._is_AMD.__dict__.__setitem__('stypy_function_name', 'Win32CPUInfo._is_AMD')
        Win32CPUInfo._is_AMD.__dict__.__setitem__('stypy_param_names_list', [])
        Win32CPUInfo._is_AMD.__dict__.__setitem__('stypy_varargs_param_name', None)
        Win32CPUInfo._is_AMD.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Win32CPUInfo._is_AMD.__dict__.__setitem__('stypy_call_defaults', defaults)
        Win32CPUInfo._is_AMD.__dict__.__setitem__('stypy_call_varargs', varargs)
        Win32CPUInfo._is_AMD.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Win32CPUInfo._is_AMD.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Win32CPUInfo._is_AMD', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_AMD', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_AMD(...)' code ##################

        
        
        # Obtaining the type of the subscript
        str_31501 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 535, 28), 'str', 'VendorIdentifier')
        
        # Obtaining the type of the subscript
        int_31502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 535, 25), 'int')
        # Getting the type of 'self' (line 535)
        self_31503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 15), 'self')
        # Obtaining the member 'info' of a type (line 535)
        info_31504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 535, 15), self_31503, 'info')
        # Obtaining the member '__getitem__' of a type (line 535)
        getitem___31505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 535, 15), info_31504, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 535)
        subscript_call_result_31506 = invoke(stypy.reporting.localization.Localization(__file__, 535, 15), getitem___31505, int_31502)
        
        # Obtaining the member '__getitem__' of a type (line 535)
        getitem___31507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 535, 15), subscript_call_result_31506, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 535)
        subscript_call_result_31508 = invoke(stypy.reporting.localization.Localization(__file__, 535, 15), getitem___31507, str_31501)
        
        str_31509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 535, 49), 'str', 'AuthenticAMD')
        # Applying the binary operator '==' (line 535)
        result_eq_31510 = python_operator(stypy.reporting.localization.Localization(__file__, 535, 15), '==', subscript_call_result_31508, str_31509)
        
        # Assigning a type to the variable 'stypy_return_type' (line 535)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 535, 8), 'stypy_return_type', result_eq_31510)
        
        # ################# End of '_is_AMD(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_AMD' in the type store
        # Getting the type of 'stypy_return_type' (line 534)
        stypy_return_type_31511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31511)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_AMD'
        return stypy_return_type_31511


    @norecursion
    def _is_Am486(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_Am486'
        module_type_store = module_type_store.open_function_context('_is_Am486', 537, 4, False)
        # Assigning a type to the variable 'self' (line 538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 538, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Win32CPUInfo._is_Am486.__dict__.__setitem__('stypy_localization', localization)
        Win32CPUInfo._is_Am486.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Win32CPUInfo._is_Am486.__dict__.__setitem__('stypy_type_store', module_type_store)
        Win32CPUInfo._is_Am486.__dict__.__setitem__('stypy_function_name', 'Win32CPUInfo._is_Am486')
        Win32CPUInfo._is_Am486.__dict__.__setitem__('stypy_param_names_list', [])
        Win32CPUInfo._is_Am486.__dict__.__setitem__('stypy_varargs_param_name', None)
        Win32CPUInfo._is_Am486.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Win32CPUInfo._is_Am486.__dict__.__setitem__('stypy_call_defaults', defaults)
        Win32CPUInfo._is_Am486.__dict__.__setitem__('stypy_call_varargs', varargs)
        Win32CPUInfo._is_Am486.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Win32CPUInfo._is_Am486.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Win32CPUInfo._is_Am486', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_Am486', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_Am486(...)' code ##################

        
        # Evaluating a boolean operation
        
        # Call to is_AMD(...): (line 538)
        # Processing the call keyword arguments (line 538)
        kwargs_31514 = {}
        # Getting the type of 'self' (line 538)
        self_31512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 15), 'self', False)
        # Obtaining the member 'is_AMD' of a type (line 538)
        is_AMD_31513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 538, 15), self_31512, 'is_AMD')
        # Calling is_AMD(args, kwargs) (line 538)
        is_AMD_call_result_31515 = invoke(stypy.reporting.localization.Localization(__file__, 538, 15), is_AMD_31513, *[], **kwargs_31514)
        
        
        
        # Obtaining the type of the subscript
        str_31516 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 538, 46), 'str', 'Family')
        
        # Obtaining the type of the subscript
        int_31517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 538, 43), 'int')
        # Getting the type of 'self' (line 538)
        self_31518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 33), 'self')
        # Obtaining the member 'info' of a type (line 538)
        info_31519 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 538, 33), self_31518, 'info')
        # Obtaining the member '__getitem__' of a type (line 538)
        getitem___31520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 538, 33), info_31519, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 538)
        subscript_call_result_31521 = invoke(stypy.reporting.localization.Localization(__file__, 538, 33), getitem___31520, int_31517)
        
        # Obtaining the member '__getitem__' of a type (line 538)
        getitem___31522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 538, 33), subscript_call_result_31521, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 538)
        subscript_call_result_31523 = invoke(stypy.reporting.localization.Localization(__file__, 538, 33), getitem___31522, str_31516)
        
        int_31524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 538, 57), 'int')
        # Applying the binary operator '==' (line 538)
        result_eq_31525 = python_operator(stypy.reporting.localization.Localization(__file__, 538, 33), '==', subscript_call_result_31523, int_31524)
        
        # Applying the binary operator 'and' (line 538)
        result_and_keyword_31526 = python_operator(stypy.reporting.localization.Localization(__file__, 538, 15), 'and', is_AMD_call_result_31515, result_eq_31525)
        
        # Assigning a type to the variable 'stypy_return_type' (line 538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 538, 8), 'stypy_return_type', result_and_keyword_31526)
        
        # ################# End of '_is_Am486(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_Am486' in the type store
        # Getting the type of 'stypy_return_type' (line 537)
        stypy_return_type_31527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31527)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_Am486'
        return stypy_return_type_31527


    @norecursion
    def _is_Am5x86(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_Am5x86'
        module_type_store = module_type_store.open_function_context('_is_Am5x86', 540, 4, False)
        # Assigning a type to the variable 'self' (line 541)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 541, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Win32CPUInfo._is_Am5x86.__dict__.__setitem__('stypy_localization', localization)
        Win32CPUInfo._is_Am5x86.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Win32CPUInfo._is_Am5x86.__dict__.__setitem__('stypy_type_store', module_type_store)
        Win32CPUInfo._is_Am5x86.__dict__.__setitem__('stypy_function_name', 'Win32CPUInfo._is_Am5x86')
        Win32CPUInfo._is_Am5x86.__dict__.__setitem__('stypy_param_names_list', [])
        Win32CPUInfo._is_Am5x86.__dict__.__setitem__('stypy_varargs_param_name', None)
        Win32CPUInfo._is_Am5x86.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Win32CPUInfo._is_Am5x86.__dict__.__setitem__('stypy_call_defaults', defaults)
        Win32CPUInfo._is_Am5x86.__dict__.__setitem__('stypy_call_varargs', varargs)
        Win32CPUInfo._is_Am5x86.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Win32CPUInfo._is_Am5x86.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Win32CPUInfo._is_Am5x86', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_Am5x86', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_Am5x86(...)' code ##################

        
        # Evaluating a boolean operation
        
        # Call to is_AMD(...): (line 541)
        # Processing the call keyword arguments (line 541)
        kwargs_31530 = {}
        # Getting the type of 'self' (line 541)
        self_31528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 15), 'self', False)
        # Obtaining the member 'is_AMD' of a type (line 541)
        is_AMD_31529 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 541, 15), self_31528, 'is_AMD')
        # Calling is_AMD(args, kwargs) (line 541)
        is_AMD_call_result_31531 = invoke(stypy.reporting.localization.Localization(__file__, 541, 15), is_AMD_31529, *[], **kwargs_31530)
        
        
        
        # Obtaining the type of the subscript
        str_31532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 541, 46), 'str', 'Family')
        
        # Obtaining the type of the subscript
        int_31533 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 541, 43), 'int')
        # Getting the type of 'self' (line 541)
        self_31534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 33), 'self')
        # Obtaining the member 'info' of a type (line 541)
        info_31535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 541, 33), self_31534, 'info')
        # Obtaining the member '__getitem__' of a type (line 541)
        getitem___31536 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 541, 33), info_31535, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 541)
        subscript_call_result_31537 = invoke(stypy.reporting.localization.Localization(__file__, 541, 33), getitem___31536, int_31533)
        
        # Obtaining the member '__getitem__' of a type (line 541)
        getitem___31538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 541, 33), subscript_call_result_31537, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 541)
        subscript_call_result_31539 = invoke(stypy.reporting.localization.Localization(__file__, 541, 33), getitem___31538, str_31532)
        
        int_31540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 541, 57), 'int')
        # Applying the binary operator '==' (line 541)
        result_eq_31541 = python_operator(stypy.reporting.localization.Localization(__file__, 541, 33), '==', subscript_call_result_31539, int_31540)
        
        # Applying the binary operator 'and' (line 541)
        result_and_keyword_31542 = python_operator(stypy.reporting.localization.Localization(__file__, 541, 15), 'and', is_AMD_call_result_31531, result_eq_31541)
        
        # Assigning a type to the variable 'stypy_return_type' (line 541)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 541, 8), 'stypy_return_type', result_and_keyword_31542)
        
        # ################# End of '_is_Am5x86(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_Am5x86' in the type store
        # Getting the type of 'stypy_return_type' (line 540)
        stypy_return_type_31543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31543)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_Am5x86'
        return stypy_return_type_31543


    @norecursion
    def _is_AMDK5(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_AMDK5'
        module_type_store = module_type_store.open_function_context('_is_AMDK5', 543, 4, False)
        # Assigning a type to the variable 'self' (line 544)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 544, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Win32CPUInfo._is_AMDK5.__dict__.__setitem__('stypy_localization', localization)
        Win32CPUInfo._is_AMDK5.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Win32CPUInfo._is_AMDK5.__dict__.__setitem__('stypy_type_store', module_type_store)
        Win32CPUInfo._is_AMDK5.__dict__.__setitem__('stypy_function_name', 'Win32CPUInfo._is_AMDK5')
        Win32CPUInfo._is_AMDK5.__dict__.__setitem__('stypy_param_names_list', [])
        Win32CPUInfo._is_AMDK5.__dict__.__setitem__('stypy_varargs_param_name', None)
        Win32CPUInfo._is_AMDK5.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Win32CPUInfo._is_AMDK5.__dict__.__setitem__('stypy_call_defaults', defaults)
        Win32CPUInfo._is_AMDK5.__dict__.__setitem__('stypy_call_varargs', varargs)
        Win32CPUInfo._is_AMDK5.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Win32CPUInfo._is_AMDK5.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Win32CPUInfo._is_AMDK5', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_AMDK5', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_AMDK5(...)' code ##################

        
        # Evaluating a boolean operation
        
        # Call to is_AMD(...): (line 544)
        # Processing the call keyword arguments (line 544)
        kwargs_31546 = {}
        # Getting the type of 'self' (line 544)
        self_31544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 15), 'self', False)
        # Obtaining the member 'is_AMD' of a type (line 544)
        is_AMD_31545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 544, 15), self_31544, 'is_AMD')
        # Calling is_AMD(args, kwargs) (line 544)
        is_AMD_call_result_31547 = invoke(stypy.reporting.localization.Localization(__file__, 544, 15), is_AMD_31545, *[], **kwargs_31546)
        
        
        
        # Obtaining the type of the subscript
        str_31548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 544, 46), 'str', 'Family')
        
        # Obtaining the type of the subscript
        int_31549 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 544, 43), 'int')
        # Getting the type of 'self' (line 544)
        self_31550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 33), 'self')
        # Obtaining the member 'info' of a type (line 544)
        info_31551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 544, 33), self_31550, 'info')
        # Obtaining the member '__getitem__' of a type (line 544)
        getitem___31552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 544, 33), info_31551, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 544)
        subscript_call_result_31553 = invoke(stypy.reporting.localization.Localization(__file__, 544, 33), getitem___31552, int_31549)
        
        # Obtaining the member '__getitem__' of a type (line 544)
        getitem___31554 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 544, 33), subscript_call_result_31553, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 544)
        subscript_call_result_31555 = invoke(stypy.reporting.localization.Localization(__file__, 544, 33), getitem___31554, str_31548)
        
        int_31556 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 544, 57), 'int')
        # Applying the binary operator '==' (line 544)
        result_eq_31557 = python_operator(stypy.reporting.localization.Localization(__file__, 544, 33), '==', subscript_call_result_31555, int_31556)
        
        # Applying the binary operator 'and' (line 544)
        result_and_keyword_31558 = python_operator(stypy.reporting.localization.Localization(__file__, 544, 15), 'and', is_AMD_call_result_31547, result_eq_31557)
        
        
        # Obtaining the type of the subscript
        str_31559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 545, 32), 'str', 'Model')
        
        # Obtaining the type of the subscript
        int_31560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 545, 29), 'int')
        # Getting the type of 'self' (line 545)
        self_31561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 545, 19), 'self')
        # Obtaining the member 'info' of a type (line 545)
        info_31562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 545, 19), self_31561, 'info')
        # Obtaining the member '__getitem__' of a type (line 545)
        getitem___31563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 545, 19), info_31562, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 545)
        subscript_call_result_31564 = invoke(stypy.reporting.localization.Localization(__file__, 545, 19), getitem___31563, int_31560)
        
        # Obtaining the member '__getitem__' of a type (line 545)
        getitem___31565 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 545, 19), subscript_call_result_31564, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 545)
        subscript_call_result_31566 = invoke(stypy.reporting.localization.Localization(__file__, 545, 19), getitem___31565, str_31559)
        
        
        # Obtaining an instance of the builtin type 'list' (line 545)
        list_31567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 545, 44), 'list')
        # Adding type elements to the builtin type 'list' instance (line 545)
        # Adding element type (line 545)
        int_31568 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 545, 45), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 545, 44), list_31567, int_31568)
        # Adding element type (line 545)
        int_31569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 545, 48), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 545, 44), list_31567, int_31569)
        # Adding element type (line 545)
        int_31570 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 545, 51), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 545, 44), list_31567, int_31570)
        # Adding element type (line 545)
        int_31571 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 545, 54), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 545, 44), list_31567, int_31571)
        
        # Applying the binary operator 'in' (line 545)
        result_contains_31572 = python_operator(stypy.reporting.localization.Localization(__file__, 545, 19), 'in', subscript_call_result_31566, list_31567)
        
        # Applying the binary operator 'and' (line 544)
        result_and_keyword_31573 = python_operator(stypy.reporting.localization.Localization(__file__, 544, 15), 'and', result_and_keyword_31558, result_contains_31572)
        
        # Assigning a type to the variable 'stypy_return_type' (line 544)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 544, 8), 'stypy_return_type', result_and_keyword_31573)
        
        # ################# End of '_is_AMDK5(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_AMDK5' in the type store
        # Getting the type of 'stypy_return_type' (line 543)
        stypy_return_type_31574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31574)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_AMDK5'
        return stypy_return_type_31574


    @norecursion
    def _is_AMDK6(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_AMDK6'
        module_type_store = module_type_store.open_function_context('_is_AMDK6', 547, 4, False)
        # Assigning a type to the variable 'self' (line 548)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 548, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Win32CPUInfo._is_AMDK6.__dict__.__setitem__('stypy_localization', localization)
        Win32CPUInfo._is_AMDK6.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Win32CPUInfo._is_AMDK6.__dict__.__setitem__('stypy_type_store', module_type_store)
        Win32CPUInfo._is_AMDK6.__dict__.__setitem__('stypy_function_name', 'Win32CPUInfo._is_AMDK6')
        Win32CPUInfo._is_AMDK6.__dict__.__setitem__('stypy_param_names_list', [])
        Win32CPUInfo._is_AMDK6.__dict__.__setitem__('stypy_varargs_param_name', None)
        Win32CPUInfo._is_AMDK6.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Win32CPUInfo._is_AMDK6.__dict__.__setitem__('stypy_call_defaults', defaults)
        Win32CPUInfo._is_AMDK6.__dict__.__setitem__('stypy_call_varargs', varargs)
        Win32CPUInfo._is_AMDK6.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Win32CPUInfo._is_AMDK6.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Win32CPUInfo._is_AMDK6', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_AMDK6', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_AMDK6(...)' code ##################

        
        # Evaluating a boolean operation
        
        # Call to is_AMD(...): (line 548)
        # Processing the call keyword arguments (line 548)
        kwargs_31577 = {}
        # Getting the type of 'self' (line 548)
        self_31575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 15), 'self', False)
        # Obtaining the member 'is_AMD' of a type (line 548)
        is_AMD_31576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 548, 15), self_31575, 'is_AMD')
        # Calling is_AMD(args, kwargs) (line 548)
        is_AMD_call_result_31578 = invoke(stypy.reporting.localization.Localization(__file__, 548, 15), is_AMD_31576, *[], **kwargs_31577)
        
        
        
        # Obtaining the type of the subscript
        str_31579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 548, 46), 'str', 'Family')
        
        # Obtaining the type of the subscript
        int_31580 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 548, 43), 'int')
        # Getting the type of 'self' (line 548)
        self_31581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 33), 'self')
        # Obtaining the member 'info' of a type (line 548)
        info_31582 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 548, 33), self_31581, 'info')
        # Obtaining the member '__getitem__' of a type (line 548)
        getitem___31583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 548, 33), info_31582, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 548)
        subscript_call_result_31584 = invoke(stypy.reporting.localization.Localization(__file__, 548, 33), getitem___31583, int_31580)
        
        # Obtaining the member '__getitem__' of a type (line 548)
        getitem___31585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 548, 33), subscript_call_result_31584, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 548)
        subscript_call_result_31586 = invoke(stypy.reporting.localization.Localization(__file__, 548, 33), getitem___31585, str_31579)
        
        int_31587 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 548, 57), 'int')
        # Applying the binary operator '==' (line 548)
        result_eq_31588 = python_operator(stypy.reporting.localization.Localization(__file__, 548, 33), '==', subscript_call_result_31586, int_31587)
        
        # Applying the binary operator 'and' (line 548)
        result_and_keyword_31589 = python_operator(stypy.reporting.localization.Localization(__file__, 548, 15), 'and', is_AMD_call_result_31578, result_eq_31588)
        
        
        # Obtaining the type of the subscript
        str_31590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 549, 32), 'str', 'Model')
        
        # Obtaining the type of the subscript
        int_31591 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 549, 29), 'int')
        # Getting the type of 'self' (line 549)
        self_31592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 19), 'self')
        # Obtaining the member 'info' of a type (line 549)
        info_31593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 549, 19), self_31592, 'info')
        # Obtaining the member '__getitem__' of a type (line 549)
        getitem___31594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 549, 19), info_31593, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 549)
        subscript_call_result_31595 = invoke(stypy.reporting.localization.Localization(__file__, 549, 19), getitem___31594, int_31591)
        
        # Obtaining the member '__getitem__' of a type (line 549)
        getitem___31596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 549, 19), subscript_call_result_31595, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 549)
        subscript_call_result_31597 = invoke(stypy.reporting.localization.Localization(__file__, 549, 19), getitem___31596, str_31590)
        
        
        # Obtaining an instance of the builtin type 'list' (line 549)
        list_31598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 549, 44), 'list')
        # Adding type elements to the builtin type 'list' instance (line 549)
        # Adding element type (line 549)
        int_31599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 549, 45), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 549, 44), list_31598, int_31599)
        # Adding element type (line 549)
        int_31600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 549, 48), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 549, 44), list_31598, int_31600)
        
        # Applying the binary operator 'in' (line 549)
        result_contains_31601 = python_operator(stypy.reporting.localization.Localization(__file__, 549, 19), 'in', subscript_call_result_31597, list_31598)
        
        # Applying the binary operator 'and' (line 548)
        result_and_keyword_31602 = python_operator(stypy.reporting.localization.Localization(__file__, 548, 15), 'and', result_and_keyword_31589, result_contains_31601)
        
        # Assigning a type to the variable 'stypy_return_type' (line 548)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 548, 8), 'stypy_return_type', result_and_keyword_31602)
        
        # ################# End of '_is_AMDK6(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_AMDK6' in the type store
        # Getting the type of 'stypy_return_type' (line 547)
        stypy_return_type_31603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31603)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_AMDK6'
        return stypy_return_type_31603


    @norecursion
    def _is_AMDK6_2(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_AMDK6_2'
        module_type_store = module_type_store.open_function_context('_is_AMDK6_2', 551, 4, False)
        # Assigning a type to the variable 'self' (line 552)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 552, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Win32CPUInfo._is_AMDK6_2.__dict__.__setitem__('stypy_localization', localization)
        Win32CPUInfo._is_AMDK6_2.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Win32CPUInfo._is_AMDK6_2.__dict__.__setitem__('stypy_type_store', module_type_store)
        Win32CPUInfo._is_AMDK6_2.__dict__.__setitem__('stypy_function_name', 'Win32CPUInfo._is_AMDK6_2')
        Win32CPUInfo._is_AMDK6_2.__dict__.__setitem__('stypy_param_names_list', [])
        Win32CPUInfo._is_AMDK6_2.__dict__.__setitem__('stypy_varargs_param_name', None)
        Win32CPUInfo._is_AMDK6_2.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Win32CPUInfo._is_AMDK6_2.__dict__.__setitem__('stypy_call_defaults', defaults)
        Win32CPUInfo._is_AMDK6_2.__dict__.__setitem__('stypy_call_varargs', varargs)
        Win32CPUInfo._is_AMDK6_2.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Win32CPUInfo._is_AMDK6_2.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Win32CPUInfo._is_AMDK6_2', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_AMDK6_2', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_AMDK6_2(...)' code ##################

        
        # Evaluating a boolean operation
        
        # Call to is_AMD(...): (line 552)
        # Processing the call keyword arguments (line 552)
        kwargs_31606 = {}
        # Getting the type of 'self' (line 552)
        self_31604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 15), 'self', False)
        # Obtaining the member 'is_AMD' of a type (line 552)
        is_AMD_31605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 552, 15), self_31604, 'is_AMD')
        # Calling is_AMD(args, kwargs) (line 552)
        is_AMD_call_result_31607 = invoke(stypy.reporting.localization.Localization(__file__, 552, 15), is_AMD_31605, *[], **kwargs_31606)
        
        
        
        # Obtaining the type of the subscript
        str_31608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 552, 46), 'str', 'Family')
        
        # Obtaining the type of the subscript
        int_31609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 552, 43), 'int')
        # Getting the type of 'self' (line 552)
        self_31610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 33), 'self')
        # Obtaining the member 'info' of a type (line 552)
        info_31611 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 552, 33), self_31610, 'info')
        # Obtaining the member '__getitem__' of a type (line 552)
        getitem___31612 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 552, 33), info_31611, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 552)
        subscript_call_result_31613 = invoke(stypy.reporting.localization.Localization(__file__, 552, 33), getitem___31612, int_31609)
        
        # Obtaining the member '__getitem__' of a type (line 552)
        getitem___31614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 552, 33), subscript_call_result_31613, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 552)
        subscript_call_result_31615 = invoke(stypy.reporting.localization.Localization(__file__, 552, 33), getitem___31614, str_31608)
        
        int_31616 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 552, 57), 'int')
        # Applying the binary operator '==' (line 552)
        result_eq_31617 = python_operator(stypy.reporting.localization.Localization(__file__, 552, 33), '==', subscript_call_result_31615, int_31616)
        
        # Applying the binary operator 'and' (line 552)
        result_and_keyword_31618 = python_operator(stypy.reporting.localization.Localization(__file__, 552, 15), 'and', is_AMD_call_result_31607, result_eq_31617)
        
        
        # Obtaining the type of the subscript
        str_31619 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 553, 32), 'str', 'Model')
        
        # Obtaining the type of the subscript
        int_31620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 553, 29), 'int')
        # Getting the type of 'self' (line 553)
        self_31621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 19), 'self')
        # Obtaining the member 'info' of a type (line 553)
        info_31622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 553, 19), self_31621, 'info')
        # Obtaining the member '__getitem__' of a type (line 553)
        getitem___31623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 553, 19), info_31622, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 553)
        subscript_call_result_31624 = invoke(stypy.reporting.localization.Localization(__file__, 553, 19), getitem___31623, int_31620)
        
        # Obtaining the member '__getitem__' of a type (line 553)
        getitem___31625 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 553, 19), subscript_call_result_31624, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 553)
        subscript_call_result_31626 = invoke(stypy.reporting.localization.Localization(__file__, 553, 19), getitem___31625, str_31619)
        
        int_31627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 553, 42), 'int')
        # Applying the binary operator '==' (line 553)
        result_eq_31628 = python_operator(stypy.reporting.localization.Localization(__file__, 553, 19), '==', subscript_call_result_31626, int_31627)
        
        # Applying the binary operator 'and' (line 552)
        result_and_keyword_31629 = python_operator(stypy.reporting.localization.Localization(__file__, 552, 15), 'and', result_and_keyword_31618, result_eq_31628)
        
        # Assigning a type to the variable 'stypy_return_type' (line 552)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 552, 8), 'stypy_return_type', result_and_keyword_31629)
        
        # ################# End of '_is_AMDK6_2(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_AMDK6_2' in the type store
        # Getting the type of 'stypy_return_type' (line 551)
        stypy_return_type_31630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31630)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_AMDK6_2'
        return stypy_return_type_31630


    @norecursion
    def _is_AMDK6_3(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_AMDK6_3'
        module_type_store = module_type_store.open_function_context('_is_AMDK6_3', 555, 4, False)
        # Assigning a type to the variable 'self' (line 556)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 556, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Win32CPUInfo._is_AMDK6_3.__dict__.__setitem__('stypy_localization', localization)
        Win32CPUInfo._is_AMDK6_3.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Win32CPUInfo._is_AMDK6_3.__dict__.__setitem__('stypy_type_store', module_type_store)
        Win32CPUInfo._is_AMDK6_3.__dict__.__setitem__('stypy_function_name', 'Win32CPUInfo._is_AMDK6_3')
        Win32CPUInfo._is_AMDK6_3.__dict__.__setitem__('stypy_param_names_list', [])
        Win32CPUInfo._is_AMDK6_3.__dict__.__setitem__('stypy_varargs_param_name', None)
        Win32CPUInfo._is_AMDK6_3.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Win32CPUInfo._is_AMDK6_3.__dict__.__setitem__('stypy_call_defaults', defaults)
        Win32CPUInfo._is_AMDK6_3.__dict__.__setitem__('stypy_call_varargs', varargs)
        Win32CPUInfo._is_AMDK6_3.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Win32CPUInfo._is_AMDK6_3.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Win32CPUInfo._is_AMDK6_3', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_AMDK6_3', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_AMDK6_3(...)' code ##################

        
        # Evaluating a boolean operation
        
        # Call to is_AMD(...): (line 556)
        # Processing the call keyword arguments (line 556)
        kwargs_31633 = {}
        # Getting the type of 'self' (line 556)
        self_31631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 15), 'self', False)
        # Obtaining the member 'is_AMD' of a type (line 556)
        is_AMD_31632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 556, 15), self_31631, 'is_AMD')
        # Calling is_AMD(args, kwargs) (line 556)
        is_AMD_call_result_31634 = invoke(stypy.reporting.localization.Localization(__file__, 556, 15), is_AMD_31632, *[], **kwargs_31633)
        
        
        
        # Obtaining the type of the subscript
        str_31635 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 556, 46), 'str', 'Family')
        
        # Obtaining the type of the subscript
        int_31636 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 556, 43), 'int')
        # Getting the type of 'self' (line 556)
        self_31637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 33), 'self')
        # Obtaining the member 'info' of a type (line 556)
        info_31638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 556, 33), self_31637, 'info')
        # Obtaining the member '__getitem__' of a type (line 556)
        getitem___31639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 556, 33), info_31638, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 556)
        subscript_call_result_31640 = invoke(stypy.reporting.localization.Localization(__file__, 556, 33), getitem___31639, int_31636)
        
        # Obtaining the member '__getitem__' of a type (line 556)
        getitem___31641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 556, 33), subscript_call_result_31640, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 556)
        subscript_call_result_31642 = invoke(stypy.reporting.localization.Localization(__file__, 556, 33), getitem___31641, str_31635)
        
        int_31643 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 556, 57), 'int')
        # Applying the binary operator '==' (line 556)
        result_eq_31644 = python_operator(stypy.reporting.localization.Localization(__file__, 556, 33), '==', subscript_call_result_31642, int_31643)
        
        # Applying the binary operator 'and' (line 556)
        result_and_keyword_31645 = python_operator(stypy.reporting.localization.Localization(__file__, 556, 15), 'and', is_AMD_call_result_31634, result_eq_31644)
        
        
        # Obtaining the type of the subscript
        str_31646 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 557, 32), 'str', 'Model')
        
        # Obtaining the type of the subscript
        int_31647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 557, 29), 'int')
        # Getting the type of 'self' (line 557)
        self_31648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 19), 'self')
        # Obtaining the member 'info' of a type (line 557)
        info_31649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 557, 19), self_31648, 'info')
        # Obtaining the member '__getitem__' of a type (line 557)
        getitem___31650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 557, 19), info_31649, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 557)
        subscript_call_result_31651 = invoke(stypy.reporting.localization.Localization(__file__, 557, 19), getitem___31650, int_31647)
        
        # Obtaining the member '__getitem__' of a type (line 557)
        getitem___31652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 557, 19), subscript_call_result_31651, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 557)
        subscript_call_result_31653 = invoke(stypy.reporting.localization.Localization(__file__, 557, 19), getitem___31652, str_31646)
        
        int_31654 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 557, 42), 'int')
        # Applying the binary operator '==' (line 557)
        result_eq_31655 = python_operator(stypy.reporting.localization.Localization(__file__, 557, 19), '==', subscript_call_result_31653, int_31654)
        
        # Applying the binary operator 'and' (line 556)
        result_and_keyword_31656 = python_operator(stypy.reporting.localization.Localization(__file__, 556, 15), 'and', result_and_keyword_31645, result_eq_31655)
        
        # Assigning a type to the variable 'stypy_return_type' (line 556)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 556, 8), 'stypy_return_type', result_and_keyword_31656)
        
        # ################# End of '_is_AMDK6_3(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_AMDK6_3' in the type store
        # Getting the type of 'stypy_return_type' (line 555)
        stypy_return_type_31657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31657)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_AMDK6_3'
        return stypy_return_type_31657


    @norecursion
    def _is_AMDK7(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_AMDK7'
        module_type_store = module_type_store.open_function_context('_is_AMDK7', 559, 4, False)
        # Assigning a type to the variable 'self' (line 560)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 560, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Win32CPUInfo._is_AMDK7.__dict__.__setitem__('stypy_localization', localization)
        Win32CPUInfo._is_AMDK7.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Win32CPUInfo._is_AMDK7.__dict__.__setitem__('stypy_type_store', module_type_store)
        Win32CPUInfo._is_AMDK7.__dict__.__setitem__('stypy_function_name', 'Win32CPUInfo._is_AMDK7')
        Win32CPUInfo._is_AMDK7.__dict__.__setitem__('stypy_param_names_list', [])
        Win32CPUInfo._is_AMDK7.__dict__.__setitem__('stypy_varargs_param_name', None)
        Win32CPUInfo._is_AMDK7.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Win32CPUInfo._is_AMDK7.__dict__.__setitem__('stypy_call_defaults', defaults)
        Win32CPUInfo._is_AMDK7.__dict__.__setitem__('stypy_call_varargs', varargs)
        Win32CPUInfo._is_AMDK7.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Win32CPUInfo._is_AMDK7.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Win32CPUInfo._is_AMDK7', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_AMDK7', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_AMDK7(...)' code ##################

        
        # Evaluating a boolean operation
        
        # Call to is_AMD(...): (line 560)
        # Processing the call keyword arguments (line 560)
        kwargs_31660 = {}
        # Getting the type of 'self' (line 560)
        self_31658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 15), 'self', False)
        # Obtaining the member 'is_AMD' of a type (line 560)
        is_AMD_31659 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 560, 15), self_31658, 'is_AMD')
        # Calling is_AMD(args, kwargs) (line 560)
        is_AMD_call_result_31661 = invoke(stypy.reporting.localization.Localization(__file__, 560, 15), is_AMD_31659, *[], **kwargs_31660)
        
        
        
        # Obtaining the type of the subscript
        str_31662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 560, 46), 'str', 'Family')
        
        # Obtaining the type of the subscript
        int_31663 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 560, 43), 'int')
        # Getting the type of 'self' (line 560)
        self_31664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 33), 'self')
        # Obtaining the member 'info' of a type (line 560)
        info_31665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 560, 33), self_31664, 'info')
        # Obtaining the member '__getitem__' of a type (line 560)
        getitem___31666 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 560, 33), info_31665, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 560)
        subscript_call_result_31667 = invoke(stypy.reporting.localization.Localization(__file__, 560, 33), getitem___31666, int_31663)
        
        # Obtaining the member '__getitem__' of a type (line 560)
        getitem___31668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 560, 33), subscript_call_result_31667, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 560)
        subscript_call_result_31669 = invoke(stypy.reporting.localization.Localization(__file__, 560, 33), getitem___31668, str_31662)
        
        int_31670 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 560, 59), 'int')
        # Applying the binary operator '==' (line 560)
        result_eq_31671 = python_operator(stypy.reporting.localization.Localization(__file__, 560, 33), '==', subscript_call_result_31669, int_31670)
        
        # Applying the binary operator 'and' (line 560)
        result_and_keyword_31672 = python_operator(stypy.reporting.localization.Localization(__file__, 560, 15), 'and', is_AMD_call_result_31661, result_eq_31671)
        
        # Assigning a type to the variable 'stypy_return_type' (line 560)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 560, 8), 'stypy_return_type', result_and_keyword_31672)
        
        # ################# End of '_is_AMDK7(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_AMDK7' in the type store
        # Getting the type of 'stypy_return_type' (line 559)
        stypy_return_type_31673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31673)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_AMDK7'
        return stypy_return_type_31673


    @norecursion
    def _is_AMD64(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_AMD64'
        module_type_store = module_type_store.open_function_context('_is_AMD64', 566, 4, False)
        # Assigning a type to the variable 'self' (line 567)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 567, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Win32CPUInfo._is_AMD64.__dict__.__setitem__('stypy_localization', localization)
        Win32CPUInfo._is_AMD64.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Win32CPUInfo._is_AMD64.__dict__.__setitem__('stypy_type_store', module_type_store)
        Win32CPUInfo._is_AMD64.__dict__.__setitem__('stypy_function_name', 'Win32CPUInfo._is_AMD64')
        Win32CPUInfo._is_AMD64.__dict__.__setitem__('stypy_param_names_list', [])
        Win32CPUInfo._is_AMD64.__dict__.__setitem__('stypy_varargs_param_name', None)
        Win32CPUInfo._is_AMD64.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Win32CPUInfo._is_AMD64.__dict__.__setitem__('stypy_call_defaults', defaults)
        Win32CPUInfo._is_AMD64.__dict__.__setitem__('stypy_call_varargs', varargs)
        Win32CPUInfo._is_AMD64.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Win32CPUInfo._is_AMD64.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Win32CPUInfo._is_AMD64', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_AMD64', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_AMD64(...)' code ##################

        
        # Evaluating a boolean operation
        
        # Call to is_AMD(...): (line 567)
        # Processing the call keyword arguments (line 567)
        kwargs_31676 = {}
        # Getting the type of 'self' (line 567)
        self_31674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 15), 'self', False)
        # Obtaining the member 'is_AMD' of a type (line 567)
        is_AMD_31675 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 567, 15), self_31674, 'is_AMD')
        # Calling is_AMD(args, kwargs) (line 567)
        is_AMD_call_result_31677 = invoke(stypy.reporting.localization.Localization(__file__, 567, 15), is_AMD_31675, *[], **kwargs_31676)
        
        
        
        # Obtaining the type of the subscript
        str_31678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 567, 46), 'str', 'Family')
        
        # Obtaining the type of the subscript
        int_31679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 567, 43), 'int')
        # Getting the type of 'self' (line 567)
        self_31680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 33), 'self')
        # Obtaining the member 'info' of a type (line 567)
        info_31681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 567, 33), self_31680, 'info')
        # Obtaining the member '__getitem__' of a type (line 567)
        getitem___31682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 567, 33), info_31681, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 567)
        subscript_call_result_31683 = invoke(stypy.reporting.localization.Localization(__file__, 567, 33), getitem___31682, int_31679)
        
        # Obtaining the member '__getitem__' of a type (line 567)
        getitem___31684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 567, 33), subscript_call_result_31683, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 567)
        subscript_call_result_31685 = invoke(stypy.reporting.localization.Localization(__file__, 567, 33), getitem___31684, str_31678)
        
        int_31686 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 567, 59), 'int')
        # Applying the binary operator '==' (line 567)
        result_eq_31687 = python_operator(stypy.reporting.localization.Localization(__file__, 567, 33), '==', subscript_call_result_31685, int_31686)
        
        # Applying the binary operator 'and' (line 567)
        result_and_keyword_31688 = python_operator(stypy.reporting.localization.Localization(__file__, 567, 15), 'and', is_AMD_call_result_31677, result_eq_31687)
        
        # Assigning a type to the variable 'stypy_return_type' (line 567)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 567, 8), 'stypy_return_type', result_and_keyword_31688)
        
        # ################# End of '_is_AMD64(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_AMD64' in the type store
        # Getting the type of 'stypy_return_type' (line 566)
        stypy_return_type_31689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31689)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_AMD64'
        return stypy_return_type_31689


    @norecursion
    def _is_Intel(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_Intel'
        module_type_store = module_type_store.open_function_context('_is_Intel', 571, 4, False)
        # Assigning a type to the variable 'self' (line 572)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 572, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Win32CPUInfo._is_Intel.__dict__.__setitem__('stypy_localization', localization)
        Win32CPUInfo._is_Intel.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Win32CPUInfo._is_Intel.__dict__.__setitem__('stypy_type_store', module_type_store)
        Win32CPUInfo._is_Intel.__dict__.__setitem__('stypy_function_name', 'Win32CPUInfo._is_Intel')
        Win32CPUInfo._is_Intel.__dict__.__setitem__('stypy_param_names_list', [])
        Win32CPUInfo._is_Intel.__dict__.__setitem__('stypy_varargs_param_name', None)
        Win32CPUInfo._is_Intel.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Win32CPUInfo._is_Intel.__dict__.__setitem__('stypy_call_defaults', defaults)
        Win32CPUInfo._is_Intel.__dict__.__setitem__('stypy_call_varargs', varargs)
        Win32CPUInfo._is_Intel.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Win32CPUInfo._is_Intel.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Win32CPUInfo._is_Intel', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_Intel', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_Intel(...)' code ##################

        
        
        # Obtaining the type of the subscript
        str_31690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 572, 28), 'str', 'VendorIdentifier')
        
        # Obtaining the type of the subscript
        int_31691 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 572, 25), 'int')
        # Getting the type of 'self' (line 572)
        self_31692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 15), 'self')
        # Obtaining the member 'info' of a type (line 572)
        info_31693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 572, 15), self_31692, 'info')
        # Obtaining the member '__getitem__' of a type (line 572)
        getitem___31694 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 572, 15), info_31693, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 572)
        subscript_call_result_31695 = invoke(stypy.reporting.localization.Localization(__file__, 572, 15), getitem___31694, int_31691)
        
        # Obtaining the member '__getitem__' of a type (line 572)
        getitem___31696 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 572, 15), subscript_call_result_31695, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 572)
        subscript_call_result_31697 = invoke(stypy.reporting.localization.Localization(__file__, 572, 15), getitem___31696, str_31690)
        
        str_31698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 572, 49), 'str', 'GenuineIntel')
        # Applying the binary operator '==' (line 572)
        result_eq_31699 = python_operator(stypy.reporting.localization.Localization(__file__, 572, 15), '==', subscript_call_result_31697, str_31698)
        
        # Assigning a type to the variable 'stypy_return_type' (line 572)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 572, 8), 'stypy_return_type', result_eq_31699)
        
        # ################# End of '_is_Intel(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_Intel' in the type store
        # Getting the type of 'stypy_return_type' (line 571)
        stypy_return_type_31700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31700)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_Intel'
        return stypy_return_type_31700


    @norecursion
    def _is_i386(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_i386'
        module_type_store = module_type_store.open_function_context('_is_i386', 574, 4, False)
        # Assigning a type to the variable 'self' (line 575)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 575, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Win32CPUInfo._is_i386.__dict__.__setitem__('stypy_localization', localization)
        Win32CPUInfo._is_i386.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Win32CPUInfo._is_i386.__dict__.__setitem__('stypy_type_store', module_type_store)
        Win32CPUInfo._is_i386.__dict__.__setitem__('stypy_function_name', 'Win32CPUInfo._is_i386')
        Win32CPUInfo._is_i386.__dict__.__setitem__('stypy_param_names_list', [])
        Win32CPUInfo._is_i386.__dict__.__setitem__('stypy_varargs_param_name', None)
        Win32CPUInfo._is_i386.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Win32CPUInfo._is_i386.__dict__.__setitem__('stypy_call_defaults', defaults)
        Win32CPUInfo._is_i386.__dict__.__setitem__('stypy_call_varargs', varargs)
        Win32CPUInfo._is_i386.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Win32CPUInfo._is_i386.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Win32CPUInfo._is_i386', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_i386', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_i386(...)' code ##################

        
        
        # Obtaining the type of the subscript
        str_31701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 575, 28), 'str', 'Family')
        
        # Obtaining the type of the subscript
        int_31702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 575, 25), 'int')
        # Getting the type of 'self' (line 575)
        self_31703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 15), 'self')
        # Obtaining the member 'info' of a type (line 575)
        info_31704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 575, 15), self_31703, 'info')
        # Obtaining the member '__getitem__' of a type (line 575)
        getitem___31705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 575, 15), info_31704, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 575)
        subscript_call_result_31706 = invoke(stypy.reporting.localization.Localization(__file__, 575, 15), getitem___31705, int_31702)
        
        # Obtaining the member '__getitem__' of a type (line 575)
        getitem___31707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 575, 15), subscript_call_result_31706, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 575)
        subscript_call_result_31708 = invoke(stypy.reporting.localization.Localization(__file__, 575, 15), getitem___31707, str_31701)
        
        int_31709 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 575, 39), 'int')
        # Applying the binary operator '==' (line 575)
        result_eq_31710 = python_operator(stypy.reporting.localization.Localization(__file__, 575, 15), '==', subscript_call_result_31708, int_31709)
        
        # Assigning a type to the variable 'stypy_return_type' (line 575)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 575, 8), 'stypy_return_type', result_eq_31710)
        
        # ################# End of '_is_i386(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_i386' in the type store
        # Getting the type of 'stypy_return_type' (line 574)
        stypy_return_type_31711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31711)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_i386'
        return stypy_return_type_31711


    @norecursion
    def _is_i486(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_i486'
        module_type_store = module_type_store.open_function_context('_is_i486', 577, 4, False)
        # Assigning a type to the variable 'self' (line 578)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 578, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Win32CPUInfo._is_i486.__dict__.__setitem__('stypy_localization', localization)
        Win32CPUInfo._is_i486.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Win32CPUInfo._is_i486.__dict__.__setitem__('stypy_type_store', module_type_store)
        Win32CPUInfo._is_i486.__dict__.__setitem__('stypy_function_name', 'Win32CPUInfo._is_i486')
        Win32CPUInfo._is_i486.__dict__.__setitem__('stypy_param_names_list', [])
        Win32CPUInfo._is_i486.__dict__.__setitem__('stypy_varargs_param_name', None)
        Win32CPUInfo._is_i486.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Win32CPUInfo._is_i486.__dict__.__setitem__('stypy_call_defaults', defaults)
        Win32CPUInfo._is_i486.__dict__.__setitem__('stypy_call_varargs', varargs)
        Win32CPUInfo._is_i486.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Win32CPUInfo._is_i486.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Win32CPUInfo._is_i486', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_i486', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_i486(...)' code ##################

        
        
        # Obtaining the type of the subscript
        str_31712 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 578, 28), 'str', 'Family')
        
        # Obtaining the type of the subscript
        int_31713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 578, 25), 'int')
        # Getting the type of 'self' (line 578)
        self_31714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 15), 'self')
        # Obtaining the member 'info' of a type (line 578)
        info_31715 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 578, 15), self_31714, 'info')
        # Obtaining the member '__getitem__' of a type (line 578)
        getitem___31716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 578, 15), info_31715, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 578)
        subscript_call_result_31717 = invoke(stypy.reporting.localization.Localization(__file__, 578, 15), getitem___31716, int_31713)
        
        # Obtaining the member '__getitem__' of a type (line 578)
        getitem___31718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 578, 15), subscript_call_result_31717, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 578)
        subscript_call_result_31719 = invoke(stypy.reporting.localization.Localization(__file__, 578, 15), getitem___31718, str_31712)
        
        int_31720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 578, 39), 'int')
        # Applying the binary operator '==' (line 578)
        result_eq_31721 = python_operator(stypy.reporting.localization.Localization(__file__, 578, 15), '==', subscript_call_result_31719, int_31720)
        
        # Assigning a type to the variable 'stypy_return_type' (line 578)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 578, 8), 'stypy_return_type', result_eq_31721)
        
        # ################# End of '_is_i486(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_i486' in the type store
        # Getting the type of 'stypy_return_type' (line 577)
        stypy_return_type_31722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31722)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_i486'
        return stypy_return_type_31722


    @norecursion
    def _is_i586(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_i586'
        module_type_store = module_type_store.open_function_context('_is_i586', 580, 4, False)
        # Assigning a type to the variable 'self' (line 581)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 581, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Win32CPUInfo._is_i586.__dict__.__setitem__('stypy_localization', localization)
        Win32CPUInfo._is_i586.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Win32CPUInfo._is_i586.__dict__.__setitem__('stypy_type_store', module_type_store)
        Win32CPUInfo._is_i586.__dict__.__setitem__('stypy_function_name', 'Win32CPUInfo._is_i586')
        Win32CPUInfo._is_i586.__dict__.__setitem__('stypy_param_names_list', [])
        Win32CPUInfo._is_i586.__dict__.__setitem__('stypy_varargs_param_name', None)
        Win32CPUInfo._is_i586.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Win32CPUInfo._is_i586.__dict__.__setitem__('stypy_call_defaults', defaults)
        Win32CPUInfo._is_i586.__dict__.__setitem__('stypy_call_varargs', varargs)
        Win32CPUInfo._is_i586.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Win32CPUInfo._is_i586.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Win32CPUInfo._is_i586', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_i586', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_i586(...)' code ##################

        
        # Evaluating a boolean operation
        
        # Call to is_Intel(...): (line 581)
        # Processing the call keyword arguments (line 581)
        kwargs_31725 = {}
        # Getting the type of 'self' (line 581)
        self_31723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 15), 'self', False)
        # Obtaining the member 'is_Intel' of a type (line 581)
        is_Intel_31724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 581, 15), self_31723, 'is_Intel')
        # Calling is_Intel(args, kwargs) (line 581)
        is_Intel_call_result_31726 = invoke(stypy.reporting.localization.Localization(__file__, 581, 15), is_Intel_31724, *[], **kwargs_31725)
        
        
        
        # Obtaining the type of the subscript
        str_31727 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 581, 48), 'str', 'Family')
        
        # Obtaining the type of the subscript
        int_31728 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 581, 45), 'int')
        # Getting the type of 'self' (line 581)
        self_31729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 35), 'self')
        # Obtaining the member 'info' of a type (line 581)
        info_31730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 581, 35), self_31729, 'info')
        # Obtaining the member '__getitem__' of a type (line 581)
        getitem___31731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 581, 35), info_31730, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 581)
        subscript_call_result_31732 = invoke(stypy.reporting.localization.Localization(__file__, 581, 35), getitem___31731, int_31728)
        
        # Obtaining the member '__getitem__' of a type (line 581)
        getitem___31733 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 581, 35), subscript_call_result_31732, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 581)
        subscript_call_result_31734 = invoke(stypy.reporting.localization.Localization(__file__, 581, 35), getitem___31733, str_31727)
        
        int_31735 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 581, 59), 'int')
        # Applying the binary operator '==' (line 581)
        result_eq_31736 = python_operator(stypy.reporting.localization.Localization(__file__, 581, 35), '==', subscript_call_result_31734, int_31735)
        
        # Applying the binary operator 'and' (line 581)
        result_and_keyword_31737 = python_operator(stypy.reporting.localization.Localization(__file__, 581, 15), 'and', is_Intel_call_result_31726, result_eq_31736)
        
        # Assigning a type to the variable 'stypy_return_type' (line 581)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 581, 8), 'stypy_return_type', result_and_keyword_31737)
        
        # ################# End of '_is_i586(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_i586' in the type store
        # Getting the type of 'stypy_return_type' (line 580)
        stypy_return_type_31738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31738)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_i586'
        return stypy_return_type_31738


    @norecursion
    def _is_i686(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_i686'
        module_type_store = module_type_store.open_function_context('_is_i686', 583, 4, False)
        # Assigning a type to the variable 'self' (line 584)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 584, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Win32CPUInfo._is_i686.__dict__.__setitem__('stypy_localization', localization)
        Win32CPUInfo._is_i686.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Win32CPUInfo._is_i686.__dict__.__setitem__('stypy_type_store', module_type_store)
        Win32CPUInfo._is_i686.__dict__.__setitem__('stypy_function_name', 'Win32CPUInfo._is_i686')
        Win32CPUInfo._is_i686.__dict__.__setitem__('stypy_param_names_list', [])
        Win32CPUInfo._is_i686.__dict__.__setitem__('stypy_varargs_param_name', None)
        Win32CPUInfo._is_i686.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Win32CPUInfo._is_i686.__dict__.__setitem__('stypy_call_defaults', defaults)
        Win32CPUInfo._is_i686.__dict__.__setitem__('stypy_call_varargs', varargs)
        Win32CPUInfo._is_i686.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Win32CPUInfo._is_i686.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Win32CPUInfo._is_i686', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_i686', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_i686(...)' code ##################

        
        # Evaluating a boolean operation
        
        # Call to is_Intel(...): (line 584)
        # Processing the call keyword arguments (line 584)
        kwargs_31741 = {}
        # Getting the type of 'self' (line 584)
        self_31739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 15), 'self', False)
        # Obtaining the member 'is_Intel' of a type (line 584)
        is_Intel_31740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 584, 15), self_31739, 'is_Intel')
        # Calling is_Intel(args, kwargs) (line 584)
        is_Intel_call_result_31742 = invoke(stypy.reporting.localization.Localization(__file__, 584, 15), is_Intel_31740, *[], **kwargs_31741)
        
        
        
        # Obtaining the type of the subscript
        str_31743 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 584, 48), 'str', 'Family')
        
        # Obtaining the type of the subscript
        int_31744 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 584, 45), 'int')
        # Getting the type of 'self' (line 584)
        self_31745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 35), 'self')
        # Obtaining the member 'info' of a type (line 584)
        info_31746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 584, 35), self_31745, 'info')
        # Obtaining the member '__getitem__' of a type (line 584)
        getitem___31747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 584, 35), info_31746, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 584)
        subscript_call_result_31748 = invoke(stypy.reporting.localization.Localization(__file__, 584, 35), getitem___31747, int_31744)
        
        # Obtaining the member '__getitem__' of a type (line 584)
        getitem___31749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 584, 35), subscript_call_result_31748, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 584)
        subscript_call_result_31750 = invoke(stypy.reporting.localization.Localization(__file__, 584, 35), getitem___31749, str_31743)
        
        int_31751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 584, 59), 'int')
        # Applying the binary operator '==' (line 584)
        result_eq_31752 = python_operator(stypy.reporting.localization.Localization(__file__, 584, 35), '==', subscript_call_result_31750, int_31751)
        
        # Applying the binary operator 'and' (line 584)
        result_and_keyword_31753 = python_operator(stypy.reporting.localization.Localization(__file__, 584, 15), 'and', is_Intel_call_result_31742, result_eq_31752)
        
        # Assigning a type to the variable 'stypy_return_type' (line 584)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 584, 8), 'stypy_return_type', result_and_keyword_31753)
        
        # ################# End of '_is_i686(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_i686' in the type store
        # Getting the type of 'stypy_return_type' (line 583)
        stypy_return_type_31754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 583, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31754)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_i686'
        return stypy_return_type_31754


    @norecursion
    def _is_Pentium(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_Pentium'
        module_type_store = module_type_store.open_function_context('_is_Pentium', 586, 4, False)
        # Assigning a type to the variable 'self' (line 587)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 587, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Win32CPUInfo._is_Pentium.__dict__.__setitem__('stypy_localization', localization)
        Win32CPUInfo._is_Pentium.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Win32CPUInfo._is_Pentium.__dict__.__setitem__('stypy_type_store', module_type_store)
        Win32CPUInfo._is_Pentium.__dict__.__setitem__('stypy_function_name', 'Win32CPUInfo._is_Pentium')
        Win32CPUInfo._is_Pentium.__dict__.__setitem__('stypy_param_names_list', [])
        Win32CPUInfo._is_Pentium.__dict__.__setitem__('stypy_varargs_param_name', None)
        Win32CPUInfo._is_Pentium.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Win32CPUInfo._is_Pentium.__dict__.__setitem__('stypy_call_defaults', defaults)
        Win32CPUInfo._is_Pentium.__dict__.__setitem__('stypy_call_varargs', varargs)
        Win32CPUInfo._is_Pentium.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Win32CPUInfo._is_Pentium.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Win32CPUInfo._is_Pentium', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_Pentium', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_Pentium(...)' code ##################

        
        # Evaluating a boolean operation
        
        # Call to is_Intel(...): (line 587)
        # Processing the call keyword arguments (line 587)
        kwargs_31757 = {}
        # Getting the type of 'self' (line 587)
        self_31755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 15), 'self', False)
        # Obtaining the member 'is_Intel' of a type (line 587)
        is_Intel_31756 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 587, 15), self_31755, 'is_Intel')
        # Calling is_Intel(args, kwargs) (line 587)
        is_Intel_call_result_31758 = invoke(stypy.reporting.localization.Localization(__file__, 587, 15), is_Intel_31756, *[], **kwargs_31757)
        
        
        
        # Obtaining the type of the subscript
        str_31759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 587, 48), 'str', 'Family')
        
        # Obtaining the type of the subscript
        int_31760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 587, 45), 'int')
        # Getting the type of 'self' (line 587)
        self_31761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 35), 'self')
        # Obtaining the member 'info' of a type (line 587)
        info_31762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 587, 35), self_31761, 'info')
        # Obtaining the member '__getitem__' of a type (line 587)
        getitem___31763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 587, 35), info_31762, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 587)
        subscript_call_result_31764 = invoke(stypy.reporting.localization.Localization(__file__, 587, 35), getitem___31763, int_31760)
        
        # Obtaining the member '__getitem__' of a type (line 587)
        getitem___31765 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 587, 35), subscript_call_result_31764, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 587)
        subscript_call_result_31766 = invoke(stypy.reporting.localization.Localization(__file__, 587, 35), getitem___31765, str_31759)
        
        int_31767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 587, 59), 'int')
        # Applying the binary operator '==' (line 587)
        result_eq_31768 = python_operator(stypy.reporting.localization.Localization(__file__, 587, 35), '==', subscript_call_result_31766, int_31767)
        
        # Applying the binary operator 'and' (line 587)
        result_and_keyword_31769 = python_operator(stypy.reporting.localization.Localization(__file__, 587, 15), 'and', is_Intel_call_result_31758, result_eq_31768)
        
        # Assigning a type to the variable 'stypy_return_type' (line 587)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 587, 8), 'stypy_return_type', result_and_keyword_31769)
        
        # ################# End of '_is_Pentium(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_Pentium' in the type store
        # Getting the type of 'stypy_return_type' (line 586)
        stypy_return_type_31770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31770)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_Pentium'
        return stypy_return_type_31770


    @norecursion
    def _is_PentiumMMX(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_PentiumMMX'
        module_type_store = module_type_store.open_function_context('_is_PentiumMMX', 589, 4, False)
        # Assigning a type to the variable 'self' (line 590)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 590, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Win32CPUInfo._is_PentiumMMX.__dict__.__setitem__('stypy_localization', localization)
        Win32CPUInfo._is_PentiumMMX.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Win32CPUInfo._is_PentiumMMX.__dict__.__setitem__('stypy_type_store', module_type_store)
        Win32CPUInfo._is_PentiumMMX.__dict__.__setitem__('stypy_function_name', 'Win32CPUInfo._is_PentiumMMX')
        Win32CPUInfo._is_PentiumMMX.__dict__.__setitem__('stypy_param_names_list', [])
        Win32CPUInfo._is_PentiumMMX.__dict__.__setitem__('stypy_varargs_param_name', None)
        Win32CPUInfo._is_PentiumMMX.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Win32CPUInfo._is_PentiumMMX.__dict__.__setitem__('stypy_call_defaults', defaults)
        Win32CPUInfo._is_PentiumMMX.__dict__.__setitem__('stypy_call_varargs', varargs)
        Win32CPUInfo._is_PentiumMMX.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Win32CPUInfo._is_PentiumMMX.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Win32CPUInfo._is_PentiumMMX', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_PentiumMMX', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_PentiumMMX(...)' code ##################

        
        # Evaluating a boolean operation
        
        # Call to is_Intel(...): (line 590)
        # Processing the call keyword arguments (line 590)
        kwargs_31773 = {}
        # Getting the type of 'self' (line 590)
        self_31771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 15), 'self', False)
        # Obtaining the member 'is_Intel' of a type (line 590)
        is_Intel_31772 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 590, 15), self_31771, 'is_Intel')
        # Calling is_Intel(args, kwargs) (line 590)
        is_Intel_call_result_31774 = invoke(stypy.reporting.localization.Localization(__file__, 590, 15), is_Intel_31772, *[], **kwargs_31773)
        
        
        
        # Obtaining the type of the subscript
        str_31775 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 590, 48), 'str', 'Family')
        
        # Obtaining the type of the subscript
        int_31776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 590, 45), 'int')
        # Getting the type of 'self' (line 590)
        self_31777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 35), 'self')
        # Obtaining the member 'info' of a type (line 590)
        info_31778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 590, 35), self_31777, 'info')
        # Obtaining the member '__getitem__' of a type (line 590)
        getitem___31779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 590, 35), info_31778, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 590)
        subscript_call_result_31780 = invoke(stypy.reporting.localization.Localization(__file__, 590, 35), getitem___31779, int_31776)
        
        # Obtaining the member '__getitem__' of a type (line 590)
        getitem___31781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 590, 35), subscript_call_result_31780, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 590)
        subscript_call_result_31782 = invoke(stypy.reporting.localization.Localization(__file__, 590, 35), getitem___31781, str_31775)
        
        int_31783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 590, 59), 'int')
        # Applying the binary operator '==' (line 590)
        result_eq_31784 = python_operator(stypy.reporting.localization.Localization(__file__, 590, 35), '==', subscript_call_result_31782, int_31783)
        
        # Applying the binary operator 'and' (line 590)
        result_and_keyword_31785 = python_operator(stypy.reporting.localization.Localization(__file__, 590, 15), 'and', is_Intel_call_result_31774, result_eq_31784)
        
        
        # Obtaining the type of the subscript
        str_31786 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 591, 32), 'str', 'Model')
        
        # Obtaining the type of the subscript
        int_31787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 591, 29), 'int')
        # Getting the type of 'self' (line 591)
        self_31788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 19), 'self')
        # Obtaining the member 'info' of a type (line 591)
        info_31789 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 591, 19), self_31788, 'info')
        # Obtaining the member '__getitem__' of a type (line 591)
        getitem___31790 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 591, 19), info_31789, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 591)
        subscript_call_result_31791 = invoke(stypy.reporting.localization.Localization(__file__, 591, 19), getitem___31790, int_31787)
        
        # Obtaining the member '__getitem__' of a type (line 591)
        getitem___31792 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 591, 19), subscript_call_result_31791, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 591)
        subscript_call_result_31793 = invoke(stypy.reporting.localization.Localization(__file__, 591, 19), getitem___31792, str_31786)
        
        int_31794 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 591, 42), 'int')
        # Applying the binary operator '==' (line 591)
        result_eq_31795 = python_operator(stypy.reporting.localization.Localization(__file__, 591, 19), '==', subscript_call_result_31793, int_31794)
        
        # Applying the binary operator 'and' (line 590)
        result_and_keyword_31796 = python_operator(stypy.reporting.localization.Localization(__file__, 590, 15), 'and', result_and_keyword_31785, result_eq_31795)
        
        # Assigning a type to the variable 'stypy_return_type' (line 590)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 590, 8), 'stypy_return_type', result_and_keyword_31796)
        
        # ################# End of '_is_PentiumMMX(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_PentiumMMX' in the type store
        # Getting the type of 'stypy_return_type' (line 589)
        stypy_return_type_31797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31797)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_PentiumMMX'
        return stypy_return_type_31797


    @norecursion
    def _is_PentiumPro(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_PentiumPro'
        module_type_store = module_type_store.open_function_context('_is_PentiumPro', 593, 4, False)
        # Assigning a type to the variable 'self' (line 594)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 594, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Win32CPUInfo._is_PentiumPro.__dict__.__setitem__('stypy_localization', localization)
        Win32CPUInfo._is_PentiumPro.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Win32CPUInfo._is_PentiumPro.__dict__.__setitem__('stypy_type_store', module_type_store)
        Win32CPUInfo._is_PentiumPro.__dict__.__setitem__('stypy_function_name', 'Win32CPUInfo._is_PentiumPro')
        Win32CPUInfo._is_PentiumPro.__dict__.__setitem__('stypy_param_names_list', [])
        Win32CPUInfo._is_PentiumPro.__dict__.__setitem__('stypy_varargs_param_name', None)
        Win32CPUInfo._is_PentiumPro.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Win32CPUInfo._is_PentiumPro.__dict__.__setitem__('stypy_call_defaults', defaults)
        Win32CPUInfo._is_PentiumPro.__dict__.__setitem__('stypy_call_varargs', varargs)
        Win32CPUInfo._is_PentiumPro.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Win32CPUInfo._is_PentiumPro.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Win32CPUInfo._is_PentiumPro', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_PentiumPro', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_PentiumPro(...)' code ##################

        
        # Evaluating a boolean operation
        
        # Call to is_Intel(...): (line 594)
        # Processing the call keyword arguments (line 594)
        kwargs_31800 = {}
        # Getting the type of 'self' (line 594)
        self_31798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 15), 'self', False)
        # Obtaining the member 'is_Intel' of a type (line 594)
        is_Intel_31799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 594, 15), self_31798, 'is_Intel')
        # Calling is_Intel(args, kwargs) (line 594)
        is_Intel_call_result_31801 = invoke(stypy.reporting.localization.Localization(__file__, 594, 15), is_Intel_31799, *[], **kwargs_31800)
        
        
        
        # Obtaining the type of the subscript
        str_31802 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 594, 48), 'str', 'Family')
        
        # Obtaining the type of the subscript
        int_31803 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 594, 45), 'int')
        # Getting the type of 'self' (line 594)
        self_31804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 35), 'self')
        # Obtaining the member 'info' of a type (line 594)
        info_31805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 594, 35), self_31804, 'info')
        # Obtaining the member '__getitem__' of a type (line 594)
        getitem___31806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 594, 35), info_31805, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 594)
        subscript_call_result_31807 = invoke(stypy.reporting.localization.Localization(__file__, 594, 35), getitem___31806, int_31803)
        
        # Obtaining the member '__getitem__' of a type (line 594)
        getitem___31808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 594, 35), subscript_call_result_31807, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 594)
        subscript_call_result_31809 = invoke(stypy.reporting.localization.Localization(__file__, 594, 35), getitem___31808, str_31802)
        
        int_31810 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 594, 59), 'int')
        # Applying the binary operator '==' (line 594)
        result_eq_31811 = python_operator(stypy.reporting.localization.Localization(__file__, 594, 35), '==', subscript_call_result_31809, int_31810)
        
        # Applying the binary operator 'and' (line 594)
        result_and_keyword_31812 = python_operator(stypy.reporting.localization.Localization(__file__, 594, 15), 'and', is_Intel_call_result_31801, result_eq_31811)
        
        
        # Obtaining the type of the subscript
        str_31813 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 595, 32), 'str', 'Model')
        
        # Obtaining the type of the subscript
        int_31814 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 595, 29), 'int')
        # Getting the type of 'self' (line 595)
        self_31815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 19), 'self')
        # Obtaining the member 'info' of a type (line 595)
        info_31816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 595, 19), self_31815, 'info')
        # Obtaining the member '__getitem__' of a type (line 595)
        getitem___31817 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 595, 19), info_31816, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 595)
        subscript_call_result_31818 = invoke(stypy.reporting.localization.Localization(__file__, 595, 19), getitem___31817, int_31814)
        
        # Obtaining the member '__getitem__' of a type (line 595)
        getitem___31819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 595, 19), subscript_call_result_31818, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 595)
        subscript_call_result_31820 = invoke(stypy.reporting.localization.Localization(__file__, 595, 19), getitem___31819, str_31813)
        
        int_31821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 595, 42), 'int')
        # Applying the binary operator '==' (line 595)
        result_eq_31822 = python_operator(stypy.reporting.localization.Localization(__file__, 595, 19), '==', subscript_call_result_31820, int_31821)
        
        # Applying the binary operator 'and' (line 594)
        result_and_keyword_31823 = python_operator(stypy.reporting.localization.Localization(__file__, 594, 15), 'and', result_and_keyword_31812, result_eq_31822)
        
        # Assigning a type to the variable 'stypy_return_type' (line 594)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 594, 8), 'stypy_return_type', result_and_keyword_31823)
        
        # ################# End of '_is_PentiumPro(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_PentiumPro' in the type store
        # Getting the type of 'stypy_return_type' (line 593)
        stypy_return_type_31824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31824)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_PentiumPro'
        return stypy_return_type_31824


    @norecursion
    def _is_PentiumII(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_PentiumII'
        module_type_store = module_type_store.open_function_context('_is_PentiumII', 597, 4, False)
        # Assigning a type to the variable 'self' (line 598)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 598, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Win32CPUInfo._is_PentiumII.__dict__.__setitem__('stypy_localization', localization)
        Win32CPUInfo._is_PentiumII.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Win32CPUInfo._is_PentiumII.__dict__.__setitem__('stypy_type_store', module_type_store)
        Win32CPUInfo._is_PentiumII.__dict__.__setitem__('stypy_function_name', 'Win32CPUInfo._is_PentiumII')
        Win32CPUInfo._is_PentiumII.__dict__.__setitem__('stypy_param_names_list', [])
        Win32CPUInfo._is_PentiumII.__dict__.__setitem__('stypy_varargs_param_name', None)
        Win32CPUInfo._is_PentiumII.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Win32CPUInfo._is_PentiumII.__dict__.__setitem__('stypy_call_defaults', defaults)
        Win32CPUInfo._is_PentiumII.__dict__.__setitem__('stypy_call_varargs', varargs)
        Win32CPUInfo._is_PentiumII.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Win32CPUInfo._is_PentiumII.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Win32CPUInfo._is_PentiumII', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_PentiumII', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_PentiumII(...)' code ##################

        
        # Evaluating a boolean operation
        
        # Call to is_Intel(...): (line 598)
        # Processing the call keyword arguments (line 598)
        kwargs_31827 = {}
        # Getting the type of 'self' (line 598)
        self_31825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 15), 'self', False)
        # Obtaining the member 'is_Intel' of a type (line 598)
        is_Intel_31826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 598, 15), self_31825, 'is_Intel')
        # Calling is_Intel(args, kwargs) (line 598)
        is_Intel_call_result_31828 = invoke(stypy.reporting.localization.Localization(__file__, 598, 15), is_Intel_31826, *[], **kwargs_31827)
        
        
        
        # Obtaining the type of the subscript
        str_31829 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 598, 48), 'str', 'Family')
        
        # Obtaining the type of the subscript
        int_31830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 598, 45), 'int')
        # Getting the type of 'self' (line 598)
        self_31831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 35), 'self')
        # Obtaining the member 'info' of a type (line 598)
        info_31832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 598, 35), self_31831, 'info')
        # Obtaining the member '__getitem__' of a type (line 598)
        getitem___31833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 598, 35), info_31832, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 598)
        subscript_call_result_31834 = invoke(stypy.reporting.localization.Localization(__file__, 598, 35), getitem___31833, int_31830)
        
        # Obtaining the member '__getitem__' of a type (line 598)
        getitem___31835 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 598, 35), subscript_call_result_31834, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 598)
        subscript_call_result_31836 = invoke(stypy.reporting.localization.Localization(__file__, 598, 35), getitem___31835, str_31829)
        
        int_31837 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 598, 59), 'int')
        # Applying the binary operator '==' (line 598)
        result_eq_31838 = python_operator(stypy.reporting.localization.Localization(__file__, 598, 35), '==', subscript_call_result_31836, int_31837)
        
        # Applying the binary operator 'and' (line 598)
        result_and_keyword_31839 = python_operator(stypy.reporting.localization.Localization(__file__, 598, 15), 'and', is_Intel_call_result_31828, result_eq_31838)
        
        
        # Obtaining the type of the subscript
        str_31840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 599, 32), 'str', 'Model')
        
        # Obtaining the type of the subscript
        int_31841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 599, 29), 'int')
        # Getting the type of 'self' (line 599)
        self_31842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 19), 'self')
        # Obtaining the member 'info' of a type (line 599)
        info_31843 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 599, 19), self_31842, 'info')
        # Obtaining the member '__getitem__' of a type (line 599)
        getitem___31844 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 599, 19), info_31843, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 599)
        subscript_call_result_31845 = invoke(stypy.reporting.localization.Localization(__file__, 599, 19), getitem___31844, int_31841)
        
        # Obtaining the member '__getitem__' of a type (line 599)
        getitem___31846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 599, 19), subscript_call_result_31845, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 599)
        subscript_call_result_31847 = invoke(stypy.reporting.localization.Localization(__file__, 599, 19), getitem___31846, str_31840)
        
        
        # Obtaining an instance of the builtin type 'list' (line 599)
        list_31848 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 599, 44), 'list')
        # Adding type elements to the builtin type 'list' instance (line 599)
        # Adding element type (line 599)
        int_31849 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 599, 45), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 599, 44), list_31848, int_31849)
        # Adding element type (line 599)
        int_31850 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 599, 48), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 599, 44), list_31848, int_31850)
        # Adding element type (line 599)
        int_31851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 599, 51), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 599, 44), list_31848, int_31851)
        
        # Applying the binary operator 'in' (line 599)
        result_contains_31852 = python_operator(stypy.reporting.localization.Localization(__file__, 599, 19), 'in', subscript_call_result_31847, list_31848)
        
        # Applying the binary operator 'and' (line 598)
        result_and_keyword_31853 = python_operator(stypy.reporting.localization.Localization(__file__, 598, 15), 'and', result_and_keyword_31839, result_contains_31852)
        
        # Assigning a type to the variable 'stypy_return_type' (line 598)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 598, 8), 'stypy_return_type', result_and_keyword_31853)
        
        # ################# End of '_is_PentiumII(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_PentiumII' in the type store
        # Getting the type of 'stypy_return_type' (line 597)
        stypy_return_type_31854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31854)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_PentiumII'
        return stypy_return_type_31854


    @norecursion
    def _is_PentiumIII(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_PentiumIII'
        module_type_store = module_type_store.open_function_context('_is_PentiumIII', 601, 4, False)
        # Assigning a type to the variable 'self' (line 602)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 602, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Win32CPUInfo._is_PentiumIII.__dict__.__setitem__('stypy_localization', localization)
        Win32CPUInfo._is_PentiumIII.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Win32CPUInfo._is_PentiumIII.__dict__.__setitem__('stypy_type_store', module_type_store)
        Win32CPUInfo._is_PentiumIII.__dict__.__setitem__('stypy_function_name', 'Win32CPUInfo._is_PentiumIII')
        Win32CPUInfo._is_PentiumIII.__dict__.__setitem__('stypy_param_names_list', [])
        Win32CPUInfo._is_PentiumIII.__dict__.__setitem__('stypy_varargs_param_name', None)
        Win32CPUInfo._is_PentiumIII.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Win32CPUInfo._is_PentiumIII.__dict__.__setitem__('stypy_call_defaults', defaults)
        Win32CPUInfo._is_PentiumIII.__dict__.__setitem__('stypy_call_varargs', varargs)
        Win32CPUInfo._is_PentiumIII.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Win32CPUInfo._is_PentiumIII.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Win32CPUInfo._is_PentiumIII', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_PentiumIII', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_PentiumIII(...)' code ##################

        
        # Evaluating a boolean operation
        
        # Call to is_Intel(...): (line 602)
        # Processing the call keyword arguments (line 602)
        kwargs_31857 = {}
        # Getting the type of 'self' (line 602)
        self_31855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 15), 'self', False)
        # Obtaining the member 'is_Intel' of a type (line 602)
        is_Intel_31856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 602, 15), self_31855, 'is_Intel')
        # Calling is_Intel(args, kwargs) (line 602)
        is_Intel_call_result_31858 = invoke(stypy.reporting.localization.Localization(__file__, 602, 15), is_Intel_31856, *[], **kwargs_31857)
        
        
        
        # Obtaining the type of the subscript
        str_31859 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 602, 48), 'str', 'Family')
        
        # Obtaining the type of the subscript
        int_31860 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 602, 45), 'int')
        # Getting the type of 'self' (line 602)
        self_31861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 35), 'self')
        # Obtaining the member 'info' of a type (line 602)
        info_31862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 602, 35), self_31861, 'info')
        # Obtaining the member '__getitem__' of a type (line 602)
        getitem___31863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 602, 35), info_31862, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 602)
        subscript_call_result_31864 = invoke(stypy.reporting.localization.Localization(__file__, 602, 35), getitem___31863, int_31860)
        
        # Obtaining the member '__getitem__' of a type (line 602)
        getitem___31865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 602, 35), subscript_call_result_31864, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 602)
        subscript_call_result_31866 = invoke(stypy.reporting.localization.Localization(__file__, 602, 35), getitem___31865, str_31859)
        
        int_31867 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 602, 59), 'int')
        # Applying the binary operator '==' (line 602)
        result_eq_31868 = python_operator(stypy.reporting.localization.Localization(__file__, 602, 35), '==', subscript_call_result_31866, int_31867)
        
        # Applying the binary operator 'and' (line 602)
        result_and_keyword_31869 = python_operator(stypy.reporting.localization.Localization(__file__, 602, 15), 'and', is_Intel_call_result_31858, result_eq_31868)
        
        
        # Obtaining the type of the subscript
        str_31870 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 603, 32), 'str', 'Model')
        
        # Obtaining the type of the subscript
        int_31871 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 603, 29), 'int')
        # Getting the type of 'self' (line 603)
        self_31872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 19), 'self')
        # Obtaining the member 'info' of a type (line 603)
        info_31873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 603, 19), self_31872, 'info')
        # Obtaining the member '__getitem__' of a type (line 603)
        getitem___31874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 603, 19), info_31873, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 603)
        subscript_call_result_31875 = invoke(stypy.reporting.localization.Localization(__file__, 603, 19), getitem___31874, int_31871)
        
        # Obtaining the member '__getitem__' of a type (line 603)
        getitem___31876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 603, 19), subscript_call_result_31875, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 603)
        subscript_call_result_31877 = invoke(stypy.reporting.localization.Localization(__file__, 603, 19), getitem___31876, str_31870)
        
        
        # Obtaining an instance of the builtin type 'list' (line 603)
        list_31878 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 603, 44), 'list')
        # Adding type elements to the builtin type 'list' instance (line 603)
        # Adding element type (line 603)
        int_31879 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 603, 45), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 603, 44), list_31878, int_31879)
        # Adding element type (line 603)
        int_31880 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 603, 48), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 603, 44), list_31878, int_31880)
        # Adding element type (line 603)
        int_31881 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 603, 51), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 603, 44), list_31878, int_31881)
        # Adding element type (line 603)
        int_31882 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 603, 54), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 603, 44), list_31878, int_31882)
        # Adding element type (line 603)
        int_31883 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 603, 58), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 603, 44), list_31878, int_31883)
        
        # Applying the binary operator 'in' (line 603)
        result_contains_31884 = python_operator(stypy.reporting.localization.Localization(__file__, 603, 19), 'in', subscript_call_result_31877, list_31878)
        
        # Applying the binary operator 'and' (line 602)
        result_and_keyword_31885 = python_operator(stypy.reporting.localization.Localization(__file__, 602, 15), 'and', result_and_keyword_31869, result_contains_31884)
        
        # Assigning a type to the variable 'stypy_return_type' (line 602)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 602, 8), 'stypy_return_type', result_and_keyword_31885)
        
        # ################# End of '_is_PentiumIII(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_PentiumIII' in the type store
        # Getting the type of 'stypy_return_type' (line 601)
        stypy_return_type_31886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31886)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_PentiumIII'
        return stypy_return_type_31886


    @norecursion
    def _is_PentiumIV(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_PentiumIV'
        module_type_store = module_type_store.open_function_context('_is_PentiumIV', 605, 4, False)
        # Assigning a type to the variable 'self' (line 606)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 606, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Win32CPUInfo._is_PentiumIV.__dict__.__setitem__('stypy_localization', localization)
        Win32CPUInfo._is_PentiumIV.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Win32CPUInfo._is_PentiumIV.__dict__.__setitem__('stypy_type_store', module_type_store)
        Win32CPUInfo._is_PentiumIV.__dict__.__setitem__('stypy_function_name', 'Win32CPUInfo._is_PentiumIV')
        Win32CPUInfo._is_PentiumIV.__dict__.__setitem__('stypy_param_names_list', [])
        Win32CPUInfo._is_PentiumIV.__dict__.__setitem__('stypy_varargs_param_name', None)
        Win32CPUInfo._is_PentiumIV.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Win32CPUInfo._is_PentiumIV.__dict__.__setitem__('stypy_call_defaults', defaults)
        Win32CPUInfo._is_PentiumIV.__dict__.__setitem__('stypy_call_varargs', varargs)
        Win32CPUInfo._is_PentiumIV.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Win32CPUInfo._is_PentiumIV.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Win32CPUInfo._is_PentiumIV', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_PentiumIV', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_PentiumIV(...)' code ##################

        
        # Evaluating a boolean operation
        
        # Call to is_Intel(...): (line 606)
        # Processing the call keyword arguments (line 606)
        kwargs_31889 = {}
        # Getting the type of 'self' (line 606)
        self_31887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 15), 'self', False)
        # Obtaining the member 'is_Intel' of a type (line 606)
        is_Intel_31888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 606, 15), self_31887, 'is_Intel')
        # Calling is_Intel(args, kwargs) (line 606)
        is_Intel_call_result_31890 = invoke(stypy.reporting.localization.Localization(__file__, 606, 15), is_Intel_31888, *[], **kwargs_31889)
        
        
        
        # Obtaining the type of the subscript
        str_31891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 606, 48), 'str', 'Family')
        
        # Obtaining the type of the subscript
        int_31892 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 606, 45), 'int')
        # Getting the type of 'self' (line 606)
        self_31893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 35), 'self')
        # Obtaining the member 'info' of a type (line 606)
        info_31894 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 606, 35), self_31893, 'info')
        # Obtaining the member '__getitem__' of a type (line 606)
        getitem___31895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 606, 35), info_31894, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 606)
        subscript_call_result_31896 = invoke(stypy.reporting.localization.Localization(__file__, 606, 35), getitem___31895, int_31892)
        
        # Obtaining the member '__getitem__' of a type (line 606)
        getitem___31897 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 606, 35), subscript_call_result_31896, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 606)
        subscript_call_result_31898 = invoke(stypy.reporting.localization.Localization(__file__, 606, 35), getitem___31897, str_31891)
        
        int_31899 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 606, 59), 'int')
        # Applying the binary operator '==' (line 606)
        result_eq_31900 = python_operator(stypy.reporting.localization.Localization(__file__, 606, 35), '==', subscript_call_result_31898, int_31899)
        
        # Applying the binary operator 'and' (line 606)
        result_and_keyword_31901 = python_operator(stypy.reporting.localization.Localization(__file__, 606, 15), 'and', is_Intel_call_result_31890, result_eq_31900)
        
        # Assigning a type to the variable 'stypy_return_type' (line 606)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 606, 8), 'stypy_return_type', result_and_keyword_31901)
        
        # ################# End of '_is_PentiumIV(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_PentiumIV' in the type store
        # Getting the type of 'stypy_return_type' (line 605)
        stypy_return_type_31902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31902)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_PentiumIV'
        return stypy_return_type_31902


    @norecursion
    def _is_PentiumM(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_PentiumM'
        module_type_store = module_type_store.open_function_context('_is_PentiumM', 608, 4, False)
        # Assigning a type to the variable 'self' (line 609)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 609, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Win32CPUInfo._is_PentiumM.__dict__.__setitem__('stypy_localization', localization)
        Win32CPUInfo._is_PentiumM.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Win32CPUInfo._is_PentiumM.__dict__.__setitem__('stypy_type_store', module_type_store)
        Win32CPUInfo._is_PentiumM.__dict__.__setitem__('stypy_function_name', 'Win32CPUInfo._is_PentiumM')
        Win32CPUInfo._is_PentiumM.__dict__.__setitem__('stypy_param_names_list', [])
        Win32CPUInfo._is_PentiumM.__dict__.__setitem__('stypy_varargs_param_name', None)
        Win32CPUInfo._is_PentiumM.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Win32CPUInfo._is_PentiumM.__dict__.__setitem__('stypy_call_defaults', defaults)
        Win32CPUInfo._is_PentiumM.__dict__.__setitem__('stypy_call_varargs', varargs)
        Win32CPUInfo._is_PentiumM.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Win32CPUInfo._is_PentiumM.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Win32CPUInfo._is_PentiumM', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_PentiumM', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_PentiumM(...)' code ##################

        
        # Evaluating a boolean operation
        
        # Call to is_Intel(...): (line 609)
        # Processing the call keyword arguments (line 609)
        kwargs_31905 = {}
        # Getting the type of 'self' (line 609)
        self_31903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 15), 'self', False)
        # Obtaining the member 'is_Intel' of a type (line 609)
        is_Intel_31904 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 609, 15), self_31903, 'is_Intel')
        # Calling is_Intel(args, kwargs) (line 609)
        is_Intel_call_result_31906 = invoke(stypy.reporting.localization.Localization(__file__, 609, 15), is_Intel_31904, *[], **kwargs_31905)
        
        
        
        # Obtaining the type of the subscript
        str_31907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 609, 48), 'str', 'Family')
        
        # Obtaining the type of the subscript
        int_31908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 609, 45), 'int')
        # Getting the type of 'self' (line 609)
        self_31909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 35), 'self')
        # Obtaining the member 'info' of a type (line 609)
        info_31910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 609, 35), self_31909, 'info')
        # Obtaining the member '__getitem__' of a type (line 609)
        getitem___31911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 609, 35), info_31910, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 609)
        subscript_call_result_31912 = invoke(stypy.reporting.localization.Localization(__file__, 609, 35), getitem___31911, int_31908)
        
        # Obtaining the member '__getitem__' of a type (line 609)
        getitem___31913 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 609, 35), subscript_call_result_31912, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 609)
        subscript_call_result_31914 = invoke(stypy.reporting.localization.Localization(__file__, 609, 35), getitem___31913, str_31907)
        
        int_31915 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 609, 61), 'int')
        # Applying the binary operator '==' (line 609)
        result_eq_31916 = python_operator(stypy.reporting.localization.Localization(__file__, 609, 35), '==', subscript_call_result_31914, int_31915)
        
        # Applying the binary operator 'and' (line 609)
        result_and_keyword_31917 = python_operator(stypy.reporting.localization.Localization(__file__, 609, 15), 'and', is_Intel_call_result_31906, result_eq_31916)
        
        
        # Obtaining the type of the subscript
        str_31918 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 610, 32), 'str', 'Model')
        
        # Obtaining the type of the subscript
        int_31919 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 610, 29), 'int')
        # Getting the type of 'self' (line 610)
        self_31920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 19), 'self')
        # Obtaining the member 'info' of a type (line 610)
        info_31921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 610, 19), self_31920, 'info')
        # Obtaining the member '__getitem__' of a type (line 610)
        getitem___31922 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 610, 19), info_31921, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 610)
        subscript_call_result_31923 = invoke(stypy.reporting.localization.Localization(__file__, 610, 19), getitem___31922, int_31919)
        
        # Obtaining the member '__getitem__' of a type (line 610)
        getitem___31924 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 610, 19), subscript_call_result_31923, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 610)
        subscript_call_result_31925 = invoke(stypy.reporting.localization.Localization(__file__, 610, 19), getitem___31924, str_31918)
        
        
        # Obtaining an instance of the builtin type 'list' (line 610)
        list_31926 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 610, 44), 'list')
        # Adding type elements to the builtin type 'list' instance (line 610)
        # Adding element type (line 610)
        int_31927 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 610, 45), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 610, 44), list_31926, int_31927)
        # Adding element type (line 610)
        int_31928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 610, 48), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 610, 44), list_31926, int_31928)
        # Adding element type (line 610)
        int_31929 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 610, 52), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 610, 44), list_31926, int_31929)
        
        # Applying the binary operator 'in' (line 610)
        result_contains_31930 = python_operator(stypy.reporting.localization.Localization(__file__, 610, 19), 'in', subscript_call_result_31925, list_31926)
        
        # Applying the binary operator 'and' (line 609)
        result_and_keyword_31931 = python_operator(stypy.reporting.localization.Localization(__file__, 609, 15), 'and', result_and_keyword_31917, result_contains_31930)
        
        # Assigning a type to the variable 'stypy_return_type' (line 609)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 609, 8), 'stypy_return_type', result_and_keyword_31931)
        
        # ################# End of '_is_PentiumM(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_PentiumM' in the type store
        # Getting the type of 'stypy_return_type' (line 608)
        stypy_return_type_31932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31932)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_PentiumM'
        return stypy_return_type_31932


    @norecursion
    def _is_Core2(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_Core2'
        module_type_store = module_type_store.open_function_context('_is_Core2', 612, 4, False)
        # Assigning a type to the variable 'self' (line 613)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 613, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Win32CPUInfo._is_Core2.__dict__.__setitem__('stypy_localization', localization)
        Win32CPUInfo._is_Core2.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Win32CPUInfo._is_Core2.__dict__.__setitem__('stypy_type_store', module_type_store)
        Win32CPUInfo._is_Core2.__dict__.__setitem__('stypy_function_name', 'Win32CPUInfo._is_Core2')
        Win32CPUInfo._is_Core2.__dict__.__setitem__('stypy_param_names_list', [])
        Win32CPUInfo._is_Core2.__dict__.__setitem__('stypy_varargs_param_name', None)
        Win32CPUInfo._is_Core2.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Win32CPUInfo._is_Core2.__dict__.__setitem__('stypy_call_defaults', defaults)
        Win32CPUInfo._is_Core2.__dict__.__setitem__('stypy_call_varargs', varargs)
        Win32CPUInfo._is_Core2.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Win32CPUInfo._is_Core2.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Win32CPUInfo._is_Core2', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_Core2', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_Core2(...)' code ##################

        
        # Evaluating a boolean operation
        
        # Call to is_Intel(...): (line 613)
        # Processing the call keyword arguments (line 613)
        kwargs_31935 = {}
        # Getting the type of 'self' (line 613)
        self_31933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 15), 'self', False)
        # Obtaining the member 'is_Intel' of a type (line 613)
        is_Intel_31934 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 613, 15), self_31933, 'is_Intel')
        # Calling is_Intel(args, kwargs) (line 613)
        is_Intel_call_result_31936 = invoke(stypy.reporting.localization.Localization(__file__, 613, 15), is_Intel_31934, *[], **kwargs_31935)
        
        
        
        # Obtaining the type of the subscript
        str_31937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 613, 48), 'str', 'Family')
        
        # Obtaining the type of the subscript
        int_31938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 613, 45), 'int')
        # Getting the type of 'self' (line 613)
        self_31939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 35), 'self')
        # Obtaining the member 'info' of a type (line 613)
        info_31940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 613, 35), self_31939, 'info')
        # Obtaining the member '__getitem__' of a type (line 613)
        getitem___31941 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 613, 35), info_31940, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 613)
        subscript_call_result_31942 = invoke(stypy.reporting.localization.Localization(__file__, 613, 35), getitem___31941, int_31938)
        
        # Obtaining the member '__getitem__' of a type (line 613)
        getitem___31943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 613, 35), subscript_call_result_31942, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 613)
        subscript_call_result_31944 = invoke(stypy.reporting.localization.Localization(__file__, 613, 35), getitem___31943, str_31937)
        
        int_31945 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 613, 61), 'int')
        # Applying the binary operator '==' (line 613)
        result_eq_31946 = python_operator(stypy.reporting.localization.Localization(__file__, 613, 35), '==', subscript_call_result_31944, int_31945)
        
        # Applying the binary operator 'and' (line 613)
        result_and_keyword_31947 = python_operator(stypy.reporting.localization.Localization(__file__, 613, 15), 'and', is_Intel_call_result_31936, result_eq_31946)
        
        
        # Obtaining the type of the subscript
        str_31948 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 614, 32), 'str', 'Model')
        
        # Obtaining the type of the subscript
        int_31949 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 614, 29), 'int')
        # Getting the type of 'self' (line 614)
        self_31950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 19), 'self')
        # Obtaining the member 'info' of a type (line 614)
        info_31951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 614, 19), self_31950, 'info')
        # Obtaining the member '__getitem__' of a type (line 614)
        getitem___31952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 614, 19), info_31951, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 614)
        subscript_call_result_31953 = invoke(stypy.reporting.localization.Localization(__file__, 614, 19), getitem___31952, int_31949)
        
        # Obtaining the member '__getitem__' of a type (line 614)
        getitem___31954 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 614, 19), subscript_call_result_31953, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 614)
        subscript_call_result_31955 = invoke(stypy.reporting.localization.Localization(__file__, 614, 19), getitem___31954, str_31948)
        
        
        # Obtaining an instance of the builtin type 'list' (line 614)
        list_31956 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 614, 44), 'list')
        # Adding type elements to the builtin type 'list' instance (line 614)
        # Adding element type (line 614)
        int_31957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 614, 45), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 614, 44), list_31956, int_31957)
        # Adding element type (line 614)
        int_31958 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 614, 49), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 614, 44), list_31956, int_31958)
        # Adding element type (line 614)
        int_31959 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 614, 53), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 614, 44), list_31956, int_31959)
        
        # Applying the binary operator 'in' (line 614)
        result_contains_31960 = python_operator(stypy.reporting.localization.Localization(__file__, 614, 19), 'in', subscript_call_result_31955, list_31956)
        
        # Applying the binary operator 'and' (line 613)
        result_and_keyword_31961 = python_operator(stypy.reporting.localization.Localization(__file__, 613, 15), 'and', result_and_keyword_31947, result_contains_31960)
        
        # Assigning a type to the variable 'stypy_return_type' (line 613)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 613, 8), 'stypy_return_type', result_and_keyword_31961)
        
        # ################# End of '_is_Core2(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_Core2' in the type store
        # Getting the type of 'stypy_return_type' (line 612)
        stypy_return_type_31962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31962)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_Core2'
        return stypy_return_type_31962


    @norecursion
    def _is_singleCPU(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_is_singleCPU'
        module_type_store = module_type_store.open_function_context('_is_singleCPU', 618, 4, False)
        # Assigning a type to the variable 'self' (line 619)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 619, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Win32CPUInfo._is_singleCPU.__dict__.__setitem__('stypy_localization', localization)
        Win32CPUInfo._is_singleCPU.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Win32CPUInfo._is_singleCPU.__dict__.__setitem__('stypy_type_store', module_type_store)
        Win32CPUInfo._is_singleCPU.__dict__.__setitem__('stypy_function_name', 'Win32CPUInfo._is_singleCPU')
        Win32CPUInfo._is_singleCPU.__dict__.__setitem__('stypy_param_names_list', [])
        Win32CPUInfo._is_singleCPU.__dict__.__setitem__('stypy_varargs_param_name', None)
        Win32CPUInfo._is_singleCPU.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Win32CPUInfo._is_singleCPU.__dict__.__setitem__('stypy_call_defaults', defaults)
        Win32CPUInfo._is_singleCPU.__dict__.__setitem__('stypy_call_varargs', varargs)
        Win32CPUInfo._is_singleCPU.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Win32CPUInfo._is_singleCPU.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Win32CPUInfo._is_singleCPU', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_is_singleCPU', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_is_singleCPU(...)' code ##################

        
        
        # Call to len(...): (line 619)
        # Processing the call arguments (line 619)
        # Getting the type of 'self' (line 619)
        self_31964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 619, 19), 'self', False)
        # Obtaining the member 'info' of a type (line 619)
        info_31965 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 619, 19), self_31964, 'info')
        # Processing the call keyword arguments (line 619)
        kwargs_31966 = {}
        # Getting the type of 'len' (line 619)
        len_31963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 619, 15), 'len', False)
        # Calling len(args, kwargs) (line 619)
        len_call_result_31967 = invoke(stypy.reporting.localization.Localization(__file__, 619, 15), len_31963, *[info_31965], **kwargs_31966)
        
        int_31968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 619, 33), 'int')
        # Applying the binary operator '==' (line 619)
        result_eq_31969 = python_operator(stypy.reporting.localization.Localization(__file__, 619, 15), '==', len_call_result_31967, int_31968)
        
        # Assigning a type to the variable 'stypy_return_type' (line 619)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 619, 8), 'stypy_return_type', result_eq_31969)
        
        # ################# End of '_is_singleCPU(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_is_singleCPU' in the type store
        # Getting the type of 'stypy_return_type' (line 618)
        stypy_return_type_31970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31970)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_is_singleCPU'
        return stypy_return_type_31970


    @norecursion
    def _getNCPUs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_getNCPUs'
        module_type_store = module_type_store.open_function_context('_getNCPUs', 621, 4, False)
        # Assigning a type to the variable 'self' (line 622)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 622, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Win32CPUInfo._getNCPUs.__dict__.__setitem__('stypy_localization', localization)
        Win32CPUInfo._getNCPUs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Win32CPUInfo._getNCPUs.__dict__.__setitem__('stypy_type_store', module_type_store)
        Win32CPUInfo._getNCPUs.__dict__.__setitem__('stypy_function_name', 'Win32CPUInfo._getNCPUs')
        Win32CPUInfo._getNCPUs.__dict__.__setitem__('stypy_param_names_list', [])
        Win32CPUInfo._getNCPUs.__dict__.__setitem__('stypy_varargs_param_name', None)
        Win32CPUInfo._getNCPUs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Win32CPUInfo._getNCPUs.__dict__.__setitem__('stypy_call_defaults', defaults)
        Win32CPUInfo._getNCPUs.__dict__.__setitem__('stypy_call_varargs', varargs)
        Win32CPUInfo._getNCPUs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Win32CPUInfo._getNCPUs.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Win32CPUInfo._getNCPUs', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_getNCPUs', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_getNCPUs(...)' code ##################

        
        # Call to len(...): (line 622)
        # Processing the call arguments (line 622)
        # Getting the type of 'self' (line 622)
        self_31972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 19), 'self', False)
        # Obtaining the member 'info' of a type (line 622)
        info_31973 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 622, 19), self_31972, 'info')
        # Processing the call keyword arguments (line 622)
        kwargs_31974 = {}
        # Getting the type of 'len' (line 622)
        len_31971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 15), 'len', False)
        # Calling len(args, kwargs) (line 622)
        len_call_result_31975 = invoke(stypy.reporting.localization.Localization(__file__, 622, 15), len_31971, *[info_31973], **kwargs_31974)
        
        # Assigning a type to the variable 'stypy_return_type' (line 622)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 622, 8), 'stypy_return_type', len_call_result_31975)
        
        # ################# End of '_getNCPUs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_getNCPUs' in the type store
        # Getting the type of 'stypy_return_type' (line 621)
        stypy_return_type_31976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_31976)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_getNCPUs'
        return stypy_return_type_31976


    @norecursion
    def _has_mmx(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_has_mmx'
        module_type_store = module_type_store.open_function_context('_has_mmx', 624, 4, False)
        # Assigning a type to the variable 'self' (line 625)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 625, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Win32CPUInfo._has_mmx.__dict__.__setitem__('stypy_localization', localization)
        Win32CPUInfo._has_mmx.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Win32CPUInfo._has_mmx.__dict__.__setitem__('stypy_type_store', module_type_store)
        Win32CPUInfo._has_mmx.__dict__.__setitem__('stypy_function_name', 'Win32CPUInfo._has_mmx')
        Win32CPUInfo._has_mmx.__dict__.__setitem__('stypy_param_names_list', [])
        Win32CPUInfo._has_mmx.__dict__.__setitem__('stypy_varargs_param_name', None)
        Win32CPUInfo._has_mmx.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Win32CPUInfo._has_mmx.__dict__.__setitem__('stypy_call_defaults', defaults)
        Win32CPUInfo._has_mmx.__dict__.__setitem__('stypy_call_varargs', varargs)
        Win32CPUInfo._has_mmx.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Win32CPUInfo._has_mmx.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Win32CPUInfo._has_mmx', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_has_mmx', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_has_mmx(...)' code ##################

        
        
        # Call to is_Intel(...): (line 625)
        # Processing the call keyword arguments (line 625)
        kwargs_31979 = {}
        # Getting the type of 'self' (line 625)
        self_31977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 11), 'self', False)
        # Obtaining the member 'is_Intel' of a type (line 625)
        is_Intel_31978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 625, 11), self_31977, 'is_Intel')
        # Calling is_Intel(args, kwargs) (line 625)
        is_Intel_call_result_31980 = invoke(stypy.reporting.localization.Localization(__file__, 625, 11), is_Intel_31978, *[], **kwargs_31979)
        
        # Testing the type of an if condition (line 625)
        if_condition_31981 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 625, 8), is_Intel_call_result_31980)
        # Assigning a type to the variable 'if_condition_31981' (line 625)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 625, 8), 'if_condition_31981', if_condition_31981)
        # SSA begins for if statement (line 625)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Evaluating a boolean operation
        
        # Evaluating a boolean operation
        
        
        # Obtaining the type of the subscript
        str_31982 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 626, 33), 'str', 'Family')
        
        # Obtaining the type of the subscript
        int_31983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 626, 30), 'int')
        # Getting the type of 'self' (line 626)
        self_31984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 20), 'self')
        # Obtaining the member 'info' of a type (line 626)
        info_31985 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 626, 20), self_31984, 'info')
        # Obtaining the member '__getitem__' of a type (line 626)
        getitem___31986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 626, 20), info_31985, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 626)
        subscript_call_result_31987 = invoke(stypy.reporting.localization.Localization(__file__, 626, 20), getitem___31986, int_31983)
        
        # Obtaining the member '__getitem__' of a type (line 626)
        getitem___31988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 626, 20), subscript_call_result_31987, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 626)
        subscript_call_result_31989 = invoke(stypy.reporting.localization.Localization(__file__, 626, 20), getitem___31988, str_31982)
        
        int_31990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 626, 44), 'int')
        # Applying the binary operator '==' (line 626)
        result_eq_31991 = python_operator(stypy.reporting.localization.Localization(__file__, 626, 20), '==', subscript_call_result_31989, int_31990)
        
        
        
        # Obtaining the type of the subscript
        str_31992 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 626, 63), 'str', 'Model')
        
        # Obtaining the type of the subscript
        int_31993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 626, 60), 'int')
        # Getting the type of 'self' (line 626)
        self_31994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 50), 'self')
        # Obtaining the member 'info' of a type (line 626)
        info_31995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 626, 50), self_31994, 'info')
        # Obtaining the member '__getitem__' of a type (line 626)
        getitem___31996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 626, 50), info_31995, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 626)
        subscript_call_result_31997 = invoke(stypy.reporting.localization.Localization(__file__, 626, 50), getitem___31996, int_31993)
        
        # Obtaining the member '__getitem__' of a type (line 626)
        getitem___31998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 626, 50), subscript_call_result_31997, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 626)
        subscript_call_result_31999 = invoke(stypy.reporting.localization.Localization(__file__, 626, 50), getitem___31998, str_31992)
        
        int_32000 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 626, 73), 'int')
        # Applying the binary operator '==' (line 626)
        result_eq_32001 = python_operator(stypy.reporting.localization.Localization(__file__, 626, 50), '==', subscript_call_result_31999, int_32000)
        
        # Applying the binary operator 'and' (line 626)
        result_and_keyword_32002 = python_operator(stypy.reporting.localization.Localization(__file__, 626, 20), 'and', result_eq_31991, result_eq_32001)
        
        
        
        # Obtaining the type of the subscript
        str_32003 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 627, 36), 'str', 'Family')
        
        # Obtaining the type of the subscript
        int_32004 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 627, 33), 'int')
        # Getting the type of 'self' (line 627)
        self_32005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 23), 'self')
        # Obtaining the member 'info' of a type (line 627)
        info_32006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 627, 23), self_32005, 'info')
        # Obtaining the member '__getitem__' of a type (line 627)
        getitem___32007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 627, 23), info_32006, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 627)
        subscript_call_result_32008 = invoke(stypy.reporting.localization.Localization(__file__, 627, 23), getitem___32007, int_32004)
        
        # Obtaining the member '__getitem__' of a type (line 627)
        getitem___32009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 627, 23), subscript_call_result_32008, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 627)
        subscript_call_result_32010 = invoke(stypy.reporting.localization.Localization(__file__, 627, 23), getitem___32009, str_32003)
        
        
        # Obtaining an instance of the builtin type 'list' (line 627)
        list_32011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 627, 49), 'list')
        # Adding type elements to the builtin type 'list' instance (line 627)
        # Adding element type (line 627)
        int_32012 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 627, 50), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 627, 49), list_32011, int_32012)
        # Adding element type (line 627)
        int_32013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 627, 53), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 627, 49), list_32011, int_32013)
        
        # Applying the binary operator 'in' (line 627)
        result_contains_32014 = python_operator(stypy.reporting.localization.Localization(__file__, 627, 23), 'in', subscript_call_result_32010, list_32011)
        
        # Applying the binary operator 'or' (line 626)
        result_or_keyword_32015 = python_operator(stypy.reporting.localization.Localization(__file__, 626, 19), 'or', result_and_keyword_32002, result_contains_32014)
        
        # Assigning a type to the variable 'stypy_return_type' (line 626)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 626, 12), 'stypy_return_type', result_or_keyword_32015)
        # SSA branch for the else part of an if statement (line 625)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to is_AMD(...): (line 628)
        # Processing the call keyword arguments (line 628)
        kwargs_32018 = {}
        # Getting the type of 'self' (line 628)
        self_32016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 13), 'self', False)
        # Obtaining the member 'is_AMD' of a type (line 628)
        is_AMD_32017 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 628, 13), self_32016, 'is_AMD')
        # Calling is_AMD(args, kwargs) (line 628)
        is_AMD_call_result_32019 = invoke(stypy.reporting.localization.Localization(__file__, 628, 13), is_AMD_32017, *[], **kwargs_32018)
        
        # Testing the type of an if condition (line 628)
        if_condition_32020 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 628, 13), is_AMD_call_result_32019)
        # Assigning a type to the variable 'if_condition_32020' (line 628)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 628, 13), 'if_condition_32020', if_condition_32020)
        # SSA begins for if statement (line 628)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Obtaining the type of the subscript
        str_32021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 629, 32), 'str', 'Family')
        
        # Obtaining the type of the subscript
        int_32022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 629, 29), 'int')
        # Getting the type of 'self' (line 629)
        self_32023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 629, 19), 'self')
        # Obtaining the member 'info' of a type (line 629)
        info_32024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 629, 19), self_32023, 'info')
        # Obtaining the member '__getitem__' of a type (line 629)
        getitem___32025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 629, 19), info_32024, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 629)
        subscript_call_result_32026 = invoke(stypy.reporting.localization.Localization(__file__, 629, 19), getitem___32025, int_32022)
        
        # Obtaining the member '__getitem__' of a type (line 629)
        getitem___32027 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 629, 19), subscript_call_result_32026, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 629)
        subscript_call_result_32028 = invoke(stypy.reporting.localization.Localization(__file__, 629, 19), getitem___32027, str_32021)
        
        
        # Obtaining an instance of the builtin type 'list' (line 629)
        list_32029 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 629, 45), 'list')
        # Adding type elements to the builtin type 'list' instance (line 629)
        # Adding element type (line 629)
        int_32030 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 629, 46), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 629, 45), list_32029, int_32030)
        # Adding element type (line 629)
        int_32031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 629, 49), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 629, 45), list_32029, int_32031)
        # Adding element type (line 629)
        int_32032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 629, 52), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 629, 45), list_32029, int_32032)
        
        # Applying the binary operator 'in' (line 629)
        result_contains_32033 = python_operator(stypy.reporting.localization.Localization(__file__, 629, 19), 'in', subscript_call_result_32028, list_32029)
        
        # Assigning a type to the variable 'stypy_return_type' (line 629)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 629, 12), 'stypy_return_type', result_contains_32033)
        # SSA branch for the else part of an if statement (line 628)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'False' (line 631)
        False_32034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 631, 19), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 631)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 631, 12), 'stypy_return_type', False_32034)
        # SSA join for if statement (line 628)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 625)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_has_mmx(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_has_mmx' in the type store
        # Getting the type of 'stypy_return_type' (line 624)
        stypy_return_type_32035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_32035)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_has_mmx'
        return stypy_return_type_32035


    @norecursion
    def _has_sse(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_has_sse'
        module_type_store = module_type_store.open_function_context('_has_sse', 633, 4, False)
        # Assigning a type to the variable 'self' (line 634)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 634, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Win32CPUInfo._has_sse.__dict__.__setitem__('stypy_localization', localization)
        Win32CPUInfo._has_sse.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Win32CPUInfo._has_sse.__dict__.__setitem__('stypy_type_store', module_type_store)
        Win32CPUInfo._has_sse.__dict__.__setitem__('stypy_function_name', 'Win32CPUInfo._has_sse')
        Win32CPUInfo._has_sse.__dict__.__setitem__('stypy_param_names_list', [])
        Win32CPUInfo._has_sse.__dict__.__setitem__('stypy_varargs_param_name', None)
        Win32CPUInfo._has_sse.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Win32CPUInfo._has_sse.__dict__.__setitem__('stypy_call_defaults', defaults)
        Win32CPUInfo._has_sse.__dict__.__setitem__('stypy_call_varargs', varargs)
        Win32CPUInfo._has_sse.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Win32CPUInfo._has_sse.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Win32CPUInfo._has_sse', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_has_sse', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_has_sse(...)' code ##################

        
        
        # Call to is_Intel(...): (line 634)
        # Processing the call keyword arguments (line 634)
        kwargs_32038 = {}
        # Getting the type of 'self' (line 634)
        self_32036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 11), 'self', False)
        # Obtaining the member 'is_Intel' of a type (line 634)
        is_Intel_32037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 634, 11), self_32036, 'is_Intel')
        # Calling is_Intel(args, kwargs) (line 634)
        is_Intel_call_result_32039 = invoke(stypy.reporting.localization.Localization(__file__, 634, 11), is_Intel_32037, *[], **kwargs_32038)
        
        # Testing the type of an if condition (line 634)
        if_condition_32040 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 634, 8), is_Intel_call_result_32039)
        # Assigning a type to the variable 'if_condition_32040' (line 634)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 634, 8), 'if_condition_32040', if_condition_32040)
        # SSA begins for if statement (line 634)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Evaluating a boolean operation
        
        # Evaluating a boolean operation
        
        
        # Obtaining the type of the subscript
        str_32041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 635, 33), 'str', 'Family')
        
        # Obtaining the type of the subscript
        int_32042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 635, 30), 'int')
        # Getting the type of 'self' (line 635)
        self_32043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 20), 'self')
        # Obtaining the member 'info' of a type (line 635)
        info_32044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 635, 20), self_32043, 'info')
        # Obtaining the member '__getitem__' of a type (line 635)
        getitem___32045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 635, 20), info_32044, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 635)
        subscript_call_result_32046 = invoke(stypy.reporting.localization.Localization(__file__, 635, 20), getitem___32045, int_32042)
        
        # Obtaining the member '__getitem__' of a type (line 635)
        getitem___32047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 635, 20), subscript_call_result_32046, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 635)
        subscript_call_result_32048 = invoke(stypy.reporting.localization.Localization(__file__, 635, 20), getitem___32047, str_32041)
        
        int_32049 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 635, 44), 'int')
        # Applying the binary operator '==' (line 635)
        result_eq_32050 = python_operator(stypy.reporting.localization.Localization(__file__, 635, 20), '==', subscript_call_result_32048, int_32049)
        
        
        
        # Obtaining the type of the subscript
        str_32051 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 636, 33), 'str', 'Model')
        
        # Obtaining the type of the subscript
        int_32052 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 636, 30), 'int')
        # Getting the type of 'self' (line 636)
        self_32053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 20), 'self')
        # Obtaining the member 'info' of a type (line 636)
        info_32054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 636, 20), self_32053, 'info')
        # Obtaining the member '__getitem__' of a type (line 636)
        getitem___32055 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 636, 20), info_32054, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 636)
        subscript_call_result_32056 = invoke(stypy.reporting.localization.Localization(__file__, 636, 20), getitem___32055, int_32052)
        
        # Obtaining the member '__getitem__' of a type (line 636)
        getitem___32057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 636, 20), subscript_call_result_32056, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 636)
        subscript_call_result_32058 = invoke(stypy.reporting.localization.Localization(__file__, 636, 20), getitem___32057, str_32051)
        
        
        # Obtaining an instance of the builtin type 'list' (line 636)
        list_32059 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 636, 45), 'list')
        # Adding type elements to the builtin type 'list' instance (line 636)
        # Adding element type (line 636)
        int_32060 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 636, 46), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 636, 45), list_32059, int_32060)
        # Adding element type (line 636)
        int_32061 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 636, 49), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 636, 45), list_32059, int_32061)
        # Adding element type (line 636)
        int_32062 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 636, 52), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 636, 45), list_32059, int_32062)
        # Adding element type (line 636)
        int_32063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 636, 55), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 636, 45), list_32059, int_32063)
        # Adding element type (line 636)
        int_32064 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 636, 59), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 636, 45), list_32059, int_32064)
        
        # Applying the binary operator 'in' (line 636)
        result_contains_32065 = python_operator(stypy.reporting.localization.Localization(__file__, 636, 20), 'in', subscript_call_result_32058, list_32059)
        
        # Applying the binary operator 'and' (line 635)
        result_and_keyword_32066 = python_operator(stypy.reporting.localization.Localization(__file__, 635, 20), 'and', result_eq_32050, result_contains_32065)
        
        
        
        # Obtaining the type of the subscript
        str_32067 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 637, 36), 'str', 'Family')
        
        # Obtaining the type of the subscript
        int_32068 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 637, 33), 'int')
        # Getting the type of 'self' (line 637)
        self_32069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 23), 'self')
        # Obtaining the member 'info' of a type (line 637)
        info_32070 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 637, 23), self_32069, 'info')
        # Obtaining the member '__getitem__' of a type (line 637)
        getitem___32071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 637, 23), info_32070, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 637)
        subscript_call_result_32072 = invoke(stypy.reporting.localization.Localization(__file__, 637, 23), getitem___32071, int_32068)
        
        # Obtaining the member '__getitem__' of a type (line 637)
        getitem___32073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 637, 23), subscript_call_result_32072, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 637)
        subscript_call_result_32074 = invoke(stypy.reporting.localization.Localization(__file__, 637, 23), getitem___32073, str_32067)
        
        int_32075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 637, 47), 'int')
        # Applying the binary operator '==' (line 637)
        result_eq_32076 = python_operator(stypy.reporting.localization.Localization(__file__, 637, 23), '==', subscript_call_result_32074, int_32075)
        
        # Applying the binary operator 'or' (line 635)
        result_or_keyword_32077 = python_operator(stypy.reporting.localization.Localization(__file__, 635, 19), 'or', result_and_keyword_32066, result_eq_32076)
        
        # Assigning a type to the variable 'stypy_return_type' (line 635)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 635, 12), 'stypy_return_type', result_or_keyword_32077)
        # SSA branch for the else part of an if statement (line 634)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to is_AMD(...): (line 638)
        # Processing the call keyword arguments (line 638)
        kwargs_32080 = {}
        # Getting the type of 'self' (line 638)
        self_32078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 13), 'self', False)
        # Obtaining the member 'is_AMD' of a type (line 638)
        is_AMD_32079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 638, 13), self_32078, 'is_AMD')
        # Calling is_AMD(args, kwargs) (line 638)
        is_AMD_call_result_32081 = invoke(stypy.reporting.localization.Localization(__file__, 638, 13), is_AMD_32079, *[], **kwargs_32080)
        
        # Testing the type of an if condition (line 638)
        if_condition_32082 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 638, 13), is_AMD_call_result_32081)
        # Assigning a type to the variable 'if_condition_32082' (line 638)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 638, 13), 'if_condition_32082', if_condition_32082)
        # SSA begins for if statement (line 638)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Evaluating a boolean operation
        
        # Evaluating a boolean operation
        
        
        # Obtaining the type of the subscript
        str_32083 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 639, 33), 'str', 'Family')
        
        # Obtaining the type of the subscript
        int_32084 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 639, 30), 'int')
        # Getting the type of 'self' (line 639)
        self_32085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 20), 'self')
        # Obtaining the member 'info' of a type (line 639)
        info_32086 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 639, 20), self_32085, 'info')
        # Obtaining the member '__getitem__' of a type (line 639)
        getitem___32087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 639, 20), info_32086, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 639)
        subscript_call_result_32088 = invoke(stypy.reporting.localization.Localization(__file__, 639, 20), getitem___32087, int_32084)
        
        # Obtaining the member '__getitem__' of a type (line 639)
        getitem___32089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 639, 20), subscript_call_result_32088, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 639)
        subscript_call_result_32090 = invoke(stypy.reporting.localization.Localization(__file__, 639, 20), getitem___32089, str_32083)
        
        int_32091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 639, 44), 'int')
        # Applying the binary operator '==' (line 639)
        result_eq_32092 = python_operator(stypy.reporting.localization.Localization(__file__, 639, 20), '==', subscript_call_result_32090, int_32091)
        
        
        
        # Obtaining the type of the subscript
        str_32093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 640, 33), 'str', 'Model')
        
        # Obtaining the type of the subscript
        int_32094 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 640, 30), 'int')
        # Getting the type of 'self' (line 640)
        self_32095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 20), 'self')
        # Obtaining the member 'info' of a type (line 640)
        info_32096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 640, 20), self_32095, 'info')
        # Obtaining the member '__getitem__' of a type (line 640)
        getitem___32097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 640, 20), info_32096, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 640)
        subscript_call_result_32098 = invoke(stypy.reporting.localization.Localization(__file__, 640, 20), getitem___32097, int_32094)
        
        # Obtaining the member '__getitem__' of a type (line 640)
        getitem___32099 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 640, 20), subscript_call_result_32098, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 640)
        subscript_call_result_32100 = invoke(stypy.reporting.localization.Localization(__file__, 640, 20), getitem___32099, str_32093)
        
        
        # Obtaining an instance of the builtin type 'list' (line 640)
        list_32101 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 640, 45), 'list')
        # Adding type elements to the builtin type 'list' instance (line 640)
        # Adding element type (line 640)
        int_32102 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 640, 46), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 640, 45), list_32101, int_32102)
        # Adding element type (line 640)
        int_32103 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 640, 49), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 640, 45), list_32101, int_32103)
        # Adding element type (line 640)
        int_32104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 640, 52), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 640, 45), list_32101, int_32104)
        # Adding element type (line 640)
        int_32105 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 640, 55), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 640, 45), list_32101, int_32105)
        
        # Applying the binary operator 'in' (line 640)
        result_contains_32106 = python_operator(stypy.reporting.localization.Localization(__file__, 640, 20), 'in', subscript_call_result_32100, list_32101)
        
        # Applying the binary operator 'and' (line 639)
        result_and_keyword_32107 = python_operator(stypy.reporting.localization.Localization(__file__, 639, 20), 'and', result_eq_32092, result_contains_32106)
        
        
        
        # Obtaining the type of the subscript
        str_32108 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 641, 36), 'str', 'Family')
        
        # Obtaining the type of the subscript
        int_32109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 641, 33), 'int')
        # Getting the type of 'self' (line 641)
        self_32110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 23), 'self')
        # Obtaining the member 'info' of a type (line 641)
        info_32111 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 641, 23), self_32110, 'info')
        # Obtaining the member '__getitem__' of a type (line 641)
        getitem___32112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 641, 23), info_32111, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 641)
        subscript_call_result_32113 = invoke(stypy.reporting.localization.Localization(__file__, 641, 23), getitem___32112, int_32109)
        
        # Obtaining the member '__getitem__' of a type (line 641)
        getitem___32114 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 641, 23), subscript_call_result_32113, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 641)
        subscript_call_result_32115 = invoke(stypy.reporting.localization.Localization(__file__, 641, 23), getitem___32114, str_32108)
        
        int_32116 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 641, 47), 'int')
        # Applying the binary operator '==' (line 641)
        result_eq_32117 = python_operator(stypy.reporting.localization.Localization(__file__, 641, 23), '==', subscript_call_result_32115, int_32116)
        
        # Applying the binary operator 'or' (line 639)
        result_or_keyword_32118 = python_operator(stypy.reporting.localization.Localization(__file__, 639, 19), 'or', result_and_keyword_32107, result_eq_32117)
        
        # Assigning a type to the variable 'stypy_return_type' (line 639)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 639, 12), 'stypy_return_type', result_or_keyword_32118)
        # SSA branch for the else part of an if statement (line 638)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'False' (line 643)
        False_32119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 19), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 643)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 643, 12), 'stypy_return_type', False_32119)
        # SSA join for if statement (line 638)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 634)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_has_sse(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_has_sse' in the type store
        # Getting the type of 'stypy_return_type' (line 633)
        stypy_return_type_32120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 633, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_32120)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_has_sse'
        return stypy_return_type_32120


    @norecursion
    def _has_sse2(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_has_sse2'
        module_type_store = module_type_store.open_function_context('_has_sse2', 645, 4, False)
        # Assigning a type to the variable 'self' (line 646)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 646, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Win32CPUInfo._has_sse2.__dict__.__setitem__('stypy_localization', localization)
        Win32CPUInfo._has_sse2.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Win32CPUInfo._has_sse2.__dict__.__setitem__('stypy_type_store', module_type_store)
        Win32CPUInfo._has_sse2.__dict__.__setitem__('stypy_function_name', 'Win32CPUInfo._has_sse2')
        Win32CPUInfo._has_sse2.__dict__.__setitem__('stypy_param_names_list', [])
        Win32CPUInfo._has_sse2.__dict__.__setitem__('stypy_varargs_param_name', None)
        Win32CPUInfo._has_sse2.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Win32CPUInfo._has_sse2.__dict__.__setitem__('stypy_call_defaults', defaults)
        Win32CPUInfo._has_sse2.__dict__.__setitem__('stypy_call_varargs', varargs)
        Win32CPUInfo._has_sse2.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Win32CPUInfo._has_sse2.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Win32CPUInfo._has_sse2', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_has_sse2', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_has_sse2(...)' code ##################

        
        
        # Call to is_Intel(...): (line 646)
        # Processing the call keyword arguments (line 646)
        kwargs_32123 = {}
        # Getting the type of 'self' (line 646)
        self_32121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 646, 11), 'self', False)
        # Obtaining the member 'is_Intel' of a type (line 646)
        is_Intel_32122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 646, 11), self_32121, 'is_Intel')
        # Calling is_Intel(args, kwargs) (line 646)
        is_Intel_call_result_32124 = invoke(stypy.reporting.localization.Localization(__file__, 646, 11), is_Intel_32122, *[], **kwargs_32123)
        
        # Testing the type of an if condition (line 646)
        if_condition_32125 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 646, 8), is_Intel_call_result_32124)
        # Assigning a type to the variable 'if_condition_32125' (line 646)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 646, 8), 'if_condition_32125', if_condition_32125)
        # SSA begins for if statement (line 646)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Evaluating a boolean operation
        
        # Call to is_Pentium4(...): (line 647)
        # Processing the call keyword arguments (line 647)
        kwargs_32128 = {}
        # Getting the type of 'self' (line 647)
        self_32126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 19), 'self', False)
        # Obtaining the member 'is_Pentium4' of a type (line 647)
        is_Pentium4_32127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 647, 19), self_32126, 'is_Pentium4')
        # Calling is_Pentium4(args, kwargs) (line 647)
        is_Pentium4_call_result_32129 = invoke(stypy.reporting.localization.Localization(__file__, 647, 19), is_Pentium4_32127, *[], **kwargs_32128)
        
        
        # Call to is_PentiumM(...): (line 647)
        # Processing the call keyword arguments (line 647)
        kwargs_32132 = {}
        # Getting the type of 'self' (line 647)
        self_32130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 41), 'self', False)
        # Obtaining the member 'is_PentiumM' of a type (line 647)
        is_PentiumM_32131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 647, 41), self_32130, 'is_PentiumM')
        # Calling is_PentiumM(args, kwargs) (line 647)
        is_PentiumM_call_result_32133 = invoke(stypy.reporting.localization.Localization(__file__, 647, 41), is_PentiumM_32131, *[], **kwargs_32132)
        
        # Applying the binary operator 'or' (line 647)
        result_or_keyword_32134 = python_operator(stypy.reporting.localization.Localization(__file__, 647, 19), 'or', is_Pentium4_call_result_32129, is_PentiumM_call_result_32133)
        
        # Call to is_Core2(...): (line 648)
        # Processing the call keyword arguments (line 648)
        kwargs_32137 = {}
        # Getting the type of 'self' (line 648)
        self_32135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 22), 'self', False)
        # Obtaining the member 'is_Core2' of a type (line 648)
        is_Core2_32136 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 648, 22), self_32135, 'is_Core2')
        # Calling is_Core2(args, kwargs) (line 648)
        is_Core2_call_result_32138 = invoke(stypy.reporting.localization.Localization(__file__, 648, 22), is_Core2_32136, *[], **kwargs_32137)
        
        # Applying the binary operator 'or' (line 647)
        result_or_keyword_32139 = python_operator(stypy.reporting.localization.Localization(__file__, 647, 19), 'or', result_or_keyword_32134, is_Core2_call_result_32138)
        
        # Assigning a type to the variable 'stypy_return_type' (line 647)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 647, 12), 'stypy_return_type', result_or_keyword_32139)
        # SSA branch for the else part of an if statement (line 646)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to is_AMD(...): (line 649)
        # Processing the call keyword arguments (line 649)
        kwargs_32142 = {}
        # Getting the type of 'self' (line 649)
        self_32140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 13), 'self', False)
        # Obtaining the member 'is_AMD' of a type (line 649)
        is_AMD_32141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 649, 13), self_32140, 'is_AMD')
        # Calling is_AMD(args, kwargs) (line 649)
        is_AMD_call_result_32143 = invoke(stypy.reporting.localization.Localization(__file__, 649, 13), is_AMD_32141, *[], **kwargs_32142)
        
        # Testing the type of an if condition (line 649)
        if_condition_32144 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 649, 13), is_AMD_call_result_32143)
        # Assigning a type to the variable 'if_condition_32144' (line 649)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 649, 13), 'if_condition_32144', if_condition_32144)
        # SSA begins for if statement (line 649)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to is_AMD64(...): (line 650)
        # Processing the call keyword arguments (line 650)
        kwargs_32147 = {}
        # Getting the type of 'self' (line 650)
        self_32145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 19), 'self', False)
        # Obtaining the member 'is_AMD64' of a type (line 650)
        is_AMD64_32146 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 650, 19), self_32145, 'is_AMD64')
        # Calling is_AMD64(args, kwargs) (line 650)
        is_AMD64_call_result_32148 = invoke(stypy.reporting.localization.Localization(__file__, 650, 19), is_AMD64_32146, *[], **kwargs_32147)
        
        # Assigning a type to the variable 'stypy_return_type' (line 650)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 650, 12), 'stypy_return_type', is_AMD64_call_result_32148)
        # SSA branch for the else part of an if statement (line 649)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'False' (line 652)
        False_32149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 19), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 652)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 652, 12), 'stypy_return_type', False_32149)
        # SSA join for if statement (line 649)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 646)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_has_sse2(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_has_sse2' in the type store
        # Getting the type of 'stypy_return_type' (line 645)
        stypy_return_type_32150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 645, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_32150)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_has_sse2'
        return stypy_return_type_32150


    @norecursion
    def _has_3dnow(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_has_3dnow'
        module_type_store = module_type_store.open_function_context('_has_3dnow', 654, 4, False)
        # Assigning a type to the variable 'self' (line 655)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 655, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Win32CPUInfo._has_3dnow.__dict__.__setitem__('stypy_localization', localization)
        Win32CPUInfo._has_3dnow.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Win32CPUInfo._has_3dnow.__dict__.__setitem__('stypy_type_store', module_type_store)
        Win32CPUInfo._has_3dnow.__dict__.__setitem__('stypy_function_name', 'Win32CPUInfo._has_3dnow')
        Win32CPUInfo._has_3dnow.__dict__.__setitem__('stypy_param_names_list', [])
        Win32CPUInfo._has_3dnow.__dict__.__setitem__('stypy_varargs_param_name', None)
        Win32CPUInfo._has_3dnow.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Win32CPUInfo._has_3dnow.__dict__.__setitem__('stypy_call_defaults', defaults)
        Win32CPUInfo._has_3dnow.__dict__.__setitem__('stypy_call_varargs', varargs)
        Win32CPUInfo._has_3dnow.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Win32CPUInfo._has_3dnow.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Win32CPUInfo._has_3dnow', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_has_3dnow', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_has_3dnow(...)' code ##################

        
        # Evaluating a boolean operation
        
        # Call to is_AMD(...): (line 655)
        # Processing the call keyword arguments (line 655)
        kwargs_32153 = {}
        # Getting the type of 'self' (line 655)
        self_32151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 655, 15), 'self', False)
        # Obtaining the member 'is_AMD' of a type (line 655)
        is_AMD_32152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 655, 15), self_32151, 'is_AMD')
        # Calling is_AMD(args, kwargs) (line 655)
        is_AMD_call_result_32154 = invoke(stypy.reporting.localization.Localization(__file__, 655, 15), is_AMD_32152, *[], **kwargs_32153)
        
        
        
        # Obtaining the type of the subscript
        str_32155 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 655, 46), 'str', 'Family')
        
        # Obtaining the type of the subscript
        int_32156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 655, 43), 'int')
        # Getting the type of 'self' (line 655)
        self_32157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 655, 33), 'self')
        # Obtaining the member 'info' of a type (line 655)
        info_32158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 655, 33), self_32157, 'info')
        # Obtaining the member '__getitem__' of a type (line 655)
        getitem___32159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 655, 33), info_32158, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 655)
        subscript_call_result_32160 = invoke(stypy.reporting.localization.Localization(__file__, 655, 33), getitem___32159, int_32156)
        
        # Obtaining the member '__getitem__' of a type (line 655)
        getitem___32161 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 655, 33), subscript_call_result_32160, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 655)
        subscript_call_result_32162 = invoke(stypy.reporting.localization.Localization(__file__, 655, 33), getitem___32161, str_32155)
        
        
        # Obtaining an instance of the builtin type 'list' (line 655)
        list_32163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 655, 59), 'list')
        # Adding type elements to the builtin type 'list' instance (line 655)
        # Adding element type (line 655)
        int_32164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 655, 60), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 655, 59), list_32163, int_32164)
        # Adding element type (line 655)
        int_32165 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 655, 63), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 655, 59), list_32163, int_32165)
        # Adding element type (line 655)
        int_32166 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 655, 66), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 655, 59), list_32163, int_32166)
        
        # Applying the binary operator 'in' (line 655)
        result_contains_32167 = python_operator(stypy.reporting.localization.Localization(__file__, 655, 33), 'in', subscript_call_result_32162, list_32163)
        
        # Applying the binary operator 'and' (line 655)
        result_and_keyword_32168 = python_operator(stypy.reporting.localization.Localization(__file__, 655, 15), 'and', is_AMD_call_result_32154, result_contains_32167)
        
        # Assigning a type to the variable 'stypy_return_type' (line 655)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 655, 8), 'stypy_return_type', result_and_keyword_32168)
        
        # ################# End of '_has_3dnow(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_has_3dnow' in the type store
        # Getting the type of 'stypy_return_type' (line 654)
        stypy_return_type_32169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 654, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_32169)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_has_3dnow'
        return stypy_return_type_32169


    @norecursion
    def _has_3dnowext(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_has_3dnowext'
        module_type_store = module_type_store.open_function_context('_has_3dnowext', 657, 4, False)
        # Assigning a type to the variable 'self' (line 658)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 658, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Win32CPUInfo._has_3dnowext.__dict__.__setitem__('stypy_localization', localization)
        Win32CPUInfo._has_3dnowext.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Win32CPUInfo._has_3dnowext.__dict__.__setitem__('stypy_type_store', module_type_store)
        Win32CPUInfo._has_3dnowext.__dict__.__setitem__('stypy_function_name', 'Win32CPUInfo._has_3dnowext')
        Win32CPUInfo._has_3dnowext.__dict__.__setitem__('stypy_param_names_list', [])
        Win32CPUInfo._has_3dnowext.__dict__.__setitem__('stypy_varargs_param_name', None)
        Win32CPUInfo._has_3dnowext.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Win32CPUInfo._has_3dnowext.__dict__.__setitem__('stypy_call_defaults', defaults)
        Win32CPUInfo._has_3dnowext.__dict__.__setitem__('stypy_call_varargs', varargs)
        Win32CPUInfo._has_3dnowext.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Win32CPUInfo._has_3dnowext.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Win32CPUInfo._has_3dnowext', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_has_3dnowext', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_has_3dnowext(...)' code ##################

        
        # Evaluating a boolean operation
        
        # Call to is_AMD(...): (line 658)
        # Processing the call keyword arguments (line 658)
        kwargs_32172 = {}
        # Getting the type of 'self' (line 658)
        self_32170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 15), 'self', False)
        # Obtaining the member 'is_AMD' of a type (line 658)
        is_AMD_32171 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 658, 15), self_32170, 'is_AMD')
        # Calling is_AMD(args, kwargs) (line 658)
        is_AMD_call_result_32173 = invoke(stypy.reporting.localization.Localization(__file__, 658, 15), is_AMD_32171, *[], **kwargs_32172)
        
        
        
        # Obtaining the type of the subscript
        str_32174 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 658, 46), 'str', 'Family')
        
        # Obtaining the type of the subscript
        int_32175 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 658, 43), 'int')
        # Getting the type of 'self' (line 658)
        self_32176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 33), 'self')
        # Obtaining the member 'info' of a type (line 658)
        info_32177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 658, 33), self_32176, 'info')
        # Obtaining the member '__getitem__' of a type (line 658)
        getitem___32178 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 658, 33), info_32177, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 658)
        subscript_call_result_32179 = invoke(stypy.reporting.localization.Localization(__file__, 658, 33), getitem___32178, int_32175)
        
        # Obtaining the member '__getitem__' of a type (line 658)
        getitem___32180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 658, 33), subscript_call_result_32179, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 658)
        subscript_call_result_32181 = invoke(stypy.reporting.localization.Localization(__file__, 658, 33), getitem___32180, str_32174)
        
        
        # Obtaining an instance of the builtin type 'list' (line 658)
        list_32182 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 658, 59), 'list')
        # Adding type elements to the builtin type 'list' instance (line 658)
        # Adding element type (line 658)
        int_32183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 658, 60), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 658, 59), list_32182, int_32183)
        # Adding element type (line 658)
        int_32184 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 658, 63), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 658, 59), list_32182, int_32184)
        
        # Applying the binary operator 'in' (line 658)
        result_contains_32185 = python_operator(stypy.reporting.localization.Localization(__file__, 658, 33), 'in', subscript_call_result_32181, list_32182)
        
        # Applying the binary operator 'and' (line 658)
        result_and_keyword_32186 = python_operator(stypy.reporting.localization.Localization(__file__, 658, 15), 'and', is_AMD_call_result_32173, result_contains_32185)
        
        # Assigning a type to the variable 'stypy_return_type' (line 658)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 658, 8), 'stypy_return_type', result_and_keyword_32186)
        
        # ################# End of '_has_3dnowext(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_has_3dnowext' in the type store
        # Getting the type of 'stypy_return_type' (line 657)
        stypy_return_type_32187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 657, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_32187)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_has_3dnowext'
        return stypy_return_type_32187


# Assigning a type to the variable 'Win32CPUInfo' (line 479)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 479, 0), 'Win32CPUInfo', Win32CPUInfo)

# Assigning a Name to a Name (line 481):
# Getting the type of 'None' (line 481)
None_32188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 11), 'None')
# Getting the type of 'Win32CPUInfo'
Win32CPUInfo_32189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Win32CPUInfo')
# Setting the type of the member 'info' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Win32CPUInfo_32189, 'info', None_32188)

# Assigning a Str to a Name (line 482):
str_32190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 482, 11), 'str', 'HARDWARE\\DESCRIPTION\\System\\CentralProcessor')
# Getting the type of 'Win32CPUInfo'
Win32CPUInfo_32191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Win32CPUInfo')
# Setting the type of the member 'pkey' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Win32CPUInfo_32191, 'pkey', str_32190)


# Call to startswith(...): (line 660)
# Processing the call arguments (line 660)
str_32195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 660, 27), 'str', 'linux')
# Processing the call keyword arguments (line 660)
kwargs_32196 = {}
# Getting the type of 'sys' (line 660)
sys_32192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 3), 'sys', False)
# Obtaining the member 'platform' of a type (line 660)
platform_32193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 660, 3), sys_32192, 'platform')
# Obtaining the member 'startswith' of a type (line 660)
startswith_32194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 660, 3), platform_32193, 'startswith')
# Calling startswith(args, kwargs) (line 660)
startswith_call_result_32197 = invoke(stypy.reporting.localization.Localization(__file__, 660, 3), startswith_32194, *[str_32195], **kwargs_32196)

# Testing the type of an if condition (line 660)
if_condition_32198 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 660, 0), startswith_call_result_32197)
# Assigning a type to the variable 'if_condition_32198' (line 660)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 660, 0), 'if_condition_32198', if_condition_32198)
# SSA begins for if statement (line 660)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Assigning a Name to a Name (line 661):

# Assigning a Name to a Name (line 661):
# Getting the type of 'LinuxCPUInfo' (line 661)
LinuxCPUInfo_32199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 14), 'LinuxCPUInfo')
# Assigning a type to the variable 'cpuinfo' (line 661)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 661, 4), 'cpuinfo', LinuxCPUInfo_32199)
# SSA branch for the else part of an if statement (line 660)
module_type_store.open_ssa_branch('else')


# Call to startswith(...): (line 662)
# Processing the call arguments (line 662)
str_32203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 662, 29), 'str', 'irix')
# Processing the call keyword arguments (line 662)
kwargs_32204 = {}
# Getting the type of 'sys' (line 662)
sys_32200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 5), 'sys', False)
# Obtaining the member 'platform' of a type (line 662)
platform_32201 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 662, 5), sys_32200, 'platform')
# Obtaining the member 'startswith' of a type (line 662)
startswith_32202 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 662, 5), platform_32201, 'startswith')
# Calling startswith(args, kwargs) (line 662)
startswith_call_result_32205 = invoke(stypy.reporting.localization.Localization(__file__, 662, 5), startswith_32202, *[str_32203], **kwargs_32204)

# Testing the type of an if condition (line 662)
if_condition_32206 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 662, 5), startswith_call_result_32205)
# Assigning a type to the variable 'if_condition_32206' (line 662)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 662, 5), 'if_condition_32206', if_condition_32206)
# SSA begins for if statement (line 662)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Assigning a Name to a Name (line 663):

# Assigning a Name to a Name (line 663):
# Getting the type of 'IRIXCPUInfo' (line 663)
IRIXCPUInfo_32207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 663, 14), 'IRIXCPUInfo')
# Assigning a type to the variable 'cpuinfo' (line 663)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 663, 4), 'cpuinfo', IRIXCPUInfo_32207)
# SSA branch for the else part of an if statement (line 662)
module_type_store.open_ssa_branch('else')


# Getting the type of 'sys' (line 664)
sys_32208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 5), 'sys')
# Obtaining the member 'platform' of a type (line 664)
platform_32209 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 664, 5), sys_32208, 'platform')
str_32210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 664, 21), 'str', 'darwin')
# Applying the binary operator '==' (line 664)
result_eq_32211 = python_operator(stypy.reporting.localization.Localization(__file__, 664, 5), '==', platform_32209, str_32210)

# Testing the type of an if condition (line 664)
if_condition_32212 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 664, 5), result_eq_32211)
# Assigning a type to the variable 'if_condition_32212' (line 664)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 664, 5), 'if_condition_32212', if_condition_32212)
# SSA begins for if statement (line 664)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Assigning a Name to a Name (line 665):

# Assigning a Name to a Name (line 665):
# Getting the type of 'DarwinCPUInfo' (line 665)
DarwinCPUInfo_32213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 14), 'DarwinCPUInfo')
# Assigning a type to the variable 'cpuinfo' (line 665)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 665, 4), 'cpuinfo', DarwinCPUInfo_32213)
# SSA branch for the else part of an if statement (line 664)
module_type_store.open_ssa_branch('else')


# Call to startswith(...): (line 666)
# Processing the call arguments (line 666)
str_32217 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 666, 29), 'str', 'sunos')
# Processing the call keyword arguments (line 666)
kwargs_32218 = {}
# Getting the type of 'sys' (line 666)
sys_32214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 5), 'sys', False)
# Obtaining the member 'platform' of a type (line 666)
platform_32215 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 666, 5), sys_32214, 'platform')
# Obtaining the member 'startswith' of a type (line 666)
startswith_32216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 666, 5), platform_32215, 'startswith')
# Calling startswith(args, kwargs) (line 666)
startswith_call_result_32219 = invoke(stypy.reporting.localization.Localization(__file__, 666, 5), startswith_32216, *[str_32217], **kwargs_32218)

# Testing the type of an if condition (line 666)
if_condition_32220 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 666, 5), startswith_call_result_32219)
# Assigning a type to the variable 'if_condition_32220' (line 666)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 666, 5), 'if_condition_32220', if_condition_32220)
# SSA begins for if statement (line 666)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Assigning a Name to a Name (line 667):

# Assigning a Name to a Name (line 667):
# Getting the type of 'SunOSCPUInfo' (line 667)
SunOSCPUInfo_32221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 14), 'SunOSCPUInfo')
# Assigning a type to the variable 'cpuinfo' (line 667)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 667, 4), 'cpuinfo', SunOSCPUInfo_32221)
# SSA branch for the else part of an if statement (line 666)
module_type_store.open_ssa_branch('else')


# Call to startswith(...): (line 668)
# Processing the call arguments (line 668)
str_32225 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 668, 29), 'str', 'win32')
# Processing the call keyword arguments (line 668)
kwargs_32226 = {}
# Getting the type of 'sys' (line 668)
sys_32222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 5), 'sys', False)
# Obtaining the member 'platform' of a type (line 668)
platform_32223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 668, 5), sys_32222, 'platform')
# Obtaining the member 'startswith' of a type (line 668)
startswith_32224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 668, 5), platform_32223, 'startswith')
# Calling startswith(args, kwargs) (line 668)
startswith_call_result_32227 = invoke(stypy.reporting.localization.Localization(__file__, 668, 5), startswith_32224, *[str_32225], **kwargs_32226)

# Testing the type of an if condition (line 668)
if_condition_32228 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 668, 5), startswith_call_result_32227)
# Assigning a type to the variable 'if_condition_32228' (line 668)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 668, 5), 'if_condition_32228', if_condition_32228)
# SSA begins for if statement (line 668)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Assigning a Name to a Name (line 669):

# Assigning a Name to a Name (line 669):
# Getting the type of 'Win32CPUInfo' (line 669)
Win32CPUInfo_32229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 14), 'Win32CPUInfo')
# Assigning a type to the variable 'cpuinfo' (line 669)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 669, 4), 'cpuinfo', Win32CPUInfo_32229)
# SSA branch for the else part of an if statement (line 668)
module_type_store.open_ssa_branch('else')


# Call to startswith(...): (line 670)
# Processing the call arguments (line 670)
str_32233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 670, 29), 'str', 'cygwin')
# Processing the call keyword arguments (line 670)
kwargs_32234 = {}
# Getting the type of 'sys' (line 670)
sys_32230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 5), 'sys', False)
# Obtaining the member 'platform' of a type (line 670)
platform_32231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 670, 5), sys_32230, 'platform')
# Obtaining the member 'startswith' of a type (line 670)
startswith_32232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 670, 5), platform_32231, 'startswith')
# Calling startswith(args, kwargs) (line 670)
startswith_call_result_32235 = invoke(stypy.reporting.localization.Localization(__file__, 670, 5), startswith_32232, *[str_32233], **kwargs_32234)

# Testing the type of an if condition (line 670)
if_condition_32236 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 670, 5), startswith_call_result_32235)
# Assigning a type to the variable 'if_condition_32236' (line 670)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 670, 5), 'if_condition_32236', if_condition_32236)
# SSA begins for if statement (line 670)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Assigning a Name to a Name (line 671):

# Assigning a Name to a Name (line 671):
# Getting the type of 'LinuxCPUInfo' (line 671)
LinuxCPUInfo_32237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 14), 'LinuxCPUInfo')
# Assigning a type to the variable 'cpuinfo' (line 671)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 671, 4), 'cpuinfo', LinuxCPUInfo_32237)
# SSA branch for the else part of an if statement (line 670)
module_type_store.open_ssa_branch('else')

# Assigning a Name to a Name (line 674):

# Assigning a Name to a Name (line 674):
# Getting the type of 'CPUInfoBase' (line 674)
CPUInfoBase_32238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 14), 'CPUInfoBase')
# Assigning a type to the variable 'cpuinfo' (line 674)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 674, 4), 'cpuinfo', CPUInfoBase_32238)
# SSA join for if statement (line 670)
module_type_store = module_type_store.join_ssa_context()

# SSA join for if statement (line 668)
module_type_store = module_type_store.join_ssa_context()

# SSA join for if statement (line 666)
module_type_store = module_type_store.join_ssa_context()

# SSA join for if statement (line 664)
module_type_store = module_type_store.join_ssa_context()

# SSA join for if statement (line 662)
module_type_store = module_type_store.join_ssa_context()

# SSA join for if statement (line 660)
module_type_store = module_type_store.join_ssa_context()


# Assigning a Call to a Name (line 676):

# Assigning a Call to a Name (line 676):

# Call to cpuinfo(...): (line 676)
# Processing the call keyword arguments (line 676)
kwargs_32240 = {}
# Getting the type of 'cpuinfo' (line 676)
cpuinfo_32239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 6), 'cpuinfo', False)
# Calling cpuinfo(args, kwargs) (line 676)
cpuinfo_call_result_32241 = invoke(stypy.reporting.localization.Localization(__file__, 676, 6), cpuinfo_32239, *[], **kwargs_32240)

# Assigning a type to the variable 'cpu' (line 676)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 676, 0), 'cpu', cpuinfo_call_result_32241)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
