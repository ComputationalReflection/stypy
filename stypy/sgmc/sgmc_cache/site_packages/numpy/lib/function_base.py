
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: from __future__ import division, absolute_import, print_function
2: 
3: import warnings
4: import sys
5: import collections
6: import operator
7: 
8: import numpy as np
9: import numpy.core.numeric as _nx
10: from numpy.core import linspace, atleast_1d, atleast_2d
11: from numpy.core.numeric import (
12:     ones, zeros, arange, concatenate, array, asarray, asanyarray, empty,
13:     empty_like, ndarray, around, floor, ceil, take, dot, where, intp,
14:     integer, isscalar
15:     )
16: from numpy.core.umath import (
17:     pi, multiply, add, arctan2, frompyfunc, cos, less_equal, sqrt, sin,
18:     mod, exp, log10
19:     )
20: from numpy.core.fromnumeric import (
21:     ravel, nonzero, sort, partition, mean, any, sum
22:     )
23: from numpy.core.numerictypes import typecodes, number
24: from numpy.lib.twodim_base import diag
25: from .utils import deprecate
26: from numpy.core.multiarray import _insert, add_docstring
27: from numpy.core.multiarray import digitize, bincount, interp as compiled_interp
28: from numpy.core.umath import _add_newdoc_ufunc as add_newdoc_ufunc
29: from numpy.compat import long
30: from numpy.compat.py3k import basestring
31: 
32: # Force range to be a generator, for np.delete's usage.
33: if sys.version_info[0] < 3:
34:     range = xrange
35: 
36: 
37: __all__ = [
38:     'select', 'piecewise', 'trim_zeros', 'copy', 'iterable', 'percentile',
39:     'diff', 'gradient', 'angle', 'unwrap', 'sort_complex', 'disp',
40:     'extract', 'place', 'vectorize', 'asarray_chkfinite', 'average',
41:     'histogram', 'histogramdd', 'bincount', 'digitize', 'cov', 'corrcoef',
42:     'msort', 'median', 'sinc', 'hamming', 'hanning', 'bartlett',
43:     'blackman', 'kaiser', 'trapz', 'i0', 'add_newdoc', 'add_docstring',
44:     'meshgrid', 'delete', 'insert', 'append', 'interp', 'add_newdoc_ufunc'
45:     ]
46: 
47: 
48: def iterable(y):
49:     '''
50:     Check whether or not an object can be iterated over.
51: 
52:     Parameters
53:     ----------
54:     y : object
55:       Input object.
56: 
57:     Returns
58:     -------
59:     b : {0, 1}
60:       Return 1 if the object has an iterator method or is a sequence,
61:       and 0 otherwise.
62: 
63: 
64:     Examples
65:     --------
66:     >>> np.iterable([1, 2, 3])
67:     1
68:     >>> np.iterable(2)
69:     0
70: 
71:     '''
72:     try:
73:         iter(y)
74:     except:
75:         return 0
76:     return 1
77: 
78: 
79: def _hist_bin_sqrt(x):
80:     '''
81:     Square root histogram bin estimator.
82: 
83:     Bin width is inversely proportional to the data size. Used by many
84:     programs for its simplicity.
85: 
86:     Parameters
87:     ----------
88:     x : array_like
89:         Input data that is to be histogrammed, trimmed to range. May not
90:         be empty.
91: 
92:     Returns
93:     -------
94:     h : An estimate of the optimal bin width for the given data.
95:     '''
96:     return x.ptp() / np.sqrt(x.size)
97: 
98: 
99: def _hist_bin_sturges(x):
100:     '''
101:     Sturges histogram bin estimator.
102: 
103:     A very simplistic estimator based on the assumption of normality of
104:     the data. This estimator has poor performance for non-normal data,
105:     which becomes especially obvious for large data sets. The estimate
106:     depends only on size of the data.
107: 
108:     Parameters
109:     ----------
110:     x : array_like
111:         Input data that is to be histogrammed, trimmed to range. May not
112:         be empty.
113: 
114:     Returns
115:     -------
116:     h : An estimate of the optimal bin width for the given data.
117:     '''
118:     return x.ptp() / (np.log2(x.size) + 1.0)
119: 
120: 
121: def _hist_bin_rice(x):
122:     '''
123:     Rice histogram bin estimator.
124: 
125:     Another simple estimator with no normality assumption. It has better
126:     performance for large data than Sturges, but tends to overestimate
127:     the number of bins. The number of bins is proportional to the cube
128:     root of data size (asymptotically optimal). The estimate depends
129:     only on size of the data.
130: 
131:     Parameters
132:     ----------
133:     x : array_like
134:         Input data that is to be histogrammed, trimmed to range. May not
135:         be empty.
136: 
137:     Returns
138:     -------
139:     h : An estimate of the optimal bin width for the given data.
140:     '''
141:     return x.ptp() / (2.0 * x.size ** (1.0 / 3))
142: 
143: 
144: def _hist_bin_scott(x):
145:     '''
146:     Scott histogram bin estimator.
147: 
148:     The binwidth is proportional to the standard deviation of the data
149:     and inversely proportional to the cube root of data size
150:     (asymptotically optimal).
151: 
152:     Parameters
153:     ----------
154:     x : array_like
155:         Input data that is to be histogrammed, trimmed to range. May not
156:         be empty.
157: 
158:     Returns
159:     -------
160:     h : An estimate of the optimal bin width for the given data.
161:     '''
162:     return (24.0 * np.pi**0.5 / x.size)**(1.0 / 3.0) * np.std(x)
163: 
164: 
165: def _hist_bin_doane(x):
166:     '''
167:     Doane's histogram bin estimator.
168: 
169:     Improved version of Sturges' formula which works better for
170:     non-normal data. See
171:     http://stats.stackexchange.com/questions/55134/doanes-formula-for-histogram-binning
172: 
173:     Parameters
174:     ----------
175:     x : array_like
176:         Input data that is to be histogrammed, trimmed to range. May not
177:         be empty.
178: 
179:     Returns
180:     -------
181:     h : An estimate of the optimal bin width for the given data.
182:     '''
183:     if x.size > 2:
184:         sg1 = np.sqrt(6.0 * (x.size - 2) / ((x.size + 1.0) * (x.size + 3)))
185:         sigma = np.std(x)
186:         if sigma > 0.0:
187:             # These three operations add up to
188:             # g1 = np.mean(((x - np.mean(x)) / sigma)**3)
189:             # but use only one temp array instead of three
190:             temp = x - np.mean(x)
191:             np.true_divide(temp, sigma, temp)
192:             np.power(temp, 3, temp)
193:             g1 = np.mean(temp)
194:             return x.ptp() / (1.0 + np.log2(x.size) +
195:                                     np.log2(1.0 + np.absolute(g1) / sg1))
196:     return 0.0
197: 
198: 
199: def _hist_bin_fd(x):
200:     '''
201:     The Freedman-Diaconis histogram bin estimator.
202: 
203:     The Freedman-Diaconis rule uses interquartile range (IQR) to
204:     estimate binwidth. It is considered a variation of the Scott rule
205:     with more robustness as the IQR is less affected by outliers than
206:     the standard deviation. However, the IQR depends on fewer points
207:     than the standard deviation, so it is less accurate, especially for
208:     long tailed distributions.
209: 
210:     If the IQR is 0, this function returns 1 for the number of bins.
211:     Binwidth is inversely proportional to the cube root of data size
212:     (asymptotically optimal).
213: 
214:     Parameters
215:     ----------
216:     x : array_like
217:         Input data that is to be histogrammed, trimmed to range. May not
218:         be empty.
219: 
220:     Returns
221:     -------
222:     h : An estimate of the optimal bin width for the given data.
223:     '''
224:     iqr = np.subtract(*np.percentile(x, [75, 25]))
225:     return 2.0 * iqr * x.size ** (-1.0 / 3.0)
226: 
227: 
228: def _hist_bin_auto(x):
229:     '''
230:     Histogram bin estimator that uses the minimum width of the
231:     Freedman-Diaconis and Sturges estimators.
232: 
233:     The FD estimator is usually the most robust method, but its width
234:     estimate tends to be too large for small `x`. The Sturges estimator
235:     is quite good for small (<1000) datasets and is the default in the R
236:     language. This method gives good off the shelf behaviour.
237: 
238:     Parameters
239:     ----------
240:     x : array_like
241:         Input data that is to be histogrammed, trimmed to range. May not
242:         be empty.
243: 
244:     Returns
245:     -------
246:     h : An estimate of the optimal bin width for the given data.
247: 
248:     See Also
249:     --------
250:     _hist_bin_fd, _hist_bin_sturges
251:     '''
252:     # There is no need to check for zero here. If ptp is, so is IQR and
253:     # vice versa. Either both are zero or neither one is.
254:     return min(_hist_bin_fd(x), _hist_bin_sturges(x))
255: 
256: 
257: # Private dict initialized at module load time
258: _hist_bin_selectors = {'auto': _hist_bin_auto,
259:                        'doane': _hist_bin_doane,
260:                        'fd': _hist_bin_fd,
261:                        'rice': _hist_bin_rice,
262:                        'scott': _hist_bin_scott,
263:                        'sqrt': _hist_bin_sqrt,
264:                        'sturges': _hist_bin_sturges}
265: 
266: 
267: def histogram(a, bins=10, range=None, normed=False, weights=None,
268:               density=None):
269:     r'''
270:     Compute the histogram of a set of data.
271: 
272:     Parameters
273:     ----------
274:     a : array_like
275:         Input data. The histogram is computed over the flattened array.
276:     bins : int or sequence of scalars or str, optional
277:         If `bins` is an int, it defines the number of equal-width
278:         bins in the given range (10, by default). If `bins` is a
279:         sequence, it defines the bin edges, including the rightmost
280:         edge, allowing for non-uniform bin widths.
281: 
282:         .. versionadded:: 1.11.0
283: 
284:         If `bins` is a string from the list below, `histogram` will use
285:         the method chosen to calculate the optimal bin width and
286:         consequently the number of bins (see `Notes` for more detail on
287:         the estimators) from the data that falls within the requested
288:         range. While the bin width will be optimal for the actual data
289:         in the range, the number of bins will be computed to fill the
290:         entire range, including the empty portions. For visualisation,
291:         using the 'auto' option is suggested. Weighted data is not
292:         supported for automated bin size selection.
293: 
294:         'auto'
295:             Maximum of the 'sturges' and 'fd' estimators. Provides good
296:             all round performance
297: 
298:         'fd' (Freedman Diaconis Estimator)
299:             Robust (resilient to outliers) estimator that takes into
300:             account data variability and data size .
301: 
302:         'doane'
303:             An improved version of Sturges' estimator that works better
304:             with non-normal datasets.
305: 
306:         'scott'
307:             Less robust estimator that that takes into account data
308:             variability and data size.
309: 
310:         'rice'
311:             Estimator does not take variability into account, only data
312:             size. Commonly overestimates number of bins required.
313: 
314:         'sturges'
315:             R's default method, only accounts for data size. Only
316:             optimal for gaussian data and underestimates number of bins
317:             for large non-gaussian datasets.
318: 
319:         'sqrt'
320:             Square root (of data size) estimator, used by Excel and
321:             other programs for its speed and simplicity.
322: 
323:     range : (float, float), optional
324:         The lower and upper range of the bins.  If not provided, range
325:         is simply ``(a.min(), a.max())``.  Values outside the range are
326:         ignored. The first element of the range must be less than or
327:         equal to the second. `range` affects the automatic bin
328:         computation as well. While bin width is computed to be optimal
329:         based on the actual data within `range`, the bin count will fill
330:         the entire range including portions containing no data.
331:     normed : bool, optional
332:         This keyword is deprecated in Numpy 1.6 due to confusing/buggy
333:         behavior. It will be removed in Numpy 2.0. Use the ``density``
334:         keyword instead. If ``False``, the result will contain the
335:         number of samples in each bin. If ``True``, the result is the
336:         value of the probability *density* function at the bin,
337:         normalized such that the *integral* over the range is 1. Note
338:         that this latter behavior is known to be buggy with unequal bin
339:         widths; use ``density`` instead.
340:     weights : array_like, optional
341:         An array of weights, of the same shape as `a`.  Each value in
342:         `a` only contributes its associated weight towards the bin count
343:         (instead of 1). If `density` is True, the weights are
344:         normalized, so that the integral of the density over the range
345:         remains 1.
346:     density : bool, optional
347:         If ``False``, the result will contain the number of samples in
348:         each bin. If ``True``, the result is the value of the
349:         probability *density* function at the bin, normalized such that
350:         the *integral* over the range is 1. Note that the sum of the
351:         histogram values will not be equal to 1 unless bins of unity
352:         width are chosen; it is not a probability *mass* function.
353: 
354:         Overrides the ``normed`` keyword if given.
355: 
356:     Returns
357:     -------
358:     hist : array
359:         The values of the histogram. See `density` and `weights` for a
360:         description of the possible semantics.
361:     bin_edges : array of dtype float
362:         Return the bin edges ``(length(hist)+1)``.
363: 
364: 
365:     See Also
366:     --------
367:     histogramdd, bincount, searchsorted, digitize
368: 
369:     Notes
370:     -----
371:     All but the last (righthand-most) bin is half-open.  In other words,
372:     if `bins` is::
373: 
374:       [1, 2, 3, 4]
375: 
376:     then the first bin is ``[1, 2)`` (including 1, but excluding 2) and
377:     the second ``[2, 3)``.  The last bin, however, is ``[3, 4]``, which
378:     *includes* 4.
379: 
380:     .. versionadded:: 1.11.0
381: 
382:     The methods to estimate the optimal number of bins are well founded
383:     in literature, and are inspired by the choices R provides for
384:     histogram visualisation. Note that having the number of bins
385:     proportional to :math:`n^{1/3}` is asymptotically optimal, which is
386:     why it appears in most estimators. These are simply plug-in methods
387:     that give good starting points for number of bins. In the equations
388:     below, :math:`h` is the binwidth and :math:`n_h` is the number of
389:     bins. All estimators that compute bin counts are recast to bin width
390:     using the `ptp` of the data. The final bin count is obtained from
391:     ``np.round(np.ceil(range / h))`.
392: 
393:     'Auto' (maximum of the 'Sturges' and 'FD' estimators)
394:         A compromise to get a good value. For small datasets the Sturges
395:         value will usually be chosen, while larger datasets will usually
396:         default to FD.  Avoids the overly conservative behaviour of FD
397:         and Sturges for small and large datasets respectively.
398:         Switchover point is usually :math:`a.size \approx 1000`.
399: 
400:     'FD' (Freedman Diaconis Estimator)
401:         .. math:: h = 2 \frac{IQR}{n^{1/3}}
402: 
403:         The binwidth is proportional to the interquartile range (IQR)
404:         and inversely proportional to cube root of a.size. Can be too
405:         conservative for small datasets, but is quite good for large
406:         datasets. The IQR is very robust to outliers.
407: 
408:     'Scott'
409:         .. math:: h = \sigma \sqrt[3]{\frac{24 * \sqrt{\pi}}{n}}
410: 
411:         The binwidth is proportional to the standard deviation of the
412:         data and inversely proportional to cube root of ``x.size``. Can
413:         be too conservative for small datasets, but is quite good for
414:         large datasets. The standard deviation is not very robust to
415:         outliers. Values are very similar to the Freedman-Diaconis
416:         estimator in the absence of outliers.
417: 
418:     'Rice'
419:         .. math:: n_h = 2n^{1/3}
420: 
421:         The number of bins is only proportional to cube root of
422:         ``a.size``. It tends to overestimate the number of bins and it
423:         does not take into account data variability.
424: 
425:     'Sturges'
426:         .. math:: n_h = \log _{2}n+1
427: 
428:         The number of bins is the base 2 log of ``a.size``.  This
429:         estimator assumes normality of data and is too conservative for
430:         larger, non-normal datasets. This is the default method in R's
431:         ``hist`` method.
432: 
433:     'Doane'
434:         .. math:: n_h = 1 + \log_{2}(n) +
435:                         \log_{2}(1 + \frac{|g_1|}{\sigma_{g_1})}
436: 
437:             g_1 = mean[(\frac{x - \mu}{\sigma})^3]
438: 
439:             \sigma_{g_1} = \sqrt{\frac{6(n - 2)}{(n + 1)(n + 3)}}
440: 
441:         An improved version of Sturges' formula that produces better
442:         estimates for non-normal datasets. This estimator attempts to
443:         account for the skew of the data.
444: 
445:     'Sqrt'
446:         .. math:: n_h = \sqrt n
447:         The simplest and fastest estimator. Only takes into account the
448:         data size.
449: 
450:     Examples
451:     --------
452:     >>> np.histogram([1, 2, 1], bins=[0, 1, 2, 3])
453:     (array([0, 2, 1]), array([0, 1, 2, 3]))
454:     >>> np.histogram(np.arange(4), bins=np.arange(5), density=True)
455:     (array([ 0.25,  0.25,  0.25,  0.25]), array([0, 1, 2, 3, 4]))
456:     >>> np.histogram([[1, 2, 1], [1, 0, 1]], bins=[0,1,2,3])
457:     (array([1, 4, 1]), array([0, 1, 2, 3]))
458: 
459:     >>> a = np.arange(5)
460:     >>> hist, bin_edges = np.histogram(a, density=True)
461:     >>> hist
462:     array([ 0.5,  0. ,  0.5,  0. ,  0. ,  0.5,  0. ,  0.5,  0. ,  0.5])
463:     >>> hist.sum()
464:     2.4999999999999996
465:     >>> np.sum(hist*np.diff(bin_edges))
466:     1.0
467: 
468:     .. versionadded:: 1.11.0
469: 
470:     Automated Bin Selection Methods example, using 2 peak random data
471:     with 2000 points:
472: 
473:     >>> import matplotlib.pyplot as plt
474:     >>> rng = np.random.RandomState(10)  # deterministic random data
475:     >>> a = np.hstack((rng.normal(size=1000),
476:     ...                rng.normal(loc=5, scale=2, size=1000)))
477:     >>> plt.hist(a, bins='auto')  # plt.hist passes it's arguments to np.histogram
478:     >>> plt.title("Histogram with 'auto' bins")
479:     >>> plt.show()
480: 
481:     '''
482:     a = asarray(a)
483:     if weights is not None:
484:         weights = asarray(weights)
485:         if np.any(weights.shape != a.shape):
486:             raise ValueError(
487:                 'weights should have the same shape as a.')
488:         weights = weights.ravel()
489:     a = a.ravel()
490: 
491:     # Do not modify the original value of range so we can check for `None`
492:     if range is None:
493:         if a.size == 0:
494:             # handle empty arrays. Can't determine range, so use 0-1.
495:             mn, mx = 0.0, 1.0
496:         else:
497:             mn, mx = a.min() + 0.0, a.max() + 0.0
498:     else:
499:         mn, mx = [mi + 0.0 for mi in range]
500:     if mn > mx:
501:         raise ValueError(
502:             'max must be larger than min in range parameter.')
503:     if not np.all(np.isfinite([mn, mx])):
504:         raise ValueError(
505:             'range parameter must be finite.')
506:     if mn == mx:
507:         mn -= 0.5
508:         mx += 0.5
509: 
510:     if isinstance(bins, basestring):
511:         # if `bins` is a string for an automatic method,
512:         # this will replace it with the number of bins calculated
513:         if bins not in _hist_bin_selectors:
514:             raise ValueError("{0} not a valid estimator for bins".format(bins))
515:         if weights is not None:
516:             raise TypeError("Automated estimation of the number of "
517:                             "bins is not supported for weighted data")
518:         # Make a reference to `a`
519:         b = a
520:         # Update the reference if the range needs truncation
521:         if range is not None:
522:             keep = (a >= mn)
523:             keep &= (a <= mx)
524:             if not np.logical_and.reduce(keep):
525:                 b = a[keep]
526: 
527:         if b.size == 0:
528:             bins = 1
529:         else:
530:             # Do not call selectors on empty arrays
531:             width = _hist_bin_selectors[bins](b)
532:             if width:
533:                 bins = int(np.ceil((mx - mn) / width))
534:             else:
535:                 # Width can be zero for some estimators, e.g. FD when
536:                 # the IQR of the data is zero.
537:                 bins = 1
538: 
539:     # Histogram is an integer or a float array depending on the weights.
540:     if weights is None:
541:         ntype = np.dtype(np.intp)
542:     else:
543:         ntype = weights.dtype
544: 
545:     # We set a block size, as this allows us to iterate over chunks when
546:     # computing histograms, to minimize memory usage.
547:     BLOCK = 65536
548: 
549:     if not iterable(bins):
550:         if np.isscalar(bins) and bins < 1:
551:             raise ValueError(
552:                 '`bins` should be a positive integer.')
553:         # At this point, if the weights are not integer, floating point, or
554:         # complex, we have to use the slow algorithm.
555:         if weights is not None and not (np.can_cast(weights.dtype, np.double) or
556:                                         np.can_cast(weights.dtype, np.complex)):
557:             bins = linspace(mn, mx, bins + 1, endpoint=True)
558: 
559:     if not iterable(bins):
560:         # We now convert values of a to bin indices, under the assumption of
561:         # equal bin widths (which is valid here).
562: 
563:         # Initialize empty histogram
564:         n = np.zeros(bins, ntype)
565:         # Pre-compute histogram scaling factor
566:         norm = bins / (mx - mn)
567: 
568:         # We iterate over blocks here for two reasons: the first is that for
569:         # large arrays, it is actually faster (for example for a 10^8 array it
570:         # is 2x as fast) and it results in a memory footprint 3x lower in the
571:         # limit of large arrays.
572:         for i in arange(0, len(a), BLOCK):
573:             tmp_a = a[i:i+BLOCK]
574:             if weights is None:
575:                 tmp_w = None
576:             else:
577:                 tmp_w = weights[i:i + BLOCK]
578: 
579:             # Only include values in the right range
580:             keep = (tmp_a >= mn)
581:             keep &= (tmp_a <= mx)
582:             if not np.logical_and.reduce(keep):
583:                 tmp_a = tmp_a[keep]
584:                 if tmp_w is not None:
585:                     tmp_w = tmp_w[keep]
586:             tmp_a = tmp_a.astype(float)
587:             tmp_a -= mn
588:             tmp_a *= norm
589: 
590:             # Compute the bin indices, and for values that lie exactly on mx we
591:             # need to subtract one
592:             indices = tmp_a.astype(np.intp)
593:             indices[indices == bins] -= 1
594: 
595:             # We now compute the histogram using bincount
596:             if ntype.kind == 'c':
597:                 n.real += np.bincount(indices, weights=tmp_w.real, minlength=bins)
598:                 n.imag += np.bincount(indices, weights=tmp_w.imag, minlength=bins)
599:             else:
600:                 n += np.bincount(indices, weights=tmp_w, minlength=bins).astype(ntype)
601: 
602:         # We now compute the bin edges since these are returned
603:         bins = linspace(mn, mx, bins + 1, endpoint=True)
604:     else:
605:         bins = asarray(bins)
606:         if (np.diff(bins) < 0).any():
607:             raise ValueError(
608:                 'bins must increase monotonically.')
609: 
610:         # Initialize empty histogram
611:         n = np.zeros(bins.shape, ntype)
612: 
613:         if weights is None:
614:             for i in arange(0, len(a), BLOCK):
615:                 sa = sort(a[i:i+BLOCK])
616:                 n += np.r_[sa.searchsorted(bins[:-1], 'left'),
617:                            sa.searchsorted(bins[-1], 'right')]
618:         else:
619:             zero = array(0, dtype=ntype)
620:             for i in arange(0, len(a), BLOCK):
621:                 tmp_a = a[i:i+BLOCK]
622:                 tmp_w = weights[i:i+BLOCK]
623:                 sorting_index = np.argsort(tmp_a)
624:                 sa = tmp_a[sorting_index]
625:                 sw = tmp_w[sorting_index]
626:                 cw = np.concatenate(([zero, ], sw.cumsum()))
627:                 bin_index = np.r_[sa.searchsorted(bins[:-1], 'left'),
628:                                   sa.searchsorted(bins[-1], 'right')]
629:                 n += cw[bin_index]
630: 
631: 
632:         n = np.diff(n)
633: 
634:     if density is not None:
635:         if density:
636:             db = array(np.diff(bins), float)
637:             return n/db/n.sum(), bins
638:         else:
639:             return n, bins
640:     else:
641:         # deprecated, buggy behavior. Remove for Numpy 2.0
642:         if normed:
643:             db = array(np.diff(bins), float)
644:             return n/(n*db).sum(), bins
645:         else:
646:             return n, bins
647: 
648: 
649: def histogramdd(sample, bins=10, range=None, normed=False, weights=None):
650:     '''
651:     Compute the multidimensional histogram of some data.
652: 
653:     Parameters
654:     ----------
655:     sample : array_like
656:         The data to be histogrammed. It must be an (N,D) array or data
657:         that can be converted to such. The rows of the resulting array
658:         are the coordinates of points in a D dimensional polytope.
659:     bins : sequence or int, optional
660:         The bin specification:
661: 
662:         * A sequence of arrays describing the bin edges along each dimension.
663:         * The number of bins for each dimension (nx, ny, ... =bins)
664:         * The number of bins for all dimensions (nx=ny=...=bins).
665: 
666:     range : sequence, optional
667:         A sequence of lower and upper bin edges to be used if the edges are
668:         not given explicitly in `bins`. Defaults to the minimum and maximum
669:         values along each dimension.
670:     normed : bool, optional
671:         If False, returns the number of samples in each bin. If True,
672:         returns the bin density ``bin_count / sample_count / bin_volume``.
673:     weights : (N,) array_like, optional
674:         An array of values `w_i` weighing each sample `(x_i, y_i, z_i, ...)`.
675:         Weights are normalized to 1 if normed is True. If normed is False,
676:         the values of the returned histogram are equal to the sum of the
677:         weights belonging to the samples falling into each bin.
678: 
679:     Returns
680:     -------
681:     H : ndarray
682:         The multidimensional histogram of sample x. See normed and weights
683:         for the different possible semantics.
684:     edges : list
685:         A list of D arrays describing the bin edges for each dimension.
686: 
687:     See Also
688:     --------
689:     histogram: 1-D histogram
690:     histogram2d: 2-D histogram
691: 
692:     Examples
693:     --------
694:     >>> r = np.random.randn(100,3)
695:     >>> H, edges = np.histogramdd(r, bins = (5, 8, 4))
696:     >>> H.shape, edges[0].size, edges[1].size, edges[2].size
697:     ((5, 8, 4), 6, 9, 5)
698: 
699:     '''
700: 
701:     try:
702:         # Sample is an ND-array.
703:         N, D = sample.shape
704:     except (AttributeError, ValueError):
705:         # Sample is a sequence of 1D arrays.
706:         sample = atleast_2d(sample).T
707:         N, D = sample.shape
708: 
709:     nbin = empty(D, int)
710:     edges = D*[None]
711:     dedges = D*[None]
712:     if weights is not None:
713:         weights = asarray(weights)
714: 
715:     try:
716:         M = len(bins)
717:         if M != D:
718:             raise ValueError(
719:                 'The dimension of bins must be equal to the dimension of the '
720:                 ' sample x.')
721:     except TypeError:
722:         # bins is an integer
723:         bins = D*[bins]
724: 
725:     # Select range for each dimension
726:     # Used only if number of bins is given.
727:     if range is None:
728:         # Handle empty input. Range can't be determined in that case, use 0-1.
729:         if N == 0:
730:             smin = zeros(D)
731:             smax = ones(D)
732:         else:
733:             smin = atleast_1d(array(sample.min(0), float))
734:             smax = atleast_1d(array(sample.max(0), float))
735:     else:
736:         if not np.all(np.isfinite(range)):
737:             raise ValueError(
738:                 'range parameter must be finite.')
739:         smin = zeros(D)
740:         smax = zeros(D)
741:         for i in arange(D):
742:             smin[i], smax[i] = range[i]
743: 
744:     # Make sure the bins have a finite width.
745:     for i in arange(len(smin)):
746:         if smin[i] == smax[i]:
747:             smin[i] = smin[i] - .5
748:             smax[i] = smax[i] + .5
749: 
750:     # avoid rounding issues for comparisons when dealing with inexact types
751:     if np.issubdtype(sample.dtype, np.inexact):
752:         edge_dt = sample.dtype
753:     else:
754:         edge_dt = float
755:     # Create edge arrays
756:     for i in arange(D):
757:         if isscalar(bins[i]):
758:             if bins[i] < 1:
759:                 raise ValueError(
760:                     "Element at index %s in `bins` should be a positive "
761:                     "integer." % i)
762:             nbin[i] = bins[i] + 2  # +2 for outlier bins
763:             edges[i] = linspace(smin[i], smax[i], nbin[i]-1, dtype=edge_dt)
764:         else:
765:             edges[i] = asarray(bins[i], edge_dt)
766:             nbin[i] = len(edges[i]) + 1  # +1 for outlier bins
767:         dedges[i] = diff(edges[i])
768:         if np.any(np.asarray(dedges[i]) <= 0):
769:             raise ValueError(
770:                 "Found bin edge of size <= 0. Did you specify `bins` with"
771:                 "non-monotonic sequence?")
772: 
773:     nbin = asarray(nbin)
774: 
775:     # Handle empty input.
776:     if N == 0:
777:         return np.zeros(nbin-2), edges
778: 
779:     # Compute the bin number each sample falls into.
780:     Ncount = {}
781:     for i in arange(D):
782:         Ncount[i] = digitize(sample[:, i], edges[i])
783: 
784:     # Using digitize, values that fall on an edge are put in the right bin.
785:     # For the rightmost bin, we want values equal to the right edge to be
786:     # counted in the last bin, and not as an outlier.
787:     for i in arange(D):
788:         # Rounding precision
789:         mindiff = dedges[i].min()
790:         if not np.isinf(mindiff):
791:             decimal = int(-log10(mindiff)) + 6
792:             # Find which points are on the rightmost edge.
793:             not_smaller_than_edge = (sample[:, i] >= edges[i][-1])
794:             on_edge = (around(sample[:, i], decimal) ==
795:                        around(edges[i][-1], decimal))
796:             # Shift these points one bin to the left.
797:             Ncount[i][where(on_edge & not_smaller_than_edge)[0]] -= 1
798: 
799:     # Flattened histogram matrix (1D)
800:     # Reshape is used so that overlarge arrays
801:     # will raise an error.
802:     hist = zeros(nbin, float).reshape(-1)
803: 
804:     # Compute the sample indices in the flattened histogram matrix.
805:     ni = nbin.argsort()
806:     xy = zeros(N, int)
807:     for i in arange(0, D-1):
808:         xy += Ncount[ni[i]] * nbin[ni[i+1:]].prod()
809:     xy += Ncount[ni[-1]]
810: 
811:     # Compute the number of repetitions in xy and assign it to the
812:     # flattened histmat.
813:     if len(xy) == 0:
814:         return zeros(nbin-2, int), edges
815: 
816:     flatcount = bincount(xy, weights)
817:     a = arange(len(flatcount))
818:     hist[a] = flatcount
819: 
820:     # Shape into a proper matrix
821:     hist = hist.reshape(sort(nbin))
822:     for i in arange(nbin.size):
823:         j = ni.argsort()[i]
824:         hist = hist.swapaxes(i, j)
825:         ni[i], ni[j] = ni[j], ni[i]
826: 
827:     # Remove outliers (indices 0 and -1 for each dimension).
828:     core = D*[slice(1, -1)]
829:     hist = hist[core]
830: 
831:     # Normalize if normed is True
832:     if normed:
833:         s = hist.sum()
834:         for i in arange(D):
835:             shape = ones(D, int)
836:             shape[i] = nbin[i] - 2
837:             hist = hist / dedges[i].reshape(shape)
838:         hist /= s
839: 
840:     if (hist.shape != nbin - 2).any():
841:         raise RuntimeError(
842:             "Internal Shape Error")
843:     return hist, edges
844: 
845: 
846: def average(a, axis=None, weights=None, returned=False):
847:     '''
848:     Compute the weighted average along the specified axis.
849: 
850:     Parameters
851:     ----------
852:     a : array_like
853:         Array containing data to be averaged. If `a` is not an array, a
854:         conversion is attempted.
855:     axis : int, optional
856:         Axis along which to average `a`. If `None`, averaging is done over
857:         the flattened array.
858:     weights : array_like, optional
859:         An array of weights associated with the values in `a`. Each value in
860:         `a` contributes to the average according to its associated weight.
861:         The weights array can either be 1-D (in which case its length must be
862:         the size of `a` along the given axis) or of the same shape as `a`.
863:         If `weights=None`, then all data in `a` are assumed to have a
864:         weight equal to one.
865:     returned : bool, optional
866:         Default is `False`. If `True`, the tuple (`average`, `sum_of_weights`)
867:         is returned, otherwise only the average is returned.
868:         If `weights=None`, `sum_of_weights` is equivalent to the number of
869:         elements over which the average is taken.
870: 
871: 
872:     Returns
873:     -------
874:     average, [sum_of_weights] : array_type or double
875:         Return the average along the specified axis. When returned is `True`,
876:         return a tuple with the average as the first element and the sum
877:         of the weights as the second element. The return type is `Float`
878:         if `a` is of integer type, otherwise it is of the same type as `a`.
879:         `sum_of_weights` is of the same type as `average`.
880: 
881:     Raises
882:     ------
883:     ZeroDivisionError
884:         When all weights along axis are zero. See `numpy.ma.average` for a
885:         version robust to this type of error.
886:     TypeError
887:         When the length of 1D `weights` is not the same as the shape of `a`
888:         along axis.
889: 
890:     See Also
891:     --------
892:     mean
893: 
894:     ma.average : average for masked arrays -- useful if your data contains
895:                  "missing" values
896: 
897:     Examples
898:     --------
899:     >>> data = range(1,5)
900:     >>> data
901:     [1, 2, 3, 4]
902:     >>> np.average(data)
903:     2.5
904:     >>> np.average(range(1,11), weights=range(10,0,-1))
905:     4.0
906: 
907:     >>> data = np.arange(6).reshape((3,2))
908:     >>> data
909:     array([[0, 1],
910:            [2, 3],
911:            [4, 5]])
912:     >>> np.average(data, axis=1, weights=[1./4, 3./4])
913:     array([ 0.75,  2.75,  4.75])
914:     >>> np.average(data, weights=[1./4, 3./4])
915:     Traceback (most recent call last):
916:     ...
917:     TypeError: Axis must be specified when shapes of a and weights differ.
918: 
919:     '''
920:     if not isinstance(a, np.matrix):
921:         a = np.asarray(a)
922: 
923:     if weights is None:
924:         avg = a.mean(axis)
925:         scl = avg.dtype.type(a.size/avg.size)
926:     else:
927:         a = a + 0.0
928:         wgt = np.asarray(weights)
929:         # Sanity checks
930:         if a.shape != wgt.shape:
931:             if axis is None:
932:                 raise TypeError(
933:                     "Axis must be specified when shapes of a and weights "
934:                     "differ.")
935:             if wgt.ndim != 1:
936:                 raise TypeError(
937:                     "1D weights expected when shapes of a and weights differ.")
938:             if wgt.shape[0] != a.shape[axis]:
939:                 raise ValueError(
940:                     "Length of weights not compatible with specified axis.")
941: 
942:             # setup wgt to broadcast along axis
943:             wgt = np.array(wgt, copy=0, ndmin=a.ndim).swapaxes(-1, axis)
944: 
945:         scl = wgt.sum(axis=axis, dtype=np.result_type(a.dtype, wgt.dtype))
946:         if (scl == 0.0).any():
947:             raise ZeroDivisionError(
948:                 "Weights sum to zero, can't be normalized")
949: 
950:         avg = np.multiply(a, wgt).sum(axis)/scl
951: 
952:     if returned:
953:         scl = np.multiply(avg, 0) + scl
954:         return avg, scl
955:     else:
956:         return avg
957: 
958: 
959: def asarray_chkfinite(a, dtype=None, order=None):
960:     '''Convert the input to an array, checking for NaNs or Infs.
961: 
962:     Parameters
963:     ----------
964:     a : array_like
965:         Input data, in any form that can be converted to an array.  This
966:         includes lists, lists of tuples, tuples, tuples of tuples, tuples
967:         of lists and ndarrays.  Success requires no NaNs or Infs.
968:     dtype : data-type, optional
969:         By default, the data-type is inferred from the input data.
970:     order : {'C', 'F'}, optional
971:          Whether to use row-major (C-style) or
972:          column-major (Fortran-style) memory representation.
973:          Defaults to 'C'.
974: 
975:     Returns
976:     -------
977:     out : ndarray
978:         Array interpretation of `a`.  No copy is performed if the input
979:         is already an ndarray.  If `a` is a subclass of ndarray, a base
980:         class ndarray is returned.
981: 
982:     Raises
983:     ------
984:     ValueError
985:         Raises ValueError if `a` contains NaN (Not a Number) or Inf (Infinity).
986: 
987:     See Also
988:     --------
989:     asarray : Create and array.
990:     asanyarray : Similar function which passes through subclasses.
991:     ascontiguousarray : Convert input to a contiguous array.
992:     asfarray : Convert input to a floating point ndarray.
993:     asfortranarray : Convert input to an ndarray with column-major
994:                      memory order.
995:     fromiter : Create an array from an iterator.
996:     fromfunction : Construct an array by executing a function on grid
997:                    positions.
998: 
999:     Examples
1000:     --------
1001:     Convert a list into an array.  If all elements are finite
1002:     ``asarray_chkfinite`` is identical to ``asarray``.
1003: 
1004:     >>> a = [1, 2]
1005:     >>> np.asarray_chkfinite(a, dtype=float)
1006:     array([1., 2.])
1007: 
1008:     Raises ValueError if array_like contains Nans or Infs.
1009: 
1010:     >>> a = [1, 2, np.inf]
1011:     >>> try:
1012:     ...     np.asarray_chkfinite(a)
1013:     ... except ValueError:
1014:     ...     print('ValueError')
1015:     ...
1016:     ValueError
1017: 
1018:     '''
1019:     a = asarray(a, dtype=dtype, order=order)
1020:     if a.dtype.char in typecodes['AllFloat'] and not np.isfinite(a).all():
1021:         raise ValueError(
1022:             "array must not contain infs or NaNs")
1023:     return a
1024: 
1025: 
1026: def piecewise(x, condlist, funclist, *args, **kw):
1027:     '''
1028:     Evaluate a piecewise-defined function.
1029: 
1030:     Given a set of conditions and corresponding functions, evaluate each
1031:     function on the input data wherever its condition is true.
1032: 
1033:     Parameters
1034:     ----------
1035:     x : ndarray
1036:         The input domain.
1037:     condlist : list of bool arrays
1038:         Each boolean array corresponds to a function in `funclist`.  Wherever
1039:         `condlist[i]` is True, `funclist[i](x)` is used as the output value.
1040: 
1041:         Each boolean array in `condlist` selects a piece of `x`,
1042:         and should therefore be of the same shape as `x`.
1043: 
1044:         The length of `condlist` must correspond to that of `funclist`.
1045:         If one extra function is given, i.e. if
1046:         ``len(funclist) - len(condlist) == 1``, then that extra function
1047:         is the default value, used wherever all conditions are false.
1048:     funclist : list of callables, f(x,*args,**kw), or scalars
1049:         Each function is evaluated over `x` wherever its corresponding
1050:         condition is True.  It should take an array as input and give an array
1051:         or a scalar value as output.  If, instead of a callable,
1052:         a scalar is provided then a constant function (``lambda x: scalar``) is
1053:         assumed.
1054:     args : tuple, optional
1055:         Any further arguments given to `piecewise` are passed to the functions
1056:         upon execution, i.e., if called ``piecewise(..., ..., 1, 'a')``, then
1057:         each function is called as ``f(x, 1, 'a')``.
1058:     kw : dict, optional
1059:         Keyword arguments used in calling `piecewise` are passed to the
1060:         functions upon execution, i.e., if called
1061:         ``piecewise(..., ..., lambda=1)``, then each function is called as
1062:         ``f(x, lambda=1)``.
1063: 
1064:     Returns
1065:     -------
1066:     out : ndarray
1067:         The output is the same shape and type as x and is found by
1068:         calling the functions in `funclist` on the appropriate portions of `x`,
1069:         as defined by the boolean arrays in `condlist`.  Portions not covered
1070:         by any condition have a default value of 0.
1071: 
1072: 
1073:     See Also
1074:     --------
1075:     choose, select, where
1076: 
1077:     Notes
1078:     -----
1079:     This is similar to choose or select, except that functions are
1080:     evaluated on elements of `x` that satisfy the corresponding condition from
1081:     `condlist`.
1082: 
1083:     The result is::
1084: 
1085:             |--
1086:             |funclist[0](x[condlist[0]])
1087:       out = |funclist[1](x[condlist[1]])
1088:             |...
1089:             |funclist[n2](x[condlist[n2]])
1090:             |--
1091: 
1092:     Examples
1093:     --------
1094:     Define the sigma function, which is -1 for ``x < 0`` and +1 for ``x >= 0``.
1095: 
1096:     >>> x = np.linspace(-2.5, 2.5, 6)
1097:     >>> np.piecewise(x, [x < 0, x >= 0], [-1, 1])
1098:     array([-1., -1., -1.,  1.,  1.,  1.])
1099: 
1100:     Define the absolute value, which is ``-x`` for ``x <0`` and ``x`` for
1101:     ``x >= 0``.
1102: 
1103:     >>> np.piecewise(x, [x < 0, x >= 0], [lambda x: -x, lambda x: x])
1104:     array([ 2.5,  1.5,  0.5,  0.5,  1.5,  2.5])
1105: 
1106:     '''
1107:     x = asanyarray(x)
1108:     n2 = len(funclist)
1109:     if (isscalar(condlist) or not (isinstance(condlist[0], list) or
1110:                                    isinstance(condlist[0], ndarray))):
1111:         condlist = [condlist]
1112:     condlist = array(condlist, dtype=bool)
1113:     n = len(condlist)
1114:     # This is a hack to work around problems with NumPy's
1115:     #  handling of 0-d arrays and boolean indexing with
1116:     #  numpy.bool_ scalars
1117:     zerod = False
1118:     if x.ndim == 0:
1119:         x = x[None]
1120:         zerod = True
1121:         if condlist.shape[-1] != 1:
1122:             condlist = condlist.T
1123:     if n == n2 - 1:  # compute the "otherwise" condition.
1124:         totlist = np.logical_or.reduce(condlist, axis=0)
1125:         # Only able to stack vertically if the array is 1d or less
1126:         if x.ndim <= 1:
1127:             condlist = np.vstack([condlist, ~totlist])
1128:         else:
1129:             condlist = [asarray(c, dtype=bool) for c in condlist]
1130:             totlist = condlist[0]
1131:             for k in range(1, n):
1132:                 totlist |= condlist[k]
1133:             condlist.append(~totlist)
1134:         n += 1
1135: 
1136:     y = zeros(x.shape, x.dtype)
1137:     for k in range(n):
1138:         item = funclist[k]
1139:         if not isinstance(item, collections.Callable):
1140:             y[condlist[k]] = item
1141:         else:
1142:             vals = x[condlist[k]]
1143:             if vals.size > 0:
1144:                 y[condlist[k]] = item(vals, *args, **kw)
1145:     if zerod:
1146:         y = y.squeeze()
1147:     return y
1148: 
1149: 
1150: def select(condlist, choicelist, default=0):
1151:     '''
1152:     Return an array drawn from elements in choicelist, depending on conditions.
1153: 
1154:     Parameters
1155:     ----------
1156:     condlist : list of bool ndarrays
1157:         The list of conditions which determine from which array in `choicelist`
1158:         the output elements are taken. When multiple conditions are satisfied,
1159:         the first one encountered in `condlist` is used.
1160:     choicelist : list of ndarrays
1161:         The list of arrays from which the output elements are taken. It has
1162:         to be of the same length as `condlist`.
1163:     default : scalar, optional
1164:         The element inserted in `output` when all conditions evaluate to False.
1165: 
1166:     Returns
1167:     -------
1168:     output : ndarray
1169:         The output at position m is the m-th element of the array in
1170:         `choicelist` where the m-th element of the corresponding array in
1171:         `condlist` is True.
1172: 
1173:     See Also
1174:     --------
1175:     where : Return elements from one of two arrays depending on condition.
1176:     take, choose, compress, diag, diagonal
1177: 
1178:     Examples
1179:     --------
1180:     >>> x = np.arange(10)
1181:     >>> condlist = [x<3, x>5]
1182:     >>> choicelist = [x, x**2]
1183:     >>> np.select(condlist, choicelist)
1184:     array([ 0,  1,  2,  0,  0,  0, 36, 49, 64, 81])
1185: 
1186:     '''
1187:     # Check the size of condlist and choicelist are the same, or abort.
1188:     if len(condlist) != len(choicelist):
1189:         raise ValueError(
1190:             'list of cases must be same length as list of conditions')
1191: 
1192:     # Now that the dtype is known, handle the deprecated select([], []) case
1193:     if len(condlist) == 0:
1194:         # 2014-02-24, 1.9
1195:         warnings.warn("select with an empty condition list is not possible"
1196:                       "and will be deprecated",
1197:                       DeprecationWarning)
1198:         return np.asarray(default)[()]
1199: 
1200:     choicelist = [np.asarray(choice) for choice in choicelist]
1201:     choicelist.append(np.asarray(default))
1202: 
1203:     # need to get the result type before broadcasting for correct scalar
1204:     # behaviour
1205:     dtype = np.result_type(*choicelist)
1206: 
1207:     # Convert conditions to arrays and broadcast conditions and choices
1208:     # as the shape is needed for the result. Doing it separately optimizes
1209:     # for example when all choices are scalars.
1210:     condlist = np.broadcast_arrays(*condlist)
1211:     choicelist = np.broadcast_arrays(*choicelist)
1212: 
1213:     # If cond array is not an ndarray in boolean format or scalar bool, abort.
1214:     deprecated_ints = False
1215:     for i in range(len(condlist)):
1216:         cond = condlist[i]
1217:         if cond.dtype.type is not np.bool_:
1218:             if np.issubdtype(cond.dtype, np.integer):
1219:                 # A previous implementation accepted int ndarrays accidentally.
1220:                 # Supported here deliberately, but deprecated.
1221:                 condlist[i] = condlist[i].astype(bool)
1222:                 deprecated_ints = True
1223:             else:
1224:                 raise ValueError(
1225:                     'invalid entry in choicelist: should be boolean ndarray')
1226: 
1227:     if deprecated_ints:
1228:         # 2014-02-24, 1.9
1229:         msg = "select condlists containing integer ndarrays is deprecated " \
1230:             "and will be removed in the future. Use `.astype(bool)` to " \
1231:             "convert to bools."
1232:         warnings.warn(msg, DeprecationWarning)
1233: 
1234:     if choicelist[0].ndim == 0:
1235:         # This may be common, so avoid the call.
1236:         result_shape = condlist[0].shape
1237:     else:
1238:         result_shape = np.broadcast_arrays(condlist[0], choicelist[0])[0].shape
1239: 
1240:     result = np.full(result_shape, choicelist[-1], dtype)
1241: 
1242:     # Use np.copyto to burn each choicelist array onto result, using the
1243:     # corresponding condlist as a boolean mask. This is done in reverse
1244:     # order since the first choice should take precedence.
1245:     choicelist = choicelist[-2::-1]
1246:     condlist = condlist[::-1]
1247:     for choice, cond in zip(choicelist, condlist):
1248:         np.copyto(result, choice, where=cond)
1249: 
1250:     return result
1251: 
1252: 
1253: def copy(a, order='K'):
1254:     '''
1255:     Return an array copy of the given object.
1256: 
1257:     Parameters
1258:     ----------
1259:     a : array_like
1260:         Input data.
1261:     order : {'C', 'F', 'A', 'K'}, optional
1262:         Controls the memory layout of the copy. 'C' means C-order,
1263:         'F' means F-order, 'A' means 'F' if `a` is Fortran contiguous,
1264:         'C' otherwise. 'K' means match the layout of `a` as closely
1265:         as possible. (Note that this function and :meth:ndarray.copy are very
1266:         similar, but have different default values for their order=
1267:         arguments.)
1268: 
1269:     Returns
1270:     -------
1271:     arr : ndarray
1272:         Array interpretation of `a`.
1273: 
1274:     Notes
1275:     -----
1276:     This is equivalent to
1277: 
1278:     >>> np.array(a, copy=True)                              #doctest: +SKIP
1279: 
1280:     Examples
1281:     --------
1282:     Create an array x, with a reference y and a copy z:
1283: 
1284:     >>> x = np.array([1, 2, 3])
1285:     >>> y = x
1286:     >>> z = np.copy(x)
1287: 
1288:     Note that, when we modify x, y changes, but not z:
1289: 
1290:     >>> x[0] = 10
1291:     >>> x[0] == y[0]
1292:     True
1293:     >>> x[0] == z[0]
1294:     False
1295: 
1296:     '''
1297:     return array(a, order=order, copy=True)
1298: 
1299: # Basic operations
1300: 
1301: 
1302: def gradient(f, *varargs, **kwargs):
1303:     '''
1304:     Return the gradient of an N-dimensional array.
1305: 
1306:     The gradient is computed using second order accurate central differences
1307:     in the interior and either first differences or second order accurate
1308:     one-sides (forward or backwards) differences at the boundaries. The
1309:     returned gradient hence has the same shape as the input array.
1310: 
1311:     Parameters
1312:     ----------
1313:     f : array_like
1314:         An N-dimensional array containing samples of a scalar function.
1315:     varargs : scalar or list of scalar, optional
1316:         N scalars specifying the sample distances for each dimension,
1317:         i.e. `dx`, `dy`, `dz`, ... Default distance: 1.
1318:         single scalar specifies sample distance for all dimensions.
1319:         if `axis` is given, the number of varargs must equal the number of axes.
1320:     edge_order : {1, 2}, optional
1321:         Gradient is calculated using N\ :sup:`th` order accurate differences
1322:         at the boundaries. Default: 1.
1323: 
1324:         .. versionadded:: 1.9.1
1325: 
1326:     axis : None or int or tuple of ints, optional
1327:         Gradient is calculated only along the given axis or axes
1328:         The default (axis = None) is to calculate the gradient for all the axes of the input array.
1329:         axis may be negative, in which case it counts from the last to the first axis.
1330: 
1331:         .. versionadded:: 1.11.0
1332: 
1333:     Returns
1334:     -------
1335:     gradient : list of ndarray
1336:         Each element of `list` has the same shape as `f` giving the derivative
1337:         of `f` with respect to each dimension.
1338: 
1339:     Examples
1340:     --------
1341:     >>> x = np.array([1, 2, 4, 7, 11, 16], dtype=np.float)
1342:     >>> np.gradient(x)
1343:     array([ 1. ,  1.5,  2.5,  3.5,  4.5,  5. ])
1344:     >>> np.gradient(x, 2)
1345:     array([ 0.5 ,  0.75,  1.25,  1.75,  2.25,  2.5 ])
1346: 
1347:     For two dimensional arrays, the return will be two arrays ordered by
1348:     axis. In this example the first array stands for the gradient in
1349:     rows and the second one in columns direction:
1350: 
1351:     >>> np.gradient(np.array([[1, 2, 6], [3, 4, 5]], dtype=np.float))
1352:     [array([[ 2.,  2., -1.],
1353:             [ 2.,  2., -1.]]), array([[ 1. ,  2.5,  4. ],
1354:             [ 1. ,  1. ,  1. ]])]
1355: 
1356:     >>> x = np.array([0, 1, 2, 3, 4])
1357:     >>> dx = np.gradient(x)
1358:     >>> y = x**2
1359:     >>> np.gradient(y, dx, edge_order=2)
1360:     array([-0.,  2.,  4.,  6.,  8.])
1361: 
1362:     The axis keyword can be used to specify a subset of axes of which the gradient is calculated
1363:     >>> np.gradient(np.array([[1, 2, 6], [3, 4, 5]], dtype=np.float), axis=0)
1364:     array([[ 2.,  2., -1.],
1365:            [ 2.,  2., -1.]])
1366:     '''
1367:     f = np.asanyarray(f)
1368:     N = len(f.shape)  # number of dimensions
1369: 
1370:     axes = kwargs.pop('axis', None)
1371:     if axes is None:
1372:         axes = tuple(range(N))
1373:     # check axes to have correct type and no duplicate entries
1374:     if isinstance(axes, int):
1375:         axes = (axes,)
1376:     if not isinstance(axes, tuple):
1377:         raise TypeError("A tuple of integers or a single integer is required")
1378: 
1379:     # normalize axis values:
1380:     axes = tuple(x + N if x < 0 else x for x in axes)
1381:     if max(axes) >= N or min(axes) < 0:
1382:         raise ValueError("'axis' entry is out of bounds")
1383: 
1384:     if len(set(axes)) != len(axes):
1385:         raise ValueError("duplicate value in 'axis'")
1386: 
1387:     n = len(varargs)
1388:     if n == 0:
1389:         dx = [1.0]*N
1390:     elif n == 1:
1391:         dx = [varargs[0]]*N
1392:     elif n == len(axes):
1393:         dx = list(varargs)
1394:     else:
1395:         raise SyntaxError(
1396:             "invalid number of arguments")
1397: 
1398:     edge_order = kwargs.pop('edge_order', 1)
1399:     if kwargs:
1400:         raise TypeError('"{}" are not valid keyword arguments.'.format(
1401:                                                   '", "'.join(kwargs.keys())))
1402:     if edge_order > 2:
1403:         raise ValueError("'edge_order' greater than 2 not supported")
1404: 
1405:     # use central differences on interior and one-sided differences on the
1406:     # endpoints. This preserves second order-accuracy over the full domain.
1407: 
1408:     outvals = []
1409: 
1410:     # create slice objects --- initially all are [:, :, ..., :]
1411:     slice1 = [slice(None)]*N
1412:     slice2 = [slice(None)]*N
1413:     slice3 = [slice(None)]*N
1414:     slice4 = [slice(None)]*N
1415: 
1416:     otype = f.dtype.char
1417:     if otype not in ['f', 'd', 'F', 'D', 'm', 'M']:
1418:         otype = 'd'
1419: 
1420:     # Difference of datetime64 elements results in timedelta64
1421:     if otype == 'M':
1422:         # Need to use the full dtype name because it contains unit information
1423:         otype = f.dtype.name.replace('datetime', 'timedelta')
1424:     elif otype == 'm':
1425:         # Needs to keep the specific units, can't be a general unit
1426:         otype = f.dtype
1427: 
1428:     # Convert datetime64 data into ints. Make dummy variable `y`
1429:     # that is a view of ints if the data is datetime64, otherwise
1430:     # just set y equal to the array `f`.
1431:     if f.dtype.char in ["M", "m"]:
1432:         y = f.view('int64')
1433:     else:
1434:         y = f
1435: 
1436:     for i, axis in enumerate(axes):
1437: 
1438:         if y.shape[axis] < 2:
1439:             raise ValueError(
1440:                 "Shape of array too small to calculate a numerical gradient, "
1441:                 "at least two elements are required.")
1442: 
1443:         # Numerical differentiation: 1st order edges, 2nd order interior
1444:         if y.shape[axis] == 2 or edge_order == 1:
1445:             # Use first order differences for time data
1446:             out = np.empty_like(y, dtype=otype)
1447: 
1448:             slice1[axis] = slice(1, -1)
1449:             slice2[axis] = slice(2, None)
1450:             slice3[axis] = slice(None, -2)
1451:             # 1D equivalent -- out[1:-1] = (y[2:] - y[:-2])/2.0
1452:             out[slice1] = (y[slice2] - y[slice3])/2.0
1453: 
1454:             slice1[axis] = 0
1455:             slice2[axis] = 1
1456:             slice3[axis] = 0
1457:             # 1D equivalent -- out[0] = (y[1] - y[0])
1458:             out[slice1] = (y[slice2] - y[slice3])
1459: 
1460:             slice1[axis] = -1
1461:             slice2[axis] = -1
1462:             slice3[axis] = -2
1463:             # 1D equivalent -- out[-1] = (y[-1] - y[-2])
1464:             out[slice1] = (y[slice2] - y[slice3])
1465: 
1466:         # Numerical differentiation: 2st order edges, 2nd order interior
1467:         else:
1468:             # Use second order differences where possible
1469:             out = np.empty_like(y, dtype=otype)
1470: 
1471:             slice1[axis] = slice(1, -1)
1472:             slice2[axis] = slice(2, None)
1473:             slice3[axis] = slice(None, -2)
1474:             # 1D equivalent -- out[1:-1] = (y[2:] - y[:-2])/2.0
1475:             out[slice1] = (y[slice2] - y[slice3])/2.0
1476: 
1477:             slice1[axis] = 0
1478:             slice2[axis] = 0
1479:             slice3[axis] = 1
1480:             slice4[axis] = 2
1481:             # 1D equivalent -- out[0] = -(3*y[0] - 4*y[1] + y[2]) / 2.0
1482:             out[slice1] = -(3.0*y[slice2] - 4.0*y[slice3] + y[slice4])/2.0
1483: 
1484:             slice1[axis] = -1
1485:             slice2[axis] = -1
1486:             slice3[axis] = -2
1487:             slice4[axis] = -3
1488:             # 1D equivalent -- out[-1] = (3*y[-1] - 4*y[-2] + y[-3])
1489:             out[slice1] = (3.0*y[slice2] - 4.0*y[slice3] + y[slice4])/2.0
1490: 
1491:         # divide by step size
1492:         out /= dx[i]
1493:         outvals.append(out)
1494: 
1495:         # reset the slice object in this dimension to ":"
1496:         slice1[axis] = slice(None)
1497:         slice2[axis] = slice(None)
1498:         slice3[axis] = slice(None)
1499:         slice4[axis] = slice(None)
1500: 
1501:     if len(axes) == 1:
1502:         return outvals[0]
1503:     else:
1504:         return outvals
1505: 
1506: 
1507: def diff(a, n=1, axis=-1):
1508:     '''
1509:     Calculate the n-th discrete difference along given axis.
1510: 
1511:     The first difference is given by ``out[n] = a[n+1] - a[n]`` along
1512:     the given axis, higher differences are calculated by using `diff`
1513:     recursively.
1514: 
1515:     Parameters
1516:     ----------
1517:     a : array_like
1518:         Input array
1519:     n : int, optional
1520:         The number of times values are differenced.
1521:     axis : int, optional
1522:         The axis along which the difference is taken, default is the last axis.
1523: 
1524:     Returns
1525:     -------
1526:     diff : ndarray
1527:         The n-th differences. The shape of the output is the same as `a`
1528:         except along `axis` where the dimension is smaller by `n`.
1529: .
1530: 
1531:     See Also
1532:     --------
1533:     gradient, ediff1d, cumsum
1534: 
1535:     Examples
1536:     --------
1537:     >>> x = np.array([1, 2, 4, 7, 0])
1538:     >>> np.diff(x)
1539:     array([ 1,  2,  3, -7])
1540:     >>> np.diff(x, n=2)
1541:     array([  1,   1, -10])
1542: 
1543:     >>> x = np.array([[1, 3, 6, 10], [0, 5, 6, 8]])
1544:     >>> np.diff(x)
1545:     array([[2, 3, 4],
1546:            [5, 1, 2]])
1547:     >>> np.diff(x, axis=0)
1548:     array([[-1,  2,  0, -2]])
1549: 
1550:     '''
1551:     if n == 0:
1552:         return a
1553:     if n < 0:
1554:         raise ValueError(
1555:             "order must be non-negative but got " + repr(n))
1556:     a = asanyarray(a)
1557:     nd = len(a.shape)
1558:     slice1 = [slice(None)]*nd
1559:     slice2 = [slice(None)]*nd
1560:     slice1[axis] = slice(1, None)
1561:     slice2[axis] = slice(None, -1)
1562:     slice1 = tuple(slice1)
1563:     slice2 = tuple(slice2)
1564:     if n > 1:
1565:         return diff(a[slice1]-a[slice2], n-1, axis=axis)
1566:     else:
1567:         return a[slice1]-a[slice2]
1568: 
1569: 
1570: def interp(x, xp, fp, left=None, right=None, period=None):
1571:     '''
1572:     One-dimensional linear interpolation.
1573: 
1574:     Returns the one-dimensional piecewise linear interpolant to a function
1575:     with given values at discrete data-points.
1576: 
1577:     Parameters
1578:     ----------
1579:     x : array_like
1580:         The x-coordinates of the interpolated values.
1581: 
1582:     xp : 1-D sequence of floats
1583:         The x-coordinates of the data points, must be increasing if argument
1584:         `period` is not specified. Otherwise, `xp` is internally sorted after
1585:         normalizing the periodic boundaries with ``xp = xp % period``.
1586: 
1587:     fp : 1-D sequence of floats
1588:         The y-coordinates of the data points, same length as `xp`.
1589: 
1590:     left : float, optional
1591:         Value to return for `x < xp[0]`, default is `fp[0]`.
1592: 
1593:     right : float, optional
1594:         Value to return for `x > xp[-1]`, default is `fp[-1]`.
1595: 
1596:     period : None or float, optional
1597:         A period for the x-coordinates. This parameter allows the proper
1598:         interpolation of angular x-coordinates. Parameters `left` and `right`
1599:         are ignored if `period` is specified.
1600: 
1601:         .. versionadded:: 1.10.0
1602: 
1603:     Returns
1604:     -------
1605:     y : float or ndarray
1606:         The interpolated values, same shape as `x`.
1607: 
1608:     Raises
1609:     ------
1610:     ValueError
1611:         If `xp` and `fp` have different length
1612:         If `xp` or `fp` are not 1-D sequences
1613:         If `period == 0`
1614: 
1615:     Notes
1616:     -----
1617:     Does not check that the x-coordinate sequence `xp` is increasing.
1618:     If `xp` is not increasing, the results are nonsense.
1619:     A simple check for increasing is::
1620: 
1621:         np.all(np.diff(xp) > 0)
1622: 
1623:     Examples
1624:     --------
1625:     >>> xp = [1, 2, 3]
1626:     >>> fp = [3, 2, 0]
1627:     >>> np.interp(2.5, xp, fp)
1628:     1.0
1629:     >>> np.interp([0, 1, 1.5, 2.72, 3.14], xp, fp)
1630:     array([ 3. ,  3. ,  2.5 ,  0.56,  0. ])
1631:     >>> UNDEF = -99.0
1632:     >>> np.interp(3.14, xp, fp, right=UNDEF)
1633:     -99.0
1634: 
1635:     Plot an interpolant to the sine function:
1636: 
1637:     >>> x = np.linspace(0, 2*np.pi, 10)
1638:     >>> y = np.sin(x)
1639:     >>> xvals = np.linspace(0, 2*np.pi, 50)
1640:     >>> yinterp = np.interp(xvals, x, y)
1641:     >>> import matplotlib.pyplot as plt
1642:     >>> plt.plot(x, y, 'o')
1643:     [<matplotlib.lines.Line2D object at 0x...>]
1644:     >>> plt.plot(xvals, yinterp, '-x')
1645:     [<matplotlib.lines.Line2D object at 0x...>]
1646:     >>> plt.show()
1647: 
1648:     Interpolation with periodic x-coordinates:
1649: 
1650:     >>> x = [-180, -170, -185, 185, -10, -5, 0, 365]
1651:     >>> xp = [190, -190, 350, -350]
1652:     >>> fp = [5, 10, 3, 4]
1653:     >>> np.interp(x, xp, fp, period=360)
1654:     array([7.5, 5., 8.75, 6.25, 3., 3.25, 3.5, 3.75])
1655: 
1656:     '''
1657:     if period is None:
1658:         if isinstance(x, (float, int, number)):
1659:             return compiled_interp([x], xp, fp, left, right).item()
1660:         elif isinstance(x, np.ndarray) and x.ndim == 0:
1661:             return compiled_interp([x], xp, fp, left, right).item()
1662:         else:
1663:             return compiled_interp(x, xp, fp, left, right)
1664:     else:
1665:         if period == 0:
1666:             raise ValueError("period must be a non-zero value")
1667:         period = abs(period)
1668:         left = None
1669:         right = None
1670:         return_array = True
1671:         if isinstance(x, (float, int, number)):
1672:             return_array = False
1673:             x = [x]
1674:         x = np.asarray(x, dtype=np.float64)
1675:         xp = np.asarray(xp, dtype=np.float64)
1676:         fp = np.asarray(fp, dtype=np.float64)
1677:         if xp.ndim != 1 or fp.ndim != 1:
1678:             raise ValueError("Data points must be 1-D sequences")
1679:         if xp.shape[0] != fp.shape[0]:
1680:             raise ValueError("fp and xp are not of the same length")
1681:         # normalizing periodic boundaries
1682:         x = x % period
1683:         xp = xp % period
1684:         asort_xp = np.argsort(xp)
1685:         xp = xp[asort_xp]
1686:         fp = fp[asort_xp]
1687:         xp = np.concatenate((xp[-1:]-period, xp, xp[0:1]+period))
1688:         fp = np.concatenate((fp[-1:], fp, fp[0:1]))
1689:         if return_array:
1690:             return compiled_interp(x, xp, fp, left, right)
1691:         else:
1692:             return compiled_interp(x, xp, fp, left, right).item()
1693: 
1694: 
1695: def angle(z, deg=0):
1696:     '''
1697:     Return the angle of the complex argument.
1698: 
1699:     Parameters
1700:     ----------
1701:     z : array_like
1702:         A complex number or sequence of complex numbers.
1703:     deg : bool, optional
1704:         Return angle in degrees if True, radians if False (default).
1705: 
1706:     Returns
1707:     -------
1708:     angle : ndarray or scalar
1709:         The counterclockwise angle from the positive real axis on
1710:         the complex plane, with dtype as numpy.float64.
1711: 
1712:     See Also
1713:     --------
1714:     arctan2
1715:     absolute
1716: 
1717: 
1718: 
1719:     Examples
1720:     --------
1721:     >>> np.angle([1.0, 1.0j, 1+1j])               # in radians
1722:     array([ 0.        ,  1.57079633,  0.78539816])
1723:     >>> np.angle(1+1j, deg=True)                  # in degrees
1724:     45.0
1725: 
1726:     '''
1727:     if deg:
1728:         fact = 180/pi
1729:     else:
1730:         fact = 1.0
1731:     z = asarray(z)
1732:     if (issubclass(z.dtype.type, _nx.complexfloating)):
1733:         zimag = z.imag
1734:         zreal = z.real
1735:     else:
1736:         zimag = 0
1737:         zreal = z
1738:     return arctan2(zimag, zreal) * fact
1739: 
1740: 
1741: def unwrap(p, discont=pi, axis=-1):
1742:     '''
1743:     Unwrap by changing deltas between values to 2*pi complement.
1744: 
1745:     Unwrap radian phase `p` by changing absolute jumps greater than
1746:     `discont` to their 2*pi complement along the given axis.
1747: 
1748:     Parameters
1749:     ----------
1750:     p : array_like
1751:         Input array.
1752:     discont : float, optional
1753:         Maximum discontinuity between values, default is ``pi``.
1754:     axis : int, optional
1755:         Axis along which unwrap will operate, default is the last axis.
1756: 
1757:     Returns
1758:     -------
1759:     out : ndarray
1760:         Output array.
1761: 
1762:     See Also
1763:     --------
1764:     rad2deg, deg2rad
1765: 
1766:     Notes
1767:     -----
1768:     If the discontinuity in `p` is smaller than ``pi``, but larger than
1769:     `discont`, no unwrapping is done because taking the 2*pi complement
1770:     would only make the discontinuity larger.
1771: 
1772:     Examples
1773:     --------
1774:     >>> phase = np.linspace(0, np.pi, num=5)
1775:     >>> phase[3:] += np.pi
1776:     >>> phase
1777:     array([ 0.        ,  0.78539816,  1.57079633,  5.49778714,  6.28318531])
1778:     >>> np.unwrap(phase)
1779:     array([ 0.        ,  0.78539816,  1.57079633, -0.78539816,  0.        ])
1780: 
1781:     '''
1782:     p = asarray(p)
1783:     nd = len(p.shape)
1784:     dd = diff(p, axis=axis)
1785:     slice1 = [slice(None, None)]*nd     # full slices
1786:     slice1[axis] = slice(1, None)
1787:     ddmod = mod(dd + pi, 2*pi) - pi
1788:     _nx.copyto(ddmod, pi, where=(ddmod == -pi) & (dd > 0))
1789:     ph_correct = ddmod - dd
1790:     _nx.copyto(ph_correct, 0, where=abs(dd) < discont)
1791:     up = array(p, copy=True, dtype='d')
1792:     up[slice1] = p[slice1] + ph_correct.cumsum(axis)
1793:     return up
1794: 
1795: 
1796: def sort_complex(a):
1797:     '''
1798:     Sort a complex array using the real part first, then the imaginary part.
1799: 
1800:     Parameters
1801:     ----------
1802:     a : array_like
1803:         Input array
1804: 
1805:     Returns
1806:     -------
1807:     out : complex ndarray
1808:         Always returns a sorted complex array.
1809: 
1810:     Examples
1811:     --------
1812:     >>> np.sort_complex([5, 3, 6, 2, 1])
1813:     array([ 1.+0.j,  2.+0.j,  3.+0.j,  5.+0.j,  6.+0.j])
1814: 
1815:     >>> np.sort_complex([1 + 2j, 2 - 1j, 3 - 2j, 3 - 3j, 3 + 5j])
1816:     array([ 1.+2.j,  2.-1.j,  3.-3.j,  3.-2.j,  3.+5.j])
1817: 
1818:     '''
1819:     b = array(a, copy=True)
1820:     b.sort()
1821:     if not issubclass(b.dtype.type, _nx.complexfloating):
1822:         if b.dtype.char in 'bhBH':
1823:             return b.astype('F')
1824:         elif b.dtype.char == 'g':
1825:             return b.astype('G')
1826:         else:
1827:             return b.astype('D')
1828:     else:
1829:         return b
1830: 
1831: 
1832: def trim_zeros(filt, trim='fb'):
1833:     '''
1834:     Trim the leading and/or trailing zeros from a 1-D array or sequence.
1835: 
1836:     Parameters
1837:     ----------
1838:     filt : 1-D array or sequence
1839:         Input array.
1840:     trim : str, optional
1841:         A string with 'f' representing trim from front and 'b' to trim from
1842:         back. Default is 'fb', trim zeros from both front and back of the
1843:         array.
1844: 
1845:     Returns
1846:     -------
1847:     trimmed : 1-D array or sequence
1848:         The result of trimming the input. The input data type is preserved.
1849: 
1850:     Examples
1851:     --------
1852:     >>> a = np.array((0, 0, 0, 1, 2, 3, 0, 2, 1, 0))
1853:     >>> np.trim_zeros(a)
1854:     array([1, 2, 3, 0, 2, 1])
1855: 
1856:     >>> np.trim_zeros(a, 'b')
1857:     array([0, 0, 0, 1, 2, 3, 0, 2, 1])
1858: 
1859:     The input data type is preserved, list/tuple in means list/tuple out.
1860: 
1861:     >>> np.trim_zeros([0, 1, 2, 0])
1862:     [1, 2]
1863: 
1864:     '''
1865:     first = 0
1866:     trim = trim.upper()
1867:     if 'F' in trim:
1868:         for i in filt:
1869:             if i != 0.:
1870:                 break
1871:             else:
1872:                 first = first + 1
1873:     last = len(filt)
1874:     if 'B' in trim:
1875:         for i in filt[::-1]:
1876:             if i != 0.:
1877:                 break
1878:             else:
1879:                 last = last - 1
1880:     return filt[first:last]
1881: 
1882: 
1883: @deprecate
1884: def unique(x):
1885:     '''
1886:     This function is deprecated.  Use numpy.lib.arraysetops.unique()
1887:     instead.
1888:     '''
1889:     try:
1890:         tmp = x.flatten()
1891:         if tmp.size == 0:
1892:             return tmp
1893:         tmp.sort()
1894:         idx = concatenate(([True], tmp[1:] != tmp[:-1]))
1895:         return tmp[idx]
1896:     except AttributeError:
1897:         items = sorted(set(x))
1898:         return asarray(items)
1899: 
1900: 
1901: def extract(condition, arr):
1902:     '''
1903:     Return the elements of an array that satisfy some condition.
1904: 
1905:     This is equivalent to ``np.compress(ravel(condition), ravel(arr))``.  If
1906:     `condition` is boolean ``np.extract`` is equivalent to ``arr[condition]``.
1907: 
1908:     Note that `place` does the exact opposite of `extract`.
1909: 
1910:     Parameters
1911:     ----------
1912:     condition : array_like
1913:         An array whose nonzero or True entries indicate the elements of `arr`
1914:         to extract.
1915:     arr : array_like
1916:         Input array of the same size as `condition`.
1917: 
1918:     Returns
1919:     -------
1920:     extract : ndarray
1921:         Rank 1 array of values from `arr` where `condition` is True.
1922: 
1923:     See Also
1924:     --------
1925:     take, put, copyto, compress, place
1926: 
1927:     Examples
1928:     --------
1929:     >>> arr = np.arange(12).reshape((3, 4))
1930:     >>> arr
1931:     array([[ 0,  1,  2,  3],
1932:            [ 4,  5,  6,  7],
1933:            [ 8,  9, 10, 11]])
1934:     >>> condition = np.mod(arr, 3)==0
1935:     >>> condition
1936:     array([[ True, False, False,  True],
1937:            [False, False,  True, False],
1938:            [False,  True, False, False]], dtype=bool)
1939:     >>> np.extract(condition, arr)
1940:     array([0, 3, 6, 9])
1941: 
1942: 
1943:     If `condition` is boolean:
1944: 
1945:     >>> arr[condition]
1946:     array([0, 3, 6, 9])
1947: 
1948:     '''
1949:     return _nx.take(ravel(arr), nonzero(ravel(condition))[0])
1950: 
1951: 
1952: def place(arr, mask, vals):
1953:     '''
1954:     Change elements of an array based on conditional and input values.
1955: 
1956:     Similar to ``np.copyto(arr, vals, where=mask)``, the difference is that
1957:     `place` uses the first N elements of `vals`, where N is the number of
1958:     True values in `mask`, while `copyto` uses the elements where `mask`
1959:     is True.
1960: 
1961:     Note that `extract` does the exact opposite of `place`.
1962: 
1963:     Parameters
1964:     ----------
1965:     arr : ndarray
1966:         Array to put data into.
1967:     mask : array_like
1968:         Boolean mask array. Must have the same size as `a`.
1969:     vals : 1-D sequence
1970:         Values to put into `a`. Only the first N elements are used, where
1971:         N is the number of True values in `mask`. If `vals` is smaller
1972:         than N it will be repeated.
1973: 
1974:     See Also
1975:     --------
1976:     copyto, put, take, extract
1977: 
1978:     Examples
1979:     --------
1980:     >>> arr = np.arange(6).reshape(2, 3)
1981:     >>> np.place(arr, arr>2, [44, 55])
1982:     >>> arr
1983:     array([[ 0,  1,  2],
1984:            [44, 55, 44]])
1985: 
1986:     '''
1987:     if not isinstance(arr, np.ndarray):
1988:         raise TypeError("argument 1 must be numpy.ndarray, "
1989:                         "not {name}".format(name=type(arr).__name__))
1990: 
1991:     return _insert(arr, mask, vals)
1992: 
1993: 
1994: def disp(mesg, device=None, linefeed=True):
1995:     '''
1996:     Display a message on a device.
1997: 
1998:     Parameters
1999:     ----------
2000:     mesg : str
2001:         Message to display.
2002:     device : object
2003:         Device to write message. If None, defaults to ``sys.stdout`` which is
2004:         very similar to ``print``. `device` needs to have ``write()`` and
2005:         ``flush()`` methods.
2006:     linefeed : bool, optional
2007:         Option whether to print a line feed or not. Defaults to True.
2008: 
2009:     Raises
2010:     ------
2011:     AttributeError
2012:         If `device` does not have a ``write()`` or ``flush()`` method.
2013: 
2014:     Examples
2015:     --------
2016:     Besides ``sys.stdout``, a file-like object can also be used as it has
2017:     both required methods:
2018: 
2019:     >>> from StringIO import StringIO
2020:     >>> buf = StringIO()
2021:     >>> np.disp('"Display" in a file', device=buf)
2022:     >>> buf.getvalue()
2023:     '"Display" in a file\\n'
2024: 
2025:     '''
2026:     if device is None:
2027:         device = sys.stdout
2028:     if linefeed:
2029:         device.write('%s\n' % mesg)
2030:     else:
2031:         device.write('%s' % mesg)
2032:     device.flush()
2033:     return
2034: 
2035: 
2036: class vectorize(object):
2037:     '''
2038:     vectorize(pyfunc, otypes='', doc=None, excluded=None, cache=False)
2039: 
2040:     Generalized function class.
2041: 
2042:     Define a vectorized function which takes a nested sequence
2043:     of objects or numpy arrays as inputs and returns a
2044:     numpy array as output. The vectorized function evaluates `pyfunc` over
2045:     successive tuples of the input arrays like the python map function,
2046:     except it uses the broadcasting rules of numpy.
2047: 
2048:     The data type of the output of `vectorized` is determined by calling
2049:     the function with the first element of the input.  This can be avoided
2050:     by specifying the `otypes` argument.
2051: 
2052:     Parameters
2053:     ----------
2054:     pyfunc : callable
2055:         A python function or method.
2056:     otypes : str or list of dtypes, optional
2057:         The output data type. It must be specified as either a string of
2058:         typecode characters or a list of data type specifiers. There should
2059:         be one data type specifier for each output.
2060:     doc : str, optional
2061:         The docstring for the function. If `None`, the docstring will be the
2062:         ``pyfunc.__doc__``.
2063:     excluded : set, optional
2064:         Set of strings or integers representing the positional or keyword
2065:         arguments for which the function will not be vectorized.  These will be
2066:         passed directly to `pyfunc` unmodified.
2067: 
2068:         .. versionadded:: 1.7.0
2069: 
2070:     cache : bool, optional
2071:        If `True`, then cache the first function call that determines the number
2072:        of outputs if `otypes` is not provided.
2073: 
2074:         .. versionadded:: 1.7.0
2075: 
2076:     Returns
2077:     -------
2078:     vectorized : callable
2079:         Vectorized function.
2080: 
2081:     Examples
2082:     --------
2083:     >>> def myfunc(a, b):
2084:     ...     "Return a-b if a>b, otherwise return a+b"
2085:     ...     if a > b:
2086:     ...         return a - b
2087:     ...     else:
2088:     ...         return a + b
2089: 
2090:     >>> vfunc = np.vectorize(myfunc)
2091:     >>> vfunc([1, 2, 3, 4], 2)
2092:     array([3, 4, 1, 2])
2093: 
2094:     The docstring is taken from the input function to `vectorize` unless it
2095:     is specified
2096: 
2097:     >>> vfunc.__doc__
2098:     'Return a-b if a>b, otherwise return a+b'
2099:     >>> vfunc = np.vectorize(myfunc, doc='Vectorized `myfunc`')
2100:     >>> vfunc.__doc__
2101:     'Vectorized `myfunc`'
2102: 
2103:     The output type is determined by evaluating the first element of the input,
2104:     unless it is specified
2105: 
2106:     >>> out = vfunc([1, 2, 3, 4], 2)
2107:     >>> type(out[0])
2108:     <type 'numpy.int32'>
2109:     >>> vfunc = np.vectorize(myfunc, otypes=[np.float])
2110:     >>> out = vfunc([1, 2, 3, 4], 2)
2111:     >>> type(out[0])
2112:     <type 'numpy.float64'>
2113: 
2114:     The `excluded` argument can be used to prevent vectorizing over certain
2115:     arguments.  This can be useful for array-like arguments of a fixed length
2116:     such as the coefficients for a polynomial as in `polyval`:
2117: 
2118:     >>> def mypolyval(p, x):
2119:     ...     _p = list(p)
2120:     ...     res = _p.pop(0)
2121:     ...     while _p:
2122:     ...         res = res*x + _p.pop(0)
2123:     ...     return res
2124:     >>> vpolyval = np.vectorize(mypolyval, excluded=['p'])
2125:     >>> vpolyval(p=[1, 2, 3], x=[0, 1])
2126:     array([3, 6])
2127: 
2128:     Positional arguments may also be excluded by specifying their position:
2129: 
2130:     >>> vpolyval.excluded.add(0)
2131:     >>> vpolyval([1, 2, 3], x=[0, 1])
2132:     array([3, 6])
2133: 
2134:     Notes
2135:     -----
2136:     The `vectorize` function is provided primarily for convenience, not for
2137:     performance. The implementation is essentially a for loop.
2138: 
2139:     If `otypes` is not specified, then a call to the function with the
2140:     first argument will be used to determine the number of outputs.  The
2141:     results of this call will be cached if `cache` is `True` to prevent
2142:     calling the function twice.  However, to implement the cache, the
2143:     original function must be wrapped which will slow down subsequent
2144:     calls, so only do this if your function is expensive.
2145: 
2146:     The new keyword argument interface and `excluded` argument support
2147:     further degrades performance.
2148: 
2149:     '''
2150: 
2151:     def __init__(self, pyfunc, otypes='', doc=None, excluded=None,
2152:                  cache=False):
2153:         self.pyfunc = pyfunc
2154:         self.cache = cache
2155:         self._ufunc = None    # Caching to improve default performance
2156: 
2157:         if doc is None:
2158:             self.__doc__ = pyfunc.__doc__
2159:         else:
2160:             self.__doc__ = doc
2161: 
2162:         if isinstance(otypes, str):
2163:             self.otypes = otypes
2164:             for char in self.otypes:
2165:                 if char not in typecodes['All']:
2166:                     raise ValueError(
2167:                         "Invalid otype specified: %s" % (char,))
2168:         elif iterable(otypes):
2169:             self.otypes = ''.join([_nx.dtype(x).char for x in otypes])
2170:         else:
2171:             raise ValueError(
2172:                 "Invalid otype specification")
2173: 
2174:         # Excluded variable support
2175:         if excluded is None:
2176:             excluded = set()
2177:         self.excluded = set(excluded)
2178: 
2179:     def __call__(self, *args, **kwargs):
2180:         '''
2181:         Return arrays with the results of `pyfunc` broadcast (vectorized) over
2182:         `args` and `kwargs` not in `excluded`.
2183:         '''
2184:         excluded = self.excluded
2185:         if not kwargs and not excluded:
2186:             func = self.pyfunc
2187:             vargs = args
2188:         else:
2189:             # The wrapper accepts only positional arguments: we use `names` and
2190:             # `inds` to mutate `the_args` and `kwargs` to pass to the original
2191:             # function.
2192:             nargs = len(args)
2193: 
2194:             names = [_n for _n in kwargs if _n not in excluded]
2195:             inds = [_i for _i in range(nargs) if _i not in excluded]
2196:             the_args = list(args)
2197: 
2198:             def func(*vargs):
2199:                 for _n, _i in enumerate(inds):
2200:                     the_args[_i] = vargs[_n]
2201:                 kwargs.update(zip(names, vargs[len(inds):]))
2202:                 return self.pyfunc(*the_args, **kwargs)
2203: 
2204:             vargs = [args[_i] for _i in inds]
2205:             vargs.extend([kwargs[_n] for _n in names])
2206: 
2207:         return self._vectorize_call(func=func, args=vargs)
2208: 
2209:     def _get_ufunc_and_otypes(self, func, args):
2210:         '''Return (ufunc, otypes).'''
2211:         # frompyfunc will fail if args is empty
2212:         if not args:
2213:             raise ValueError('args can not be empty')
2214: 
2215:         if self.otypes:
2216:             otypes = self.otypes
2217:             nout = len(otypes)
2218: 
2219:             # Note logic here: We only *use* self._ufunc if func is self.pyfunc
2220:             # even though we set self._ufunc regardless.
2221:             if func is self.pyfunc and self._ufunc is not None:
2222:                 ufunc = self._ufunc
2223:             else:
2224:                 ufunc = self._ufunc = frompyfunc(func, len(args), nout)
2225:         else:
2226:             # Get number of outputs and output types by calling the function on
2227:             # the first entries of args.  We also cache the result to prevent
2228:             # the subsequent call when the ufunc is evaluated.
2229:             # Assumes that ufunc first evaluates the 0th elements in the input
2230:             # arrays (the input values are not checked to ensure this)
2231:             inputs = [asarray(_a).flat[0] for _a in args]
2232:             outputs = func(*inputs)
2233: 
2234:             # Performance note: profiling indicates that -- for simple
2235:             # functions at least -- this wrapping can almost double the
2236:             # execution time.
2237:             # Hence we make it optional.
2238:             if self.cache:
2239:                 _cache = [outputs]
2240: 
2241:                 def _func(*vargs):
2242:                     if _cache:
2243:                         return _cache.pop()
2244:                     else:
2245:                         return func(*vargs)
2246:             else:
2247:                 _func = func
2248: 
2249:             if isinstance(outputs, tuple):
2250:                 nout = len(outputs)
2251:             else:
2252:                 nout = 1
2253:                 outputs = (outputs,)
2254: 
2255:             otypes = ''.join([asarray(outputs[_k]).dtype.char
2256:                               for _k in range(nout)])
2257: 
2258:             # Performance note: profiling indicates that creating the ufunc is
2259:             # not a significant cost compared with wrapping so it seems not
2260:             # worth trying to cache this.
2261:             ufunc = frompyfunc(_func, len(args), nout)
2262: 
2263:         return ufunc, otypes
2264: 
2265:     def _vectorize_call(self, func, args):
2266:         '''Vectorized call to `func` over positional `args`.'''
2267:         if not args:
2268:             _res = func()
2269:         else:
2270:             ufunc, otypes = self._get_ufunc_and_otypes(func=func, args=args)
2271: 
2272:             # Convert args to object arrays first
2273:             inputs = [array(_a, copy=False, subok=True, dtype=object)
2274:                       for _a in args]
2275: 
2276:             outputs = ufunc(*inputs)
2277: 
2278:             if ufunc.nout == 1:
2279:                 _res = array(outputs,
2280:                              copy=False, subok=True, dtype=otypes[0])
2281:             else:
2282:                 _res = tuple([array(_x, copy=False, subok=True, dtype=_t)
2283:                               for _x, _t in zip(outputs, otypes)])
2284:         return _res
2285: 
2286: 
2287: def cov(m, y=None, rowvar=True, bias=False, ddof=None, fweights=None,
2288:         aweights=None):
2289:     '''
2290:     Estimate a covariance matrix, given data and weights.
2291: 
2292:     Covariance indicates the level to which two variables vary together.
2293:     If we examine N-dimensional samples, :math:`X = [x_1, x_2, ... x_N]^T`,
2294:     then the covariance matrix element :math:`C_{ij}` is the covariance of
2295:     :math:`x_i` and :math:`x_j`. The element :math:`C_{ii}` is the variance
2296:     of :math:`x_i`.
2297: 
2298:     See the notes for an outline of the algorithm.
2299: 
2300:     Parameters
2301:     ----------
2302:     m : array_like
2303:         A 1-D or 2-D array containing multiple variables and observations.
2304:         Each row of `m` represents a variable, and each column a single
2305:         observation of all those variables. Also see `rowvar` below.
2306:     y : array_like, optional
2307:         An additional set of variables and observations. `y` has the same form
2308:         as that of `m`.
2309:     rowvar : bool, optional
2310:         If `rowvar` is True (default), then each row represents a
2311:         variable, with observations in the columns. Otherwise, the relationship
2312:         is transposed: each column represents a variable, while the rows
2313:         contain observations.
2314:     bias : bool, optional
2315:         Default normalization (False) is by ``(N - 1)``, where ``N`` is the
2316:         number of observations given (unbiased estimate). If `bias` is True, then
2317:         normalization is by ``N``. These values can be overridden by using the
2318:         keyword ``ddof`` in numpy versions >= 1.5.
2319:     ddof : int, optional
2320:         If not ``None`` the default value implied by `bias` is overridden.
2321:         Note that ``ddof=1`` will return the unbiased estimate, even if both
2322:         `fweights` and `aweights` are specified, and ``ddof=0`` will return
2323:         the simple average. See the notes for the details. The default value
2324:         is ``None``.
2325: 
2326:         .. versionadded:: 1.5
2327:     fweights : array_like, int, optional
2328:         1-D array of integer freguency weights; the number of times each
2329:         observation vector should be repeated.
2330: 
2331:         .. versionadded:: 1.10
2332:     aweights : array_like, optional
2333:         1-D array of observation vector weights. These relative weights are
2334:         typically large for observations considered "important" and smaller for
2335:         observations considered less "important". If ``ddof=0`` the array of
2336:         weights can be used to assign probabilities to observation vectors.
2337: 
2338:         .. versionadded:: 1.10
2339: 
2340:     Returns
2341:     -------
2342:     out : ndarray
2343:         The covariance matrix of the variables.
2344: 
2345:     See Also
2346:     --------
2347:     corrcoef : Normalized covariance matrix
2348: 
2349:     Notes
2350:     -----
2351:     Assume that the observations are in the columns of the observation
2352:     array `m` and let ``f = fweights`` and ``a = aweights`` for brevity. The
2353:     steps to compute the weighted covariance are as follows::
2354: 
2355:         >>> w = f * a
2356:         >>> v1 = np.sum(w)
2357:         >>> v2 = np.sum(w * a)
2358:         >>> m -= np.sum(m * w, axis=1, keepdims=True) / v1
2359:         >>> cov = np.dot(m * w, m.T) * v1 / (v1**2 - ddof * v2)
2360: 
2361:     Note that when ``a == 1``, the normalization factor
2362:     ``v1 / (v1**2 - ddof * v2)`` goes over to ``1 / (np.sum(f) - ddof)``
2363:     as it should.
2364: 
2365:     Examples
2366:     --------
2367:     Consider two variables, :math:`x_0` and :math:`x_1`, which
2368:     correlate perfectly, but in opposite directions:
2369: 
2370:     >>> x = np.array([[0, 2], [1, 1], [2, 0]]).T
2371:     >>> x
2372:     array([[0, 1, 2],
2373:            [2, 1, 0]])
2374: 
2375:     Note how :math:`x_0` increases while :math:`x_1` decreases. The covariance
2376:     matrix shows this clearly:
2377: 
2378:     >>> np.cov(x)
2379:     array([[ 1., -1.],
2380:            [-1.,  1.]])
2381: 
2382:     Note that element :math:`C_{0,1}`, which shows the correlation between
2383:     :math:`x_0` and :math:`x_1`, is negative.
2384: 
2385:     Further, note how `x` and `y` are combined:
2386: 
2387:     >>> x = [-2.1, -1,  4.3]
2388:     >>> y = [3,  1.1,  0.12]
2389:     >>> X = np.vstack((x,y))
2390:     >>> print(np.cov(X))
2391:     [[ 11.71        -4.286     ]
2392:      [ -4.286        2.14413333]]
2393:     >>> print(np.cov(x, y))
2394:     [[ 11.71        -4.286     ]
2395:      [ -4.286        2.14413333]]
2396:     >>> print(np.cov(x))
2397:     11.71
2398: 
2399:     '''
2400:     # Check inputs
2401:     if ddof is not None and ddof != int(ddof):
2402:         raise ValueError(
2403:             "ddof must be integer")
2404: 
2405:     # Handles complex arrays too
2406:     m = np.asarray(m)
2407:     if y is None:
2408:         dtype = np.result_type(m, np.float64)
2409:     else:
2410:         y = np.asarray(y)
2411:         dtype = np.result_type(m, y, np.float64)
2412:     X = array(m, ndmin=2, dtype=dtype)
2413:     if rowvar == 0 and X.shape[0] != 1:
2414:         X = X.T
2415:     if X.shape[0] == 0:
2416:         return np.array([]).reshape(0, 0)
2417:     if y is not None:
2418:         y = array(y, copy=False, ndmin=2, dtype=dtype)
2419:         if rowvar == 0 and y.shape[0] != 1:
2420:             y = y.T
2421:         X = np.vstack((X, y))
2422: 
2423:     if ddof is None:
2424:         if bias == 0:
2425:             ddof = 1
2426:         else:
2427:             ddof = 0
2428: 
2429:     # Get the product of frequencies and weights
2430:     w = None
2431:     if fweights is not None:
2432:         fweights = np.asarray(fweights, dtype=np.float)
2433:         if not np.all(fweights == np.around(fweights)):
2434:             raise TypeError(
2435:                 "fweights must be integer")
2436:         if fweights.ndim > 1:
2437:             raise RuntimeError(
2438:                 "cannot handle multidimensional fweights")
2439:         if fweights.shape[0] != X.shape[1]:
2440:             raise RuntimeError(
2441:                 "incompatible numbers of samples and fweights")
2442:         if any(fweights < 0):
2443:             raise ValueError(
2444:                 "fweights cannot be negative")
2445:         w = fweights
2446:     if aweights is not None:
2447:         aweights = np.asarray(aweights, dtype=np.float)
2448:         if aweights.ndim > 1:
2449:             raise RuntimeError(
2450:                 "cannot handle multidimensional aweights")
2451:         if aweights.shape[0] != X.shape[1]:
2452:             raise RuntimeError(
2453:                 "incompatible numbers of samples and aweights")
2454:         if any(aweights < 0):
2455:             raise ValueError(
2456:                 "aweights cannot be negative")
2457:         if w is None:
2458:             w = aweights
2459:         else:
2460:             w *= aweights
2461: 
2462:     avg, w_sum = average(X, axis=1, weights=w, returned=True)
2463:     w_sum = w_sum[0]
2464: 
2465:     # Determine the normalization
2466:     if w is None:
2467:         fact = X.shape[1] - ddof
2468:     elif ddof == 0:
2469:         fact = w_sum
2470:     elif aweights is None:
2471:         fact = w_sum - ddof
2472:     else:
2473:         fact = w_sum - ddof*sum(w*aweights)/w_sum
2474: 
2475:     if fact <= 0:
2476:         warnings.warn("Degrees of freedom <= 0 for slice", RuntimeWarning)
2477:         fact = 0.0
2478: 
2479:     X -= avg[:, None]
2480:     if w is None:
2481:         X_T = X.T
2482:     else:
2483:         X_T = (X*w).T
2484:     c = dot(X, X_T.conj())
2485:     c *= 1. / np.float64(fact)
2486:     return c.squeeze()
2487: 
2488: 
2489: def corrcoef(x, y=None, rowvar=1, bias=np._NoValue, ddof=np._NoValue):
2490:     '''
2491:     Return Pearson product-moment correlation coefficients.
2492: 
2493:     Please refer to the documentation for `cov` for more detail.  The
2494:     relationship between the correlation coefficient matrix, `R`, and the
2495:     covariance matrix, `C`, is
2496: 
2497:     .. math:: R_{ij} = \\frac{ C_{ij} } { \\sqrt{ C_{ii} * C_{jj} } }
2498: 
2499:     The values of `R` are between -1 and 1, inclusive.
2500: 
2501:     Parameters
2502:     ----------
2503:     x : array_like
2504:         A 1-D or 2-D array containing multiple variables and observations.
2505:         Each row of `x` represents a variable, and each column a single
2506:         observation of all those variables. Also see `rowvar` below.
2507:     y : array_like, optional
2508:         An additional set of variables and observations. `y` has the same
2509:         shape as `x`.
2510:     rowvar : int, optional
2511:         If `rowvar` is non-zero (default), then each row represents a
2512:         variable, with observations in the columns. Otherwise, the relationship
2513:         is transposed: each column represents a variable, while the rows
2514:         contain observations.
2515:     bias : _NoValue, optional
2516:         Has no effect, do not use.
2517: 
2518:         .. deprecated:: 1.10.0
2519:     ddof : _NoValue, optional
2520:         Has no effect, do not use.
2521: 
2522:         .. deprecated:: 1.10.0
2523: 
2524:     Returns
2525:     -------
2526:     R : ndarray
2527:         The correlation coefficient matrix of the variables.
2528: 
2529:     See Also
2530:     --------
2531:     cov : Covariance matrix
2532: 
2533:     Notes
2534:     -----
2535:     Due to floating point rounding the resulting array may not be Hermitian,
2536:     the diagonal elements may not be 1, and the elements may not satisfy the
2537:     inequality abs(a) <= 1. The real and imaginary parts are clipped to the
2538:     interval [-1,  1] in an attempt to improve on that situation but is not
2539:     much help in the complex case.
2540: 
2541:     This function accepts but discards arguments `bias` and `ddof`.  This is
2542:     for backwards compatibility with previous versions of this function.  These
2543:     arguments had no effect on the return values of the function and can be
2544:     safely ignored in this and previous versions of numpy.
2545:     '''
2546:     if bias is not np._NoValue or ddof is not np._NoValue:
2547:         # 2015-03-15, 1.10
2548:         warnings.warn('bias and ddof have no effect and are deprecated',
2549:                       DeprecationWarning)
2550:     c = cov(x, y, rowvar)
2551:     try:
2552:         d = diag(c)
2553:     except ValueError:
2554:         # scalar covariance
2555:         # nan if incorrect value (nan, inf, 0), 1 otherwise
2556:         return c / c
2557:     stddev = sqrt(d.real)
2558:     c /= stddev[:, None]
2559:     c /= stddev[None, :]
2560: 
2561:     # Clip real and imaginary parts to [-1, 1].  This does not guarantee
2562:     # abs(a[i,j]) <= 1 for complex arrays, but is the best we can do without
2563:     # excessive work.
2564:     np.clip(c.real, -1, 1, out=c.real)
2565:     if np.iscomplexobj(c):
2566:         np.clip(c.imag, -1, 1, out=c.imag)
2567: 
2568:     return c
2569: 
2570: 
2571: def blackman(M):
2572:     '''
2573:     Return the Blackman window.
2574: 
2575:     The Blackman window is a taper formed by using the first three
2576:     terms of a summation of cosines. It was designed to have close to the
2577:     minimal leakage possible.  It is close to optimal, only slightly worse
2578:     than a Kaiser window.
2579: 
2580:     Parameters
2581:     ----------
2582:     M : int
2583:         Number of points in the output window. If zero or less, an empty
2584:         array is returned.
2585: 
2586:     Returns
2587:     -------
2588:     out : ndarray
2589:         The window, with the maximum value normalized to one (the value one
2590:         appears only if the number of samples is odd).
2591: 
2592:     See Also
2593:     --------
2594:     bartlett, hamming, hanning, kaiser
2595: 
2596:     Notes
2597:     -----
2598:     The Blackman window is defined as
2599: 
2600:     .. math::  w(n) = 0.42 - 0.5 \\cos(2\\pi n/M) + 0.08 \\cos(4\\pi n/M)
2601: 
2602:     Most references to the Blackman window come from the signal processing
2603:     literature, where it is used as one of many windowing functions for
2604:     smoothing values.  It is also known as an apodization (which means
2605:     "removing the foot", i.e. smoothing discontinuities at the beginning
2606:     and end of the sampled signal) or tapering function. It is known as a
2607:     "near optimal" tapering function, almost as good (by some measures)
2608:     as the kaiser window.
2609: 
2610:     References
2611:     ----------
2612:     Blackman, R.B. and Tukey, J.W., (1958) The measurement of power spectra,
2613:     Dover Publications, New York.
2614: 
2615:     Oppenheim, A.V., and R.W. Schafer. Discrete-Time Signal Processing.
2616:     Upper Saddle River, NJ: Prentice-Hall, 1999, pp. 468-471.
2617: 
2618:     Examples
2619:     --------
2620:     >>> np.blackman(12)
2621:     array([ -1.38777878e-17,   3.26064346e-02,   1.59903635e-01,
2622:              4.14397981e-01,   7.36045180e-01,   9.67046769e-01,
2623:              9.67046769e-01,   7.36045180e-01,   4.14397981e-01,
2624:              1.59903635e-01,   3.26064346e-02,  -1.38777878e-17])
2625: 
2626: 
2627:     Plot the window and the frequency response:
2628: 
2629:     >>> from numpy.fft import fft, fftshift
2630:     >>> window = np.blackman(51)
2631:     >>> plt.plot(window)
2632:     [<matplotlib.lines.Line2D object at 0x...>]
2633:     >>> plt.title("Blackman window")
2634:     <matplotlib.text.Text object at 0x...>
2635:     >>> plt.ylabel("Amplitude")
2636:     <matplotlib.text.Text object at 0x...>
2637:     >>> plt.xlabel("Sample")
2638:     <matplotlib.text.Text object at 0x...>
2639:     >>> plt.show()
2640: 
2641:     >>> plt.figure()
2642:     <matplotlib.figure.Figure object at 0x...>
2643:     >>> A = fft(window, 2048) / 25.5
2644:     >>> mag = np.abs(fftshift(A))
2645:     >>> freq = np.linspace(-0.5, 0.5, len(A))
2646:     >>> response = 20 * np.log10(mag)
2647:     >>> response = np.clip(response, -100, 100)
2648:     >>> plt.plot(freq, response)
2649:     [<matplotlib.lines.Line2D object at 0x...>]
2650:     >>> plt.title("Frequency response of Blackman window")
2651:     <matplotlib.text.Text object at 0x...>
2652:     >>> plt.ylabel("Magnitude [dB]")
2653:     <matplotlib.text.Text object at 0x...>
2654:     >>> plt.xlabel("Normalized frequency [cycles per sample]")
2655:     <matplotlib.text.Text object at 0x...>
2656:     >>> plt.axis('tight')
2657:     (-0.5, 0.5, -100.0, ...)
2658:     >>> plt.show()
2659: 
2660:     '''
2661:     if M < 1:
2662:         return array([])
2663:     if M == 1:
2664:         return ones(1, float)
2665:     n = arange(0, M)
2666:     return 0.42 - 0.5*cos(2.0*pi*n/(M-1)) + 0.08*cos(4.0*pi*n/(M-1))
2667: 
2668: 
2669: def bartlett(M):
2670:     '''
2671:     Return the Bartlett window.
2672: 
2673:     The Bartlett window is very similar to a triangular window, except
2674:     that the end points are at zero.  It is often used in signal
2675:     processing for tapering a signal, without generating too much
2676:     ripple in the frequency domain.
2677: 
2678:     Parameters
2679:     ----------
2680:     M : int
2681:         Number of points in the output window. If zero or less, an
2682:         empty array is returned.
2683: 
2684:     Returns
2685:     -------
2686:     out : array
2687:         The triangular window, with the maximum value normalized to one
2688:         (the value one appears only if the number of samples is odd), with
2689:         the first and last samples equal to zero.
2690: 
2691:     See Also
2692:     --------
2693:     blackman, hamming, hanning, kaiser
2694: 
2695:     Notes
2696:     -----
2697:     The Bartlett window is defined as
2698: 
2699:     .. math:: w(n) = \\frac{2}{M-1} \\left(
2700:               \\frac{M-1}{2} - \\left|n - \\frac{M-1}{2}\\right|
2701:               \\right)
2702: 
2703:     Most references to the Bartlett window come from the signal
2704:     processing literature, where it is used as one of many windowing
2705:     functions for smoothing values.  Note that convolution with this
2706:     window produces linear interpolation.  It is also known as an
2707:     apodization (which means"removing the foot", i.e. smoothing
2708:     discontinuities at the beginning and end of the sampled signal) or
2709:     tapering function. The fourier transform of the Bartlett is the product
2710:     of two sinc functions.
2711:     Note the excellent discussion in Kanasewich.
2712: 
2713:     References
2714:     ----------
2715:     .. [1] M.S. Bartlett, "Periodogram Analysis and Continuous Spectra",
2716:            Biometrika 37, 1-16, 1950.
2717:     .. [2] E.R. Kanasewich, "Time Sequence Analysis in Geophysics",
2718:            The University of Alberta Press, 1975, pp. 109-110.
2719:     .. [3] A.V. Oppenheim and R.W. Schafer, "Discrete-Time Signal
2720:            Processing", Prentice-Hall, 1999, pp. 468-471.
2721:     .. [4] Wikipedia, "Window function",
2722:            http://en.wikipedia.org/wiki/Window_function
2723:     .. [5] W.H. Press,  B.P. Flannery, S.A. Teukolsky, and W.T. Vetterling,
2724:            "Numerical Recipes", Cambridge University Press, 1986, page 429.
2725: 
2726: 
2727:     Examples
2728:     --------
2729:     >>> np.bartlett(12)
2730:     array([ 0.        ,  0.18181818,  0.36363636,  0.54545455,  0.72727273,
2731:             0.90909091,  0.90909091,  0.72727273,  0.54545455,  0.36363636,
2732:             0.18181818,  0.        ])
2733: 
2734:     Plot the window and its frequency response (requires SciPy and matplotlib):
2735: 
2736:     >>> from numpy.fft import fft, fftshift
2737:     >>> window = np.bartlett(51)
2738:     >>> plt.plot(window)
2739:     [<matplotlib.lines.Line2D object at 0x...>]
2740:     >>> plt.title("Bartlett window")
2741:     <matplotlib.text.Text object at 0x...>
2742:     >>> plt.ylabel("Amplitude")
2743:     <matplotlib.text.Text object at 0x...>
2744:     >>> plt.xlabel("Sample")
2745:     <matplotlib.text.Text object at 0x...>
2746:     >>> plt.show()
2747: 
2748:     >>> plt.figure()
2749:     <matplotlib.figure.Figure object at 0x...>
2750:     >>> A = fft(window, 2048) / 25.5
2751:     >>> mag = np.abs(fftshift(A))
2752:     >>> freq = np.linspace(-0.5, 0.5, len(A))
2753:     >>> response = 20 * np.log10(mag)
2754:     >>> response = np.clip(response, -100, 100)
2755:     >>> plt.plot(freq, response)
2756:     [<matplotlib.lines.Line2D object at 0x...>]
2757:     >>> plt.title("Frequency response of Bartlett window")
2758:     <matplotlib.text.Text object at 0x...>
2759:     >>> plt.ylabel("Magnitude [dB]")
2760:     <matplotlib.text.Text object at 0x...>
2761:     >>> plt.xlabel("Normalized frequency [cycles per sample]")
2762:     <matplotlib.text.Text object at 0x...>
2763:     >>> plt.axis('tight')
2764:     (-0.5, 0.5, -100.0, ...)
2765:     >>> plt.show()
2766: 
2767:     '''
2768:     if M < 1:
2769:         return array([])
2770:     if M == 1:
2771:         return ones(1, float)
2772:     n = arange(0, M)
2773:     return where(less_equal(n, (M-1)/2.0), 2.0*n/(M-1), 2.0 - 2.0*n/(M-1))
2774: 
2775: 
2776: def hanning(M):
2777:     '''
2778:     Return the Hanning window.
2779: 
2780:     The Hanning window is a taper formed by using a weighted cosine.
2781: 
2782:     Parameters
2783:     ----------
2784:     M : int
2785:         Number of points in the output window. If zero or less, an
2786:         empty array is returned.
2787: 
2788:     Returns
2789:     -------
2790:     out : ndarray, shape(M,)
2791:         The window, with the maximum value normalized to one (the value
2792:         one appears only if `M` is odd).
2793: 
2794:     See Also
2795:     --------
2796:     bartlett, blackman, hamming, kaiser
2797: 
2798:     Notes
2799:     -----
2800:     The Hanning window is defined as
2801: 
2802:     .. math::  w(n) = 0.5 - 0.5cos\\left(\\frac{2\\pi{n}}{M-1}\\right)
2803:                \\qquad 0 \\leq n \\leq M-1
2804: 
2805:     The Hanning was named for Julius von Hann, an Austrian meteorologist.
2806:     It is also known as the Cosine Bell. Some authors prefer that it be
2807:     called a Hann window, to help avoid confusion with the very similar
2808:     Hamming window.
2809: 
2810:     Most references to the Hanning window come from the signal processing
2811:     literature, where it is used as one of many windowing functions for
2812:     smoothing values.  It is also known as an apodization (which means
2813:     "removing the foot", i.e. smoothing discontinuities at the beginning
2814:     and end of the sampled signal) or tapering function.
2815: 
2816:     References
2817:     ----------
2818:     .. [1] Blackman, R.B. and Tukey, J.W., (1958) The measurement of power
2819:            spectra, Dover Publications, New York.
2820:     .. [2] E.R. Kanasewich, "Time Sequence Analysis in Geophysics",
2821:            The University of Alberta Press, 1975, pp. 106-108.
2822:     .. [3] Wikipedia, "Window function",
2823:            http://en.wikipedia.org/wiki/Window_function
2824:     .. [4] W.H. Press,  B.P. Flannery, S.A. Teukolsky, and W.T. Vetterling,
2825:            "Numerical Recipes", Cambridge University Press, 1986, page 425.
2826: 
2827:     Examples
2828:     --------
2829:     >>> np.hanning(12)
2830:     array([ 0.        ,  0.07937323,  0.29229249,  0.57115742,  0.82743037,
2831:             0.97974649,  0.97974649,  0.82743037,  0.57115742,  0.29229249,
2832:             0.07937323,  0.        ])
2833: 
2834:     Plot the window and its frequency response:
2835: 
2836:     >>> from numpy.fft import fft, fftshift
2837:     >>> window = np.hanning(51)
2838:     >>> plt.plot(window)
2839:     [<matplotlib.lines.Line2D object at 0x...>]
2840:     >>> plt.title("Hann window")
2841:     <matplotlib.text.Text object at 0x...>
2842:     >>> plt.ylabel("Amplitude")
2843:     <matplotlib.text.Text object at 0x...>
2844:     >>> plt.xlabel("Sample")
2845:     <matplotlib.text.Text object at 0x...>
2846:     >>> plt.show()
2847: 
2848:     >>> plt.figure()
2849:     <matplotlib.figure.Figure object at 0x...>
2850:     >>> A = fft(window, 2048) / 25.5
2851:     >>> mag = np.abs(fftshift(A))
2852:     >>> freq = np.linspace(-0.5, 0.5, len(A))
2853:     >>> response = 20 * np.log10(mag)
2854:     >>> response = np.clip(response, -100, 100)
2855:     >>> plt.plot(freq, response)
2856:     [<matplotlib.lines.Line2D object at 0x...>]
2857:     >>> plt.title("Frequency response of the Hann window")
2858:     <matplotlib.text.Text object at 0x...>
2859:     >>> plt.ylabel("Magnitude [dB]")
2860:     <matplotlib.text.Text object at 0x...>
2861:     >>> plt.xlabel("Normalized frequency [cycles per sample]")
2862:     <matplotlib.text.Text object at 0x...>
2863:     >>> plt.axis('tight')
2864:     (-0.5, 0.5, -100.0, ...)
2865:     >>> plt.show()
2866: 
2867:     '''
2868:     if M < 1:
2869:         return array([])
2870:     if M == 1:
2871:         return ones(1, float)
2872:     n = arange(0, M)
2873:     return 0.5 - 0.5*cos(2.0*pi*n/(M-1))
2874: 
2875: 
2876: def hamming(M):
2877:     '''
2878:     Return the Hamming window.
2879: 
2880:     The Hamming window is a taper formed by using a weighted cosine.
2881: 
2882:     Parameters
2883:     ----------
2884:     M : int
2885:         Number of points in the output window. If zero or less, an
2886:         empty array is returned.
2887: 
2888:     Returns
2889:     -------
2890:     out : ndarray
2891:         The window, with the maximum value normalized to one (the value
2892:         one appears only if the number of samples is odd).
2893: 
2894:     See Also
2895:     --------
2896:     bartlett, blackman, hanning, kaiser
2897: 
2898:     Notes
2899:     -----
2900:     The Hamming window is defined as
2901: 
2902:     .. math::  w(n) = 0.54 - 0.46cos\\left(\\frac{2\\pi{n}}{M-1}\\right)
2903:                \\qquad 0 \\leq n \\leq M-1
2904: 
2905:     The Hamming was named for R. W. Hamming, an associate of J. W. Tukey
2906:     and is described in Blackman and Tukey. It was recommended for
2907:     smoothing the truncated autocovariance function in the time domain.
2908:     Most references to the Hamming window come from the signal processing
2909:     literature, where it is used as one of many windowing functions for
2910:     smoothing values.  It is also known as an apodization (which means
2911:     "removing the foot", i.e. smoothing discontinuities at the beginning
2912:     and end of the sampled signal) or tapering function.
2913: 
2914:     References
2915:     ----------
2916:     .. [1] Blackman, R.B. and Tukey, J.W., (1958) The measurement of power
2917:            spectra, Dover Publications, New York.
2918:     .. [2] E.R. Kanasewich, "Time Sequence Analysis in Geophysics", The
2919:            University of Alberta Press, 1975, pp. 109-110.
2920:     .. [3] Wikipedia, "Window function",
2921:            http://en.wikipedia.org/wiki/Window_function
2922:     .. [4] W.H. Press,  B.P. Flannery, S.A. Teukolsky, and W.T. Vetterling,
2923:            "Numerical Recipes", Cambridge University Press, 1986, page 425.
2924: 
2925:     Examples
2926:     --------
2927:     >>> np.hamming(12)
2928:     array([ 0.08      ,  0.15302337,  0.34890909,  0.60546483,  0.84123594,
2929:             0.98136677,  0.98136677,  0.84123594,  0.60546483,  0.34890909,
2930:             0.15302337,  0.08      ])
2931: 
2932:     Plot the window and the frequency response:
2933: 
2934:     >>> from numpy.fft import fft, fftshift
2935:     >>> window = np.hamming(51)
2936:     >>> plt.plot(window)
2937:     [<matplotlib.lines.Line2D object at 0x...>]
2938:     >>> plt.title("Hamming window")
2939:     <matplotlib.text.Text object at 0x...>
2940:     >>> plt.ylabel("Amplitude")
2941:     <matplotlib.text.Text object at 0x...>
2942:     >>> plt.xlabel("Sample")
2943:     <matplotlib.text.Text object at 0x...>
2944:     >>> plt.show()
2945: 
2946:     >>> plt.figure()
2947:     <matplotlib.figure.Figure object at 0x...>
2948:     >>> A = fft(window, 2048) / 25.5
2949:     >>> mag = np.abs(fftshift(A))
2950:     >>> freq = np.linspace(-0.5, 0.5, len(A))
2951:     >>> response = 20 * np.log10(mag)
2952:     >>> response = np.clip(response, -100, 100)
2953:     >>> plt.plot(freq, response)
2954:     [<matplotlib.lines.Line2D object at 0x...>]
2955:     >>> plt.title("Frequency response of Hamming window")
2956:     <matplotlib.text.Text object at 0x...>
2957:     >>> plt.ylabel("Magnitude [dB]")
2958:     <matplotlib.text.Text object at 0x...>
2959:     >>> plt.xlabel("Normalized frequency [cycles per sample]")
2960:     <matplotlib.text.Text object at 0x...>
2961:     >>> plt.axis('tight')
2962:     (-0.5, 0.5, -100.0, ...)
2963:     >>> plt.show()
2964: 
2965:     '''
2966:     if M < 1:
2967:         return array([])
2968:     if M == 1:
2969:         return ones(1, float)
2970:     n = arange(0, M)
2971:     return 0.54 - 0.46*cos(2.0*pi*n/(M-1))
2972: 
2973: ## Code from cephes for i0
2974: 
2975: _i0A = [
2976:     -4.41534164647933937950E-18,
2977:     3.33079451882223809783E-17,
2978:     -2.43127984654795469359E-16,
2979:     1.71539128555513303061E-15,
2980:     -1.16853328779934516808E-14,
2981:     7.67618549860493561688E-14,
2982:     -4.85644678311192946090E-13,
2983:     2.95505266312963983461E-12,
2984:     -1.72682629144155570723E-11,
2985:     9.67580903537323691224E-11,
2986:     -5.18979560163526290666E-10,
2987:     2.65982372468238665035E-9,
2988:     -1.30002500998624804212E-8,
2989:     6.04699502254191894932E-8,
2990:     -2.67079385394061173391E-7,
2991:     1.11738753912010371815E-6,
2992:     -4.41673835845875056359E-6,
2993:     1.64484480707288970893E-5,
2994:     -5.75419501008210370398E-5,
2995:     1.88502885095841655729E-4,
2996:     -5.76375574538582365885E-4,
2997:     1.63947561694133579842E-3,
2998:     -4.32430999505057594430E-3,
2999:     1.05464603945949983183E-2,
3000:     -2.37374148058994688156E-2,
3001:     4.93052842396707084878E-2,
3002:     -9.49010970480476444210E-2,
3003:     1.71620901522208775349E-1,
3004:     -3.04682672343198398683E-1,
3005:     6.76795274409476084995E-1
3006:     ]
3007: 
3008: _i0B = [
3009:     -7.23318048787475395456E-18,
3010:     -4.83050448594418207126E-18,
3011:     4.46562142029675999901E-17,
3012:     3.46122286769746109310E-17,
3013:     -2.82762398051658348494E-16,
3014:     -3.42548561967721913462E-16,
3015:     1.77256013305652638360E-15,
3016:     3.81168066935262242075E-15,
3017:     -9.55484669882830764870E-15,
3018:     -4.15056934728722208663E-14,
3019:     1.54008621752140982691E-14,
3020:     3.85277838274214270114E-13,
3021:     7.18012445138366623367E-13,
3022:     -1.79417853150680611778E-12,
3023:     -1.32158118404477131188E-11,
3024:     -3.14991652796324136454E-11,
3025:     1.18891471078464383424E-11,
3026:     4.94060238822496958910E-10,
3027:     3.39623202570838634515E-9,
3028:     2.26666899049817806459E-8,
3029:     2.04891858946906374183E-7,
3030:     2.89137052083475648297E-6,
3031:     6.88975834691682398426E-5,
3032:     3.36911647825569408990E-3,
3033:     8.04490411014108831608E-1
3034:     ]
3035: 
3036: 
3037: def _chbevl(x, vals):
3038:     b0 = vals[0]
3039:     b1 = 0.0
3040: 
3041:     for i in range(1, len(vals)):
3042:         b2 = b1
3043:         b1 = b0
3044:         b0 = x*b1 - b2 + vals[i]
3045: 
3046:     return 0.5*(b0 - b2)
3047: 
3048: 
3049: def _i0_1(x):
3050:     return exp(x) * _chbevl(x/2.0-2, _i0A)
3051: 
3052: 
3053: def _i0_2(x):
3054:     return exp(x) * _chbevl(32.0/x - 2.0, _i0B) / sqrt(x)
3055: 
3056: 
3057: def i0(x):
3058:     '''
3059:     Modified Bessel function of the first kind, order 0.
3060: 
3061:     Usually denoted :math:`I_0`.  This function does broadcast, but will *not*
3062:     "up-cast" int dtype arguments unless accompanied by at least one float or
3063:     complex dtype argument (see Raises below).
3064: 
3065:     Parameters
3066:     ----------
3067:     x : array_like, dtype float or complex
3068:         Argument of the Bessel function.
3069: 
3070:     Returns
3071:     -------
3072:     out : ndarray, shape = x.shape, dtype = x.dtype
3073:         The modified Bessel function evaluated at each of the elements of `x`.
3074: 
3075:     Raises
3076:     ------
3077:     TypeError: array cannot be safely cast to required type
3078:         If argument consists exclusively of int dtypes.
3079: 
3080:     See Also
3081:     --------
3082:     scipy.special.iv, scipy.special.ive
3083: 
3084:     Notes
3085:     -----
3086:     We use the algorithm published by Clenshaw [1]_ and referenced by
3087:     Abramowitz and Stegun [2]_, for which the function domain is
3088:     partitioned into the two intervals [0,8] and (8,inf), and Chebyshev
3089:     polynomial expansions are employed in each interval. Relative error on
3090:     the domain [0,30] using IEEE arithmetic is documented [3]_ as having a
3091:     peak of 5.8e-16 with an rms of 1.4e-16 (n = 30000).
3092: 
3093:     References
3094:     ----------
3095:     .. [1] C. W. Clenshaw, "Chebyshev series for mathematical functions", in
3096:            *National Physical Laboratory Mathematical Tables*, vol. 5, London:
3097:            Her Majesty's Stationery Office, 1962.
3098:     .. [2] M. Abramowitz and I. A. Stegun, *Handbook of Mathematical
3099:            Functions*, 10th printing, New York: Dover, 1964, pp. 379.
3100:            http://www.math.sfu.ca/~cbm/aands/page_379.htm
3101:     .. [3] http://kobesearch.cpan.org/htdocs/Math-Cephes/Math/Cephes.html
3102: 
3103:     Examples
3104:     --------
3105:     >>> np.i0([0.])
3106:     array(1.0)
3107:     >>> np.i0([0., 1. + 2j])
3108:     array([ 1.00000000+0.j        ,  0.18785373+0.64616944j])
3109: 
3110:     '''
3111:     x = atleast_1d(x).copy()
3112:     y = empty_like(x)
3113:     ind = (x < 0)
3114:     x[ind] = -x[ind]
3115:     ind = (x <= 8.0)
3116:     y[ind] = _i0_1(x[ind])
3117:     ind2 = ~ind
3118:     y[ind2] = _i0_2(x[ind2])
3119:     return y.squeeze()
3120: 
3121: ## End of cephes code for i0
3122: 
3123: 
3124: def kaiser(M, beta):
3125:     '''
3126:     Return the Kaiser window.
3127: 
3128:     The Kaiser window is a taper formed by using a Bessel function.
3129: 
3130:     Parameters
3131:     ----------
3132:     M : int
3133:         Number of points in the output window. If zero or less, an
3134:         empty array is returned.
3135:     beta : float
3136:         Shape parameter for window.
3137: 
3138:     Returns
3139:     -------
3140:     out : array
3141:         The window, with the maximum value normalized to one (the value
3142:         one appears only if the number of samples is odd).
3143: 
3144:     See Also
3145:     --------
3146:     bartlett, blackman, hamming, hanning
3147: 
3148:     Notes
3149:     -----
3150:     The Kaiser window is defined as
3151: 
3152:     .. math::  w(n) = I_0\\left( \\beta \\sqrt{1-\\frac{4n^2}{(M-1)^2}}
3153:                \\right)/I_0(\\beta)
3154: 
3155:     with
3156: 
3157:     .. math:: \\quad -\\frac{M-1}{2} \\leq n \\leq \\frac{M-1}{2},
3158: 
3159:     where :math:`I_0` is the modified zeroth-order Bessel function.
3160: 
3161:     The Kaiser was named for Jim Kaiser, who discovered a simple
3162:     approximation to the DPSS window based on Bessel functions.  The Kaiser
3163:     window is a very good approximation to the Digital Prolate Spheroidal
3164:     Sequence, or Slepian window, which is the transform which maximizes the
3165:     energy in the main lobe of the window relative to total energy.
3166: 
3167:     The Kaiser can approximate many other windows by varying the beta
3168:     parameter.
3169: 
3170:     ====  =======================
3171:     beta  Window shape
3172:     ====  =======================
3173:     0     Rectangular
3174:     5     Similar to a Hamming
3175:     6     Similar to a Hanning
3176:     8.6   Similar to a Blackman
3177:     ====  =======================
3178: 
3179:     A beta value of 14 is probably a good starting point. Note that as beta
3180:     gets large, the window narrows, and so the number of samples needs to be
3181:     large enough to sample the increasingly narrow spike, otherwise NaNs will
3182:     get returned.
3183: 
3184:     Most references to the Kaiser window come from the signal processing
3185:     literature, where it is used as one of many windowing functions for
3186:     smoothing values.  It is also known as an apodization (which means
3187:     "removing the foot", i.e. smoothing discontinuities at the beginning
3188:     and end of the sampled signal) or tapering function.
3189: 
3190:     References
3191:     ----------
3192:     .. [1] J. F. Kaiser, "Digital Filters" - Ch 7 in "Systems analysis by
3193:            digital computer", Editors: F.F. Kuo and J.F. Kaiser, p 218-285.
3194:            John Wiley and Sons, New York, (1966).
3195:     .. [2] E.R. Kanasewich, "Time Sequence Analysis in Geophysics", The
3196:            University of Alberta Press, 1975, pp. 177-178.
3197:     .. [3] Wikipedia, "Window function",
3198:            http://en.wikipedia.org/wiki/Window_function
3199: 
3200:     Examples
3201:     --------
3202:     >>> np.kaiser(12, 14)
3203:     array([  7.72686684e-06,   3.46009194e-03,   4.65200189e-02,
3204:              2.29737120e-01,   5.99885316e-01,   9.45674898e-01,
3205:              9.45674898e-01,   5.99885316e-01,   2.29737120e-01,
3206:              4.65200189e-02,   3.46009194e-03,   7.72686684e-06])
3207: 
3208: 
3209:     Plot the window and the frequency response:
3210: 
3211:     >>> from numpy.fft import fft, fftshift
3212:     >>> window = np.kaiser(51, 14)
3213:     >>> plt.plot(window)
3214:     [<matplotlib.lines.Line2D object at 0x...>]
3215:     >>> plt.title("Kaiser window")
3216:     <matplotlib.text.Text object at 0x...>
3217:     >>> plt.ylabel("Amplitude")
3218:     <matplotlib.text.Text object at 0x...>
3219:     >>> plt.xlabel("Sample")
3220:     <matplotlib.text.Text object at 0x...>
3221:     >>> plt.show()
3222: 
3223:     >>> plt.figure()
3224:     <matplotlib.figure.Figure object at 0x...>
3225:     >>> A = fft(window, 2048) / 25.5
3226:     >>> mag = np.abs(fftshift(A))
3227:     >>> freq = np.linspace(-0.5, 0.5, len(A))
3228:     >>> response = 20 * np.log10(mag)
3229:     >>> response = np.clip(response, -100, 100)
3230:     >>> plt.plot(freq, response)
3231:     [<matplotlib.lines.Line2D object at 0x...>]
3232:     >>> plt.title("Frequency response of Kaiser window")
3233:     <matplotlib.text.Text object at 0x...>
3234:     >>> plt.ylabel("Magnitude [dB]")
3235:     <matplotlib.text.Text object at 0x...>
3236:     >>> plt.xlabel("Normalized frequency [cycles per sample]")
3237:     <matplotlib.text.Text object at 0x...>
3238:     >>> plt.axis('tight')
3239:     (-0.5, 0.5, -100.0, ...)
3240:     >>> plt.show()
3241: 
3242:     '''
3243:     from numpy.dual import i0
3244:     if M == 1:
3245:         return np.array([1.])
3246:     n = arange(0, M)
3247:     alpha = (M-1)/2.0
3248:     return i0(beta * sqrt(1-((n-alpha)/alpha)**2.0))/i0(float(beta))
3249: 
3250: 
3251: def sinc(x):
3252:     '''
3253:     Return the sinc function.
3254: 
3255:     The sinc function is :math:`\\sin(\\pi x)/(\\pi x)`.
3256: 
3257:     Parameters
3258:     ----------
3259:     x : ndarray
3260:         Array (possibly multi-dimensional) of values for which to to
3261:         calculate ``sinc(x)``.
3262: 
3263:     Returns
3264:     -------
3265:     out : ndarray
3266:         ``sinc(x)``, which has the same shape as the input.
3267: 
3268:     Notes
3269:     -----
3270:     ``sinc(0)`` is the limit value 1.
3271: 
3272:     The name sinc is short for "sine cardinal" or "sinus cardinalis".
3273: 
3274:     The sinc function is used in various signal processing applications,
3275:     including in anti-aliasing, in the construction of a Lanczos resampling
3276:     filter, and in interpolation.
3277: 
3278:     For bandlimited interpolation of discrete-time signals, the ideal
3279:     interpolation kernel is proportional to the sinc function.
3280: 
3281:     References
3282:     ----------
3283:     .. [1] Weisstein, Eric W. "Sinc Function." From MathWorld--A Wolfram Web
3284:            Resource. http://mathworld.wolfram.com/SincFunction.html
3285:     .. [2] Wikipedia, "Sinc function",
3286:            http://en.wikipedia.org/wiki/Sinc_function
3287: 
3288:     Examples
3289:     --------
3290:     >>> x = np.linspace(-4, 4, 41)
3291:     >>> np.sinc(x)
3292:     array([ -3.89804309e-17,  -4.92362781e-02,  -8.40918587e-02,
3293:             -8.90384387e-02,  -5.84680802e-02,   3.89804309e-17,
3294:              6.68206631e-02,   1.16434881e-01,   1.26137788e-01,
3295:              8.50444803e-02,  -3.89804309e-17,  -1.03943254e-01,
3296:             -1.89206682e-01,  -2.16236208e-01,  -1.55914881e-01,
3297:              3.89804309e-17,   2.33872321e-01,   5.04551152e-01,
3298:              7.56826729e-01,   9.35489284e-01,   1.00000000e+00,
3299:              9.35489284e-01,   7.56826729e-01,   5.04551152e-01,
3300:              2.33872321e-01,   3.89804309e-17,  -1.55914881e-01,
3301:             -2.16236208e-01,  -1.89206682e-01,  -1.03943254e-01,
3302:             -3.89804309e-17,   8.50444803e-02,   1.26137788e-01,
3303:              1.16434881e-01,   6.68206631e-02,   3.89804309e-17,
3304:             -5.84680802e-02,  -8.90384387e-02,  -8.40918587e-02,
3305:             -4.92362781e-02,  -3.89804309e-17])
3306: 
3307:     >>> plt.plot(x, np.sinc(x))
3308:     [<matplotlib.lines.Line2D object at 0x...>]
3309:     >>> plt.title("Sinc Function")
3310:     <matplotlib.text.Text object at 0x...>
3311:     >>> plt.ylabel("Amplitude")
3312:     <matplotlib.text.Text object at 0x...>
3313:     >>> plt.xlabel("X")
3314:     <matplotlib.text.Text object at 0x...>
3315:     >>> plt.show()
3316: 
3317:     It works in 2-D as well:
3318: 
3319:     >>> x = np.linspace(-4, 4, 401)
3320:     >>> xx = np.outer(x, x)
3321:     >>> plt.imshow(np.sinc(xx))
3322:     <matplotlib.image.AxesImage object at 0x...>
3323: 
3324:     '''
3325:     x = np.asanyarray(x)
3326:     y = pi * where(x == 0, 1.0e-20, x)
3327:     return sin(y)/y
3328: 
3329: 
3330: def msort(a):
3331:     '''
3332:     Return a copy of an array sorted along the first axis.
3333: 
3334:     Parameters
3335:     ----------
3336:     a : array_like
3337:         Array to be sorted.
3338: 
3339:     Returns
3340:     -------
3341:     sorted_array : ndarray
3342:         Array of the same type and shape as `a`.
3343: 
3344:     See Also
3345:     --------
3346:     sort
3347: 
3348:     Notes
3349:     -----
3350:     ``np.msort(a)`` is equivalent to  ``np.sort(a, axis=0)``.
3351: 
3352:     '''
3353:     b = array(a, subok=True, copy=True)
3354:     b.sort(0)
3355:     return b
3356: 
3357: 
3358: def _ureduce(a, func, **kwargs):
3359:     '''
3360:     Internal Function.
3361:     Call `func` with `a` as first argument swapping the axes to use extended
3362:     axis on functions that don't support it natively.
3363: 
3364:     Returns result and a.shape with axis dims set to 1.
3365: 
3366:     Parameters
3367:     ----------
3368:     a : array_like
3369:         Input array or object that can be converted to an array.
3370:     func : callable
3371:         Reduction function Kapable of receiving an axis argument.
3372:         It is is called with `a` as first argument followed by `kwargs`.
3373:      kwargs : keyword arguments
3374:         additional keyword arguments to pass to `func`.
3375: 
3376:     Returns
3377:     -------
3378:     result : tuple
3379:         Result of func(a, **kwargs) and a.shape with axis dims set to 1
3380:         which can be used to reshape the result to the same shape a ufunc with
3381:         keepdims=True would produce.
3382: 
3383:     '''
3384:     a = np.asanyarray(a)
3385:     axis = kwargs.get('axis', None)
3386:     if axis is not None:
3387:         keepdim = list(a.shape)
3388:         nd = a.ndim
3389:         try:
3390:             axis = operator.index(axis)
3391:             if axis >= nd or axis < -nd:
3392:                 raise IndexError("axis %d out of bounds (%d)" % (axis, a.ndim))
3393:             keepdim[axis] = 1
3394:         except TypeError:
3395:             sax = set()
3396:             for x in axis:
3397:                 if x >= nd or x < -nd:
3398:                     raise IndexError("axis %d out of bounds (%d)" % (x, nd))
3399:                 if x in sax:
3400:                     raise ValueError("duplicate value in axis")
3401:                 sax.add(x % nd)
3402:                 keepdim[x] = 1
3403:             keep = sax.symmetric_difference(frozenset(range(nd)))
3404:             nkeep = len(keep)
3405:             # swap axis that should not be reduced to front
3406:             for i, s in enumerate(sorted(keep)):
3407:                 a = a.swapaxes(i, s)
3408:             # merge reduced axis
3409:             a = a.reshape(a.shape[:nkeep] + (-1,))
3410:             kwargs['axis'] = -1
3411:     else:
3412:         keepdim = [1] * a.ndim
3413: 
3414:     r = func(a, **kwargs)
3415:     return r, keepdim
3416: 
3417: 
3418: def median(a, axis=None, out=None, overwrite_input=False, keepdims=False):
3419:     '''
3420:     Compute the median along the specified axis.
3421: 
3422:     Returns the median of the array elements.
3423: 
3424:     Parameters
3425:     ----------
3426:     a : array_like
3427:         Input array or object that can be converted to an array.
3428:     axis : {int, sequence of int, None}, optional
3429:         Axis or axes along which the medians are computed. The default
3430:         is to compute the median along a flattened version of the array.
3431:         A sequence of axes is supported since version 1.9.0.
3432:     out : ndarray, optional
3433:         Alternative output array in which to place the result. It must
3434:         have the same shape and buffer length as the expected output,
3435:         but the type (of the output) will be cast if necessary.
3436:     overwrite_input : bool, optional
3437:        If True, then allow use of memory of input array `a` for
3438:        calculations. The input array will be modified by the call to
3439:        `median`. This will save memory when you do not need to preserve
3440:        the contents of the input array. Treat the input as undefined,
3441:        but it will probably be fully or partially sorted. Default is
3442:        False. If `overwrite_input` is ``True`` and `a` is not already an
3443:        `ndarray`, an error will be raised.
3444:     keepdims : bool, optional
3445:         If this is set to True, the axes which are reduced are left
3446:         in the result as dimensions with size one. With this option,
3447:         the result will broadcast correctly against the original `arr`.
3448: 
3449:         .. versionadded:: 1.9.0
3450: 
3451:     Returns
3452:     -------
3453:     median : ndarray
3454:         A new array holding the result. If the input contains integers
3455:         or floats smaller than ``float64``, then the output data-type is
3456:         ``np.float64``.  Otherwise, the data-type of the output is the
3457:         same as that of the input. If `out` is specified, that array is
3458:         returned instead.
3459: 
3460:     See Also
3461:     --------
3462:     mean, percentile
3463: 
3464:     Notes
3465:     -----
3466:     Given a vector ``V`` of length ``N``, the median of ``V`` is the
3467:     middle value of a sorted copy of ``V``, ``V_sorted`` - i
3468:     e., ``V_sorted[(N-1)/2]``, when ``N`` is odd, and the average of the
3469:     two middle values of ``V_sorted`` when ``N`` is even.
3470: 
3471:     Examples
3472:     --------
3473:     >>> a = np.array([[10, 7, 4], [3, 2, 1]])
3474:     >>> a
3475:     array([[10,  7,  4],
3476:            [ 3,  2,  1]])
3477:     >>> np.median(a)
3478:     3.5
3479:     >>> np.median(a, axis=0)
3480:     array([ 6.5,  4.5,  2.5])
3481:     >>> np.median(a, axis=1)
3482:     array([ 7.,  2.])
3483:     >>> m = np.median(a, axis=0)
3484:     >>> out = np.zeros_like(m)
3485:     >>> np.median(a, axis=0, out=m)
3486:     array([ 6.5,  4.5,  2.5])
3487:     >>> m
3488:     array([ 6.5,  4.5,  2.5])
3489:     >>> b = a.copy()
3490:     >>> np.median(b, axis=1, overwrite_input=True)
3491:     array([ 7.,  2.])
3492:     >>> assert not np.all(a==b)
3493:     >>> b = a.copy()
3494:     >>> np.median(b, axis=None, overwrite_input=True)
3495:     3.5
3496:     >>> assert not np.all(a==b)
3497: 
3498:     '''
3499:     r, k = _ureduce(a, func=_median, axis=axis, out=out,
3500:                     overwrite_input=overwrite_input)
3501:     if keepdims:
3502:         return r.reshape(k)
3503:     else:
3504:         return r
3505: 
3506: def _median(a, axis=None, out=None, overwrite_input=False):
3507:     # can't be reasonably be implemented in terms of percentile as we have to
3508:     # call mean to not break astropy
3509:     a = np.asanyarray(a)
3510: 
3511:     # Set the partition indexes
3512:     if axis is None:
3513:         sz = a.size
3514:     else:
3515:         sz = a.shape[axis]
3516:     if sz % 2 == 0:
3517:         szh = sz // 2
3518:         kth = [szh - 1, szh]
3519:     else:
3520:         kth = [(sz - 1) // 2]
3521:     # Check if the array contains any nan's
3522:     if np.issubdtype(a.dtype, np.inexact):
3523:         kth.append(-1)
3524: 
3525:     if overwrite_input:
3526:         if axis is None:
3527:             part = a.ravel()
3528:             part.partition(kth)
3529:         else:
3530:             a.partition(kth, axis=axis)
3531:             part = a
3532:     else:
3533:         part = partition(a, kth, axis=axis)
3534: 
3535:     if part.shape == ():
3536:         # make 0-D arrays work
3537:         return part.item()
3538:     if axis is None:
3539:         axis = 0
3540: 
3541:     indexer = [slice(None)] * part.ndim
3542:     index = part.shape[axis] // 2
3543:     if part.shape[axis] % 2 == 1:
3544:         # index with slice to allow mean (below) to work
3545:         indexer[axis] = slice(index, index+1)
3546:     else:
3547:         indexer[axis] = slice(index-1, index+1)
3548: 
3549:     # Check if the array contains any nan's
3550:     if np.issubdtype(a.dtype, np.inexact) and sz > 0:
3551:         # warn and return nans like mean would
3552:         rout = mean(part[indexer], axis=axis, out=out)
3553:         part = np.rollaxis(part, axis, part.ndim)
3554:         n = np.isnan(part[..., -1])
3555:         if rout.ndim == 0:
3556:             if n == True:
3557:                 warnings.warn("Invalid value encountered in median",
3558:                               RuntimeWarning)
3559:                 if out is not None:
3560:                     out[...] = a.dtype.type(np.nan)
3561:                     rout = out
3562:                 else:
3563:                     rout = a.dtype.type(np.nan)
3564:         elif np.count_nonzero(n.ravel()) > 0:
3565:             warnings.warn("Invalid value encountered in median for" +
3566:                           " %d results" % np.count_nonzero(n.ravel()),
3567:                           RuntimeWarning)
3568:             rout[n] = np.nan
3569:         return rout
3570:     else:
3571:         # if there are no nans
3572:         # Use mean in odd and even case to coerce data type
3573:         # and check, use out array.
3574:         return mean(part[indexer], axis=axis, out=out)
3575: 
3576: 
3577: def percentile(a, q, axis=None, out=None,
3578:                overwrite_input=False, interpolation='linear', keepdims=False):
3579:     '''
3580:     Compute the qth percentile of the data along the specified axis.
3581: 
3582:     Returns the qth percentile(s) of the array elements.
3583: 
3584:     Parameters
3585:     ----------
3586:     a : array_like
3587:         Input array or object that can be converted to an array.
3588:     q : float in range of [0,100] (or sequence of floats)
3589:         Percentile to compute, which must be between 0 and 100 inclusive.
3590:     axis : {int, sequence of int, None}, optional
3591:         Axis or axes along which the percentiles are computed. The
3592:         default is to compute the percentile(s) along a flattened
3593:         version of the array. A sequence of axes is supported since
3594:         version 1.9.0.
3595:     out : ndarray, optional
3596:         Alternative output array in which to place the result. It must
3597:         have the same shape and buffer length as the expected output,
3598:         but the type (of the output) will be cast if necessary.
3599:     overwrite_input : bool, optional
3600:         If True, then allow use of memory of input array `a` 
3601:         calculations. The input array will be modified by the call to
3602:         `percentile`. This will save memory when you do not need to
3603:         preserve the contents of the input array. In this case you
3604:         should not make any assumptions about the contents of the input
3605:         `a` after this function completes -- treat it as undefined.
3606:         Default is False. If `a` is not already an array, this parameter
3607:         will have no effect as `a` will be converted to an array
3608:         internally regardless of the value of this parameter.
3609:     interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}
3610:         This optional parameter specifies the interpolation method to
3611:         use when the desired quantile lies between two data points
3612:         ``i < j``:
3613:             * linear: ``i + (j - i) * fraction``, where ``fraction``
3614:               is the fractional part of the index surrounded by ``i``
3615:               and ``j``.
3616:             * lower: ``i``.
3617:             * higher: ``j``.
3618:             * nearest: ``i`` or ``j``, whichever is nearest.
3619:             * midpoint: ``(i + j) / 2``.
3620: 
3621:         .. versionadded:: 1.9.0
3622:     keepdims : bool, optional
3623:         If this is set to True, the axes which are reduced are left in
3624:         the result as dimensions with size one. With this option, the
3625:         result will broadcast correctly against the original array `a`.
3626: 
3627:         .. versionadded:: 1.9.0
3628: 
3629:     Returns
3630:     -------
3631:     percentile : scalar or ndarray
3632:         If `q` is a single percentile and `axis=None`, then the result
3633:         is a scalar. If multiple percentiles are given, first axis of
3634:         the result corresponds to the percentiles. The other axes are
3635:         the axes that remain after the reduction of `a`. If the input 
3636:         contains integers or floats smaller than ``float64``, the output
3637:         data-type is ``float64``. Otherwise, the output data-type is the
3638:         same as that of the input. If `out` is specified, that array is
3639:         returned instead.
3640: 
3641:     See Also
3642:     --------
3643:     mean, median, nanpercentile
3644: 
3645:     Notes
3646:     -----
3647:     Given a vector ``V`` of length ``N``, the ``q``-th percentile of
3648:     ``V`` is the value ``q/100`` of the way from the mimumum to the
3649:     maximum in in a sorted copy of ``V``. The values and distances of
3650:     the two nearest neighbors as well as the `interpolation` parameter
3651:     will determine the percentile if the normalized ranking does not
3652:     match the location of ``q`` exactly. This function is the same as
3653:     the median if ``q=50``, the same as the minimum if ``q=0`` and the
3654:     same as the maximum if ``q=100``.
3655: 
3656:     Examples
3657:     --------
3658:     >>> a = np.array([[10, 7, 4], [3, 2, 1]])
3659:     >>> a
3660:     array([[10,  7,  4],
3661:            [ 3,  2,  1]])
3662:     >>> np.percentile(a, 50)
3663:     3.5
3664:     >>> np.percentile(a, 50, axis=0)
3665:     array([[ 6.5,  4.5,  2.5]])
3666:     >>> np.percentile(a, 50, axis=1)
3667:     array([ 7.,  2.])
3668:     >>> np.percentile(a, 50, axis=1, keepdims=True)
3669:     array([[ 7.],
3670:            [ 2.]])
3671: 
3672:     >>> m = np.percentile(a, 50, axis=0)
3673:     >>> out = np.zeros_like(m)
3674:     >>> np.percentile(a, 50, axis=0, out=out)
3675:     array([[ 6.5,  4.5,  2.5]])
3676:     >>> m
3677:     array([[ 6.5,  4.5,  2.5]])
3678: 
3679:     >>> b = a.copy()
3680:     >>> np.percentile(b, 50, axis=1, overwrite_input=True)
3681:     array([ 7.,  2.])
3682:     >>> assert not np.all(a == b)
3683: 
3684:     '''
3685:     q = array(q, dtype=np.float64, copy=True)
3686:     r, k = _ureduce(a, func=_percentile, q=q, axis=axis, out=out,
3687:                     overwrite_input=overwrite_input,
3688:                     interpolation=interpolation)
3689:     if keepdims:
3690:         if q.ndim == 0:
3691:             return r.reshape(k)
3692:         else:
3693:             return r.reshape([len(q)] + k)
3694:     else:
3695:         return r
3696: 
3697: 
3698: def _percentile(a, q, axis=None, out=None,
3699:                 overwrite_input=False, interpolation='linear', keepdims=False):
3700:     a = asarray(a)
3701:     if q.ndim == 0:
3702:         # Do not allow 0-d arrays because following code fails for scalar
3703:         zerod = True
3704:         q = q[None]
3705:     else:
3706:         zerod = False
3707: 
3708:     # avoid expensive reductions, relevant for arrays with < O(1000) elements
3709:     if q.size < 10:
3710:         for i in range(q.size):
3711:             if q[i] < 0. or q[i] > 100.:
3712:                 raise ValueError("Percentiles must be in the range [0,100]")
3713:             q[i] /= 100.
3714:     else:
3715:         # faster than any()
3716:         if np.count_nonzero(q < 0.) or np.count_nonzero(q > 100.):
3717:             raise ValueError("Percentiles must be in the range [0,100]")
3718:         q /= 100.
3719: 
3720:     # prepare a for partioning
3721:     if overwrite_input:
3722:         if axis is None:
3723:             ap = a.ravel()
3724:         else:
3725:             ap = a
3726:     else:
3727:         if axis is None:
3728:             ap = a.flatten()
3729:         else:
3730:             ap = a.copy()
3731: 
3732:     if axis is None:
3733:         axis = 0
3734: 
3735:     Nx = ap.shape[axis]
3736:     indices = q * (Nx - 1)
3737: 
3738:     # round fractional indices according to interpolation method
3739:     if interpolation == 'lower':
3740:         indices = floor(indices).astype(intp)
3741:     elif interpolation == 'higher':
3742:         indices = ceil(indices).astype(intp)
3743:     elif interpolation == 'midpoint':
3744:         indices = 0.5 * (floor(indices) + ceil(indices))
3745:     elif interpolation == 'nearest':
3746:         indices = around(indices).astype(intp)
3747:     elif interpolation == 'linear':
3748:         pass  # keep index as fraction and interpolate
3749:     else:
3750:         raise ValueError(
3751:             "interpolation can only be 'linear', 'lower' 'higher', "
3752:             "'midpoint', or 'nearest'")
3753: 
3754:     n = np.array(False, dtype=bool) # check for nan's flag
3755:     if indices.dtype == intp:  # take the points along axis
3756:         # Check if the array contains any nan's
3757:         if np.issubdtype(a.dtype, np.inexact):
3758:             indices = concatenate((indices, [-1]))
3759: 
3760:         ap.partition(indices, axis=axis)
3761:         # ensure axis with qth is first
3762:         ap = np.rollaxis(ap, axis, 0)
3763:         axis = 0
3764: 
3765:         # Check if the array contains any nan's
3766:         if np.issubdtype(a.dtype, np.inexact):
3767:             indices = indices[:-1]
3768:             n = np.isnan(ap[-1:, ...])
3769: 
3770:         if zerod:
3771:             indices = indices[0]
3772:         r = take(ap, indices, axis=axis, out=out)
3773: 
3774: 
3775:     else:  # weight the points above and below the indices
3776:         indices_below = floor(indices).astype(intp)
3777:         indices_above = indices_below + 1
3778:         indices_above[indices_above > Nx - 1] = Nx - 1
3779: 
3780:         # Check if the array contains any nan's
3781:         if np.issubdtype(a.dtype, np.inexact):
3782:             indices_above = concatenate((indices_above, [-1]))
3783: 
3784:         weights_above = indices - indices_below
3785:         weights_below = 1.0 - weights_above
3786: 
3787:         weights_shape = [1, ] * ap.ndim
3788:         weights_shape[axis] = len(indices)
3789:         weights_below.shape = weights_shape
3790:         weights_above.shape = weights_shape
3791: 
3792:         ap.partition(concatenate((indices_below, indices_above)), axis=axis)
3793: 
3794:         # ensure axis with qth is first
3795:         ap = np.rollaxis(ap, axis, 0)
3796:         weights_below = np.rollaxis(weights_below, axis, 0)
3797:         weights_above = np.rollaxis(weights_above, axis, 0)
3798:         axis = 0
3799: 
3800:         # Check if the array contains any nan's
3801:         if np.issubdtype(a.dtype, np.inexact):
3802:             indices_above = indices_above[:-1]
3803:             n = np.isnan(ap[-1:, ...])
3804: 
3805:         x1 = take(ap, indices_below, axis=axis) * weights_below
3806:         x2 = take(ap, indices_above, axis=axis) * weights_above
3807: 
3808:         # ensure axis with qth is first
3809:         x1 = np.rollaxis(x1, axis, 0)
3810:         x2 = np.rollaxis(x2, axis, 0)
3811: 
3812:         if zerod:
3813:             x1 = x1.squeeze(0)
3814:             x2 = x2.squeeze(0)
3815: 
3816:         if out is not None:
3817:             r = add(x1, x2, out=out)
3818:         else:
3819:             r = add(x1, x2)
3820: 
3821:     if np.any(n):
3822:         warnings.warn("Invalid value encountered in percentile",
3823:                               RuntimeWarning)
3824:         if zerod:
3825:             if ap.ndim == 1:
3826:                 if out is not None:
3827:                     out[...] = a.dtype.type(np.nan)
3828:                     r = out
3829:                 else:
3830:                     r = a.dtype.type(np.nan)
3831:             else:
3832:                 r[..., n.squeeze(0)] = a.dtype.type(np.nan)
3833:         else:
3834:             if r.ndim == 1:
3835:                 r[:] = a.dtype.type(np.nan)
3836:             else:
3837:                 r[..., n.repeat(q.size, 0)] = a.dtype.type(np.nan)
3838: 
3839:     return r
3840: 
3841: 
3842: def trapz(y, x=None, dx=1.0, axis=-1):
3843:     '''
3844:     Integrate along the given axis using the composite trapezoidal rule.
3845: 
3846:     Integrate `y` (`x`) along given axis.
3847: 
3848:     Parameters
3849:     ----------
3850:     y : array_like
3851:         Input array to integrate.
3852:     x : array_like, optional
3853:         The sample points corresponding to the `y` values. If `x` is None,
3854:         the sample points are assumed to be evenly spaced `dx` apart. The
3855:         default is None.
3856:     dx : scalar, optional
3857:         The spacing between sample points when `x` is None. The default is 1.
3858:     axis : int, optional
3859:         The axis along which to integrate.
3860: 
3861:     Returns
3862:     -------
3863:     trapz : float
3864:         Definite integral as approximated by trapezoidal rule.
3865: 
3866:     See Also
3867:     --------
3868:     sum, cumsum
3869: 
3870:     Notes
3871:     -----
3872:     Image [2]_ illustrates trapezoidal rule -- y-axis locations of points
3873:     will be taken from `y` array, by default x-axis distances between
3874:     points will be 1.0, alternatively they can be provided with `x` array
3875:     or with `dx` scalar.  Return value will be equal to combined area under
3876:     the red lines.
3877: 
3878: 
3879:     References
3880:     ----------
3881:     .. [1] Wikipedia page: http://en.wikipedia.org/wiki/Trapezoidal_rule
3882: 
3883:     .. [2] Illustration image:
3884:            http://en.wikipedia.org/wiki/File:Composite_trapezoidal_rule_illustration.png
3885: 
3886:     Examples
3887:     --------
3888:     >>> np.trapz([1,2,3])
3889:     4.0
3890:     >>> np.trapz([1,2,3], x=[4,6,8])
3891:     8.0
3892:     >>> np.trapz([1,2,3], dx=2)
3893:     8.0
3894:     >>> a = np.arange(6).reshape(2, 3)
3895:     >>> a
3896:     array([[0, 1, 2],
3897:            [3, 4, 5]])
3898:     >>> np.trapz(a, axis=0)
3899:     array([ 1.5,  2.5,  3.5])
3900:     >>> np.trapz(a, axis=1)
3901:     array([ 2.,  8.])
3902: 
3903:     '''
3904:     y = asanyarray(y)
3905:     if x is None:
3906:         d = dx
3907:     else:
3908:         x = asanyarray(x)
3909:         if x.ndim == 1:
3910:             d = diff(x)
3911:             # reshape to correct shape
3912:             shape = [1]*y.ndim
3913:             shape[axis] = d.shape[0]
3914:             d = d.reshape(shape)
3915:         else:
3916:             d = diff(x, axis=axis)
3917:     nd = len(y.shape)
3918:     slice1 = [slice(None)]*nd
3919:     slice2 = [slice(None)]*nd
3920:     slice1[axis] = slice(1, None)
3921:     slice2[axis] = slice(None, -1)
3922:     try:
3923:         ret = (d * (y[slice1] + y[slice2]) / 2.0).sum(axis)
3924:     except ValueError:
3925:         # Operations didn't work, cast to ndarray
3926:         d = np.asarray(d)
3927:         y = np.asarray(y)
3928:         ret = add.reduce(d * (y[slice1]+y[slice2])/2.0, axis)
3929:     return ret
3930: 
3931: 
3932: #always succeed
3933: def add_newdoc(place, obj, doc):
3934:     '''
3935:     Adds documentation to obj which is in module place.
3936: 
3937:     If doc is a string add it to obj as a docstring
3938: 
3939:     If doc is a tuple, then the first element is interpreted as
3940:        an attribute of obj and the second as the docstring
3941:           (method, docstring)
3942: 
3943:     If doc is a list, then each element of the list should be a
3944:        sequence of length two --> [(method1, docstring1),
3945:        (method2, docstring2), ...]
3946: 
3947:     This routine never raises an error.
3948: 
3949:     This routine cannot modify read-only docstrings, as appear
3950:     in new-style classes or built-in functions. Because this
3951:     routine never raises an error the caller must check manually
3952:     that the docstrings were changed.
3953:     '''
3954:     try:
3955:         new = getattr(__import__(place, globals(), {}, [obj]), obj)
3956:         if isinstance(doc, str):
3957:             add_docstring(new, doc.strip())
3958:         elif isinstance(doc, tuple):
3959:             add_docstring(getattr(new, doc[0]), doc[1].strip())
3960:         elif isinstance(doc, list):
3961:             for val in doc:
3962:                 add_docstring(getattr(new, val[0]), val[1].strip())
3963:     except:
3964:         pass
3965: 
3966: 
3967: # Based on scitools meshgrid
3968: def meshgrid(*xi, **kwargs):
3969:     '''
3970:     Return coordinate matrices from coordinate vectors.
3971: 
3972:     Make N-D coordinate arrays for vectorized evaluations of
3973:     N-D scalar/vector fields over N-D grids, given
3974:     one-dimensional coordinate arrays x1, x2,..., xn.
3975: 
3976:     .. versionchanged:: 1.9
3977:        1-D and 0-D cases are allowed.
3978: 
3979:     Parameters
3980:     ----------
3981:     x1, x2,..., xn : array_like
3982:         1-D arrays representing the coordinates of a grid.
3983:     indexing : {'xy', 'ij'}, optional
3984:         Cartesian ('xy', default) or matrix ('ij') indexing of output.
3985:         See Notes for more details.
3986: 
3987:         .. versionadded:: 1.7.0
3988:     sparse : bool, optional
3989:         If True a sparse grid is returned in order to conserve memory.
3990:         Default is False.
3991: 
3992:         .. versionadded:: 1.7.0
3993:     copy : bool, optional
3994:         If False, a view into the original arrays are returned in order to
3995:         conserve memory.  Default is True.  Please note that
3996:         ``sparse=False, copy=False`` will likely return non-contiguous
3997:         arrays.  Furthermore, more than one element of a broadcast array
3998:         may refer to a single memory location.  If you need to write to the
3999:         arrays, make copies first.
4000: 
4001:         .. versionadded:: 1.7.0
4002: 
4003:     Returns
4004:     -------
4005:     X1, X2,..., XN : ndarray
4006:         For vectors `x1`, `x2`,..., 'xn' with lengths ``Ni=len(xi)`` ,
4007:         return ``(N1, N2, N3,...Nn)`` shaped arrays if indexing='ij'
4008:         or ``(N2, N1, N3,...Nn)`` shaped arrays if indexing='xy'
4009:         with the elements of `xi` repeated to fill the matrix along
4010:         the first dimension for `x1`, the second for `x2` and so on.
4011: 
4012:     Notes
4013:     -----
4014:     This function supports both indexing conventions through the indexing
4015:     keyword argument.  Giving the string 'ij' returns a meshgrid with
4016:     matrix indexing, while 'xy' returns a meshgrid with Cartesian indexing.
4017:     In the 2-D case with inputs of length M and N, the outputs are of shape
4018:     (N, M) for 'xy' indexing and (M, N) for 'ij' indexing.  In the 3-D case
4019:     with inputs of length M, N and P, outputs are of shape (N, M, P) for
4020:     'xy' indexing and (M, N, P) for 'ij' indexing.  The difference is
4021:     illustrated by the following code snippet::
4022: 
4023:         xv, yv = meshgrid(x, y, sparse=False, indexing='ij')
4024:         for i in range(nx):
4025:             for j in range(ny):
4026:                 # treat xv[i,j], yv[i,j]
4027: 
4028:         xv, yv = meshgrid(x, y, sparse=False, indexing='xy')
4029:         for i in range(nx):
4030:             for j in range(ny):
4031:                 # treat xv[j,i], yv[j,i]
4032: 
4033:     In the 1-D and 0-D case, the indexing and sparse keywords have no effect.
4034: 
4035:     See Also
4036:     --------
4037:     index_tricks.mgrid : Construct a multi-dimensional "meshgrid"
4038:                      using indexing notation.
4039:     index_tricks.ogrid : Construct an open multi-dimensional "meshgrid"
4040:                      using indexing notation.
4041: 
4042:     Examples
4043:     --------
4044:     >>> nx, ny = (3, 2)
4045:     >>> x = np.linspace(0, 1, nx)
4046:     >>> y = np.linspace(0, 1, ny)
4047:     >>> xv, yv = meshgrid(x, y)
4048:     >>> xv
4049:     array([[ 0. ,  0.5,  1. ],
4050:            [ 0. ,  0.5,  1. ]])
4051:     >>> yv
4052:     array([[ 0.,  0.,  0.],
4053:            [ 1.,  1.,  1.]])
4054:     >>> xv, yv = meshgrid(x, y, sparse=True)  # make sparse output arrays
4055:     >>> xv
4056:     array([[ 0. ,  0.5,  1. ]])
4057:     >>> yv
4058:     array([[ 0.],
4059:            [ 1.]])
4060: 
4061:     `meshgrid` is very useful to evaluate functions on a grid.
4062: 
4063:     >>> x = np.arange(-5, 5, 0.1)
4064:     >>> y = np.arange(-5, 5, 0.1)
4065:     >>> xx, yy = meshgrid(x, y, sparse=True)
4066:     >>> z = np.sin(xx**2 + yy**2) / (xx**2 + yy**2)
4067:     >>> h = plt.contourf(x,y,z)
4068: 
4069:     '''
4070:     ndim = len(xi)
4071: 
4072:     copy_ = kwargs.pop('copy', True)
4073:     sparse = kwargs.pop('sparse', False)
4074:     indexing = kwargs.pop('indexing', 'xy')
4075: 
4076:     if kwargs:
4077:         raise TypeError("meshgrid() got an unexpected keyword argument '%s'"
4078:                         % (list(kwargs)[0],))
4079: 
4080:     if indexing not in ['xy', 'ij']:
4081:         raise ValueError(
4082:             "Valid values for `indexing` are 'xy' and 'ij'.")
4083: 
4084:     s0 = (1,) * ndim
4085:     output = [np.asanyarray(x).reshape(s0[:i] + (-1,) + s0[i + 1::])
4086:               for i, x in enumerate(xi)]
4087: 
4088:     shape = [x.size for x in output]
4089: 
4090:     if indexing == 'xy' and ndim > 1:
4091:         # switch first and second axis
4092:         output[0].shape = (1, -1) + (1,)*(ndim - 2)
4093:         output[1].shape = (-1, 1) + (1,)*(ndim - 2)
4094:         shape[0], shape[1] = shape[1], shape[0]
4095: 
4096:     if sparse:
4097:         if copy_:
4098:             return [x.copy() for x in output]
4099:         else:
4100:             return output
4101:     else:
4102:         # Return the full N-D matrix (not only the 1-D vector)
4103:         if copy_:
4104:             mult_fact = np.ones(shape, dtype=int)
4105:             return [x * mult_fact for x in output]
4106:         else:
4107:             return np.broadcast_arrays(*output)
4108: 
4109: 
4110: def delete(arr, obj, axis=None):
4111:     '''
4112:     Return a new array with sub-arrays along an axis deleted. For a one
4113:     dimensional array, this returns those entries not returned by
4114:     `arr[obj]`.
4115: 
4116:     Parameters
4117:     ----------
4118:     arr : array_like
4119:       Input array.
4120:     obj : slice, int or array of ints
4121:       Indicate which sub-arrays to remove.
4122:     axis : int, optional
4123:       The axis along which to delete the subarray defined by `obj`.
4124:       If `axis` is None, `obj` is applied to the flattened array.
4125: 
4126:     Returns
4127:     -------
4128:     out : ndarray
4129:         A copy of `arr` with the elements specified by `obj` removed. Note
4130:         that `delete` does not occur in-place. If `axis` is None, `out` is
4131:         a flattened array.
4132: 
4133:     See Also
4134:     --------
4135:     insert : Insert elements into an array.
4136:     append : Append elements at the end of an array.
4137: 
4138:     Notes
4139:     -----
4140:     Often it is preferable to use a boolean mask. For example:
4141: 
4142:     >>> mask = np.ones(len(arr), dtype=bool)
4143:     >>> mask[[0,2,4]] = False
4144:     >>> result = arr[mask,...]
4145: 
4146:     Is equivalent to `np.delete(arr, [0,2,4], axis=0)`, but allows further
4147:     use of `mask`.
4148: 
4149:     Examples
4150:     --------
4151:     >>> arr = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])
4152:     >>> arr
4153:     array([[ 1,  2,  3,  4],
4154:            [ 5,  6,  7,  8],
4155:            [ 9, 10, 11, 12]])
4156:     >>> np.delete(arr, 1, 0)
4157:     array([[ 1,  2,  3,  4],
4158:            [ 9, 10, 11, 12]])
4159: 
4160:     >>> np.delete(arr, np.s_[::2], 1)
4161:     array([[ 2,  4],
4162:            [ 6,  8],
4163:            [10, 12]])
4164:     >>> np.delete(arr, [1,3,5], None)
4165:     array([ 1,  3,  5,  7,  8,  9, 10, 11, 12])
4166: 
4167:     '''
4168:     wrap = None
4169:     if type(arr) is not ndarray:
4170:         try:
4171:             wrap = arr.__array_wrap__
4172:         except AttributeError:
4173:             pass
4174: 
4175:     arr = asarray(arr)
4176:     ndim = arr.ndim
4177:     arrorder = 'F' if arr.flags.fnc else 'C'
4178:     if axis is None:
4179:         if ndim != 1:
4180:             arr = arr.ravel()
4181:         ndim = arr.ndim
4182:         axis = ndim - 1
4183:     if ndim == 0:
4184:         # 2013-09-24, 1.9
4185:         warnings.warn(
4186:             "in the future the special handling of scalars will be removed "
4187:             "from delete and raise an error", DeprecationWarning)
4188:         if wrap:
4189:             return wrap(arr)
4190:         else:
4191:             return arr.copy()
4192: 
4193:     slobj = [slice(None)]*ndim
4194:     N = arr.shape[axis]
4195:     newshape = list(arr.shape)
4196: 
4197:     if isinstance(obj, slice):
4198:         start, stop, step = obj.indices(N)
4199:         xr = range(start, stop, step)
4200:         numtodel = len(xr)
4201: 
4202:         if numtodel <= 0:
4203:             if wrap:
4204:                 return wrap(arr.copy())
4205:             else:
4206:                 return arr.copy()
4207: 
4208:         # Invert if step is negative:
4209:         if step < 0:
4210:             step = -step
4211:             start = xr[-1]
4212:             stop = xr[0] + 1
4213: 
4214:         newshape[axis] -= numtodel
4215:         new = empty(newshape, arr.dtype, arrorder)
4216:         # copy initial chunk
4217:         if start == 0:
4218:             pass
4219:         else:
4220:             slobj[axis] = slice(None, start)
4221:             new[slobj] = arr[slobj]
4222:         # copy end chunck
4223:         if stop == N:
4224:             pass
4225:         else:
4226:             slobj[axis] = slice(stop-numtodel, None)
4227:             slobj2 = [slice(None)]*ndim
4228:             slobj2[axis] = slice(stop, None)
4229:             new[slobj] = arr[slobj2]
4230:         # copy middle pieces
4231:         if step == 1:
4232:             pass
4233:         else:  # use array indexing.
4234:             keep = ones(stop-start, dtype=bool)
4235:             keep[:stop-start:step] = False
4236:             slobj[axis] = slice(start, stop-numtodel)
4237:             slobj2 = [slice(None)]*ndim
4238:             slobj2[axis] = slice(start, stop)
4239:             arr = arr[slobj2]
4240:             slobj2[axis] = keep
4241:             new[slobj] = arr[slobj2]
4242:         if wrap:
4243:             return wrap(new)
4244:         else:
4245:             return new
4246: 
4247:     _obj = obj
4248:     obj = np.asarray(obj)
4249:     # After removing the special handling of booleans and out of
4250:     # bounds values, the conversion to the array can be removed.
4251:     if obj.dtype == bool:
4252:         warnings.warn(
4253:             "in the future insert will treat boolean arrays and array-likes "
4254:             "as boolean index instead of casting it to integer", FutureWarning)
4255:         obj = obj.astype(intp)
4256:     if isinstance(_obj, (int, long, integer)):
4257:         # optimization for a single value
4258:         obj = obj.item()
4259:         if (obj < -N or obj >= N):
4260:             raise IndexError(
4261:                 "index %i is out of bounds for axis %i with "
4262:                 "size %i" % (obj, axis, N))
4263:         if (obj < 0):
4264:             obj += N
4265:         newshape[axis] -= 1
4266:         new = empty(newshape, arr.dtype, arrorder)
4267:         slobj[axis] = slice(None, obj)
4268:         new[slobj] = arr[slobj]
4269:         slobj[axis] = slice(obj, None)
4270:         slobj2 = [slice(None)]*ndim
4271:         slobj2[axis] = slice(obj+1, None)
4272:         new[slobj] = arr[slobj2]
4273:     else:
4274:         if obj.size == 0 and not isinstance(_obj, np.ndarray):
4275:             obj = obj.astype(intp)
4276:         if not np.can_cast(obj, intp, 'same_kind'):
4277:             # obj.size = 1 special case always failed and would just
4278:             # give superfluous warnings.
4279:             # 2013-09-24, 1.9
4280:             warnings.warn(
4281:                 "using a non-integer array as obj in delete will result in an "
4282:                 "error in the future", DeprecationWarning)
4283:             obj = obj.astype(intp)
4284:         keep = ones(N, dtype=bool)
4285: 
4286:         # Test if there are out of bound indices, this is deprecated
4287:         inside_bounds = (obj < N) & (obj >= -N)
4288:         if not inside_bounds.all():
4289:             # 2013-09-24, 1.9
4290:             warnings.warn(
4291:                 "in the future out of bounds indices will raise an error "
4292:                 "instead of being ignored by `numpy.delete`.",
4293:                 DeprecationWarning)
4294:             obj = obj[inside_bounds]
4295:         positive_indices = obj >= 0
4296:         if not positive_indices.all():
4297:             warnings.warn(
4298:                 "in the future negative indices will not be ignored by "
4299:                 "`numpy.delete`.", FutureWarning)
4300:             obj = obj[positive_indices]
4301: 
4302:         keep[obj, ] = False
4303:         slobj[axis] = keep
4304:         new = arr[slobj]
4305: 
4306:     if wrap:
4307:         return wrap(new)
4308:     else:
4309:         return new
4310: 
4311: 
4312: def insert(arr, obj, values, axis=None):
4313:     '''
4314:     Insert values along the given axis before the given indices.
4315: 
4316:     Parameters
4317:     ----------
4318:     arr : array_like
4319:         Input array.
4320:     obj : int, slice or sequence of ints
4321:         Object that defines the index or indices before which `values` is
4322:         inserted.
4323: 
4324:         .. versionadded:: 1.8.0
4325: 
4326:         Support for multiple insertions when `obj` is a single scalar or a
4327:         sequence with one element (similar to calling insert multiple
4328:         times).
4329:     values : array_like
4330:         Values to insert into `arr`. If the type of `values` is different
4331:         from that of `arr`, `values` is converted to the type of `arr`.
4332:         `values` should be shaped so that ``arr[...,obj,...] = values``
4333:         is legal.
4334:     axis : int, optional
4335:         Axis along which to insert `values`.  If `axis` is None then `arr`
4336:         is flattened first.
4337: 
4338:     Returns
4339:     -------
4340:     out : ndarray
4341:         A copy of `arr` with `values` inserted.  Note that `insert`
4342:         does not occur in-place: a new array is returned. If
4343:         `axis` is None, `out` is a flattened array.
4344: 
4345:     See Also
4346:     --------
4347:     append : Append elements at the end of an array.
4348:     concatenate : Join a sequence of arrays along an existing axis.
4349:     delete : Delete elements from an array.
4350: 
4351:     Notes
4352:     -----
4353:     Note that for higher dimensional inserts `obj=0` behaves very different
4354:     from `obj=[0]` just like `arr[:,0,:] = values` is different from
4355:     `arr[:,[0],:] = values`.
4356: 
4357:     Examples
4358:     --------
4359:     >>> a = np.array([[1, 1], [2, 2], [3, 3]])
4360:     >>> a
4361:     array([[1, 1],
4362:            [2, 2],
4363:            [3, 3]])
4364:     >>> np.insert(a, 1, 5)
4365:     array([1, 5, 1, 2, 2, 3, 3])
4366:     >>> np.insert(a, 1, 5, axis=1)
4367:     array([[1, 5, 1],
4368:            [2, 5, 2],
4369:            [3, 5, 3]])
4370: 
4371:     Difference between sequence and scalars:
4372: 
4373:     >>> np.insert(a, [1], [[1],[2],[3]], axis=1)
4374:     array([[1, 1, 1],
4375:            [2, 2, 2],
4376:            [3, 3, 3]])
4377:     >>> np.array_equal(np.insert(a, 1, [1, 2, 3], axis=1),
4378:     ...                np.insert(a, [1], [[1],[2],[3]], axis=1))
4379:     True
4380: 
4381:     >>> b = a.flatten()
4382:     >>> b
4383:     array([1, 1, 2, 2, 3, 3])
4384:     >>> np.insert(b, [2, 2], [5, 6])
4385:     array([1, 1, 5, 6, 2, 2, 3, 3])
4386: 
4387:     >>> np.insert(b, slice(2, 4), [5, 6])
4388:     array([1, 1, 5, 2, 6, 2, 3, 3])
4389: 
4390:     >>> np.insert(b, [2, 2], [7.13, False]) # type casting
4391:     array([1, 1, 7, 0, 2, 2, 3, 3])
4392: 
4393:     >>> x = np.arange(8).reshape(2, 4)
4394:     >>> idx = (1, 3)
4395:     >>> np.insert(x, idx, 999, axis=1)
4396:     array([[  0, 999,   1,   2, 999,   3],
4397:            [  4, 999,   5,   6, 999,   7]])
4398: 
4399:     '''
4400:     wrap = None
4401:     if type(arr) is not ndarray:
4402:         try:
4403:             wrap = arr.__array_wrap__
4404:         except AttributeError:
4405:             pass
4406: 
4407:     arr = asarray(arr)
4408:     ndim = arr.ndim
4409:     arrorder = 'F' if arr.flags.fnc else 'C'
4410:     if axis is None:
4411:         if ndim != 1:
4412:             arr = arr.ravel()
4413:         ndim = arr.ndim
4414:         axis = ndim - 1
4415:     else:
4416:         if ndim > 0 and (axis < -ndim or axis >= ndim):
4417:             raise IndexError(
4418:                 "axis %i is out of bounds for an array of "
4419:                 "dimension %i" % (axis, ndim))
4420:         if (axis < 0):
4421:             axis += ndim
4422:     if (ndim == 0):
4423:         # 2013-09-24, 1.9
4424:         warnings.warn(
4425:             "in the future the special handling of scalars will be removed "
4426:             "from insert and raise an error", DeprecationWarning)
4427:         arr = arr.copy()
4428:         arr[...] = values
4429:         if wrap:
4430:             return wrap(arr)
4431:         else:
4432:             return arr
4433:     slobj = [slice(None)]*ndim
4434:     N = arr.shape[axis]
4435:     newshape = list(arr.shape)
4436: 
4437:     if isinstance(obj, slice):
4438:         # turn it into a range object
4439:         indices = arange(*obj.indices(N), **{'dtype': intp})
4440:     else:
4441:         # need to copy obj, because indices will be changed in-place
4442:         indices = np.array(obj)
4443:         if indices.dtype == bool:
4444:             # See also delete
4445:             warnings.warn(
4446:                 "in the future insert will treat boolean arrays and "
4447:                 "array-likes as a boolean index instead of casting it to "
4448:                 "integer", FutureWarning)
4449:             indices = indices.astype(intp)
4450:             # Code after warning period:
4451:             #if obj.ndim != 1:
4452:             #    raise ValueError('boolean array argument obj to insert '
4453:             #                     'must be one dimensional')
4454:             #indices = np.flatnonzero(obj)
4455:         elif indices.ndim > 1:
4456:             raise ValueError(
4457:                 "index array argument obj to insert must be one dimensional "
4458:                 "or scalar")
4459:     if indices.size == 1:
4460:         index = indices.item()
4461:         if index < -N or index > N:
4462:             raise IndexError(
4463:                 "index %i is out of bounds for axis %i with "
4464:                 "size %i" % (obj, axis, N))
4465:         if (index < 0):
4466:             index += N
4467: 
4468:         # There are some object array corner cases here, but we cannot avoid
4469:         # that:
4470:         values = array(values, copy=False, ndmin=arr.ndim, dtype=arr.dtype)
4471:         if indices.ndim == 0:
4472:             # broadcasting is very different here, since a[:,0,:] = ... behaves
4473:             # very different from a[:,[0],:] = ...! This changes values so that
4474:             # it works likes the second case. (here a[:,0:1,:])
4475:             values = np.rollaxis(values, 0, (axis % values.ndim) + 1)
4476:         numnew = values.shape[axis]
4477:         newshape[axis] += numnew
4478:         new = empty(newshape, arr.dtype, arrorder)
4479:         slobj[axis] = slice(None, index)
4480:         new[slobj] = arr[slobj]
4481:         slobj[axis] = slice(index, index+numnew)
4482:         new[slobj] = values
4483:         slobj[axis] = slice(index+numnew, None)
4484:         slobj2 = [slice(None)] * ndim
4485:         slobj2[axis] = slice(index, None)
4486:         new[slobj] = arr[slobj2]
4487:         if wrap:
4488:             return wrap(new)
4489:         return new
4490:     elif indices.size == 0 and not isinstance(obj, np.ndarray):
4491:         # Can safely cast the empty list to intp
4492:         indices = indices.astype(intp)
4493: 
4494:     if not np.can_cast(indices, intp, 'same_kind'):
4495:         # 2013-09-24, 1.9
4496:         warnings.warn(
4497:             "using a non-integer array as obj in insert will result in an "
4498:             "error in the future", DeprecationWarning)
4499:         indices = indices.astype(intp)
4500: 
4501:     indices[indices < 0] += N
4502: 
4503:     numnew = len(indices)
4504:     order = indices.argsort(kind='mergesort')   # stable sort
4505:     indices[order] += np.arange(numnew)
4506: 
4507:     newshape[axis] += numnew
4508:     old_mask = ones(newshape[axis], dtype=bool)
4509:     old_mask[indices] = False
4510: 
4511:     new = empty(newshape, arr.dtype, arrorder)
4512:     slobj2 = [slice(None)]*ndim
4513:     slobj[axis] = indices
4514:     slobj2[axis] = old_mask
4515:     new[slobj] = values
4516:     new[slobj2] = arr
4517: 
4518:     if wrap:
4519:         return wrap(new)
4520:     return new
4521: 
4522: 
4523: def append(arr, values, axis=None):
4524:     '''
4525:     Append values to the end of an array.
4526: 
4527:     Parameters
4528:     ----------
4529:     arr : array_like
4530:         Values are appended to a copy of this array.
4531:     values : array_like
4532:         These values are appended to a copy of `arr`.  It must be of the
4533:         correct shape (the same shape as `arr`, excluding `axis`).  If
4534:         `axis` is not specified, `values` can be any shape and will be
4535:         flattened before use.
4536:     axis : int, optional
4537:         The axis along which `values` are appended.  If `axis` is not
4538:         given, both `arr` and `values` are flattened before use.
4539: 
4540:     Returns
4541:     -------
4542:     append : ndarray
4543:         A copy of `arr` with `values` appended to `axis`.  Note that
4544:         `append` does not occur in-place: a new array is allocated and
4545:         filled.  If `axis` is None, `out` is a flattened array.
4546: 
4547:     See Also
4548:     --------
4549:     insert : Insert elements into an array.
4550:     delete : Delete elements from an array.
4551: 
4552:     Examples
4553:     --------
4554:     >>> np.append([1, 2, 3], [[4, 5, 6], [7, 8, 9]])
4555:     array([1, 2, 3, 4, 5, 6, 7, 8, 9])
4556: 
4557:     When `axis` is specified, `values` must have the correct shape.
4558: 
4559:     >>> np.append([[1, 2, 3], [4, 5, 6]], [[7, 8, 9]], axis=0)
4560:     array([[1, 2, 3],
4561:            [4, 5, 6],
4562:            [7, 8, 9]])
4563:     >>> np.append([[1, 2, 3], [4, 5, 6]], [7, 8, 9], axis=0)
4564:     Traceback (most recent call last):
4565:     ...
4566:     ValueError: arrays must have same number of dimensions
4567: 
4568:     '''
4569:     arr = asanyarray(arr)
4570:     if axis is None:
4571:         if arr.ndim != 1:
4572:             arr = arr.ravel()
4573:         values = ravel(values)
4574:         axis = arr.ndim-1
4575:     return concatenate((arr, values), axis=axis)
4576: 
4577: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3, 0))

# 'import warnings' statement (line 3)
import warnings

import_module(stypy.reporting.localization.Localization(__file__, 3, 0), 'warnings', warnings, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 4, 0))

# 'import sys' statement (line 4)
import sys

import_module(stypy.reporting.localization.Localization(__file__, 4, 0), 'sys', sys, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 5, 0))

# 'import collections' statement (line 5)
import collections

import_module(stypy.reporting.localization.Localization(__file__, 5, 0), 'collections', collections, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 6, 0))

# 'import operator' statement (line 6)
import operator

import_module(stypy.reporting.localization.Localization(__file__, 6, 0), 'operator', operator, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 8, 0))

# 'import numpy' statement (line 8)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/lib/')
import_107440 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'numpy')

if (type(import_107440) is not StypyTypeError):

    if (import_107440 != 'pyd_module'):
        __import__(import_107440)
        sys_modules_107441 = sys.modules[import_107440]
        import_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'np', sys_modules_107441.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 8)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 8, 0), 'numpy', import_107440)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/lib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 9, 0))

# 'import numpy.core.numeric' statement (line 9)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/lib/')
import_107442 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 9, 0), 'numpy.core.numeric')

if (type(import_107442) is not StypyTypeError):

    if (import_107442 != 'pyd_module'):
        __import__(import_107442)
        sys_modules_107443 = sys.modules[import_107442]
        import_module(stypy.reporting.localization.Localization(__file__, 9, 0), '_nx', sys_modules_107443.module_type_store, module_type_store)
    else:
        import numpy.core.numeric as _nx

        import_module(stypy.reporting.localization.Localization(__file__, 9, 0), '_nx', numpy.core.numeric, module_type_store)

else:
    # Assigning a type to the variable 'numpy.core.numeric' (line 9)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 9, 0), 'numpy.core.numeric', import_107442)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/lib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 10, 0))

# 'from numpy.core import linspace, atleast_1d, atleast_2d' statement (line 10)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/lib/')
import_107444 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 10, 0), 'numpy.core')

if (type(import_107444) is not StypyTypeError):

    if (import_107444 != 'pyd_module'):
        __import__(import_107444)
        sys_modules_107445 = sys.modules[import_107444]
        import_from_module(stypy.reporting.localization.Localization(__file__, 10, 0), 'numpy.core', sys_modules_107445.module_type_store, module_type_store, ['linspace', 'atleast_1d', 'atleast_2d'])
        nest_module(stypy.reporting.localization.Localization(__file__, 10, 0), __file__, sys_modules_107445, sys_modules_107445.module_type_store, module_type_store)
    else:
        from numpy.core import linspace, atleast_1d, atleast_2d

        import_from_module(stypy.reporting.localization.Localization(__file__, 10, 0), 'numpy.core', None, module_type_store, ['linspace', 'atleast_1d', 'atleast_2d'], [linspace, atleast_1d, atleast_2d])

else:
    # Assigning a type to the variable 'numpy.core' (line 10)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 10, 0), 'numpy.core', import_107444)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/lib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 11, 0))

# 'from numpy.core.numeric import ones, zeros, arange, concatenate, array, asarray, asanyarray, empty, empty_like, ndarray, around, floor, ceil, take, dot, where, intp, integer, isscalar' statement (line 11)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/lib/')
import_107446 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'numpy.core.numeric')

if (type(import_107446) is not StypyTypeError):

    if (import_107446 != 'pyd_module'):
        __import__(import_107446)
        sys_modules_107447 = sys.modules[import_107446]
        import_from_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'numpy.core.numeric', sys_modules_107447.module_type_store, module_type_store, ['ones', 'zeros', 'arange', 'concatenate', 'array', 'asarray', 'asanyarray', 'empty', 'empty_like', 'ndarray', 'around', 'floor', 'ceil', 'take', 'dot', 'where', 'intp', 'integer', 'isscalar'])
        nest_module(stypy.reporting.localization.Localization(__file__, 11, 0), __file__, sys_modules_107447, sys_modules_107447.module_type_store, module_type_store)
    else:
        from numpy.core.numeric import ones, zeros, arange, concatenate, array, asarray, asanyarray, empty, empty_like, ndarray, around, floor, ceil, take, dot, where, intp, integer, isscalar

        import_from_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'numpy.core.numeric', None, module_type_store, ['ones', 'zeros', 'arange', 'concatenate', 'array', 'asarray', 'asanyarray', 'empty', 'empty_like', 'ndarray', 'around', 'floor', 'ceil', 'take', 'dot', 'where', 'intp', 'integer', 'isscalar'], [ones, zeros, arange, concatenate, array, asarray, asanyarray, empty, empty_like, ndarray, around, floor, ceil, take, dot, where, intp, integer, isscalar])

else:
    # Assigning a type to the variable 'numpy.core.numeric' (line 11)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 11, 0), 'numpy.core.numeric', import_107446)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/lib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 16, 0))

# 'from numpy.core.umath import pi, multiply, add, arctan2, frompyfunc, cos, less_equal, sqrt, sin, mod, exp, log10' statement (line 16)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/lib/')
import_107448 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'numpy.core.umath')

if (type(import_107448) is not StypyTypeError):

    if (import_107448 != 'pyd_module'):
        __import__(import_107448)
        sys_modules_107449 = sys.modules[import_107448]
        import_from_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'numpy.core.umath', sys_modules_107449.module_type_store, module_type_store, ['pi', 'multiply', 'add', 'arctan2', 'frompyfunc', 'cos', 'less_equal', 'sqrt', 'sin', 'mod', 'exp', 'log10'])
        nest_module(stypy.reporting.localization.Localization(__file__, 16, 0), __file__, sys_modules_107449, sys_modules_107449.module_type_store, module_type_store)
    else:
        from numpy.core.umath import pi, multiply, add, arctan2, frompyfunc, cos, less_equal, sqrt, sin, mod, exp, log10

        import_from_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'numpy.core.umath', None, module_type_store, ['pi', 'multiply', 'add', 'arctan2', 'frompyfunc', 'cos', 'less_equal', 'sqrt', 'sin', 'mod', 'exp', 'log10'], [pi, multiply, add, arctan2, frompyfunc, cos, less_equal, sqrt, sin, mod, exp, log10])

else:
    # Assigning a type to the variable 'numpy.core.umath' (line 16)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 16, 0), 'numpy.core.umath', import_107448)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/lib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 20, 0))

# 'from numpy.core.fromnumeric import ravel, nonzero, sort, partition, mean, any, sum' statement (line 20)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/lib/')
import_107450 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'numpy.core.fromnumeric')

if (type(import_107450) is not StypyTypeError):

    if (import_107450 != 'pyd_module'):
        __import__(import_107450)
        sys_modules_107451 = sys.modules[import_107450]
        import_from_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'numpy.core.fromnumeric', sys_modules_107451.module_type_store, module_type_store, ['ravel', 'nonzero', 'sort', 'partition', 'mean', 'any', 'sum'])
        nest_module(stypy.reporting.localization.Localization(__file__, 20, 0), __file__, sys_modules_107451, sys_modules_107451.module_type_store, module_type_store)
    else:
        from numpy.core.fromnumeric import ravel, nonzero, sort, partition, mean, any, sum

        import_from_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'numpy.core.fromnumeric', None, module_type_store, ['ravel', 'nonzero', 'sort', 'partition', 'mean', 'any', 'sum'], [ravel, nonzero, sort, partition, mean, any, sum])

else:
    # Assigning a type to the variable 'numpy.core.fromnumeric' (line 20)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 20, 0), 'numpy.core.fromnumeric', import_107450)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/lib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 23, 0))

# 'from numpy.core.numerictypes import typecodes, number' statement (line 23)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/lib/')
import_107452 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'numpy.core.numerictypes')

if (type(import_107452) is not StypyTypeError):

    if (import_107452 != 'pyd_module'):
        __import__(import_107452)
        sys_modules_107453 = sys.modules[import_107452]
        import_from_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'numpy.core.numerictypes', sys_modules_107453.module_type_store, module_type_store, ['typecodes', 'number'])
        nest_module(stypy.reporting.localization.Localization(__file__, 23, 0), __file__, sys_modules_107453, sys_modules_107453.module_type_store, module_type_store)
    else:
        from numpy.core.numerictypes import typecodes, number

        import_from_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'numpy.core.numerictypes', None, module_type_store, ['typecodes', 'number'], [typecodes, number])

else:
    # Assigning a type to the variable 'numpy.core.numerictypes' (line 23)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 23, 0), 'numpy.core.numerictypes', import_107452)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/lib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 24, 0))

# 'from numpy.lib.twodim_base import diag' statement (line 24)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/lib/')
import_107454 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'numpy.lib.twodim_base')

if (type(import_107454) is not StypyTypeError):

    if (import_107454 != 'pyd_module'):
        __import__(import_107454)
        sys_modules_107455 = sys.modules[import_107454]
        import_from_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'numpy.lib.twodim_base', sys_modules_107455.module_type_store, module_type_store, ['diag'])
        nest_module(stypy.reporting.localization.Localization(__file__, 24, 0), __file__, sys_modules_107455, sys_modules_107455.module_type_store, module_type_store)
    else:
        from numpy.lib.twodim_base import diag

        import_from_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'numpy.lib.twodim_base', None, module_type_store, ['diag'], [diag])

else:
    # Assigning a type to the variable 'numpy.lib.twodim_base' (line 24)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 24, 0), 'numpy.lib.twodim_base', import_107454)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/lib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 25, 0))

# 'from numpy.lib.utils import deprecate' statement (line 25)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/lib/')
import_107456 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'numpy.lib.utils')

if (type(import_107456) is not StypyTypeError):

    if (import_107456 != 'pyd_module'):
        __import__(import_107456)
        sys_modules_107457 = sys.modules[import_107456]
        import_from_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'numpy.lib.utils', sys_modules_107457.module_type_store, module_type_store, ['deprecate'])
        nest_module(stypy.reporting.localization.Localization(__file__, 25, 0), __file__, sys_modules_107457, sys_modules_107457.module_type_store, module_type_store)
    else:
        from numpy.lib.utils import deprecate

        import_from_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'numpy.lib.utils', None, module_type_store, ['deprecate'], [deprecate])

else:
    # Assigning a type to the variable 'numpy.lib.utils' (line 25)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 25, 0), 'numpy.lib.utils', import_107456)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/lib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 26, 0))

# 'from numpy.core.multiarray import _insert, add_docstring' statement (line 26)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/lib/')
import_107458 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'numpy.core.multiarray')

if (type(import_107458) is not StypyTypeError):

    if (import_107458 != 'pyd_module'):
        __import__(import_107458)
        sys_modules_107459 = sys.modules[import_107458]
        import_from_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'numpy.core.multiarray', sys_modules_107459.module_type_store, module_type_store, ['_insert', 'add_docstring'])
        nest_module(stypy.reporting.localization.Localization(__file__, 26, 0), __file__, sys_modules_107459, sys_modules_107459.module_type_store, module_type_store)
    else:
        from numpy.core.multiarray import _insert, add_docstring

        import_from_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'numpy.core.multiarray', None, module_type_store, ['_insert', 'add_docstring'], [_insert, add_docstring])

else:
    # Assigning a type to the variable 'numpy.core.multiarray' (line 26)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 26, 0), 'numpy.core.multiarray', import_107458)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/lib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 27, 0))

# 'from numpy.core.multiarray import digitize, bincount, compiled_interp' statement (line 27)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/lib/')
import_107460 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'numpy.core.multiarray')

if (type(import_107460) is not StypyTypeError):

    if (import_107460 != 'pyd_module'):
        __import__(import_107460)
        sys_modules_107461 = sys.modules[import_107460]
        import_from_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'numpy.core.multiarray', sys_modules_107461.module_type_store, module_type_store, ['digitize', 'bincount', 'interp'])
        nest_module(stypy.reporting.localization.Localization(__file__, 27, 0), __file__, sys_modules_107461, sys_modules_107461.module_type_store, module_type_store)
    else:
        from numpy.core.multiarray import digitize, bincount, interp as compiled_interp

        import_from_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'numpy.core.multiarray', None, module_type_store, ['digitize', 'bincount', 'interp'], [digitize, bincount, compiled_interp])

else:
    # Assigning a type to the variable 'numpy.core.multiarray' (line 27)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 27, 0), 'numpy.core.multiarray', import_107460)

# Adding an alias
module_type_store.add_alias('compiled_interp', 'interp')
remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/lib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 28, 0))

# 'from numpy.core.umath import add_newdoc_ufunc' statement (line 28)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/lib/')
import_107462 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'numpy.core.umath')

if (type(import_107462) is not StypyTypeError):

    if (import_107462 != 'pyd_module'):
        __import__(import_107462)
        sys_modules_107463 = sys.modules[import_107462]
        import_from_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'numpy.core.umath', sys_modules_107463.module_type_store, module_type_store, ['_add_newdoc_ufunc'])
        nest_module(stypy.reporting.localization.Localization(__file__, 28, 0), __file__, sys_modules_107463, sys_modules_107463.module_type_store, module_type_store)
    else:
        from numpy.core.umath import _add_newdoc_ufunc as add_newdoc_ufunc

        import_from_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'numpy.core.umath', None, module_type_store, ['_add_newdoc_ufunc'], [add_newdoc_ufunc])

else:
    # Assigning a type to the variable 'numpy.core.umath' (line 28)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 28, 0), 'numpy.core.umath', import_107462)

# Adding an alias
module_type_store.add_alias('add_newdoc_ufunc', '_add_newdoc_ufunc')
remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/lib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 29, 0))

# 'from numpy.compat import long' statement (line 29)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/lib/')
import_107464 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'numpy.compat')

if (type(import_107464) is not StypyTypeError):

    if (import_107464 != 'pyd_module'):
        __import__(import_107464)
        sys_modules_107465 = sys.modules[import_107464]
        import_from_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'numpy.compat', sys_modules_107465.module_type_store, module_type_store, ['long'])
        nest_module(stypy.reporting.localization.Localization(__file__, 29, 0), __file__, sys_modules_107465, sys_modules_107465.module_type_store, module_type_store)
    else:
        from numpy.compat import long

        import_from_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'numpy.compat', None, module_type_store, ['long'], [long])

else:
    # Assigning a type to the variable 'numpy.compat' (line 29)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 29, 0), 'numpy.compat', import_107464)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/lib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 30, 0))

# 'from numpy.compat.py3k import basestring' statement (line 30)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/lib/')
import_107466 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'numpy.compat.py3k')

if (type(import_107466) is not StypyTypeError):

    if (import_107466 != 'pyd_module'):
        __import__(import_107466)
        sys_modules_107467 = sys.modules[import_107466]
        import_from_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'numpy.compat.py3k', sys_modules_107467.module_type_store, module_type_store, ['basestring'])
        nest_module(stypy.reporting.localization.Localization(__file__, 30, 0), __file__, sys_modules_107467, sys_modules_107467.module_type_store, module_type_store)
    else:
        from numpy.compat.py3k import basestring

        import_from_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'numpy.compat.py3k', None, module_type_store, ['basestring'], [basestring])

else:
    # Assigning a type to the variable 'numpy.compat.py3k' (line 30)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 30, 0), 'numpy.compat.py3k', import_107466)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/lib/')




# Obtaining the type of the subscript
int_107468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 33, 20), 'int')
# Getting the type of 'sys' (line 33)
sys_107469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 33, 3), 'sys')
# Obtaining the member 'version_info' of a type (line 33)
version_info_107470 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 33, 3), sys_107469, 'version_info')
# Obtaining the member '__getitem__' of a type (line 33)
getitem___107471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 33, 3), version_info_107470, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 33)
subscript_call_result_107472 = invoke(stypy.reporting.localization.Localization(__file__, 33, 3), getitem___107471, int_107468)

int_107473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 33, 25), 'int')
# Applying the binary operator '<' (line 33)
result_lt_107474 = python_operator(stypy.reporting.localization.Localization(__file__, 33, 3), '<', subscript_call_result_107472, int_107473)

# Testing the type of an if condition (line 33)
if_condition_107475 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 33, 0), result_lt_107474)
# Assigning a type to the variable 'if_condition_107475' (line 33)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 33, 0), 'if_condition_107475', if_condition_107475)
# SSA begins for if statement (line 33)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

# Assigning a Name to a Name (line 34):

# Assigning a Name to a Name (line 34):
# Getting the type of 'xrange' (line 34)
xrange_107476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 34, 12), 'xrange')
# Assigning a type to the variable 'range' (line 34)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 34, 4), 'range', xrange_107476)
# SSA join for if statement (line 33)
module_type_store = module_type_store.join_ssa_context()


# Assigning a List to a Name (line 37):

# Assigning a List to a Name (line 37):
__all__ = ['select', 'piecewise', 'trim_zeros', 'copy', 'iterable', 'percentile', 'diff', 'gradient', 'angle', 'unwrap', 'sort_complex', 'disp', 'extract', 'place', 'vectorize', 'asarray_chkfinite', 'average', 'histogram', 'histogramdd', 'bincount', 'digitize', 'cov', 'corrcoef', 'msort', 'median', 'sinc', 'hamming', 'hanning', 'bartlett', 'blackman', 'kaiser', 'trapz', 'i0', 'add_newdoc', 'add_docstring', 'meshgrid', 'delete', 'insert', 'append', 'interp', 'add_newdoc_ufunc']
module_type_store.set_exportable_members(['select', 'piecewise', 'trim_zeros', 'copy', 'iterable', 'percentile', 'diff', 'gradient', 'angle', 'unwrap', 'sort_complex', 'disp', 'extract', 'place', 'vectorize', 'asarray_chkfinite', 'average', 'histogram', 'histogramdd', 'bincount', 'digitize', 'cov', 'corrcoef', 'msort', 'median', 'sinc', 'hamming', 'hanning', 'bartlett', 'blackman', 'kaiser', 'trapz', 'i0', 'add_newdoc', 'add_docstring', 'meshgrid', 'delete', 'insert', 'append', 'interp', 'add_newdoc_ufunc'])

# Obtaining an instance of the builtin type 'list' (line 37)
list_107477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 37, 10), 'list')
# Adding type elements to the builtin type 'list' instance (line 37)
# Adding element type (line 37)
str_107478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 38, 4), 'str', 'select')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107478)
# Adding element type (line 37)
str_107479 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 38, 14), 'str', 'piecewise')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107479)
# Adding element type (line 37)
str_107480 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 38, 27), 'str', 'trim_zeros')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107480)
# Adding element type (line 37)
str_107481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 38, 41), 'str', 'copy')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107481)
# Adding element type (line 37)
str_107482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 38, 49), 'str', 'iterable')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107482)
# Adding element type (line 37)
str_107483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 38, 61), 'str', 'percentile')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107483)
# Adding element type (line 37)
str_107484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 39, 4), 'str', 'diff')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107484)
# Adding element type (line 37)
str_107485 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 39, 12), 'str', 'gradient')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107485)
# Adding element type (line 37)
str_107486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 39, 24), 'str', 'angle')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107486)
# Adding element type (line 37)
str_107487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 39, 33), 'str', 'unwrap')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107487)
# Adding element type (line 37)
str_107488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 39, 43), 'str', 'sort_complex')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107488)
# Adding element type (line 37)
str_107489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 39, 59), 'str', 'disp')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107489)
# Adding element type (line 37)
str_107490 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 40, 4), 'str', 'extract')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107490)
# Adding element type (line 37)
str_107491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 40, 15), 'str', 'place')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107491)
# Adding element type (line 37)
str_107492 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 40, 24), 'str', 'vectorize')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107492)
# Adding element type (line 37)
str_107493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 40, 37), 'str', 'asarray_chkfinite')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107493)
# Adding element type (line 37)
str_107494 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 40, 58), 'str', 'average')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107494)
# Adding element type (line 37)
str_107495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 41, 4), 'str', 'histogram')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107495)
# Adding element type (line 37)
str_107496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 41, 17), 'str', 'histogramdd')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107496)
# Adding element type (line 37)
str_107497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 41, 32), 'str', 'bincount')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107497)
# Adding element type (line 37)
str_107498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 41, 44), 'str', 'digitize')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107498)
# Adding element type (line 37)
str_107499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 41, 56), 'str', 'cov')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107499)
# Adding element type (line 37)
str_107500 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 41, 63), 'str', 'corrcoef')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107500)
# Adding element type (line 37)
str_107501 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 42, 4), 'str', 'msort')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107501)
# Adding element type (line 37)
str_107502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 42, 13), 'str', 'median')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107502)
# Adding element type (line 37)
str_107503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 42, 23), 'str', 'sinc')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107503)
# Adding element type (line 37)
str_107504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 42, 31), 'str', 'hamming')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107504)
# Adding element type (line 37)
str_107505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 42, 42), 'str', 'hanning')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107505)
# Adding element type (line 37)
str_107506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 42, 53), 'str', 'bartlett')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107506)
# Adding element type (line 37)
str_107507 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, 4), 'str', 'blackman')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107507)
# Adding element type (line 37)
str_107508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, 16), 'str', 'kaiser')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107508)
# Adding element type (line 37)
str_107509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, 26), 'str', 'trapz')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107509)
# Adding element type (line 37)
str_107510 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, 35), 'str', 'i0')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107510)
# Adding element type (line 37)
str_107511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, 41), 'str', 'add_newdoc')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107511)
# Adding element type (line 37)
str_107512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, 55), 'str', 'add_docstring')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107512)
# Adding element type (line 37)
str_107513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 4), 'str', 'meshgrid')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107513)
# Adding element type (line 37)
str_107514 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 16), 'str', 'delete')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107514)
# Adding element type (line 37)
str_107515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 26), 'str', 'insert')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107515)
# Adding element type (line 37)
str_107516 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 36), 'str', 'append')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107516)
# Adding element type (line 37)
str_107517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 46), 'str', 'interp')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107517)
# Adding element type (line 37)
str_107518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 56), 'str', 'add_newdoc_ufunc')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 37, 10), list_107477, str_107518)

# Assigning a type to the variable '__all__' (line 37)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 37, 0), '__all__', list_107477)

@norecursion
def iterable(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'iterable'
    module_type_store = module_type_store.open_function_context('iterable', 48, 0, False)
    
    # Passed parameters checking function
    iterable.stypy_localization = localization
    iterable.stypy_type_of_self = None
    iterable.stypy_type_store = module_type_store
    iterable.stypy_function_name = 'iterable'
    iterable.stypy_param_names_list = ['y']
    iterable.stypy_varargs_param_name = None
    iterable.stypy_kwargs_param_name = None
    iterable.stypy_call_defaults = defaults
    iterable.stypy_call_varargs = varargs
    iterable.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'iterable', ['y'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'iterable', localization, ['y'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'iterable(...)' code ##################

    str_107519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 71, (-1)), 'str', '\n    Check whether or not an object can be iterated over.\n\n    Parameters\n    ----------\n    y : object\n      Input object.\n\n    Returns\n    -------\n    b : {0, 1}\n      Return 1 if the object has an iterator method or is a sequence,\n      and 0 otherwise.\n\n\n    Examples\n    --------\n    >>> np.iterable([1, 2, 3])\n    1\n    >>> np.iterable(2)\n    0\n\n    ')
    
    
    # SSA begins for try-except statement (line 72)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Call to iter(...): (line 73)
    # Processing the call arguments (line 73)
    # Getting the type of 'y' (line 73)
    y_107521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 73, 13), 'y', False)
    # Processing the call keyword arguments (line 73)
    kwargs_107522 = {}
    # Getting the type of 'iter' (line 73)
    iter_107520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 73, 8), 'iter', False)
    # Calling iter(args, kwargs) (line 73)
    iter_call_result_107523 = invoke(stypy.reporting.localization.Localization(__file__, 73, 8), iter_107520, *[y_107521], **kwargs_107522)
    
    # SSA branch for the except part of a try statement (line 72)
    # SSA branch for the except '<any exception>' branch of a try statement (line 72)
    module_type_store.open_ssa_branch('except')
    int_107524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 75, 15), 'int')
    # Assigning a type to the variable 'stypy_return_type' (line 75)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 75, 8), 'stypy_return_type', int_107524)
    # SSA join for try-except statement (line 72)
    module_type_store = module_type_store.join_ssa_context()
    
    int_107525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 76, 11), 'int')
    # Assigning a type to the variable 'stypy_return_type' (line 76)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 76, 4), 'stypy_return_type', int_107525)
    
    # ################# End of 'iterable(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'iterable' in the type store
    # Getting the type of 'stypy_return_type' (line 48)
    stypy_return_type_107526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 48, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_107526)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'iterable'
    return stypy_return_type_107526

# Assigning a type to the variable 'iterable' (line 48)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 48, 0), 'iterable', iterable)

@norecursion
def _hist_bin_sqrt(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_hist_bin_sqrt'
    module_type_store = module_type_store.open_function_context('_hist_bin_sqrt', 79, 0, False)
    
    # Passed parameters checking function
    _hist_bin_sqrt.stypy_localization = localization
    _hist_bin_sqrt.stypy_type_of_self = None
    _hist_bin_sqrt.stypy_type_store = module_type_store
    _hist_bin_sqrt.stypy_function_name = '_hist_bin_sqrt'
    _hist_bin_sqrt.stypy_param_names_list = ['x']
    _hist_bin_sqrt.stypy_varargs_param_name = None
    _hist_bin_sqrt.stypy_kwargs_param_name = None
    _hist_bin_sqrt.stypy_call_defaults = defaults
    _hist_bin_sqrt.stypy_call_varargs = varargs
    _hist_bin_sqrt.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_hist_bin_sqrt', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_hist_bin_sqrt', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_hist_bin_sqrt(...)' code ##################

    str_107527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 95, (-1)), 'str', '\n    Square root histogram bin estimator.\n\n    Bin width is inversely proportional to the data size. Used by many\n    programs for its simplicity.\n\n    Parameters\n    ----------\n    x : array_like\n        Input data that is to be histogrammed, trimmed to range. May not\n        be empty.\n\n    Returns\n    -------\n    h : An estimate of the optimal bin width for the given data.\n    ')
    
    # Call to ptp(...): (line 96)
    # Processing the call keyword arguments (line 96)
    kwargs_107530 = {}
    # Getting the type of 'x' (line 96)
    x_107528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 96, 11), 'x', False)
    # Obtaining the member 'ptp' of a type (line 96)
    ptp_107529 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 96, 11), x_107528, 'ptp')
    # Calling ptp(args, kwargs) (line 96)
    ptp_call_result_107531 = invoke(stypy.reporting.localization.Localization(__file__, 96, 11), ptp_107529, *[], **kwargs_107530)
    
    
    # Call to sqrt(...): (line 96)
    # Processing the call arguments (line 96)
    # Getting the type of 'x' (line 96)
    x_107534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 96, 29), 'x', False)
    # Obtaining the member 'size' of a type (line 96)
    size_107535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 96, 29), x_107534, 'size')
    # Processing the call keyword arguments (line 96)
    kwargs_107536 = {}
    # Getting the type of 'np' (line 96)
    np_107532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 96, 21), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 96)
    sqrt_107533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 96, 21), np_107532, 'sqrt')
    # Calling sqrt(args, kwargs) (line 96)
    sqrt_call_result_107537 = invoke(stypy.reporting.localization.Localization(__file__, 96, 21), sqrt_107533, *[size_107535], **kwargs_107536)
    
    # Applying the binary operator 'div' (line 96)
    result_div_107538 = python_operator(stypy.reporting.localization.Localization(__file__, 96, 11), 'div', ptp_call_result_107531, sqrt_call_result_107537)
    
    # Assigning a type to the variable 'stypy_return_type' (line 96)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 96, 4), 'stypy_return_type', result_div_107538)
    
    # ################# End of '_hist_bin_sqrt(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_hist_bin_sqrt' in the type store
    # Getting the type of 'stypy_return_type' (line 79)
    stypy_return_type_107539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 79, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_107539)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_hist_bin_sqrt'
    return stypy_return_type_107539

# Assigning a type to the variable '_hist_bin_sqrt' (line 79)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 79, 0), '_hist_bin_sqrt', _hist_bin_sqrt)

@norecursion
def _hist_bin_sturges(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_hist_bin_sturges'
    module_type_store = module_type_store.open_function_context('_hist_bin_sturges', 99, 0, False)
    
    # Passed parameters checking function
    _hist_bin_sturges.stypy_localization = localization
    _hist_bin_sturges.stypy_type_of_self = None
    _hist_bin_sturges.stypy_type_store = module_type_store
    _hist_bin_sturges.stypy_function_name = '_hist_bin_sturges'
    _hist_bin_sturges.stypy_param_names_list = ['x']
    _hist_bin_sturges.stypy_varargs_param_name = None
    _hist_bin_sturges.stypy_kwargs_param_name = None
    _hist_bin_sturges.stypy_call_defaults = defaults
    _hist_bin_sturges.stypy_call_varargs = varargs
    _hist_bin_sturges.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_hist_bin_sturges', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_hist_bin_sturges', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_hist_bin_sturges(...)' code ##################

    str_107540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 117, (-1)), 'str', '\n    Sturges histogram bin estimator.\n\n    A very simplistic estimator based on the assumption of normality of\n    the data. This estimator has poor performance for non-normal data,\n    which becomes especially obvious for large data sets. The estimate\n    depends only on size of the data.\n\n    Parameters\n    ----------\n    x : array_like\n        Input data that is to be histogrammed, trimmed to range. May not\n        be empty.\n\n    Returns\n    -------\n    h : An estimate of the optimal bin width for the given data.\n    ')
    
    # Call to ptp(...): (line 118)
    # Processing the call keyword arguments (line 118)
    kwargs_107543 = {}
    # Getting the type of 'x' (line 118)
    x_107541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 118, 11), 'x', False)
    # Obtaining the member 'ptp' of a type (line 118)
    ptp_107542 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 118, 11), x_107541, 'ptp')
    # Calling ptp(args, kwargs) (line 118)
    ptp_call_result_107544 = invoke(stypy.reporting.localization.Localization(__file__, 118, 11), ptp_107542, *[], **kwargs_107543)
    
    
    # Call to log2(...): (line 118)
    # Processing the call arguments (line 118)
    # Getting the type of 'x' (line 118)
    x_107547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 118, 30), 'x', False)
    # Obtaining the member 'size' of a type (line 118)
    size_107548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 118, 30), x_107547, 'size')
    # Processing the call keyword arguments (line 118)
    kwargs_107549 = {}
    # Getting the type of 'np' (line 118)
    np_107545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 118, 22), 'np', False)
    # Obtaining the member 'log2' of a type (line 118)
    log2_107546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 118, 22), np_107545, 'log2')
    # Calling log2(args, kwargs) (line 118)
    log2_call_result_107550 = invoke(stypy.reporting.localization.Localization(__file__, 118, 22), log2_107546, *[size_107548], **kwargs_107549)
    
    float_107551 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 118, 40), 'float')
    # Applying the binary operator '+' (line 118)
    result_add_107552 = python_operator(stypy.reporting.localization.Localization(__file__, 118, 22), '+', log2_call_result_107550, float_107551)
    
    # Applying the binary operator 'div' (line 118)
    result_div_107553 = python_operator(stypy.reporting.localization.Localization(__file__, 118, 11), 'div', ptp_call_result_107544, result_add_107552)
    
    # Assigning a type to the variable 'stypy_return_type' (line 118)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 118, 4), 'stypy_return_type', result_div_107553)
    
    # ################# End of '_hist_bin_sturges(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_hist_bin_sturges' in the type store
    # Getting the type of 'stypy_return_type' (line 99)
    stypy_return_type_107554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 99, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_107554)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_hist_bin_sturges'
    return stypy_return_type_107554

# Assigning a type to the variable '_hist_bin_sturges' (line 99)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 99, 0), '_hist_bin_sturges', _hist_bin_sturges)

@norecursion
def _hist_bin_rice(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_hist_bin_rice'
    module_type_store = module_type_store.open_function_context('_hist_bin_rice', 121, 0, False)
    
    # Passed parameters checking function
    _hist_bin_rice.stypy_localization = localization
    _hist_bin_rice.stypy_type_of_self = None
    _hist_bin_rice.stypy_type_store = module_type_store
    _hist_bin_rice.stypy_function_name = '_hist_bin_rice'
    _hist_bin_rice.stypy_param_names_list = ['x']
    _hist_bin_rice.stypy_varargs_param_name = None
    _hist_bin_rice.stypy_kwargs_param_name = None
    _hist_bin_rice.stypy_call_defaults = defaults
    _hist_bin_rice.stypy_call_varargs = varargs
    _hist_bin_rice.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_hist_bin_rice', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_hist_bin_rice', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_hist_bin_rice(...)' code ##################

    str_107555 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 140, (-1)), 'str', '\n    Rice histogram bin estimator.\n\n    Another simple estimator with no normality assumption. It has better\n    performance for large data than Sturges, but tends to overestimate\n    the number of bins. The number of bins is proportional to the cube\n    root of data size (asymptotically optimal). The estimate depends\n    only on size of the data.\n\n    Parameters\n    ----------\n    x : array_like\n        Input data that is to be histogrammed, trimmed to range. May not\n        be empty.\n\n    Returns\n    -------\n    h : An estimate of the optimal bin width for the given data.\n    ')
    
    # Call to ptp(...): (line 141)
    # Processing the call keyword arguments (line 141)
    kwargs_107558 = {}
    # Getting the type of 'x' (line 141)
    x_107556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 141, 11), 'x', False)
    # Obtaining the member 'ptp' of a type (line 141)
    ptp_107557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 141, 11), x_107556, 'ptp')
    # Calling ptp(args, kwargs) (line 141)
    ptp_call_result_107559 = invoke(stypy.reporting.localization.Localization(__file__, 141, 11), ptp_107557, *[], **kwargs_107558)
    
    float_107560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 141, 22), 'float')
    # Getting the type of 'x' (line 141)
    x_107561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 141, 28), 'x')
    # Obtaining the member 'size' of a type (line 141)
    size_107562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 141, 28), x_107561, 'size')
    float_107563 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 141, 39), 'float')
    int_107564 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 141, 45), 'int')
    # Applying the binary operator 'div' (line 141)
    result_div_107565 = python_operator(stypy.reporting.localization.Localization(__file__, 141, 39), 'div', float_107563, int_107564)
    
    # Applying the binary operator '**' (line 141)
    result_pow_107566 = python_operator(stypy.reporting.localization.Localization(__file__, 141, 28), '**', size_107562, result_div_107565)
    
    # Applying the binary operator '*' (line 141)
    result_mul_107567 = python_operator(stypy.reporting.localization.Localization(__file__, 141, 22), '*', float_107560, result_pow_107566)
    
    # Applying the binary operator 'div' (line 141)
    result_div_107568 = python_operator(stypy.reporting.localization.Localization(__file__, 141, 11), 'div', ptp_call_result_107559, result_mul_107567)
    
    # Assigning a type to the variable 'stypy_return_type' (line 141)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 141, 4), 'stypy_return_type', result_div_107568)
    
    # ################# End of '_hist_bin_rice(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_hist_bin_rice' in the type store
    # Getting the type of 'stypy_return_type' (line 121)
    stypy_return_type_107569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_107569)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_hist_bin_rice'
    return stypy_return_type_107569

# Assigning a type to the variable '_hist_bin_rice' (line 121)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 121, 0), '_hist_bin_rice', _hist_bin_rice)

@norecursion
def _hist_bin_scott(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_hist_bin_scott'
    module_type_store = module_type_store.open_function_context('_hist_bin_scott', 144, 0, False)
    
    # Passed parameters checking function
    _hist_bin_scott.stypy_localization = localization
    _hist_bin_scott.stypy_type_of_self = None
    _hist_bin_scott.stypy_type_store = module_type_store
    _hist_bin_scott.stypy_function_name = '_hist_bin_scott'
    _hist_bin_scott.stypy_param_names_list = ['x']
    _hist_bin_scott.stypy_varargs_param_name = None
    _hist_bin_scott.stypy_kwargs_param_name = None
    _hist_bin_scott.stypy_call_defaults = defaults
    _hist_bin_scott.stypy_call_varargs = varargs
    _hist_bin_scott.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_hist_bin_scott', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_hist_bin_scott', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_hist_bin_scott(...)' code ##################

    str_107570 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 161, (-1)), 'str', '\n    Scott histogram bin estimator.\n\n    The binwidth is proportional to the standard deviation of the data\n    and inversely proportional to the cube root of data size\n    (asymptotically optimal).\n\n    Parameters\n    ----------\n    x : array_like\n        Input data that is to be histogrammed, trimmed to range. May not\n        be empty.\n\n    Returns\n    -------\n    h : An estimate of the optimal bin width for the given data.\n    ')
    float_107571 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 162, 12), 'float')
    # Getting the type of 'np' (line 162)
    np_107572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 19), 'np')
    # Obtaining the member 'pi' of a type (line 162)
    pi_107573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 162, 19), np_107572, 'pi')
    float_107574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 162, 26), 'float')
    # Applying the binary operator '**' (line 162)
    result_pow_107575 = python_operator(stypy.reporting.localization.Localization(__file__, 162, 19), '**', pi_107573, float_107574)
    
    # Applying the binary operator '*' (line 162)
    result_mul_107576 = python_operator(stypy.reporting.localization.Localization(__file__, 162, 12), '*', float_107571, result_pow_107575)
    
    # Getting the type of 'x' (line 162)
    x_107577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 32), 'x')
    # Obtaining the member 'size' of a type (line 162)
    size_107578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 162, 32), x_107577, 'size')
    # Applying the binary operator 'div' (line 162)
    result_div_107579 = python_operator(stypy.reporting.localization.Localization(__file__, 162, 30), 'div', result_mul_107576, size_107578)
    
    float_107580 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 162, 42), 'float')
    float_107581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 162, 48), 'float')
    # Applying the binary operator 'div' (line 162)
    result_div_107582 = python_operator(stypy.reporting.localization.Localization(__file__, 162, 42), 'div', float_107580, float_107581)
    
    # Applying the binary operator '**' (line 162)
    result_pow_107583 = python_operator(stypy.reporting.localization.Localization(__file__, 162, 11), '**', result_div_107579, result_div_107582)
    
    
    # Call to std(...): (line 162)
    # Processing the call arguments (line 162)
    # Getting the type of 'x' (line 162)
    x_107586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 62), 'x', False)
    # Processing the call keyword arguments (line 162)
    kwargs_107587 = {}
    # Getting the type of 'np' (line 162)
    np_107584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 55), 'np', False)
    # Obtaining the member 'std' of a type (line 162)
    std_107585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 162, 55), np_107584, 'std')
    # Calling std(args, kwargs) (line 162)
    std_call_result_107588 = invoke(stypy.reporting.localization.Localization(__file__, 162, 55), std_107585, *[x_107586], **kwargs_107587)
    
    # Applying the binary operator '*' (line 162)
    result_mul_107589 = python_operator(stypy.reporting.localization.Localization(__file__, 162, 11), '*', result_pow_107583, std_call_result_107588)
    
    # Assigning a type to the variable 'stypy_return_type' (line 162)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 162, 4), 'stypy_return_type', result_mul_107589)
    
    # ################# End of '_hist_bin_scott(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_hist_bin_scott' in the type store
    # Getting the type of 'stypy_return_type' (line 144)
    stypy_return_type_107590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_107590)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_hist_bin_scott'
    return stypy_return_type_107590

# Assigning a type to the variable '_hist_bin_scott' (line 144)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 144, 0), '_hist_bin_scott', _hist_bin_scott)

@norecursion
def _hist_bin_doane(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_hist_bin_doane'
    module_type_store = module_type_store.open_function_context('_hist_bin_doane', 165, 0, False)
    
    # Passed parameters checking function
    _hist_bin_doane.stypy_localization = localization
    _hist_bin_doane.stypy_type_of_self = None
    _hist_bin_doane.stypy_type_store = module_type_store
    _hist_bin_doane.stypy_function_name = '_hist_bin_doane'
    _hist_bin_doane.stypy_param_names_list = ['x']
    _hist_bin_doane.stypy_varargs_param_name = None
    _hist_bin_doane.stypy_kwargs_param_name = None
    _hist_bin_doane.stypy_call_defaults = defaults
    _hist_bin_doane.stypy_call_varargs = varargs
    _hist_bin_doane.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_hist_bin_doane', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_hist_bin_doane', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_hist_bin_doane(...)' code ##################

    str_107591 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 182, (-1)), 'str', "\n    Doane's histogram bin estimator.\n\n    Improved version of Sturges' formula which works better for\n    non-normal data. See\n    http://stats.stackexchange.com/questions/55134/doanes-formula-for-histogram-binning\n\n    Parameters\n    ----------\n    x : array_like\n        Input data that is to be histogrammed, trimmed to range. May not\n        be empty.\n\n    Returns\n    -------\n    h : An estimate of the optimal bin width for the given data.\n    ")
    
    
    # Getting the type of 'x' (line 183)
    x_107592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 7), 'x')
    # Obtaining the member 'size' of a type (line 183)
    size_107593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 183, 7), x_107592, 'size')
    int_107594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 183, 16), 'int')
    # Applying the binary operator '>' (line 183)
    result_gt_107595 = python_operator(stypy.reporting.localization.Localization(__file__, 183, 7), '>', size_107593, int_107594)
    
    # Testing the type of an if condition (line 183)
    if_condition_107596 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 183, 4), result_gt_107595)
    # Assigning a type to the variable 'if_condition_107596' (line 183)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 183, 4), 'if_condition_107596', if_condition_107596)
    # SSA begins for if statement (line 183)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 184):
    
    # Assigning a Call to a Name (line 184):
    
    # Call to sqrt(...): (line 184)
    # Processing the call arguments (line 184)
    float_107599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 184, 22), 'float')
    # Getting the type of 'x' (line 184)
    x_107600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 184, 29), 'x', False)
    # Obtaining the member 'size' of a type (line 184)
    size_107601 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 184, 29), x_107600, 'size')
    int_107602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 184, 38), 'int')
    # Applying the binary operator '-' (line 184)
    result_sub_107603 = python_operator(stypy.reporting.localization.Localization(__file__, 184, 29), '-', size_107601, int_107602)
    
    # Applying the binary operator '*' (line 184)
    result_mul_107604 = python_operator(stypy.reporting.localization.Localization(__file__, 184, 22), '*', float_107599, result_sub_107603)
    
    # Getting the type of 'x' (line 184)
    x_107605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 184, 45), 'x', False)
    # Obtaining the member 'size' of a type (line 184)
    size_107606 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 184, 45), x_107605, 'size')
    float_107607 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 184, 54), 'float')
    # Applying the binary operator '+' (line 184)
    result_add_107608 = python_operator(stypy.reporting.localization.Localization(__file__, 184, 45), '+', size_107606, float_107607)
    
    # Getting the type of 'x' (line 184)
    x_107609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 184, 62), 'x', False)
    # Obtaining the member 'size' of a type (line 184)
    size_107610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 184, 62), x_107609, 'size')
    int_107611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 184, 71), 'int')
    # Applying the binary operator '+' (line 184)
    result_add_107612 = python_operator(stypy.reporting.localization.Localization(__file__, 184, 62), '+', size_107610, int_107611)
    
    # Applying the binary operator '*' (line 184)
    result_mul_107613 = python_operator(stypy.reporting.localization.Localization(__file__, 184, 44), '*', result_add_107608, result_add_107612)
    
    # Applying the binary operator 'div' (line 184)
    result_div_107614 = python_operator(stypy.reporting.localization.Localization(__file__, 184, 41), 'div', result_mul_107604, result_mul_107613)
    
    # Processing the call keyword arguments (line 184)
    kwargs_107615 = {}
    # Getting the type of 'np' (line 184)
    np_107597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 184, 14), 'np', False)
    # Obtaining the member 'sqrt' of a type (line 184)
    sqrt_107598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 184, 14), np_107597, 'sqrt')
    # Calling sqrt(args, kwargs) (line 184)
    sqrt_call_result_107616 = invoke(stypy.reporting.localization.Localization(__file__, 184, 14), sqrt_107598, *[result_div_107614], **kwargs_107615)
    
    # Assigning a type to the variable 'sg1' (line 184)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 184, 8), 'sg1', sqrt_call_result_107616)
    
    # Assigning a Call to a Name (line 185):
    
    # Assigning a Call to a Name (line 185):
    
    # Call to std(...): (line 185)
    # Processing the call arguments (line 185)
    # Getting the type of 'x' (line 185)
    x_107619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 23), 'x', False)
    # Processing the call keyword arguments (line 185)
    kwargs_107620 = {}
    # Getting the type of 'np' (line 185)
    np_107617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 16), 'np', False)
    # Obtaining the member 'std' of a type (line 185)
    std_107618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 185, 16), np_107617, 'std')
    # Calling std(args, kwargs) (line 185)
    std_call_result_107621 = invoke(stypy.reporting.localization.Localization(__file__, 185, 16), std_107618, *[x_107619], **kwargs_107620)
    
    # Assigning a type to the variable 'sigma' (line 185)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 185, 8), 'sigma', std_call_result_107621)
    
    
    # Getting the type of 'sigma' (line 186)
    sigma_107622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 186, 11), 'sigma')
    float_107623 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 186, 19), 'float')
    # Applying the binary operator '>' (line 186)
    result_gt_107624 = python_operator(stypy.reporting.localization.Localization(__file__, 186, 11), '>', sigma_107622, float_107623)
    
    # Testing the type of an if condition (line 186)
    if_condition_107625 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 186, 8), result_gt_107624)
    # Assigning a type to the variable 'if_condition_107625' (line 186)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 186, 8), 'if_condition_107625', if_condition_107625)
    # SSA begins for if statement (line 186)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 190):
    
    # Assigning a BinOp to a Name (line 190):
    # Getting the type of 'x' (line 190)
    x_107626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 19), 'x')
    
    # Call to mean(...): (line 190)
    # Processing the call arguments (line 190)
    # Getting the type of 'x' (line 190)
    x_107629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 31), 'x', False)
    # Processing the call keyword arguments (line 190)
    kwargs_107630 = {}
    # Getting the type of 'np' (line 190)
    np_107627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 23), 'np', False)
    # Obtaining the member 'mean' of a type (line 190)
    mean_107628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 190, 23), np_107627, 'mean')
    # Calling mean(args, kwargs) (line 190)
    mean_call_result_107631 = invoke(stypy.reporting.localization.Localization(__file__, 190, 23), mean_107628, *[x_107629], **kwargs_107630)
    
    # Applying the binary operator '-' (line 190)
    result_sub_107632 = python_operator(stypy.reporting.localization.Localization(__file__, 190, 19), '-', x_107626, mean_call_result_107631)
    
    # Assigning a type to the variable 'temp' (line 190)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 190, 12), 'temp', result_sub_107632)
    
    # Call to true_divide(...): (line 191)
    # Processing the call arguments (line 191)
    # Getting the type of 'temp' (line 191)
    temp_107635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 191, 27), 'temp', False)
    # Getting the type of 'sigma' (line 191)
    sigma_107636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 191, 33), 'sigma', False)
    # Getting the type of 'temp' (line 191)
    temp_107637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 191, 40), 'temp', False)
    # Processing the call keyword arguments (line 191)
    kwargs_107638 = {}
    # Getting the type of 'np' (line 191)
    np_107633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 191, 12), 'np', False)
    # Obtaining the member 'true_divide' of a type (line 191)
    true_divide_107634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 191, 12), np_107633, 'true_divide')
    # Calling true_divide(args, kwargs) (line 191)
    true_divide_call_result_107639 = invoke(stypy.reporting.localization.Localization(__file__, 191, 12), true_divide_107634, *[temp_107635, sigma_107636, temp_107637], **kwargs_107638)
    
    
    # Call to power(...): (line 192)
    # Processing the call arguments (line 192)
    # Getting the type of 'temp' (line 192)
    temp_107642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 21), 'temp', False)
    int_107643 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 192, 27), 'int')
    # Getting the type of 'temp' (line 192)
    temp_107644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 30), 'temp', False)
    # Processing the call keyword arguments (line 192)
    kwargs_107645 = {}
    # Getting the type of 'np' (line 192)
    np_107640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 12), 'np', False)
    # Obtaining the member 'power' of a type (line 192)
    power_107641 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 192, 12), np_107640, 'power')
    # Calling power(args, kwargs) (line 192)
    power_call_result_107646 = invoke(stypy.reporting.localization.Localization(__file__, 192, 12), power_107641, *[temp_107642, int_107643, temp_107644], **kwargs_107645)
    
    
    # Assigning a Call to a Name (line 193):
    
    # Assigning a Call to a Name (line 193):
    
    # Call to mean(...): (line 193)
    # Processing the call arguments (line 193)
    # Getting the type of 'temp' (line 193)
    temp_107649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 25), 'temp', False)
    # Processing the call keyword arguments (line 193)
    kwargs_107650 = {}
    # Getting the type of 'np' (line 193)
    np_107647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 17), 'np', False)
    # Obtaining the member 'mean' of a type (line 193)
    mean_107648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 193, 17), np_107647, 'mean')
    # Calling mean(args, kwargs) (line 193)
    mean_call_result_107651 = invoke(stypy.reporting.localization.Localization(__file__, 193, 17), mean_107648, *[temp_107649], **kwargs_107650)
    
    # Assigning a type to the variable 'g1' (line 193)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 193, 12), 'g1', mean_call_result_107651)
    
    # Call to ptp(...): (line 194)
    # Processing the call keyword arguments (line 194)
    kwargs_107654 = {}
    # Getting the type of 'x' (line 194)
    x_107652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 19), 'x', False)
    # Obtaining the member 'ptp' of a type (line 194)
    ptp_107653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 194, 19), x_107652, 'ptp')
    # Calling ptp(args, kwargs) (line 194)
    ptp_call_result_107655 = invoke(stypy.reporting.localization.Localization(__file__, 194, 19), ptp_107653, *[], **kwargs_107654)
    
    float_107656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 194, 30), 'float')
    
    # Call to log2(...): (line 194)
    # Processing the call arguments (line 194)
    # Getting the type of 'x' (line 194)
    x_107659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 44), 'x', False)
    # Obtaining the member 'size' of a type (line 194)
    size_107660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 194, 44), x_107659, 'size')
    # Processing the call keyword arguments (line 194)
    kwargs_107661 = {}
    # Getting the type of 'np' (line 194)
    np_107657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 36), 'np', False)
    # Obtaining the member 'log2' of a type (line 194)
    log2_107658 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 194, 36), np_107657, 'log2')
    # Calling log2(args, kwargs) (line 194)
    log2_call_result_107662 = invoke(stypy.reporting.localization.Localization(__file__, 194, 36), log2_107658, *[size_107660], **kwargs_107661)
    
    # Applying the binary operator '+' (line 194)
    result_add_107663 = python_operator(stypy.reporting.localization.Localization(__file__, 194, 30), '+', float_107656, log2_call_result_107662)
    
    
    # Call to log2(...): (line 195)
    # Processing the call arguments (line 195)
    float_107666 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 195, 44), 'float')
    
    # Call to absolute(...): (line 195)
    # Processing the call arguments (line 195)
    # Getting the type of 'g1' (line 195)
    g1_107669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 62), 'g1', False)
    # Processing the call keyword arguments (line 195)
    kwargs_107670 = {}
    # Getting the type of 'np' (line 195)
    np_107667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 50), 'np', False)
    # Obtaining the member 'absolute' of a type (line 195)
    absolute_107668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 195, 50), np_107667, 'absolute')
    # Calling absolute(args, kwargs) (line 195)
    absolute_call_result_107671 = invoke(stypy.reporting.localization.Localization(__file__, 195, 50), absolute_107668, *[g1_107669], **kwargs_107670)
    
    # Getting the type of 'sg1' (line 195)
    sg1_107672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 68), 'sg1', False)
    # Applying the binary operator 'div' (line 195)
    result_div_107673 = python_operator(stypy.reporting.localization.Localization(__file__, 195, 50), 'div', absolute_call_result_107671, sg1_107672)
    
    # Applying the binary operator '+' (line 195)
    result_add_107674 = python_operator(stypy.reporting.localization.Localization(__file__, 195, 44), '+', float_107666, result_div_107673)
    
    # Processing the call keyword arguments (line 195)
    kwargs_107675 = {}
    # Getting the type of 'np' (line 195)
    np_107664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 36), 'np', False)
    # Obtaining the member 'log2' of a type (line 195)
    log2_107665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 195, 36), np_107664, 'log2')
    # Calling log2(args, kwargs) (line 195)
    log2_call_result_107676 = invoke(stypy.reporting.localization.Localization(__file__, 195, 36), log2_107665, *[result_add_107674], **kwargs_107675)
    
    # Applying the binary operator '+' (line 194)
    result_add_107677 = python_operator(stypy.reporting.localization.Localization(__file__, 194, 52), '+', result_add_107663, log2_call_result_107676)
    
    # Applying the binary operator 'div' (line 194)
    result_div_107678 = python_operator(stypy.reporting.localization.Localization(__file__, 194, 19), 'div', ptp_call_result_107655, result_add_107677)
    
    # Assigning a type to the variable 'stypy_return_type' (line 194)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 194, 12), 'stypy_return_type', result_div_107678)
    # SSA join for if statement (line 186)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 183)
    module_type_store = module_type_store.join_ssa_context()
    
    float_107679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 196, 11), 'float')
    # Assigning a type to the variable 'stypy_return_type' (line 196)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 196, 4), 'stypy_return_type', float_107679)
    
    # ################# End of '_hist_bin_doane(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_hist_bin_doane' in the type store
    # Getting the type of 'stypy_return_type' (line 165)
    stypy_return_type_107680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_107680)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_hist_bin_doane'
    return stypy_return_type_107680

# Assigning a type to the variable '_hist_bin_doane' (line 165)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 165, 0), '_hist_bin_doane', _hist_bin_doane)

@norecursion
def _hist_bin_fd(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_hist_bin_fd'
    module_type_store = module_type_store.open_function_context('_hist_bin_fd', 199, 0, False)
    
    # Passed parameters checking function
    _hist_bin_fd.stypy_localization = localization
    _hist_bin_fd.stypy_type_of_self = None
    _hist_bin_fd.stypy_type_store = module_type_store
    _hist_bin_fd.stypy_function_name = '_hist_bin_fd'
    _hist_bin_fd.stypy_param_names_list = ['x']
    _hist_bin_fd.stypy_varargs_param_name = None
    _hist_bin_fd.stypy_kwargs_param_name = None
    _hist_bin_fd.stypy_call_defaults = defaults
    _hist_bin_fd.stypy_call_varargs = varargs
    _hist_bin_fd.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_hist_bin_fd', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_hist_bin_fd', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_hist_bin_fd(...)' code ##################

    str_107681 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 223, (-1)), 'str', '\n    The Freedman-Diaconis histogram bin estimator.\n\n    The Freedman-Diaconis rule uses interquartile range (IQR) to\n    estimate binwidth. It is considered a variation of the Scott rule\n    with more robustness as the IQR is less affected by outliers than\n    the standard deviation. However, the IQR depends on fewer points\n    than the standard deviation, so it is less accurate, especially for\n    long tailed distributions.\n\n    If the IQR is 0, this function returns 1 for the number of bins.\n    Binwidth is inversely proportional to the cube root of data size\n    (asymptotically optimal).\n\n    Parameters\n    ----------\n    x : array_like\n        Input data that is to be histogrammed, trimmed to range. May not\n        be empty.\n\n    Returns\n    -------\n    h : An estimate of the optimal bin width for the given data.\n    ')
    
    # Assigning a Call to a Name (line 224):
    
    # Assigning a Call to a Name (line 224):
    
    # Call to subtract(...): (line 224)
    
    # Call to percentile(...): (line 224)
    # Processing the call arguments (line 224)
    # Getting the type of 'x' (line 224)
    x_107686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 37), 'x', False)
    
    # Obtaining an instance of the builtin type 'list' (line 224)
    list_107687 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 224, 40), 'list')
    # Adding type elements to the builtin type 'list' instance (line 224)
    # Adding element type (line 224)
    int_107688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 224, 41), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 224, 40), list_107687, int_107688)
    # Adding element type (line 224)
    int_107689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 224, 45), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 224, 40), list_107687, int_107689)
    
    # Processing the call keyword arguments (line 224)
    kwargs_107690 = {}
    # Getting the type of 'np' (line 224)
    np_107684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 23), 'np', False)
    # Obtaining the member 'percentile' of a type (line 224)
    percentile_107685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 224, 23), np_107684, 'percentile')
    # Calling percentile(args, kwargs) (line 224)
    percentile_call_result_107691 = invoke(stypy.reporting.localization.Localization(__file__, 224, 23), percentile_107685, *[x_107686, list_107687], **kwargs_107690)
    
    # Processing the call keyword arguments (line 224)
    kwargs_107692 = {}
    # Getting the type of 'np' (line 224)
    np_107682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 10), 'np', False)
    # Obtaining the member 'subtract' of a type (line 224)
    subtract_107683 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 224, 10), np_107682, 'subtract')
    # Calling subtract(args, kwargs) (line 224)
    subtract_call_result_107693 = invoke(stypy.reporting.localization.Localization(__file__, 224, 10), subtract_107683, *[percentile_call_result_107691], **kwargs_107692)
    
    # Assigning a type to the variable 'iqr' (line 224)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 224, 4), 'iqr', subtract_call_result_107693)
    float_107694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 225, 11), 'float')
    # Getting the type of 'iqr' (line 225)
    iqr_107695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 17), 'iqr')
    # Applying the binary operator '*' (line 225)
    result_mul_107696 = python_operator(stypy.reporting.localization.Localization(__file__, 225, 11), '*', float_107694, iqr_107695)
    
    # Getting the type of 'x' (line 225)
    x_107697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 23), 'x')
    # Obtaining the member 'size' of a type (line 225)
    size_107698 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 225, 23), x_107697, 'size')
    float_107699 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 225, 34), 'float')
    float_107700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 225, 41), 'float')
    # Applying the binary operator 'div' (line 225)
    result_div_107701 = python_operator(stypy.reporting.localization.Localization(__file__, 225, 34), 'div', float_107699, float_107700)
    
    # Applying the binary operator '**' (line 225)
    result_pow_107702 = python_operator(stypy.reporting.localization.Localization(__file__, 225, 23), '**', size_107698, result_div_107701)
    
    # Applying the binary operator '*' (line 225)
    result_mul_107703 = python_operator(stypy.reporting.localization.Localization(__file__, 225, 21), '*', result_mul_107696, result_pow_107702)
    
    # Assigning a type to the variable 'stypy_return_type' (line 225)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 225, 4), 'stypy_return_type', result_mul_107703)
    
    # ################# End of '_hist_bin_fd(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_hist_bin_fd' in the type store
    # Getting the type of 'stypy_return_type' (line 199)
    stypy_return_type_107704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 199, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_107704)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_hist_bin_fd'
    return stypy_return_type_107704

# Assigning a type to the variable '_hist_bin_fd' (line 199)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 199, 0), '_hist_bin_fd', _hist_bin_fd)

@norecursion
def _hist_bin_auto(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_hist_bin_auto'
    module_type_store = module_type_store.open_function_context('_hist_bin_auto', 228, 0, False)
    
    # Passed parameters checking function
    _hist_bin_auto.stypy_localization = localization
    _hist_bin_auto.stypy_type_of_self = None
    _hist_bin_auto.stypy_type_store = module_type_store
    _hist_bin_auto.stypy_function_name = '_hist_bin_auto'
    _hist_bin_auto.stypy_param_names_list = ['x']
    _hist_bin_auto.stypy_varargs_param_name = None
    _hist_bin_auto.stypy_kwargs_param_name = None
    _hist_bin_auto.stypy_call_defaults = defaults
    _hist_bin_auto.stypy_call_varargs = varargs
    _hist_bin_auto.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_hist_bin_auto', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_hist_bin_auto', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_hist_bin_auto(...)' code ##################

    str_107705 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 251, (-1)), 'str', '\n    Histogram bin estimator that uses the minimum width of the\n    Freedman-Diaconis and Sturges estimators.\n\n    The FD estimator is usually the most robust method, but its width\n    estimate tends to be too large for small `x`. The Sturges estimator\n    is quite good for small (<1000) datasets and is the default in the R\n    language. This method gives good off the shelf behaviour.\n\n    Parameters\n    ----------\n    x : array_like\n        Input data that is to be histogrammed, trimmed to range. May not\n        be empty.\n\n    Returns\n    -------\n    h : An estimate of the optimal bin width for the given data.\n\n    See Also\n    --------\n    _hist_bin_fd, _hist_bin_sturges\n    ')
    
    # Call to min(...): (line 254)
    # Processing the call arguments (line 254)
    
    # Call to _hist_bin_fd(...): (line 254)
    # Processing the call arguments (line 254)
    # Getting the type of 'x' (line 254)
    x_107708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 28), 'x', False)
    # Processing the call keyword arguments (line 254)
    kwargs_107709 = {}
    # Getting the type of '_hist_bin_fd' (line 254)
    _hist_bin_fd_107707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 15), '_hist_bin_fd', False)
    # Calling _hist_bin_fd(args, kwargs) (line 254)
    _hist_bin_fd_call_result_107710 = invoke(stypy.reporting.localization.Localization(__file__, 254, 15), _hist_bin_fd_107707, *[x_107708], **kwargs_107709)
    
    
    # Call to _hist_bin_sturges(...): (line 254)
    # Processing the call arguments (line 254)
    # Getting the type of 'x' (line 254)
    x_107712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 50), 'x', False)
    # Processing the call keyword arguments (line 254)
    kwargs_107713 = {}
    # Getting the type of '_hist_bin_sturges' (line 254)
    _hist_bin_sturges_107711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 32), '_hist_bin_sturges', False)
    # Calling _hist_bin_sturges(args, kwargs) (line 254)
    _hist_bin_sturges_call_result_107714 = invoke(stypy.reporting.localization.Localization(__file__, 254, 32), _hist_bin_sturges_107711, *[x_107712], **kwargs_107713)
    
    # Processing the call keyword arguments (line 254)
    kwargs_107715 = {}
    # Getting the type of 'min' (line 254)
    min_107706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 11), 'min', False)
    # Calling min(args, kwargs) (line 254)
    min_call_result_107716 = invoke(stypy.reporting.localization.Localization(__file__, 254, 11), min_107706, *[_hist_bin_fd_call_result_107710, _hist_bin_sturges_call_result_107714], **kwargs_107715)
    
    # Assigning a type to the variable 'stypy_return_type' (line 254)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 254, 4), 'stypy_return_type', min_call_result_107716)
    
    # ################# End of '_hist_bin_auto(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_hist_bin_auto' in the type store
    # Getting the type of 'stypy_return_type' (line 228)
    stypy_return_type_107717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_107717)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_hist_bin_auto'
    return stypy_return_type_107717

# Assigning a type to the variable '_hist_bin_auto' (line 228)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 228, 0), '_hist_bin_auto', _hist_bin_auto)

# Assigning a Dict to a Name (line 258):

# Assigning a Dict to a Name (line 258):

# Obtaining an instance of the builtin type 'dict' (line 258)
dict_107718 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 258, 22), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 258)
# Adding element type (key, value) (line 258)
str_107719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 258, 23), 'str', 'auto')
# Getting the type of '_hist_bin_auto' (line 258)
_hist_bin_auto_107720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 31), '_hist_bin_auto')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 258, 22), dict_107718, (str_107719, _hist_bin_auto_107720))
# Adding element type (key, value) (line 258)
str_107721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 259, 23), 'str', 'doane')
# Getting the type of '_hist_bin_doane' (line 259)
_hist_bin_doane_107722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 32), '_hist_bin_doane')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 258, 22), dict_107718, (str_107721, _hist_bin_doane_107722))
# Adding element type (key, value) (line 258)
str_107723 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 260, 23), 'str', 'fd')
# Getting the type of '_hist_bin_fd' (line 260)
_hist_bin_fd_107724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 29), '_hist_bin_fd')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 258, 22), dict_107718, (str_107723, _hist_bin_fd_107724))
# Adding element type (key, value) (line 258)
str_107725 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 261, 23), 'str', 'rice')
# Getting the type of '_hist_bin_rice' (line 261)
_hist_bin_rice_107726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 31), '_hist_bin_rice')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 258, 22), dict_107718, (str_107725, _hist_bin_rice_107726))
# Adding element type (key, value) (line 258)
str_107727 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 262, 23), 'str', 'scott')
# Getting the type of '_hist_bin_scott' (line 262)
_hist_bin_scott_107728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 262, 32), '_hist_bin_scott')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 258, 22), dict_107718, (str_107727, _hist_bin_scott_107728))
# Adding element type (key, value) (line 258)
str_107729 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 263, 23), 'str', 'sqrt')
# Getting the type of '_hist_bin_sqrt' (line 263)
_hist_bin_sqrt_107730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 31), '_hist_bin_sqrt')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 258, 22), dict_107718, (str_107729, _hist_bin_sqrt_107730))
# Adding element type (key, value) (line 258)
str_107731 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 264, 23), 'str', 'sturges')
# Getting the type of '_hist_bin_sturges' (line 264)
_hist_bin_sturges_107732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 264, 34), '_hist_bin_sturges')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 258, 22), dict_107718, (str_107731, _hist_bin_sturges_107732))

# Assigning a type to the variable '_hist_bin_selectors' (line 258)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 258, 0), '_hist_bin_selectors', dict_107718)

@norecursion
def histogram(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_107733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 267, 22), 'int')
    # Getting the type of 'None' (line 267)
    None_107734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 32), 'None')
    # Getting the type of 'False' (line 267)
    False_107735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 45), 'False')
    # Getting the type of 'None' (line 267)
    None_107736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 60), 'None')
    # Getting the type of 'None' (line 268)
    None_107737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 268, 22), 'None')
    defaults = [int_107733, None_107734, False_107735, None_107736, None_107737]
    # Create a new context for function 'histogram'
    module_type_store = module_type_store.open_function_context('histogram', 267, 0, False)
    
    # Passed parameters checking function
    histogram.stypy_localization = localization
    histogram.stypy_type_of_self = None
    histogram.stypy_type_store = module_type_store
    histogram.stypy_function_name = 'histogram'
    histogram.stypy_param_names_list = ['a', 'bins', 'range', 'normed', 'weights', 'density']
    histogram.stypy_varargs_param_name = None
    histogram.stypy_kwargs_param_name = None
    histogram.stypy_call_defaults = defaults
    histogram.stypy_call_varargs = varargs
    histogram.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'histogram', ['a', 'bins', 'range', 'normed', 'weights', 'density'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'histogram', localization, ['a', 'bins', 'range', 'normed', 'weights', 'density'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'histogram(...)' code ##################

    str_107738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 481, (-1)), 'str', '\n    Compute the histogram of a set of data.\n\n    Parameters\n    ----------\n    a : array_like\n        Input data. The histogram is computed over the flattened array.\n    bins : int or sequence of scalars or str, optional\n        If `bins` is an int, it defines the number of equal-width\n        bins in the given range (10, by default). If `bins` is a\n        sequence, it defines the bin edges, including the rightmost\n        edge, allowing for non-uniform bin widths.\n\n        .. versionadded:: 1.11.0\n\n        If `bins` is a string from the list below, `histogram` will use\n        the method chosen to calculate the optimal bin width and\n        consequently the number of bins (see `Notes` for more detail on\n        the estimators) from the data that falls within the requested\n        range. While the bin width will be optimal for the actual data\n        in the range, the number of bins will be computed to fill the\n        entire range, including the empty portions. For visualisation,\n        using the \'auto\' option is suggested. Weighted data is not\n        supported for automated bin size selection.\n\n        \'auto\'\n            Maximum of the \'sturges\' and \'fd\' estimators. Provides good\n            all round performance\n\n        \'fd\' (Freedman Diaconis Estimator)\n            Robust (resilient to outliers) estimator that takes into\n            account data variability and data size .\n\n        \'doane\'\n            An improved version of Sturges\' estimator that works better\n            with non-normal datasets.\n\n        \'scott\'\n            Less robust estimator that that takes into account data\n            variability and data size.\n\n        \'rice\'\n            Estimator does not take variability into account, only data\n            size. Commonly overestimates number of bins required.\n\n        \'sturges\'\n            R\'s default method, only accounts for data size. Only\n            optimal for gaussian data and underestimates number of bins\n            for large non-gaussian datasets.\n\n        \'sqrt\'\n            Square root (of data size) estimator, used by Excel and\n            other programs for its speed and simplicity.\n\n    range : (float, float), optional\n        The lower and upper range of the bins.  If not provided, range\n        is simply ``(a.min(), a.max())``.  Values outside the range are\n        ignored. The first element of the range must be less than or\n        equal to the second. `range` affects the automatic bin\n        computation as well. While bin width is computed to be optimal\n        based on the actual data within `range`, the bin count will fill\n        the entire range including portions containing no data.\n    normed : bool, optional\n        This keyword is deprecated in Numpy 1.6 due to confusing/buggy\n        behavior. It will be removed in Numpy 2.0. Use the ``density``\n        keyword instead. If ``False``, the result will contain the\n        number of samples in each bin. If ``True``, the result is the\n        value of the probability *density* function at the bin,\n        normalized such that the *integral* over the range is 1. Note\n        that this latter behavior is known to be buggy with unequal bin\n        widths; use ``density`` instead.\n    weights : array_like, optional\n        An array of weights, of the same shape as `a`.  Each value in\n        `a` only contributes its associated weight towards the bin count\n        (instead of 1). If `density` is True, the weights are\n        normalized, so that the integral of the density over the range\n        remains 1.\n    density : bool, optional\n        If ``False``, the result will contain the number of samples in\n        each bin. If ``True``, the result is the value of the\n        probability *density* function at the bin, normalized such that\n        the *integral* over the range is 1. Note that the sum of the\n        histogram values will not be equal to 1 unless bins of unity\n        width are chosen; it is not a probability *mass* function.\n\n        Overrides the ``normed`` keyword if given.\n\n    Returns\n    -------\n    hist : array\n        The values of the histogram. See `density` and `weights` for a\n        description of the possible semantics.\n    bin_edges : array of dtype float\n        Return the bin edges ``(length(hist)+1)``.\n\n\n    See Also\n    --------\n    histogramdd, bincount, searchsorted, digitize\n\n    Notes\n    -----\n    All but the last (righthand-most) bin is half-open.  In other words,\n    if `bins` is::\n\n      [1, 2, 3, 4]\n\n    then the first bin is ``[1, 2)`` (including 1, but excluding 2) and\n    the second ``[2, 3)``.  The last bin, however, is ``[3, 4]``, which\n    *includes* 4.\n\n    .. versionadded:: 1.11.0\n\n    The methods to estimate the optimal number of bins are well founded\n    in literature, and are inspired by the choices R provides for\n    histogram visualisation. Note that having the number of bins\n    proportional to :math:`n^{1/3}` is asymptotically optimal, which is\n    why it appears in most estimators. These are simply plug-in methods\n    that give good starting points for number of bins. In the equations\n    below, :math:`h` is the binwidth and :math:`n_h` is the number of\n    bins. All estimators that compute bin counts are recast to bin width\n    using the `ptp` of the data. The final bin count is obtained from\n    ``np.round(np.ceil(range / h))`.\n\n    \'Auto\' (maximum of the \'Sturges\' and \'FD\' estimators)\n        A compromise to get a good value. For small datasets the Sturges\n        value will usually be chosen, while larger datasets will usually\n        default to FD.  Avoids the overly conservative behaviour of FD\n        and Sturges for small and large datasets respectively.\n        Switchover point is usually :math:`a.size \\approx 1000`.\n\n    \'FD\' (Freedman Diaconis Estimator)\n        .. math:: h = 2 \\frac{IQR}{n^{1/3}}\n\n        The binwidth is proportional to the interquartile range (IQR)\n        and inversely proportional to cube root of a.size. Can be too\n        conservative for small datasets, but is quite good for large\n        datasets. The IQR is very robust to outliers.\n\n    \'Scott\'\n        .. math:: h = \\sigma \\sqrt[3]{\\frac{24 * \\sqrt{\\pi}}{n}}\n\n        The binwidth is proportional to the standard deviation of the\n        data and inversely proportional to cube root of ``x.size``. Can\n        be too conservative for small datasets, but is quite good for\n        large datasets. The standard deviation is not very robust to\n        outliers. Values are very similar to the Freedman-Diaconis\n        estimator in the absence of outliers.\n\n    \'Rice\'\n        .. math:: n_h = 2n^{1/3}\n\n        The number of bins is only proportional to cube root of\n        ``a.size``. It tends to overestimate the number of bins and it\n        does not take into account data variability.\n\n    \'Sturges\'\n        .. math:: n_h = \\log _{2}n+1\n\n        The number of bins is the base 2 log of ``a.size``.  This\n        estimator assumes normality of data and is too conservative for\n        larger, non-normal datasets. This is the default method in R\'s\n        ``hist`` method.\n\n    \'Doane\'\n        .. math:: n_h = 1 + \\log_{2}(n) +\n                        \\log_{2}(1 + \\frac{|g_1|}{\\sigma_{g_1})}\n\n            g_1 = mean[(\\frac{x - \\mu}{\\sigma})^3]\n\n            \\sigma_{g_1} = \\sqrt{\\frac{6(n - 2)}{(n + 1)(n + 3)}}\n\n        An improved version of Sturges\' formula that produces better\n        estimates for non-normal datasets. This estimator attempts to\n        account for the skew of the data.\n\n    \'Sqrt\'\n        .. math:: n_h = \\sqrt n\n        The simplest and fastest estimator. Only takes into account the\n        data size.\n\n    Examples\n    --------\n    >>> np.histogram([1, 2, 1], bins=[0, 1, 2, 3])\n    (array([0, 2, 1]), array([0, 1, 2, 3]))\n    >>> np.histogram(np.arange(4), bins=np.arange(5), density=True)\n    (array([ 0.25,  0.25,  0.25,  0.25]), array([0, 1, 2, 3, 4]))\n    >>> np.histogram([[1, 2, 1], [1, 0, 1]], bins=[0,1,2,3])\n    (array([1, 4, 1]), array([0, 1, 2, 3]))\n\n    >>> a = np.arange(5)\n    >>> hist, bin_edges = np.histogram(a, density=True)\n    >>> hist\n    array([ 0.5,  0. ,  0.5,  0. ,  0. ,  0.5,  0. ,  0.5,  0. ,  0.5])\n    >>> hist.sum()\n    2.4999999999999996\n    >>> np.sum(hist*np.diff(bin_edges))\n    1.0\n\n    .. versionadded:: 1.11.0\n\n    Automated Bin Selection Methods example, using 2 peak random data\n    with 2000 points:\n\n    >>> import matplotlib.pyplot as plt\n    >>> rng = np.random.RandomState(10)  # deterministic random data\n    >>> a = np.hstack((rng.normal(size=1000),\n    ...                rng.normal(loc=5, scale=2, size=1000)))\n    >>> plt.hist(a, bins=\'auto\')  # plt.hist passes it\'s arguments to np.histogram\n    >>> plt.title("Histogram with \'auto\' bins")\n    >>> plt.show()\n\n    ')
    
    # Assigning a Call to a Name (line 482):
    
    # Assigning a Call to a Name (line 482):
    
    # Call to asarray(...): (line 482)
    # Processing the call arguments (line 482)
    # Getting the type of 'a' (line 482)
    a_107740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 16), 'a', False)
    # Processing the call keyword arguments (line 482)
    kwargs_107741 = {}
    # Getting the type of 'asarray' (line 482)
    asarray_107739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 482)
    asarray_call_result_107742 = invoke(stypy.reporting.localization.Localization(__file__, 482, 8), asarray_107739, *[a_107740], **kwargs_107741)
    
    # Assigning a type to the variable 'a' (line 482)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 482, 4), 'a', asarray_call_result_107742)
    
    # Type idiom detected: calculating its left and rigth part (line 483)
    # Getting the type of 'weights' (line 483)
    weights_107743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 4), 'weights')
    # Getting the type of 'None' (line 483)
    None_107744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 22), 'None')
    
    (may_be_107745, more_types_in_union_107746) = may_not_be_none(weights_107743, None_107744)

    if may_be_107745:

        if more_types_in_union_107746:
            # Runtime conditional SSA (line 483)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 484):
        
        # Assigning a Call to a Name (line 484):
        
        # Call to asarray(...): (line 484)
        # Processing the call arguments (line 484)
        # Getting the type of 'weights' (line 484)
        weights_107748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 26), 'weights', False)
        # Processing the call keyword arguments (line 484)
        kwargs_107749 = {}
        # Getting the type of 'asarray' (line 484)
        asarray_107747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 18), 'asarray', False)
        # Calling asarray(args, kwargs) (line 484)
        asarray_call_result_107750 = invoke(stypy.reporting.localization.Localization(__file__, 484, 18), asarray_107747, *[weights_107748], **kwargs_107749)
        
        # Assigning a type to the variable 'weights' (line 484)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 484, 8), 'weights', asarray_call_result_107750)
        
        
        # Call to any(...): (line 485)
        # Processing the call arguments (line 485)
        
        # Getting the type of 'weights' (line 485)
        weights_107753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 18), 'weights', False)
        # Obtaining the member 'shape' of a type (line 485)
        shape_107754 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 485, 18), weights_107753, 'shape')
        # Getting the type of 'a' (line 485)
        a_107755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 35), 'a', False)
        # Obtaining the member 'shape' of a type (line 485)
        shape_107756 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 485, 35), a_107755, 'shape')
        # Applying the binary operator '!=' (line 485)
        result_ne_107757 = python_operator(stypy.reporting.localization.Localization(__file__, 485, 18), '!=', shape_107754, shape_107756)
        
        # Processing the call keyword arguments (line 485)
        kwargs_107758 = {}
        # Getting the type of 'np' (line 485)
        np_107751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 11), 'np', False)
        # Obtaining the member 'any' of a type (line 485)
        any_107752 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 485, 11), np_107751, 'any')
        # Calling any(args, kwargs) (line 485)
        any_call_result_107759 = invoke(stypy.reporting.localization.Localization(__file__, 485, 11), any_107752, *[result_ne_107757], **kwargs_107758)
        
        # Testing the type of an if condition (line 485)
        if_condition_107760 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 485, 8), any_call_result_107759)
        # Assigning a type to the variable 'if_condition_107760' (line 485)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 485, 8), 'if_condition_107760', if_condition_107760)
        # SSA begins for if statement (line 485)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 486)
        # Processing the call arguments (line 486)
        str_107762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 487, 16), 'str', 'weights should have the same shape as a.')
        # Processing the call keyword arguments (line 486)
        kwargs_107763 = {}
        # Getting the type of 'ValueError' (line 486)
        ValueError_107761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 486)
        ValueError_call_result_107764 = invoke(stypy.reporting.localization.Localization(__file__, 486, 18), ValueError_107761, *[str_107762], **kwargs_107763)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 486, 12), ValueError_call_result_107764, 'raise parameter', BaseException)
        # SSA join for if statement (line 485)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 488):
        
        # Assigning a Call to a Name (line 488):
        
        # Call to ravel(...): (line 488)
        # Processing the call keyword arguments (line 488)
        kwargs_107767 = {}
        # Getting the type of 'weights' (line 488)
        weights_107765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 18), 'weights', False)
        # Obtaining the member 'ravel' of a type (line 488)
        ravel_107766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 488, 18), weights_107765, 'ravel')
        # Calling ravel(args, kwargs) (line 488)
        ravel_call_result_107768 = invoke(stypy.reporting.localization.Localization(__file__, 488, 18), ravel_107766, *[], **kwargs_107767)
        
        # Assigning a type to the variable 'weights' (line 488)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 488, 8), 'weights', ravel_call_result_107768)

        if more_types_in_union_107746:
            # SSA join for if statement (line 483)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 489):
    
    # Assigning a Call to a Name (line 489):
    
    # Call to ravel(...): (line 489)
    # Processing the call keyword arguments (line 489)
    kwargs_107771 = {}
    # Getting the type of 'a' (line 489)
    a_107769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 8), 'a', False)
    # Obtaining the member 'ravel' of a type (line 489)
    ravel_107770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 489, 8), a_107769, 'ravel')
    # Calling ravel(args, kwargs) (line 489)
    ravel_call_result_107772 = invoke(stypy.reporting.localization.Localization(__file__, 489, 8), ravel_107770, *[], **kwargs_107771)
    
    # Assigning a type to the variable 'a' (line 489)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 489, 4), 'a', ravel_call_result_107772)
    
    # Type idiom detected: calculating its left and rigth part (line 492)
    # Getting the type of 'range' (line 492)
    range_107773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 7), 'range')
    # Getting the type of 'None' (line 492)
    None_107774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 16), 'None')
    
    (may_be_107775, more_types_in_union_107776) = may_be_none(range_107773, None_107774)

    if may_be_107775:

        if more_types_in_union_107776:
            # Runtime conditional SSA (line 492)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        
        # Getting the type of 'a' (line 493)
        a_107777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 11), 'a')
        # Obtaining the member 'size' of a type (line 493)
        size_107778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 493, 11), a_107777, 'size')
        int_107779 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 493, 21), 'int')
        # Applying the binary operator '==' (line 493)
        result_eq_107780 = python_operator(stypy.reporting.localization.Localization(__file__, 493, 11), '==', size_107778, int_107779)
        
        # Testing the type of an if condition (line 493)
        if_condition_107781 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 493, 8), result_eq_107780)
        # Assigning a type to the variable 'if_condition_107781' (line 493)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 493, 8), 'if_condition_107781', if_condition_107781)
        # SSA begins for if statement (line 493)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 495):
        
        # Assigning a Num to a Name (line 495):
        float_107782 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 495, 21), 'float')
        # Assigning a type to the variable 'tuple_assignment_107408' (line 495)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 495, 12), 'tuple_assignment_107408', float_107782)
        
        # Assigning a Num to a Name (line 495):
        float_107783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 495, 26), 'float')
        # Assigning a type to the variable 'tuple_assignment_107409' (line 495)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 495, 12), 'tuple_assignment_107409', float_107783)
        
        # Assigning a Name to a Name (line 495):
        # Getting the type of 'tuple_assignment_107408' (line 495)
        tuple_assignment_107408_107784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 12), 'tuple_assignment_107408')
        # Assigning a type to the variable 'mn' (line 495)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 495, 12), 'mn', tuple_assignment_107408_107784)
        
        # Assigning a Name to a Name (line 495):
        # Getting the type of 'tuple_assignment_107409' (line 495)
        tuple_assignment_107409_107785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 12), 'tuple_assignment_107409')
        # Assigning a type to the variable 'mx' (line 495)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 495, 16), 'mx', tuple_assignment_107409_107785)
        # SSA branch for the else part of an if statement (line 493)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Tuple to a Tuple (line 497):
        
        # Assigning a BinOp to a Name (line 497):
        
        # Call to min(...): (line 497)
        # Processing the call keyword arguments (line 497)
        kwargs_107788 = {}
        # Getting the type of 'a' (line 497)
        a_107786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 21), 'a', False)
        # Obtaining the member 'min' of a type (line 497)
        min_107787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 497, 21), a_107786, 'min')
        # Calling min(args, kwargs) (line 497)
        min_call_result_107789 = invoke(stypy.reporting.localization.Localization(__file__, 497, 21), min_107787, *[], **kwargs_107788)
        
        float_107790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 497, 31), 'float')
        # Applying the binary operator '+' (line 497)
        result_add_107791 = python_operator(stypy.reporting.localization.Localization(__file__, 497, 21), '+', min_call_result_107789, float_107790)
        
        # Assigning a type to the variable 'tuple_assignment_107410' (line 497)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 497, 12), 'tuple_assignment_107410', result_add_107791)
        
        # Assigning a BinOp to a Name (line 497):
        
        # Call to max(...): (line 497)
        # Processing the call keyword arguments (line 497)
        kwargs_107794 = {}
        # Getting the type of 'a' (line 497)
        a_107792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 36), 'a', False)
        # Obtaining the member 'max' of a type (line 497)
        max_107793 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 497, 36), a_107792, 'max')
        # Calling max(args, kwargs) (line 497)
        max_call_result_107795 = invoke(stypy.reporting.localization.Localization(__file__, 497, 36), max_107793, *[], **kwargs_107794)
        
        float_107796 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 497, 46), 'float')
        # Applying the binary operator '+' (line 497)
        result_add_107797 = python_operator(stypy.reporting.localization.Localization(__file__, 497, 36), '+', max_call_result_107795, float_107796)
        
        # Assigning a type to the variable 'tuple_assignment_107411' (line 497)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 497, 12), 'tuple_assignment_107411', result_add_107797)
        
        # Assigning a Name to a Name (line 497):
        # Getting the type of 'tuple_assignment_107410' (line 497)
        tuple_assignment_107410_107798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 12), 'tuple_assignment_107410')
        # Assigning a type to the variable 'mn' (line 497)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 497, 12), 'mn', tuple_assignment_107410_107798)
        
        # Assigning a Name to a Name (line 497):
        # Getting the type of 'tuple_assignment_107411' (line 497)
        tuple_assignment_107411_107799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 12), 'tuple_assignment_107411')
        # Assigning a type to the variable 'mx' (line 497)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 497, 16), 'mx', tuple_assignment_107411_107799)
        # SSA join for if statement (line 493)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_107776:
            # Runtime conditional SSA for else branch (line 492)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_107775) or more_types_in_union_107776):
        
        # Assigning a ListComp to a Tuple (line 499):
        
        # Assigning a Subscript to a Name (line 499):
        
        # Obtaining the type of the subscript
        int_107800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 499, 8), 'int')
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'range' (line 499)
        range_107804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 37), 'range')
        comprehension_107805 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 499, 18), range_107804)
        # Assigning a type to the variable 'mi' (line 499)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 499, 18), 'mi', comprehension_107805)
        # Getting the type of 'mi' (line 499)
        mi_107801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 18), 'mi')
        float_107802 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 499, 23), 'float')
        # Applying the binary operator '+' (line 499)
        result_add_107803 = python_operator(stypy.reporting.localization.Localization(__file__, 499, 18), '+', mi_107801, float_107802)
        
        list_107806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 499, 18), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 499, 18), list_107806, result_add_107803)
        # Obtaining the member '__getitem__' of a type (line 499)
        getitem___107807 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 499, 8), list_107806, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 499)
        subscript_call_result_107808 = invoke(stypy.reporting.localization.Localization(__file__, 499, 8), getitem___107807, int_107800)
        
        # Assigning a type to the variable 'tuple_var_assignment_107412' (line 499)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 499, 8), 'tuple_var_assignment_107412', subscript_call_result_107808)
        
        # Assigning a Subscript to a Name (line 499):
        
        # Obtaining the type of the subscript
        int_107809 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 499, 8), 'int')
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'range' (line 499)
        range_107813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 37), 'range')
        comprehension_107814 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 499, 18), range_107813)
        # Assigning a type to the variable 'mi' (line 499)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 499, 18), 'mi', comprehension_107814)
        # Getting the type of 'mi' (line 499)
        mi_107810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 18), 'mi')
        float_107811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 499, 23), 'float')
        # Applying the binary operator '+' (line 499)
        result_add_107812 = python_operator(stypy.reporting.localization.Localization(__file__, 499, 18), '+', mi_107810, float_107811)
        
        list_107815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 499, 18), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 499, 18), list_107815, result_add_107812)
        # Obtaining the member '__getitem__' of a type (line 499)
        getitem___107816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 499, 8), list_107815, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 499)
        subscript_call_result_107817 = invoke(stypy.reporting.localization.Localization(__file__, 499, 8), getitem___107816, int_107809)
        
        # Assigning a type to the variable 'tuple_var_assignment_107413' (line 499)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 499, 8), 'tuple_var_assignment_107413', subscript_call_result_107817)
        
        # Assigning a Name to a Name (line 499):
        # Getting the type of 'tuple_var_assignment_107412' (line 499)
        tuple_var_assignment_107412_107818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 8), 'tuple_var_assignment_107412')
        # Assigning a type to the variable 'mn' (line 499)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 499, 8), 'mn', tuple_var_assignment_107412_107818)
        
        # Assigning a Name to a Name (line 499):
        # Getting the type of 'tuple_var_assignment_107413' (line 499)
        tuple_var_assignment_107413_107819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 8), 'tuple_var_assignment_107413')
        # Assigning a type to the variable 'mx' (line 499)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 499, 12), 'mx', tuple_var_assignment_107413_107819)

        if (may_be_107775 and more_types_in_union_107776):
            # SSA join for if statement (line 492)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Getting the type of 'mn' (line 500)
    mn_107820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 7), 'mn')
    # Getting the type of 'mx' (line 500)
    mx_107821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 12), 'mx')
    # Applying the binary operator '>' (line 500)
    result_gt_107822 = python_operator(stypy.reporting.localization.Localization(__file__, 500, 7), '>', mn_107820, mx_107821)
    
    # Testing the type of an if condition (line 500)
    if_condition_107823 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 500, 4), result_gt_107822)
    # Assigning a type to the variable 'if_condition_107823' (line 500)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 500, 4), 'if_condition_107823', if_condition_107823)
    # SSA begins for if statement (line 500)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 501)
    # Processing the call arguments (line 501)
    str_107825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 502, 12), 'str', 'max must be larger than min in range parameter.')
    # Processing the call keyword arguments (line 501)
    kwargs_107826 = {}
    # Getting the type of 'ValueError' (line 501)
    ValueError_107824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 501, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 501)
    ValueError_call_result_107827 = invoke(stypy.reporting.localization.Localization(__file__, 501, 14), ValueError_107824, *[str_107825], **kwargs_107826)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 501, 8), ValueError_call_result_107827, 'raise parameter', BaseException)
    # SSA join for if statement (line 500)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to all(...): (line 503)
    # Processing the call arguments (line 503)
    
    # Call to isfinite(...): (line 503)
    # Processing the call arguments (line 503)
    
    # Obtaining an instance of the builtin type 'list' (line 503)
    list_107832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 503, 30), 'list')
    # Adding type elements to the builtin type 'list' instance (line 503)
    # Adding element type (line 503)
    # Getting the type of 'mn' (line 503)
    mn_107833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 31), 'mn', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 503, 30), list_107832, mn_107833)
    # Adding element type (line 503)
    # Getting the type of 'mx' (line 503)
    mx_107834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 35), 'mx', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 503, 30), list_107832, mx_107834)
    
    # Processing the call keyword arguments (line 503)
    kwargs_107835 = {}
    # Getting the type of 'np' (line 503)
    np_107830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 18), 'np', False)
    # Obtaining the member 'isfinite' of a type (line 503)
    isfinite_107831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 503, 18), np_107830, 'isfinite')
    # Calling isfinite(args, kwargs) (line 503)
    isfinite_call_result_107836 = invoke(stypy.reporting.localization.Localization(__file__, 503, 18), isfinite_107831, *[list_107832], **kwargs_107835)
    
    # Processing the call keyword arguments (line 503)
    kwargs_107837 = {}
    # Getting the type of 'np' (line 503)
    np_107828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 11), 'np', False)
    # Obtaining the member 'all' of a type (line 503)
    all_107829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 503, 11), np_107828, 'all')
    # Calling all(args, kwargs) (line 503)
    all_call_result_107838 = invoke(stypy.reporting.localization.Localization(__file__, 503, 11), all_107829, *[isfinite_call_result_107836], **kwargs_107837)
    
    # Applying the 'not' unary operator (line 503)
    result_not__107839 = python_operator(stypy.reporting.localization.Localization(__file__, 503, 7), 'not', all_call_result_107838)
    
    # Testing the type of an if condition (line 503)
    if_condition_107840 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 503, 4), result_not__107839)
    # Assigning a type to the variable 'if_condition_107840' (line 503)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 503, 4), 'if_condition_107840', if_condition_107840)
    # SSA begins for if statement (line 503)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 504)
    # Processing the call arguments (line 504)
    str_107842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 505, 12), 'str', 'range parameter must be finite.')
    # Processing the call keyword arguments (line 504)
    kwargs_107843 = {}
    # Getting the type of 'ValueError' (line 504)
    ValueError_107841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 504, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 504)
    ValueError_call_result_107844 = invoke(stypy.reporting.localization.Localization(__file__, 504, 14), ValueError_107841, *[str_107842], **kwargs_107843)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 504, 8), ValueError_call_result_107844, 'raise parameter', BaseException)
    # SSA join for if statement (line 503)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'mn' (line 506)
    mn_107845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 7), 'mn')
    # Getting the type of 'mx' (line 506)
    mx_107846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 13), 'mx')
    # Applying the binary operator '==' (line 506)
    result_eq_107847 = python_operator(stypy.reporting.localization.Localization(__file__, 506, 7), '==', mn_107845, mx_107846)
    
    # Testing the type of an if condition (line 506)
    if_condition_107848 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 506, 4), result_eq_107847)
    # Assigning a type to the variable 'if_condition_107848' (line 506)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 506, 4), 'if_condition_107848', if_condition_107848)
    # SSA begins for if statement (line 506)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'mn' (line 507)
    mn_107849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 507, 8), 'mn')
    float_107850 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 507, 14), 'float')
    # Applying the binary operator '-=' (line 507)
    result_isub_107851 = python_operator(stypy.reporting.localization.Localization(__file__, 507, 8), '-=', mn_107849, float_107850)
    # Assigning a type to the variable 'mn' (line 507)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 507, 8), 'mn', result_isub_107851)
    
    
    # Getting the type of 'mx' (line 508)
    mx_107852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 8), 'mx')
    float_107853 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 508, 14), 'float')
    # Applying the binary operator '+=' (line 508)
    result_iadd_107854 = python_operator(stypy.reporting.localization.Localization(__file__, 508, 8), '+=', mx_107852, float_107853)
    # Assigning a type to the variable 'mx' (line 508)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 508, 8), 'mx', result_iadd_107854)
    
    # SSA join for if statement (line 506)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 510)
    # Getting the type of 'basestring' (line 510)
    basestring_107855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 24), 'basestring')
    # Getting the type of 'bins' (line 510)
    bins_107856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 18), 'bins')
    
    (may_be_107857, more_types_in_union_107858) = may_be_subtype(basestring_107855, bins_107856)

    if may_be_107857:

        if more_types_in_union_107858:
            # Runtime conditional SSA (line 510)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'bins' (line 510)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 510, 4), 'bins', remove_not_subtype_from_union(bins_107856, basestring))
        
        
        # Getting the type of 'bins' (line 513)
        bins_107859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 11), 'bins')
        # Getting the type of '_hist_bin_selectors' (line 513)
        _hist_bin_selectors_107860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 23), '_hist_bin_selectors')
        # Applying the binary operator 'notin' (line 513)
        result_contains_107861 = python_operator(stypy.reporting.localization.Localization(__file__, 513, 11), 'notin', bins_107859, _hist_bin_selectors_107860)
        
        # Testing the type of an if condition (line 513)
        if_condition_107862 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 513, 8), result_contains_107861)
        # Assigning a type to the variable 'if_condition_107862' (line 513)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 513, 8), 'if_condition_107862', if_condition_107862)
        # SSA begins for if statement (line 513)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 514)
        # Processing the call arguments (line 514)
        
        # Call to format(...): (line 514)
        # Processing the call arguments (line 514)
        # Getting the type of 'bins' (line 514)
        bins_107866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 73), 'bins', False)
        # Processing the call keyword arguments (line 514)
        kwargs_107867 = {}
        str_107864 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 514, 29), 'str', '{0} not a valid estimator for bins')
        # Obtaining the member 'format' of a type (line 514)
        format_107865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 514, 29), str_107864, 'format')
        # Calling format(args, kwargs) (line 514)
        format_call_result_107868 = invoke(stypy.reporting.localization.Localization(__file__, 514, 29), format_107865, *[bins_107866], **kwargs_107867)
        
        # Processing the call keyword arguments (line 514)
        kwargs_107869 = {}
        # Getting the type of 'ValueError' (line 514)
        ValueError_107863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 514)
        ValueError_call_result_107870 = invoke(stypy.reporting.localization.Localization(__file__, 514, 18), ValueError_107863, *[format_call_result_107868], **kwargs_107869)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 514, 12), ValueError_call_result_107870, 'raise parameter', BaseException)
        # SSA join for if statement (line 513)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 515)
        # Getting the type of 'weights' (line 515)
        weights_107871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 8), 'weights')
        # Getting the type of 'None' (line 515)
        None_107872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 26), 'None')
        
        (may_be_107873, more_types_in_union_107874) = may_not_be_none(weights_107871, None_107872)

        if may_be_107873:

            if more_types_in_union_107874:
                # Runtime conditional SSA (line 515)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to TypeError(...): (line 516)
            # Processing the call arguments (line 516)
            str_107876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 516, 28), 'str', 'Automated estimation of the number of bins is not supported for weighted data')
            # Processing the call keyword arguments (line 516)
            kwargs_107877 = {}
            # Getting the type of 'TypeError' (line 516)
            TypeError_107875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 18), 'TypeError', False)
            # Calling TypeError(args, kwargs) (line 516)
            TypeError_call_result_107878 = invoke(stypy.reporting.localization.Localization(__file__, 516, 18), TypeError_107875, *[str_107876], **kwargs_107877)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 516, 12), TypeError_call_result_107878, 'raise parameter', BaseException)

            if more_types_in_union_107874:
                # SSA join for if statement (line 515)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Name (line 519):
        
        # Assigning a Name to a Name (line 519):
        # Getting the type of 'a' (line 519)
        a_107879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 12), 'a')
        # Assigning a type to the variable 'b' (line 519)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 519, 8), 'b', a_107879)
        
        # Type idiom detected: calculating its left and rigth part (line 521)
        # Getting the type of 'range' (line 521)
        range_107880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 8), 'range')
        # Getting the type of 'None' (line 521)
        None_107881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 24), 'None')
        
        (may_be_107882, more_types_in_union_107883) = may_not_be_none(range_107880, None_107881)

        if may_be_107882:

            if more_types_in_union_107883:
                # Runtime conditional SSA (line 521)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Compare to a Name (line 522):
            
            # Assigning a Compare to a Name (line 522):
            
            # Getting the type of 'a' (line 522)
            a_107884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 20), 'a')
            # Getting the type of 'mn' (line 522)
            mn_107885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 25), 'mn')
            # Applying the binary operator '>=' (line 522)
            result_ge_107886 = python_operator(stypy.reporting.localization.Localization(__file__, 522, 20), '>=', a_107884, mn_107885)
            
            # Assigning a type to the variable 'keep' (line 522)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 522, 12), 'keep', result_ge_107886)
            
            # Getting the type of 'keep' (line 523)
            keep_107887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 12), 'keep')
            
            # Getting the type of 'a' (line 523)
            a_107888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 21), 'a')
            # Getting the type of 'mx' (line 523)
            mx_107889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 26), 'mx')
            # Applying the binary operator '<=' (line 523)
            result_le_107890 = python_operator(stypy.reporting.localization.Localization(__file__, 523, 21), '<=', a_107888, mx_107889)
            
            # Applying the binary operator '&=' (line 523)
            result_iand_107891 = python_operator(stypy.reporting.localization.Localization(__file__, 523, 12), '&=', keep_107887, result_le_107890)
            # Assigning a type to the variable 'keep' (line 523)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 523, 12), 'keep', result_iand_107891)
            
            
            
            
            # Call to reduce(...): (line 524)
            # Processing the call arguments (line 524)
            # Getting the type of 'keep' (line 524)
            keep_107895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 41), 'keep', False)
            # Processing the call keyword arguments (line 524)
            kwargs_107896 = {}
            # Getting the type of 'np' (line 524)
            np_107892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 19), 'np', False)
            # Obtaining the member 'logical_and' of a type (line 524)
            logical_and_107893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 524, 19), np_107892, 'logical_and')
            # Obtaining the member 'reduce' of a type (line 524)
            reduce_107894 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 524, 19), logical_and_107893, 'reduce')
            # Calling reduce(args, kwargs) (line 524)
            reduce_call_result_107897 = invoke(stypy.reporting.localization.Localization(__file__, 524, 19), reduce_107894, *[keep_107895], **kwargs_107896)
            
            # Applying the 'not' unary operator (line 524)
            result_not__107898 = python_operator(stypy.reporting.localization.Localization(__file__, 524, 15), 'not', reduce_call_result_107897)
            
            # Testing the type of an if condition (line 524)
            if_condition_107899 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 524, 12), result_not__107898)
            # Assigning a type to the variable 'if_condition_107899' (line 524)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 524, 12), 'if_condition_107899', if_condition_107899)
            # SSA begins for if statement (line 524)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Subscript to a Name (line 525):
            
            # Assigning a Subscript to a Name (line 525):
            
            # Obtaining the type of the subscript
            # Getting the type of 'keep' (line 525)
            keep_107900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 22), 'keep')
            # Getting the type of 'a' (line 525)
            a_107901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 20), 'a')
            # Obtaining the member '__getitem__' of a type (line 525)
            getitem___107902 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 525, 20), a_107901, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 525)
            subscript_call_result_107903 = invoke(stypy.reporting.localization.Localization(__file__, 525, 20), getitem___107902, keep_107900)
            
            # Assigning a type to the variable 'b' (line 525)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 525, 16), 'b', subscript_call_result_107903)
            # SSA join for if statement (line 524)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_107883:
                # SSA join for if statement (line 521)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Getting the type of 'b' (line 527)
        b_107904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 11), 'b')
        # Obtaining the member 'size' of a type (line 527)
        size_107905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 527, 11), b_107904, 'size')
        int_107906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 527, 21), 'int')
        # Applying the binary operator '==' (line 527)
        result_eq_107907 = python_operator(stypy.reporting.localization.Localization(__file__, 527, 11), '==', size_107905, int_107906)
        
        # Testing the type of an if condition (line 527)
        if_condition_107908 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 527, 8), result_eq_107907)
        # Assigning a type to the variable 'if_condition_107908' (line 527)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 527, 8), 'if_condition_107908', if_condition_107908)
        # SSA begins for if statement (line 527)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 528):
        
        # Assigning a Num to a Name (line 528):
        int_107909 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 528, 19), 'int')
        # Assigning a type to the variable 'bins' (line 528)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 528, 12), 'bins', int_107909)
        # SSA branch for the else part of an if statement (line 527)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 531):
        
        # Assigning a Call to a Name (line 531):
        
        # Call to (...): (line 531)
        # Processing the call arguments (line 531)
        # Getting the type of 'b' (line 531)
        b_107914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 46), 'b', False)
        # Processing the call keyword arguments (line 531)
        kwargs_107915 = {}
        
        # Obtaining the type of the subscript
        # Getting the type of 'bins' (line 531)
        bins_107910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 40), 'bins', False)
        # Getting the type of '_hist_bin_selectors' (line 531)
        _hist_bin_selectors_107911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 20), '_hist_bin_selectors', False)
        # Obtaining the member '__getitem__' of a type (line 531)
        getitem___107912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 531, 20), _hist_bin_selectors_107911, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 531)
        subscript_call_result_107913 = invoke(stypy.reporting.localization.Localization(__file__, 531, 20), getitem___107912, bins_107910)
        
        # Calling (args, kwargs) (line 531)
        _call_result_107916 = invoke(stypy.reporting.localization.Localization(__file__, 531, 20), subscript_call_result_107913, *[b_107914], **kwargs_107915)
        
        # Assigning a type to the variable 'width' (line 531)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 531, 12), 'width', _call_result_107916)
        
        # Getting the type of 'width' (line 532)
        width_107917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 15), 'width')
        # Testing the type of an if condition (line 532)
        if_condition_107918 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 532, 12), width_107917)
        # Assigning a type to the variable 'if_condition_107918' (line 532)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 532, 12), 'if_condition_107918', if_condition_107918)
        # SSA begins for if statement (line 532)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 533):
        
        # Assigning a Call to a Name (line 533):
        
        # Call to int(...): (line 533)
        # Processing the call arguments (line 533)
        
        # Call to ceil(...): (line 533)
        # Processing the call arguments (line 533)
        # Getting the type of 'mx' (line 533)
        mx_107922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 36), 'mx', False)
        # Getting the type of 'mn' (line 533)
        mn_107923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 41), 'mn', False)
        # Applying the binary operator '-' (line 533)
        result_sub_107924 = python_operator(stypy.reporting.localization.Localization(__file__, 533, 36), '-', mx_107922, mn_107923)
        
        # Getting the type of 'width' (line 533)
        width_107925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 47), 'width', False)
        # Applying the binary operator 'div' (line 533)
        result_div_107926 = python_operator(stypy.reporting.localization.Localization(__file__, 533, 35), 'div', result_sub_107924, width_107925)
        
        # Processing the call keyword arguments (line 533)
        kwargs_107927 = {}
        # Getting the type of 'np' (line 533)
        np_107920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 27), 'np', False)
        # Obtaining the member 'ceil' of a type (line 533)
        ceil_107921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 533, 27), np_107920, 'ceil')
        # Calling ceil(args, kwargs) (line 533)
        ceil_call_result_107928 = invoke(stypy.reporting.localization.Localization(__file__, 533, 27), ceil_107921, *[result_div_107926], **kwargs_107927)
        
        # Processing the call keyword arguments (line 533)
        kwargs_107929 = {}
        # Getting the type of 'int' (line 533)
        int_107919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 23), 'int', False)
        # Calling int(args, kwargs) (line 533)
        int_call_result_107930 = invoke(stypy.reporting.localization.Localization(__file__, 533, 23), int_107919, *[ceil_call_result_107928], **kwargs_107929)
        
        # Assigning a type to the variable 'bins' (line 533)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 533, 16), 'bins', int_call_result_107930)
        # SSA branch for the else part of an if statement (line 532)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Num to a Name (line 537):
        
        # Assigning a Num to a Name (line 537):
        int_107931 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 537, 23), 'int')
        # Assigning a type to the variable 'bins' (line 537)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 537, 16), 'bins', int_107931)
        # SSA join for if statement (line 532)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 527)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_107858:
            # SSA join for if statement (line 510)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 540)
    # Getting the type of 'weights' (line 540)
    weights_107932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 7), 'weights')
    # Getting the type of 'None' (line 540)
    None_107933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 18), 'None')
    
    (may_be_107934, more_types_in_union_107935) = may_be_none(weights_107932, None_107933)

    if may_be_107934:

        if more_types_in_union_107935:
            # Runtime conditional SSA (line 540)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 541):
        
        # Assigning a Call to a Name (line 541):
        
        # Call to dtype(...): (line 541)
        # Processing the call arguments (line 541)
        # Getting the type of 'np' (line 541)
        np_107938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 25), 'np', False)
        # Obtaining the member 'intp' of a type (line 541)
        intp_107939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 541, 25), np_107938, 'intp')
        # Processing the call keyword arguments (line 541)
        kwargs_107940 = {}
        # Getting the type of 'np' (line 541)
        np_107936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 16), 'np', False)
        # Obtaining the member 'dtype' of a type (line 541)
        dtype_107937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 541, 16), np_107936, 'dtype')
        # Calling dtype(args, kwargs) (line 541)
        dtype_call_result_107941 = invoke(stypy.reporting.localization.Localization(__file__, 541, 16), dtype_107937, *[intp_107939], **kwargs_107940)
        
        # Assigning a type to the variable 'ntype' (line 541)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 541, 8), 'ntype', dtype_call_result_107941)

        if more_types_in_union_107935:
            # Runtime conditional SSA for else branch (line 540)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_107934) or more_types_in_union_107935):
        
        # Assigning a Attribute to a Name (line 543):
        
        # Assigning a Attribute to a Name (line 543):
        # Getting the type of 'weights' (line 543)
        weights_107942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 16), 'weights')
        # Obtaining the member 'dtype' of a type (line 543)
        dtype_107943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 543, 16), weights_107942, 'dtype')
        # Assigning a type to the variable 'ntype' (line 543)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 543, 8), 'ntype', dtype_107943)

        if (may_be_107934 and more_types_in_union_107935):
            # SSA join for if statement (line 540)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Num to a Name (line 547):
    
    # Assigning a Num to a Name (line 547):
    int_107944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 547, 12), 'int')
    # Assigning a type to the variable 'BLOCK' (line 547)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 547, 4), 'BLOCK', int_107944)
    
    
    
    # Call to iterable(...): (line 549)
    # Processing the call arguments (line 549)
    # Getting the type of 'bins' (line 549)
    bins_107946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 20), 'bins', False)
    # Processing the call keyword arguments (line 549)
    kwargs_107947 = {}
    # Getting the type of 'iterable' (line 549)
    iterable_107945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 11), 'iterable', False)
    # Calling iterable(args, kwargs) (line 549)
    iterable_call_result_107948 = invoke(stypy.reporting.localization.Localization(__file__, 549, 11), iterable_107945, *[bins_107946], **kwargs_107947)
    
    # Applying the 'not' unary operator (line 549)
    result_not__107949 = python_operator(stypy.reporting.localization.Localization(__file__, 549, 7), 'not', iterable_call_result_107948)
    
    # Testing the type of an if condition (line 549)
    if_condition_107950 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 549, 4), result_not__107949)
    # Assigning a type to the variable 'if_condition_107950' (line 549)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 549, 4), 'if_condition_107950', if_condition_107950)
    # SSA begins for if statement (line 549)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Evaluating a boolean operation
    
    # Call to isscalar(...): (line 550)
    # Processing the call arguments (line 550)
    # Getting the type of 'bins' (line 550)
    bins_107953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 23), 'bins', False)
    # Processing the call keyword arguments (line 550)
    kwargs_107954 = {}
    # Getting the type of 'np' (line 550)
    np_107951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 11), 'np', False)
    # Obtaining the member 'isscalar' of a type (line 550)
    isscalar_107952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 550, 11), np_107951, 'isscalar')
    # Calling isscalar(args, kwargs) (line 550)
    isscalar_call_result_107955 = invoke(stypy.reporting.localization.Localization(__file__, 550, 11), isscalar_107952, *[bins_107953], **kwargs_107954)
    
    
    # Getting the type of 'bins' (line 550)
    bins_107956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 33), 'bins')
    int_107957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 550, 40), 'int')
    # Applying the binary operator '<' (line 550)
    result_lt_107958 = python_operator(stypy.reporting.localization.Localization(__file__, 550, 33), '<', bins_107956, int_107957)
    
    # Applying the binary operator 'and' (line 550)
    result_and_keyword_107959 = python_operator(stypy.reporting.localization.Localization(__file__, 550, 11), 'and', isscalar_call_result_107955, result_lt_107958)
    
    # Testing the type of an if condition (line 550)
    if_condition_107960 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 550, 8), result_and_keyword_107959)
    # Assigning a type to the variable 'if_condition_107960' (line 550)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 550, 8), 'if_condition_107960', if_condition_107960)
    # SSA begins for if statement (line 550)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 551)
    # Processing the call arguments (line 551)
    str_107962 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 552, 16), 'str', '`bins` should be a positive integer.')
    # Processing the call keyword arguments (line 551)
    kwargs_107963 = {}
    # Getting the type of 'ValueError' (line 551)
    ValueError_107961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 551)
    ValueError_call_result_107964 = invoke(stypy.reporting.localization.Localization(__file__, 551, 18), ValueError_107961, *[str_107962], **kwargs_107963)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 551, 12), ValueError_call_result_107964, 'raise parameter', BaseException)
    # SSA join for if statement (line 550)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'weights' (line 555)
    weights_107965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 11), 'weights')
    # Getting the type of 'None' (line 555)
    None_107966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 26), 'None')
    # Applying the binary operator 'isnot' (line 555)
    result_is_not_107967 = python_operator(stypy.reporting.localization.Localization(__file__, 555, 11), 'isnot', weights_107965, None_107966)
    
    
    
    # Evaluating a boolean operation
    
    # Call to can_cast(...): (line 555)
    # Processing the call arguments (line 555)
    # Getting the type of 'weights' (line 555)
    weights_107970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 52), 'weights', False)
    # Obtaining the member 'dtype' of a type (line 555)
    dtype_107971 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 555, 52), weights_107970, 'dtype')
    # Getting the type of 'np' (line 555)
    np_107972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 67), 'np', False)
    # Obtaining the member 'double' of a type (line 555)
    double_107973 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 555, 67), np_107972, 'double')
    # Processing the call keyword arguments (line 555)
    kwargs_107974 = {}
    # Getting the type of 'np' (line 555)
    np_107968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 40), 'np', False)
    # Obtaining the member 'can_cast' of a type (line 555)
    can_cast_107969 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 555, 40), np_107968, 'can_cast')
    # Calling can_cast(args, kwargs) (line 555)
    can_cast_call_result_107975 = invoke(stypy.reporting.localization.Localization(__file__, 555, 40), can_cast_107969, *[dtype_107971, double_107973], **kwargs_107974)
    
    
    # Call to can_cast(...): (line 556)
    # Processing the call arguments (line 556)
    # Getting the type of 'weights' (line 556)
    weights_107978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 52), 'weights', False)
    # Obtaining the member 'dtype' of a type (line 556)
    dtype_107979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 556, 52), weights_107978, 'dtype')
    # Getting the type of 'np' (line 556)
    np_107980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 67), 'np', False)
    # Obtaining the member 'complex' of a type (line 556)
    complex_107981 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 556, 67), np_107980, 'complex')
    # Processing the call keyword arguments (line 556)
    kwargs_107982 = {}
    # Getting the type of 'np' (line 556)
    np_107976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 40), 'np', False)
    # Obtaining the member 'can_cast' of a type (line 556)
    can_cast_107977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 556, 40), np_107976, 'can_cast')
    # Calling can_cast(args, kwargs) (line 556)
    can_cast_call_result_107983 = invoke(stypy.reporting.localization.Localization(__file__, 556, 40), can_cast_107977, *[dtype_107979, complex_107981], **kwargs_107982)
    
    # Applying the binary operator 'or' (line 555)
    result_or_keyword_107984 = python_operator(stypy.reporting.localization.Localization(__file__, 555, 40), 'or', can_cast_call_result_107975, can_cast_call_result_107983)
    
    # Applying the 'not' unary operator (line 555)
    result_not__107985 = python_operator(stypy.reporting.localization.Localization(__file__, 555, 35), 'not', result_or_keyword_107984)
    
    # Applying the binary operator 'and' (line 555)
    result_and_keyword_107986 = python_operator(stypy.reporting.localization.Localization(__file__, 555, 11), 'and', result_is_not_107967, result_not__107985)
    
    # Testing the type of an if condition (line 555)
    if_condition_107987 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 555, 8), result_and_keyword_107986)
    # Assigning a type to the variable 'if_condition_107987' (line 555)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 555, 8), 'if_condition_107987', if_condition_107987)
    # SSA begins for if statement (line 555)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 557):
    
    # Assigning a Call to a Name (line 557):
    
    # Call to linspace(...): (line 557)
    # Processing the call arguments (line 557)
    # Getting the type of 'mn' (line 557)
    mn_107989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 28), 'mn', False)
    # Getting the type of 'mx' (line 557)
    mx_107990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 32), 'mx', False)
    # Getting the type of 'bins' (line 557)
    bins_107991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 36), 'bins', False)
    int_107992 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 557, 43), 'int')
    # Applying the binary operator '+' (line 557)
    result_add_107993 = python_operator(stypy.reporting.localization.Localization(__file__, 557, 36), '+', bins_107991, int_107992)
    
    # Processing the call keyword arguments (line 557)
    # Getting the type of 'True' (line 557)
    True_107994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 55), 'True', False)
    keyword_107995 = True_107994
    kwargs_107996 = {'endpoint': keyword_107995}
    # Getting the type of 'linspace' (line 557)
    linspace_107988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 19), 'linspace', False)
    # Calling linspace(args, kwargs) (line 557)
    linspace_call_result_107997 = invoke(stypy.reporting.localization.Localization(__file__, 557, 19), linspace_107988, *[mn_107989, mx_107990, result_add_107993], **kwargs_107996)
    
    # Assigning a type to the variable 'bins' (line 557)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 557, 12), 'bins', linspace_call_result_107997)
    # SSA join for if statement (line 555)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 549)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to iterable(...): (line 559)
    # Processing the call arguments (line 559)
    # Getting the type of 'bins' (line 559)
    bins_107999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 20), 'bins', False)
    # Processing the call keyword arguments (line 559)
    kwargs_108000 = {}
    # Getting the type of 'iterable' (line 559)
    iterable_107998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 11), 'iterable', False)
    # Calling iterable(args, kwargs) (line 559)
    iterable_call_result_108001 = invoke(stypy.reporting.localization.Localization(__file__, 559, 11), iterable_107998, *[bins_107999], **kwargs_108000)
    
    # Applying the 'not' unary operator (line 559)
    result_not__108002 = python_operator(stypy.reporting.localization.Localization(__file__, 559, 7), 'not', iterable_call_result_108001)
    
    # Testing the type of an if condition (line 559)
    if_condition_108003 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 559, 4), result_not__108002)
    # Assigning a type to the variable 'if_condition_108003' (line 559)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 559, 4), 'if_condition_108003', if_condition_108003)
    # SSA begins for if statement (line 559)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 564):
    
    # Assigning a Call to a Name (line 564):
    
    # Call to zeros(...): (line 564)
    # Processing the call arguments (line 564)
    # Getting the type of 'bins' (line 564)
    bins_108006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 21), 'bins', False)
    # Getting the type of 'ntype' (line 564)
    ntype_108007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 27), 'ntype', False)
    # Processing the call keyword arguments (line 564)
    kwargs_108008 = {}
    # Getting the type of 'np' (line 564)
    np_108004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 12), 'np', False)
    # Obtaining the member 'zeros' of a type (line 564)
    zeros_108005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 564, 12), np_108004, 'zeros')
    # Calling zeros(args, kwargs) (line 564)
    zeros_call_result_108009 = invoke(stypy.reporting.localization.Localization(__file__, 564, 12), zeros_108005, *[bins_108006, ntype_108007], **kwargs_108008)
    
    # Assigning a type to the variable 'n' (line 564)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 564, 8), 'n', zeros_call_result_108009)
    
    # Assigning a BinOp to a Name (line 566):
    
    # Assigning a BinOp to a Name (line 566):
    # Getting the type of 'bins' (line 566)
    bins_108010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 15), 'bins')
    # Getting the type of 'mx' (line 566)
    mx_108011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 23), 'mx')
    # Getting the type of 'mn' (line 566)
    mn_108012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 28), 'mn')
    # Applying the binary operator '-' (line 566)
    result_sub_108013 = python_operator(stypy.reporting.localization.Localization(__file__, 566, 23), '-', mx_108011, mn_108012)
    
    # Applying the binary operator 'div' (line 566)
    result_div_108014 = python_operator(stypy.reporting.localization.Localization(__file__, 566, 15), 'div', bins_108010, result_sub_108013)
    
    # Assigning a type to the variable 'norm' (line 566)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 566, 8), 'norm', result_div_108014)
    
    
    # Call to arange(...): (line 572)
    # Processing the call arguments (line 572)
    int_108016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 572, 24), 'int')
    
    # Call to len(...): (line 572)
    # Processing the call arguments (line 572)
    # Getting the type of 'a' (line 572)
    a_108018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 31), 'a', False)
    # Processing the call keyword arguments (line 572)
    kwargs_108019 = {}
    # Getting the type of 'len' (line 572)
    len_108017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 27), 'len', False)
    # Calling len(args, kwargs) (line 572)
    len_call_result_108020 = invoke(stypy.reporting.localization.Localization(__file__, 572, 27), len_108017, *[a_108018], **kwargs_108019)
    
    # Getting the type of 'BLOCK' (line 572)
    BLOCK_108021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 35), 'BLOCK', False)
    # Processing the call keyword arguments (line 572)
    kwargs_108022 = {}
    # Getting the type of 'arange' (line 572)
    arange_108015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 17), 'arange', False)
    # Calling arange(args, kwargs) (line 572)
    arange_call_result_108023 = invoke(stypy.reporting.localization.Localization(__file__, 572, 17), arange_108015, *[int_108016, len_call_result_108020, BLOCK_108021], **kwargs_108022)
    
    # Testing the type of a for loop iterable (line 572)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 572, 8), arange_call_result_108023)
    # Getting the type of the for loop variable (line 572)
    for_loop_var_108024 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 572, 8), arange_call_result_108023)
    # Assigning a type to the variable 'i' (line 572)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 572, 8), 'i', for_loop_var_108024)
    # SSA begins for a for statement (line 572)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Subscript to a Name (line 573):
    
    # Assigning a Subscript to a Name (line 573):
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 573)
    i_108025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 22), 'i')
    # Getting the type of 'i' (line 573)
    i_108026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 24), 'i')
    # Getting the type of 'BLOCK' (line 573)
    BLOCK_108027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 26), 'BLOCK')
    # Applying the binary operator '+' (line 573)
    result_add_108028 = python_operator(stypy.reporting.localization.Localization(__file__, 573, 24), '+', i_108026, BLOCK_108027)
    
    slice_108029 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 573, 20), i_108025, result_add_108028, None)
    # Getting the type of 'a' (line 573)
    a_108030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 20), 'a')
    # Obtaining the member '__getitem__' of a type (line 573)
    getitem___108031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 573, 20), a_108030, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 573)
    subscript_call_result_108032 = invoke(stypy.reporting.localization.Localization(__file__, 573, 20), getitem___108031, slice_108029)
    
    # Assigning a type to the variable 'tmp_a' (line 573)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 573, 12), 'tmp_a', subscript_call_result_108032)
    
    # Type idiom detected: calculating its left and rigth part (line 574)
    # Getting the type of 'weights' (line 574)
    weights_108033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 15), 'weights')
    # Getting the type of 'None' (line 574)
    None_108034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 26), 'None')
    
    (may_be_108035, more_types_in_union_108036) = may_be_none(weights_108033, None_108034)

    if may_be_108035:

        if more_types_in_union_108036:
            # Runtime conditional SSA (line 574)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Name (line 575):
        
        # Assigning a Name to a Name (line 575):
        # Getting the type of 'None' (line 575)
        None_108037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 24), 'None')
        # Assigning a type to the variable 'tmp_w' (line 575)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 575, 16), 'tmp_w', None_108037)

        if more_types_in_union_108036:
            # Runtime conditional SSA for else branch (line 574)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_108035) or more_types_in_union_108036):
        
        # Assigning a Subscript to a Name (line 577):
        
        # Assigning a Subscript to a Name (line 577):
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 577)
        i_108038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 32), 'i')
        # Getting the type of 'i' (line 577)
        i_108039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 34), 'i')
        # Getting the type of 'BLOCK' (line 577)
        BLOCK_108040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 38), 'BLOCK')
        # Applying the binary operator '+' (line 577)
        result_add_108041 = python_operator(stypy.reporting.localization.Localization(__file__, 577, 34), '+', i_108039, BLOCK_108040)
        
        slice_108042 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 577, 24), i_108038, result_add_108041, None)
        # Getting the type of 'weights' (line 577)
        weights_108043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 24), 'weights')
        # Obtaining the member '__getitem__' of a type (line 577)
        getitem___108044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 577, 24), weights_108043, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 577)
        subscript_call_result_108045 = invoke(stypy.reporting.localization.Localization(__file__, 577, 24), getitem___108044, slice_108042)
        
        # Assigning a type to the variable 'tmp_w' (line 577)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 577, 16), 'tmp_w', subscript_call_result_108045)

        if (may_be_108035 and more_types_in_union_108036):
            # SSA join for if statement (line 574)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Compare to a Name (line 580):
    
    # Assigning a Compare to a Name (line 580):
    
    # Getting the type of 'tmp_a' (line 580)
    tmp_a_108046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 20), 'tmp_a')
    # Getting the type of 'mn' (line 580)
    mn_108047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 29), 'mn')
    # Applying the binary operator '>=' (line 580)
    result_ge_108048 = python_operator(stypy.reporting.localization.Localization(__file__, 580, 20), '>=', tmp_a_108046, mn_108047)
    
    # Assigning a type to the variable 'keep' (line 580)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 580, 12), 'keep', result_ge_108048)
    
    # Getting the type of 'keep' (line 581)
    keep_108049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 12), 'keep')
    
    # Getting the type of 'tmp_a' (line 581)
    tmp_a_108050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 21), 'tmp_a')
    # Getting the type of 'mx' (line 581)
    mx_108051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 30), 'mx')
    # Applying the binary operator '<=' (line 581)
    result_le_108052 = python_operator(stypy.reporting.localization.Localization(__file__, 581, 21), '<=', tmp_a_108050, mx_108051)
    
    # Applying the binary operator '&=' (line 581)
    result_iand_108053 = python_operator(stypy.reporting.localization.Localization(__file__, 581, 12), '&=', keep_108049, result_le_108052)
    # Assigning a type to the variable 'keep' (line 581)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 581, 12), 'keep', result_iand_108053)
    
    
    
    
    # Call to reduce(...): (line 582)
    # Processing the call arguments (line 582)
    # Getting the type of 'keep' (line 582)
    keep_108057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 41), 'keep', False)
    # Processing the call keyword arguments (line 582)
    kwargs_108058 = {}
    # Getting the type of 'np' (line 582)
    np_108054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 19), 'np', False)
    # Obtaining the member 'logical_and' of a type (line 582)
    logical_and_108055 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 582, 19), np_108054, 'logical_and')
    # Obtaining the member 'reduce' of a type (line 582)
    reduce_108056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 582, 19), logical_and_108055, 'reduce')
    # Calling reduce(args, kwargs) (line 582)
    reduce_call_result_108059 = invoke(stypy.reporting.localization.Localization(__file__, 582, 19), reduce_108056, *[keep_108057], **kwargs_108058)
    
    # Applying the 'not' unary operator (line 582)
    result_not__108060 = python_operator(stypy.reporting.localization.Localization(__file__, 582, 15), 'not', reduce_call_result_108059)
    
    # Testing the type of an if condition (line 582)
    if_condition_108061 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 582, 12), result_not__108060)
    # Assigning a type to the variable 'if_condition_108061' (line 582)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 582, 12), 'if_condition_108061', if_condition_108061)
    # SSA begins for if statement (line 582)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 583):
    
    # Assigning a Subscript to a Name (line 583):
    
    # Obtaining the type of the subscript
    # Getting the type of 'keep' (line 583)
    keep_108062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 583, 30), 'keep')
    # Getting the type of 'tmp_a' (line 583)
    tmp_a_108063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 583, 24), 'tmp_a')
    # Obtaining the member '__getitem__' of a type (line 583)
    getitem___108064 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 583, 24), tmp_a_108063, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 583)
    subscript_call_result_108065 = invoke(stypy.reporting.localization.Localization(__file__, 583, 24), getitem___108064, keep_108062)
    
    # Assigning a type to the variable 'tmp_a' (line 583)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 583, 16), 'tmp_a', subscript_call_result_108065)
    
    # Type idiom detected: calculating its left and rigth part (line 584)
    # Getting the type of 'tmp_w' (line 584)
    tmp_w_108066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 16), 'tmp_w')
    # Getting the type of 'None' (line 584)
    None_108067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 32), 'None')
    
    (may_be_108068, more_types_in_union_108069) = may_not_be_none(tmp_w_108066, None_108067)

    if may_be_108068:

        if more_types_in_union_108069:
            # Runtime conditional SSA (line 584)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Subscript to a Name (line 585):
        
        # Assigning a Subscript to a Name (line 585):
        
        # Obtaining the type of the subscript
        # Getting the type of 'keep' (line 585)
        keep_108070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 34), 'keep')
        # Getting the type of 'tmp_w' (line 585)
        tmp_w_108071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 28), 'tmp_w')
        # Obtaining the member '__getitem__' of a type (line 585)
        getitem___108072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 585, 28), tmp_w_108071, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 585)
        subscript_call_result_108073 = invoke(stypy.reporting.localization.Localization(__file__, 585, 28), getitem___108072, keep_108070)
        
        # Assigning a type to the variable 'tmp_w' (line 585)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 585, 20), 'tmp_w', subscript_call_result_108073)

        if more_types_in_union_108069:
            # SSA join for if statement (line 584)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA join for if statement (line 582)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 586):
    
    # Assigning a Call to a Name (line 586):
    
    # Call to astype(...): (line 586)
    # Processing the call arguments (line 586)
    # Getting the type of 'float' (line 586)
    float_108076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 33), 'float', False)
    # Processing the call keyword arguments (line 586)
    kwargs_108077 = {}
    # Getting the type of 'tmp_a' (line 586)
    tmp_a_108074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 20), 'tmp_a', False)
    # Obtaining the member 'astype' of a type (line 586)
    astype_108075 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 586, 20), tmp_a_108074, 'astype')
    # Calling astype(args, kwargs) (line 586)
    astype_call_result_108078 = invoke(stypy.reporting.localization.Localization(__file__, 586, 20), astype_108075, *[float_108076], **kwargs_108077)
    
    # Assigning a type to the variable 'tmp_a' (line 586)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 586, 12), 'tmp_a', astype_call_result_108078)
    
    # Getting the type of 'tmp_a' (line 587)
    tmp_a_108079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 12), 'tmp_a')
    # Getting the type of 'mn' (line 587)
    mn_108080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 21), 'mn')
    # Applying the binary operator '-=' (line 587)
    result_isub_108081 = python_operator(stypy.reporting.localization.Localization(__file__, 587, 12), '-=', tmp_a_108079, mn_108080)
    # Assigning a type to the variable 'tmp_a' (line 587)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 587, 12), 'tmp_a', result_isub_108081)
    
    
    # Getting the type of 'tmp_a' (line 588)
    tmp_a_108082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 12), 'tmp_a')
    # Getting the type of 'norm' (line 588)
    norm_108083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 21), 'norm')
    # Applying the binary operator '*=' (line 588)
    result_imul_108084 = python_operator(stypy.reporting.localization.Localization(__file__, 588, 12), '*=', tmp_a_108082, norm_108083)
    # Assigning a type to the variable 'tmp_a' (line 588)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 588, 12), 'tmp_a', result_imul_108084)
    
    
    # Assigning a Call to a Name (line 592):
    
    # Assigning a Call to a Name (line 592):
    
    # Call to astype(...): (line 592)
    # Processing the call arguments (line 592)
    # Getting the type of 'np' (line 592)
    np_108087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 35), 'np', False)
    # Obtaining the member 'intp' of a type (line 592)
    intp_108088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 592, 35), np_108087, 'intp')
    # Processing the call keyword arguments (line 592)
    kwargs_108089 = {}
    # Getting the type of 'tmp_a' (line 592)
    tmp_a_108085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 22), 'tmp_a', False)
    # Obtaining the member 'astype' of a type (line 592)
    astype_108086 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 592, 22), tmp_a_108085, 'astype')
    # Calling astype(args, kwargs) (line 592)
    astype_call_result_108090 = invoke(stypy.reporting.localization.Localization(__file__, 592, 22), astype_108086, *[intp_108088], **kwargs_108089)
    
    # Assigning a type to the variable 'indices' (line 592)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 592, 12), 'indices', astype_call_result_108090)
    
    # Getting the type of 'indices' (line 593)
    indices_108091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 12), 'indices')
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'indices' (line 593)
    indices_108092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 20), 'indices')
    # Getting the type of 'bins' (line 593)
    bins_108093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 31), 'bins')
    # Applying the binary operator '==' (line 593)
    result_eq_108094 = python_operator(stypy.reporting.localization.Localization(__file__, 593, 20), '==', indices_108092, bins_108093)
    
    # Getting the type of 'indices' (line 593)
    indices_108095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 12), 'indices')
    # Obtaining the member '__getitem__' of a type (line 593)
    getitem___108096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 593, 12), indices_108095, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 593)
    subscript_call_result_108097 = invoke(stypy.reporting.localization.Localization(__file__, 593, 12), getitem___108096, result_eq_108094)
    
    int_108098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 593, 40), 'int')
    # Applying the binary operator '-=' (line 593)
    result_isub_108099 = python_operator(stypy.reporting.localization.Localization(__file__, 593, 12), '-=', subscript_call_result_108097, int_108098)
    # Getting the type of 'indices' (line 593)
    indices_108100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 12), 'indices')
    
    # Getting the type of 'indices' (line 593)
    indices_108101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 20), 'indices')
    # Getting the type of 'bins' (line 593)
    bins_108102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 31), 'bins')
    # Applying the binary operator '==' (line 593)
    result_eq_108103 = python_operator(stypy.reporting.localization.Localization(__file__, 593, 20), '==', indices_108101, bins_108102)
    
    # Storing an element on a container (line 593)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 593, 12), indices_108100, (result_eq_108103, result_isub_108099))
    
    
    
    # Getting the type of 'ntype' (line 596)
    ntype_108104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 15), 'ntype')
    # Obtaining the member 'kind' of a type (line 596)
    kind_108105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 596, 15), ntype_108104, 'kind')
    str_108106 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 596, 29), 'str', 'c')
    # Applying the binary operator '==' (line 596)
    result_eq_108107 = python_operator(stypy.reporting.localization.Localization(__file__, 596, 15), '==', kind_108105, str_108106)
    
    # Testing the type of an if condition (line 596)
    if_condition_108108 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 596, 12), result_eq_108107)
    # Assigning a type to the variable 'if_condition_108108' (line 596)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 596, 12), 'if_condition_108108', if_condition_108108)
    # SSA begins for if statement (line 596)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'n' (line 597)
    n_108109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 16), 'n')
    # Obtaining the member 'real' of a type (line 597)
    real_108110 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 597, 16), n_108109, 'real')
    
    # Call to bincount(...): (line 597)
    # Processing the call arguments (line 597)
    # Getting the type of 'indices' (line 597)
    indices_108113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 38), 'indices', False)
    # Processing the call keyword arguments (line 597)
    # Getting the type of 'tmp_w' (line 597)
    tmp_w_108114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 55), 'tmp_w', False)
    # Obtaining the member 'real' of a type (line 597)
    real_108115 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 597, 55), tmp_w_108114, 'real')
    keyword_108116 = real_108115
    # Getting the type of 'bins' (line 597)
    bins_108117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 77), 'bins', False)
    keyword_108118 = bins_108117
    kwargs_108119 = {'minlength': keyword_108118, 'weights': keyword_108116}
    # Getting the type of 'np' (line 597)
    np_108111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 26), 'np', False)
    # Obtaining the member 'bincount' of a type (line 597)
    bincount_108112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 597, 26), np_108111, 'bincount')
    # Calling bincount(args, kwargs) (line 597)
    bincount_call_result_108120 = invoke(stypy.reporting.localization.Localization(__file__, 597, 26), bincount_108112, *[indices_108113], **kwargs_108119)
    
    # Applying the binary operator '+=' (line 597)
    result_iadd_108121 = python_operator(stypy.reporting.localization.Localization(__file__, 597, 16), '+=', real_108110, bincount_call_result_108120)
    # Getting the type of 'n' (line 597)
    n_108122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 16), 'n')
    # Setting the type of the member 'real' of a type (line 597)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 597, 16), n_108122, 'real', result_iadd_108121)
    
    
    # Getting the type of 'n' (line 598)
    n_108123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 16), 'n')
    # Obtaining the member 'imag' of a type (line 598)
    imag_108124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 598, 16), n_108123, 'imag')
    
    # Call to bincount(...): (line 598)
    # Processing the call arguments (line 598)
    # Getting the type of 'indices' (line 598)
    indices_108127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 38), 'indices', False)
    # Processing the call keyword arguments (line 598)
    # Getting the type of 'tmp_w' (line 598)
    tmp_w_108128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 55), 'tmp_w', False)
    # Obtaining the member 'imag' of a type (line 598)
    imag_108129 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 598, 55), tmp_w_108128, 'imag')
    keyword_108130 = imag_108129
    # Getting the type of 'bins' (line 598)
    bins_108131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 77), 'bins', False)
    keyword_108132 = bins_108131
    kwargs_108133 = {'minlength': keyword_108132, 'weights': keyword_108130}
    # Getting the type of 'np' (line 598)
    np_108125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 26), 'np', False)
    # Obtaining the member 'bincount' of a type (line 598)
    bincount_108126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 598, 26), np_108125, 'bincount')
    # Calling bincount(args, kwargs) (line 598)
    bincount_call_result_108134 = invoke(stypy.reporting.localization.Localization(__file__, 598, 26), bincount_108126, *[indices_108127], **kwargs_108133)
    
    # Applying the binary operator '+=' (line 598)
    result_iadd_108135 = python_operator(stypy.reporting.localization.Localization(__file__, 598, 16), '+=', imag_108124, bincount_call_result_108134)
    # Getting the type of 'n' (line 598)
    n_108136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 16), 'n')
    # Setting the type of the member 'imag' of a type (line 598)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 598, 16), n_108136, 'imag', result_iadd_108135)
    
    # SSA branch for the else part of an if statement (line 596)
    module_type_store.open_ssa_branch('else')
    
    # Getting the type of 'n' (line 600)
    n_108137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 16), 'n')
    
    # Call to astype(...): (line 600)
    # Processing the call arguments (line 600)
    # Getting the type of 'ntype' (line 600)
    ntype_108148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 80), 'ntype', False)
    # Processing the call keyword arguments (line 600)
    kwargs_108149 = {}
    
    # Call to bincount(...): (line 600)
    # Processing the call arguments (line 600)
    # Getting the type of 'indices' (line 600)
    indices_108140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 33), 'indices', False)
    # Processing the call keyword arguments (line 600)
    # Getting the type of 'tmp_w' (line 600)
    tmp_w_108141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 50), 'tmp_w', False)
    keyword_108142 = tmp_w_108141
    # Getting the type of 'bins' (line 600)
    bins_108143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 67), 'bins', False)
    keyword_108144 = bins_108143
    kwargs_108145 = {'minlength': keyword_108144, 'weights': keyword_108142}
    # Getting the type of 'np' (line 600)
    np_108138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 21), 'np', False)
    # Obtaining the member 'bincount' of a type (line 600)
    bincount_108139 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 600, 21), np_108138, 'bincount')
    # Calling bincount(args, kwargs) (line 600)
    bincount_call_result_108146 = invoke(stypy.reporting.localization.Localization(__file__, 600, 21), bincount_108139, *[indices_108140], **kwargs_108145)
    
    # Obtaining the member 'astype' of a type (line 600)
    astype_108147 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 600, 21), bincount_call_result_108146, 'astype')
    # Calling astype(args, kwargs) (line 600)
    astype_call_result_108150 = invoke(stypy.reporting.localization.Localization(__file__, 600, 21), astype_108147, *[ntype_108148], **kwargs_108149)
    
    # Applying the binary operator '+=' (line 600)
    result_iadd_108151 = python_operator(stypy.reporting.localization.Localization(__file__, 600, 16), '+=', n_108137, astype_call_result_108150)
    # Assigning a type to the variable 'n' (line 600)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 600, 16), 'n', result_iadd_108151)
    
    # SSA join for if statement (line 596)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 603):
    
    # Assigning a Call to a Name (line 603):
    
    # Call to linspace(...): (line 603)
    # Processing the call arguments (line 603)
    # Getting the type of 'mn' (line 603)
    mn_108153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 24), 'mn', False)
    # Getting the type of 'mx' (line 603)
    mx_108154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 28), 'mx', False)
    # Getting the type of 'bins' (line 603)
    bins_108155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 32), 'bins', False)
    int_108156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 603, 39), 'int')
    # Applying the binary operator '+' (line 603)
    result_add_108157 = python_operator(stypy.reporting.localization.Localization(__file__, 603, 32), '+', bins_108155, int_108156)
    
    # Processing the call keyword arguments (line 603)
    # Getting the type of 'True' (line 603)
    True_108158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 51), 'True', False)
    keyword_108159 = True_108158
    kwargs_108160 = {'endpoint': keyword_108159}
    # Getting the type of 'linspace' (line 603)
    linspace_108152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 15), 'linspace', False)
    # Calling linspace(args, kwargs) (line 603)
    linspace_call_result_108161 = invoke(stypy.reporting.localization.Localization(__file__, 603, 15), linspace_108152, *[mn_108153, mx_108154, result_add_108157], **kwargs_108160)
    
    # Assigning a type to the variable 'bins' (line 603)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 603, 8), 'bins', linspace_call_result_108161)
    # SSA branch for the else part of an if statement (line 559)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 605):
    
    # Assigning a Call to a Name (line 605):
    
    # Call to asarray(...): (line 605)
    # Processing the call arguments (line 605)
    # Getting the type of 'bins' (line 605)
    bins_108163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 23), 'bins', False)
    # Processing the call keyword arguments (line 605)
    kwargs_108164 = {}
    # Getting the type of 'asarray' (line 605)
    asarray_108162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 15), 'asarray', False)
    # Calling asarray(args, kwargs) (line 605)
    asarray_call_result_108165 = invoke(stypy.reporting.localization.Localization(__file__, 605, 15), asarray_108162, *[bins_108163], **kwargs_108164)
    
    # Assigning a type to the variable 'bins' (line 605)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 605, 8), 'bins', asarray_call_result_108165)
    
    
    # Call to any(...): (line 606)
    # Processing the call keyword arguments (line 606)
    kwargs_108174 = {}
    
    
    # Call to diff(...): (line 606)
    # Processing the call arguments (line 606)
    # Getting the type of 'bins' (line 606)
    bins_108168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 20), 'bins', False)
    # Processing the call keyword arguments (line 606)
    kwargs_108169 = {}
    # Getting the type of 'np' (line 606)
    np_108166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 12), 'np', False)
    # Obtaining the member 'diff' of a type (line 606)
    diff_108167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 606, 12), np_108166, 'diff')
    # Calling diff(args, kwargs) (line 606)
    diff_call_result_108170 = invoke(stypy.reporting.localization.Localization(__file__, 606, 12), diff_108167, *[bins_108168], **kwargs_108169)
    
    int_108171 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 606, 28), 'int')
    # Applying the binary operator '<' (line 606)
    result_lt_108172 = python_operator(stypy.reporting.localization.Localization(__file__, 606, 12), '<', diff_call_result_108170, int_108171)
    
    # Obtaining the member 'any' of a type (line 606)
    any_108173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 606, 12), result_lt_108172, 'any')
    # Calling any(args, kwargs) (line 606)
    any_call_result_108175 = invoke(stypy.reporting.localization.Localization(__file__, 606, 12), any_108173, *[], **kwargs_108174)
    
    # Testing the type of an if condition (line 606)
    if_condition_108176 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 606, 8), any_call_result_108175)
    # Assigning a type to the variable 'if_condition_108176' (line 606)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 606, 8), 'if_condition_108176', if_condition_108176)
    # SSA begins for if statement (line 606)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 607)
    # Processing the call arguments (line 607)
    str_108178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 608, 16), 'str', 'bins must increase monotonically.')
    # Processing the call keyword arguments (line 607)
    kwargs_108179 = {}
    # Getting the type of 'ValueError' (line 607)
    ValueError_108177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 607)
    ValueError_call_result_108180 = invoke(stypy.reporting.localization.Localization(__file__, 607, 18), ValueError_108177, *[str_108178], **kwargs_108179)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 607, 12), ValueError_call_result_108180, 'raise parameter', BaseException)
    # SSA join for if statement (line 606)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 611):
    
    # Assigning a Call to a Name (line 611):
    
    # Call to zeros(...): (line 611)
    # Processing the call arguments (line 611)
    # Getting the type of 'bins' (line 611)
    bins_108183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 21), 'bins', False)
    # Obtaining the member 'shape' of a type (line 611)
    shape_108184 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 611, 21), bins_108183, 'shape')
    # Getting the type of 'ntype' (line 611)
    ntype_108185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 33), 'ntype', False)
    # Processing the call keyword arguments (line 611)
    kwargs_108186 = {}
    # Getting the type of 'np' (line 611)
    np_108181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 12), 'np', False)
    # Obtaining the member 'zeros' of a type (line 611)
    zeros_108182 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 611, 12), np_108181, 'zeros')
    # Calling zeros(args, kwargs) (line 611)
    zeros_call_result_108187 = invoke(stypy.reporting.localization.Localization(__file__, 611, 12), zeros_108182, *[shape_108184, ntype_108185], **kwargs_108186)
    
    # Assigning a type to the variable 'n' (line 611)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 611, 8), 'n', zeros_call_result_108187)
    
    # Type idiom detected: calculating its left and rigth part (line 613)
    # Getting the type of 'weights' (line 613)
    weights_108188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 11), 'weights')
    # Getting the type of 'None' (line 613)
    None_108189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 22), 'None')
    
    (may_be_108190, more_types_in_union_108191) = may_be_none(weights_108188, None_108189)

    if may_be_108190:

        if more_types_in_union_108191:
            # Runtime conditional SSA (line 613)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        
        # Call to arange(...): (line 614)
        # Processing the call arguments (line 614)
        int_108193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 614, 28), 'int')
        
        # Call to len(...): (line 614)
        # Processing the call arguments (line 614)
        # Getting the type of 'a' (line 614)
        a_108195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 35), 'a', False)
        # Processing the call keyword arguments (line 614)
        kwargs_108196 = {}
        # Getting the type of 'len' (line 614)
        len_108194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 31), 'len', False)
        # Calling len(args, kwargs) (line 614)
        len_call_result_108197 = invoke(stypy.reporting.localization.Localization(__file__, 614, 31), len_108194, *[a_108195], **kwargs_108196)
        
        # Getting the type of 'BLOCK' (line 614)
        BLOCK_108198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 39), 'BLOCK', False)
        # Processing the call keyword arguments (line 614)
        kwargs_108199 = {}
        # Getting the type of 'arange' (line 614)
        arange_108192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 21), 'arange', False)
        # Calling arange(args, kwargs) (line 614)
        arange_call_result_108200 = invoke(stypy.reporting.localization.Localization(__file__, 614, 21), arange_108192, *[int_108193, len_call_result_108197, BLOCK_108198], **kwargs_108199)
        
        # Testing the type of a for loop iterable (line 614)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 614, 12), arange_call_result_108200)
        # Getting the type of the for loop variable (line 614)
        for_loop_var_108201 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 614, 12), arange_call_result_108200)
        # Assigning a type to the variable 'i' (line 614)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 614, 12), 'i', for_loop_var_108201)
        # SSA begins for a for statement (line 614)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 615):
        
        # Assigning a Call to a Name (line 615):
        
        # Call to sort(...): (line 615)
        # Processing the call arguments (line 615)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 615)
        i_108203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 28), 'i', False)
        # Getting the type of 'i' (line 615)
        i_108204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 30), 'i', False)
        # Getting the type of 'BLOCK' (line 615)
        BLOCK_108205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 32), 'BLOCK', False)
        # Applying the binary operator '+' (line 615)
        result_add_108206 = python_operator(stypy.reporting.localization.Localization(__file__, 615, 30), '+', i_108204, BLOCK_108205)
        
        slice_108207 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 615, 26), i_108203, result_add_108206, None)
        # Getting the type of 'a' (line 615)
        a_108208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 26), 'a', False)
        # Obtaining the member '__getitem__' of a type (line 615)
        getitem___108209 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 615, 26), a_108208, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 615)
        subscript_call_result_108210 = invoke(stypy.reporting.localization.Localization(__file__, 615, 26), getitem___108209, slice_108207)
        
        # Processing the call keyword arguments (line 615)
        kwargs_108211 = {}
        # Getting the type of 'sort' (line 615)
        sort_108202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 21), 'sort', False)
        # Calling sort(args, kwargs) (line 615)
        sort_call_result_108212 = invoke(stypy.reporting.localization.Localization(__file__, 615, 21), sort_108202, *[subscript_call_result_108210], **kwargs_108211)
        
        # Assigning a type to the variable 'sa' (line 615)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 615, 16), 'sa', sort_call_result_108212)
        
        # Getting the type of 'n' (line 616)
        n_108213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 16), 'n')
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 616)
        tuple_108214 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 616, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 616)
        # Adding element type (line 616)
        
        # Call to searchsorted(...): (line 616)
        # Processing the call arguments (line 616)
        
        # Obtaining the type of the subscript
        int_108217 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 616, 49), 'int')
        slice_108218 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 616, 43), None, int_108217, None)
        # Getting the type of 'bins' (line 616)
        bins_108219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 43), 'bins', False)
        # Obtaining the member '__getitem__' of a type (line 616)
        getitem___108220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 616, 43), bins_108219, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 616)
        subscript_call_result_108221 = invoke(stypy.reporting.localization.Localization(__file__, 616, 43), getitem___108220, slice_108218)
        
        str_108222 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 616, 54), 'str', 'left')
        # Processing the call keyword arguments (line 616)
        kwargs_108223 = {}
        # Getting the type of 'sa' (line 616)
        sa_108215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 27), 'sa', False)
        # Obtaining the member 'searchsorted' of a type (line 616)
        searchsorted_108216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 616, 27), sa_108215, 'searchsorted')
        # Calling searchsorted(args, kwargs) (line 616)
        searchsorted_call_result_108224 = invoke(stypy.reporting.localization.Localization(__file__, 616, 27), searchsorted_108216, *[subscript_call_result_108221, str_108222], **kwargs_108223)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 616, 27), tuple_108214, searchsorted_call_result_108224)
        # Adding element type (line 616)
        
        # Call to searchsorted(...): (line 617)
        # Processing the call arguments (line 617)
        
        # Obtaining the type of the subscript
        int_108227 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 617, 48), 'int')
        # Getting the type of 'bins' (line 617)
        bins_108228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 43), 'bins', False)
        # Obtaining the member '__getitem__' of a type (line 617)
        getitem___108229 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 617, 43), bins_108228, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 617)
        subscript_call_result_108230 = invoke(stypy.reporting.localization.Localization(__file__, 617, 43), getitem___108229, int_108227)
        
        str_108231 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 617, 53), 'str', 'right')
        # Processing the call keyword arguments (line 617)
        kwargs_108232 = {}
        # Getting the type of 'sa' (line 617)
        sa_108225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 27), 'sa', False)
        # Obtaining the member 'searchsorted' of a type (line 617)
        searchsorted_108226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 617, 27), sa_108225, 'searchsorted')
        # Calling searchsorted(args, kwargs) (line 617)
        searchsorted_call_result_108233 = invoke(stypy.reporting.localization.Localization(__file__, 617, 27), searchsorted_108226, *[subscript_call_result_108230, str_108231], **kwargs_108232)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 616, 27), tuple_108214, searchsorted_call_result_108233)
        
        # Getting the type of 'np' (line 616)
        np_108234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 21), 'np')
        # Obtaining the member 'r_' of a type (line 616)
        r__108235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 616, 21), np_108234, 'r_')
        # Obtaining the member '__getitem__' of a type (line 616)
        getitem___108236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 616, 21), r__108235, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 616)
        subscript_call_result_108237 = invoke(stypy.reporting.localization.Localization(__file__, 616, 21), getitem___108236, tuple_108214)
        
        # Applying the binary operator '+=' (line 616)
        result_iadd_108238 = python_operator(stypy.reporting.localization.Localization(__file__, 616, 16), '+=', n_108213, subscript_call_result_108237)
        # Assigning a type to the variable 'n' (line 616)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 616, 16), 'n', result_iadd_108238)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_108191:
            # Runtime conditional SSA for else branch (line 613)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_108190) or more_types_in_union_108191):
        
        # Assigning a Call to a Name (line 619):
        
        # Assigning a Call to a Name (line 619):
        
        # Call to array(...): (line 619)
        # Processing the call arguments (line 619)
        int_108240 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 619, 25), 'int')
        # Processing the call keyword arguments (line 619)
        # Getting the type of 'ntype' (line 619)
        ntype_108241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 619, 34), 'ntype', False)
        keyword_108242 = ntype_108241
        kwargs_108243 = {'dtype': keyword_108242}
        # Getting the type of 'array' (line 619)
        array_108239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 619, 19), 'array', False)
        # Calling array(args, kwargs) (line 619)
        array_call_result_108244 = invoke(stypy.reporting.localization.Localization(__file__, 619, 19), array_108239, *[int_108240], **kwargs_108243)
        
        # Assigning a type to the variable 'zero' (line 619)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 619, 12), 'zero', array_call_result_108244)
        
        
        # Call to arange(...): (line 620)
        # Processing the call arguments (line 620)
        int_108246 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 620, 28), 'int')
        
        # Call to len(...): (line 620)
        # Processing the call arguments (line 620)
        # Getting the type of 'a' (line 620)
        a_108248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 35), 'a', False)
        # Processing the call keyword arguments (line 620)
        kwargs_108249 = {}
        # Getting the type of 'len' (line 620)
        len_108247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 31), 'len', False)
        # Calling len(args, kwargs) (line 620)
        len_call_result_108250 = invoke(stypy.reporting.localization.Localization(__file__, 620, 31), len_108247, *[a_108248], **kwargs_108249)
        
        # Getting the type of 'BLOCK' (line 620)
        BLOCK_108251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 39), 'BLOCK', False)
        # Processing the call keyword arguments (line 620)
        kwargs_108252 = {}
        # Getting the type of 'arange' (line 620)
        arange_108245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 21), 'arange', False)
        # Calling arange(args, kwargs) (line 620)
        arange_call_result_108253 = invoke(stypy.reporting.localization.Localization(__file__, 620, 21), arange_108245, *[int_108246, len_call_result_108250, BLOCK_108251], **kwargs_108252)
        
        # Testing the type of a for loop iterable (line 620)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 620, 12), arange_call_result_108253)
        # Getting the type of the for loop variable (line 620)
        for_loop_var_108254 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 620, 12), arange_call_result_108253)
        # Assigning a type to the variable 'i' (line 620)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 620, 12), 'i', for_loop_var_108254)
        # SSA begins for a for statement (line 620)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Subscript to a Name (line 621):
        
        # Assigning a Subscript to a Name (line 621):
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 621)
        i_108255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 26), 'i')
        # Getting the type of 'i' (line 621)
        i_108256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 28), 'i')
        # Getting the type of 'BLOCK' (line 621)
        BLOCK_108257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 30), 'BLOCK')
        # Applying the binary operator '+' (line 621)
        result_add_108258 = python_operator(stypy.reporting.localization.Localization(__file__, 621, 28), '+', i_108256, BLOCK_108257)
        
        slice_108259 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 621, 24), i_108255, result_add_108258, None)
        # Getting the type of 'a' (line 621)
        a_108260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 24), 'a')
        # Obtaining the member '__getitem__' of a type (line 621)
        getitem___108261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 621, 24), a_108260, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 621)
        subscript_call_result_108262 = invoke(stypy.reporting.localization.Localization(__file__, 621, 24), getitem___108261, slice_108259)
        
        # Assigning a type to the variable 'tmp_a' (line 621)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 621, 16), 'tmp_a', subscript_call_result_108262)
        
        # Assigning a Subscript to a Name (line 622):
        
        # Assigning a Subscript to a Name (line 622):
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 622)
        i_108263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 32), 'i')
        # Getting the type of 'i' (line 622)
        i_108264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 34), 'i')
        # Getting the type of 'BLOCK' (line 622)
        BLOCK_108265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 36), 'BLOCK')
        # Applying the binary operator '+' (line 622)
        result_add_108266 = python_operator(stypy.reporting.localization.Localization(__file__, 622, 34), '+', i_108264, BLOCK_108265)
        
        slice_108267 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 622, 24), i_108263, result_add_108266, None)
        # Getting the type of 'weights' (line 622)
        weights_108268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 24), 'weights')
        # Obtaining the member '__getitem__' of a type (line 622)
        getitem___108269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 622, 24), weights_108268, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 622)
        subscript_call_result_108270 = invoke(stypy.reporting.localization.Localization(__file__, 622, 24), getitem___108269, slice_108267)
        
        # Assigning a type to the variable 'tmp_w' (line 622)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 622, 16), 'tmp_w', subscript_call_result_108270)
        
        # Assigning a Call to a Name (line 623):
        
        # Assigning a Call to a Name (line 623):
        
        # Call to argsort(...): (line 623)
        # Processing the call arguments (line 623)
        # Getting the type of 'tmp_a' (line 623)
        tmp_a_108273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 43), 'tmp_a', False)
        # Processing the call keyword arguments (line 623)
        kwargs_108274 = {}
        # Getting the type of 'np' (line 623)
        np_108271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 32), 'np', False)
        # Obtaining the member 'argsort' of a type (line 623)
        argsort_108272 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 623, 32), np_108271, 'argsort')
        # Calling argsort(args, kwargs) (line 623)
        argsort_call_result_108275 = invoke(stypy.reporting.localization.Localization(__file__, 623, 32), argsort_108272, *[tmp_a_108273], **kwargs_108274)
        
        # Assigning a type to the variable 'sorting_index' (line 623)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 623, 16), 'sorting_index', argsort_call_result_108275)
        
        # Assigning a Subscript to a Name (line 624):
        
        # Assigning a Subscript to a Name (line 624):
        
        # Obtaining the type of the subscript
        # Getting the type of 'sorting_index' (line 624)
        sorting_index_108276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 27), 'sorting_index')
        # Getting the type of 'tmp_a' (line 624)
        tmp_a_108277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 21), 'tmp_a')
        # Obtaining the member '__getitem__' of a type (line 624)
        getitem___108278 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 624, 21), tmp_a_108277, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 624)
        subscript_call_result_108279 = invoke(stypy.reporting.localization.Localization(__file__, 624, 21), getitem___108278, sorting_index_108276)
        
        # Assigning a type to the variable 'sa' (line 624)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 624, 16), 'sa', subscript_call_result_108279)
        
        # Assigning a Subscript to a Name (line 625):
        
        # Assigning a Subscript to a Name (line 625):
        
        # Obtaining the type of the subscript
        # Getting the type of 'sorting_index' (line 625)
        sorting_index_108280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 27), 'sorting_index')
        # Getting the type of 'tmp_w' (line 625)
        tmp_w_108281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 21), 'tmp_w')
        # Obtaining the member '__getitem__' of a type (line 625)
        getitem___108282 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 625, 21), tmp_w_108281, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 625)
        subscript_call_result_108283 = invoke(stypy.reporting.localization.Localization(__file__, 625, 21), getitem___108282, sorting_index_108280)
        
        # Assigning a type to the variable 'sw' (line 625)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 625, 16), 'sw', subscript_call_result_108283)
        
        # Assigning a Call to a Name (line 626):
        
        # Assigning a Call to a Name (line 626):
        
        # Call to concatenate(...): (line 626)
        # Processing the call arguments (line 626)
        
        # Obtaining an instance of the builtin type 'tuple' (line 626)
        tuple_108286 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 626, 37), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 626)
        # Adding element type (line 626)
        
        # Obtaining an instance of the builtin type 'list' (line 626)
        list_108287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 626, 37), 'list')
        # Adding type elements to the builtin type 'list' instance (line 626)
        # Adding element type (line 626)
        # Getting the type of 'zero' (line 626)
        zero_108288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 38), 'zero', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 626, 37), list_108287, zero_108288)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 626, 37), tuple_108286, list_108287)
        # Adding element type (line 626)
        
        # Call to cumsum(...): (line 626)
        # Processing the call keyword arguments (line 626)
        kwargs_108291 = {}
        # Getting the type of 'sw' (line 626)
        sw_108289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 47), 'sw', False)
        # Obtaining the member 'cumsum' of a type (line 626)
        cumsum_108290 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 626, 47), sw_108289, 'cumsum')
        # Calling cumsum(args, kwargs) (line 626)
        cumsum_call_result_108292 = invoke(stypy.reporting.localization.Localization(__file__, 626, 47), cumsum_108290, *[], **kwargs_108291)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 626, 37), tuple_108286, cumsum_call_result_108292)
        
        # Processing the call keyword arguments (line 626)
        kwargs_108293 = {}
        # Getting the type of 'np' (line 626)
        np_108284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 21), 'np', False)
        # Obtaining the member 'concatenate' of a type (line 626)
        concatenate_108285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 626, 21), np_108284, 'concatenate')
        # Calling concatenate(args, kwargs) (line 626)
        concatenate_call_result_108294 = invoke(stypy.reporting.localization.Localization(__file__, 626, 21), concatenate_108285, *[tuple_108286], **kwargs_108293)
        
        # Assigning a type to the variable 'cw' (line 626)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 626, 16), 'cw', concatenate_call_result_108294)
        
        # Assigning a Subscript to a Name (line 627):
        
        # Assigning a Subscript to a Name (line 627):
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 627)
        tuple_108295 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 627, 34), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 627)
        # Adding element type (line 627)
        
        # Call to searchsorted(...): (line 627)
        # Processing the call arguments (line 627)
        
        # Obtaining the type of the subscript
        int_108298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 627, 56), 'int')
        slice_108299 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 627, 50), None, int_108298, None)
        # Getting the type of 'bins' (line 627)
        bins_108300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 50), 'bins', False)
        # Obtaining the member '__getitem__' of a type (line 627)
        getitem___108301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 627, 50), bins_108300, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 627)
        subscript_call_result_108302 = invoke(stypy.reporting.localization.Localization(__file__, 627, 50), getitem___108301, slice_108299)
        
        str_108303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 627, 61), 'str', 'left')
        # Processing the call keyword arguments (line 627)
        kwargs_108304 = {}
        # Getting the type of 'sa' (line 627)
        sa_108296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 34), 'sa', False)
        # Obtaining the member 'searchsorted' of a type (line 627)
        searchsorted_108297 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 627, 34), sa_108296, 'searchsorted')
        # Calling searchsorted(args, kwargs) (line 627)
        searchsorted_call_result_108305 = invoke(stypy.reporting.localization.Localization(__file__, 627, 34), searchsorted_108297, *[subscript_call_result_108302, str_108303], **kwargs_108304)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 627, 34), tuple_108295, searchsorted_call_result_108305)
        # Adding element type (line 627)
        
        # Call to searchsorted(...): (line 628)
        # Processing the call arguments (line 628)
        
        # Obtaining the type of the subscript
        int_108308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 628, 55), 'int')
        # Getting the type of 'bins' (line 628)
        bins_108309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 50), 'bins', False)
        # Obtaining the member '__getitem__' of a type (line 628)
        getitem___108310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 628, 50), bins_108309, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 628)
        subscript_call_result_108311 = invoke(stypy.reporting.localization.Localization(__file__, 628, 50), getitem___108310, int_108308)
        
        str_108312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 628, 60), 'str', 'right')
        # Processing the call keyword arguments (line 628)
        kwargs_108313 = {}
        # Getting the type of 'sa' (line 628)
        sa_108306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 34), 'sa', False)
        # Obtaining the member 'searchsorted' of a type (line 628)
        searchsorted_108307 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 628, 34), sa_108306, 'searchsorted')
        # Calling searchsorted(args, kwargs) (line 628)
        searchsorted_call_result_108314 = invoke(stypy.reporting.localization.Localization(__file__, 628, 34), searchsorted_108307, *[subscript_call_result_108311, str_108312], **kwargs_108313)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 627, 34), tuple_108295, searchsorted_call_result_108314)
        
        # Getting the type of 'np' (line 627)
        np_108315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 28), 'np')
        # Obtaining the member 'r_' of a type (line 627)
        r__108316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 627, 28), np_108315, 'r_')
        # Obtaining the member '__getitem__' of a type (line 627)
        getitem___108317 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 627, 28), r__108316, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 627)
        subscript_call_result_108318 = invoke(stypy.reporting.localization.Localization(__file__, 627, 28), getitem___108317, tuple_108295)
        
        # Assigning a type to the variable 'bin_index' (line 627)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 627, 16), 'bin_index', subscript_call_result_108318)
        
        # Getting the type of 'n' (line 629)
        n_108319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 629, 16), 'n')
        
        # Obtaining the type of the subscript
        # Getting the type of 'bin_index' (line 629)
        bin_index_108320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 629, 24), 'bin_index')
        # Getting the type of 'cw' (line 629)
        cw_108321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 629, 21), 'cw')
        # Obtaining the member '__getitem__' of a type (line 629)
        getitem___108322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 629, 21), cw_108321, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 629)
        subscript_call_result_108323 = invoke(stypy.reporting.localization.Localization(__file__, 629, 21), getitem___108322, bin_index_108320)
        
        # Applying the binary operator '+=' (line 629)
        result_iadd_108324 = python_operator(stypy.reporting.localization.Localization(__file__, 629, 16), '+=', n_108319, subscript_call_result_108323)
        # Assigning a type to the variable 'n' (line 629)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 629, 16), 'n', result_iadd_108324)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        

        if (may_be_108190 and more_types_in_union_108191):
            # SSA join for if statement (line 613)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 632):
    
    # Assigning a Call to a Name (line 632):
    
    # Call to diff(...): (line 632)
    # Processing the call arguments (line 632)
    # Getting the type of 'n' (line 632)
    n_108327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 632, 20), 'n', False)
    # Processing the call keyword arguments (line 632)
    kwargs_108328 = {}
    # Getting the type of 'np' (line 632)
    np_108325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 632, 12), 'np', False)
    # Obtaining the member 'diff' of a type (line 632)
    diff_108326 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 632, 12), np_108325, 'diff')
    # Calling diff(args, kwargs) (line 632)
    diff_call_result_108329 = invoke(stypy.reporting.localization.Localization(__file__, 632, 12), diff_108326, *[n_108327], **kwargs_108328)
    
    # Assigning a type to the variable 'n' (line 632)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 632, 8), 'n', diff_call_result_108329)
    # SSA join for if statement (line 559)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 634)
    # Getting the type of 'density' (line 634)
    density_108330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 4), 'density')
    # Getting the type of 'None' (line 634)
    None_108331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 22), 'None')
    
    (may_be_108332, more_types_in_union_108333) = may_not_be_none(density_108330, None_108331)

    if may_be_108332:

        if more_types_in_union_108333:
            # Runtime conditional SSA (line 634)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Getting the type of 'density' (line 635)
        density_108334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 11), 'density')
        # Testing the type of an if condition (line 635)
        if_condition_108335 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 635, 8), density_108334)
        # Assigning a type to the variable 'if_condition_108335' (line 635)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 635, 8), 'if_condition_108335', if_condition_108335)
        # SSA begins for if statement (line 635)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 636):
        
        # Assigning a Call to a Name (line 636):
        
        # Call to array(...): (line 636)
        # Processing the call arguments (line 636)
        
        # Call to diff(...): (line 636)
        # Processing the call arguments (line 636)
        # Getting the type of 'bins' (line 636)
        bins_108339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 31), 'bins', False)
        # Processing the call keyword arguments (line 636)
        kwargs_108340 = {}
        # Getting the type of 'np' (line 636)
        np_108337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 23), 'np', False)
        # Obtaining the member 'diff' of a type (line 636)
        diff_108338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 636, 23), np_108337, 'diff')
        # Calling diff(args, kwargs) (line 636)
        diff_call_result_108341 = invoke(stypy.reporting.localization.Localization(__file__, 636, 23), diff_108338, *[bins_108339], **kwargs_108340)
        
        # Getting the type of 'float' (line 636)
        float_108342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 38), 'float', False)
        # Processing the call keyword arguments (line 636)
        kwargs_108343 = {}
        # Getting the type of 'array' (line 636)
        array_108336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 17), 'array', False)
        # Calling array(args, kwargs) (line 636)
        array_call_result_108344 = invoke(stypy.reporting.localization.Localization(__file__, 636, 17), array_108336, *[diff_call_result_108341, float_108342], **kwargs_108343)
        
        # Assigning a type to the variable 'db' (line 636)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 636, 12), 'db', array_call_result_108344)
        
        # Obtaining an instance of the builtin type 'tuple' (line 637)
        tuple_108345 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 637, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 637)
        # Adding element type (line 637)
        # Getting the type of 'n' (line 637)
        n_108346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 19), 'n')
        # Getting the type of 'db' (line 637)
        db_108347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 21), 'db')
        # Applying the binary operator 'div' (line 637)
        result_div_108348 = python_operator(stypy.reporting.localization.Localization(__file__, 637, 19), 'div', n_108346, db_108347)
        
        
        # Call to sum(...): (line 637)
        # Processing the call keyword arguments (line 637)
        kwargs_108351 = {}
        # Getting the type of 'n' (line 637)
        n_108349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 24), 'n', False)
        # Obtaining the member 'sum' of a type (line 637)
        sum_108350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 637, 24), n_108349, 'sum')
        # Calling sum(args, kwargs) (line 637)
        sum_call_result_108352 = invoke(stypy.reporting.localization.Localization(__file__, 637, 24), sum_108350, *[], **kwargs_108351)
        
        # Applying the binary operator 'div' (line 637)
        result_div_108353 = python_operator(stypy.reporting.localization.Localization(__file__, 637, 23), 'div', result_div_108348, sum_call_result_108352)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 637, 19), tuple_108345, result_div_108353)
        # Adding element type (line 637)
        # Getting the type of 'bins' (line 637)
        bins_108354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 33), 'bins')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 637, 19), tuple_108345, bins_108354)
        
        # Assigning a type to the variable 'stypy_return_type' (line 637)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 637, 12), 'stypy_return_type', tuple_108345)
        # SSA branch for the else part of an if statement (line 635)
        module_type_store.open_ssa_branch('else')
        
        # Obtaining an instance of the builtin type 'tuple' (line 639)
        tuple_108355 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 639, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 639)
        # Adding element type (line 639)
        # Getting the type of 'n' (line 639)
        n_108356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 19), 'n')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 639, 19), tuple_108355, n_108356)
        # Adding element type (line 639)
        # Getting the type of 'bins' (line 639)
        bins_108357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 22), 'bins')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 639, 19), tuple_108355, bins_108357)
        
        # Assigning a type to the variable 'stypy_return_type' (line 639)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 639, 12), 'stypy_return_type', tuple_108355)
        # SSA join for if statement (line 635)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_108333:
            # Runtime conditional SSA for else branch (line 634)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_108332) or more_types_in_union_108333):
        
        # Getting the type of 'normed' (line 642)
        normed_108358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 11), 'normed')
        # Testing the type of an if condition (line 642)
        if_condition_108359 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 642, 8), normed_108358)
        # Assigning a type to the variable 'if_condition_108359' (line 642)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 642, 8), 'if_condition_108359', if_condition_108359)
        # SSA begins for if statement (line 642)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 643):
        
        # Assigning a Call to a Name (line 643):
        
        # Call to array(...): (line 643)
        # Processing the call arguments (line 643)
        
        # Call to diff(...): (line 643)
        # Processing the call arguments (line 643)
        # Getting the type of 'bins' (line 643)
        bins_108363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 31), 'bins', False)
        # Processing the call keyword arguments (line 643)
        kwargs_108364 = {}
        # Getting the type of 'np' (line 643)
        np_108361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 23), 'np', False)
        # Obtaining the member 'diff' of a type (line 643)
        diff_108362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 643, 23), np_108361, 'diff')
        # Calling diff(args, kwargs) (line 643)
        diff_call_result_108365 = invoke(stypy.reporting.localization.Localization(__file__, 643, 23), diff_108362, *[bins_108363], **kwargs_108364)
        
        # Getting the type of 'float' (line 643)
        float_108366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 38), 'float', False)
        # Processing the call keyword arguments (line 643)
        kwargs_108367 = {}
        # Getting the type of 'array' (line 643)
        array_108360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 643, 17), 'array', False)
        # Calling array(args, kwargs) (line 643)
        array_call_result_108368 = invoke(stypy.reporting.localization.Localization(__file__, 643, 17), array_108360, *[diff_call_result_108365, float_108366], **kwargs_108367)
        
        # Assigning a type to the variable 'db' (line 643)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 643, 12), 'db', array_call_result_108368)
        
        # Obtaining an instance of the builtin type 'tuple' (line 644)
        tuple_108369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 644, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 644)
        # Adding element type (line 644)
        # Getting the type of 'n' (line 644)
        n_108370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 644, 19), 'n')
        
        # Call to sum(...): (line 644)
        # Processing the call keyword arguments (line 644)
        kwargs_108375 = {}
        # Getting the type of 'n' (line 644)
        n_108371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 644, 22), 'n', False)
        # Getting the type of 'db' (line 644)
        db_108372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 644, 24), 'db', False)
        # Applying the binary operator '*' (line 644)
        result_mul_108373 = python_operator(stypy.reporting.localization.Localization(__file__, 644, 22), '*', n_108371, db_108372)
        
        # Obtaining the member 'sum' of a type (line 644)
        sum_108374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 644, 22), result_mul_108373, 'sum')
        # Calling sum(args, kwargs) (line 644)
        sum_call_result_108376 = invoke(stypy.reporting.localization.Localization(__file__, 644, 22), sum_108374, *[], **kwargs_108375)
        
        # Applying the binary operator 'div' (line 644)
        result_div_108377 = python_operator(stypy.reporting.localization.Localization(__file__, 644, 19), 'div', n_108370, sum_call_result_108376)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 644, 19), tuple_108369, result_div_108377)
        # Adding element type (line 644)
        # Getting the type of 'bins' (line 644)
        bins_108378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 644, 35), 'bins')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 644, 19), tuple_108369, bins_108378)
        
        # Assigning a type to the variable 'stypy_return_type' (line 644)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 644, 12), 'stypy_return_type', tuple_108369)
        # SSA branch for the else part of an if statement (line 642)
        module_type_store.open_ssa_branch('else')
        
        # Obtaining an instance of the builtin type 'tuple' (line 646)
        tuple_108379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 646, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 646)
        # Adding element type (line 646)
        # Getting the type of 'n' (line 646)
        n_108380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 646, 19), 'n')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 646, 19), tuple_108379, n_108380)
        # Adding element type (line 646)
        # Getting the type of 'bins' (line 646)
        bins_108381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 646, 22), 'bins')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 646, 19), tuple_108379, bins_108381)
        
        # Assigning a type to the variable 'stypy_return_type' (line 646)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 646, 12), 'stypy_return_type', tuple_108379)
        # SSA join for if statement (line 642)
        module_type_store = module_type_store.join_ssa_context()
        

        if (may_be_108332 and more_types_in_union_108333):
            # SSA join for if statement (line 634)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of 'histogram(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'histogram' in the type store
    # Getting the type of 'stypy_return_type' (line 267)
    stypy_return_type_108382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_108382)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'histogram'
    return stypy_return_type_108382

# Assigning a type to the variable 'histogram' (line 267)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 267, 0), 'histogram', histogram)

@norecursion
def histogramdd(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_108383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 649, 29), 'int')
    # Getting the type of 'None' (line 649)
    None_108384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 39), 'None')
    # Getting the type of 'False' (line 649)
    False_108385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 52), 'False')
    # Getting the type of 'None' (line 649)
    None_108386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 67), 'None')
    defaults = [int_108383, None_108384, False_108385, None_108386]
    # Create a new context for function 'histogramdd'
    module_type_store = module_type_store.open_function_context('histogramdd', 649, 0, False)
    
    # Passed parameters checking function
    histogramdd.stypy_localization = localization
    histogramdd.stypy_type_of_self = None
    histogramdd.stypy_type_store = module_type_store
    histogramdd.stypy_function_name = 'histogramdd'
    histogramdd.stypy_param_names_list = ['sample', 'bins', 'range', 'normed', 'weights']
    histogramdd.stypy_varargs_param_name = None
    histogramdd.stypy_kwargs_param_name = None
    histogramdd.stypy_call_defaults = defaults
    histogramdd.stypy_call_varargs = varargs
    histogramdd.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'histogramdd', ['sample', 'bins', 'range', 'normed', 'weights'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'histogramdd', localization, ['sample', 'bins', 'range', 'normed', 'weights'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'histogramdd(...)' code ##################

    str_108387 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 699, (-1)), 'str', '\n    Compute the multidimensional histogram of some data.\n\n    Parameters\n    ----------\n    sample : array_like\n        The data to be histogrammed. It must be an (N,D) array or data\n        that can be converted to such. The rows of the resulting array\n        are the coordinates of points in a D dimensional polytope.\n    bins : sequence or int, optional\n        The bin specification:\n\n        * A sequence of arrays describing the bin edges along each dimension.\n        * The number of bins for each dimension (nx, ny, ... =bins)\n        * The number of bins for all dimensions (nx=ny=...=bins).\n\n    range : sequence, optional\n        A sequence of lower and upper bin edges to be used if the edges are\n        not given explicitly in `bins`. Defaults to the minimum and maximum\n        values along each dimension.\n    normed : bool, optional\n        If False, returns the number of samples in each bin. If True,\n        returns the bin density ``bin_count / sample_count / bin_volume``.\n    weights : (N,) array_like, optional\n        An array of values `w_i` weighing each sample `(x_i, y_i, z_i, ...)`.\n        Weights are normalized to 1 if normed is True. If normed is False,\n        the values of the returned histogram are equal to the sum of the\n        weights belonging to the samples falling into each bin.\n\n    Returns\n    -------\n    H : ndarray\n        The multidimensional histogram of sample x. See normed and weights\n        for the different possible semantics.\n    edges : list\n        A list of D arrays describing the bin edges for each dimension.\n\n    See Also\n    --------\n    histogram: 1-D histogram\n    histogram2d: 2-D histogram\n\n    Examples\n    --------\n    >>> r = np.random.randn(100,3)\n    >>> H, edges = np.histogramdd(r, bins = (5, 8, 4))\n    >>> H.shape, edges[0].size, edges[1].size, edges[2].size\n    ((5, 8, 4), 6, 9, 5)\n\n    ')
    
    
    # SSA begins for try-except statement (line 701)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Attribute to a Tuple (line 703):
    
    # Assigning a Subscript to a Name (line 703):
    
    # Obtaining the type of the subscript
    int_108388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 703, 8), 'int')
    # Getting the type of 'sample' (line 703)
    sample_108389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 15), 'sample')
    # Obtaining the member 'shape' of a type (line 703)
    shape_108390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 703, 15), sample_108389, 'shape')
    # Obtaining the member '__getitem__' of a type (line 703)
    getitem___108391 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 703, 8), shape_108390, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 703)
    subscript_call_result_108392 = invoke(stypy.reporting.localization.Localization(__file__, 703, 8), getitem___108391, int_108388)
    
    # Assigning a type to the variable 'tuple_var_assignment_107414' (line 703)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 703, 8), 'tuple_var_assignment_107414', subscript_call_result_108392)
    
    # Assigning a Subscript to a Name (line 703):
    
    # Obtaining the type of the subscript
    int_108393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 703, 8), 'int')
    # Getting the type of 'sample' (line 703)
    sample_108394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 15), 'sample')
    # Obtaining the member 'shape' of a type (line 703)
    shape_108395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 703, 15), sample_108394, 'shape')
    # Obtaining the member '__getitem__' of a type (line 703)
    getitem___108396 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 703, 8), shape_108395, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 703)
    subscript_call_result_108397 = invoke(stypy.reporting.localization.Localization(__file__, 703, 8), getitem___108396, int_108393)
    
    # Assigning a type to the variable 'tuple_var_assignment_107415' (line 703)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 703, 8), 'tuple_var_assignment_107415', subscript_call_result_108397)
    
    # Assigning a Name to a Name (line 703):
    # Getting the type of 'tuple_var_assignment_107414' (line 703)
    tuple_var_assignment_107414_108398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 8), 'tuple_var_assignment_107414')
    # Assigning a type to the variable 'N' (line 703)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 703, 8), 'N', tuple_var_assignment_107414_108398)
    
    # Assigning a Name to a Name (line 703):
    # Getting the type of 'tuple_var_assignment_107415' (line 703)
    tuple_var_assignment_107415_108399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 8), 'tuple_var_assignment_107415')
    # Assigning a type to the variable 'D' (line 703)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 703, 11), 'D', tuple_var_assignment_107415_108399)
    # SSA branch for the except part of a try statement (line 701)
    # SSA branch for the except 'Tuple' branch of a try statement (line 701)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Attribute to a Name (line 706):
    
    # Assigning a Attribute to a Name (line 706):
    
    # Call to atleast_2d(...): (line 706)
    # Processing the call arguments (line 706)
    # Getting the type of 'sample' (line 706)
    sample_108401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 28), 'sample', False)
    # Processing the call keyword arguments (line 706)
    kwargs_108402 = {}
    # Getting the type of 'atleast_2d' (line 706)
    atleast_2d_108400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 17), 'atleast_2d', False)
    # Calling atleast_2d(args, kwargs) (line 706)
    atleast_2d_call_result_108403 = invoke(stypy.reporting.localization.Localization(__file__, 706, 17), atleast_2d_108400, *[sample_108401], **kwargs_108402)
    
    # Obtaining the member 'T' of a type (line 706)
    T_108404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 706, 17), atleast_2d_call_result_108403, 'T')
    # Assigning a type to the variable 'sample' (line 706)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 706, 8), 'sample', T_108404)
    
    # Assigning a Attribute to a Tuple (line 707):
    
    # Assigning a Subscript to a Name (line 707):
    
    # Obtaining the type of the subscript
    int_108405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 707, 8), 'int')
    # Getting the type of 'sample' (line 707)
    sample_108406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 15), 'sample')
    # Obtaining the member 'shape' of a type (line 707)
    shape_108407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 707, 15), sample_108406, 'shape')
    # Obtaining the member '__getitem__' of a type (line 707)
    getitem___108408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 707, 8), shape_108407, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 707)
    subscript_call_result_108409 = invoke(stypy.reporting.localization.Localization(__file__, 707, 8), getitem___108408, int_108405)
    
    # Assigning a type to the variable 'tuple_var_assignment_107416' (line 707)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 707, 8), 'tuple_var_assignment_107416', subscript_call_result_108409)
    
    # Assigning a Subscript to a Name (line 707):
    
    # Obtaining the type of the subscript
    int_108410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 707, 8), 'int')
    # Getting the type of 'sample' (line 707)
    sample_108411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 15), 'sample')
    # Obtaining the member 'shape' of a type (line 707)
    shape_108412 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 707, 15), sample_108411, 'shape')
    # Obtaining the member '__getitem__' of a type (line 707)
    getitem___108413 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 707, 8), shape_108412, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 707)
    subscript_call_result_108414 = invoke(stypy.reporting.localization.Localization(__file__, 707, 8), getitem___108413, int_108410)
    
    # Assigning a type to the variable 'tuple_var_assignment_107417' (line 707)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 707, 8), 'tuple_var_assignment_107417', subscript_call_result_108414)
    
    # Assigning a Name to a Name (line 707):
    # Getting the type of 'tuple_var_assignment_107416' (line 707)
    tuple_var_assignment_107416_108415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 8), 'tuple_var_assignment_107416')
    # Assigning a type to the variable 'N' (line 707)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 707, 8), 'N', tuple_var_assignment_107416_108415)
    
    # Assigning a Name to a Name (line 707):
    # Getting the type of 'tuple_var_assignment_107417' (line 707)
    tuple_var_assignment_107417_108416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 8), 'tuple_var_assignment_107417')
    # Assigning a type to the variable 'D' (line 707)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 707, 11), 'D', tuple_var_assignment_107417_108416)
    # SSA join for try-except statement (line 701)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 709):
    
    # Assigning a Call to a Name (line 709):
    
    # Call to empty(...): (line 709)
    # Processing the call arguments (line 709)
    # Getting the type of 'D' (line 709)
    D_108418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 17), 'D', False)
    # Getting the type of 'int' (line 709)
    int_108419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 20), 'int', False)
    # Processing the call keyword arguments (line 709)
    kwargs_108420 = {}
    # Getting the type of 'empty' (line 709)
    empty_108417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 11), 'empty', False)
    # Calling empty(args, kwargs) (line 709)
    empty_call_result_108421 = invoke(stypy.reporting.localization.Localization(__file__, 709, 11), empty_108417, *[D_108418, int_108419], **kwargs_108420)
    
    # Assigning a type to the variable 'nbin' (line 709)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 709, 4), 'nbin', empty_call_result_108421)
    
    # Assigning a BinOp to a Name (line 710):
    
    # Assigning a BinOp to a Name (line 710):
    # Getting the type of 'D' (line 710)
    D_108422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 12), 'D')
    
    # Obtaining an instance of the builtin type 'list' (line 710)
    list_108423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 710, 14), 'list')
    # Adding type elements to the builtin type 'list' instance (line 710)
    # Adding element type (line 710)
    # Getting the type of 'None' (line 710)
    None_108424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 15), 'None')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 710, 14), list_108423, None_108424)
    
    # Applying the binary operator '*' (line 710)
    result_mul_108425 = python_operator(stypy.reporting.localization.Localization(__file__, 710, 12), '*', D_108422, list_108423)
    
    # Assigning a type to the variable 'edges' (line 710)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 710, 4), 'edges', result_mul_108425)
    
    # Assigning a BinOp to a Name (line 711):
    
    # Assigning a BinOp to a Name (line 711):
    # Getting the type of 'D' (line 711)
    D_108426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 13), 'D')
    
    # Obtaining an instance of the builtin type 'list' (line 711)
    list_108427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 711, 15), 'list')
    # Adding type elements to the builtin type 'list' instance (line 711)
    # Adding element type (line 711)
    # Getting the type of 'None' (line 711)
    None_108428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 16), 'None')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 711, 15), list_108427, None_108428)
    
    # Applying the binary operator '*' (line 711)
    result_mul_108429 = python_operator(stypy.reporting.localization.Localization(__file__, 711, 13), '*', D_108426, list_108427)
    
    # Assigning a type to the variable 'dedges' (line 711)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 711, 4), 'dedges', result_mul_108429)
    
    # Type idiom detected: calculating its left and rigth part (line 712)
    # Getting the type of 'weights' (line 712)
    weights_108430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 4), 'weights')
    # Getting the type of 'None' (line 712)
    None_108431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 22), 'None')
    
    (may_be_108432, more_types_in_union_108433) = may_not_be_none(weights_108430, None_108431)

    if may_be_108432:

        if more_types_in_union_108433:
            # Runtime conditional SSA (line 712)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 713):
        
        # Assigning a Call to a Name (line 713):
        
        # Call to asarray(...): (line 713)
        # Processing the call arguments (line 713)
        # Getting the type of 'weights' (line 713)
        weights_108435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 26), 'weights', False)
        # Processing the call keyword arguments (line 713)
        kwargs_108436 = {}
        # Getting the type of 'asarray' (line 713)
        asarray_108434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 18), 'asarray', False)
        # Calling asarray(args, kwargs) (line 713)
        asarray_call_result_108437 = invoke(stypy.reporting.localization.Localization(__file__, 713, 18), asarray_108434, *[weights_108435], **kwargs_108436)
        
        # Assigning a type to the variable 'weights' (line 713)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 713, 8), 'weights', asarray_call_result_108437)

        if more_types_in_union_108433:
            # SSA join for if statement (line 712)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # SSA begins for try-except statement (line 715)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 716):
    
    # Assigning a Call to a Name (line 716):
    
    # Call to len(...): (line 716)
    # Processing the call arguments (line 716)
    # Getting the type of 'bins' (line 716)
    bins_108439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 16), 'bins', False)
    # Processing the call keyword arguments (line 716)
    kwargs_108440 = {}
    # Getting the type of 'len' (line 716)
    len_108438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 12), 'len', False)
    # Calling len(args, kwargs) (line 716)
    len_call_result_108441 = invoke(stypy.reporting.localization.Localization(__file__, 716, 12), len_108438, *[bins_108439], **kwargs_108440)
    
    # Assigning a type to the variable 'M' (line 716)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 716, 8), 'M', len_call_result_108441)
    
    
    # Getting the type of 'M' (line 717)
    M_108442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 11), 'M')
    # Getting the type of 'D' (line 717)
    D_108443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 16), 'D')
    # Applying the binary operator '!=' (line 717)
    result_ne_108444 = python_operator(stypy.reporting.localization.Localization(__file__, 717, 11), '!=', M_108442, D_108443)
    
    # Testing the type of an if condition (line 717)
    if_condition_108445 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 717, 8), result_ne_108444)
    # Assigning a type to the variable 'if_condition_108445' (line 717)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 717, 8), 'if_condition_108445', if_condition_108445)
    # SSA begins for if statement (line 717)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 718)
    # Processing the call arguments (line 718)
    str_108447 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 719, 16), 'str', 'The dimension of bins must be equal to the dimension of the  sample x.')
    # Processing the call keyword arguments (line 718)
    kwargs_108448 = {}
    # Getting the type of 'ValueError' (line 718)
    ValueError_108446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 718)
    ValueError_call_result_108449 = invoke(stypy.reporting.localization.Localization(__file__, 718, 18), ValueError_108446, *[str_108447], **kwargs_108448)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 718, 12), ValueError_call_result_108449, 'raise parameter', BaseException)
    # SSA join for if statement (line 717)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the except part of a try statement (line 715)
    # SSA branch for the except 'TypeError' branch of a try statement (line 715)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a BinOp to a Name (line 723):
    
    # Assigning a BinOp to a Name (line 723):
    # Getting the type of 'D' (line 723)
    D_108450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 15), 'D')
    
    # Obtaining an instance of the builtin type 'list' (line 723)
    list_108451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 723, 17), 'list')
    # Adding type elements to the builtin type 'list' instance (line 723)
    # Adding element type (line 723)
    # Getting the type of 'bins' (line 723)
    bins_108452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 18), 'bins')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 723, 17), list_108451, bins_108452)
    
    # Applying the binary operator '*' (line 723)
    result_mul_108453 = python_operator(stypy.reporting.localization.Localization(__file__, 723, 15), '*', D_108450, list_108451)
    
    # Assigning a type to the variable 'bins' (line 723)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 723, 8), 'bins', result_mul_108453)
    # SSA join for try-except statement (line 715)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 727)
    # Getting the type of 'range' (line 727)
    range_108454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 7), 'range')
    # Getting the type of 'None' (line 727)
    None_108455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 16), 'None')
    
    (may_be_108456, more_types_in_union_108457) = may_be_none(range_108454, None_108455)

    if may_be_108456:

        if more_types_in_union_108457:
            # Runtime conditional SSA (line 727)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        
        # Getting the type of 'N' (line 729)
        N_108458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 11), 'N')
        int_108459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 729, 16), 'int')
        # Applying the binary operator '==' (line 729)
        result_eq_108460 = python_operator(stypy.reporting.localization.Localization(__file__, 729, 11), '==', N_108458, int_108459)
        
        # Testing the type of an if condition (line 729)
        if_condition_108461 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 729, 8), result_eq_108460)
        # Assigning a type to the variable 'if_condition_108461' (line 729)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 729, 8), 'if_condition_108461', if_condition_108461)
        # SSA begins for if statement (line 729)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 730):
        
        # Assigning a Call to a Name (line 730):
        
        # Call to zeros(...): (line 730)
        # Processing the call arguments (line 730)
        # Getting the type of 'D' (line 730)
        D_108463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 25), 'D', False)
        # Processing the call keyword arguments (line 730)
        kwargs_108464 = {}
        # Getting the type of 'zeros' (line 730)
        zeros_108462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 19), 'zeros', False)
        # Calling zeros(args, kwargs) (line 730)
        zeros_call_result_108465 = invoke(stypy.reporting.localization.Localization(__file__, 730, 19), zeros_108462, *[D_108463], **kwargs_108464)
        
        # Assigning a type to the variable 'smin' (line 730)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 730, 12), 'smin', zeros_call_result_108465)
        
        # Assigning a Call to a Name (line 731):
        
        # Assigning a Call to a Name (line 731):
        
        # Call to ones(...): (line 731)
        # Processing the call arguments (line 731)
        # Getting the type of 'D' (line 731)
        D_108467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 24), 'D', False)
        # Processing the call keyword arguments (line 731)
        kwargs_108468 = {}
        # Getting the type of 'ones' (line 731)
        ones_108466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 19), 'ones', False)
        # Calling ones(args, kwargs) (line 731)
        ones_call_result_108469 = invoke(stypy.reporting.localization.Localization(__file__, 731, 19), ones_108466, *[D_108467], **kwargs_108468)
        
        # Assigning a type to the variable 'smax' (line 731)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 731, 12), 'smax', ones_call_result_108469)
        # SSA branch for the else part of an if statement (line 729)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 733):
        
        # Assigning a Call to a Name (line 733):
        
        # Call to atleast_1d(...): (line 733)
        # Processing the call arguments (line 733)
        
        # Call to array(...): (line 733)
        # Processing the call arguments (line 733)
        
        # Call to min(...): (line 733)
        # Processing the call arguments (line 733)
        int_108474 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 733, 47), 'int')
        # Processing the call keyword arguments (line 733)
        kwargs_108475 = {}
        # Getting the type of 'sample' (line 733)
        sample_108472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 36), 'sample', False)
        # Obtaining the member 'min' of a type (line 733)
        min_108473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 733, 36), sample_108472, 'min')
        # Calling min(args, kwargs) (line 733)
        min_call_result_108476 = invoke(stypy.reporting.localization.Localization(__file__, 733, 36), min_108473, *[int_108474], **kwargs_108475)
        
        # Getting the type of 'float' (line 733)
        float_108477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 51), 'float', False)
        # Processing the call keyword arguments (line 733)
        kwargs_108478 = {}
        # Getting the type of 'array' (line 733)
        array_108471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 30), 'array', False)
        # Calling array(args, kwargs) (line 733)
        array_call_result_108479 = invoke(stypy.reporting.localization.Localization(__file__, 733, 30), array_108471, *[min_call_result_108476, float_108477], **kwargs_108478)
        
        # Processing the call keyword arguments (line 733)
        kwargs_108480 = {}
        # Getting the type of 'atleast_1d' (line 733)
        atleast_1d_108470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 19), 'atleast_1d', False)
        # Calling atleast_1d(args, kwargs) (line 733)
        atleast_1d_call_result_108481 = invoke(stypy.reporting.localization.Localization(__file__, 733, 19), atleast_1d_108470, *[array_call_result_108479], **kwargs_108480)
        
        # Assigning a type to the variable 'smin' (line 733)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 733, 12), 'smin', atleast_1d_call_result_108481)
        
        # Assigning a Call to a Name (line 734):
        
        # Assigning a Call to a Name (line 734):
        
        # Call to atleast_1d(...): (line 734)
        # Processing the call arguments (line 734)
        
        # Call to array(...): (line 734)
        # Processing the call arguments (line 734)
        
        # Call to max(...): (line 734)
        # Processing the call arguments (line 734)
        int_108486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 734, 47), 'int')
        # Processing the call keyword arguments (line 734)
        kwargs_108487 = {}
        # Getting the type of 'sample' (line 734)
        sample_108484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 36), 'sample', False)
        # Obtaining the member 'max' of a type (line 734)
        max_108485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 734, 36), sample_108484, 'max')
        # Calling max(args, kwargs) (line 734)
        max_call_result_108488 = invoke(stypy.reporting.localization.Localization(__file__, 734, 36), max_108485, *[int_108486], **kwargs_108487)
        
        # Getting the type of 'float' (line 734)
        float_108489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 51), 'float', False)
        # Processing the call keyword arguments (line 734)
        kwargs_108490 = {}
        # Getting the type of 'array' (line 734)
        array_108483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 30), 'array', False)
        # Calling array(args, kwargs) (line 734)
        array_call_result_108491 = invoke(stypy.reporting.localization.Localization(__file__, 734, 30), array_108483, *[max_call_result_108488, float_108489], **kwargs_108490)
        
        # Processing the call keyword arguments (line 734)
        kwargs_108492 = {}
        # Getting the type of 'atleast_1d' (line 734)
        atleast_1d_108482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 19), 'atleast_1d', False)
        # Calling atleast_1d(args, kwargs) (line 734)
        atleast_1d_call_result_108493 = invoke(stypy.reporting.localization.Localization(__file__, 734, 19), atleast_1d_108482, *[array_call_result_108491], **kwargs_108492)
        
        # Assigning a type to the variable 'smax' (line 734)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 734, 12), 'smax', atleast_1d_call_result_108493)
        # SSA join for if statement (line 729)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_108457:
            # Runtime conditional SSA for else branch (line 727)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_108456) or more_types_in_union_108457):
        
        
        
        # Call to all(...): (line 736)
        # Processing the call arguments (line 736)
        
        # Call to isfinite(...): (line 736)
        # Processing the call arguments (line 736)
        # Getting the type of 'range' (line 736)
        range_108498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 34), 'range', False)
        # Processing the call keyword arguments (line 736)
        kwargs_108499 = {}
        # Getting the type of 'np' (line 736)
        np_108496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 22), 'np', False)
        # Obtaining the member 'isfinite' of a type (line 736)
        isfinite_108497 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 736, 22), np_108496, 'isfinite')
        # Calling isfinite(args, kwargs) (line 736)
        isfinite_call_result_108500 = invoke(stypy.reporting.localization.Localization(__file__, 736, 22), isfinite_108497, *[range_108498], **kwargs_108499)
        
        # Processing the call keyword arguments (line 736)
        kwargs_108501 = {}
        # Getting the type of 'np' (line 736)
        np_108494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 15), 'np', False)
        # Obtaining the member 'all' of a type (line 736)
        all_108495 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 736, 15), np_108494, 'all')
        # Calling all(args, kwargs) (line 736)
        all_call_result_108502 = invoke(stypy.reporting.localization.Localization(__file__, 736, 15), all_108495, *[isfinite_call_result_108500], **kwargs_108501)
        
        # Applying the 'not' unary operator (line 736)
        result_not__108503 = python_operator(stypy.reporting.localization.Localization(__file__, 736, 11), 'not', all_call_result_108502)
        
        # Testing the type of an if condition (line 736)
        if_condition_108504 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 736, 8), result_not__108503)
        # Assigning a type to the variable 'if_condition_108504' (line 736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 736, 8), 'if_condition_108504', if_condition_108504)
        # SSA begins for if statement (line 736)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 737)
        # Processing the call arguments (line 737)
        str_108506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 738, 16), 'str', 'range parameter must be finite.')
        # Processing the call keyword arguments (line 737)
        kwargs_108507 = {}
        # Getting the type of 'ValueError' (line 737)
        ValueError_108505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 737)
        ValueError_call_result_108508 = invoke(stypy.reporting.localization.Localization(__file__, 737, 18), ValueError_108505, *[str_108506], **kwargs_108507)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 737, 12), ValueError_call_result_108508, 'raise parameter', BaseException)
        # SSA join for if statement (line 736)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 739):
        
        # Assigning a Call to a Name (line 739):
        
        # Call to zeros(...): (line 739)
        # Processing the call arguments (line 739)
        # Getting the type of 'D' (line 739)
        D_108510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 21), 'D', False)
        # Processing the call keyword arguments (line 739)
        kwargs_108511 = {}
        # Getting the type of 'zeros' (line 739)
        zeros_108509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 15), 'zeros', False)
        # Calling zeros(args, kwargs) (line 739)
        zeros_call_result_108512 = invoke(stypy.reporting.localization.Localization(__file__, 739, 15), zeros_108509, *[D_108510], **kwargs_108511)
        
        # Assigning a type to the variable 'smin' (line 739)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 739, 8), 'smin', zeros_call_result_108512)
        
        # Assigning a Call to a Name (line 740):
        
        # Assigning a Call to a Name (line 740):
        
        # Call to zeros(...): (line 740)
        # Processing the call arguments (line 740)
        # Getting the type of 'D' (line 740)
        D_108514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 21), 'D', False)
        # Processing the call keyword arguments (line 740)
        kwargs_108515 = {}
        # Getting the type of 'zeros' (line 740)
        zeros_108513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 15), 'zeros', False)
        # Calling zeros(args, kwargs) (line 740)
        zeros_call_result_108516 = invoke(stypy.reporting.localization.Localization(__file__, 740, 15), zeros_108513, *[D_108514], **kwargs_108515)
        
        # Assigning a type to the variable 'smax' (line 740)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 740, 8), 'smax', zeros_call_result_108516)
        
        
        # Call to arange(...): (line 741)
        # Processing the call arguments (line 741)
        # Getting the type of 'D' (line 741)
        D_108518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 24), 'D', False)
        # Processing the call keyword arguments (line 741)
        kwargs_108519 = {}
        # Getting the type of 'arange' (line 741)
        arange_108517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 17), 'arange', False)
        # Calling arange(args, kwargs) (line 741)
        arange_call_result_108520 = invoke(stypy.reporting.localization.Localization(__file__, 741, 17), arange_108517, *[D_108518], **kwargs_108519)
        
        # Testing the type of a for loop iterable (line 741)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 741, 8), arange_call_result_108520)
        # Getting the type of the for loop variable (line 741)
        for_loop_var_108521 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 741, 8), arange_call_result_108520)
        # Assigning a type to the variable 'i' (line 741)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 741, 8), 'i', for_loop_var_108521)
        # SSA begins for a for statement (line 741)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Subscript to a Tuple (line 742):
        
        # Assigning a Subscript to a Name (line 742):
        
        # Obtaining the type of the subscript
        int_108522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 742, 12), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 742)
        i_108523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 37), 'i')
        # Getting the type of 'range' (line 742)
        range_108524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 31), 'range')
        # Obtaining the member '__getitem__' of a type (line 742)
        getitem___108525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 742, 31), range_108524, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 742)
        subscript_call_result_108526 = invoke(stypy.reporting.localization.Localization(__file__, 742, 31), getitem___108525, i_108523)
        
        # Obtaining the member '__getitem__' of a type (line 742)
        getitem___108527 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 742, 12), subscript_call_result_108526, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 742)
        subscript_call_result_108528 = invoke(stypy.reporting.localization.Localization(__file__, 742, 12), getitem___108527, int_108522)
        
        # Assigning a type to the variable 'tuple_var_assignment_107418' (line 742)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 742, 12), 'tuple_var_assignment_107418', subscript_call_result_108528)
        
        # Assigning a Subscript to a Name (line 742):
        
        # Obtaining the type of the subscript
        int_108529 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 742, 12), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 742)
        i_108530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 37), 'i')
        # Getting the type of 'range' (line 742)
        range_108531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 31), 'range')
        # Obtaining the member '__getitem__' of a type (line 742)
        getitem___108532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 742, 31), range_108531, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 742)
        subscript_call_result_108533 = invoke(stypy.reporting.localization.Localization(__file__, 742, 31), getitem___108532, i_108530)
        
        # Obtaining the member '__getitem__' of a type (line 742)
        getitem___108534 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 742, 12), subscript_call_result_108533, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 742)
        subscript_call_result_108535 = invoke(stypy.reporting.localization.Localization(__file__, 742, 12), getitem___108534, int_108529)
        
        # Assigning a type to the variable 'tuple_var_assignment_107419' (line 742)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 742, 12), 'tuple_var_assignment_107419', subscript_call_result_108535)
        
        # Assigning a Name to a Subscript (line 742):
        # Getting the type of 'tuple_var_assignment_107418' (line 742)
        tuple_var_assignment_107418_108536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 12), 'tuple_var_assignment_107418')
        # Getting the type of 'smin' (line 742)
        smin_108537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 12), 'smin')
        # Getting the type of 'i' (line 742)
        i_108538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 17), 'i')
        # Storing an element on a container (line 742)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 742, 12), smin_108537, (i_108538, tuple_var_assignment_107418_108536))
        
        # Assigning a Name to a Subscript (line 742):
        # Getting the type of 'tuple_var_assignment_107419' (line 742)
        tuple_var_assignment_107419_108539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 12), 'tuple_var_assignment_107419')
        # Getting the type of 'smax' (line 742)
        smax_108540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 21), 'smax')
        # Getting the type of 'i' (line 742)
        i_108541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 26), 'i')
        # Storing an element on a container (line 742)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 742, 21), smax_108540, (i_108541, tuple_var_assignment_107419_108539))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        

        if (may_be_108456 and more_types_in_union_108457):
            # SSA join for if statement (line 727)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Call to arange(...): (line 745)
    # Processing the call arguments (line 745)
    
    # Call to len(...): (line 745)
    # Processing the call arguments (line 745)
    # Getting the type of 'smin' (line 745)
    smin_108544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 24), 'smin', False)
    # Processing the call keyword arguments (line 745)
    kwargs_108545 = {}
    # Getting the type of 'len' (line 745)
    len_108543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 20), 'len', False)
    # Calling len(args, kwargs) (line 745)
    len_call_result_108546 = invoke(stypy.reporting.localization.Localization(__file__, 745, 20), len_108543, *[smin_108544], **kwargs_108545)
    
    # Processing the call keyword arguments (line 745)
    kwargs_108547 = {}
    # Getting the type of 'arange' (line 745)
    arange_108542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 13), 'arange', False)
    # Calling arange(args, kwargs) (line 745)
    arange_call_result_108548 = invoke(stypy.reporting.localization.Localization(__file__, 745, 13), arange_108542, *[len_call_result_108546], **kwargs_108547)
    
    # Testing the type of a for loop iterable (line 745)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 745, 4), arange_call_result_108548)
    # Getting the type of the for loop variable (line 745)
    for_loop_var_108549 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 745, 4), arange_call_result_108548)
    # Assigning a type to the variable 'i' (line 745)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 745, 4), 'i', for_loop_var_108549)
    # SSA begins for a for statement (line 745)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 746)
    i_108550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 16), 'i')
    # Getting the type of 'smin' (line 746)
    smin_108551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 11), 'smin')
    # Obtaining the member '__getitem__' of a type (line 746)
    getitem___108552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 746, 11), smin_108551, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 746)
    subscript_call_result_108553 = invoke(stypy.reporting.localization.Localization(__file__, 746, 11), getitem___108552, i_108550)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 746)
    i_108554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 27), 'i')
    # Getting the type of 'smax' (line 746)
    smax_108555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 22), 'smax')
    # Obtaining the member '__getitem__' of a type (line 746)
    getitem___108556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 746, 22), smax_108555, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 746)
    subscript_call_result_108557 = invoke(stypy.reporting.localization.Localization(__file__, 746, 22), getitem___108556, i_108554)
    
    # Applying the binary operator '==' (line 746)
    result_eq_108558 = python_operator(stypy.reporting.localization.Localization(__file__, 746, 11), '==', subscript_call_result_108553, subscript_call_result_108557)
    
    # Testing the type of an if condition (line 746)
    if_condition_108559 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 746, 8), result_eq_108558)
    # Assigning a type to the variable 'if_condition_108559' (line 746)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 746, 8), 'if_condition_108559', if_condition_108559)
    # SSA begins for if statement (line 746)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Subscript (line 747):
    
    # Assigning a BinOp to a Subscript (line 747):
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 747)
    i_108560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 747, 27), 'i')
    # Getting the type of 'smin' (line 747)
    smin_108561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 747, 22), 'smin')
    # Obtaining the member '__getitem__' of a type (line 747)
    getitem___108562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 747, 22), smin_108561, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 747)
    subscript_call_result_108563 = invoke(stypy.reporting.localization.Localization(__file__, 747, 22), getitem___108562, i_108560)
    
    float_108564 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 747, 32), 'float')
    # Applying the binary operator '-' (line 747)
    result_sub_108565 = python_operator(stypy.reporting.localization.Localization(__file__, 747, 22), '-', subscript_call_result_108563, float_108564)
    
    # Getting the type of 'smin' (line 747)
    smin_108566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 747, 12), 'smin')
    # Getting the type of 'i' (line 747)
    i_108567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 747, 17), 'i')
    # Storing an element on a container (line 747)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 747, 12), smin_108566, (i_108567, result_sub_108565))
    
    # Assigning a BinOp to a Subscript (line 748):
    
    # Assigning a BinOp to a Subscript (line 748):
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 748)
    i_108568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 27), 'i')
    # Getting the type of 'smax' (line 748)
    smax_108569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 22), 'smax')
    # Obtaining the member '__getitem__' of a type (line 748)
    getitem___108570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 748, 22), smax_108569, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 748)
    subscript_call_result_108571 = invoke(stypy.reporting.localization.Localization(__file__, 748, 22), getitem___108570, i_108568)
    
    float_108572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 748, 32), 'float')
    # Applying the binary operator '+' (line 748)
    result_add_108573 = python_operator(stypy.reporting.localization.Localization(__file__, 748, 22), '+', subscript_call_result_108571, float_108572)
    
    # Getting the type of 'smax' (line 748)
    smax_108574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 12), 'smax')
    # Getting the type of 'i' (line 748)
    i_108575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 17), 'i')
    # Storing an element on a container (line 748)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 748, 12), smax_108574, (i_108575, result_add_108573))
    # SSA join for if statement (line 746)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to issubdtype(...): (line 751)
    # Processing the call arguments (line 751)
    # Getting the type of 'sample' (line 751)
    sample_108578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 21), 'sample', False)
    # Obtaining the member 'dtype' of a type (line 751)
    dtype_108579 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 751, 21), sample_108578, 'dtype')
    # Getting the type of 'np' (line 751)
    np_108580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 35), 'np', False)
    # Obtaining the member 'inexact' of a type (line 751)
    inexact_108581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 751, 35), np_108580, 'inexact')
    # Processing the call keyword arguments (line 751)
    kwargs_108582 = {}
    # Getting the type of 'np' (line 751)
    np_108576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 7), 'np', False)
    # Obtaining the member 'issubdtype' of a type (line 751)
    issubdtype_108577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 751, 7), np_108576, 'issubdtype')
    # Calling issubdtype(args, kwargs) (line 751)
    issubdtype_call_result_108583 = invoke(stypy.reporting.localization.Localization(__file__, 751, 7), issubdtype_108577, *[dtype_108579, inexact_108581], **kwargs_108582)
    
    # Testing the type of an if condition (line 751)
    if_condition_108584 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 751, 4), issubdtype_call_result_108583)
    # Assigning a type to the variable 'if_condition_108584' (line 751)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 751, 4), 'if_condition_108584', if_condition_108584)
    # SSA begins for if statement (line 751)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 752):
    
    # Assigning a Attribute to a Name (line 752):
    # Getting the type of 'sample' (line 752)
    sample_108585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 18), 'sample')
    # Obtaining the member 'dtype' of a type (line 752)
    dtype_108586 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 752, 18), sample_108585, 'dtype')
    # Assigning a type to the variable 'edge_dt' (line 752)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 752, 8), 'edge_dt', dtype_108586)
    # SSA branch for the else part of an if statement (line 751)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 754):
    
    # Assigning a Name to a Name (line 754):
    # Getting the type of 'float' (line 754)
    float_108587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 18), 'float')
    # Assigning a type to the variable 'edge_dt' (line 754)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 754, 8), 'edge_dt', float_108587)
    # SSA join for if statement (line 751)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to arange(...): (line 756)
    # Processing the call arguments (line 756)
    # Getting the type of 'D' (line 756)
    D_108589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 20), 'D', False)
    # Processing the call keyword arguments (line 756)
    kwargs_108590 = {}
    # Getting the type of 'arange' (line 756)
    arange_108588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 13), 'arange', False)
    # Calling arange(args, kwargs) (line 756)
    arange_call_result_108591 = invoke(stypy.reporting.localization.Localization(__file__, 756, 13), arange_108588, *[D_108589], **kwargs_108590)
    
    # Testing the type of a for loop iterable (line 756)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 756, 4), arange_call_result_108591)
    # Getting the type of the for loop variable (line 756)
    for_loop_var_108592 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 756, 4), arange_call_result_108591)
    # Assigning a type to the variable 'i' (line 756)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 756, 4), 'i', for_loop_var_108592)
    # SSA begins for a for statement (line 756)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Call to isscalar(...): (line 757)
    # Processing the call arguments (line 757)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 757)
    i_108594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 25), 'i', False)
    # Getting the type of 'bins' (line 757)
    bins_108595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 20), 'bins', False)
    # Obtaining the member '__getitem__' of a type (line 757)
    getitem___108596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 757, 20), bins_108595, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 757)
    subscript_call_result_108597 = invoke(stypy.reporting.localization.Localization(__file__, 757, 20), getitem___108596, i_108594)
    
    # Processing the call keyword arguments (line 757)
    kwargs_108598 = {}
    # Getting the type of 'isscalar' (line 757)
    isscalar_108593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 11), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 757)
    isscalar_call_result_108599 = invoke(stypy.reporting.localization.Localization(__file__, 757, 11), isscalar_108593, *[subscript_call_result_108597], **kwargs_108598)
    
    # Testing the type of an if condition (line 757)
    if_condition_108600 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 757, 8), isscalar_call_result_108599)
    # Assigning a type to the variable 'if_condition_108600' (line 757)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 757, 8), 'if_condition_108600', if_condition_108600)
    # SSA begins for if statement (line 757)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 758)
    i_108601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 20), 'i')
    # Getting the type of 'bins' (line 758)
    bins_108602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 15), 'bins')
    # Obtaining the member '__getitem__' of a type (line 758)
    getitem___108603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 758, 15), bins_108602, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 758)
    subscript_call_result_108604 = invoke(stypy.reporting.localization.Localization(__file__, 758, 15), getitem___108603, i_108601)
    
    int_108605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 758, 25), 'int')
    # Applying the binary operator '<' (line 758)
    result_lt_108606 = python_operator(stypy.reporting.localization.Localization(__file__, 758, 15), '<', subscript_call_result_108604, int_108605)
    
    # Testing the type of an if condition (line 758)
    if_condition_108607 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 758, 12), result_lt_108606)
    # Assigning a type to the variable 'if_condition_108607' (line 758)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 758, 12), 'if_condition_108607', if_condition_108607)
    # SSA begins for if statement (line 758)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 759)
    # Processing the call arguments (line 759)
    str_108609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 760, 20), 'str', 'Element at index %s in `bins` should be a positive integer.')
    # Getting the type of 'i' (line 761)
    i_108610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 33), 'i', False)
    # Applying the binary operator '%' (line 760)
    result_mod_108611 = python_operator(stypy.reporting.localization.Localization(__file__, 760, 20), '%', str_108609, i_108610)
    
    # Processing the call keyword arguments (line 759)
    kwargs_108612 = {}
    # Getting the type of 'ValueError' (line 759)
    ValueError_108608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 22), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 759)
    ValueError_call_result_108613 = invoke(stypy.reporting.localization.Localization(__file__, 759, 22), ValueError_108608, *[result_mod_108611], **kwargs_108612)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 759, 16), ValueError_call_result_108613, 'raise parameter', BaseException)
    # SSA join for if statement (line 758)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Subscript (line 762):
    
    # Assigning a BinOp to a Subscript (line 762):
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 762)
    i_108614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 27), 'i')
    # Getting the type of 'bins' (line 762)
    bins_108615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 22), 'bins')
    # Obtaining the member '__getitem__' of a type (line 762)
    getitem___108616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 762, 22), bins_108615, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 762)
    subscript_call_result_108617 = invoke(stypy.reporting.localization.Localization(__file__, 762, 22), getitem___108616, i_108614)
    
    int_108618 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 762, 32), 'int')
    # Applying the binary operator '+' (line 762)
    result_add_108619 = python_operator(stypy.reporting.localization.Localization(__file__, 762, 22), '+', subscript_call_result_108617, int_108618)
    
    # Getting the type of 'nbin' (line 762)
    nbin_108620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 12), 'nbin')
    # Getting the type of 'i' (line 762)
    i_108621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 17), 'i')
    # Storing an element on a container (line 762)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 762, 12), nbin_108620, (i_108621, result_add_108619))
    
    # Assigning a Call to a Subscript (line 763):
    
    # Assigning a Call to a Subscript (line 763):
    
    # Call to linspace(...): (line 763)
    # Processing the call arguments (line 763)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 763)
    i_108623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 37), 'i', False)
    # Getting the type of 'smin' (line 763)
    smin_108624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 32), 'smin', False)
    # Obtaining the member '__getitem__' of a type (line 763)
    getitem___108625 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 763, 32), smin_108624, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 763)
    subscript_call_result_108626 = invoke(stypy.reporting.localization.Localization(__file__, 763, 32), getitem___108625, i_108623)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 763)
    i_108627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 46), 'i', False)
    # Getting the type of 'smax' (line 763)
    smax_108628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 41), 'smax', False)
    # Obtaining the member '__getitem__' of a type (line 763)
    getitem___108629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 763, 41), smax_108628, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 763)
    subscript_call_result_108630 = invoke(stypy.reporting.localization.Localization(__file__, 763, 41), getitem___108629, i_108627)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 763)
    i_108631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 55), 'i', False)
    # Getting the type of 'nbin' (line 763)
    nbin_108632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 50), 'nbin', False)
    # Obtaining the member '__getitem__' of a type (line 763)
    getitem___108633 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 763, 50), nbin_108632, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 763)
    subscript_call_result_108634 = invoke(stypy.reporting.localization.Localization(__file__, 763, 50), getitem___108633, i_108631)
    
    int_108635 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 763, 58), 'int')
    # Applying the binary operator '-' (line 763)
    result_sub_108636 = python_operator(stypy.reporting.localization.Localization(__file__, 763, 50), '-', subscript_call_result_108634, int_108635)
    
    # Processing the call keyword arguments (line 763)
    # Getting the type of 'edge_dt' (line 763)
    edge_dt_108637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 67), 'edge_dt', False)
    keyword_108638 = edge_dt_108637
    kwargs_108639 = {'dtype': keyword_108638}
    # Getting the type of 'linspace' (line 763)
    linspace_108622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 23), 'linspace', False)
    # Calling linspace(args, kwargs) (line 763)
    linspace_call_result_108640 = invoke(stypy.reporting.localization.Localization(__file__, 763, 23), linspace_108622, *[subscript_call_result_108626, subscript_call_result_108630, result_sub_108636], **kwargs_108639)
    
    # Getting the type of 'edges' (line 763)
    edges_108641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 12), 'edges')
    # Getting the type of 'i' (line 763)
    i_108642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 18), 'i')
    # Storing an element on a container (line 763)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 763, 12), edges_108641, (i_108642, linspace_call_result_108640))
    # SSA branch for the else part of an if statement (line 757)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Subscript (line 765):
    
    # Assigning a Call to a Subscript (line 765):
    
    # Call to asarray(...): (line 765)
    # Processing the call arguments (line 765)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 765)
    i_108644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 36), 'i', False)
    # Getting the type of 'bins' (line 765)
    bins_108645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 31), 'bins', False)
    # Obtaining the member '__getitem__' of a type (line 765)
    getitem___108646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 765, 31), bins_108645, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 765)
    subscript_call_result_108647 = invoke(stypy.reporting.localization.Localization(__file__, 765, 31), getitem___108646, i_108644)
    
    # Getting the type of 'edge_dt' (line 765)
    edge_dt_108648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 40), 'edge_dt', False)
    # Processing the call keyword arguments (line 765)
    kwargs_108649 = {}
    # Getting the type of 'asarray' (line 765)
    asarray_108643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 23), 'asarray', False)
    # Calling asarray(args, kwargs) (line 765)
    asarray_call_result_108650 = invoke(stypy.reporting.localization.Localization(__file__, 765, 23), asarray_108643, *[subscript_call_result_108647, edge_dt_108648], **kwargs_108649)
    
    # Getting the type of 'edges' (line 765)
    edges_108651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 12), 'edges')
    # Getting the type of 'i' (line 765)
    i_108652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 18), 'i')
    # Storing an element on a container (line 765)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 765, 12), edges_108651, (i_108652, asarray_call_result_108650))
    
    # Assigning a BinOp to a Subscript (line 766):
    
    # Assigning a BinOp to a Subscript (line 766):
    
    # Call to len(...): (line 766)
    # Processing the call arguments (line 766)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 766)
    i_108654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 766, 32), 'i', False)
    # Getting the type of 'edges' (line 766)
    edges_108655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 766, 26), 'edges', False)
    # Obtaining the member '__getitem__' of a type (line 766)
    getitem___108656 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 766, 26), edges_108655, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 766)
    subscript_call_result_108657 = invoke(stypy.reporting.localization.Localization(__file__, 766, 26), getitem___108656, i_108654)
    
    # Processing the call keyword arguments (line 766)
    kwargs_108658 = {}
    # Getting the type of 'len' (line 766)
    len_108653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 766, 22), 'len', False)
    # Calling len(args, kwargs) (line 766)
    len_call_result_108659 = invoke(stypy.reporting.localization.Localization(__file__, 766, 22), len_108653, *[subscript_call_result_108657], **kwargs_108658)
    
    int_108660 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 766, 38), 'int')
    # Applying the binary operator '+' (line 766)
    result_add_108661 = python_operator(stypy.reporting.localization.Localization(__file__, 766, 22), '+', len_call_result_108659, int_108660)
    
    # Getting the type of 'nbin' (line 766)
    nbin_108662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 766, 12), 'nbin')
    # Getting the type of 'i' (line 766)
    i_108663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 766, 17), 'i')
    # Storing an element on a container (line 766)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 766, 12), nbin_108662, (i_108663, result_add_108661))
    # SSA join for if statement (line 757)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Subscript (line 767):
    
    # Assigning a Call to a Subscript (line 767):
    
    # Call to diff(...): (line 767)
    # Processing the call arguments (line 767)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 767)
    i_108665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 31), 'i', False)
    # Getting the type of 'edges' (line 767)
    edges_108666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 25), 'edges', False)
    # Obtaining the member '__getitem__' of a type (line 767)
    getitem___108667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 767, 25), edges_108666, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 767)
    subscript_call_result_108668 = invoke(stypy.reporting.localization.Localization(__file__, 767, 25), getitem___108667, i_108665)
    
    # Processing the call keyword arguments (line 767)
    kwargs_108669 = {}
    # Getting the type of 'diff' (line 767)
    diff_108664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 20), 'diff', False)
    # Calling diff(args, kwargs) (line 767)
    diff_call_result_108670 = invoke(stypy.reporting.localization.Localization(__file__, 767, 20), diff_108664, *[subscript_call_result_108668], **kwargs_108669)
    
    # Getting the type of 'dedges' (line 767)
    dedges_108671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 8), 'dedges')
    # Getting the type of 'i' (line 767)
    i_108672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 15), 'i')
    # Storing an element on a container (line 767)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 767, 8), dedges_108671, (i_108672, diff_call_result_108670))
    
    
    # Call to any(...): (line 768)
    # Processing the call arguments (line 768)
    
    
    # Call to asarray(...): (line 768)
    # Processing the call arguments (line 768)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 768)
    i_108677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 36), 'i', False)
    # Getting the type of 'dedges' (line 768)
    dedges_108678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 29), 'dedges', False)
    # Obtaining the member '__getitem__' of a type (line 768)
    getitem___108679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 768, 29), dedges_108678, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 768)
    subscript_call_result_108680 = invoke(stypy.reporting.localization.Localization(__file__, 768, 29), getitem___108679, i_108677)
    
    # Processing the call keyword arguments (line 768)
    kwargs_108681 = {}
    # Getting the type of 'np' (line 768)
    np_108675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 18), 'np', False)
    # Obtaining the member 'asarray' of a type (line 768)
    asarray_108676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 768, 18), np_108675, 'asarray')
    # Calling asarray(args, kwargs) (line 768)
    asarray_call_result_108682 = invoke(stypy.reporting.localization.Localization(__file__, 768, 18), asarray_108676, *[subscript_call_result_108680], **kwargs_108681)
    
    int_108683 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 768, 43), 'int')
    # Applying the binary operator '<=' (line 768)
    result_le_108684 = python_operator(stypy.reporting.localization.Localization(__file__, 768, 18), '<=', asarray_call_result_108682, int_108683)
    
    # Processing the call keyword arguments (line 768)
    kwargs_108685 = {}
    # Getting the type of 'np' (line 768)
    np_108673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 11), 'np', False)
    # Obtaining the member 'any' of a type (line 768)
    any_108674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 768, 11), np_108673, 'any')
    # Calling any(args, kwargs) (line 768)
    any_call_result_108686 = invoke(stypy.reporting.localization.Localization(__file__, 768, 11), any_108674, *[result_le_108684], **kwargs_108685)
    
    # Testing the type of an if condition (line 768)
    if_condition_108687 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 768, 8), any_call_result_108686)
    # Assigning a type to the variable 'if_condition_108687' (line 768)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 768, 8), 'if_condition_108687', if_condition_108687)
    # SSA begins for if statement (line 768)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 769)
    # Processing the call arguments (line 769)
    str_108689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 770, 16), 'str', 'Found bin edge of size <= 0. Did you specify `bins` withnon-monotonic sequence?')
    # Processing the call keyword arguments (line 769)
    kwargs_108690 = {}
    # Getting the type of 'ValueError' (line 769)
    ValueError_108688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 769)
    ValueError_call_result_108691 = invoke(stypy.reporting.localization.Localization(__file__, 769, 18), ValueError_108688, *[str_108689], **kwargs_108690)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 769, 12), ValueError_call_result_108691, 'raise parameter', BaseException)
    # SSA join for if statement (line 768)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 773):
    
    # Assigning a Call to a Name (line 773):
    
    # Call to asarray(...): (line 773)
    # Processing the call arguments (line 773)
    # Getting the type of 'nbin' (line 773)
    nbin_108693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 19), 'nbin', False)
    # Processing the call keyword arguments (line 773)
    kwargs_108694 = {}
    # Getting the type of 'asarray' (line 773)
    asarray_108692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 11), 'asarray', False)
    # Calling asarray(args, kwargs) (line 773)
    asarray_call_result_108695 = invoke(stypy.reporting.localization.Localization(__file__, 773, 11), asarray_108692, *[nbin_108693], **kwargs_108694)
    
    # Assigning a type to the variable 'nbin' (line 773)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 773, 4), 'nbin', asarray_call_result_108695)
    
    
    # Getting the type of 'N' (line 776)
    N_108696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 7), 'N')
    int_108697 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 776, 12), 'int')
    # Applying the binary operator '==' (line 776)
    result_eq_108698 = python_operator(stypy.reporting.localization.Localization(__file__, 776, 7), '==', N_108696, int_108697)
    
    # Testing the type of an if condition (line 776)
    if_condition_108699 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 776, 4), result_eq_108698)
    # Assigning a type to the variable 'if_condition_108699' (line 776)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 776, 4), 'if_condition_108699', if_condition_108699)
    # SSA begins for if statement (line 776)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 777)
    tuple_108700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 777, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 777)
    # Adding element type (line 777)
    
    # Call to zeros(...): (line 777)
    # Processing the call arguments (line 777)
    # Getting the type of 'nbin' (line 777)
    nbin_108703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 24), 'nbin', False)
    int_108704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 777, 29), 'int')
    # Applying the binary operator '-' (line 777)
    result_sub_108705 = python_operator(stypy.reporting.localization.Localization(__file__, 777, 24), '-', nbin_108703, int_108704)
    
    # Processing the call keyword arguments (line 777)
    kwargs_108706 = {}
    # Getting the type of 'np' (line 777)
    np_108701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 15), 'np', False)
    # Obtaining the member 'zeros' of a type (line 777)
    zeros_108702 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 777, 15), np_108701, 'zeros')
    # Calling zeros(args, kwargs) (line 777)
    zeros_call_result_108707 = invoke(stypy.reporting.localization.Localization(__file__, 777, 15), zeros_108702, *[result_sub_108705], **kwargs_108706)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 777, 15), tuple_108700, zeros_call_result_108707)
    # Adding element type (line 777)
    # Getting the type of 'edges' (line 777)
    edges_108708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 33), 'edges')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 777, 15), tuple_108700, edges_108708)
    
    # Assigning a type to the variable 'stypy_return_type' (line 777)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 777, 8), 'stypy_return_type', tuple_108700)
    # SSA join for if statement (line 776)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Dict to a Name (line 780):
    
    # Assigning a Dict to a Name (line 780):
    
    # Obtaining an instance of the builtin type 'dict' (line 780)
    dict_108709 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 780, 13), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 780)
    
    # Assigning a type to the variable 'Ncount' (line 780)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 780, 4), 'Ncount', dict_108709)
    
    
    # Call to arange(...): (line 781)
    # Processing the call arguments (line 781)
    # Getting the type of 'D' (line 781)
    D_108711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 20), 'D', False)
    # Processing the call keyword arguments (line 781)
    kwargs_108712 = {}
    # Getting the type of 'arange' (line 781)
    arange_108710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 13), 'arange', False)
    # Calling arange(args, kwargs) (line 781)
    arange_call_result_108713 = invoke(stypy.reporting.localization.Localization(__file__, 781, 13), arange_108710, *[D_108711], **kwargs_108712)
    
    # Testing the type of a for loop iterable (line 781)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 781, 4), arange_call_result_108713)
    # Getting the type of the for loop variable (line 781)
    for_loop_var_108714 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 781, 4), arange_call_result_108713)
    # Assigning a type to the variable 'i' (line 781)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 781, 4), 'i', for_loop_var_108714)
    # SSA begins for a for statement (line 781)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Subscript (line 782):
    
    # Assigning a Call to a Subscript (line 782):
    
    # Call to digitize(...): (line 782)
    # Processing the call arguments (line 782)
    
    # Obtaining the type of the subscript
    slice_108716 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 782, 29), None, None, None)
    # Getting the type of 'i' (line 782)
    i_108717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 39), 'i', False)
    # Getting the type of 'sample' (line 782)
    sample_108718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 29), 'sample', False)
    # Obtaining the member '__getitem__' of a type (line 782)
    getitem___108719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 782, 29), sample_108718, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 782)
    subscript_call_result_108720 = invoke(stypy.reporting.localization.Localization(__file__, 782, 29), getitem___108719, (slice_108716, i_108717))
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 782)
    i_108721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 49), 'i', False)
    # Getting the type of 'edges' (line 782)
    edges_108722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 43), 'edges', False)
    # Obtaining the member '__getitem__' of a type (line 782)
    getitem___108723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 782, 43), edges_108722, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 782)
    subscript_call_result_108724 = invoke(stypy.reporting.localization.Localization(__file__, 782, 43), getitem___108723, i_108721)
    
    # Processing the call keyword arguments (line 782)
    kwargs_108725 = {}
    # Getting the type of 'digitize' (line 782)
    digitize_108715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 20), 'digitize', False)
    # Calling digitize(args, kwargs) (line 782)
    digitize_call_result_108726 = invoke(stypy.reporting.localization.Localization(__file__, 782, 20), digitize_108715, *[subscript_call_result_108720, subscript_call_result_108724], **kwargs_108725)
    
    # Getting the type of 'Ncount' (line 782)
    Ncount_108727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 8), 'Ncount')
    # Getting the type of 'i' (line 782)
    i_108728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 782, 15), 'i')
    # Storing an element on a container (line 782)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 782, 8), Ncount_108727, (i_108728, digitize_call_result_108726))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to arange(...): (line 787)
    # Processing the call arguments (line 787)
    # Getting the type of 'D' (line 787)
    D_108730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 20), 'D', False)
    # Processing the call keyword arguments (line 787)
    kwargs_108731 = {}
    # Getting the type of 'arange' (line 787)
    arange_108729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 13), 'arange', False)
    # Calling arange(args, kwargs) (line 787)
    arange_call_result_108732 = invoke(stypy.reporting.localization.Localization(__file__, 787, 13), arange_108729, *[D_108730], **kwargs_108731)
    
    # Testing the type of a for loop iterable (line 787)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 787, 4), arange_call_result_108732)
    # Getting the type of the for loop variable (line 787)
    for_loop_var_108733 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 787, 4), arange_call_result_108732)
    # Assigning a type to the variable 'i' (line 787)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 787, 4), 'i', for_loop_var_108733)
    # SSA begins for a for statement (line 787)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 789):
    
    # Assigning a Call to a Name (line 789):
    
    # Call to min(...): (line 789)
    # Processing the call keyword arguments (line 789)
    kwargs_108739 = {}
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 789)
    i_108734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 25), 'i', False)
    # Getting the type of 'dedges' (line 789)
    dedges_108735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 18), 'dedges', False)
    # Obtaining the member '__getitem__' of a type (line 789)
    getitem___108736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 789, 18), dedges_108735, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 789)
    subscript_call_result_108737 = invoke(stypy.reporting.localization.Localization(__file__, 789, 18), getitem___108736, i_108734)
    
    # Obtaining the member 'min' of a type (line 789)
    min_108738 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 789, 18), subscript_call_result_108737, 'min')
    # Calling min(args, kwargs) (line 789)
    min_call_result_108740 = invoke(stypy.reporting.localization.Localization(__file__, 789, 18), min_108738, *[], **kwargs_108739)
    
    # Assigning a type to the variable 'mindiff' (line 789)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 789, 8), 'mindiff', min_call_result_108740)
    
    
    
    # Call to isinf(...): (line 790)
    # Processing the call arguments (line 790)
    # Getting the type of 'mindiff' (line 790)
    mindiff_108743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 24), 'mindiff', False)
    # Processing the call keyword arguments (line 790)
    kwargs_108744 = {}
    # Getting the type of 'np' (line 790)
    np_108741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 15), 'np', False)
    # Obtaining the member 'isinf' of a type (line 790)
    isinf_108742 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 790, 15), np_108741, 'isinf')
    # Calling isinf(args, kwargs) (line 790)
    isinf_call_result_108745 = invoke(stypy.reporting.localization.Localization(__file__, 790, 15), isinf_108742, *[mindiff_108743], **kwargs_108744)
    
    # Applying the 'not' unary operator (line 790)
    result_not__108746 = python_operator(stypy.reporting.localization.Localization(__file__, 790, 11), 'not', isinf_call_result_108745)
    
    # Testing the type of an if condition (line 790)
    if_condition_108747 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 790, 8), result_not__108746)
    # Assigning a type to the variable 'if_condition_108747' (line 790)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 790, 8), 'if_condition_108747', if_condition_108747)
    # SSA begins for if statement (line 790)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 791):
    
    # Assigning a BinOp to a Name (line 791):
    
    # Call to int(...): (line 791)
    # Processing the call arguments (line 791)
    
    
    # Call to log10(...): (line 791)
    # Processing the call arguments (line 791)
    # Getting the type of 'mindiff' (line 791)
    mindiff_108750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 33), 'mindiff', False)
    # Processing the call keyword arguments (line 791)
    kwargs_108751 = {}
    # Getting the type of 'log10' (line 791)
    log10_108749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 27), 'log10', False)
    # Calling log10(args, kwargs) (line 791)
    log10_call_result_108752 = invoke(stypy.reporting.localization.Localization(__file__, 791, 27), log10_108749, *[mindiff_108750], **kwargs_108751)
    
    # Applying the 'usub' unary operator (line 791)
    result___neg___108753 = python_operator(stypy.reporting.localization.Localization(__file__, 791, 26), 'usub', log10_call_result_108752)
    
    # Processing the call keyword arguments (line 791)
    kwargs_108754 = {}
    # Getting the type of 'int' (line 791)
    int_108748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 22), 'int', False)
    # Calling int(args, kwargs) (line 791)
    int_call_result_108755 = invoke(stypy.reporting.localization.Localization(__file__, 791, 22), int_108748, *[result___neg___108753], **kwargs_108754)
    
    int_108756 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 791, 45), 'int')
    # Applying the binary operator '+' (line 791)
    result_add_108757 = python_operator(stypy.reporting.localization.Localization(__file__, 791, 22), '+', int_call_result_108755, int_108756)
    
    # Assigning a type to the variable 'decimal' (line 791)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 791, 12), 'decimal', result_add_108757)
    
    # Assigning a Compare to a Name (line 793):
    
    # Assigning a Compare to a Name (line 793):
    
    
    # Obtaining the type of the subscript
    slice_108758 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 793, 37), None, None, None)
    # Getting the type of 'i' (line 793)
    i_108759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 47), 'i')
    # Getting the type of 'sample' (line 793)
    sample_108760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 37), 'sample')
    # Obtaining the member '__getitem__' of a type (line 793)
    getitem___108761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 793, 37), sample_108760, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 793)
    subscript_call_result_108762 = invoke(stypy.reporting.localization.Localization(__file__, 793, 37), getitem___108761, (slice_108758, i_108759))
    
    
    # Obtaining the type of the subscript
    int_108763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 793, 62), 'int')
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 793)
    i_108764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 59), 'i')
    # Getting the type of 'edges' (line 793)
    edges_108765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 53), 'edges')
    # Obtaining the member '__getitem__' of a type (line 793)
    getitem___108766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 793, 53), edges_108765, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 793)
    subscript_call_result_108767 = invoke(stypy.reporting.localization.Localization(__file__, 793, 53), getitem___108766, i_108764)
    
    # Obtaining the member '__getitem__' of a type (line 793)
    getitem___108768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 793, 53), subscript_call_result_108767, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 793)
    subscript_call_result_108769 = invoke(stypy.reporting.localization.Localization(__file__, 793, 53), getitem___108768, int_108763)
    
    # Applying the binary operator '>=' (line 793)
    result_ge_108770 = python_operator(stypy.reporting.localization.Localization(__file__, 793, 37), '>=', subscript_call_result_108762, subscript_call_result_108769)
    
    # Assigning a type to the variable 'not_smaller_than_edge' (line 793)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 793, 12), 'not_smaller_than_edge', result_ge_108770)
    
    # Assigning a Compare to a Name (line 794):
    
    # Assigning a Compare to a Name (line 794):
    
    
    # Call to around(...): (line 794)
    # Processing the call arguments (line 794)
    
    # Obtaining the type of the subscript
    slice_108772 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 794, 30), None, None, None)
    # Getting the type of 'i' (line 794)
    i_108773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 40), 'i', False)
    # Getting the type of 'sample' (line 794)
    sample_108774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 30), 'sample', False)
    # Obtaining the member '__getitem__' of a type (line 794)
    getitem___108775 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 794, 30), sample_108774, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 794)
    subscript_call_result_108776 = invoke(stypy.reporting.localization.Localization(__file__, 794, 30), getitem___108775, (slice_108772, i_108773))
    
    # Getting the type of 'decimal' (line 794)
    decimal_108777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 44), 'decimal', False)
    # Processing the call keyword arguments (line 794)
    kwargs_108778 = {}
    # Getting the type of 'around' (line 794)
    around_108771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 23), 'around', False)
    # Calling around(args, kwargs) (line 794)
    around_call_result_108779 = invoke(stypy.reporting.localization.Localization(__file__, 794, 23), around_108771, *[subscript_call_result_108776, decimal_108777], **kwargs_108778)
    
    
    # Call to around(...): (line 795)
    # Processing the call arguments (line 795)
    
    # Obtaining the type of the subscript
    int_108781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 795, 39), 'int')
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 795)
    i_108782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 795, 36), 'i', False)
    # Getting the type of 'edges' (line 795)
    edges_108783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 795, 30), 'edges', False)
    # Obtaining the member '__getitem__' of a type (line 795)
    getitem___108784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 795, 30), edges_108783, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 795)
    subscript_call_result_108785 = invoke(stypy.reporting.localization.Localization(__file__, 795, 30), getitem___108784, i_108782)
    
    # Obtaining the member '__getitem__' of a type (line 795)
    getitem___108786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 795, 30), subscript_call_result_108785, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 795)
    subscript_call_result_108787 = invoke(stypy.reporting.localization.Localization(__file__, 795, 30), getitem___108786, int_108781)
    
    # Getting the type of 'decimal' (line 795)
    decimal_108788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 795, 44), 'decimal', False)
    # Processing the call keyword arguments (line 795)
    kwargs_108789 = {}
    # Getting the type of 'around' (line 795)
    around_108780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 795, 23), 'around', False)
    # Calling around(args, kwargs) (line 795)
    around_call_result_108790 = invoke(stypy.reporting.localization.Localization(__file__, 795, 23), around_108780, *[subscript_call_result_108787, decimal_108788], **kwargs_108789)
    
    # Applying the binary operator '==' (line 794)
    result_eq_108791 = python_operator(stypy.reporting.localization.Localization(__file__, 794, 23), '==', around_call_result_108779, around_call_result_108790)
    
    # Assigning a type to the variable 'on_edge' (line 794)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 794, 12), 'on_edge', result_eq_108791)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 797)
    i_108792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 19), 'i')
    # Getting the type of 'Ncount' (line 797)
    Ncount_108793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 12), 'Ncount')
    # Obtaining the member '__getitem__' of a type (line 797)
    getitem___108794 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 797, 12), Ncount_108793, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 797)
    subscript_call_result_108795 = invoke(stypy.reporting.localization.Localization(__file__, 797, 12), getitem___108794, i_108792)
    
    
    # Obtaining the type of the subscript
    
    # Obtaining the type of the subscript
    int_108796 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 797, 61), 'int')
    
    # Call to where(...): (line 797)
    # Processing the call arguments (line 797)
    # Getting the type of 'on_edge' (line 797)
    on_edge_108798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 28), 'on_edge', False)
    # Getting the type of 'not_smaller_than_edge' (line 797)
    not_smaller_than_edge_108799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 38), 'not_smaller_than_edge', False)
    # Applying the binary operator '&' (line 797)
    result_and__108800 = python_operator(stypy.reporting.localization.Localization(__file__, 797, 28), '&', on_edge_108798, not_smaller_than_edge_108799)
    
    # Processing the call keyword arguments (line 797)
    kwargs_108801 = {}
    # Getting the type of 'where' (line 797)
    where_108797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 22), 'where', False)
    # Calling where(args, kwargs) (line 797)
    where_call_result_108802 = invoke(stypy.reporting.localization.Localization(__file__, 797, 22), where_108797, *[result_and__108800], **kwargs_108801)
    
    # Obtaining the member '__getitem__' of a type (line 797)
    getitem___108803 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 797, 22), where_call_result_108802, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 797)
    subscript_call_result_108804 = invoke(stypy.reporting.localization.Localization(__file__, 797, 22), getitem___108803, int_108796)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 797)
    i_108805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 19), 'i')
    # Getting the type of 'Ncount' (line 797)
    Ncount_108806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 12), 'Ncount')
    # Obtaining the member '__getitem__' of a type (line 797)
    getitem___108807 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 797, 12), Ncount_108806, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 797)
    subscript_call_result_108808 = invoke(stypy.reporting.localization.Localization(__file__, 797, 12), getitem___108807, i_108805)
    
    # Obtaining the member '__getitem__' of a type (line 797)
    getitem___108809 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 797, 12), subscript_call_result_108808, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 797)
    subscript_call_result_108810 = invoke(stypy.reporting.localization.Localization(__file__, 797, 12), getitem___108809, subscript_call_result_108804)
    
    int_108811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 797, 68), 'int')
    # Applying the binary operator '-=' (line 797)
    result_isub_108812 = python_operator(stypy.reporting.localization.Localization(__file__, 797, 12), '-=', subscript_call_result_108810, int_108811)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 797)
    i_108813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 19), 'i')
    # Getting the type of 'Ncount' (line 797)
    Ncount_108814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 12), 'Ncount')
    # Obtaining the member '__getitem__' of a type (line 797)
    getitem___108815 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 797, 12), Ncount_108814, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 797)
    subscript_call_result_108816 = invoke(stypy.reporting.localization.Localization(__file__, 797, 12), getitem___108815, i_108813)
    
    
    # Obtaining the type of the subscript
    int_108817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 797, 61), 'int')
    
    # Call to where(...): (line 797)
    # Processing the call arguments (line 797)
    # Getting the type of 'on_edge' (line 797)
    on_edge_108819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 28), 'on_edge', False)
    # Getting the type of 'not_smaller_than_edge' (line 797)
    not_smaller_than_edge_108820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 38), 'not_smaller_than_edge', False)
    # Applying the binary operator '&' (line 797)
    result_and__108821 = python_operator(stypy.reporting.localization.Localization(__file__, 797, 28), '&', on_edge_108819, not_smaller_than_edge_108820)
    
    # Processing the call keyword arguments (line 797)
    kwargs_108822 = {}
    # Getting the type of 'where' (line 797)
    where_108818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 22), 'where', False)
    # Calling where(args, kwargs) (line 797)
    where_call_result_108823 = invoke(stypy.reporting.localization.Localization(__file__, 797, 22), where_108818, *[result_and__108821], **kwargs_108822)
    
    # Obtaining the member '__getitem__' of a type (line 797)
    getitem___108824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 797, 22), where_call_result_108823, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 797)
    subscript_call_result_108825 = invoke(stypy.reporting.localization.Localization(__file__, 797, 22), getitem___108824, int_108817)
    
    # Storing an element on a container (line 797)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 797, 12), subscript_call_result_108816, (subscript_call_result_108825, result_isub_108812))
    
    # SSA join for if statement (line 790)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 802):
    
    # Assigning a Call to a Name (line 802):
    
    # Call to reshape(...): (line 802)
    # Processing the call arguments (line 802)
    int_108832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 802, 38), 'int')
    # Processing the call keyword arguments (line 802)
    kwargs_108833 = {}
    
    # Call to zeros(...): (line 802)
    # Processing the call arguments (line 802)
    # Getting the type of 'nbin' (line 802)
    nbin_108827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 17), 'nbin', False)
    # Getting the type of 'float' (line 802)
    float_108828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 23), 'float', False)
    # Processing the call keyword arguments (line 802)
    kwargs_108829 = {}
    # Getting the type of 'zeros' (line 802)
    zeros_108826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 11), 'zeros', False)
    # Calling zeros(args, kwargs) (line 802)
    zeros_call_result_108830 = invoke(stypy.reporting.localization.Localization(__file__, 802, 11), zeros_108826, *[nbin_108827, float_108828], **kwargs_108829)
    
    # Obtaining the member 'reshape' of a type (line 802)
    reshape_108831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 802, 11), zeros_call_result_108830, 'reshape')
    # Calling reshape(args, kwargs) (line 802)
    reshape_call_result_108834 = invoke(stypy.reporting.localization.Localization(__file__, 802, 11), reshape_108831, *[int_108832], **kwargs_108833)
    
    # Assigning a type to the variable 'hist' (line 802)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 802, 4), 'hist', reshape_call_result_108834)
    
    # Assigning a Call to a Name (line 805):
    
    # Assigning a Call to a Name (line 805):
    
    # Call to argsort(...): (line 805)
    # Processing the call keyword arguments (line 805)
    kwargs_108837 = {}
    # Getting the type of 'nbin' (line 805)
    nbin_108835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 9), 'nbin', False)
    # Obtaining the member 'argsort' of a type (line 805)
    argsort_108836 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 805, 9), nbin_108835, 'argsort')
    # Calling argsort(args, kwargs) (line 805)
    argsort_call_result_108838 = invoke(stypy.reporting.localization.Localization(__file__, 805, 9), argsort_108836, *[], **kwargs_108837)
    
    # Assigning a type to the variable 'ni' (line 805)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 805, 4), 'ni', argsort_call_result_108838)
    
    # Assigning a Call to a Name (line 806):
    
    # Assigning a Call to a Name (line 806):
    
    # Call to zeros(...): (line 806)
    # Processing the call arguments (line 806)
    # Getting the type of 'N' (line 806)
    N_108840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 15), 'N', False)
    # Getting the type of 'int' (line 806)
    int_108841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 18), 'int', False)
    # Processing the call keyword arguments (line 806)
    kwargs_108842 = {}
    # Getting the type of 'zeros' (line 806)
    zeros_108839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 9), 'zeros', False)
    # Calling zeros(args, kwargs) (line 806)
    zeros_call_result_108843 = invoke(stypy.reporting.localization.Localization(__file__, 806, 9), zeros_108839, *[N_108840, int_108841], **kwargs_108842)
    
    # Assigning a type to the variable 'xy' (line 806)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 806, 4), 'xy', zeros_call_result_108843)
    
    
    # Call to arange(...): (line 807)
    # Processing the call arguments (line 807)
    int_108845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 807, 20), 'int')
    # Getting the type of 'D' (line 807)
    D_108846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 23), 'D', False)
    int_108847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 807, 25), 'int')
    # Applying the binary operator '-' (line 807)
    result_sub_108848 = python_operator(stypy.reporting.localization.Localization(__file__, 807, 23), '-', D_108846, int_108847)
    
    # Processing the call keyword arguments (line 807)
    kwargs_108849 = {}
    # Getting the type of 'arange' (line 807)
    arange_108844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 13), 'arange', False)
    # Calling arange(args, kwargs) (line 807)
    arange_call_result_108850 = invoke(stypy.reporting.localization.Localization(__file__, 807, 13), arange_108844, *[int_108845, result_sub_108848], **kwargs_108849)
    
    # Testing the type of a for loop iterable (line 807)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 807, 4), arange_call_result_108850)
    # Getting the type of the for loop variable (line 807)
    for_loop_var_108851 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 807, 4), arange_call_result_108850)
    # Assigning a type to the variable 'i' (line 807)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 807, 4), 'i', for_loop_var_108851)
    # SSA begins for a for statement (line 807)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Getting the type of 'xy' (line 808)
    xy_108852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 8), 'xy')
    
    # Obtaining the type of the subscript
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 808)
    i_108853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 24), 'i')
    # Getting the type of 'ni' (line 808)
    ni_108854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 21), 'ni')
    # Obtaining the member '__getitem__' of a type (line 808)
    getitem___108855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 808, 21), ni_108854, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 808)
    subscript_call_result_108856 = invoke(stypy.reporting.localization.Localization(__file__, 808, 21), getitem___108855, i_108853)
    
    # Getting the type of 'Ncount' (line 808)
    Ncount_108857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 14), 'Ncount')
    # Obtaining the member '__getitem__' of a type (line 808)
    getitem___108858 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 808, 14), Ncount_108857, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 808)
    subscript_call_result_108859 = invoke(stypy.reporting.localization.Localization(__file__, 808, 14), getitem___108858, subscript_call_result_108856)
    
    
    # Call to prod(...): (line 808)
    # Processing the call keyword arguments (line 808)
    kwargs_108871 = {}
    
    # Obtaining the type of the subscript
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 808)
    i_108860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 38), 'i', False)
    int_108861 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 808, 40), 'int')
    # Applying the binary operator '+' (line 808)
    result_add_108862 = python_operator(stypy.reporting.localization.Localization(__file__, 808, 38), '+', i_108860, int_108861)
    
    slice_108863 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 808, 35), result_add_108862, None, None)
    # Getting the type of 'ni' (line 808)
    ni_108864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 35), 'ni', False)
    # Obtaining the member '__getitem__' of a type (line 808)
    getitem___108865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 808, 35), ni_108864, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 808)
    subscript_call_result_108866 = invoke(stypy.reporting.localization.Localization(__file__, 808, 35), getitem___108865, slice_108863)
    
    # Getting the type of 'nbin' (line 808)
    nbin_108867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 30), 'nbin', False)
    # Obtaining the member '__getitem__' of a type (line 808)
    getitem___108868 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 808, 30), nbin_108867, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 808)
    subscript_call_result_108869 = invoke(stypy.reporting.localization.Localization(__file__, 808, 30), getitem___108868, subscript_call_result_108866)
    
    # Obtaining the member 'prod' of a type (line 808)
    prod_108870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 808, 30), subscript_call_result_108869, 'prod')
    # Calling prod(args, kwargs) (line 808)
    prod_call_result_108872 = invoke(stypy.reporting.localization.Localization(__file__, 808, 30), prod_108870, *[], **kwargs_108871)
    
    # Applying the binary operator '*' (line 808)
    result_mul_108873 = python_operator(stypy.reporting.localization.Localization(__file__, 808, 14), '*', subscript_call_result_108859, prod_call_result_108872)
    
    # Applying the binary operator '+=' (line 808)
    result_iadd_108874 = python_operator(stypy.reporting.localization.Localization(__file__, 808, 8), '+=', xy_108852, result_mul_108873)
    # Assigning a type to the variable 'xy' (line 808)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 808, 8), 'xy', result_iadd_108874)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'xy' (line 809)
    xy_108875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 4), 'xy')
    
    # Obtaining the type of the subscript
    
    # Obtaining the type of the subscript
    int_108876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 809, 20), 'int')
    # Getting the type of 'ni' (line 809)
    ni_108877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 17), 'ni')
    # Obtaining the member '__getitem__' of a type (line 809)
    getitem___108878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 809, 17), ni_108877, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 809)
    subscript_call_result_108879 = invoke(stypy.reporting.localization.Localization(__file__, 809, 17), getitem___108878, int_108876)
    
    # Getting the type of 'Ncount' (line 809)
    Ncount_108880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 10), 'Ncount')
    # Obtaining the member '__getitem__' of a type (line 809)
    getitem___108881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 809, 10), Ncount_108880, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 809)
    subscript_call_result_108882 = invoke(stypy.reporting.localization.Localization(__file__, 809, 10), getitem___108881, subscript_call_result_108879)
    
    # Applying the binary operator '+=' (line 809)
    result_iadd_108883 = python_operator(stypy.reporting.localization.Localization(__file__, 809, 4), '+=', xy_108875, subscript_call_result_108882)
    # Assigning a type to the variable 'xy' (line 809)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 809, 4), 'xy', result_iadd_108883)
    
    
    
    
    # Call to len(...): (line 813)
    # Processing the call arguments (line 813)
    # Getting the type of 'xy' (line 813)
    xy_108885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 813, 11), 'xy', False)
    # Processing the call keyword arguments (line 813)
    kwargs_108886 = {}
    # Getting the type of 'len' (line 813)
    len_108884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 813, 7), 'len', False)
    # Calling len(args, kwargs) (line 813)
    len_call_result_108887 = invoke(stypy.reporting.localization.Localization(__file__, 813, 7), len_108884, *[xy_108885], **kwargs_108886)
    
    int_108888 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 813, 18), 'int')
    # Applying the binary operator '==' (line 813)
    result_eq_108889 = python_operator(stypy.reporting.localization.Localization(__file__, 813, 7), '==', len_call_result_108887, int_108888)
    
    # Testing the type of an if condition (line 813)
    if_condition_108890 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 813, 4), result_eq_108889)
    # Assigning a type to the variable 'if_condition_108890' (line 813)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 813, 4), 'if_condition_108890', if_condition_108890)
    # SSA begins for if statement (line 813)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 814)
    tuple_108891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 814, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 814)
    # Adding element type (line 814)
    
    # Call to zeros(...): (line 814)
    # Processing the call arguments (line 814)
    # Getting the type of 'nbin' (line 814)
    nbin_108893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 21), 'nbin', False)
    int_108894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 814, 26), 'int')
    # Applying the binary operator '-' (line 814)
    result_sub_108895 = python_operator(stypy.reporting.localization.Localization(__file__, 814, 21), '-', nbin_108893, int_108894)
    
    # Getting the type of 'int' (line 814)
    int_108896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 29), 'int', False)
    # Processing the call keyword arguments (line 814)
    kwargs_108897 = {}
    # Getting the type of 'zeros' (line 814)
    zeros_108892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 15), 'zeros', False)
    # Calling zeros(args, kwargs) (line 814)
    zeros_call_result_108898 = invoke(stypy.reporting.localization.Localization(__file__, 814, 15), zeros_108892, *[result_sub_108895, int_108896], **kwargs_108897)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 814, 15), tuple_108891, zeros_call_result_108898)
    # Adding element type (line 814)
    # Getting the type of 'edges' (line 814)
    edges_108899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 35), 'edges')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 814, 15), tuple_108891, edges_108899)
    
    # Assigning a type to the variable 'stypy_return_type' (line 814)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 814, 8), 'stypy_return_type', tuple_108891)
    # SSA join for if statement (line 813)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 816):
    
    # Assigning a Call to a Name (line 816):
    
    # Call to bincount(...): (line 816)
    # Processing the call arguments (line 816)
    # Getting the type of 'xy' (line 816)
    xy_108901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 25), 'xy', False)
    # Getting the type of 'weights' (line 816)
    weights_108902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 29), 'weights', False)
    # Processing the call keyword arguments (line 816)
    kwargs_108903 = {}
    # Getting the type of 'bincount' (line 816)
    bincount_108900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 16), 'bincount', False)
    # Calling bincount(args, kwargs) (line 816)
    bincount_call_result_108904 = invoke(stypy.reporting.localization.Localization(__file__, 816, 16), bincount_108900, *[xy_108901, weights_108902], **kwargs_108903)
    
    # Assigning a type to the variable 'flatcount' (line 816)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 816, 4), 'flatcount', bincount_call_result_108904)
    
    # Assigning a Call to a Name (line 817):
    
    # Assigning a Call to a Name (line 817):
    
    # Call to arange(...): (line 817)
    # Processing the call arguments (line 817)
    
    # Call to len(...): (line 817)
    # Processing the call arguments (line 817)
    # Getting the type of 'flatcount' (line 817)
    flatcount_108907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 19), 'flatcount', False)
    # Processing the call keyword arguments (line 817)
    kwargs_108908 = {}
    # Getting the type of 'len' (line 817)
    len_108906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 15), 'len', False)
    # Calling len(args, kwargs) (line 817)
    len_call_result_108909 = invoke(stypy.reporting.localization.Localization(__file__, 817, 15), len_108906, *[flatcount_108907], **kwargs_108908)
    
    # Processing the call keyword arguments (line 817)
    kwargs_108910 = {}
    # Getting the type of 'arange' (line 817)
    arange_108905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 8), 'arange', False)
    # Calling arange(args, kwargs) (line 817)
    arange_call_result_108911 = invoke(stypy.reporting.localization.Localization(__file__, 817, 8), arange_108905, *[len_call_result_108909], **kwargs_108910)
    
    # Assigning a type to the variable 'a' (line 817)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 817, 4), 'a', arange_call_result_108911)
    
    # Assigning a Name to a Subscript (line 818):
    
    # Assigning a Name to a Subscript (line 818):
    # Getting the type of 'flatcount' (line 818)
    flatcount_108912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 14), 'flatcount')
    # Getting the type of 'hist' (line 818)
    hist_108913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 4), 'hist')
    # Getting the type of 'a' (line 818)
    a_108914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 9), 'a')
    # Storing an element on a container (line 818)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 818, 4), hist_108913, (a_108914, flatcount_108912))
    
    # Assigning a Call to a Name (line 821):
    
    # Assigning a Call to a Name (line 821):
    
    # Call to reshape(...): (line 821)
    # Processing the call arguments (line 821)
    
    # Call to sort(...): (line 821)
    # Processing the call arguments (line 821)
    # Getting the type of 'nbin' (line 821)
    nbin_108918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 29), 'nbin', False)
    # Processing the call keyword arguments (line 821)
    kwargs_108919 = {}
    # Getting the type of 'sort' (line 821)
    sort_108917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 24), 'sort', False)
    # Calling sort(args, kwargs) (line 821)
    sort_call_result_108920 = invoke(stypy.reporting.localization.Localization(__file__, 821, 24), sort_108917, *[nbin_108918], **kwargs_108919)
    
    # Processing the call keyword arguments (line 821)
    kwargs_108921 = {}
    # Getting the type of 'hist' (line 821)
    hist_108915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 11), 'hist', False)
    # Obtaining the member 'reshape' of a type (line 821)
    reshape_108916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 821, 11), hist_108915, 'reshape')
    # Calling reshape(args, kwargs) (line 821)
    reshape_call_result_108922 = invoke(stypy.reporting.localization.Localization(__file__, 821, 11), reshape_108916, *[sort_call_result_108920], **kwargs_108921)
    
    # Assigning a type to the variable 'hist' (line 821)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 821, 4), 'hist', reshape_call_result_108922)
    
    
    # Call to arange(...): (line 822)
    # Processing the call arguments (line 822)
    # Getting the type of 'nbin' (line 822)
    nbin_108924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 20), 'nbin', False)
    # Obtaining the member 'size' of a type (line 822)
    size_108925 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 822, 20), nbin_108924, 'size')
    # Processing the call keyword arguments (line 822)
    kwargs_108926 = {}
    # Getting the type of 'arange' (line 822)
    arange_108923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 13), 'arange', False)
    # Calling arange(args, kwargs) (line 822)
    arange_call_result_108927 = invoke(stypy.reporting.localization.Localization(__file__, 822, 13), arange_108923, *[size_108925], **kwargs_108926)
    
    # Testing the type of a for loop iterable (line 822)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 822, 4), arange_call_result_108927)
    # Getting the type of the for loop variable (line 822)
    for_loop_var_108928 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 822, 4), arange_call_result_108927)
    # Assigning a type to the variable 'i' (line 822)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 822, 4), 'i', for_loop_var_108928)
    # SSA begins for a for statement (line 822)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Subscript to a Name (line 823):
    
    # Assigning a Subscript to a Name (line 823):
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 823)
    i_108929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 25), 'i')
    
    # Call to argsort(...): (line 823)
    # Processing the call keyword arguments (line 823)
    kwargs_108932 = {}
    # Getting the type of 'ni' (line 823)
    ni_108930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 12), 'ni', False)
    # Obtaining the member 'argsort' of a type (line 823)
    argsort_108931 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 823, 12), ni_108930, 'argsort')
    # Calling argsort(args, kwargs) (line 823)
    argsort_call_result_108933 = invoke(stypy.reporting.localization.Localization(__file__, 823, 12), argsort_108931, *[], **kwargs_108932)
    
    # Obtaining the member '__getitem__' of a type (line 823)
    getitem___108934 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 823, 12), argsort_call_result_108933, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 823)
    subscript_call_result_108935 = invoke(stypy.reporting.localization.Localization(__file__, 823, 12), getitem___108934, i_108929)
    
    # Assigning a type to the variable 'j' (line 823)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 823, 8), 'j', subscript_call_result_108935)
    
    # Assigning a Call to a Name (line 824):
    
    # Assigning a Call to a Name (line 824):
    
    # Call to swapaxes(...): (line 824)
    # Processing the call arguments (line 824)
    # Getting the type of 'i' (line 824)
    i_108938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 824, 29), 'i', False)
    # Getting the type of 'j' (line 824)
    j_108939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 824, 32), 'j', False)
    # Processing the call keyword arguments (line 824)
    kwargs_108940 = {}
    # Getting the type of 'hist' (line 824)
    hist_108936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 824, 15), 'hist', False)
    # Obtaining the member 'swapaxes' of a type (line 824)
    swapaxes_108937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 824, 15), hist_108936, 'swapaxes')
    # Calling swapaxes(args, kwargs) (line 824)
    swapaxes_call_result_108941 = invoke(stypy.reporting.localization.Localization(__file__, 824, 15), swapaxes_108937, *[i_108938, j_108939], **kwargs_108940)
    
    # Assigning a type to the variable 'hist' (line 824)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 824, 8), 'hist', swapaxes_call_result_108941)
    
    # Assigning a Tuple to a Tuple (line 825):
    
    # Assigning a Subscript to a Name (line 825):
    
    # Obtaining the type of the subscript
    # Getting the type of 'j' (line 825)
    j_108942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 26), 'j')
    # Getting the type of 'ni' (line 825)
    ni_108943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 23), 'ni')
    # Obtaining the member '__getitem__' of a type (line 825)
    getitem___108944 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 825, 23), ni_108943, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 825)
    subscript_call_result_108945 = invoke(stypy.reporting.localization.Localization(__file__, 825, 23), getitem___108944, j_108942)
    
    # Assigning a type to the variable 'tuple_assignment_107420' (line 825)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 825, 8), 'tuple_assignment_107420', subscript_call_result_108945)
    
    # Assigning a Subscript to a Name (line 825):
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 825)
    i_108946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 33), 'i')
    # Getting the type of 'ni' (line 825)
    ni_108947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 30), 'ni')
    # Obtaining the member '__getitem__' of a type (line 825)
    getitem___108948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 825, 30), ni_108947, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 825)
    subscript_call_result_108949 = invoke(stypy.reporting.localization.Localization(__file__, 825, 30), getitem___108948, i_108946)
    
    # Assigning a type to the variable 'tuple_assignment_107421' (line 825)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 825, 8), 'tuple_assignment_107421', subscript_call_result_108949)
    
    # Assigning a Name to a Subscript (line 825):
    # Getting the type of 'tuple_assignment_107420' (line 825)
    tuple_assignment_107420_108950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 8), 'tuple_assignment_107420')
    # Getting the type of 'ni' (line 825)
    ni_108951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 8), 'ni')
    # Getting the type of 'i' (line 825)
    i_108952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 11), 'i')
    # Storing an element on a container (line 825)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 825, 8), ni_108951, (i_108952, tuple_assignment_107420_108950))
    
    # Assigning a Name to a Subscript (line 825):
    # Getting the type of 'tuple_assignment_107421' (line 825)
    tuple_assignment_107421_108953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 8), 'tuple_assignment_107421')
    # Getting the type of 'ni' (line 825)
    ni_108954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 15), 'ni')
    # Getting the type of 'j' (line 825)
    j_108955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 18), 'j')
    # Storing an element on a container (line 825)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 825, 15), ni_108954, (j_108955, tuple_assignment_107421_108953))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 828):
    
    # Assigning a BinOp to a Name (line 828):
    # Getting the type of 'D' (line 828)
    D_108956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 11), 'D')
    
    # Obtaining an instance of the builtin type 'list' (line 828)
    list_108957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 828, 13), 'list')
    # Adding type elements to the builtin type 'list' instance (line 828)
    # Adding element type (line 828)
    
    # Call to slice(...): (line 828)
    # Processing the call arguments (line 828)
    int_108959 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 828, 20), 'int')
    int_108960 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 828, 23), 'int')
    # Processing the call keyword arguments (line 828)
    kwargs_108961 = {}
    # Getting the type of 'slice' (line 828)
    slice_108958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 14), 'slice', False)
    # Calling slice(args, kwargs) (line 828)
    slice_call_result_108962 = invoke(stypy.reporting.localization.Localization(__file__, 828, 14), slice_108958, *[int_108959, int_108960], **kwargs_108961)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 828, 13), list_108957, slice_call_result_108962)
    
    # Applying the binary operator '*' (line 828)
    result_mul_108963 = python_operator(stypy.reporting.localization.Localization(__file__, 828, 11), '*', D_108956, list_108957)
    
    # Assigning a type to the variable 'core' (line 828)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 828, 4), 'core', result_mul_108963)
    
    # Assigning a Subscript to a Name (line 829):
    
    # Assigning a Subscript to a Name (line 829):
    
    # Obtaining the type of the subscript
    # Getting the type of 'core' (line 829)
    core_108964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 16), 'core')
    # Getting the type of 'hist' (line 829)
    hist_108965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 11), 'hist')
    # Obtaining the member '__getitem__' of a type (line 829)
    getitem___108966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 829, 11), hist_108965, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 829)
    subscript_call_result_108967 = invoke(stypy.reporting.localization.Localization(__file__, 829, 11), getitem___108966, core_108964)
    
    # Assigning a type to the variable 'hist' (line 829)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 829, 4), 'hist', subscript_call_result_108967)
    
    # Getting the type of 'normed' (line 832)
    normed_108968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 7), 'normed')
    # Testing the type of an if condition (line 832)
    if_condition_108969 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 832, 4), normed_108968)
    # Assigning a type to the variable 'if_condition_108969' (line 832)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 832, 4), 'if_condition_108969', if_condition_108969)
    # SSA begins for if statement (line 832)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 833):
    
    # Assigning a Call to a Name (line 833):
    
    # Call to sum(...): (line 833)
    # Processing the call keyword arguments (line 833)
    kwargs_108972 = {}
    # Getting the type of 'hist' (line 833)
    hist_108970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 12), 'hist', False)
    # Obtaining the member 'sum' of a type (line 833)
    sum_108971 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 833, 12), hist_108970, 'sum')
    # Calling sum(args, kwargs) (line 833)
    sum_call_result_108973 = invoke(stypy.reporting.localization.Localization(__file__, 833, 12), sum_108971, *[], **kwargs_108972)
    
    # Assigning a type to the variable 's' (line 833)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 833, 8), 's', sum_call_result_108973)
    
    
    # Call to arange(...): (line 834)
    # Processing the call arguments (line 834)
    # Getting the type of 'D' (line 834)
    D_108975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 24), 'D', False)
    # Processing the call keyword arguments (line 834)
    kwargs_108976 = {}
    # Getting the type of 'arange' (line 834)
    arange_108974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 17), 'arange', False)
    # Calling arange(args, kwargs) (line 834)
    arange_call_result_108977 = invoke(stypy.reporting.localization.Localization(__file__, 834, 17), arange_108974, *[D_108975], **kwargs_108976)
    
    # Testing the type of a for loop iterable (line 834)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 834, 8), arange_call_result_108977)
    # Getting the type of the for loop variable (line 834)
    for_loop_var_108978 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 834, 8), arange_call_result_108977)
    # Assigning a type to the variable 'i' (line 834)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 834, 8), 'i', for_loop_var_108978)
    # SSA begins for a for statement (line 834)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 835):
    
    # Assigning a Call to a Name (line 835):
    
    # Call to ones(...): (line 835)
    # Processing the call arguments (line 835)
    # Getting the type of 'D' (line 835)
    D_108980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 835, 25), 'D', False)
    # Getting the type of 'int' (line 835)
    int_108981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 835, 28), 'int', False)
    # Processing the call keyword arguments (line 835)
    kwargs_108982 = {}
    # Getting the type of 'ones' (line 835)
    ones_108979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 835, 20), 'ones', False)
    # Calling ones(args, kwargs) (line 835)
    ones_call_result_108983 = invoke(stypy.reporting.localization.Localization(__file__, 835, 20), ones_108979, *[D_108980, int_108981], **kwargs_108982)
    
    # Assigning a type to the variable 'shape' (line 835)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 835, 12), 'shape', ones_call_result_108983)
    
    # Assigning a BinOp to a Subscript (line 836):
    
    # Assigning a BinOp to a Subscript (line 836):
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 836)
    i_108984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 28), 'i')
    # Getting the type of 'nbin' (line 836)
    nbin_108985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 23), 'nbin')
    # Obtaining the member '__getitem__' of a type (line 836)
    getitem___108986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 836, 23), nbin_108985, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 836)
    subscript_call_result_108987 = invoke(stypy.reporting.localization.Localization(__file__, 836, 23), getitem___108986, i_108984)
    
    int_108988 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 836, 33), 'int')
    # Applying the binary operator '-' (line 836)
    result_sub_108989 = python_operator(stypy.reporting.localization.Localization(__file__, 836, 23), '-', subscript_call_result_108987, int_108988)
    
    # Getting the type of 'shape' (line 836)
    shape_108990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 12), 'shape')
    # Getting the type of 'i' (line 836)
    i_108991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 18), 'i')
    # Storing an element on a container (line 836)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 836, 12), shape_108990, (i_108991, result_sub_108989))
    
    # Assigning a BinOp to a Name (line 837):
    
    # Assigning a BinOp to a Name (line 837):
    # Getting the type of 'hist' (line 837)
    hist_108992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 19), 'hist')
    
    # Call to reshape(...): (line 837)
    # Processing the call arguments (line 837)
    # Getting the type of 'shape' (line 837)
    shape_108998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 44), 'shape', False)
    # Processing the call keyword arguments (line 837)
    kwargs_108999 = {}
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 837)
    i_108993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 33), 'i', False)
    # Getting the type of 'dedges' (line 837)
    dedges_108994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 26), 'dedges', False)
    # Obtaining the member '__getitem__' of a type (line 837)
    getitem___108995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 837, 26), dedges_108994, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 837)
    subscript_call_result_108996 = invoke(stypy.reporting.localization.Localization(__file__, 837, 26), getitem___108995, i_108993)
    
    # Obtaining the member 'reshape' of a type (line 837)
    reshape_108997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 837, 26), subscript_call_result_108996, 'reshape')
    # Calling reshape(args, kwargs) (line 837)
    reshape_call_result_109000 = invoke(stypy.reporting.localization.Localization(__file__, 837, 26), reshape_108997, *[shape_108998], **kwargs_108999)
    
    # Applying the binary operator 'div' (line 837)
    result_div_109001 = python_operator(stypy.reporting.localization.Localization(__file__, 837, 19), 'div', hist_108992, reshape_call_result_109000)
    
    # Assigning a type to the variable 'hist' (line 837)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 837, 12), 'hist', result_div_109001)
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'hist' (line 838)
    hist_109002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 8), 'hist')
    # Getting the type of 's' (line 838)
    s_109003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 16), 's')
    # Applying the binary operator 'div=' (line 838)
    result_div_109004 = python_operator(stypy.reporting.localization.Localization(__file__, 838, 8), 'div=', hist_109002, s_109003)
    # Assigning a type to the variable 'hist' (line 838)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 838, 8), 'hist', result_div_109004)
    
    # SSA join for if statement (line 832)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to any(...): (line 840)
    # Processing the call keyword arguments (line 840)
    kwargs_109012 = {}
    
    # Getting the type of 'hist' (line 840)
    hist_109005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 840, 8), 'hist', False)
    # Obtaining the member 'shape' of a type (line 840)
    shape_109006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 840, 8), hist_109005, 'shape')
    # Getting the type of 'nbin' (line 840)
    nbin_109007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 840, 22), 'nbin', False)
    int_109008 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 840, 29), 'int')
    # Applying the binary operator '-' (line 840)
    result_sub_109009 = python_operator(stypy.reporting.localization.Localization(__file__, 840, 22), '-', nbin_109007, int_109008)
    
    # Applying the binary operator '!=' (line 840)
    result_ne_109010 = python_operator(stypy.reporting.localization.Localization(__file__, 840, 8), '!=', shape_109006, result_sub_109009)
    
    # Obtaining the member 'any' of a type (line 840)
    any_109011 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 840, 8), result_ne_109010, 'any')
    # Calling any(args, kwargs) (line 840)
    any_call_result_109013 = invoke(stypy.reporting.localization.Localization(__file__, 840, 8), any_109011, *[], **kwargs_109012)
    
    # Testing the type of an if condition (line 840)
    if_condition_109014 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 840, 4), any_call_result_109013)
    # Assigning a type to the variable 'if_condition_109014' (line 840)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 840, 4), 'if_condition_109014', if_condition_109014)
    # SSA begins for if statement (line 840)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to RuntimeError(...): (line 841)
    # Processing the call arguments (line 841)
    str_109016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 842, 12), 'str', 'Internal Shape Error')
    # Processing the call keyword arguments (line 841)
    kwargs_109017 = {}
    # Getting the type of 'RuntimeError' (line 841)
    RuntimeError_109015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 14), 'RuntimeError', False)
    # Calling RuntimeError(args, kwargs) (line 841)
    RuntimeError_call_result_109018 = invoke(stypy.reporting.localization.Localization(__file__, 841, 14), RuntimeError_109015, *[str_109016], **kwargs_109017)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 841, 8), RuntimeError_call_result_109018, 'raise parameter', BaseException)
    # SSA join for if statement (line 840)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 843)
    tuple_109019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 843, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 843)
    # Adding element type (line 843)
    # Getting the type of 'hist' (line 843)
    hist_109020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 11), 'hist')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 843, 11), tuple_109019, hist_109020)
    # Adding element type (line 843)
    # Getting the type of 'edges' (line 843)
    edges_109021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 17), 'edges')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 843, 11), tuple_109019, edges_109021)
    
    # Assigning a type to the variable 'stypy_return_type' (line 843)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 843, 4), 'stypy_return_type', tuple_109019)
    
    # ################# End of 'histogramdd(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'histogramdd' in the type store
    # Getting the type of 'stypy_return_type' (line 649)
    stypy_return_type_109022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_109022)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'histogramdd'
    return stypy_return_type_109022

# Assigning a type to the variable 'histogramdd' (line 649)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 649, 0), 'histogramdd', histogramdd)

@norecursion
def average(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 846)
    None_109023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 20), 'None')
    # Getting the type of 'None' (line 846)
    None_109024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 34), 'None')
    # Getting the type of 'False' (line 846)
    False_109025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 49), 'False')
    defaults = [None_109023, None_109024, False_109025]
    # Create a new context for function 'average'
    module_type_store = module_type_store.open_function_context('average', 846, 0, False)
    
    # Passed parameters checking function
    average.stypy_localization = localization
    average.stypy_type_of_self = None
    average.stypy_type_store = module_type_store
    average.stypy_function_name = 'average'
    average.stypy_param_names_list = ['a', 'axis', 'weights', 'returned']
    average.stypy_varargs_param_name = None
    average.stypy_kwargs_param_name = None
    average.stypy_call_defaults = defaults
    average.stypy_call_varargs = varargs
    average.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'average', ['a', 'axis', 'weights', 'returned'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'average', localization, ['a', 'axis', 'weights', 'returned'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'average(...)' code ##################

    str_109026 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 919, (-1)), 'str', '\n    Compute the weighted average along the specified axis.\n\n    Parameters\n    ----------\n    a : array_like\n        Array containing data to be averaged. If `a` is not an array, a\n        conversion is attempted.\n    axis : int, optional\n        Axis along which to average `a`. If `None`, averaging is done over\n        the flattened array.\n    weights : array_like, optional\n        An array of weights associated with the values in `a`. Each value in\n        `a` contributes to the average according to its associated weight.\n        The weights array can either be 1-D (in which case its length must be\n        the size of `a` along the given axis) or of the same shape as `a`.\n        If `weights=None`, then all data in `a` are assumed to have a\n        weight equal to one.\n    returned : bool, optional\n        Default is `False`. If `True`, the tuple (`average`, `sum_of_weights`)\n        is returned, otherwise only the average is returned.\n        If `weights=None`, `sum_of_weights` is equivalent to the number of\n        elements over which the average is taken.\n\n\n    Returns\n    -------\n    average, [sum_of_weights] : array_type or double\n        Return the average along the specified axis. When returned is `True`,\n        return a tuple with the average as the first element and the sum\n        of the weights as the second element. The return type is `Float`\n        if `a` is of integer type, otherwise it is of the same type as `a`.\n        `sum_of_weights` is of the same type as `average`.\n\n    Raises\n    ------\n    ZeroDivisionError\n        When all weights along axis are zero. See `numpy.ma.average` for a\n        version robust to this type of error.\n    TypeError\n        When the length of 1D `weights` is not the same as the shape of `a`\n        along axis.\n\n    See Also\n    --------\n    mean\n\n    ma.average : average for masked arrays -- useful if your data contains\n                 "missing" values\n\n    Examples\n    --------\n    >>> data = range(1,5)\n    >>> data\n    [1, 2, 3, 4]\n    >>> np.average(data)\n    2.5\n    >>> np.average(range(1,11), weights=range(10,0,-1))\n    4.0\n\n    >>> data = np.arange(6).reshape((3,2))\n    >>> data\n    array([[0, 1],\n           [2, 3],\n           [4, 5]])\n    >>> np.average(data, axis=1, weights=[1./4, 3./4])\n    array([ 0.75,  2.75,  4.75])\n    >>> np.average(data, weights=[1./4, 3./4])\n    Traceback (most recent call last):\n    ...\n    TypeError: Axis must be specified when shapes of a and weights differ.\n\n    ')
    
    
    
    # Call to isinstance(...): (line 920)
    # Processing the call arguments (line 920)
    # Getting the type of 'a' (line 920)
    a_109028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 22), 'a', False)
    # Getting the type of 'np' (line 920)
    np_109029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 25), 'np', False)
    # Obtaining the member 'matrix' of a type (line 920)
    matrix_109030 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 920, 25), np_109029, 'matrix')
    # Processing the call keyword arguments (line 920)
    kwargs_109031 = {}
    # Getting the type of 'isinstance' (line 920)
    isinstance_109027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 11), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 920)
    isinstance_call_result_109032 = invoke(stypy.reporting.localization.Localization(__file__, 920, 11), isinstance_109027, *[a_109028, matrix_109030], **kwargs_109031)
    
    # Applying the 'not' unary operator (line 920)
    result_not__109033 = python_operator(stypy.reporting.localization.Localization(__file__, 920, 7), 'not', isinstance_call_result_109032)
    
    # Testing the type of an if condition (line 920)
    if_condition_109034 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 920, 4), result_not__109033)
    # Assigning a type to the variable 'if_condition_109034' (line 920)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 920, 4), 'if_condition_109034', if_condition_109034)
    # SSA begins for if statement (line 920)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 921):
    
    # Assigning a Call to a Name (line 921):
    
    # Call to asarray(...): (line 921)
    # Processing the call arguments (line 921)
    # Getting the type of 'a' (line 921)
    a_109037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 23), 'a', False)
    # Processing the call keyword arguments (line 921)
    kwargs_109038 = {}
    # Getting the type of 'np' (line 921)
    np_109035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 12), 'np', False)
    # Obtaining the member 'asarray' of a type (line 921)
    asarray_109036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 921, 12), np_109035, 'asarray')
    # Calling asarray(args, kwargs) (line 921)
    asarray_call_result_109039 = invoke(stypy.reporting.localization.Localization(__file__, 921, 12), asarray_109036, *[a_109037], **kwargs_109038)
    
    # Assigning a type to the variable 'a' (line 921)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 921, 8), 'a', asarray_call_result_109039)
    # SSA join for if statement (line 920)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 923)
    # Getting the type of 'weights' (line 923)
    weights_109040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 7), 'weights')
    # Getting the type of 'None' (line 923)
    None_109041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 18), 'None')
    
    (may_be_109042, more_types_in_union_109043) = may_be_none(weights_109040, None_109041)

    if may_be_109042:

        if more_types_in_union_109043:
            # Runtime conditional SSA (line 923)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 924):
        
        # Assigning a Call to a Name (line 924):
        
        # Call to mean(...): (line 924)
        # Processing the call arguments (line 924)
        # Getting the type of 'axis' (line 924)
        axis_109046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 21), 'axis', False)
        # Processing the call keyword arguments (line 924)
        kwargs_109047 = {}
        # Getting the type of 'a' (line 924)
        a_109044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 14), 'a', False)
        # Obtaining the member 'mean' of a type (line 924)
        mean_109045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 924, 14), a_109044, 'mean')
        # Calling mean(args, kwargs) (line 924)
        mean_call_result_109048 = invoke(stypy.reporting.localization.Localization(__file__, 924, 14), mean_109045, *[axis_109046], **kwargs_109047)
        
        # Assigning a type to the variable 'avg' (line 924)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 924, 8), 'avg', mean_call_result_109048)
        
        # Assigning a Call to a Name (line 925):
        
        # Assigning a Call to a Name (line 925):
        
        # Call to type(...): (line 925)
        # Processing the call arguments (line 925)
        # Getting the type of 'a' (line 925)
        a_109052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 29), 'a', False)
        # Obtaining the member 'size' of a type (line 925)
        size_109053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 925, 29), a_109052, 'size')
        # Getting the type of 'avg' (line 925)
        avg_109054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 36), 'avg', False)
        # Obtaining the member 'size' of a type (line 925)
        size_109055 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 925, 36), avg_109054, 'size')
        # Applying the binary operator 'div' (line 925)
        result_div_109056 = python_operator(stypy.reporting.localization.Localization(__file__, 925, 29), 'div', size_109053, size_109055)
        
        # Processing the call keyword arguments (line 925)
        kwargs_109057 = {}
        # Getting the type of 'avg' (line 925)
        avg_109049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 14), 'avg', False)
        # Obtaining the member 'dtype' of a type (line 925)
        dtype_109050 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 925, 14), avg_109049, 'dtype')
        # Obtaining the member 'type' of a type (line 925)
        type_109051 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 925, 14), dtype_109050, 'type')
        # Calling type(args, kwargs) (line 925)
        type_call_result_109058 = invoke(stypy.reporting.localization.Localization(__file__, 925, 14), type_109051, *[result_div_109056], **kwargs_109057)
        
        # Assigning a type to the variable 'scl' (line 925)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 925, 8), 'scl', type_call_result_109058)

        if more_types_in_union_109043:
            # Runtime conditional SSA for else branch (line 923)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_109042) or more_types_in_union_109043):
        
        # Assigning a BinOp to a Name (line 927):
        
        # Assigning a BinOp to a Name (line 927):
        # Getting the type of 'a' (line 927)
        a_109059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 927, 12), 'a')
        float_109060 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 927, 16), 'float')
        # Applying the binary operator '+' (line 927)
        result_add_109061 = python_operator(stypy.reporting.localization.Localization(__file__, 927, 12), '+', a_109059, float_109060)
        
        # Assigning a type to the variable 'a' (line 927)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 927, 8), 'a', result_add_109061)
        
        # Assigning a Call to a Name (line 928):
        
        # Assigning a Call to a Name (line 928):
        
        # Call to asarray(...): (line 928)
        # Processing the call arguments (line 928)
        # Getting the type of 'weights' (line 928)
        weights_109064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 928, 25), 'weights', False)
        # Processing the call keyword arguments (line 928)
        kwargs_109065 = {}
        # Getting the type of 'np' (line 928)
        np_109062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 928, 14), 'np', False)
        # Obtaining the member 'asarray' of a type (line 928)
        asarray_109063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 928, 14), np_109062, 'asarray')
        # Calling asarray(args, kwargs) (line 928)
        asarray_call_result_109066 = invoke(stypy.reporting.localization.Localization(__file__, 928, 14), asarray_109063, *[weights_109064], **kwargs_109065)
        
        # Assigning a type to the variable 'wgt' (line 928)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 928, 8), 'wgt', asarray_call_result_109066)
        
        
        # Getting the type of 'a' (line 930)
        a_109067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 11), 'a')
        # Obtaining the member 'shape' of a type (line 930)
        shape_109068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 930, 11), a_109067, 'shape')
        # Getting the type of 'wgt' (line 930)
        wgt_109069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 22), 'wgt')
        # Obtaining the member 'shape' of a type (line 930)
        shape_109070 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 930, 22), wgt_109069, 'shape')
        # Applying the binary operator '!=' (line 930)
        result_ne_109071 = python_operator(stypy.reporting.localization.Localization(__file__, 930, 11), '!=', shape_109068, shape_109070)
        
        # Testing the type of an if condition (line 930)
        if_condition_109072 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 930, 8), result_ne_109071)
        # Assigning a type to the variable 'if_condition_109072' (line 930)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 930, 8), 'if_condition_109072', if_condition_109072)
        # SSA begins for if statement (line 930)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Type idiom detected: calculating its left and rigth part (line 931)
        # Getting the type of 'axis' (line 931)
        axis_109073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 931, 15), 'axis')
        # Getting the type of 'None' (line 931)
        None_109074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 931, 23), 'None')
        
        (may_be_109075, more_types_in_union_109076) = may_be_none(axis_109073, None_109074)

        if may_be_109075:

            if more_types_in_union_109076:
                # Runtime conditional SSA (line 931)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to TypeError(...): (line 932)
            # Processing the call arguments (line 932)
            str_109078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 933, 20), 'str', 'Axis must be specified when shapes of a and weights differ.')
            # Processing the call keyword arguments (line 932)
            kwargs_109079 = {}
            # Getting the type of 'TypeError' (line 932)
            TypeError_109077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 932, 22), 'TypeError', False)
            # Calling TypeError(args, kwargs) (line 932)
            TypeError_call_result_109080 = invoke(stypy.reporting.localization.Localization(__file__, 932, 22), TypeError_109077, *[str_109078], **kwargs_109079)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 932, 16), TypeError_call_result_109080, 'raise parameter', BaseException)

            if more_types_in_union_109076:
                # SSA join for if statement (line 931)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Getting the type of 'wgt' (line 935)
        wgt_109081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 15), 'wgt')
        # Obtaining the member 'ndim' of a type (line 935)
        ndim_109082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 935, 15), wgt_109081, 'ndim')
        int_109083 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 935, 27), 'int')
        # Applying the binary operator '!=' (line 935)
        result_ne_109084 = python_operator(stypy.reporting.localization.Localization(__file__, 935, 15), '!=', ndim_109082, int_109083)
        
        # Testing the type of an if condition (line 935)
        if_condition_109085 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 935, 12), result_ne_109084)
        # Assigning a type to the variable 'if_condition_109085' (line 935)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 935, 12), 'if_condition_109085', if_condition_109085)
        # SSA begins for if statement (line 935)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to TypeError(...): (line 936)
        # Processing the call arguments (line 936)
        str_109087 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 937, 20), 'str', '1D weights expected when shapes of a and weights differ.')
        # Processing the call keyword arguments (line 936)
        kwargs_109088 = {}
        # Getting the type of 'TypeError' (line 936)
        TypeError_109086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 22), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 936)
        TypeError_call_result_109089 = invoke(stypy.reporting.localization.Localization(__file__, 936, 22), TypeError_109086, *[str_109087], **kwargs_109088)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 936, 16), TypeError_call_result_109089, 'raise parameter', BaseException)
        # SSA join for if statement (line 935)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Obtaining the type of the subscript
        int_109090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 938, 25), 'int')
        # Getting the type of 'wgt' (line 938)
        wgt_109091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 15), 'wgt')
        # Obtaining the member 'shape' of a type (line 938)
        shape_109092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 938, 15), wgt_109091, 'shape')
        # Obtaining the member '__getitem__' of a type (line 938)
        getitem___109093 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 938, 15), shape_109092, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 938)
        subscript_call_result_109094 = invoke(stypy.reporting.localization.Localization(__file__, 938, 15), getitem___109093, int_109090)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'axis' (line 938)
        axis_109095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 39), 'axis')
        # Getting the type of 'a' (line 938)
        a_109096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 31), 'a')
        # Obtaining the member 'shape' of a type (line 938)
        shape_109097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 938, 31), a_109096, 'shape')
        # Obtaining the member '__getitem__' of a type (line 938)
        getitem___109098 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 938, 31), shape_109097, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 938)
        subscript_call_result_109099 = invoke(stypy.reporting.localization.Localization(__file__, 938, 31), getitem___109098, axis_109095)
        
        # Applying the binary operator '!=' (line 938)
        result_ne_109100 = python_operator(stypy.reporting.localization.Localization(__file__, 938, 15), '!=', subscript_call_result_109094, subscript_call_result_109099)
        
        # Testing the type of an if condition (line 938)
        if_condition_109101 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 938, 12), result_ne_109100)
        # Assigning a type to the variable 'if_condition_109101' (line 938)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 938, 12), 'if_condition_109101', if_condition_109101)
        # SSA begins for if statement (line 938)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 939)
        # Processing the call arguments (line 939)
        str_109103 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 940, 20), 'str', 'Length of weights not compatible with specified axis.')
        # Processing the call keyword arguments (line 939)
        kwargs_109104 = {}
        # Getting the type of 'ValueError' (line 939)
        ValueError_109102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 939)
        ValueError_call_result_109105 = invoke(stypy.reporting.localization.Localization(__file__, 939, 22), ValueError_109102, *[str_109103], **kwargs_109104)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 939, 16), ValueError_call_result_109105, 'raise parameter', BaseException)
        # SSA join for if statement (line 938)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 943):
        
        # Assigning a Call to a Name (line 943):
        
        # Call to swapaxes(...): (line 943)
        # Processing the call arguments (line 943)
        int_109117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 943, 63), 'int')
        # Getting the type of 'axis' (line 943)
        axis_109118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 67), 'axis', False)
        # Processing the call keyword arguments (line 943)
        kwargs_109119 = {}
        
        # Call to array(...): (line 943)
        # Processing the call arguments (line 943)
        # Getting the type of 'wgt' (line 943)
        wgt_109108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 27), 'wgt', False)
        # Processing the call keyword arguments (line 943)
        int_109109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 943, 37), 'int')
        keyword_109110 = int_109109
        # Getting the type of 'a' (line 943)
        a_109111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 46), 'a', False)
        # Obtaining the member 'ndim' of a type (line 943)
        ndim_109112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 943, 46), a_109111, 'ndim')
        keyword_109113 = ndim_109112
        kwargs_109114 = {'copy': keyword_109110, 'ndmin': keyword_109113}
        # Getting the type of 'np' (line 943)
        np_109106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 18), 'np', False)
        # Obtaining the member 'array' of a type (line 943)
        array_109107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 943, 18), np_109106, 'array')
        # Calling array(args, kwargs) (line 943)
        array_call_result_109115 = invoke(stypy.reporting.localization.Localization(__file__, 943, 18), array_109107, *[wgt_109108], **kwargs_109114)
        
        # Obtaining the member 'swapaxes' of a type (line 943)
        swapaxes_109116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 943, 18), array_call_result_109115, 'swapaxes')
        # Calling swapaxes(args, kwargs) (line 943)
        swapaxes_call_result_109120 = invoke(stypy.reporting.localization.Localization(__file__, 943, 18), swapaxes_109116, *[int_109117, axis_109118], **kwargs_109119)
        
        # Assigning a type to the variable 'wgt' (line 943)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 943, 12), 'wgt', swapaxes_call_result_109120)
        # SSA join for if statement (line 930)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 945):
        
        # Assigning a Call to a Name (line 945):
        
        # Call to sum(...): (line 945)
        # Processing the call keyword arguments (line 945)
        # Getting the type of 'axis' (line 945)
        axis_109123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 27), 'axis', False)
        keyword_109124 = axis_109123
        
        # Call to result_type(...): (line 945)
        # Processing the call arguments (line 945)
        # Getting the type of 'a' (line 945)
        a_109127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 54), 'a', False)
        # Obtaining the member 'dtype' of a type (line 945)
        dtype_109128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 945, 54), a_109127, 'dtype')
        # Getting the type of 'wgt' (line 945)
        wgt_109129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 63), 'wgt', False)
        # Obtaining the member 'dtype' of a type (line 945)
        dtype_109130 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 945, 63), wgt_109129, 'dtype')
        # Processing the call keyword arguments (line 945)
        kwargs_109131 = {}
        # Getting the type of 'np' (line 945)
        np_109125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 39), 'np', False)
        # Obtaining the member 'result_type' of a type (line 945)
        result_type_109126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 945, 39), np_109125, 'result_type')
        # Calling result_type(args, kwargs) (line 945)
        result_type_call_result_109132 = invoke(stypy.reporting.localization.Localization(__file__, 945, 39), result_type_109126, *[dtype_109128, dtype_109130], **kwargs_109131)
        
        keyword_109133 = result_type_call_result_109132
        kwargs_109134 = {'dtype': keyword_109133, 'axis': keyword_109124}
        # Getting the type of 'wgt' (line 945)
        wgt_109121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 14), 'wgt', False)
        # Obtaining the member 'sum' of a type (line 945)
        sum_109122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 945, 14), wgt_109121, 'sum')
        # Calling sum(args, kwargs) (line 945)
        sum_call_result_109135 = invoke(stypy.reporting.localization.Localization(__file__, 945, 14), sum_109122, *[], **kwargs_109134)
        
        # Assigning a type to the variable 'scl' (line 945)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 945, 8), 'scl', sum_call_result_109135)
        
        
        # Call to any(...): (line 946)
        # Processing the call keyword arguments (line 946)
        kwargs_109140 = {}
        
        # Getting the type of 'scl' (line 946)
        scl_109136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 12), 'scl', False)
        float_109137 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 946, 19), 'float')
        # Applying the binary operator '==' (line 946)
        result_eq_109138 = python_operator(stypy.reporting.localization.Localization(__file__, 946, 12), '==', scl_109136, float_109137)
        
        # Obtaining the member 'any' of a type (line 946)
        any_109139 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 946, 12), result_eq_109138, 'any')
        # Calling any(args, kwargs) (line 946)
        any_call_result_109141 = invoke(stypy.reporting.localization.Localization(__file__, 946, 12), any_109139, *[], **kwargs_109140)
        
        # Testing the type of an if condition (line 946)
        if_condition_109142 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 946, 8), any_call_result_109141)
        # Assigning a type to the variable 'if_condition_109142' (line 946)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 946, 8), 'if_condition_109142', if_condition_109142)
        # SSA begins for if statement (line 946)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ZeroDivisionError(...): (line 947)
        # Processing the call arguments (line 947)
        str_109144 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 948, 16), 'str', "Weights sum to zero, can't be normalized")
        # Processing the call keyword arguments (line 947)
        kwargs_109145 = {}
        # Getting the type of 'ZeroDivisionError' (line 947)
        ZeroDivisionError_109143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 18), 'ZeroDivisionError', False)
        # Calling ZeroDivisionError(args, kwargs) (line 947)
        ZeroDivisionError_call_result_109146 = invoke(stypy.reporting.localization.Localization(__file__, 947, 18), ZeroDivisionError_109143, *[str_109144], **kwargs_109145)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 947, 12), ZeroDivisionError_call_result_109146, 'raise parameter', BaseException)
        # SSA join for if statement (line 946)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 950):
        
        # Assigning a BinOp to a Name (line 950):
        
        # Call to sum(...): (line 950)
        # Processing the call arguments (line 950)
        # Getting the type of 'axis' (line 950)
        axis_109154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 38), 'axis', False)
        # Processing the call keyword arguments (line 950)
        kwargs_109155 = {}
        
        # Call to multiply(...): (line 950)
        # Processing the call arguments (line 950)
        # Getting the type of 'a' (line 950)
        a_109149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 26), 'a', False)
        # Getting the type of 'wgt' (line 950)
        wgt_109150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 29), 'wgt', False)
        # Processing the call keyword arguments (line 950)
        kwargs_109151 = {}
        # Getting the type of 'np' (line 950)
        np_109147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 14), 'np', False)
        # Obtaining the member 'multiply' of a type (line 950)
        multiply_109148 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 950, 14), np_109147, 'multiply')
        # Calling multiply(args, kwargs) (line 950)
        multiply_call_result_109152 = invoke(stypy.reporting.localization.Localization(__file__, 950, 14), multiply_109148, *[a_109149, wgt_109150], **kwargs_109151)
        
        # Obtaining the member 'sum' of a type (line 950)
        sum_109153 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 950, 14), multiply_call_result_109152, 'sum')
        # Calling sum(args, kwargs) (line 950)
        sum_call_result_109156 = invoke(stypy.reporting.localization.Localization(__file__, 950, 14), sum_109153, *[axis_109154], **kwargs_109155)
        
        # Getting the type of 'scl' (line 950)
        scl_109157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 44), 'scl')
        # Applying the binary operator 'div' (line 950)
        result_div_109158 = python_operator(stypy.reporting.localization.Localization(__file__, 950, 14), 'div', sum_call_result_109156, scl_109157)
        
        # Assigning a type to the variable 'avg' (line 950)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 950, 8), 'avg', result_div_109158)

        if (may_be_109042 and more_types_in_union_109043):
            # SSA join for if statement (line 923)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Getting the type of 'returned' (line 952)
    returned_109159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 7), 'returned')
    # Testing the type of an if condition (line 952)
    if_condition_109160 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 952, 4), returned_109159)
    # Assigning a type to the variable 'if_condition_109160' (line 952)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 952, 4), 'if_condition_109160', if_condition_109160)
    # SSA begins for if statement (line 952)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 953):
    
    # Assigning a BinOp to a Name (line 953):
    
    # Call to multiply(...): (line 953)
    # Processing the call arguments (line 953)
    # Getting the type of 'avg' (line 953)
    avg_109163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 26), 'avg', False)
    int_109164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 953, 31), 'int')
    # Processing the call keyword arguments (line 953)
    kwargs_109165 = {}
    # Getting the type of 'np' (line 953)
    np_109161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 14), 'np', False)
    # Obtaining the member 'multiply' of a type (line 953)
    multiply_109162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 953, 14), np_109161, 'multiply')
    # Calling multiply(args, kwargs) (line 953)
    multiply_call_result_109166 = invoke(stypy.reporting.localization.Localization(__file__, 953, 14), multiply_109162, *[avg_109163, int_109164], **kwargs_109165)
    
    # Getting the type of 'scl' (line 953)
    scl_109167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 36), 'scl')
    # Applying the binary operator '+' (line 953)
    result_add_109168 = python_operator(stypy.reporting.localization.Localization(__file__, 953, 14), '+', multiply_call_result_109166, scl_109167)
    
    # Assigning a type to the variable 'scl' (line 953)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 953, 8), 'scl', result_add_109168)
    
    # Obtaining an instance of the builtin type 'tuple' (line 954)
    tuple_109169 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 954, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 954)
    # Adding element type (line 954)
    # Getting the type of 'avg' (line 954)
    avg_109170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 15), 'avg')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 954, 15), tuple_109169, avg_109170)
    # Adding element type (line 954)
    # Getting the type of 'scl' (line 954)
    scl_109171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 20), 'scl')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 954, 15), tuple_109169, scl_109171)
    
    # Assigning a type to the variable 'stypy_return_type' (line 954)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 954, 8), 'stypy_return_type', tuple_109169)
    # SSA branch for the else part of an if statement (line 952)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'avg' (line 956)
    avg_109172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 956, 15), 'avg')
    # Assigning a type to the variable 'stypy_return_type' (line 956)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 956, 8), 'stypy_return_type', avg_109172)
    # SSA join for if statement (line 952)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'average(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'average' in the type store
    # Getting the type of 'stypy_return_type' (line 846)
    stypy_return_type_109173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_109173)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'average'
    return stypy_return_type_109173

# Assigning a type to the variable 'average' (line 846)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 846, 0), 'average', average)

@norecursion
def asarray_chkfinite(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 959)
    None_109174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 31), 'None')
    # Getting the type of 'None' (line 959)
    None_109175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 43), 'None')
    defaults = [None_109174, None_109175]
    # Create a new context for function 'asarray_chkfinite'
    module_type_store = module_type_store.open_function_context('asarray_chkfinite', 959, 0, False)
    
    # Passed parameters checking function
    asarray_chkfinite.stypy_localization = localization
    asarray_chkfinite.stypy_type_of_self = None
    asarray_chkfinite.stypy_type_store = module_type_store
    asarray_chkfinite.stypy_function_name = 'asarray_chkfinite'
    asarray_chkfinite.stypy_param_names_list = ['a', 'dtype', 'order']
    asarray_chkfinite.stypy_varargs_param_name = None
    asarray_chkfinite.stypy_kwargs_param_name = None
    asarray_chkfinite.stypy_call_defaults = defaults
    asarray_chkfinite.stypy_call_varargs = varargs
    asarray_chkfinite.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'asarray_chkfinite', ['a', 'dtype', 'order'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'asarray_chkfinite', localization, ['a', 'dtype', 'order'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'asarray_chkfinite(...)' code ##################

    str_109176 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1018, (-1)), 'str', "Convert the input to an array, checking for NaNs or Infs.\n\n    Parameters\n    ----------\n    a : array_like\n        Input data, in any form that can be converted to an array.  This\n        includes lists, lists of tuples, tuples, tuples of tuples, tuples\n        of lists and ndarrays.  Success requires no NaNs or Infs.\n    dtype : data-type, optional\n        By default, the data-type is inferred from the input data.\n    order : {'C', 'F'}, optional\n         Whether to use row-major (C-style) or\n         column-major (Fortran-style) memory representation.\n         Defaults to 'C'.\n\n    Returns\n    -------\n    out : ndarray\n        Array interpretation of `a`.  No copy is performed if the input\n        is already an ndarray.  If `a` is a subclass of ndarray, a base\n        class ndarray is returned.\n\n    Raises\n    ------\n    ValueError\n        Raises ValueError if `a` contains NaN (Not a Number) or Inf (Infinity).\n\n    See Also\n    --------\n    asarray : Create and array.\n    asanyarray : Similar function which passes through subclasses.\n    ascontiguousarray : Convert input to a contiguous array.\n    asfarray : Convert input to a floating point ndarray.\n    asfortranarray : Convert input to an ndarray with column-major\n                     memory order.\n    fromiter : Create an array from an iterator.\n    fromfunction : Construct an array by executing a function on grid\n                   positions.\n\n    Examples\n    --------\n    Convert a list into an array.  If all elements are finite\n    ``asarray_chkfinite`` is identical to ``asarray``.\n\n    >>> a = [1, 2]\n    >>> np.asarray_chkfinite(a, dtype=float)\n    array([1., 2.])\n\n    Raises ValueError if array_like contains Nans or Infs.\n\n    >>> a = [1, 2, np.inf]\n    >>> try:\n    ...     np.asarray_chkfinite(a)\n    ... except ValueError:\n    ...     print('ValueError')\n    ...\n    ValueError\n\n    ")
    
    # Assigning a Call to a Name (line 1019):
    
    # Assigning a Call to a Name (line 1019):
    
    # Call to asarray(...): (line 1019)
    # Processing the call arguments (line 1019)
    # Getting the type of 'a' (line 1019)
    a_109178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1019, 16), 'a', False)
    # Processing the call keyword arguments (line 1019)
    # Getting the type of 'dtype' (line 1019)
    dtype_109179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1019, 25), 'dtype', False)
    keyword_109180 = dtype_109179
    # Getting the type of 'order' (line 1019)
    order_109181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1019, 38), 'order', False)
    keyword_109182 = order_109181
    kwargs_109183 = {'dtype': keyword_109180, 'order': keyword_109182}
    # Getting the type of 'asarray' (line 1019)
    asarray_109177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1019, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1019)
    asarray_call_result_109184 = invoke(stypy.reporting.localization.Localization(__file__, 1019, 8), asarray_109177, *[a_109178], **kwargs_109183)
    
    # Assigning a type to the variable 'a' (line 1019)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1019, 4), 'a', asarray_call_result_109184)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'a' (line 1020)
    a_109185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 7), 'a')
    # Obtaining the member 'dtype' of a type (line 1020)
    dtype_109186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1020, 7), a_109185, 'dtype')
    # Obtaining the member 'char' of a type (line 1020)
    char_109187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1020, 7), dtype_109186, 'char')
    
    # Obtaining the type of the subscript
    str_109188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1020, 33), 'str', 'AllFloat')
    # Getting the type of 'typecodes' (line 1020)
    typecodes_109189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 23), 'typecodes')
    # Obtaining the member '__getitem__' of a type (line 1020)
    getitem___109190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1020, 23), typecodes_109189, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1020)
    subscript_call_result_109191 = invoke(stypy.reporting.localization.Localization(__file__, 1020, 23), getitem___109190, str_109188)
    
    # Applying the binary operator 'in' (line 1020)
    result_contains_109192 = python_operator(stypy.reporting.localization.Localization(__file__, 1020, 7), 'in', char_109187, subscript_call_result_109191)
    
    
    
    # Call to all(...): (line 1020)
    # Processing the call keyword arguments (line 1020)
    kwargs_109199 = {}
    
    # Call to isfinite(...): (line 1020)
    # Processing the call arguments (line 1020)
    # Getting the type of 'a' (line 1020)
    a_109195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 65), 'a', False)
    # Processing the call keyword arguments (line 1020)
    kwargs_109196 = {}
    # Getting the type of 'np' (line 1020)
    np_109193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 53), 'np', False)
    # Obtaining the member 'isfinite' of a type (line 1020)
    isfinite_109194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1020, 53), np_109193, 'isfinite')
    # Calling isfinite(args, kwargs) (line 1020)
    isfinite_call_result_109197 = invoke(stypy.reporting.localization.Localization(__file__, 1020, 53), isfinite_109194, *[a_109195], **kwargs_109196)
    
    # Obtaining the member 'all' of a type (line 1020)
    all_109198 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1020, 53), isfinite_call_result_109197, 'all')
    # Calling all(args, kwargs) (line 1020)
    all_call_result_109200 = invoke(stypy.reporting.localization.Localization(__file__, 1020, 53), all_109198, *[], **kwargs_109199)
    
    # Applying the 'not' unary operator (line 1020)
    result_not__109201 = python_operator(stypy.reporting.localization.Localization(__file__, 1020, 49), 'not', all_call_result_109200)
    
    # Applying the binary operator 'and' (line 1020)
    result_and_keyword_109202 = python_operator(stypy.reporting.localization.Localization(__file__, 1020, 7), 'and', result_contains_109192, result_not__109201)
    
    # Testing the type of an if condition (line 1020)
    if_condition_109203 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1020, 4), result_and_keyword_109202)
    # Assigning a type to the variable 'if_condition_109203' (line 1020)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1020, 4), 'if_condition_109203', if_condition_109203)
    # SSA begins for if statement (line 1020)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1021)
    # Processing the call arguments (line 1021)
    str_109205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1022, 12), 'str', 'array must not contain infs or NaNs')
    # Processing the call keyword arguments (line 1021)
    kwargs_109206 = {}
    # Getting the type of 'ValueError' (line 1021)
    ValueError_109204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1021)
    ValueError_call_result_109207 = invoke(stypy.reporting.localization.Localization(__file__, 1021, 14), ValueError_109204, *[str_109205], **kwargs_109206)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1021, 8), ValueError_call_result_109207, 'raise parameter', BaseException)
    # SSA join for if statement (line 1020)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'a' (line 1023)
    a_109208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 11), 'a')
    # Assigning a type to the variable 'stypy_return_type' (line 1023)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1023, 4), 'stypy_return_type', a_109208)
    
    # ################# End of 'asarray_chkfinite(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'asarray_chkfinite' in the type store
    # Getting the type of 'stypy_return_type' (line 959)
    stypy_return_type_109209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_109209)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'asarray_chkfinite'
    return stypy_return_type_109209

# Assigning a type to the variable 'asarray_chkfinite' (line 959)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 959, 0), 'asarray_chkfinite', asarray_chkfinite)

@norecursion
def piecewise(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'piecewise'
    module_type_store = module_type_store.open_function_context('piecewise', 1026, 0, False)
    
    # Passed parameters checking function
    piecewise.stypy_localization = localization
    piecewise.stypy_type_of_self = None
    piecewise.stypy_type_store = module_type_store
    piecewise.stypy_function_name = 'piecewise'
    piecewise.stypy_param_names_list = ['x', 'condlist', 'funclist']
    piecewise.stypy_varargs_param_name = 'args'
    piecewise.stypy_kwargs_param_name = 'kw'
    piecewise.stypy_call_defaults = defaults
    piecewise.stypy_call_varargs = varargs
    piecewise.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'piecewise', ['x', 'condlist', 'funclist'], 'args', 'kw', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'piecewise', localization, ['x', 'condlist', 'funclist'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'piecewise(...)' code ##################

    str_109210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1106, (-1)), 'str', "\n    Evaluate a piecewise-defined function.\n\n    Given a set of conditions and corresponding functions, evaluate each\n    function on the input data wherever its condition is true.\n\n    Parameters\n    ----------\n    x : ndarray\n        The input domain.\n    condlist : list of bool arrays\n        Each boolean array corresponds to a function in `funclist`.  Wherever\n        `condlist[i]` is True, `funclist[i](x)` is used as the output value.\n\n        Each boolean array in `condlist` selects a piece of `x`,\n        and should therefore be of the same shape as `x`.\n\n        The length of `condlist` must correspond to that of `funclist`.\n        If one extra function is given, i.e. if\n        ``len(funclist) - len(condlist) == 1``, then that extra function\n        is the default value, used wherever all conditions are false.\n    funclist : list of callables, f(x,*args,**kw), or scalars\n        Each function is evaluated over `x` wherever its corresponding\n        condition is True.  It should take an array as input and give an array\n        or a scalar value as output.  If, instead of a callable,\n        a scalar is provided then a constant function (``lambda x: scalar``) is\n        assumed.\n    args : tuple, optional\n        Any further arguments given to `piecewise` are passed to the functions\n        upon execution, i.e., if called ``piecewise(..., ..., 1, 'a')``, then\n        each function is called as ``f(x, 1, 'a')``.\n    kw : dict, optional\n        Keyword arguments used in calling `piecewise` are passed to the\n        functions upon execution, i.e., if called\n        ``piecewise(..., ..., lambda=1)``, then each function is called as\n        ``f(x, lambda=1)``.\n\n    Returns\n    -------\n    out : ndarray\n        The output is the same shape and type as x and is found by\n        calling the functions in `funclist` on the appropriate portions of `x`,\n        as defined by the boolean arrays in `condlist`.  Portions not covered\n        by any condition have a default value of 0.\n\n\n    See Also\n    --------\n    choose, select, where\n\n    Notes\n    -----\n    This is similar to choose or select, except that functions are\n    evaluated on elements of `x` that satisfy the corresponding condition from\n    `condlist`.\n\n    The result is::\n\n            |--\n            |funclist[0](x[condlist[0]])\n      out = |funclist[1](x[condlist[1]])\n            |...\n            |funclist[n2](x[condlist[n2]])\n            |--\n\n    Examples\n    --------\n    Define the sigma function, which is -1 for ``x < 0`` and +1 for ``x >= 0``.\n\n    >>> x = np.linspace(-2.5, 2.5, 6)\n    >>> np.piecewise(x, [x < 0, x >= 0], [-1, 1])\n    array([-1., -1., -1.,  1.,  1.,  1.])\n\n    Define the absolute value, which is ``-x`` for ``x <0`` and ``x`` for\n    ``x >= 0``.\n\n    >>> np.piecewise(x, [x < 0, x >= 0], [lambda x: -x, lambda x: x])\n    array([ 2.5,  1.5,  0.5,  0.5,  1.5,  2.5])\n\n    ")
    
    # Assigning a Call to a Name (line 1107):
    
    # Assigning a Call to a Name (line 1107):
    
    # Call to asanyarray(...): (line 1107)
    # Processing the call arguments (line 1107)
    # Getting the type of 'x' (line 1107)
    x_109212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 19), 'x', False)
    # Processing the call keyword arguments (line 1107)
    kwargs_109213 = {}
    # Getting the type of 'asanyarray' (line 1107)
    asanyarray_109211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 8), 'asanyarray', False)
    # Calling asanyarray(args, kwargs) (line 1107)
    asanyarray_call_result_109214 = invoke(stypy.reporting.localization.Localization(__file__, 1107, 8), asanyarray_109211, *[x_109212], **kwargs_109213)
    
    # Assigning a type to the variable 'x' (line 1107)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1107, 4), 'x', asanyarray_call_result_109214)
    
    # Assigning a Call to a Name (line 1108):
    
    # Assigning a Call to a Name (line 1108):
    
    # Call to len(...): (line 1108)
    # Processing the call arguments (line 1108)
    # Getting the type of 'funclist' (line 1108)
    funclist_109216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1108, 13), 'funclist', False)
    # Processing the call keyword arguments (line 1108)
    kwargs_109217 = {}
    # Getting the type of 'len' (line 1108)
    len_109215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1108, 9), 'len', False)
    # Calling len(args, kwargs) (line 1108)
    len_call_result_109218 = invoke(stypy.reporting.localization.Localization(__file__, 1108, 9), len_109215, *[funclist_109216], **kwargs_109217)
    
    # Assigning a type to the variable 'n2' (line 1108)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1108, 4), 'n2', len_call_result_109218)
    
    
    # Evaluating a boolean operation
    
    # Call to isscalar(...): (line 1109)
    # Processing the call arguments (line 1109)
    # Getting the type of 'condlist' (line 1109)
    condlist_109220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 17), 'condlist', False)
    # Processing the call keyword arguments (line 1109)
    kwargs_109221 = {}
    # Getting the type of 'isscalar' (line 1109)
    isscalar_109219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 8), 'isscalar', False)
    # Calling isscalar(args, kwargs) (line 1109)
    isscalar_call_result_109222 = invoke(stypy.reporting.localization.Localization(__file__, 1109, 8), isscalar_109219, *[condlist_109220], **kwargs_109221)
    
    
    
    # Evaluating a boolean operation
    
    # Call to isinstance(...): (line 1109)
    # Processing the call arguments (line 1109)
    
    # Obtaining the type of the subscript
    int_109224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1109, 55), 'int')
    # Getting the type of 'condlist' (line 1109)
    condlist_109225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 46), 'condlist', False)
    # Obtaining the member '__getitem__' of a type (line 1109)
    getitem___109226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1109, 46), condlist_109225, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1109)
    subscript_call_result_109227 = invoke(stypy.reporting.localization.Localization(__file__, 1109, 46), getitem___109226, int_109224)
    
    # Getting the type of 'list' (line 1109)
    list_109228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 59), 'list', False)
    # Processing the call keyword arguments (line 1109)
    kwargs_109229 = {}
    # Getting the type of 'isinstance' (line 1109)
    isinstance_109223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 35), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1109)
    isinstance_call_result_109230 = invoke(stypy.reporting.localization.Localization(__file__, 1109, 35), isinstance_109223, *[subscript_call_result_109227, list_109228], **kwargs_109229)
    
    
    # Call to isinstance(...): (line 1110)
    # Processing the call arguments (line 1110)
    
    # Obtaining the type of the subscript
    int_109232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1110, 55), 'int')
    # Getting the type of 'condlist' (line 1110)
    condlist_109233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 46), 'condlist', False)
    # Obtaining the member '__getitem__' of a type (line 1110)
    getitem___109234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1110, 46), condlist_109233, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1110)
    subscript_call_result_109235 = invoke(stypy.reporting.localization.Localization(__file__, 1110, 46), getitem___109234, int_109232)
    
    # Getting the type of 'ndarray' (line 1110)
    ndarray_109236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 59), 'ndarray', False)
    # Processing the call keyword arguments (line 1110)
    kwargs_109237 = {}
    # Getting the type of 'isinstance' (line 1110)
    isinstance_109231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 35), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1110)
    isinstance_call_result_109238 = invoke(stypy.reporting.localization.Localization(__file__, 1110, 35), isinstance_109231, *[subscript_call_result_109235, ndarray_109236], **kwargs_109237)
    
    # Applying the binary operator 'or' (line 1109)
    result_or_keyword_109239 = python_operator(stypy.reporting.localization.Localization(__file__, 1109, 35), 'or', isinstance_call_result_109230, isinstance_call_result_109238)
    
    # Applying the 'not' unary operator (line 1109)
    result_not__109240 = python_operator(stypy.reporting.localization.Localization(__file__, 1109, 30), 'not', result_or_keyword_109239)
    
    # Applying the binary operator 'or' (line 1109)
    result_or_keyword_109241 = python_operator(stypy.reporting.localization.Localization(__file__, 1109, 8), 'or', isscalar_call_result_109222, result_not__109240)
    
    # Testing the type of an if condition (line 1109)
    if_condition_109242 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1109, 4), result_or_keyword_109241)
    # Assigning a type to the variable 'if_condition_109242' (line 1109)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1109, 4), 'if_condition_109242', if_condition_109242)
    # SSA begins for if statement (line 1109)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a List to a Name (line 1111):
    
    # Assigning a List to a Name (line 1111):
    
    # Obtaining an instance of the builtin type 'list' (line 1111)
    list_109243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1111, 19), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1111)
    # Adding element type (line 1111)
    # Getting the type of 'condlist' (line 1111)
    condlist_109244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1111, 20), 'condlist')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1111, 19), list_109243, condlist_109244)
    
    # Assigning a type to the variable 'condlist' (line 1111)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1111, 8), 'condlist', list_109243)
    # SSA join for if statement (line 1109)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1112):
    
    # Assigning a Call to a Name (line 1112):
    
    # Call to array(...): (line 1112)
    # Processing the call arguments (line 1112)
    # Getting the type of 'condlist' (line 1112)
    condlist_109246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 21), 'condlist', False)
    # Processing the call keyword arguments (line 1112)
    # Getting the type of 'bool' (line 1112)
    bool_109247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 37), 'bool', False)
    keyword_109248 = bool_109247
    kwargs_109249 = {'dtype': keyword_109248}
    # Getting the type of 'array' (line 1112)
    array_109245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 15), 'array', False)
    # Calling array(args, kwargs) (line 1112)
    array_call_result_109250 = invoke(stypy.reporting.localization.Localization(__file__, 1112, 15), array_109245, *[condlist_109246], **kwargs_109249)
    
    # Assigning a type to the variable 'condlist' (line 1112)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1112, 4), 'condlist', array_call_result_109250)
    
    # Assigning a Call to a Name (line 1113):
    
    # Assigning a Call to a Name (line 1113):
    
    # Call to len(...): (line 1113)
    # Processing the call arguments (line 1113)
    # Getting the type of 'condlist' (line 1113)
    condlist_109252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1113, 12), 'condlist', False)
    # Processing the call keyword arguments (line 1113)
    kwargs_109253 = {}
    # Getting the type of 'len' (line 1113)
    len_109251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1113, 8), 'len', False)
    # Calling len(args, kwargs) (line 1113)
    len_call_result_109254 = invoke(stypy.reporting.localization.Localization(__file__, 1113, 8), len_109251, *[condlist_109252], **kwargs_109253)
    
    # Assigning a type to the variable 'n' (line 1113)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1113, 4), 'n', len_call_result_109254)
    
    # Assigning a Name to a Name (line 1117):
    
    # Assigning a Name to a Name (line 1117):
    # Getting the type of 'False' (line 1117)
    False_109255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1117, 12), 'False')
    # Assigning a type to the variable 'zerod' (line 1117)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1117, 4), 'zerod', False_109255)
    
    
    # Getting the type of 'x' (line 1118)
    x_109256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 7), 'x')
    # Obtaining the member 'ndim' of a type (line 1118)
    ndim_109257 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1118, 7), x_109256, 'ndim')
    int_109258 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1118, 17), 'int')
    # Applying the binary operator '==' (line 1118)
    result_eq_109259 = python_operator(stypy.reporting.localization.Localization(__file__, 1118, 7), '==', ndim_109257, int_109258)
    
    # Testing the type of an if condition (line 1118)
    if_condition_109260 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1118, 4), result_eq_109259)
    # Assigning a type to the variable 'if_condition_109260' (line 1118)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1118, 4), 'if_condition_109260', if_condition_109260)
    # SSA begins for if statement (line 1118)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 1119):
    
    # Assigning a Subscript to a Name (line 1119):
    
    # Obtaining the type of the subscript
    # Getting the type of 'None' (line 1119)
    None_109261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 14), 'None')
    # Getting the type of 'x' (line 1119)
    x_109262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 12), 'x')
    # Obtaining the member '__getitem__' of a type (line 1119)
    getitem___109263 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1119, 12), x_109262, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1119)
    subscript_call_result_109264 = invoke(stypy.reporting.localization.Localization(__file__, 1119, 12), getitem___109263, None_109261)
    
    # Assigning a type to the variable 'x' (line 1119)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1119, 8), 'x', subscript_call_result_109264)
    
    # Assigning a Name to a Name (line 1120):
    
    # Assigning a Name to a Name (line 1120):
    # Getting the type of 'True' (line 1120)
    True_109265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 16), 'True')
    # Assigning a type to the variable 'zerod' (line 1120)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1120, 8), 'zerod', True_109265)
    
    
    
    # Obtaining the type of the subscript
    int_109266 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1121, 26), 'int')
    # Getting the type of 'condlist' (line 1121)
    condlist_109267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1121, 11), 'condlist')
    # Obtaining the member 'shape' of a type (line 1121)
    shape_109268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1121, 11), condlist_109267, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1121)
    getitem___109269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1121, 11), shape_109268, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1121)
    subscript_call_result_109270 = invoke(stypy.reporting.localization.Localization(__file__, 1121, 11), getitem___109269, int_109266)
    
    int_109271 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1121, 33), 'int')
    # Applying the binary operator '!=' (line 1121)
    result_ne_109272 = python_operator(stypy.reporting.localization.Localization(__file__, 1121, 11), '!=', subscript_call_result_109270, int_109271)
    
    # Testing the type of an if condition (line 1121)
    if_condition_109273 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1121, 8), result_ne_109272)
    # Assigning a type to the variable 'if_condition_109273' (line 1121)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1121, 8), 'if_condition_109273', if_condition_109273)
    # SSA begins for if statement (line 1121)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 1122):
    
    # Assigning a Attribute to a Name (line 1122):
    # Getting the type of 'condlist' (line 1122)
    condlist_109274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 23), 'condlist')
    # Obtaining the member 'T' of a type (line 1122)
    T_109275 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1122, 23), condlist_109274, 'T')
    # Assigning a type to the variable 'condlist' (line 1122)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1122, 12), 'condlist', T_109275)
    # SSA join for if statement (line 1121)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1118)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'n' (line 1123)
    n_109276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 7), 'n')
    # Getting the type of 'n2' (line 1123)
    n2_109277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 12), 'n2')
    int_109278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1123, 17), 'int')
    # Applying the binary operator '-' (line 1123)
    result_sub_109279 = python_operator(stypy.reporting.localization.Localization(__file__, 1123, 12), '-', n2_109277, int_109278)
    
    # Applying the binary operator '==' (line 1123)
    result_eq_109280 = python_operator(stypy.reporting.localization.Localization(__file__, 1123, 7), '==', n_109276, result_sub_109279)
    
    # Testing the type of an if condition (line 1123)
    if_condition_109281 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1123, 4), result_eq_109280)
    # Assigning a type to the variable 'if_condition_109281' (line 1123)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1123, 4), 'if_condition_109281', if_condition_109281)
    # SSA begins for if statement (line 1123)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1124):
    
    # Assigning a Call to a Name (line 1124):
    
    # Call to reduce(...): (line 1124)
    # Processing the call arguments (line 1124)
    # Getting the type of 'condlist' (line 1124)
    condlist_109285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 39), 'condlist', False)
    # Processing the call keyword arguments (line 1124)
    int_109286 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1124, 54), 'int')
    keyword_109287 = int_109286
    kwargs_109288 = {'axis': keyword_109287}
    # Getting the type of 'np' (line 1124)
    np_109282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 18), 'np', False)
    # Obtaining the member 'logical_or' of a type (line 1124)
    logical_or_109283 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1124, 18), np_109282, 'logical_or')
    # Obtaining the member 'reduce' of a type (line 1124)
    reduce_109284 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1124, 18), logical_or_109283, 'reduce')
    # Calling reduce(args, kwargs) (line 1124)
    reduce_call_result_109289 = invoke(stypy.reporting.localization.Localization(__file__, 1124, 18), reduce_109284, *[condlist_109285], **kwargs_109288)
    
    # Assigning a type to the variable 'totlist' (line 1124)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1124, 8), 'totlist', reduce_call_result_109289)
    
    
    # Getting the type of 'x' (line 1126)
    x_109290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 11), 'x')
    # Obtaining the member 'ndim' of a type (line 1126)
    ndim_109291 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 11), x_109290, 'ndim')
    int_109292 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1126, 21), 'int')
    # Applying the binary operator '<=' (line 1126)
    result_le_109293 = python_operator(stypy.reporting.localization.Localization(__file__, 1126, 11), '<=', ndim_109291, int_109292)
    
    # Testing the type of an if condition (line 1126)
    if_condition_109294 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1126, 8), result_le_109293)
    # Assigning a type to the variable 'if_condition_109294' (line 1126)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1126, 8), 'if_condition_109294', if_condition_109294)
    # SSA begins for if statement (line 1126)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1127):
    
    # Assigning a Call to a Name (line 1127):
    
    # Call to vstack(...): (line 1127)
    # Processing the call arguments (line 1127)
    
    # Obtaining an instance of the builtin type 'list' (line 1127)
    list_109297 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1127, 33), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1127)
    # Adding element type (line 1127)
    # Getting the type of 'condlist' (line 1127)
    condlist_109298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 34), 'condlist', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1127, 33), list_109297, condlist_109298)
    # Adding element type (line 1127)
    
    # Getting the type of 'totlist' (line 1127)
    totlist_109299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 45), 'totlist', False)
    # Applying the '~' unary operator (line 1127)
    result_inv_109300 = python_operator(stypy.reporting.localization.Localization(__file__, 1127, 44), '~', totlist_109299)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1127, 33), list_109297, result_inv_109300)
    
    # Processing the call keyword arguments (line 1127)
    kwargs_109301 = {}
    # Getting the type of 'np' (line 1127)
    np_109295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 23), 'np', False)
    # Obtaining the member 'vstack' of a type (line 1127)
    vstack_109296 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1127, 23), np_109295, 'vstack')
    # Calling vstack(args, kwargs) (line 1127)
    vstack_call_result_109302 = invoke(stypy.reporting.localization.Localization(__file__, 1127, 23), vstack_109296, *[list_109297], **kwargs_109301)
    
    # Assigning a type to the variable 'condlist' (line 1127)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1127, 12), 'condlist', vstack_call_result_109302)
    # SSA branch for the else part of an if statement (line 1126)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a ListComp to a Name (line 1129):
    
    # Assigning a ListComp to a Name (line 1129):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'condlist' (line 1129)
    condlist_109309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 56), 'condlist')
    comprehension_109310 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1129, 24), condlist_109309)
    # Assigning a type to the variable 'c' (line 1129)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1129, 24), 'c', comprehension_109310)
    
    # Call to asarray(...): (line 1129)
    # Processing the call arguments (line 1129)
    # Getting the type of 'c' (line 1129)
    c_109304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 32), 'c', False)
    # Processing the call keyword arguments (line 1129)
    # Getting the type of 'bool' (line 1129)
    bool_109305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 41), 'bool', False)
    keyword_109306 = bool_109305
    kwargs_109307 = {'dtype': keyword_109306}
    # Getting the type of 'asarray' (line 1129)
    asarray_109303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 24), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1129)
    asarray_call_result_109308 = invoke(stypy.reporting.localization.Localization(__file__, 1129, 24), asarray_109303, *[c_109304], **kwargs_109307)
    
    list_109311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1129, 24), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1129, 24), list_109311, asarray_call_result_109308)
    # Assigning a type to the variable 'condlist' (line 1129)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1129, 12), 'condlist', list_109311)
    
    # Assigning a Subscript to a Name (line 1130):
    
    # Assigning a Subscript to a Name (line 1130):
    
    # Obtaining the type of the subscript
    int_109312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1130, 31), 'int')
    # Getting the type of 'condlist' (line 1130)
    condlist_109313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 22), 'condlist')
    # Obtaining the member '__getitem__' of a type (line 1130)
    getitem___109314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1130, 22), condlist_109313, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1130)
    subscript_call_result_109315 = invoke(stypy.reporting.localization.Localization(__file__, 1130, 22), getitem___109314, int_109312)
    
    # Assigning a type to the variable 'totlist' (line 1130)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1130, 12), 'totlist', subscript_call_result_109315)
    
    
    # Call to range(...): (line 1131)
    # Processing the call arguments (line 1131)
    int_109317 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1131, 27), 'int')
    # Getting the type of 'n' (line 1131)
    n_109318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1131, 30), 'n', False)
    # Processing the call keyword arguments (line 1131)
    kwargs_109319 = {}
    # Getting the type of 'range' (line 1131)
    range_109316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1131, 21), 'range', False)
    # Calling range(args, kwargs) (line 1131)
    range_call_result_109320 = invoke(stypy.reporting.localization.Localization(__file__, 1131, 21), range_109316, *[int_109317, n_109318], **kwargs_109319)
    
    # Testing the type of a for loop iterable (line 1131)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1131, 12), range_call_result_109320)
    # Getting the type of the for loop variable (line 1131)
    for_loop_var_109321 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1131, 12), range_call_result_109320)
    # Assigning a type to the variable 'k' (line 1131)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1131, 12), 'k', for_loop_var_109321)
    # SSA begins for a for statement (line 1131)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Getting the type of 'totlist' (line 1132)
    totlist_109322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 16), 'totlist')
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 1132)
    k_109323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 36), 'k')
    # Getting the type of 'condlist' (line 1132)
    condlist_109324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 27), 'condlist')
    # Obtaining the member '__getitem__' of a type (line 1132)
    getitem___109325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1132, 27), condlist_109324, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1132)
    subscript_call_result_109326 = invoke(stypy.reporting.localization.Localization(__file__, 1132, 27), getitem___109325, k_109323)
    
    # Applying the binary operator '|=' (line 1132)
    result_ior_109327 = python_operator(stypy.reporting.localization.Localization(__file__, 1132, 16), '|=', totlist_109322, subscript_call_result_109326)
    # Assigning a type to the variable 'totlist' (line 1132)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1132, 16), 'totlist', result_ior_109327)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to append(...): (line 1133)
    # Processing the call arguments (line 1133)
    
    # Getting the type of 'totlist' (line 1133)
    totlist_109330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 29), 'totlist', False)
    # Applying the '~' unary operator (line 1133)
    result_inv_109331 = python_operator(stypy.reporting.localization.Localization(__file__, 1133, 28), '~', totlist_109330)
    
    # Processing the call keyword arguments (line 1133)
    kwargs_109332 = {}
    # Getting the type of 'condlist' (line 1133)
    condlist_109328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 12), 'condlist', False)
    # Obtaining the member 'append' of a type (line 1133)
    append_109329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1133, 12), condlist_109328, 'append')
    # Calling append(args, kwargs) (line 1133)
    append_call_result_109333 = invoke(stypy.reporting.localization.Localization(__file__, 1133, 12), append_109329, *[result_inv_109331], **kwargs_109332)
    
    # SSA join for if statement (line 1126)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'n' (line 1134)
    n_109334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 8), 'n')
    int_109335 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1134, 13), 'int')
    # Applying the binary operator '+=' (line 1134)
    result_iadd_109336 = python_operator(stypy.reporting.localization.Localization(__file__, 1134, 8), '+=', n_109334, int_109335)
    # Assigning a type to the variable 'n' (line 1134)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1134, 8), 'n', result_iadd_109336)
    
    # SSA join for if statement (line 1123)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1136):
    
    # Assigning a Call to a Name (line 1136):
    
    # Call to zeros(...): (line 1136)
    # Processing the call arguments (line 1136)
    # Getting the type of 'x' (line 1136)
    x_109338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 14), 'x', False)
    # Obtaining the member 'shape' of a type (line 1136)
    shape_109339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1136, 14), x_109338, 'shape')
    # Getting the type of 'x' (line 1136)
    x_109340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 23), 'x', False)
    # Obtaining the member 'dtype' of a type (line 1136)
    dtype_109341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1136, 23), x_109340, 'dtype')
    # Processing the call keyword arguments (line 1136)
    kwargs_109342 = {}
    # Getting the type of 'zeros' (line 1136)
    zeros_109337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 8), 'zeros', False)
    # Calling zeros(args, kwargs) (line 1136)
    zeros_call_result_109343 = invoke(stypy.reporting.localization.Localization(__file__, 1136, 8), zeros_109337, *[shape_109339, dtype_109341], **kwargs_109342)
    
    # Assigning a type to the variable 'y' (line 1136)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1136, 4), 'y', zeros_call_result_109343)
    
    
    # Call to range(...): (line 1137)
    # Processing the call arguments (line 1137)
    # Getting the type of 'n' (line 1137)
    n_109345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1137, 19), 'n', False)
    # Processing the call keyword arguments (line 1137)
    kwargs_109346 = {}
    # Getting the type of 'range' (line 1137)
    range_109344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1137, 13), 'range', False)
    # Calling range(args, kwargs) (line 1137)
    range_call_result_109347 = invoke(stypy.reporting.localization.Localization(__file__, 1137, 13), range_109344, *[n_109345], **kwargs_109346)
    
    # Testing the type of a for loop iterable (line 1137)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1137, 4), range_call_result_109347)
    # Getting the type of the for loop variable (line 1137)
    for_loop_var_109348 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1137, 4), range_call_result_109347)
    # Assigning a type to the variable 'k' (line 1137)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1137, 4), 'k', for_loop_var_109348)
    # SSA begins for a for statement (line 1137)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Subscript to a Name (line 1138):
    
    # Assigning a Subscript to a Name (line 1138):
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 1138)
    k_109349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 24), 'k')
    # Getting the type of 'funclist' (line 1138)
    funclist_109350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 15), 'funclist')
    # Obtaining the member '__getitem__' of a type (line 1138)
    getitem___109351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1138, 15), funclist_109350, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1138)
    subscript_call_result_109352 = invoke(stypy.reporting.localization.Localization(__file__, 1138, 15), getitem___109351, k_109349)
    
    # Assigning a type to the variable 'item' (line 1138)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1138, 8), 'item', subscript_call_result_109352)
    
    
    
    # Call to isinstance(...): (line 1139)
    # Processing the call arguments (line 1139)
    # Getting the type of 'item' (line 1139)
    item_109354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1139, 26), 'item', False)
    # Getting the type of 'collections' (line 1139)
    collections_109355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1139, 32), 'collections', False)
    # Obtaining the member 'Callable' of a type (line 1139)
    Callable_109356 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1139, 32), collections_109355, 'Callable')
    # Processing the call keyword arguments (line 1139)
    kwargs_109357 = {}
    # Getting the type of 'isinstance' (line 1139)
    isinstance_109353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1139, 15), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1139)
    isinstance_call_result_109358 = invoke(stypy.reporting.localization.Localization(__file__, 1139, 15), isinstance_109353, *[item_109354, Callable_109356], **kwargs_109357)
    
    # Applying the 'not' unary operator (line 1139)
    result_not__109359 = python_operator(stypy.reporting.localization.Localization(__file__, 1139, 11), 'not', isinstance_call_result_109358)
    
    # Testing the type of an if condition (line 1139)
    if_condition_109360 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1139, 8), result_not__109359)
    # Assigning a type to the variable 'if_condition_109360' (line 1139)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1139, 8), 'if_condition_109360', if_condition_109360)
    # SSA begins for if statement (line 1139)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Subscript (line 1140):
    
    # Assigning a Name to a Subscript (line 1140):
    # Getting the type of 'item' (line 1140)
    item_109361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 29), 'item')
    # Getting the type of 'y' (line 1140)
    y_109362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 12), 'y')
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 1140)
    k_109363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 23), 'k')
    # Getting the type of 'condlist' (line 1140)
    condlist_109364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 14), 'condlist')
    # Obtaining the member '__getitem__' of a type (line 1140)
    getitem___109365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1140, 14), condlist_109364, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1140)
    subscript_call_result_109366 = invoke(stypy.reporting.localization.Localization(__file__, 1140, 14), getitem___109365, k_109363)
    
    # Storing an element on a container (line 1140)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1140, 12), y_109362, (subscript_call_result_109366, item_109361))
    # SSA branch for the else part of an if statement (line 1139)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Subscript to a Name (line 1142):
    
    # Assigning a Subscript to a Name (line 1142):
    
    # Obtaining the type of the subscript
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 1142)
    k_109367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1142, 30), 'k')
    # Getting the type of 'condlist' (line 1142)
    condlist_109368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1142, 21), 'condlist')
    # Obtaining the member '__getitem__' of a type (line 1142)
    getitem___109369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1142, 21), condlist_109368, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1142)
    subscript_call_result_109370 = invoke(stypy.reporting.localization.Localization(__file__, 1142, 21), getitem___109369, k_109367)
    
    # Getting the type of 'x' (line 1142)
    x_109371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1142, 19), 'x')
    # Obtaining the member '__getitem__' of a type (line 1142)
    getitem___109372 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1142, 19), x_109371, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1142)
    subscript_call_result_109373 = invoke(stypy.reporting.localization.Localization(__file__, 1142, 19), getitem___109372, subscript_call_result_109370)
    
    # Assigning a type to the variable 'vals' (line 1142)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1142, 12), 'vals', subscript_call_result_109373)
    
    
    # Getting the type of 'vals' (line 1143)
    vals_109374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 15), 'vals')
    # Obtaining the member 'size' of a type (line 1143)
    size_109375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1143, 15), vals_109374, 'size')
    int_109376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1143, 27), 'int')
    # Applying the binary operator '>' (line 1143)
    result_gt_109377 = python_operator(stypy.reporting.localization.Localization(__file__, 1143, 15), '>', size_109375, int_109376)
    
    # Testing the type of an if condition (line 1143)
    if_condition_109378 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1143, 12), result_gt_109377)
    # Assigning a type to the variable 'if_condition_109378' (line 1143)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1143, 12), 'if_condition_109378', if_condition_109378)
    # SSA begins for if statement (line 1143)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Subscript (line 1144):
    
    # Assigning a Call to a Subscript (line 1144):
    
    # Call to item(...): (line 1144)
    # Processing the call arguments (line 1144)
    # Getting the type of 'vals' (line 1144)
    vals_109380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 38), 'vals', False)
    # Getting the type of 'args' (line 1144)
    args_109381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 45), 'args', False)
    # Processing the call keyword arguments (line 1144)
    # Getting the type of 'kw' (line 1144)
    kw_109382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 53), 'kw', False)
    kwargs_109383 = {'kw_109382': kw_109382}
    # Getting the type of 'item' (line 1144)
    item_109379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 33), 'item', False)
    # Calling item(args, kwargs) (line 1144)
    item_call_result_109384 = invoke(stypy.reporting.localization.Localization(__file__, 1144, 33), item_109379, *[vals_109380, args_109381], **kwargs_109383)
    
    # Getting the type of 'y' (line 1144)
    y_109385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 16), 'y')
    
    # Obtaining the type of the subscript
    # Getting the type of 'k' (line 1144)
    k_109386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 27), 'k')
    # Getting the type of 'condlist' (line 1144)
    condlist_109387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 18), 'condlist')
    # Obtaining the member '__getitem__' of a type (line 1144)
    getitem___109388 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1144, 18), condlist_109387, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1144)
    subscript_call_result_109389 = invoke(stypy.reporting.localization.Localization(__file__, 1144, 18), getitem___109388, k_109386)
    
    # Storing an element on a container (line 1144)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1144, 16), y_109385, (subscript_call_result_109389, item_call_result_109384))
    # SSA join for if statement (line 1143)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1139)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'zerod' (line 1145)
    zerod_109390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 7), 'zerod')
    # Testing the type of an if condition (line 1145)
    if_condition_109391 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1145, 4), zerod_109390)
    # Assigning a type to the variable 'if_condition_109391' (line 1145)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1145, 4), 'if_condition_109391', if_condition_109391)
    # SSA begins for if statement (line 1145)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1146):
    
    # Assigning a Call to a Name (line 1146):
    
    # Call to squeeze(...): (line 1146)
    # Processing the call keyword arguments (line 1146)
    kwargs_109394 = {}
    # Getting the type of 'y' (line 1146)
    y_109392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 12), 'y', False)
    # Obtaining the member 'squeeze' of a type (line 1146)
    squeeze_109393 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1146, 12), y_109392, 'squeeze')
    # Calling squeeze(args, kwargs) (line 1146)
    squeeze_call_result_109395 = invoke(stypy.reporting.localization.Localization(__file__, 1146, 12), squeeze_109393, *[], **kwargs_109394)
    
    # Assigning a type to the variable 'y' (line 1146)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1146, 8), 'y', squeeze_call_result_109395)
    # SSA join for if statement (line 1145)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'y' (line 1147)
    y_109396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 11), 'y')
    # Assigning a type to the variable 'stypy_return_type' (line 1147)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1147, 4), 'stypy_return_type', y_109396)
    
    # ################# End of 'piecewise(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'piecewise' in the type store
    # Getting the type of 'stypy_return_type' (line 1026)
    stypy_return_type_109397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1026, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_109397)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'piecewise'
    return stypy_return_type_109397

# Assigning a type to the variable 'piecewise' (line 1026)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1026, 0), 'piecewise', piecewise)

@norecursion
def select(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_109398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1150, 41), 'int')
    defaults = [int_109398]
    # Create a new context for function 'select'
    module_type_store = module_type_store.open_function_context('select', 1150, 0, False)
    
    # Passed parameters checking function
    select.stypy_localization = localization
    select.stypy_type_of_self = None
    select.stypy_type_store = module_type_store
    select.stypy_function_name = 'select'
    select.stypy_param_names_list = ['condlist', 'choicelist', 'default']
    select.stypy_varargs_param_name = None
    select.stypy_kwargs_param_name = None
    select.stypy_call_defaults = defaults
    select.stypy_call_varargs = varargs
    select.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'select', ['condlist', 'choicelist', 'default'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'select', localization, ['condlist', 'choicelist', 'default'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'select(...)' code ##################

    str_109399 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1186, (-1)), 'str', '\n    Return an array drawn from elements in choicelist, depending on conditions.\n\n    Parameters\n    ----------\n    condlist : list of bool ndarrays\n        The list of conditions which determine from which array in `choicelist`\n        the output elements are taken. When multiple conditions are satisfied,\n        the first one encountered in `condlist` is used.\n    choicelist : list of ndarrays\n        The list of arrays from which the output elements are taken. It has\n        to be of the same length as `condlist`.\n    default : scalar, optional\n        The element inserted in `output` when all conditions evaluate to False.\n\n    Returns\n    -------\n    output : ndarray\n        The output at position m is the m-th element of the array in\n        `choicelist` where the m-th element of the corresponding array in\n        `condlist` is True.\n\n    See Also\n    --------\n    where : Return elements from one of two arrays depending on condition.\n    take, choose, compress, diag, diagonal\n\n    Examples\n    --------\n    >>> x = np.arange(10)\n    >>> condlist = [x<3, x>5]\n    >>> choicelist = [x, x**2]\n    >>> np.select(condlist, choicelist)\n    array([ 0,  1,  2,  0,  0,  0, 36, 49, 64, 81])\n\n    ')
    
    
    
    # Call to len(...): (line 1188)
    # Processing the call arguments (line 1188)
    # Getting the type of 'condlist' (line 1188)
    condlist_109401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 11), 'condlist', False)
    # Processing the call keyword arguments (line 1188)
    kwargs_109402 = {}
    # Getting the type of 'len' (line 1188)
    len_109400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 7), 'len', False)
    # Calling len(args, kwargs) (line 1188)
    len_call_result_109403 = invoke(stypy.reporting.localization.Localization(__file__, 1188, 7), len_109400, *[condlist_109401], **kwargs_109402)
    
    
    # Call to len(...): (line 1188)
    # Processing the call arguments (line 1188)
    # Getting the type of 'choicelist' (line 1188)
    choicelist_109405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 28), 'choicelist', False)
    # Processing the call keyword arguments (line 1188)
    kwargs_109406 = {}
    # Getting the type of 'len' (line 1188)
    len_109404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 24), 'len', False)
    # Calling len(args, kwargs) (line 1188)
    len_call_result_109407 = invoke(stypy.reporting.localization.Localization(__file__, 1188, 24), len_109404, *[choicelist_109405], **kwargs_109406)
    
    # Applying the binary operator '!=' (line 1188)
    result_ne_109408 = python_operator(stypy.reporting.localization.Localization(__file__, 1188, 7), '!=', len_call_result_109403, len_call_result_109407)
    
    # Testing the type of an if condition (line 1188)
    if_condition_109409 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1188, 4), result_ne_109408)
    # Assigning a type to the variable 'if_condition_109409' (line 1188)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1188, 4), 'if_condition_109409', if_condition_109409)
    # SSA begins for if statement (line 1188)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1189)
    # Processing the call arguments (line 1189)
    str_109411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1190, 12), 'str', 'list of cases must be same length as list of conditions')
    # Processing the call keyword arguments (line 1189)
    kwargs_109412 = {}
    # Getting the type of 'ValueError' (line 1189)
    ValueError_109410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1189)
    ValueError_call_result_109413 = invoke(stypy.reporting.localization.Localization(__file__, 1189, 14), ValueError_109410, *[str_109411], **kwargs_109412)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1189, 8), ValueError_call_result_109413, 'raise parameter', BaseException)
    # SSA join for if statement (line 1188)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 1193)
    # Processing the call arguments (line 1193)
    # Getting the type of 'condlist' (line 1193)
    condlist_109415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1193, 11), 'condlist', False)
    # Processing the call keyword arguments (line 1193)
    kwargs_109416 = {}
    # Getting the type of 'len' (line 1193)
    len_109414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1193, 7), 'len', False)
    # Calling len(args, kwargs) (line 1193)
    len_call_result_109417 = invoke(stypy.reporting.localization.Localization(__file__, 1193, 7), len_109414, *[condlist_109415], **kwargs_109416)
    
    int_109418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1193, 24), 'int')
    # Applying the binary operator '==' (line 1193)
    result_eq_109419 = python_operator(stypy.reporting.localization.Localization(__file__, 1193, 7), '==', len_call_result_109417, int_109418)
    
    # Testing the type of an if condition (line 1193)
    if_condition_109420 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1193, 4), result_eq_109419)
    # Assigning a type to the variable 'if_condition_109420' (line 1193)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1193, 4), 'if_condition_109420', if_condition_109420)
    # SSA begins for if statement (line 1193)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 1195)
    # Processing the call arguments (line 1195)
    str_109423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1195, 22), 'str', 'select with an empty condition list is not possibleand will be deprecated')
    # Getting the type of 'DeprecationWarning' (line 1197)
    DeprecationWarning_109424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1197, 22), 'DeprecationWarning', False)
    # Processing the call keyword arguments (line 1195)
    kwargs_109425 = {}
    # Getting the type of 'warnings' (line 1195)
    warnings_109421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 8), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 1195)
    warn_109422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1195, 8), warnings_109421, 'warn')
    # Calling warn(args, kwargs) (line 1195)
    warn_call_result_109426 = invoke(stypy.reporting.localization.Localization(__file__, 1195, 8), warn_109422, *[str_109423, DeprecationWarning_109424], **kwargs_109425)
    
    
    # Obtaining the type of the subscript
    
    # Obtaining an instance of the builtin type 'tuple' (line 1198)
    tuple_109427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1198, 35), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1198)
    
    
    # Call to asarray(...): (line 1198)
    # Processing the call arguments (line 1198)
    # Getting the type of 'default' (line 1198)
    default_109430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1198, 26), 'default', False)
    # Processing the call keyword arguments (line 1198)
    kwargs_109431 = {}
    # Getting the type of 'np' (line 1198)
    np_109428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1198, 15), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1198)
    asarray_109429 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1198, 15), np_109428, 'asarray')
    # Calling asarray(args, kwargs) (line 1198)
    asarray_call_result_109432 = invoke(stypy.reporting.localization.Localization(__file__, 1198, 15), asarray_109429, *[default_109430], **kwargs_109431)
    
    # Obtaining the member '__getitem__' of a type (line 1198)
    getitem___109433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1198, 15), asarray_call_result_109432, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1198)
    subscript_call_result_109434 = invoke(stypy.reporting.localization.Localization(__file__, 1198, 15), getitem___109433, tuple_109427)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1198)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1198, 8), 'stypy_return_type', subscript_call_result_109434)
    # SSA join for if statement (line 1193)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a ListComp to a Name (line 1200):
    
    # Assigning a ListComp to a Name (line 1200):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'choicelist' (line 1200)
    choicelist_109440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1200, 51), 'choicelist')
    comprehension_109441 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1200, 18), choicelist_109440)
    # Assigning a type to the variable 'choice' (line 1200)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1200, 18), 'choice', comprehension_109441)
    
    # Call to asarray(...): (line 1200)
    # Processing the call arguments (line 1200)
    # Getting the type of 'choice' (line 1200)
    choice_109437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1200, 29), 'choice', False)
    # Processing the call keyword arguments (line 1200)
    kwargs_109438 = {}
    # Getting the type of 'np' (line 1200)
    np_109435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1200, 18), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1200)
    asarray_109436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1200, 18), np_109435, 'asarray')
    # Calling asarray(args, kwargs) (line 1200)
    asarray_call_result_109439 = invoke(stypy.reporting.localization.Localization(__file__, 1200, 18), asarray_109436, *[choice_109437], **kwargs_109438)
    
    list_109442 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1200, 18), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1200, 18), list_109442, asarray_call_result_109439)
    # Assigning a type to the variable 'choicelist' (line 1200)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1200, 4), 'choicelist', list_109442)
    
    # Call to append(...): (line 1201)
    # Processing the call arguments (line 1201)
    
    # Call to asarray(...): (line 1201)
    # Processing the call arguments (line 1201)
    # Getting the type of 'default' (line 1201)
    default_109447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 33), 'default', False)
    # Processing the call keyword arguments (line 1201)
    kwargs_109448 = {}
    # Getting the type of 'np' (line 1201)
    np_109445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 22), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1201)
    asarray_109446 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1201, 22), np_109445, 'asarray')
    # Calling asarray(args, kwargs) (line 1201)
    asarray_call_result_109449 = invoke(stypy.reporting.localization.Localization(__file__, 1201, 22), asarray_109446, *[default_109447], **kwargs_109448)
    
    # Processing the call keyword arguments (line 1201)
    kwargs_109450 = {}
    # Getting the type of 'choicelist' (line 1201)
    choicelist_109443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 4), 'choicelist', False)
    # Obtaining the member 'append' of a type (line 1201)
    append_109444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1201, 4), choicelist_109443, 'append')
    # Calling append(args, kwargs) (line 1201)
    append_call_result_109451 = invoke(stypy.reporting.localization.Localization(__file__, 1201, 4), append_109444, *[asarray_call_result_109449], **kwargs_109450)
    
    
    # Assigning a Call to a Name (line 1205):
    
    # Assigning a Call to a Name (line 1205):
    
    # Call to result_type(...): (line 1205)
    # Getting the type of 'choicelist' (line 1205)
    choicelist_109454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 28), 'choicelist', False)
    # Processing the call keyword arguments (line 1205)
    kwargs_109455 = {}
    # Getting the type of 'np' (line 1205)
    np_109452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 12), 'np', False)
    # Obtaining the member 'result_type' of a type (line 1205)
    result_type_109453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1205, 12), np_109452, 'result_type')
    # Calling result_type(args, kwargs) (line 1205)
    result_type_call_result_109456 = invoke(stypy.reporting.localization.Localization(__file__, 1205, 12), result_type_109453, *[choicelist_109454], **kwargs_109455)
    
    # Assigning a type to the variable 'dtype' (line 1205)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1205, 4), 'dtype', result_type_call_result_109456)
    
    # Assigning a Call to a Name (line 1210):
    
    # Assigning a Call to a Name (line 1210):
    
    # Call to broadcast_arrays(...): (line 1210)
    # Getting the type of 'condlist' (line 1210)
    condlist_109459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1210, 36), 'condlist', False)
    # Processing the call keyword arguments (line 1210)
    kwargs_109460 = {}
    # Getting the type of 'np' (line 1210)
    np_109457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1210, 15), 'np', False)
    # Obtaining the member 'broadcast_arrays' of a type (line 1210)
    broadcast_arrays_109458 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1210, 15), np_109457, 'broadcast_arrays')
    # Calling broadcast_arrays(args, kwargs) (line 1210)
    broadcast_arrays_call_result_109461 = invoke(stypy.reporting.localization.Localization(__file__, 1210, 15), broadcast_arrays_109458, *[condlist_109459], **kwargs_109460)
    
    # Assigning a type to the variable 'condlist' (line 1210)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1210, 4), 'condlist', broadcast_arrays_call_result_109461)
    
    # Assigning a Call to a Name (line 1211):
    
    # Assigning a Call to a Name (line 1211):
    
    # Call to broadcast_arrays(...): (line 1211)
    # Getting the type of 'choicelist' (line 1211)
    choicelist_109464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1211, 38), 'choicelist', False)
    # Processing the call keyword arguments (line 1211)
    kwargs_109465 = {}
    # Getting the type of 'np' (line 1211)
    np_109462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1211, 17), 'np', False)
    # Obtaining the member 'broadcast_arrays' of a type (line 1211)
    broadcast_arrays_109463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1211, 17), np_109462, 'broadcast_arrays')
    # Calling broadcast_arrays(args, kwargs) (line 1211)
    broadcast_arrays_call_result_109466 = invoke(stypy.reporting.localization.Localization(__file__, 1211, 17), broadcast_arrays_109463, *[choicelist_109464], **kwargs_109465)
    
    # Assigning a type to the variable 'choicelist' (line 1211)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1211, 4), 'choicelist', broadcast_arrays_call_result_109466)
    
    # Assigning a Name to a Name (line 1214):
    
    # Assigning a Name to a Name (line 1214):
    # Getting the type of 'False' (line 1214)
    False_109467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 22), 'False')
    # Assigning a type to the variable 'deprecated_ints' (line 1214)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1214, 4), 'deprecated_ints', False_109467)
    
    
    # Call to range(...): (line 1215)
    # Processing the call arguments (line 1215)
    
    # Call to len(...): (line 1215)
    # Processing the call arguments (line 1215)
    # Getting the type of 'condlist' (line 1215)
    condlist_109470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 23), 'condlist', False)
    # Processing the call keyword arguments (line 1215)
    kwargs_109471 = {}
    # Getting the type of 'len' (line 1215)
    len_109469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 19), 'len', False)
    # Calling len(args, kwargs) (line 1215)
    len_call_result_109472 = invoke(stypy.reporting.localization.Localization(__file__, 1215, 19), len_109469, *[condlist_109470], **kwargs_109471)
    
    # Processing the call keyword arguments (line 1215)
    kwargs_109473 = {}
    # Getting the type of 'range' (line 1215)
    range_109468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 13), 'range', False)
    # Calling range(args, kwargs) (line 1215)
    range_call_result_109474 = invoke(stypy.reporting.localization.Localization(__file__, 1215, 13), range_109468, *[len_call_result_109472], **kwargs_109473)
    
    # Testing the type of a for loop iterable (line 1215)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1215, 4), range_call_result_109474)
    # Getting the type of the for loop variable (line 1215)
    for_loop_var_109475 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1215, 4), range_call_result_109474)
    # Assigning a type to the variable 'i' (line 1215)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1215, 4), 'i', for_loop_var_109475)
    # SSA begins for a for statement (line 1215)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Subscript to a Name (line 1216):
    
    # Assigning a Subscript to a Name (line 1216):
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1216)
    i_109476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 24), 'i')
    # Getting the type of 'condlist' (line 1216)
    condlist_109477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 15), 'condlist')
    # Obtaining the member '__getitem__' of a type (line 1216)
    getitem___109478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1216, 15), condlist_109477, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1216)
    subscript_call_result_109479 = invoke(stypy.reporting.localization.Localization(__file__, 1216, 15), getitem___109478, i_109476)
    
    # Assigning a type to the variable 'cond' (line 1216)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1216, 8), 'cond', subscript_call_result_109479)
    
    
    # Getting the type of 'cond' (line 1217)
    cond_109480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1217, 11), 'cond')
    # Obtaining the member 'dtype' of a type (line 1217)
    dtype_109481 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1217, 11), cond_109480, 'dtype')
    # Obtaining the member 'type' of a type (line 1217)
    type_109482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1217, 11), dtype_109481, 'type')
    # Getting the type of 'np' (line 1217)
    np_109483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1217, 34), 'np')
    # Obtaining the member 'bool_' of a type (line 1217)
    bool__109484 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1217, 34), np_109483, 'bool_')
    # Applying the binary operator 'isnot' (line 1217)
    result_is_not_109485 = python_operator(stypy.reporting.localization.Localization(__file__, 1217, 11), 'isnot', type_109482, bool__109484)
    
    # Testing the type of an if condition (line 1217)
    if_condition_109486 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1217, 8), result_is_not_109485)
    # Assigning a type to the variable 'if_condition_109486' (line 1217)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1217, 8), 'if_condition_109486', if_condition_109486)
    # SSA begins for if statement (line 1217)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Call to issubdtype(...): (line 1218)
    # Processing the call arguments (line 1218)
    # Getting the type of 'cond' (line 1218)
    cond_109489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 29), 'cond', False)
    # Obtaining the member 'dtype' of a type (line 1218)
    dtype_109490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1218, 29), cond_109489, 'dtype')
    # Getting the type of 'np' (line 1218)
    np_109491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 41), 'np', False)
    # Obtaining the member 'integer' of a type (line 1218)
    integer_109492 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1218, 41), np_109491, 'integer')
    # Processing the call keyword arguments (line 1218)
    kwargs_109493 = {}
    # Getting the type of 'np' (line 1218)
    np_109487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 15), 'np', False)
    # Obtaining the member 'issubdtype' of a type (line 1218)
    issubdtype_109488 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1218, 15), np_109487, 'issubdtype')
    # Calling issubdtype(args, kwargs) (line 1218)
    issubdtype_call_result_109494 = invoke(stypy.reporting.localization.Localization(__file__, 1218, 15), issubdtype_109488, *[dtype_109490, integer_109492], **kwargs_109493)
    
    # Testing the type of an if condition (line 1218)
    if_condition_109495 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1218, 12), issubdtype_call_result_109494)
    # Assigning a type to the variable 'if_condition_109495' (line 1218)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1218, 12), 'if_condition_109495', if_condition_109495)
    # SSA begins for if statement (line 1218)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Subscript (line 1221):
    
    # Assigning a Call to a Subscript (line 1221):
    
    # Call to astype(...): (line 1221)
    # Processing the call arguments (line 1221)
    # Getting the type of 'bool' (line 1221)
    bool_109501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 49), 'bool', False)
    # Processing the call keyword arguments (line 1221)
    kwargs_109502 = {}
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1221)
    i_109496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 39), 'i', False)
    # Getting the type of 'condlist' (line 1221)
    condlist_109497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 30), 'condlist', False)
    # Obtaining the member '__getitem__' of a type (line 1221)
    getitem___109498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1221, 30), condlist_109497, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1221)
    subscript_call_result_109499 = invoke(stypy.reporting.localization.Localization(__file__, 1221, 30), getitem___109498, i_109496)
    
    # Obtaining the member 'astype' of a type (line 1221)
    astype_109500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1221, 30), subscript_call_result_109499, 'astype')
    # Calling astype(args, kwargs) (line 1221)
    astype_call_result_109503 = invoke(stypy.reporting.localization.Localization(__file__, 1221, 30), astype_109500, *[bool_109501], **kwargs_109502)
    
    # Getting the type of 'condlist' (line 1221)
    condlist_109504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 16), 'condlist')
    # Getting the type of 'i' (line 1221)
    i_109505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 25), 'i')
    # Storing an element on a container (line 1221)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1221, 16), condlist_109504, (i_109505, astype_call_result_109503))
    
    # Assigning a Name to a Name (line 1222):
    
    # Assigning a Name to a Name (line 1222):
    # Getting the type of 'True' (line 1222)
    True_109506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 34), 'True')
    # Assigning a type to the variable 'deprecated_ints' (line 1222)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1222, 16), 'deprecated_ints', True_109506)
    # SSA branch for the else part of an if statement (line 1218)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 1224)
    # Processing the call arguments (line 1224)
    str_109508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1225, 20), 'str', 'invalid entry in choicelist: should be boolean ndarray')
    # Processing the call keyword arguments (line 1224)
    kwargs_109509 = {}
    # Getting the type of 'ValueError' (line 1224)
    ValueError_109507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1224, 22), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1224)
    ValueError_call_result_109510 = invoke(stypy.reporting.localization.Localization(__file__, 1224, 22), ValueError_109507, *[str_109508], **kwargs_109509)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1224, 16), ValueError_call_result_109510, 'raise parameter', BaseException)
    # SSA join for if statement (line 1218)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1217)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'deprecated_ints' (line 1227)
    deprecated_ints_109511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1227, 7), 'deprecated_ints')
    # Testing the type of an if condition (line 1227)
    if_condition_109512 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1227, 4), deprecated_ints_109511)
    # Assigning a type to the variable 'if_condition_109512' (line 1227)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1227, 4), 'if_condition_109512', if_condition_109512)
    # SSA begins for if statement (line 1227)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Str to a Name (line 1229):
    
    # Assigning a Str to a Name (line 1229):
    str_109513 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1229, 14), 'str', 'select condlists containing integer ndarrays is deprecated and will be removed in the future. Use `.astype(bool)` to convert to bools.')
    # Assigning a type to the variable 'msg' (line 1229)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1229, 8), 'msg', str_109513)
    
    # Call to warn(...): (line 1232)
    # Processing the call arguments (line 1232)
    # Getting the type of 'msg' (line 1232)
    msg_109516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 22), 'msg', False)
    # Getting the type of 'DeprecationWarning' (line 1232)
    DeprecationWarning_109517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 27), 'DeprecationWarning', False)
    # Processing the call keyword arguments (line 1232)
    kwargs_109518 = {}
    # Getting the type of 'warnings' (line 1232)
    warnings_109514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 8), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 1232)
    warn_109515 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1232, 8), warnings_109514, 'warn')
    # Calling warn(args, kwargs) (line 1232)
    warn_call_result_109519 = invoke(stypy.reporting.localization.Localization(__file__, 1232, 8), warn_109515, *[msg_109516, DeprecationWarning_109517], **kwargs_109518)
    
    # SSA join for if statement (line 1227)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Obtaining the type of the subscript
    int_109520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1234, 18), 'int')
    # Getting the type of 'choicelist' (line 1234)
    choicelist_109521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 7), 'choicelist')
    # Obtaining the member '__getitem__' of a type (line 1234)
    getitem___109522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1234, 7), choicelist_109521, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1234)
    subscript_call_result_109523 = invoke(stypy.reporting.localization.Localization(__file__, 1234, 7), getitem___109522, int_109520)
    
    # Obtaining the member 'ndim' of a type (line 1234)
    ndim_109524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1234, 7), subscript_call_result_109523, 'ndim')
    int_109525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1234, 29), 'int')
    # Applying the binary operator '==' (line 1234)
    result_eq_109526 = python_operator(stypy.reporting.localization.Localization(__file__, 1234, 7), '==', ndim_109524, int_109525)
    
    # Testing the type of an if condition (line 1234)
    if_condition_109527 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1234, 4), result_eq_109526)
    # Assigning a type to the variable 'if_condition_109527' (line 1234)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1234, 4), 'if_condition_109527', if_condition_109527)
    # SSA begins for if statement (line 1234)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 1236):
    
    # Assigning a Attribute to a Name (line 1236):
    
    # Obtaining the type of the subscript
    int_109528 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1236, 32), 'int')
    # Getting the type of 'condlist' (line 1236)
    condlist_109529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 23), 'condlist')
    # Obtaining the member '__getitem__' of a type (line 1236)
    getitem___109530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1236, 23), condlist_109529, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1236)
    subscript_call_result_109531 = invoke(stypy.reporting.localization.Localization(__file__, 1236, 23), getitem___109530, int_109528)
    
    # Obtaining the member 'shape' of a type (line 1236)
    shape_109532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1236, 23), subscript_call_result_109531, 'shape')
    # Assigning a type to the variable 'result_shape' (line 1236)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1236, 8), 'result_shape', shape_109532)
    # SSA branch for the else part of an if statement (line 1234)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Attribute to a Name (line 1238):
    
    # Assigning a Attribute to a Name (line 1238):
    
    # Obtaining the type of the subscript
    int_109533 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1238, 71), 'int')
    
    # Call to broadcast_arrays(...): (line 1238)
    # Processing the call arguments (line 1238)
    
    # Obtaining the type of the subscript
    int_109536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1238, 52), 'int')
    # Getting the type of 'condlist' (line 1238)
    condlist_109537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 43), 'condlist', False)
    # Obtaining the member '__getitem__' of a type (line 1238)
    getitem___109538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1238, 43), condlist_109537, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1238)
    subscript_call_result_109539 = invoke(stypy.reporting.localization.Localization(__file__, 1238, 43), getitem___109538, int_109536)
    
    
    # Obtaining the type of the subscript
    int_109540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1238, 67), 'int')
    # Getting the type of 'choicelist' (line 1238)
    choicelist_109541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 56), 'choicelist', False)
    # Obtaining the member '__getitem__' of a type (line 1238)
    getitem___109542 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1238, 56), choicelist_109541, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1238)
    subscript_call_result_109543 = invoke(stypy.reporting.localization.Localization(__file__, 1238, 56), getitem___109542, int_109540)
    
    # Processing the call keyword arguments (line 1238)
    kwargs_109544 = {}
    # Getting the type of 'np' (line 1238)
    np_109534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 23), 'np', False)
    # Obtaining the member 'broadcast_arrays' of a type (line 1238)
    broadcast_arrays_109535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1238, 23), np_109534, 'broadcast_arrays')
    # Calling broadcast_arrays(args, kwargs) (line 1238)
    broadcast_arrays_call_result_109545 = invoke(stypy.reporting.localization.Localization(__file__, 1238, 23), broadcast_arrays_109535, *[subscript_call_result_109539, subscript_call_result_109543], **kwargs_109544)
    
    # Obtaining the member '__getitem__' of a type (line 1238)
    getitem___109546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1238, 23), broadcast_arrays_call_result_109545, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1238)
    subscript_call_result_109547 = invoke(stypy.reporting.localization.Localization(__file__, 1238, 23), getitem___109546, int_109533)
    
    # Obtaining the member 'shape' of a type (line 1238)
    shape_109548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1238, 23), subscript_call_result_109547, 'shape')
    # Assigning a type to the variable 'result_shape' (line 1238)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1238, 8), 'result_shape', shape_109548)
    # SSA join for if statement (line 1234)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1240):
    
    # Assigning a Call to a Name (line 1240):
    
    # Call to full(...): (line 1240)
    # Processing the call arguments (line 1240)
    # Getting the type of 'result_shape' (line 1240)
    result_shape_109551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 21), 'result_shape', False)
    
    # Obtaining the type of the subscript
    int_109552 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1240, 46), 'int')
    # Getting the type of 'choicelist' (line 1240)
    choicelist_109553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 35), 'choicelist', False)
    # Obtaining the member '__getitem__' of a type (line 1240)
    getitem___109554 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1240, 35), choicelist_109553, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1240)
    subscript_call_result_109555 = invoke(stypy.reporting.localization.Localization(__file__, 1240, 35), getitem___109554, int_109552)
    
    # Getting the type of 'dtype' (line 1240)
    dtype_109556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 51), 'dtype', False)
    # Processing the call keyword arguments (line 1240)
    kwargs_109557 = {}
    # Getting the type of 'np' (line 1240)
    np_109549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 13), 'np', False)
    # Obtaining the member 'full' of a type (line 1240)
    full_109550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1240, 13), np_109549, 'full')
    # Calling full(args, kwargs) (line 1240)
    full_call_result_109558 = invoke(stypy.reporting.localization.Localization(__file__, 1240, 13), full_109550, *[result_shape_109551, subscript_call_result_109555, dtype_109556], **kwargs_109557)
    
    # Assigning a type to the variable 'result' (line 1240)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1240, 4), 'result', full_call_result_109558)
    
    # Assigning a Subscript to a Name (line 1245):
    
    # Assigning a Subscript to a Name (line 1245):
    
    # Obtaining the type of the subscript
    int_109559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1245, 28), 'int')
    int_109560 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1245, 32), 'int')
    slice_109561 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1245, 17), int_109559, None, int_109560)
    # Getting the type of 'choicelist' (line 1245)
    choicelist_109562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1245, 17), 'choicelist')
    # Obtaining the member '__getitem__' of a type (line 1245)
    getitem___109563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1245, 17), choicelist_109562, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1245)
    subscript_call_result_109564 = invoke(stypy.reporting.localization.Localization(__file__, 1245, 17), getitem___109563, slice_109561)
    
    # Assigning a type to the variable 'choicelist' (line 1245)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1245, 4), 'choicelist', subscript_call_result_109564)
    
    # Assigning a Subscript to a Name (line 1246):
    
    # Assigning a Subscript to a Name (line 1246):
    
    # Obtaining the type of the subscript
    int_109565 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1246, 26), 'int')
    slice_109566 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1246, 15), None, None, int_109565)
    # Getting the type of 'condlist' (line 1246)
    condlist_109567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1246, 15), 'condlist')
    # Obtaining the member '__getitem__' of a type (line 1246)
    getitem___109568 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1246, 15), condlist_109567, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1246)
    subscript_call_result_109569 = invoke(stypy.reporting.localization.Localization(__file__, 1246, 15), getitem___109568, slice_109566)
    
    # Assigning a type to the variable 'condlist' (line 1246)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1246, 4), 'condlist', subscript_call_result_109569)
    
    
    # Call to zip(...): (line 1247)
    # Processing the call arguments (line 1247)
    # Getting the type of 'choicelist' (line 1247)
    choicelist_109571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1247, 28), 'choicelist', False)
    # Getting the type of 'condlist' (line 1247)
    condlist_109572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1247, 40), 'condlist', False)
    # Processing the call keyword arguments (line 1247)
    kwargs_109573 = {}
    # Getting the type of 'zip' (line 1247)
    zip_109570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1247, 24), 'zip', False)
    # Calling zip(args, kwargs) (line 1247)
    zip_call_result_109574 = invoke(stypy.reporting.localization.Localization(__file__, 1247, 24), zip_109570, *[choicelist_109571, condlist_109572], **kwargs_109573)
    
    # Testing the type of a for loop iterable (line 1247)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1247, 4), zip_call_result_109574)
    # Getting the type of the for loop variable (line 1247)
    for_loop_var_109575 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1247, 4), zip_call_result_109574)
    # Assigning a type to the variable 'choice' (line 1247)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1247, 4), 'choice', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1247, 4), for_loop_var_109575))
    # Assigning a type to the variable 'cond' (line 1247)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1247, 4), 'cond', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1247, 4), for_loop_var_109575))
    # SSA begins for a for statement (line 1247)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to copyto(...): (line 1248)
    # Processing the call arguments (line 1248)
    # Getting the type of 'result' (line 1248)
    result_109578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 18), 'result', False)
    # Getting the type of 'choice' (line 1248)
    choice_109579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 26), 'choice', False)
    # Processing the call keyword arguments (line 1248)
    # Getting the type of 'cond' (line 1248)
    cond_109580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 40), 'cond', False)
    keyword_109581 = cond_109580
    kwargs_109582 = {'where': keyword_109581}
    # Getting the type of 'np' (line 1248)
    np_109576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 8), 'np', False)
    # Obtaining the member 'copyto' of a type (line 1248)
    copyto_109577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1248, 8), np_109576, 'copyto')
    # Calling copyto(args, kwargs) (line 1248)
    copyto_call_result_109583 = invoke(stypy.reporting.localization.Localization(__file__, 1248, 8), copyto_109577, *[result_109578, choice_109579], **kwargs_109582)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'result' (line 1250)
    result_109584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1250, 11), 'result')
    # Assigning a type to the variable 'stypy_return_type' (line 1250)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1250, 4), 'stypy_return_type', result_109584)
    
    # ################# End of 'select(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'select' in the type store
    # Getting the type of 'stypy_return_type' (line 1150)
    stypy_return_type_109585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_109585)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'select'
    return stypy_return_type_109585

# Assigning a type to the variable 'select' (line 1150)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1150, 0), 'select', select)

@norecursion
def copy(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_109586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1253, 18), 'str', 'K')
    defaults = [str_109586]
    # Create a new context for function 'copy'
    module_type_store = module_type_store.open_function_context('copy', 1253, 0, False)
    
    # Passed parameters checking function
    copy.stypy_localization = localization
    copy.stypy_type_of_self = None
    copy.stypy_type_store = module_type_store
    copy.stypy_function_name = 'copy'
    copy.stypy_param_names_list = ['a', 'order']
    copy.stypy_varargs_param_name = None
    copy.stypy_kwargs_param_name = None
    copy.stypy_call_defaults = defaults
    copy.stypy_call_varargs = varargs
    copy.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'copy', ['a', 'order'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'copy', localization, ['a', 'order'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'copy(...)' code ##################

    str_109587 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1296, (-1)), 'str', "\n    Return an array copy of the given object.\n\n    Parameters\n    ----------\n    a : array_like\n        Input data.\n    order : {'C', 'F', 'A', 'K'}, optional\n        Controls the memory layout of the copy. 'C' means C-order,\n        'F' means F-order, 'A' means 'F' if `a` is Fortran contiguous,\n        'C' otherwise. 'K' means match the layout of `a` as closely\n        as possible. (Note that this function and :meth:ndarray.copy are very\n        similar, but have different default values for their order=\n        arguments.)\n\n    Returns\n    -------\n    arr : ndarray\n        Array interpretation of `a`.\n\n    Notes\n    -----\n    This is equivalent to\n\n    >>> np.array(a, copy=True)                              #doctest: +SKIP\n\n    Examples\n    --------\n    Create an array x, with a reference y and a copy z:\n\n    >>> x = np.array([1, 2, 3])\n    >>> y = x\n    >>> z = np.copy(x)\n\n    Note that, when we modify x, y changes, but not z:\n\n    >>> x[0] = 10\n    >>> x[0] == y[0]\n    True\n    >>> x[0] == z[0]\n    False\n\n    ")
    
    # Call to array(...): (line 1297)
    # Processing the call arguments (line 1297)
    # Getting the type of 'a' (line 1297)
    a_109589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 17), 'a', False)
    # Processing the call keyword arguments (line 1297)
    # Getting the type of 'order' (line 1297)
    order_109590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 26), 'order', False)
    keyword_109591 = order_109590
    # Getting the type of 'True' (line 1297)
    True_109592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 38), 'True', False)
    keyword_109593 = True_109592
    kwargs_109594 = {'copy': keyword_109593, 'order': keyword_109591}
    # Getting the type of 'array' (line 1297)
    array_109588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 11), 'array', False)
    # Calling array(args, kwargs) (line 1297)
    array_call_result_109595 = invoke(stypy.reporting.localization.Localization(__file__, 1297, 11), array_109588, *[a_109589], **kwargs_109594)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1297)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1297, 4), 'stypy_return_type', array_call_result_109595)
    
    # ################# End of 'copy(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'copy' in the type store
    # Getting the type of 'stypy_return_type' (line 1253)
    stypy_return_type_109596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1253, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_109596)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'copy'
    return stypy_return_type_109596

# Assigning a type to the variable 'copy' (line 1253)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1253, 0), 'copy', copy)

@norecursion
def gradient(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'gradient'
    module_type_store = module_type_store.open_function_context('gradient', 1302, 0, False)
    
    # Passed parameters checking function
    gradient.stypy_localization = localization
    gradient.stypy_type_of_self = None
    gradient.stypy_type_store = module_type_store
    gradient.stypy_function_name = 'gradient'
    gradient.stypy_param_names_list = ['f']
    gradient.stypy_varargs_param_name = 'varargs'
    gradient.stypy_kwargs_param_name = 'kwargs'
    gradient.stypy_call_defaults = defaults
    gradient.stypy_call_varargs = varargs
    gradient.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'gradient', ['f'], 'varargs', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'gradient', localization, ['f'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'gradient(...)' code ##################

    str_109597 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1366, (-1)), 'str', '\n    Return the gradient of an N-dimensional array.\n\n    The gradient is computed using second order accurate central differences\n    in the interior and either first differences or second order accurate\n    one-sides (forward or backwards) differences at the boundaries. The\n    returned gradient hence has the same shape as the input array.\n\n    Parameters\n    ----------\n    f : array_like\n        An N-dimensional array containing samples of a scalar function.\n    varargs : scalar or list of scalar, optional\n        N scalars specifying the sample distances for each dimension,\n        i.e. `dx`, `dy`, `dz`, ... Default distance: 1.\n        single scalar specifies sample distance for all dimensions.\n        if `axis` is given, the number of varargs must equal the number of axes.\n    edge_order : {1, 2}, optional\n        Gradient is calculated using N\\ :sup:`th` order accurate differences\n        at the boundaries. Default: 1.\n\n        .. versionadded:: 1.9.1\n\n    axis : None or int or tuple of ints, optional\n        Gradient is calculated only along the given axis or axes\n        The default (axis = None) is to calculate the gradient for all the axes of the input array.\n        axis may be negative, in which case it counts from the last to the first axis.\n\n        .. versionadded:: 1.11.0\n\n    Returns\n    -------\n    gradient : list of ndarray\n        Each element of `list` has the same shape as `f` giving the derivative\n        of `f` with respect to each dimension.\n\n    Examples\n    --------\n    >>> x = np.array([1, 2, 4, 7, 11, 16], dtype=np.float)\n    >>> np.gradient(x)\n    array([ 1. ,  1.5,  2.5,  3.5,  4.5,  5. ])\n    >>> np.gradient(x, 2)\n    array([ 0.5 ,  0.75,  1.25,  1.75,  2.25,  2.5 ])\n\n    For two dimensional arrays, the return will be two arrays ordered by\n    axis. In this example the first array stands for the gradient in\n    rows and the second one in columns direction:\n\n    >>> np.gradient(np.array([[1, 2, 6], [3, 4, 5]], dtype=np.float))\n    [array([[ 2.,  2., -1.],\n            [ 2.,  2., -1.]]), array([[ 1. ,  2.5,  4. ],\n            [ 1. ,  1. ,  1. ]])]\n\n    >>> x = np.array([0, 1, 2, 3, 4])\n    >>> dx = np.gradient(x)\n    >>> y = x**2\n    >>> np.gradient(y, dx, edge_order=2)\n    array([-0.,  2.,  4.,  6.,  8.])\n\n    The axis keyword can be used to specify a subset of axes of which the gradient is calculated\n    >>> np.gradient(np.array([[1, 2, 6], [3, 4, 5]], dtype=np.float), axis=0)\n    array([[ 2.,  2., -1.],\n           [ 2.,  2., -1.]])\n    ')
    
    # Assigning a Call to a Name (line 1367):
    
    # Assigning a Call to a Name (line 1367):
    
    # Call to asanyarray(...): (line 1367)
    # Processing the call arguments (line 1367)
    # Getting the type of 'f' (line 1367)
    f_109600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 22), 'f', False)
    # Processing the call keyword arguments (line 1367)
    kwargs_109601 = {}
    # Getting the type of 'np' (line 1367)
    np_109598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 8), 'np', False)
    # Obtaining the member 'asanyarray' of a type (line 1367)
    asanyarray_109599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1367, 8), np_109598, 'asanyarray')
    # Calling asanyarray(args, kwargs) (line 1367)
    asanyarray_call_result_109602 = invoke(stypy.reporting.localization.Localization(__file__, 1367, 8), asanyarray_109599, *[f_109600], **kwargs_109601)
    
    # Assigning a type to the variable 'f' (line 1367)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1367, 4), 'f', asanyarray_call_result_109602)
    
    # Assigning a Call to a Name (line 1368):
    
    # Assigning a Call to a Name (line 1368):
    
    # Call to len(...): (line 1368)
    # Processing the call arguments (line 1368)
    # Getting the type of 'f' (line 1368)
    f_109604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 12), 'f', False)
    # Obtaining the member 'shape' of a type (line 1368)
    shape_109605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1368, 12), f_109604, 'shape')
    # Processing the call keyword arguments (line 1368)
    kwargs_109606 = {}
    # Getting the type of 'len' (line 1368)
    len_109603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 8), 'len', False)
    # Calling len(args, kwargs) (line 1368)
    len_call_result_109607 = invoke(stypy.reporting.localization.Localization(__file__, 1368, 8), len_109603, *[shape_109605], **kwargs_109606)
    
    # Assigning a type to the variable 'N' (line 1368)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1368, 4), 'N', len_call_result_109607)
    
    # Assigning a Call to a Name (line 1370):
    
    # Assigning a Call to a Name (line 1370):
    
    # Call to pop(...): (line 1370)
    # Processing the call arguments (line 1370)
    str_109610 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1370, 22), 'str', 'axis')
    # Getting the type of 'None' (line 1370)
    None_109611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1370, 30), 'None', False)
    # Processing the call keyword arguments (line 1370)
    kwargs_109612 = {}
    # Getting the type of 'kwargs' (line 1370)
    kwargs_109608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1370, 11), 'kwargs', False)
    # Obtaining the member 'pop' of a type (line 1370)
    pop_109609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1370, 11), kwargs_109608, 'pop')
    # Calling pop(args, kwargs) (line 1370)
    pop_call_result_109613 = invoke(stypy.reporting.localization.Localization(__file__, 1370, 11), pop_109609, *[str_109610, None_109611], **kwargs_109612)
    
    # Assigning a type to the variable 'axes' (line 1370)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1370, 4), 'axes', pop_call_result_109613)
    
    # Type idiom detected: calculating its left and rigth part (line 1371)
    # Getting the type of 'axes' (line 1371)
    axes_109614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 7), 'axes')
    # Getting the type of 'None' (line 1371)
    None_109615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 15), 'None')
    
    (may_be_109616, more_types_in_union_109617) = may_be_none(axes_109614, None_109615)

    if may_be_109616:

        if more_types_in_union_109617:
            # Runtime conditional SSA (line 1371)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 1372):
        
        # Assigning a Call to a Name (line 1372):
        
        # Call to tuple(...): (line 1372)
        # Processing the call arguments (line 1372)
        
        # Call to range(...): (line 1372)
        # Processing the call arguments (line 1372)
        # Getting the type of 'N' (line 1372)
        N_109620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1372, 27), 'N', False)
        # Processing the call keyword arguments (line 1372)
        kwargs_109621 = {}
        # Getting the type of 'range' (line 1372)
        range_109619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1372, 21), 'range', False)
        # Calling range(args, kwargs) (line 1372)
        range_call_result_109622 = invoke(stypy.reporting.localization.Localization(__file__, 1372, 21), range_109619, *[N_109620], **kwargs_109621)
        
        # Processing the call keyword arguments (line 1372)
        kwargs_109623 = {}
        # Getting the type of 'tuple' (line 1372)
        tuple_109618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1372, 15), 'tuple', False)
        # Calling tuple(args, kwargs) (line 1372)
        tuple_call_result_109624 = invoke(stypy.reporting.localization.Localization(__file__, 1372, 15), tuple_109618, *[range_call_result_109622], **kwargs_109623)
        
        # Assigning a type to the variable 'axes' (line 1372)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1372, 8), 'axes', tuple_call_result_109624)

        if more_types_in_union_109617:
            # SSA join for if statement (line 1371)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 1374)
    # Getting the type of 'int' (line 1374)
    int_109625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1374, 24), 'int')
    # Getting the type of 'axes' (line 1374)
    axes_109626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1374, 18), 'axes')
    
    (may_be_109627, more_types_in_union_109628) = may_be_subtype(int_109625, axes_109626)

    if may_be_109627:

        if more_types_in_union_109628:
            # Runtime conditional SSA (line 1374)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'axes' (line 1374)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1374, 4), 'axes', remove_not_subtype_from_union(axes_109626, int))
        
        # Assigning a Tuple to a Name (line 1375):
        
        # Assigning a Tuple to a Name (line 1375):
        
        # Obtaining an instance of the builtin type 'tuple' (line 1375)
        tuple_109629 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1375, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1375)
        # Adding element type (line 1375)
        # Getting the type of 'axes' (line 1375)
        axes_109630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 16), 'axes')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1375, 16), tuple_109629, axes_109630)
        
        # Assigning a type to the variable 'axes' (line 1375)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1375, 8), 'axes', tuple_109629)

        if more_types_in_union_109628:
            # SSA join for if statement (line 1374)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 1376)
    # Getting the type of 'tuple' (line 1376)
    tuple_109631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1376, 28), 'tuple')
    # Getting the type of 'axes' (line 1376)
    axes_109632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1376, 22), 'axes')
    
    (may_be_109633, more_types_in_union_109634) = may_not_be_subtype(tuple_109631, axes_109632)

    if may_be_109633:

        if more_types_in_union_109634:
            # Runtime conditional SSA (line 1376)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'axes' (line 1376)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1376, 4), 'axes', remove_subtype_from_union(axes_109632, tuple))
        
        # Call to TypeError(...): (line 1377)
        # Processing the call arguments (line 1377)
        str_109636 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1377, 24), 'str', 'A tuple of integers or a single integer is required')
        # Processing the call keyword arguments (line 1377)
        kwargs_109637 = {}
        # Getting the type of 'TypeError' (line 1377)
        TypeError_109635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1377, 14), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 1377)
        TypeError_call_result_109638 = invoke(stypy.reporting.localization.Localization(__file__, 1377, 14), TypeError_109635, *[str_109636], **kwargs_109637)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1377, 8), TypeError_call_result_109638, 'raise parameter', BaseException)

        if more_types_in_union_109634:
            # SSA join for if statement (line 1376)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 1380):
    
    # Assigning a Call to a Name (line 1380):
    
    # Call to tuple(...): (line 1380)
    # Processing the call arguments (line 1380)
    # Calculating generator expression
    module_type_store = module_type_store.open_function_context('list comprehension expression', 1380, 17, True)
    # Calculating comprehension expression
    # Getting the type of 'axes' (line 1380)
    axes_109648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1380, 48), 'axes', False)
    comprehension_109649 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1380, 17), axes_109648)
    # Assigning a type to the variable 'x' (line 1380)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1380, 17), 'x', comprehension_109649)
    
    
    # Getting the type of 'x' (line 1380)
    x_109640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1380, 26), 'x', False)
    int_109641 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1380, 30), 'int')
    # Applying the binary operator '<' (line 1380)
    result_lt_109642 = python_operator(stypy.reporting.localization.Localization(__file__, 1380, 26), '<', x_109640, int_109641)
    
    # Testing the type of an if expression (line 1380)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1380, 17), result_lt_109642)
    # SSA begins for if expression (line 1380)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    # Getting the type of 'x' (line 1380)
    x_109643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1380, 17), 'x', False)
    # Getting the type of 'N' (line 1380)
    N_109644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1380, 21), 'N', False)
    # Applying the binary operator '+' (line 1380)
    result_add_109645 = python_operator(stypy.reporting.localization.Localization(__file__, 1380, 17), '+', x_109643, N_109644)
    
    # SSA branch for the else part of an if expression (line 1380)
    module_type_store.open_ssa_branch('if expression else')
    # Getting the type of 'x' (line 1380)
    x_109646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1380, 37), 'x', False)
    # SSA join for if expression (line 1380)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_109647 = union_type.UnionType.add(result_add_109645, x_109646)
    
    list_109650 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1380, 17), 'list')
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1380, 17), list_109650, if_exp_109647)
    # Processing the call keyword arguments (line 1380)
    kwargs_109651 = {}
    # Getting the type of 'tuple' (line 1380)
    tuple_109639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1380, 11), 'tuple', False)
    # Calling tuple(args, kwargs) (line 1380)
    tuple_call_result_109652 = invoke(stypy.reporting.localization.Localization(__file__, 1380, 11), tuple_109639, *[list_109650], **kwargs_109651)
    
    # Assigning a type to the variable 'axes' (line 1380)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1380, 4), 'axes', tuple_call_result_109652)
    
    
    # Evaluating a boolean operation
    
    
    # Call to max(...): (line 1381)
    # Processing the call arguments (line 1381)
    # Getting the type of 'axes' (line 1381)
    axes_109654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1381, 11), 'axes', False)
    # Processing the call keyword arguments (line 1381)
    kwargs_109655 = {}
    # Getting the type of 'max' (line 1381)
    max_109653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1381, 7), 'max', False)
    # Calling max(args, kwargs) (line 1381)
    max_call_result_109656 = invoke(stypy.reporting.localization.Localization(__file__, 1381, 7), max_109653, *[axes_109654], **kwargs_109655)
    
    # Getting the type of 'N' (line 1381)
    N_109657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1381, 20), 'N')
    # Applying the binary operator '>=' (line 1381)
    result_ge_109658 = python_operator(stypy.reporting.localization.Localization(__file__, 1381, 7), '>=', max_call_result_109656, N_109657)
    
    
    
    # Call to min(...): (line 1381)
    # Processing the call arguments (line 1381)
    # Getting the type of 'axes' (line 1381)
    axes_109660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1381, 29), 'axes', False)
    # Processing the call keyword arguments (line 1381)
    kwargs_109661 = {}
    # Getting the type of 'min' (line 1381)
    min_109659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1381, 25), 'min', False)
    # Calling min(args, kwargs) (line 1381)
    min_call_result_109662 = invoke(stypy.reporting.localization.Localization(__file__, 1381, 25), min_109659, *[axes_109660], **kwargs_109661)
    
    int_109663 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1381, 37), 'int')
    # Applying the binary operator '<' (line 1381)
    result_lt_109664 = python_operator(stypy.reporting.localization.Localization(__file__, 1381, 25), '<', min_call_result_109662, int_109663)
    
    # Applying the binary operator 'or' (line 1381)
    result_or_keyword_109665 = python_operator(stypy.reporting.localization.Localization(__file__, 1381, 7), 'or', result_ge_109658, result_lt_109664)
    
    # Testing the type of an if condition (line 1381)
    if_condition_109666 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1381, 4), result_or_keyword_109665)
    # Assigning a type to the variable 'if_condition_109666' (line 1381)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1381, 4), 'if_condition_109666', if_condition_109666)
    # SSA begins for if statement (line 1381)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1382)
    # Processing the call arguments (line 1382)
    str_109668 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1382, 25), 'str', "'axis' entry is out of bounds")
    # Processing the call keyword arguments (line 1382)
    kwargs_109669 = {}
    # Getting the type of 'ValueError' (line 1382)
    ValueError_109667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1382)
    ValueError_call_result_109670 = invoke(stypy.reporting.localization.Localization(__file__, 1382, 14), ValueError_109667, *[str_109668], **kwargs_109669)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1382, 8), ValueError_call_result_109670, 'raise parameter', BaseException)
    # SSA join for if statement (line 1381)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 1384)
    # Processing the call arguments (line 1384)
    
    # Call to set(...): (line 1384)
    # Processing the call arguments (line 1384)
    # Getting the type of 'axes' (line 1384)
    axes_109673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 15), 'axes', False)
    # Processing the call keyword arguments (line 1384)
    kwargs_109674 = {}
    # Getting the type of 'set' (line 1384)
    set_109672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 11), 'set', False)
    # Calling set(args, kwargs) (line 1384)
    set_call_result_109675 = invoke(stypy.reporting.localization.Localization(__file__, 1384, 11), set_109672, *[axes_109673], **kwargs_109674)
    
    # Processing the call keyword arguments (line 1384)
    kwargs_109676 = {}
    # Getting the type of 'len' (line 1384)
    len_109671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 7), 'len', False)
    # Calling len(args, kwargs) (line 1384)
    len_call_result_109677 = invoke(stypy.reporting.localization.Localization(__file__, 1384, 7), len_109671, *[set_call_result_109675], **kwargs_109676)
    
    
    # Call to len(...): (line 1384)
    # Processing the call arguments (line 1384)
    # Getting the type of 'axes' (line 1384)
    axes_109679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 29), 'axes', False)
    # Processing the call keyword arguments (line 1384)
    kwargs_109680 = {}
    # Getting the type of 'len' (line 1384)
    len_109678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 25), 'len', False)
    # Calling len(args, kwargs) (line 1384)
    len_call_result_109681 = invoke(stypy.reporting.localization.Localization(__file__, 1384, 25), len_109678, *[axes_109679], **kwargs_109680)
    
    # Applying the binary operator '!=' (line 1384)
    result_ne_109682 = python_operator(stypy.reporting.localization.Localization(__file__, 1384, 7), '!=', len_call_result_109677, len_call_result_109681)
    
    # Testing the type of an if condition (line 1384)
    if_condition_109683 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1384, 4), result_ne_109682)
    # Assigning a type to the variable 'if_condition_109683' (line 1384)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1384, 4), 'if_condition_109683', if_condition_109683)
    # SSA begins for if statement (line 1384)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1385)
    # Processing the call arguments (line 1385)
    str_109685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1385, 25), 'str', "duplicate value in 'axis'")
    # Processing the call keyword arguments (line 1385)
    kwargs_109686 = {}
    # Getting the type of 'ValueError' (line 1385)
    ValueError_109684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1385)
    ValueError_call_result_109687 = invoke(stypy.reporting.localization.Localization(__file__, 1385, 14), ValueError_109684, *[str_109685], **kwargs_109686)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1385, 8), ValueError_call_result_109687, 'raise parameter', BaseException)
    # SSA join for if statement (line 1384)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1387):
    
    # Assigning a Call to a Name (line 1387):
    
    # Call to len(...): (line 1387)
    # Processing the call arguments (line 1387)
    # Getting the type of 'varargs' (line 1387)
    varargs_109689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 12), 'varargs', False)
    # Processing the call keyword arguments (line 1387)
    kwargs_109690 = {}
    # Getting the type of 'len' (line 1387)
    len_109688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 8), 'len', False)
    # Calling len(args, kwargs) (line 1387)
    len_call_result_109691 = invoke(stypy.reporting.localization.Localization(__file__, 1387, 8), len_109688, *[varargs_109689], **kwargs_109690)
    
    # Assigning a type to the variable 'n' (line 1387)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1387, 4), 'n', len_call_result_109691)
    
    
    # Getting the type of 'n' (line 1388)
    n_109692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1388, 7), 'n')
    int_109693 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1388, 12), 'int')
    # Applying the binary operator '==' (line 1388)
    result_eq_109694 = python_operator(stypy.reporting.localization.Localization(__file__, 1388, 7), '==', n_109692, int_109693)
    
    # Testing the type of an if condition (line 1388)
    if_condition_109695 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1388, 4), result_eq_109694)
    # Assigning a type to the variable 'if_condition_109695' (line 1388)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1388, 4), 'if_condition_109695', if_condition_109695)
    # SSA begins for if statement (line 1388)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1389):
    
    # Assigning a BinOp to a Name (line 1389):
    
    # Obtaining an instance of the builtin type 'list' (line 1389)
    list_109696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1389, 13), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1389)
    # Adding element type (line 1389)
    float_109697 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1389, 14), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1389, 13), list_109696, float_109697)
    
    # Getting the type of 'N' (line 1389)
    N_109698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1389, 19), 'N')
    # Applying the binary operator '*' (line 1389)
    result_mul_109699 = python_operator(stypy.reporting.localization.Localization(__file__, 1389, 13), '*', list_109696, N_109698)
    
    # Assigning a type to the variable 'dx' (line 1389)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1389, 8), 'dx', result_mul_109699)
    # SSA branch for the else part of an if statement (line 1388)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'n' (line 1390)
    n_109700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1390, 9), 'n')
    int_109701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1390, 14), 'int')
    # Applying the binary operator '==' (line 1390)
    result_eq_109702 = python_operator(stypy.reporting.localization.Localization(__file__, 1390, 9), '==', n_109700, int_109701)
    
    # Testing the type of an if condition (line 1390)
    if_condition_109703 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1390, 9), result_eq_109702)
    # Assigning a type to the variable 'if_condition_109703' (line 1390)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1390, 9), 'if_condition_109703', if_condition_109703)
    # SSA begins for if statement (line 1390)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1391):
    
    # Assigning a BinOp to a Name (line 1391):
    
    # Obtaining an instance of the builtin type 'list' (line 1391)
    list_109704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1391, 13), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1391)
    # Adding element type (line 1391)
    
    # Obtaining the type of the subscript
    int_109705 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1391, 22), 'int')
    # Getting the type of 'varargs' (line 1391)
    varargs_109706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1391, 14), 'varargs')
    # Obtaining the member '__getitem__' of a type (line 1391)
    getitem___109707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1391, 14), varargs_109706, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1391)
    subscript_call_result_109708 = invoke(stypy.reporting.localization.Localization(__file__, 1391, 14), getitem___109707, int_109705)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1391, 13), list_109704, subscript_call_result_109708)
    
    # Getting the type of 'N' (line 1391)
    N_109709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1391, 26), 'N')
    # Applying the binary operator '*' (line 1391)
    result_mul_109710 = python_operator(stypy.reporting.localization.Localization(__file__, 1391, 13), '*', list_109704, N_109709)
    
    # Assigning a type to the variable 'dx' (line 1391)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1391, 8), 'dx', result_mul_109710)
    # SSA branch for the else part of an if statement (line 1390)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'n' (line 1392)
    n_109711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 9), 'n')
    
    # Call to len(...): (line 1392)
    # Processing the call arguments (line 1392)
    # Getting the type of 'axes' (line 1392)
    axes_109713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 18), 'axes', False)
    # Processing the call keyword arguments (line 1392)
    kwargs_109714 = {}
    # Getting the type of 'len' (line 1392)
    len_109712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 14), 'len', False)
    # Calling len(args, kwargs) (line 1392)
    len_call_result_109715 = invoke(stypy.reporting.localization.Localization(__file__, 1392, 14), len_109712, *[axes_109713], **kwargs_109714)
    
    # Applying the binary operator '==' (line 1392)
    result_eq_109716 = python_operator(stypy.reporting.localization.Localization(__file__, 1392, 9), '==', n_109711, len_call_result_109715)
    
    # Testing the type of an if condition (line 1392)
    if_condition_109717 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1392, 9), result_eq_109716)
    # Assigning a type to the variable 'if_condition_109717' (line 1392)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1392, 9), 'if_condition_109717', if_condition_109717)
    # SSA begins for if statement (line 1392)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1393):
    
    # Assigning a Call to a Name (line 1393):
    
    # Call to list(...): (line 1393)
    # Processing the call arguments (line 1393)
    # Getting the type of 'varargs' (line 1393)
    varargs_109719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1393, 18), 'varargs', False)
    # Processing the call keyword arguments (line 1393)
    kwargs_109720 = {}
    # Getting the type of 'list' (line 1393)
    list_109718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1393, 13), 'list', False)
    # Calling list(args, kwargs) (line 1393)
    list_call_result_109721 = invoke(stypy.reporting.localization.Localization(__file__, 1393, 13), list_109718, *[varargs_109719], **kwargs_109720)
    
    # Assigning a type to the variable 'dx' (line 1393)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1393, 8), 'dx', list_call_result_109721)
    # SSA branch for the else part of an if statement (line 1392)
    module_type_store.open_ssa_branch('else')
    
    # Call to SyntaxError(...): (line 1395)
    # Processing the call arguments (line 1395)
    str_109723 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1396, 12), 'str', 'invalid number of arguments')
    # Processing the call keyword arguments (line 1395)
    kwargs_109724 = {}
    # Getting the type of 'SyntaxError' (line 1395)
    SyntaxError_109722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1395, 14), 'SyntaxError', False)
    # Calling SyntaxError(args, kwargs) (line 1395)
    SyntaxError_call_result_109725 = invoke(stypy.reporting.localization.Localization(__file__, 1395, 14), SyntaxError_109722, *[str_109723], **kwargs_109724)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1395, 8), SyntaxError_call_result_109725, 'raise parameter', BaseException)
    # SSA join for if statement (line 1392)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1390)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1388)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1398):
    
    # Assigning a Call to a Name (line 1398):
    
    # Call to pop(...): (line 1398)
    # Processing the call arguments (line 1398)
    str_109728 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1398, 28), 'str', 'edge_order')
    int_109729 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1398, 42), 'int')
    # Processing the call keyword arguments (line 1398)
    kwargs_109730 = {}
    # Getting the type of 'kwargs' (line 1398)
    kwargs_109726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1398, 17), 'kwargs', False)
    # Obtaining the member 'pop' of a type (line 1398)
    pop_109727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1398, 17), kwargs_109726, 'pop')
    # Calling pop(args, kwargs) (line 1398)
    pop_call_result_109731 = invoke(stypy.reporting.localization.Localization(__file__, 1398, 17), pop_109727, *[str_109728, int_109729], **kwargs_109730)
    
    # Assigning a type to the variable 'edge_order' (line 1398)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1398, 4), 'edge_order', pop_call_result_109731)
    
    # Getting the type of 'kwargs' (line 1399)
    kwargs_109732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1399, 7), 'kwargs')
    # Testing the type of an if condition (line 1399)
    if_condition_109733 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1399, 4), kwargs_109732)
    # Assigning a type to the variable 'if_condition_109733' (line 1399)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1399, 4), 'if_condition_109733', if_condition_109733)
    # SSA begins for if statement (line 1399)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to TypeError(...): (line 1400)
    # Processing the call arguments (line 1400)
    
    # Call to format(...): (line 1400)
    # Processing the call arguments (line 1400)
    
    # Call to join(...): (line 1401)
    # Processing the call arguments (line 1401)
    
    # Call to keys(...): (line 1401)
    # Processing the call keyword arguments (line 1401)
    kwargs_109741 = {}
    # Getting the type of 'kwargs' (line 1401)
    kwargs_109739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1401, 62), 'kwargs', False)
    # Obtaining the member 'keys' of a type (line 1401)
    keys_109740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1401, 62), kwargs_109739, 'keys')
    # Calling keys(args, kwargs) (line 1401)
    keys_call_result_109742 = invoke(stypy.reporting.localization.Localization(__file__, 1401, 62), keys_109740, *[], **kwargs_109741)
    
    # Processing the call keyword arguments (line 1401)
    kwargs_109743 = {}
    str_109737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1401, 50), 'str', '", "')
    # Obtaining the member 'join' of a type (line 1401)
    join_109738 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1401, 50), str_109737, 'join')
    # Calling join(args, kwargs) (line 1401)
    join_call_result_109744 = invoke(stypy.reporting.localization.Localization(__file__, 1401, 50), join_109738, *[keys_call_result_109742], **kwargs_109743)
    
    # Processing the call keyword arguments (line 1400)
    kwargs_109745 = {}
    str_109735 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1400, 24), 'str', '"{}" are not valid keyword arguments.')
    # Obtaining the member 'format' of a type (line 1400)
    format_109736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1400, 24), str_109735, 'format')
    # Calling format(args, kwargs) (line 1400)
    format_call_result_109746 = invoke(stypy.reporting.localization.Localization(__file__, 1400, 24), format_109736, *[join_call_result_109744], **kwargs_109745)
    
    # Processing the call keyword arguments (line 1400)
    kwargs_109747 = {}
    # Getting the type of 'TypeError' (line 1400)
    TypeError_109734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 14), 'TypeError', False)
    # Calling TypeError(args, kwargs) (line 1400)
    TypeError_call_result_109748 = invoke(stypy.reporting.localization.Localization(__file__, 1400, 14), TypeError_109734, *[format_call_result_109746], **kwargs_109747)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1400, 8), TypeError_call_result_109748, 'raise parameter', BaseException)
    # SSA join for if statement (line 1399)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'edge_order' (line 1402)
    edge_order_109749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1402, 7), 'edge_order')
    int_109750 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1402, 20), 'int')
    # Applying the binary operator '>' (line 1402)
    result_gt_109751 = python_operator(stypy.reporting.localization.Localization(__file__, 1402, 7), '>', edge_order_109749, int_109750)
    
    # Testing the type of an if condition (line 1402)
    if_condition_109752 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1402, 4), result_gt_109751)
    # Assigning a type to the variable 'if_condition_109752' (line 1402)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1402, 4), 'if_condition_109752', if_condition_109752)
    # SSA begins for if statement (line 1402)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1403)
    # Processing the call arguments (line 1403)
    str_109754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1403, 25), 'str', "'edge_order' greater than 2 not supported")
    # Processing the call keyword arguments (line 1403)
    kwargs_109755 = {}
    # Getting the type of 'ValueError' (line 1403)
    ValueError_109753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1403, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1403)
    ValueError_call_result_109756 = invoke(stypy.reporting.localization.Localization(__file__, 1403, 14), ValueError_109753, *[str_109754], **kwargs_109755)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1403, 8), ValueError_call_result_109756, 'raise parameter', BaseException)
    # SSA join for if statement (line 1402)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a List to a Name (line 1408):
    
    # Assigning a List to a Name (line 1408):
    
    # Obtaining an instance of the builtin type 'list' (line 1408)
    list_109757 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1408, 14), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1408)
    
    # Assigning a type to the variable 'outvals' (line 1408)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1408, 4), 'outvals', list_109757)
    
    # Assigning a BinOp to a Name (line 1411):
    
    # Assigning a BinOp to a Name (line 1411):
    
    # Obtaining an instance of the builtin type 'list' (line 1411)
    list_109758 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1411, 13), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1411)
    # Adding element type (line 1411)
    
    # Call to slice(...): (line 1411)
    # Processing the call arguments (line 1411)
    # Getting the type of 'None' (line 1411)
    None_109760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 20), 'None', False)
    # Processing the call keyword arguments (line 1411)
    kwargs_109761 = {}
    # Getting the type of 'slice' (line 1411)
    slice_109759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 14), 'slice', False)
    # Calling slice(args, kwargs) (line 1411)
    slice_call_result_109762 = invoke(stypy.reporting.localization.Localization(__file__, 1411, 14), slice_109759, *[None_109760], **kwargs_109761)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1411, 13), list_109758, slice_call_result_109762)
    
    # Getting the type of 'N' (line 1411)
    N_109763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 27), 'N')
    # Applying the binary operator '*' (line 1411)
    result_mul_109764 = python_operator(stypy.reporting.localization.Localization(__file__, 1411, 13), '*', list_109758, N_109763)
    
    # Assigning a type to the variable 'slice1' (line 1411)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1411, 4), 'slice1', result_mul_109764)
    
    # Assigning a BinOp to a Name (line 1412):
    
    # Assigning a BinOp to a Name (line 1412):
    
    # Obtaining an instance of the builtin type 'list' (line 1412)
    list_109765 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1412, 13), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1412)
    # Adding element type (line 1412)
    
    # Call to slice(...): (line 1412)
    # Processing the call arguments (line 1412)
    # Getting the type of 'None' (line 1412)
    None_109767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1412, 20), 'None', False)
    # Processing the call keyword arguments (line 1412)
    kwargs_109768 = {}
    # Getting the type of 'slice' (line 1412)
    slice_109766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1412, 14), 'slice', False)
    # Calling slice(args, kwargs) (line 1412)
    slice_call_result_109769 = invoke(stypy.reporting.localization.Localization(__file__, 1412, 14), slice_109766, *[None_109767], **kwargs_109768)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1412, 13), list_109765, slice_call_result_109769)
    
    # Getting the type of 'N' (line 1412)
    N_109770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1412, 27), 'N')
    # Applying the binary operator '*' (line 1412)
    result_mul_109771 = python_operator(stypy.reporting.localization.Localization(__file__, 1412, 13), '*', list_109765, N_109770)
    
    # Assigning a type to the variable 'slice2' (line 1412)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1412, 4), 'slice2', result_mul_109771)
    
    # Assigning a BinOp to a Name (line 1413):
    
    # Assigning a BinOp to a Name (line 1413):
    
    # Obtaining an instance of the builtin type 'list' (line 1413)
    list_109772 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1413, 13), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1413)
    # Adding element type (line 1413)
    
    # Call to slice(...): (line 1413)
    # Processing the call arguments (line 1413)
    # Getting the type of 'None' (line 1413)
    None_109774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 20), 'None', False)
    # Processing the call keyword arguments (line 1413)
    kwargs_109775 = {}
    # Getting the type of 'slice' (line 1413)
    slice_109773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 14), 'slice', False)
    # Calling slice(args, kwargs) (line 1413)
    slice_call_result_109776 = invoke(stypy.reporting.localization.Localization(__file__, 1413, 14), slice_109773, *[None_109774], **kwargs_109775)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1413, 13), list_109772, slice_call_result_109776)
    
    # Getting the type of 'N' (line 1413)
    N_109777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 27), 'N')
    # Applying the binary operator '*' (line 1413)
    result_mul_109778 = python_operator(stypy.reporting.localization.Localization(__file__, 1413, 13), '*', list_109772, N_109777)
    
    # Assigning a type to the variable 'slice3' (line 1413)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1413, 4), 'slice3', result_mul_109778)
    
    # Assigning a BinOp to a Name (line 1414):
    
    # Assigning a BinOp to a Name (line 1414):
    
    # Obtaining an instance of the builtin type 'list' (line 1414)
    list_109779 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1414, 13), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1414)
    # Adding element type (line 1414)
    
    # Call to slice(...): (line 1414)
    # Processing the call arguments (line 1414)
    # Getting the type of 'None' (line 1414)
    None_109781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 20), 'None', False)
    # Processing the call keyword arguments (line 1414)
    kwargs_109782 = {}
    # Getting the type of 'slice' (line 1414)
    slice_109780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 14), 'slice', False)
    # Calling slice(args, kwargs) (line 1414)
    slice_call_result_109783 = invoke(stypy.reporting.localization.Localization(__file__, 1414, 14), slice_109780, *[None_109781], **kwargs_109782)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1414, 13), list_109779, slice_call_result_109783)
    
    # Getting the type of 'N' (line 1414)
    N_109784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1414, 27), 'N')
    # Applying the binary operator '*' (line 1414)
    result_mul_109785 = python_operator(stypy.reporting.localization.Localization(__file__, 1414, 13), '*', list_109779, N_109784)
    
    # Assigning a type to the variable 'slice4' (line 1414)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1414, 4), 'slice4', result_mul_109785)
    
    # Assigning a Attribute to a Name (line 1416):
    
    # Assigning a Attribute to a Name (line 1416):
    # Getting the type of 'f' (line 1416)
    f_109786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1416, 12), 'f')
    # Obtaining the member 'dtype' of a type (line 1416)
    dtype_109787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1416, 12), f_109786, 'dtype')
    # Obtaining the member 'char' of a type (line 1416)
    char_109788 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1416, 12), dtype_109787, 'char')
    # Assigning a type to the variable 'otype' (line 1416)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1416, 4), 'otype', char_109788)
    
    
    # Getting the type of 'otype' (line 1417)
    otype_109789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 7), 'otype')
    
    # Obtaining an instance of the builtin type 'list' (line 1417)
    list_109790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1417, 20), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1417)
    # Adding element type (line 1417)
    str_109791 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1417, 21), 'str', 'f')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1417, 20), list_109790, str_109791)
    # Adding element type (line 1417)
    str_109792 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1417, 26), 'str', 'd')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1417, 20), list_109790, str_109792)
    # Adding element type (line 1417)
    str_109793 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1417, 31), 'str', 'F')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1417, 20), list_109790, str_109793)
    # Adding element type (line 1417)
    str_109794 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1417, 36), 'str', 'D')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1417, 20), list_109790, str_109794)
    # Adding element type (line 1417)
    str_109795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1417, 41), 'str', 'm')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1417, 20), list_109790, str_109795)
    # Adding element type (line 1417)
    str_109796 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1417, 46), 'str', 'M')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1417, 20), list_109790, str_109796)
    
    # Applying the binary operator 'notin' (line 1417)
    result_contains_109797 = python_operator(stypy.reporting.localization.Localization(__file__, 1417, 7), 'notin', otype_109789, list_109790)
    
    # Testing the type of an if condition (line 1417)
    if_condition_109798 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1417, 4), result_contains_109797)
    # Assigning a type to the variable 'if_condition_109798' (line 1417)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1417, 4), 'if_condition_109798', if_condition_109798)
    # SSA begins for if statement (line 1417)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Str to a Name (line 1418):
    
    # Assigning a Str to a Name (line 1418):
    str_109799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1418, 16), 'str', 'd')
    # Assigning a type to the variable 'otype' (line 1418)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1418, 8), 'otype', str_109799)
    # SSA join for if statement (line 1417)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'otype' (line 1421)
    otype_109800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1421, 7), 'otype')
    str_109801 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1421, 16), 'str', 'M')
    # Applying the binary operator '==' (line 1421)
    result_eq_109802 = python_operator(stypy.reporting.localization.Localization(__file__, 1421, 7), '==', otype_109800, str_109801)
    
    # Testing the type of an if condition (line 1421)
    if_condition_109803 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1421, 4), result_eq_109802)
    # Assigning a type to the variable 'if_condition_109803' (line 1421)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1421, 4), 'if_condition_109803', if_condition_109803)
    # SSA begins for if statement (line 1421)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1423):
    
    # Assigning a Call to a Name (line 1423):
    
    # Call to replace(...): (line 1423)
    # Processing the call arguments (line 1423)
    str_109808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1423, 37), 'str', 'datetime')
    str_109809 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1423, 49), 'str', 'timedelta')
    # Processing the call keyword arguments (line 1423)
    kwargs_109810 = {}
    # Getting the type of 'f' (line 1423)
    f_109804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1423, 16), 'f', False)
    # Obtaining the member 'dtype' of a type (line 1423)
    dtype_109805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1423, 16), f_109804, 'dtype')
    # Obtaining the member 'name' of a type (line 1423)
    name_109806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1423, 16), dtype_109805, 'name')
    # Obtaining the member 'replace' of a type (line 1423)
    replace_109807 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1423, 16), name_109806, 'replace')
    # Calling replace(args, kwargs) (line 1423)
    replace_call_result_109811 = invoke(stypy.reporting.localization.Localization(__file__, 1423, 16), replace_109807, *[str_109808, str_109809], **kwargs_109810)
    
    # Assigning a type to the variable 'otype' (line 1423)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1423, 8), 'otype', replace_call_result_109811)
    # SSA branch for the else part of an if statement (line 1421)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'otype' (line 1424)
    otype_109812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1424, 9), 'otype')
    str_109813 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1424, 18), 'str', 'm')
    # Applying the binary operator '==' (line 1424)
    result_eq_109814 = python_operator(stypy.reporting.localization.Localization(__file__, 1424, 9), '==', otype_109812, str_109813)
    
    # Testing the type of an if condition (line 1424)
    if_condition_109815 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1424, 9), result_eq_109814)
    # Assigning a type to the variable 'if_condition_109815' (line 1424)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1424, 9), 'if_condition_109815', if_condition_109815)
    # SSA begins for if statement (line 1424)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 1426):
    
    # Assigning a Attribute to a Name (line 1426):
    # Getting the type of 'f' (line 1426)
    f_109816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 16), 'f')
    # Obtaining the member 'dtype' of a type (line 1426)
    dtype_109817 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1426, 16), f_109816, 'dtype')
    # Assigning a type to the variable 'otype' (line 1426)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1426, 8), 'otype', dtype_109817)
    # SSA join for if statement (line 1424)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1421)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'f' (line 1431)
    f_109818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 7), 'f')
    # Obtaining the member 'dtype' of a type (line 1431)
    dtype_109819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1431, 7), f_109818, 'dtype')
    # Obtaining the member 'char' of a type (line 1431)
    char_109820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1431, 7), dtype_109819, 'char')
    
    # Obtaining an instance of the builtin type 'list' (line 1431)
    list_109821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1431, 23), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1431)
    # Adding element type (line 1431)
    str_109822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1431, 24), 'str', 'M')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1431, 23), list_109821, str_109822)
    # Adding element type (line 1431)
    str_109823 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1431, 29), 'str', 'm')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1431, 23), list_109821, str_109823)
    
    # Applying the binary operator 'in' (line 1431)
    result_contains_109824 = python_operator(stypy.reporting.localization.Localization(__file__, 1431, 7), 'in', char_109820, list_109821)
    
    # Testing the type of an if condition (line 1431)
    if_condition_109825 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1431, 4), result_contains_109824)
    # Assigning a type to the variable 'if_condition_109825' (line 1431)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1431, 4), 'if_condition_109825', if_condition_109825)
    # SSA begins for if statement (line 1431)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1432):
    
    # Assigning a Call to a Name (line 1432):
    
    # Call to view(...): (line 1432)
    # Processing the call arguments (line 1432)
    str_109828 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1432, 19), 'str', 'int64')
    # Processing the call keyword arguments (line 1432)
    kwargs_109829 = {}
    # Getting the type of 'f' (line 1432)
    f_109826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1432, 12), 'f', False)
    # Obtaining the member 'view' of a type (line 1432)
    view_109827 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1432, 12), f_109826, 'view')
    # Calling view(args, kwargs) (line 1432)
    view_call_result_109830 = invoke(stypy.reporting.localization.Localization(__file__, 1432, 12), view_109827, *[str_109828], **kwargs_109829)
    
    # Assigning a type to the variable 'y' (line 1432)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1432, 8), 'y', view_call_result_109830)
    # SSA branch for the else part of an if statement (line 1431)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 1434):
    
    # Assigning a Name to a Name (line 1434):
    # Getting the type of 'f' (line 1434)
    f_109831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1434, 12), 'f')
    # Assigning a type to the variable 'y' (line 1434)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1434, 8), 'y', f_109831)
    # SSA join for if statement (line 1431)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to enumerate(...): (line 1436)
    # Processing the call arguments (line 1436)
    # Getting the type of 'axes' (line 1436)
    axes_109833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1436, 29), 'axes', False)
    # Processing the call keyword arguments (line 1436)
    kwargs_109834 = {}
    # Getting the type of 'enumerate' (line 1436)
    enumerate_109832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1436, 19), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 1436)
    enumerate_call_result_109835 = invoke(stypy.reporting.localization.Localization(__file__, 1436, 19), enumerate_109832, *[axes_109833], **kwargs_109834)
    
    # Testing the type of a for loop iterable (line 1436)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1436, 4), enumerate_call_result_109835)
    # Getting the type of the for loop variable (line 1436)
    for_loop_var_109836 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1436, 4), enumerate_call_result_109835)
    # Assigning a type to the variable 'i' (line 1436)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1436, 4), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1436, 4), for_loop_var_109836))
    # Assigning a type to the variable 'axis' (line 1436)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1436, 4), 'axis', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1436, 4), for_loop_var_109836))
    # SSA begins for a for statement (line 1436)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 1438)
    axis_109837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1438, 19), 'axis')
    # Getting the type of 'y' (line 1438)
    y_109838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1438, 11), 'y')
    # Obtaining the member 'shape' of a type (line 1438)
    shape_109839 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1438, 11), y_109838, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1438)
    getitem___109840 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1438, 11), shape_109839, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1438)
    subscript_call_result_109841 = invoke(stypy.reporting.localization.Localization(__file__, 1438, 11), getitem___109840, axis_109837)
    
    int_109842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1438, 27), 'int')
    # Applying the binary operator '<' (line 1438)
    result_lt_109843 = python_operator(stypy.reporting.localization.Localization(__file__, 1438, 11), '<', subscript_call_result_109841, int_109842)
    
    # Testing the type of an if condition (line 1438)
    if_condition_109844 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1438, 8), result_lt_109843)
    # Assigning a type to the variable 'if_condition_109844' (line 1438)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1438, 8), 'if_condition_109844', if_condition_109844)
    # SSA begins for if statement (line 1438)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1439)
    # Processing the call arguments (line 1439)
    str_109846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1440, 16), 'str', 'Shape of array too small to calculate a numerical gradient, at least two elements are required.')
    # Processing the call keyword arguments (line 1439)
    kwargs_109847 = {}
    # Getting the type of 'ValueError' (line 1439)
    ValueError_109845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1439, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1439)
    ValueError_call_result_109848 = invoke(stypy.reporting.localization.Localization(__file__, 1439, 18), ValueError_109845, *[str_109846], **kwargs_109847)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1439, 12), ValueError_call_result_109848, 'raise parameter', BaseException)
    # SSA join for if statement (line 1438)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 1444)
    axis_109849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 19), 'axis')
    # Getting the type of 'y' (line 1444)
    y_109850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 11), 'y')
    # Obtaining the member 'shape' of a type (line 1444)
    shape_109851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1444, 11), y_109850, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1444)
    getitem___109852 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1444, 11), shape_109851, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1444)
    subscript_call_result_109853 = invoke(stypy.reporting.localization.Localization(__file__, 1444, 11), getitem___109852, axis_109849)
    
    int_109854 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1444, 28), 'int')
    # Applying the binary operator '==' (line 1444)
    result_eq_109855 = python_operator(stypy.reporting.localization.Localization(__file__, 1444, 11), '==', subscript_call_result_109853, int_109854)
    
    
    # Getting the type of 'edge_order' (line 1444)
    edge_order_109856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 33), 'edge_order')
    int_109857 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1444, 47), 'int')
    # Applying the binary operator '==' (line 1444)
    result_eq_109858 = python_operator(stypy.reporting.localization.Localization(__file__, 1444, 33), '==', edge_order_109856, int_109857)
    
    # Applying the binary operator 'or' (line 1444)
    result_or_keyword_109859 = python_operator(stypy.reporting.localization.Localization(__file__, 1444, 11), 'or', result_eq_109855, result_eq_109858)
    
    # Testing the type of an if condition (line 1444)
    if_condition_109860 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1444, 8), result_or_keyword_109859)
    # Assigning a type to the variable 'if_condition_109860' (line 1444)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1444, 8), 'if_condition_109860', if_condition_109860)
    # SSA begins for if statement (line 1444)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1446):
    
    # Assigning a Call to a Name (line 1446):
    
    # Call to empty_like(...): (line 1446)
    # Processing the call arguments (line 1446)
    # Getting the type of 'y' (line 1446)
    y_109863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 32), 'y', False)
    # Processing the call keyword arguments (line 1446)
    # Getting the type of 'otype' (line 1446)
    otype_109864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 41), 'otype', False)
    keyword_109865 = otype_109864
    kwargs_109866 = {'dtype': keyword_109865}
    # Getting the type of 'np' (line 1446)
    np_109861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 18), 'np', False)
    # Obtaining the member 'empty_like' of a type (line 1446)
    empty_like_109862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1446, 18), np_109861, 'empty_like')
    # Calling empty_like(args, kwargs) (line 1446)
    empty_like_call_result_109867 = invoke(stypy.reporting.localization.Localization(__file__, 1446, 18), empty_like_109862, *[y_109863], **kwargs_109866)
    
    # Assigning a type to the variable 'out' (line 1446)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1446, 12), 'out', empty_like_call_result_109867)
    
    # Assigning a Call to a Subscript (line 1448):
    
    # Assigning a Call to a Subscript (line 1448):
    
    # Call to slice(...): (line 1448)
    # Processing the call arguments (line 1448)
    int_109869 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1448, 33), 'int')
    int_109870 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1448, 36), 'int')
    # Processing the call keyword arguments (line 1448)
    kwargs_109871 = {}
    # Getting the type of 'slice' (line 1448)
    slice_109868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 27), 'slice', False)
    # Calling slice(args, kwargs) (line 1448)
    slice_call_result_109872 = invoke(stypy.reporting.localization.Localization(__file__, 1448, 27), slice_109868, *[int_109869, int_109870], **kwargs_109871)
    
    # Getting the type of 'slice1' (line 1448)
    slice1_109873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 12), 'slice1')
    # Getting the type of 'axis' (line 1448)
    axis_109874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 19), 'axis')
    # Storing an element on a container (line 1448)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1448, 12), slice1_109873, (axis_109874, slice_call_result_109872))
    
    # Assigning a Call to a Subscript (line 1449):
    
    # Assigning a Call to a Subscript (line 1449):
    
    # Call to slice(...): (line 1449)
    # Processing the call arguments (line 1449)
    int_109876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1449, 33), 'int')
    # Getting the type of 'None' (line 1449)
    None_109877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 36), 'None', False)
    # Processing the call keyword arguments (line 1449)
    kwargs_109878 = {}
    # Getting the type of 'slice' (line 1449)
    slice_109875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 27), 'slice', False)
    # Calling slice(args, kwargs) (line 1449)
    slice_call_result_109879 = invoke(stypy.reporting.localization.Localization(__file__, 1449, 27), slice_109875, *[int_109876, None_109877], **kwargs_109878)
    
    # Getting the type of 'slice2' (line 1449)
    slice2_109880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 12), 'slice2')
    # Getting the type of 'axis' (line 1449)
    axis_109881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 19), 'axis')
    # Storing an element on a container (line 1449)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1449, 12), slice2_109880, (axis_109881, slice_call_result_109879))
    
    # Assigning a Call to a Subscript (line 1450):
    
    # Assigning a Call to a Subscript (line 1450):
    
    # Call to slice(...): (line 1450)
    # Processing the call arguments (line 1450)
    # Getting the type of 'None' (line 1450)
    None_109883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 33), 'None', False)
    int_109884 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1450, 39), 'int')
    # Processing the call keyword arguments (line 1450)
    kwargs_109885 = {}
    # Getting the type of 'slice' (line 1450)
    slice_109882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 27), 'slice', False)
    # Calling slice(args, kwargs) (line 1450)
    slice_call_result_109886 = invoke(stypy.reporting.localization.Localization(__file__, 1450, 27), slice_109882, *[None_109883, int_109884], **kwargs_109885)
    
    # Getting the type of 'slice3' (line 1450)
    slice3_109887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 12), 'slice3')
    # Getting the type of 'axis' (line 1450)
    axis_109888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 19), 'axis')
    # Storing an element on a container (line 1450)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1450, 12), slice3_109887, (axis_109888, slice_call_result_109886))
    
    # Assigning a BinOp to a Subscript (line 1452):
    
    # Assigning a BinOp to a Subscript (line 1452):
    
    # Obtaining the type of the subscript
    # Getting the type of 'slice2' (line 1452)
    slice2_109889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 29), 'slice2')
    # Getting the type of 'y' (line 1452)
    y_109890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 27), 'y')
    # Obtaining the member '__getitem__' of a type (line 1452)
    getitem___109891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1452, 27), y_109890, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1452)
    subscript_call_result_109892 = invoke(stypy.reporting.localization.Localization(__file__, 1452, 27), getitem___109891, slice2_109889)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'slice3' (line 1452)
    slice3_109893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 41), 'slice3')
    # Getting the type of 'y' (line 1452)
    y_109894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 39), 'y')
    # Obtaining the member '__getitem__' of a type (line 1452)
    getitem___109895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1452, 39), y_109894, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1452)
    subscript_call_result_109896 = invoke(stypy.reporting.localization.Localization(__file__, 1452, 39), getitem___109895, slice3_109893)
    
    # Applying the binary operator '-' (line 1452)
    result_sub_109897 = python_operator(stypy.reporting.localization.Localization(__file__, 1452, 27), '-', subscript_call_result_109892, subscript_call_result_109896)
    
    float_109898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1452, 50), 'float')
    # Applying the binary operator 'div' (line 1452)
    result_div_109899 = python_operator(stypy.reporting.localization.Localization(__file__, 1452, 26), 'div', result_sub_109897, float_109898)
    
    # Getting the type of 'out' (line 1452)
    out_109900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 12), 'out')
    # Getting the type of 'slice1' (line 1452)
    slice1_109901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 16), 'slice1')
    # Storing an element on a container (line 1452)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1452, 12), out_109900, (slice1_109901, result_div_109899))
    
    # Assigning a Num to a Subscript (line 1454):
    
    # Assigning a Num to a Subscript (line 1454):
    int_109902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1454, 27), 'int')
    # Getting the type of 'slice1' (line 1454)
    slice1_109903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1454, 12), 'slice1')
    # Getting the type of 'axis' (line 1454)
    axis_109904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1454, 19), 'axis')
    # Storing an element on a container (line 1454)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1454, 12), slice1_109903, (axis_109904, int_109902))
    
    # Assigning a Num to a Subscript (line 1455):
    
    # Assigning a Num to a Subscript (line 1455):
    int_109905 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1455, 27), 'int')
    # Getting the type of 'slice2' (line 1455)
    slice2_109906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 12), 'slice2')
    # Getting the type of 'axis' (line 1455)
    axis_109907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 19), 'axis')
    # Storing an element on a container (line 1455)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1455, 12), slice2_109906, (axis_109907, int_109905))
    
    # Assigning a Num to a Subscript (line 1456):
    
    # Assigning a Num to a Subscript (line 1456):
    int_109908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1456, 27), 'int')
    # Getting the type of 'slice3' (line 1456)
    slice3_109909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 12), 'slice3')
    # Getting the type of 'axis' (line 1456)
    axis_109910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 19), 'axis')
    # Storing an element on a container (line 1456)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1456, 12), slice3_109909, (axis_109910, int_109908))
    
    # Assigning a BinOp to a Subscript (line 1458):
    
    # Assigning a BinOp to a Subscript (line 1458):
    
    # Obtaining the type of the subscript
    # Getting the type of 'slice2' (line 1458)
    slice2_109911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 29), 'slice2')
    # Getting the type of 'y' (line 1458)
    y_109912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 27), 'y')
    # Obtaining the member '__getitem__' of a type (line 1458)
    getitem___109913 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1458, 27), y_109912, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1458)
    subscript_call_result_109914 = invoke(stypy.reporting.localization.Localization(__file__, 1458, 27), getitem___109913, slice2_109911)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'slice3' (line 1458)
    slice3_109915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 41), 'slice3')
    # Getting the type of 'y' (line 1458)
    y_109916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 39), 'y')
    # Obtaining the member '__getitem__' of a type (line 1458)
    getitem___109917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1458, 39), y_109916, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1458)
    subscript_call_result_109918 = invoke(stypy.reporting.localization.Localization(__file__, 1458, 39), getitem___109917, slice3_109915)
    
    # Applying the binary operator '-' (line 1458)
    result_sub_109919 = python_operator(stypy.reporting.localization.Localization(__file__, 1458, 27), '-', subscript_call_result_109914, subscript_call_result_109918)
    
    # Getting the type of 'out' (line 1458)
    out_109920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 12), 'out')
    # Getting the type of 'slice1' (line 1458)
    slice1_109921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 16), 'slice1')
    # Storing an element on a container (line 1458)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1458, 12), out_109920, (slice1_109921, result_sub_109919))
    
    # Assigning a Num to a Subscript (line 1460):
    
    # Assigning a Num to a Subscript (line 1460):
    int_109922 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1460, 27), 'int')
    # Getting the type of 'slice1' (line 1460)
    slice1_109923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 12), 'slice1')
    # Getting the type of 'axis' (line 1460)
    axis_109924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 19), 'axis')
    # Storing an element on a container (line 1460)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1460, 12), slice1_109923, (axis_109924, int_109922))
    
    # Assigning a Num to a Subscript (line 1461):
    
    # Assigning a Num to a Subscript (line 1461):
    int_109925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1461, 27), 'int')
    # Getting the type of 'slice2' (line 1461)
    slice2_109926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 12), 'slice2')
    # Getting the type of 'axis' (line 1461)
    axis_109927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 19), 'axis')
    # Storing an element on a container (line 1461)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1461, 12), slice2_109926, (axis_109927, int_109925))
    
    # Assigning a Num to a Subscript (line 1462):
    
    # Assigning a Num to a Subscript (line 1462):
    int_109928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1462, 27), 'int')
    # Getting the type of 'slice3' (line 1462)
    slice3_109929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1462, 12), 'slice3')
    # Getting the type of 'axis' (line 1462)
    axis_109930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1462, 19), 'axis')
    # Storing an element on a container (line 1462)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1462, 12), slice3_109929, (axis_109930, int_109928))
    
    # Assigning a BinOp to a Subscript (line 1464):
    
    # Assigning a BinOp to a Subscript (line 1464):
    
    # Obtaining the type of the subscript
    # Getting the type of 'slice2' (line 1464)
    slice2_109931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1464, 29), 'slice2')
    # Getting the type of 'y' (line 1464)
    y_109932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1464, 27), 'y')
    # Obtaining the member '__getitem__' of a type (line 1464)
    getitem___109933 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1464, 27), y_109932, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1464)
    subscript_call_result_109934 = invoke(stypy.reporting.localization.Localization(__file__, 1464, 27), getitem___109933, slice2_109931)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'slice3' (line 1464)
    slice3_109935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1464, 41), 'slice3')
    # Getting the type of 'y' (line 1464)
    y_109936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1464, 39), 'y')
    # Obtaining the member '__getitem__' of a type (line 1464)
    getitem___109937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1464, 39), y_109936, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1464)
    subscript_call_result_109938 = invoke(stypy.reporting.localization.Localization(__file__, 1464, 39), getitem___109937, slice3_109935)
    
    # Applying the binary operator '-' (line 1464)
    result_sub_109939 = python_operator(stypy.reporting.localization.Localization(__file__, 1464, 27), '-', subscript_call_result_109934, subscript_call_result_109938)
    
    # Getting the type of 'out' (line 1464)
    out_109940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1464, 12), 'out')
    # Getting the type of 'slice1' (line 1464)
    slice1_109941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1464, 16), 'slice1')
    # Storing an element on a container (line 1464)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1464, 12), out_109940, (slice1_109941, result_sub_109939))
    # SSA branch for the else part of an if statement (line 1444)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1469):
    
    # Assigning a Call to a Name (line 1469):
    
    # Call to empty_like(...): (line 1469)
    # Processing the call arguments (line 1469)
    # Getting the type of 'y' (line 1469)
    y_109944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 32), 'y', False)
    # Processing the call keyword arguments (line 1469)
    # Getting the type of 'otype' (line 1469)
    otype_109945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 41), 'otype', False)
    keyword_109946 = otype_109945
    kwargs_109947 = {'dtype': keyword_109946}
    # Getting the type of 'np' (line 1469)
    np_109942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 18), 'np', False)
    # Obtaining the member 'empty_like' of a type (line 1469)
    empty_like_109943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1469, 18), np_109942, 'empty_like')
    # Calling empty_like(args, kwargs) (line 1469)
    empty_like_call_result_109948 = invoke(stypy.reporting.localization.Localization(__file__, 1469, 18), empty_like_109943, *[y_109944], **kwargs_109947)
    
    # Assigning a type to the variable 'out' (line 1469)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1469, 12), 'out', empty_like_call_result_109948)
    
    # Assigning a Call to a Subscript (line 1471):
    
    # Assigning a Call to a Subscript (line 1471):
    
    # Call to slice(...): (line 1471)
    # Processing the call arguments (line 1471)
    int_109950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1471, 33), 'int')
    int_109951 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1471, 36), 'int')
    # Processing the call keyword arguments (line 1471)
    kwargs_109952 = {}
    # Getting the type of 'slice' (line 1471)
    slice_109949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 27), 'slice', False)
    # Calling slice(args, kwargs) (line 1471)
    slice_call_result_109953 = invoke(stypy.reporting.localization.Localization(__file__, 1471, 27), slice_109949, *[int_109950, int_109951], **kwargs_109952)
    
    # Getting the type of 'slice1' (line 1471)
    slice1_109954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 12), 'slice1')
    # Getting the type of 'axis' (line 1471)
    axis_109955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 19), 'axis')
    # Storing an element on a container (line 1471)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1471, 12), slice1_109954, (axis_109955, slice_call_result_109953))
    
    # Assigning a Call to a Subscript (line 1472):
    
    # Assigning a Call to a Subscript (line 1472):
    
    # Call to slice(...): (line 1472)
    # Processing the call arguments (line 1472)
    int_109957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1472, 33), 'int')
    # Getting the type of 'None' (line 1472)
    None_109958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 36), 'None', False)
    # Processing the call keyword arguments (line 1472)
    kwargs_109959 = {}
    # Getting the type of 'slice' (line 1472)
    slice_109956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 27), 'slice', False)
    # Calling slice(args, kwargs) (line 1472)
    slice_call_result_109960 = invoke(stypy.reporting.localization.Localization(__file__, 1472, 27), slice_109956, *[int_109957, None_109958], **kwargs_109959)
    
    # Getting the type of 'slice2' (line 1472)
    slice2_109961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 12), 'slice2')
    # Getting the type of 'axis' (line 1472)
    axis_109962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 19), 'axis')
    # Storing an element on a container (line 1472)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1472, 12), slice2_109961, (axis_109962, slice_call_result_109960))
    
    # Assigning a Call to a Subscript (line 1473):
    
    # Assigning a Call to a Subscript (line 1473):
    
    # Call to slice(...): (line 1473)
    # Processing the call arguments (line 1473)
    # Getting the type of 'None' (line 1473)
    None_109964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 33), 'None', False)
    int_109965 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1473, 39), 'int')
    # Processing the call keyword arguments (line 1473)
    kwargs_109966 = {}
    # Getting the type of 'slice' (line 1473)
    slice_109963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 27), 'slice', False)
    # Calling slice(args, kwargs) (line 1473)
    slice_call_result_109967 = invoke(stypy.reporting.localization.Localization(__file__, 1473, 27), slice_109963, *[None_109964, int_109965], **kwargs_109966)
    
    # Getting the type of 'slice3' (line 1473)
    slice3_109968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 12), 'slice3')
    # Getting the type of 'axis' (line 1473)
    axis_109969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 19), 'axis')
    # Storing an element on a container (line 1473)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1473, 12), slice3_109968, (axis_109969, slice_call_result_109967))
    
    # Assigning a BinOp to a Subscript (line 1475):
    
    # Assigning a BinOp to a Subscript (line 1475):
    
    # Obtaining the type of the subscript
    # Getting the type of 'slice2' (line 1475)
    slice2_109970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 29), 'slice2')
    # Getting the type of 'y' (line 1475)
    y_109971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 27), 'y')
    # Obtaining the member '__getitem__' of a type (line 1475)
    getitem___109972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1475, 27), y_109971, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1475)
    subscript_call_result_109973 = invoke(stypy.reporting.localization.Localization(__file__, 1475, 27), getitem___109972, slice2_109970)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'slice3' (line 1475)
    slice3_109974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 41), 'slice3')
    # Getting the type of 'y' (line 1475)
    y_109975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 39), 'y')
    # Obtaining the member '__getitem__' of a type (line 1475)
    getitem___109976 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1475, 39), y_109975, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1475)
    subscript_call_result_109977 = invoke(stypy.reporting.localization.Localization(__file__, 1475, 39), getitem___109976, slice3_109974)
    
    # Applying the binary operator '-' (line 1475)
    result_sub_109978 = python_operator(stypy.reporting.localization.Localization(__file__, 1475, 27), '-', subscript_call_result_109973, subscript_call_result_109977)
    
    float_109979 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1475, 50), 'float')
    # Applying the binary operator 'div' (line 1475)
    result_div_109980 = python_operator(stypy.reporting.localization.Localization(__file__, 1475, 26), 'div', result_sub_109978, float_109979)
    
    # Getting the type of 'out' (line 1475)
    out_109981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 12), 'out')
    # Getting the type of 'slice1' (line 1475)
    slice1_109982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 16), 'slice1')
    # Storing an element on a container (line 1475)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1475, 12), out_109981, (slice1_109982, result_div_109980))
    
    # Assigning a Num to a Subscript (line 1477):
    
    # Assigning a Num to a Subscript (line 1477):
    int_109983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1477, 27), 'int')
    # Getting the type of 'slice1' (line 1477)
    slice1_109984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 12), 'slice1')
    # Getting the type of 'axis' (line 1477)
    axis_109985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 19), 'axis')
    # Storing an element on a container (line 1477)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1477, 12), slice1_109984, (axis_109985, int_109983))
    
    # Assigning a Num to a Subscript (line 1478):
    
    # Assigning a Num to a Subscript (line 1478):
    int_109986 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1478, 27), 'int')
    # Getting the type of 'slice2' (line 1478)
    slice2_109987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1478, 12), 'slice2')
    # Getting the type of 'axis' (line 1478)
    axis_109988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1478, 19), 'axis')
    # Storing an element on a container (line 1478)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1478, 12), slice2_109987, (axis_109988, int_109986))
    
    # Assigning a Num to a Subscript (line 1479):
    
    # Assigning a Num to a Subscript (line 1479):
    int_109989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1479, 27), 'int')
    # Getting the type of 'slice3' (line 1479)
    slice3_109990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 12), 'slice3')
    # Getting the type of 'axis' (line 1479)
    axis_109991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 19), 'axis')
    # Storing an element on a container (line 1479)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1479, 12), slice3_109990, (axis_109991, int_109989))
    
    # Assigning a Num to a Subscript (line 1480):
    
    # Assigning a Num to a Subscript (line 1480):
    int_109992 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1480, 27), 'int')
    # Getting the type of 'slice4' (line 1480)
    slice4_109993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1480, 12), 'slice4')
    # Getting the type of 'axis' (line 1480)
    axis_109994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1480, 19), 'axis')
    # Storing an element on a container (line 1480)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1480, 12), slice4_109993, (axis_109994, int_109992))
    
    # Assigning a BinOp to a Subscript (line 1482):
    
    # Assigning a BinOp to a Subscript (line 1482):
    
    float_109995 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1482, 28), 'float')
    
    # Obtaining the type of the subscript
    # Getting the type of 'slice2' (line 1482)
    slice2_109996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1482, 34), 'slice2')
    # Getting the type of 'y' (line 1482)
    y_109997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1482, 32), 'y')
    # Obtaining the member '__getitem__' of a type (line 1482)
    getitem___109998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1482, 32), y_109997, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1482)
    subscript_call_result_109999 = invoke(stypy.reporting.localization.Localization(__file__, 1482, 32), getitem___109998, slice2_109996)
    
    # Applying the binary operator '*' (line 1482)
    result_mul_110000 = python_operator(stypy.reporting.localization.Localization(__file__, 1482, 28), '*', float_109995, subscript_call_result_109999)
    
    float_110001 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1482, 44), 'float')
    
    # Obtaining the type of the subscript
    # Getting the type of 'slice3' (line 1482)
    slice3_110002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1482, 50), 'slice3')
    # Getting the type of 'y' (line 1482)
    y_110003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1482, 48), 'y')
    # Obtaining the member '__getitem__' of a type (line 1482)
    getitem___110004 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1482, 48), y_110003, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1482)
    subscript_call_result_110005 = invoke(stypy.reporting.localization.Localization(__file__, 1482, 48), getitem___110004, slice3_110002)
    
    # Applying the binary operator '*' (line 1482)
    result_mul_110006 = python_operator(stypy.reporting.localization.Localization(__file__, 1482, 44), '*', float_110001, subscript_call_result_110005)
    
    # Applying the binary operator '-' (line 1482)
    result_sub_110007 = python_operator(stypy.reporting.localization.Localization(__file__, 1482, 28), '-', result_mul_110000, result_mul_110006)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'slice4' (line 1482)
    slice4_110008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1482, 62), 'slice4')
    # Getting the type of 'y' (line 1482)
    y_110009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1482, 60), 'y')
    # Obtaining the member '__getitem__' of a type (line 1482)
    getitem___110010 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1482, 60), y_110009, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1482)
    subscript_call_result_110011 = invoke(stypy.reporting.localization.Localization(__file__, 1482, 60), getitem___110010, slice4_110008)
    
    # Applying the binary operator '+' (line 1482)
    result_add_110012 = python_operator(stypy.reporting.localization.Localization(__file__, 1482, 58), '+', result_sub_110007, subscript_call_result_110011)
    
    # Applying the 'usub' unary operator (line 1482)
    result___neg___110013 = python_operator(stypy.reporting.localization.Localization(__file__, 1482, 26), 'usub', result_add_110012)
    
    float_110014 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1482, 71), 'float')
    # Applying the binary operator 'div' (line 1482)
    result_div_110015 = python_operator(stypy.reporting.localization.Localization(__file__, 1482, 26), 'div', result___neg___110013, float_110014)
    
    # Getting the type of 'out' (line 1482)
    out_110016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1482, 12), 'out')
    # Getting the type of 'slice1' (line 1482)
    slice1_110017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1482, 16), 'slice1')
    # Storing an element on a container (line 1482)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1482, 12), out_110016, (slice1_110017, result_div_110015))
    
    # Assigning a Num to a Subscript (line 1484):
    
    # Assigning a Num to a Subscript (line 1484):
    int_110018 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1484, 27), 'int')
    # Getting the type of 'slice1' (line 1484)
    slice1_110019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1484, 12), 'slice1')
    # Getting the type of 'axis' (line 1484)
    axis_110020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1484, 19), 'axis')
    # Storing an element on a container (line 1484)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1484, 12), slice1_110019, (axis_110020, int_110018))
    
    # Assigning a Num to a Subscript (line 1485):
    
    # Assigning a Num to a Subscript (line 1485):
    int_110021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1485, 27), 'int')
    # Getting the type of 'slice2' (line 1485)
    slice2_110022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1485, 12), 'slice2')
    # Getting the type of 'axis' (line 1485)
    axis_110023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1485, 19), 'axis')
    # Storing an element on a container (line 1485)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1485, 12), slice2_110022, (axis_110023, int_110021))
    
    # Assigning a Num to a Subscript (line 1486):
    
    # Assigning a Num to a Subscript (line 1486):
    int_110024 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1486, 27), 'int')
    # Getting the type of 'slice3' (line 1486)
    slice3_110025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 12), 'slice3')
    # Getting the type of 'axis' (line 1486)
    axis_110026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 19), 'axis')
    # Storing an element on a container (line 1486)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1486, 12), slice3_110025, (axis_110026, int_110024))
    
    # Assigning a Num to a Subscript (line 1487):
    
    # Assigning a Num to a Subscript (line 1487):
    int_110027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1487, 27), 'int')
    # Getting the type of 'slice4' (line 1487)
    slice4_110028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1487, 12), 'slice4')
    # Getting the type of 'axis' (line 1487)
    axis_110029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1487, 19), 'axis')
    # Storing an element on a container (line 1487)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1487, 12), slice4_110028, (axis_110029, int_110027))
    
    # Assigning a BinOp to a Subscript (line 1489):
    
    # Assigning a BinOp to a Subscript (line 1489):
    float_110030 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1489, 27), 'float')
    
    # Obtaining the type of the subscript
    # Getting the type of 'slice2' (line 1489)
    slice2_110031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 33), 'slice2')
    # Getting the type of 'y' (line 1489)
    y_110032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 31), 'y')
    # Obtaining the member '__getitem__' of a type (line 1489)
    getitem___110033 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1489, 31), y_110032, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1489)
    subscript_call_result_110034 = invoke(stypy.reporting.localization.Localization(__file__, 1489, 31), getitem___110033, slice2_110031)
    
    # Applying the binary operator '*' (line 1489)
    result_mul_110035 = python_operator(stypy.reporting.localization.Localization(__file__, 1489, 27), '*', float_110030, subscript_call_result_110034)
    
    float_110036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1489, 43), 'float')
    
    # Obtaining the type of the subscript
    # Getting the type of 'slice3' (line 1489)
    slice3_110037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 49), 'slice3')
    # Getting the type of 'y' (line 1489)
    y_110038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 47), 'y')
    # Obtaining the member '__getitem__' of a type (line 1489)
    getitem___110039 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1489, 47), y_110038, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1489)
    subscript_call_result_110040 = invoke(stypy.reporting.localization.Localization(__file__, 1489, 47), getitem___110039, slice3_110037)
    
    # Applying the binary operator '*' (line 1489)
    result_mul_110041 = python_operator(stypy.reporting.localization.Localization(__file__, 1489, 43), '*', float_110036, subscript_call_result_110040)
    
    # Applying the binary operator '-' (line 1489)
    result_sub_110042 = python_operator(stypy.reporting.localization.Localization(__file__, 1489, 27), '-', result_mul_110035, result_mul_110041)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'slice4' (line 1489)
    slice4_110043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 61), 'slice4')
    # Getting the type of 'y' (line 1489)
    y_110044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 59), 'y')
    # Obtaining the member '__getitem__' of a type (line 1489)
    getitem___110045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1489, 59), y_110044, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1489)
    subscript_call_result_110046 = invoke(stypy.reporting.localization.Localization(__file__, 1489, 59), getitem___110045, slice4_110043)
    
    # Applying the binary operator '+' (line 1489)
    result_add_110047 = python_operator(stypy.reporting.localization.Localization(__file__, 1489, 57), '+', result_sub_110042, subscript_call_result_110046)
    
    float_110048 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1489, 70), 'float')
    # Applying the binary operator 'div' (line 1489)
    result_div_110049 = python_operator(stypy.reporting.localization.Localization(__file__, 1489, 26), 'div', result_add_110047, float_110048)
    
    # Getting the type of 'out' (line 1489)
    out_110050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 12), 'out')
    # Getting the type of 'slice1' (line 1489)
    slice1_110051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 16), 'slice1')
    # Storing an element on a container (line 1489)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1489, 12), out_110050, (slice1_110051, result_div_110049))
    # SSA join for if statement (line 1444)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'out' (line 1492)
    out_110052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 8), 'out')
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1492)
    i_110053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 18), 'i')
    # Getting the type of 'dx' (line 1492)
    dx_110054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 15), 'dx')
    # Obtaining the member '__getitem__' of a type (line 1492)
    getitem___110055 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1492, 15), dx_110054, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1492)
    subscript_call_result_110056 = invoke(stypy.reporting.localization.Localization(__file__, 1492, 15), getitem___110055, i_110053)
    
    # Applying the binary operator 'div=' (line 1492)
    result_div_110057 = python_operator(stypy.reporting.localization.Localization(__file__, 1492, 8), 'div=', out_110052, subscript_call_result_110056)
    # Assigning a type to the variable 'out' (line 1492)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1492, 8), 'out', result_div_110057)
    
    
    # Call to append(...): (line 1493)
    # Processing the call arguments (line 1493)
    # Getting the type of 'out' (line 1493)
    out_110060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 23), 'out', False)
    # Processing the call keyword arguments (line 1493)
    kwargs_110061 = {}
    # Getting the type of 'outvals' (line 1493)
    outvals_110058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 8), 'outvals', False)
    # Obtaining the member 'append' of a type (line 1493)
    append_110059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1493, 8), outvals_110058, 'append')
    # Calling append(args, kwargs) (line 1493)
    append_call_result_110062 = invoke(stypy.reporting.localization.Localization(__file__, 1493, 8), append_110059, *[out_110060], **kwargs_110061)
    
    
    # Assigning a Call to a Subscript (line 1496):
    
    # Assigning a Call to a Subscript (line 1496):
    
    # Call to slice(...): (line 1496)
    # Processing the call arguments (line 1496)
    # Getting the type of 'None' (line 1496)
    None_110064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1496, 29), 'None', False)
    # Processing the call keyword arguments (line 1496)
    kwargs_110065 = {}
    # Getting the type of 'slice' (line 1496)
    slice_110063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1496, 23), 'slice', False)
    # Calling slice(args, kwargs) (line 1496)
    slice_call_result_110066 = invoke(stypy.reporting.localization.Localization(__file__, 1496, 23), slice_110063, *[None_110064], **kwargs_110065)
    
    # Getting the type of 'slice1' (line 1496)
    slice1_110067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1496, 8), 'slice1')
    # Getting the type of 'axis' (line 1496)
    axis_110068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1496, 15), 'axis')
    # Storing an element on a container (line 1496)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1496, 8), slice1_110067, (axis_110068, slice_call_result_110066))
    
    # Assigning a Call to a Subscript (line 1497):
    
    # Assigning a Call to a Subscript (line 1497):
    
    # Call to slice(...): (line 1497)
    # Processing the call arguments (line 1497)
    # Getting the type of 'None' (line 1497)
    None_110070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 29), 'None', False)
    # Processing the call keyword arguments (line 1497)
    kwargs_110071 = {}
    # Getting the type of 'slice' (line 1497)
    slice_110069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 23), 'slice', False)
    # Calling slice(args, kwargs) (line 1497)
    slice_call_result_110072 = invoke(stypy.reporting.localization.Localization(__file__, 1497, 23), slice_110069, *[None_110070], **kwargs_110071)
    
    # Getting the type of 'slice2' (line 1497)
    slice2_110073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 8), 'slice2')
    # Getting the type of 'axis' (line 1497)
    axis_110074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 15), 'axis')
    # Storing an element on a container (line 1497)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1497, 8), slice2_110073, (axis_110074, slice_call_result_110072))
    
    # Assigning a Call to a Subscript (line 1498):
    
    # Assigning a Call to a Subscript (line 1498):
    
    # Call to slice(...): (line 1498)
    # Processing the call arguments (line 1498)
    # Getting the type of 'None' (line 1498)
    None_110076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1498, 29), 'None', False)
    # Processing the call keyword arguments (line 1498)
    kwargs_110077 = {}
    # Getting the type of 'slice' (line 1498)
    slice_110075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1498, 23), 'slice', False)
    # Calling slice(args, kwargs) (line 1498)
    slice_call_result_110078 = invoke(stypy.reporting.localization.Localization(__file__, 1498, 23), slice_110075, *[None_110076], **kwargs_110077)
    
    # Getting the type of 'slice3' (line 1498)
    slice3_110079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1498, 8), 'slice3')
    # Getting the type of 'axis' (line 1498)
    axis_110080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1498, 15), 'axis')
    # Storing an element on a container (line 1498)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1498, 8), slice3_110079, (axis_110080, slice_call_result_110078))
    
    # Assigning a Call to a Subscript (line 1499):
    
    # Assigning a Call to a Subscript (line 1499):
    
    # Call to slice(...): (line 1499)
    # Processing the call arguments (line 1499)
    # Getting the type of 'None' (line 1499)
    None_110082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1499, 29), 'None', False)
    # Processing the call keyword arguments (line 1499)
    kwargs_110083 = {}
    # Getting the type of 'slice' (line 1499)
    slice_110081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1499, 23), 'slice', False)
    # Calling slice(args, kwargs) (line 1499)
    slice_call_result_110084 = invoke(stypy.reporting.localization.Localization(__file__, 1499, 23), slice_110081, *[None_110082], **kwargs_110083)
    
    # Getting the type of 'slice4' (line 1499)
    slice4_110085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1499, 8), 'slice4')
    # Getting the type of 'axis' (line 1499)
    axis_110086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1499, 15), 'axis')
    # Storing an element on a container (line 1499)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1499, 8), slice4_110085, (axis_110086, slice_call_result_110084))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 1501)
    # Processing the call arguments (line 1501)
    # Getting the type of 'axes' (line 1501)
    axes_110088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 11), 'axes', False)
    # Processing the call keyword arguments (line 1501)
    kwargs_110089 = {}
    # Getting the type of 'len' (line 1501)
    len_110087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 7), 'len', False)
    # Calling len(args, kwargs) (line 1501)
    len_call_result_110090 = invoke(stypy.reporting.localization.Localization(__file__, 1501, 7), len_110087, *[axes_110088], **kwargs_110089)
    
    int_110091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1501, 20), 'int')
    # Applying the binary operator '==' (line 1501)
    result_eq_110092 = python_operator(stypy.reporting.localization.Localization(__file__, 1501, 7), '==', len_call_result_110090, int_110091)
    
    # Testing the type of an if condition (line 1501)
    if_condition_110093 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1501, 4), result_eq_110092)
    # Assigning a type to the variable 'if_condition_110093' (line 1501)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1501, 4), 'if_condition_110093', if_condition_110093)
    # SSA begins for if statement (line 1501)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining the type of the subscript
    int_110094 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1502, 23), 'int')
    # Getting the type of 'outvals' (line 1502)
    outvals_110095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 15), 'outvals')
    # Obtaining the member '__getitem__' of a type (line 1502)
    getitem___110096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1502, 15), outvals_110095, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1502)
    subscript_call_result_110097 = invoke(stypy.reporting.localization.Localization(__file__, 1502, 15), getitem___110096, int_110094)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1502)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1502, 8), 'stypy_return_type', subscript_call_result_110097)
    # SSA branch for the else part of an if statement (line 1501)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'outvals' (line 1504)
    outvals_110098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1504, 15), 'outvals')
    # Assigning a type to the variable 'stypy_return_type' (line 1504)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1504, 8), 'stypy_return_type', outvals_110098)
    # SSA join for if statement (line 1501)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'gradient(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'gradient' in the type store
    # Getting the type of 'stypy_return_type' (line 1302)
    stypy_return_type_110099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_110099)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'gradient'
    return stypy_return_type_110099

# Assigning a type to the variable 'gradient' (line 1302)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1302, 0), 'gradient', gradient)

@norecursion
def diff(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_110100 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1507, 14), 'int')
    int_110101 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1507, 22), 'int')
    defaults = [int_110100, int_110101]
    # Create a new context for function 'diff'
    module_type_store = module_type_store.open_function_context('diff', 1507, 0, False)
    
    # Passed parameters checking function
    diff.stypy_localization = localization
    diff.stypy_type_of_self = None
    diff.stypy_type_store = module_type_store
    diff.stypy_function_name = 'diff'
    diff.stypy_param_names_list = ['a', 'n', 'axis']
    diff.stypy_varargs_param_name = None
    diff.stypy_kwargs_param_name = None
    diff.stypy_call_defaults = defaults
    diff.stypy_call_varargs = varargs
    diff.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'diff', ['a', 'n', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'diff', localization, ['a', 'n', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'diff(...)' code ##################

    str_110102 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1550, (-1)), 'str', '\n    Calculate the n-th discrete difference along given axis.\n\n    The first difference is given by ``out[n] = a[n+1] - a[n]`` along\n    the given axis, higher differences are calculated by using `diff`\n    recursively.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array\n    n : int, optional\n        The number of times values are differenced.\n    axis : int, optional\n        The axis along which the difference is taken, default is the last axis.\n\n    Returns\n    -------\n    diff : ndarray\n        The n-th differences. The shape of the output is the same as `a`\n        except along `axis` where the dimension is smaller by `n`.\n.\n\n    See Also\n    --------\n    gradient, ediff1d, cumsum\n\n    Examples\n    --------\n    >>> x = np.array([1, 2, 4, 7, 0])\n    >>> np.diff(x)\n    array([ 1,  2,  3, -7])\n    >>> np.diff(x, n=2)\n    array([  1,   1, -10])\n\n    >>> x = np.array([[1, 3, 6, 10], [0, 5, 6, 8]])\n    >>> np.diff(x)\n    array([[2, 3, 4],\n           [5, 1, 2]])\n    >>> np.diff(x, axis=0)\n    array([[-1,  2,  0, -2]])\n\n    ')
    
    
    # Getting the type of 'n' (line 1551)
    n_110103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 7), 'n')
    int_110104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1551, 12), 'int')
    # Applying the binary operator '==' (line 1551)
    result_eq_110105 = python_operator(stypy.reporting.localization.Localization(__file__, 1551, 7), '==', n_110103, int_110104)
    
    # Testing the type of an if condition (line 1551)
    if_condition_110106 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1551, 4), result_eq_110105)
    # Assigning a type to the variable 'if_condition_110106' (line 1551)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1551, 4), 'if_condition_110106', if_condition_110106)
    # SSA begins for if statement (line 1551)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'a' (line 1552)
    a_110107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1552, 15), 'a')
    # Assigning a type to the variable 'stypy_return_type' (line 1552)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1552, 8), 'stypy_return_type', a_110107)
    # SSA join for if statement (line 1551)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'n' (line 1553)
    n_110108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1553, 7), 'n')
    int_110109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1553, 11), 'int')
    # Applying the binary operator '<' (line 1553)
    result_lt_110110 = python_operator(stypy.reporting.localization.Localization(__file__, 1553, 7), '<', n_110108, int_110109)
    
    # Testing the type of an if condition (line 1553)
    if_condition_110111 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1553, 4), result_lt_110110)
    # Assigning a type to the variable 'if_condition_110111' (line 1553)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1553, 4), 'if_condition_110111', if_condition_110111)
    # SSA begins for if statement (line 1553)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1554)
    # Processing the call arguments (line 1554)
    str_110113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1555, 12), 'str', 'order must be non-negative but got ')
    
    # Call to repr(...): (line 1555)
    # Processing the call arguments (line 1555)
    # Getting the type of 'n' (line 1555)
    n_110115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1555, 57), 'n', False)
    # Processing the call keyword arguments (line 1555)
    kwargs_110116 = {}
    # Getting the type of 'repr' (line 1555)
    repr_110114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1555, 52), 'repr', False)
    # Calling repr(args, kwargs) (line 1555)
    repr_call_result_110117 = invoke(stypy.reporting.localization.Localization(__file__, 1555, 52), repr_110114, *[n_110115], **kwargs_110116)
    
    # Applying the binary operator '+' (line 1555)
    result_add_110118 = python_operator(stypy.reporting.localization.Localization(__file__, 1555, 12), '+', str_110113, repr_call_result_110117)
    
    # Processing the call keyword arguments (line 1554)
    kwargs_110119 = {}
    # Getting the type of 'ValueError' (line 1554)
    ValueError_110112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1554, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1554)
    ValueError_call_result_110120 = invoke(stypy.reporting.localization.Localization(__file__, 1554, 14), ValueError_110112, *[result_add_110118], **kwargs_110119)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1554, 8), ValueError_call_result_110120, 'raise parameter', BaseException)
    # SSA join for if statement (line 1553)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1556):
    
    # Assigning a Call to a Name (line 1556):
    
    # Call to asanyarray(...): (line 1556)
    # Processing the call arguments (line 1556)
    # Getting the type of 'a' (line 1556)
    a_110122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1556, 19), 'a', False)
    # Processing the call keyword arguments (line 1556)
    kwargs_110123 = {}
    # Getting the type of 'asanyarray' (line 1556)
    asanyarray_110121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1556, 8), 'asanyarray', False)
    # Calling asanyarray(args, kwargs) (line 1556)
    asanyarray_call_result_110124 = invoke(stypy.reporting.localization.Localization(__file__, 1556, 8), asanyarray_110121, *[a_110122], **kwargs_110123)
    
    # Assigning a type to the variable 'a' (line 1556)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1556, 4), 'a', asanyarray_call_result_110124)
    
    # Assigning a Call to a Name (line 1557):
    
    # Assigning a Call to a Name (line 1557):
    
    # Call to len(...): (line 1557)
    # Processing the call arguments (line 1557)
    # Getting the type of 'a' (line 1557)
    a_110126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1557, 13), 'a', False)
    # Obtaining the member 'shape' of a type (line 1557)
    shape_110127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1557, 13), a_110126, 'shape')
    # Processing the call keyword arguments (line 1557)
    kwargs_110128 = {}
    # Getting the type of 'len' (line 1557)
    len_110125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1557, 9), 'len', False)
    # Calling len(args, kwargs) (line 1557)
    len_call_result_110129 = invoke(stypy.reporting.localization.Localization(__file__, 1557, 9), len_110125, *[shape_110127], **kwargs_110128)
    
    # Assigning a type to the variable 'nd' (line 1557)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1557, 4), 'nd', len_call_result_110129)
    
    # Assigning a BinOp to a Name (line 1558):
    
    # Assigning a BinOp to a Name (line 1558):
    
    # Obtaining an instance of the builtin type 'list' (line 1558)
    list_110130 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1558, 13), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1558)
    # Adding element type (line 1558)
    
    # Call to slice(...): (line 1558)
    # Processing the call arguments (line 1558)
    # Getting the type of 'None' (line 1558)
    None_110132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 20), 'None', False)
    # Processing the call keyword arguments (line 1558)
    kwargs_110133 = {}
    # Getting the type of 'slice' (line 1558)
    slice_110131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 14), 'slice', False)
    # Calling slice(args, kwargs) (line 1558)
    slice_call_result_110134 = invoke(stypy.reporting.localization.Localization(__file__, 1558, 14), slice_110131, *[None_110132], **kwargs_110133)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1558, 13), list_110130, slice_call_result_110134)
    
    # Getting the type of 'nd' (line 1558)
    nd_110135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 27), 'nd')
    # Applying the binary operator '*' (line 1558)
    result_mul_110136 = python_operator(stypy.reporting.localization.Localization(__file__, 1558, 13), '*', list_110130, nd_110135)
    
    # Assigning a type to the variable 'slice1' (line 1558)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1558, 4), 'slice1', result_mul_110136)
    
    # Assigning a BinOp to a Name (line 1559):
    
    # Assigning a BinOp to a Name (line 1559):
    
    # Obtaining an instance of the builtin type 'list' (line 1559)
    list_110137 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1559, 13), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1559)
    # Adding element type (line 1559)
    
    # Call to slice(...): (line 1559)
    # Processing the call arguments (line 1559)
    # Getting the type of 'None' (line 1559)
    None_110139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1559, 20), 'None', False)
    # Processing the call keyword arguments (line 1559)
    kwargs_110140 = {}
    # Getting the type of 'slice' (line 1559)
    slice_110138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1559, 14), 'slice', False)
    # Calling slice(args, kwargs) (line 1559)
    slice_call_result_110141 = invoke(stypy.reporting.localization.Localization(__file__, 1559, 14), slice_110138, *[None_110139], **kwargs_110140)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1559, 13), list_110137, slice_call_result_110141)
    
    # Getting the type of 'nd' (line 1559)
    nd_110142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1559, 27), 'nd')
    # Applying the binary operator '*' (line 1559)
    result_mul_110143 = python_operator(stypy.reporting.localization.Localization(__file__, 1559, 13), '*', list_110137, nd_110142)
    
    # Assigning a type to the variable 'slice2' (line 1559)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1559, 4), 'slice2', result_mul_110143)
    
    # Assigning a Call to a Subscript (line 1560):
    
    # Assigning a Call to a Subscript (line 1560):
    
    # Call to slice(...): (line 1560)
    # Processing the call arguments (line 1560)
    int_110145 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1560, 25), 'int')
    # Getting the type of 'None' (line 1560)
    None_110146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1560, 28), 'None', False)
    # Processing the call keyword arguments (line 1560)
    kwargs_110147 = {}
    # Getting the type of 'slice' (line 1560)
    slice_110144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1560, 19), 'slice', False)
    # Calling slice(args, kwargs) (line 1560)
    slice_call_result_110148 = invoke(stypy.reporting.localization.Localization(__file__, 1560, 19), slice_110144, *[int_110145, None_110146], **kwargs_110147)
    
    # Getting the type of 'slice1' (line 1560)
    slice1_110149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1560, 4), 'slice1')
    # Getting the type of 'axis' (line 1560)
    axis_110150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1560, 11), 'axis')
    # Storing an element on a container (line 1560)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1560, 4), slice1_110149, (axis_110150, slice_call_result_110148))
    
    # Assigning a Call to a Subscript (line 1561):
    
    # Assigning a Call to a Subscript (line 1561):
    
    # Call to slice(...): (line 1561)
    # Processing the call arguments (line 1561)
    # Getting the type of 'None' (line 1561)
    None_110152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1561, 25), 'None', False)
    int_110153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1561, 31), 'int')
    # Processing the call keyword arguments (line 1561)
    kwargs_110154 = {}
    # Getting the type of 'slice' (line 1561)
    slice_110151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1561, 19), 'slice', False)
    # Calling slice(args, kwargs) (line 1561)
    slice_call_result_110155 = invoke(stypy.reporting.localization.Localization(__file__, 1561, 19), slice_110151, *[None_110152, int_110153], **kwargs_110154)
    
    # Getting the type of 'slice2' (line 1561)
    slice2_110156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1561, 4), 'slice2')
    # Getting the type of 'axis' (line 1561)
    axis_110157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1561, 11), 'axis')
    # Storing an element on a container (line 1561)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1561, 4), slice2_110156, (axis_110157, slice_call_result_110155))
    
    # Assigning a Call to a Name (line 1562):
    
    # Assigning a Call to a Name (line 1562):
    
    # Call to tuple(...): (line 1562)
    # Processing the call arguments (line 1562)
    # Getting the type of 'slice1' (line 1562)
    slice1_110159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1562, 19), 'slice1', False)
    # Processing the call keyword arguments (line 1562)
    kwargs_110160 = {}
    # Getting the type of 'tuple' (line 1562)
    tuple_110158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1562, 13), 'tuple', False)
    # Calling tuple(args, kwargs) (line 1562)
    tuple_call_result_110161 = invoke(stypy.reporting.localization.Localization(__file__, 1562, 13), tuple_110158, *[slice1_110159], **kwargs_110160)
    
    # Assigning a type to the variable 'slice1' (line 1562)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1562, 4), 'slice1', tuple_call_result_110161)
    
    # Assigning a Call to a Name (line 1563):
    
    # Assigning a Call to a Name (line 1563):
    
    # Call to tuple(...): (line 1563)
    # Processing the call arguments (line 1563)
    # Getting the type of 'slice2' (line 1563)
    slice2_110163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1563, 19), 'slice2', False)
    # Processing the call keyword arguments (line 1563)
    kwargs_110164 = {}
    # Getting the type of 'tuple' (line 1563)
    tuple_110162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1563, 13), 'tuple', False)
    # Calling tuple(args, kwargs) (line 1563)
    tuple_call_result_110165 = invoke(stypy.reporting.localization.Localization(__file__, 1563, 13), tuple_110162, *[slice2_110163], **kwargs_110164)
    
    # Assigning a type to the variable 'slice2' (line 1563)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1563, 4), 'slice2', tuple_call_result_110165)
    
    
    # Getting the type of 'n' (line 1564)
    n_110166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1564, 7), 'n')
    int_110167 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1564, 11), 'int')
    # Applying the binary operator '>' (line 1564)
    result_gt_110168 = python_operator(stypy.reporting.localization.Localization(__file__, 1564, 7), '>', n_110166, int_110167)
    
    # Testing the type of an if condition (line 1564)
    if_condition_110169 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1564, 4), result_gt_110168)
    # Assigning a type to the variable 'if_condition_110169' (line 1564)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1564, 4), 'if_condition_110169', if_condition_110169)
    # SSA begins for if statement (line 1564)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to diff(...): (line 1565)
    # Processing the call arguments (line 1565)
    
    # Obtaining the type of the subscript
    # Getting the type of 'slice1' (line 1565)
    slice1_110171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 22), 'slice1', False)
    # Getting the type of 'a' (line 1565)
    a_110172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 20), 'a', False)
    # Obtaining the member '__getitem__' of a type (line 1565)
    getitem___110173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1565, 20), a_110172, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1565)
    subscript_call_result_110174 = invoke(stypy.reporting.localization.Localization(__file__, 1565, 20), getitem___110173, slice1_110171)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'slice2' (line 1565)
    slice2_110175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 32), 'slice2', False)
    # Getting the type of 'a' (line 1565)
    a_110176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 30), 'a', False)
    # Obtaining the member '__getitem__' of a type (line 1565)
    getitem___110177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1565, 30), a_110176, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1565)
    subscript_call_result_110178 = invoke(stypy.reporting.localization.Localization(__file__, 1565, 30), getitem___110177, slice2_110175)
    
    # Applying the binary operator '-' (line 1565)
    result_sub_110179 = python_operator(stypy.reporting.localization.Localization(__file__, 1565, 20), '-', subscript_call_result_110174, subscript_call_result_110178)
    
    # Getting the type of 'n' (line 1565)
    n_110180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 41), 'n', False)
    int_110181 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1565, 43), 'int')
    # Applying the binary operator '-' (line 1565)
    result_sub_110182 = python_operator(stypy.reporting.localization.Localization(__file__, 1565, 41), '-', n_110180, int_110181)
    
    # Processing the call keyword arguments (line 1565)
    # Getting the type of 'axis' (line 1565)
    axis_110183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 51), 'axis', False)
    keyword_110184 = axis_110183
    kwargs_110185 = {'axis': keyword_110184}
    # Getting the type of 'diff' (line 1565)
    diff_110170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 15), 'diff', False)
    # Calling diff(args, kwargs) (line 1565)
    diff_call_result_110186 = invoke(stypy.reporting.localization.Localization(__file__, 1565, 15), diff_110170, *[result_sub_110179, result_sub_110182], **kwargs_110185)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1565)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1565, 8), 'stypy_return_type', diff_call_result_110186)
    # SSA branch for the else part of an if statement (line 1564)
    module_type_store.open_ssa_branch('else')
    
    # Obtaining the type of the subscript
    # Getting the type of 'slice1' (line 1567)
    slice1_110187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 17), 'slice1')
    # Getting the type of 'a' (line 1567)
    a_110188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 15), 'a')
    # Obtaining the member '__getitem__' of a type (line 1567)
    getitem___110189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1567, 15), a_110188, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1567)
    subscript_call_result_110190 = invoke(stypy.reporting.localization.Localization(__file__, 1567, 15), getitem___110189, slice1_110187)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'slice2' (line 1567)
    slice2_110191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 27), 'slice2')
    # Getting the type of 'a' (line 1567)
    a_110192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 25), 'a')
    # Obtaining the member '__getitem__' of a type (line 1567)
    getitem___110193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1567, 25), a_110192, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1567)
    subscript_call_result_110194 = invoke(stypy.reporting.localization.Localization(__file__, 1567, 25), getitem___110193, slice2_110191)
    
    # Applying the binary operator '-' (line 1567)
    result_sub_110195 = python_operator(stypy.reporting.localization.Localization(__file__, 1567, 15), '-', subscript_call_result_110190, subscript_call_result_110194)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1567)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1567, 8), 'stypy_return_type', result_sub_110195)
    # SSA join for if statement (line 1564)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'diff(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'diff' in the type store
    # Getting the type of 'stypy_return_type' (line 1507)
    stypy_return_type_110196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1507, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_110196)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'diff'
    return stypy_return_type_110196

# Assigning a type to the variable 'diff' (line 1507)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1507, 0), 'diff', diff)

@norecursion
def interp(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1570)
    None_110197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1570, 27), 'None')
    # Getting the type of 'None' (line 1570)
    None_110198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1570, 39), 'None')
    # Getting the type of 'None' (line 1570)
    None_110199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1570, 52), 'None')
    defaults = [None_110197, None_110198, None_110199]
    # Create a new context for function 'interp'
    module_type_store = module_type_store.open_function_context('interp', 1570, 0, False)
    
    # Passed parameters checking function
    interp.stypy_localization = localization
    interp.stypy_type_of_self = None
    interp.stypy_type_store = module_type_store
    interp.stypy_function_name = 'interp'
    interp.stypy_param_names_list = ['x', 'xp', 'fp', 'left', 'right', 'period']
    interp.stypy_varargs_param_name = None
    interp.stypy_kwargs_param_name = None
    interp.stypy_call_defaults = defaults
    interp.stypy_call_varargs = varargs
    interp.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'interp', ['x', 'xp', 'fp', 'left', 'right', 'period'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'interp', localization, ['x', 'xp', 'fp', 'left', 'right', 'period'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'interp(...)' code ##################

    str_110200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1656, (-1)), 'str', "\n    One-dimensional linear interpolation.\n\n    Returns the one-dimensional piecewise linear interpolant to a function\n    with given values at discrete data-points.\n\n    Parameters\n    ----------\n    x : array_like\n        The x-coordinates of the interpolated values.\n\n    xp : 1-D sequence of floats\n        The x-coordinates of the data points, must be increasing if argument\n        `period` is not specified. Otherwise, `xp` is internally sorted after\n        normalizing the periodic boundaries with ``xp = xp % period``.\n\n    fp : 1-D sequence of floats\n        The y-coordinates of the data points, same length as `xp`.\n\n    left : float, optional\n        Value to return for `x < xp[0]`, default is `fp[0]`.\n\n    right : float, optional\n        Value to return for `x > xp[-1]`, default is `fp[-1]`.\n\n    period : None or float, optional\n        A period for the x-coordinates. This parameter allows the proper\n        interpolation of angular x-coordinates. Parameters `left` and `right`\n        are ignored if `period` is specified.\n\n        .. versionadded:: 1.10.0\n\n    Returns\n    -------\n    y : float or ndarray\n        The interpolated values, same shape as `x`.\n\n    Raises\n    ------\n    ValueError\n        If `xp` and `fp` have different length\n        If `xp` or `fp` are not 1-D sequences\n        If `period == 0`\n\n    Notes\n    -----\n    Does not check that the x-coordinate sequence `xp` is increasing.\n    If `xp` is not increasing, the results are nonsense.\n    A simple check for increasing is::\n\n        np.all(np.diff(xp) > 0)\n\n    Examples\n    --------\n    >>> xp = [1, 2, 3]\n    >>> fp = [3, 2, 0]\n    >>> np.interp(2.5, xp, fp)\n    1.0\n    >>> np.interp([0, 1, 1.5, 2.72, 3.14], xp, fp)\n    array([ 3. ,  3. ,  2.5 ,  0.56,  0. ])\n    >>> UNDEF = -99.0\n    >>> np.interp(3.14, xp, fp, right=UNDEF)\n    -99.0\n\n    Plot an interpolant to the sine function:\n\n    >>> x = np.linspace(0, 2*np.pi, 10)\n    >>> y = np.sin(x)\n    >>> xvals = np.linspace(0, 2*np.pi, 50)\n    >>> yinterp = np.interp(xvals, x, y)\n    >>> import matplotlib.pyplot as plt\n    >>> plt.plot(x, y, 'o')\n    [<matplotlib.lines.Line2D object at 0x...>]\n    >>> plt.plot(xvals, yinterp, '-x')\n    [<matplotlib.lines.Line2D object at 0x...>]\n    >>> plt.show()\n\n    Interpolation with periodic x-coordinates:\n\n    >>> x = [-180, -170, -185, 185, -10, -5, 0, 365]\n    >>> xp = [190, -190, 350, -350]\n    >>> fp = [5, 10, 3, 4]\n    >>> np.interp(x, xp, fp, period=360)\n    array([7.5, 5., 8.75, 6.25, 3., 3.25, 3.5, 3.75])\n\n    ")
    
    # Type idiom detected: calculating its left and rigth part (line 1657)
    # Getting the type of 'period' (line 1657)
    period_110201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1657, 7), 'period')
    # Getting the type of 'None' (line 1657)
    None_110202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1657, 17), 'None')
    
    (may_be_110203, more_types_in_union_110204) = may_be_none(period_110201, None_110202)

    if may_be_110203:

        if more_types_in_union_110204:
            # Runtime conditional SSA (line 1657)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        
        # Call to isinstance(...): (line 1658)
        # Processing the call arguments (line 1658)
        # Getting the type of 'x' (line 1658)
        x_110206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1658, 22), 'x', False)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1658)
        tuple_110207 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1658, 26), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1658)
        # Adding element type (line 1658)
        # Getting the type of 'float' (line 1658)
        float_110208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1658, 26), 'float', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1658, 26), tuple_110207, float_110208)
        # Adding element type (line 1658)
        # Getting the type of 'int' (line 1658)
        int_110209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1658, 33), 'int', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1658, 26), tuple_110207, int_110209)
        # Adding element type (line 1658)
        # Getting the type of 'number' (line 1658)
        number_110210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1658, 38), 'number', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1658, 26), tuple_110207, number_110210)
        
        # Processing the call keyword arguments (line 1658)
        kwargs_110211 = {}
        # Getting the type of 'isinstance' (line 1658)
        isinstance_110205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1658, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1658)
        isinstance_call_result_110212 = invoke(stypy.reporting.localization.Localization(__file__, 1658, 11), isinstance_110205, *[x_110206, tuple_110207], **kwargs_110211)
        
        # Testing the type of an if condition (line 1658)
        if_condition_110213 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1658, 8), isinstance_call_result_110212)
        # Assigning a type to the variable 'if_condition_110213' (line 1658)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1658, 8), 'if_condition_110213', if_condition_110213)
        # SSA begins for if statement (line 1658)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to item(...): (line 1659)
        # Processing the call keyword arguments (line 1659)
        kwargs_110224 = {}
        
        # Call to compiled_interp(...): (line 1659)
        # Processing the call arguments (line 1659)
        
        # Obtaining an instance of the builtin type 'list' (line 1659)
        list_110215 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1659, 35), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1659)
        # Adding element type (line 1659)
        # Getting the type of 'x' (line 1659)
        x_110216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1659, 36), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1659, 35), list_110215, x_110216)
        
        # Getting the type of 'xp' (line 1659)
        xp_110217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1659, 40), 'xp', False)
        # Getting the type of 'fp' (line 1659)
        fp_110218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1659, 44), 'fp', False)
        # Getting the type of 'left' (line 1659)
        left_110219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1659, 48), 'left', False)
        # Getting the type of 'right' (line 1659)
        right_110220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1659, 54), 'right', False)
        # Processing the call keyword arguments (line 1659)
        kwargs_110221 = {}
        # Getting the type of 'compiled_interp' (line 1659)
        compiled_interp_110214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1659, 19), 'compiled_interp', False)
        # Calling compiled_interp(args, kwargs) (line 1659)
        compiled_interp_call_result_110222 = invoke(stypy.reporting.localization.Localization(__file__, 1659, 19), compiled_interp_110214, *[list_110215, xp_110217, fp_110218, left_110219, right_110220], **kwargs_110221)
        
        # Obtaining the member 'item' of a type (line 1659)
        item_110223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1659, 19), compiled_interp_call_result_110222, 'item')
        # Calling item(args, kwargs) (line 1659)
        item_call_result_110225 = invoke(stypy.reporting.localization.Localization(__file__, 1659, 19), item_110223, *[], **kwargs_110224)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1659)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1659, 12), 'stypy_return_type', item_call_result_110225)
        # SSA branch for the else part of an if statement (line 1658)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Call to isinstance(...): (line 1660)
        # Processing the call arguments (line 1660)
        # Getting the type of 'x' (line 1660)
        x_110227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 24), 'x', False)
        # Getting the type of 'np' (line 1660)
        np_110228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 27), 'np', False)
        # Obtaining the member 'ndarray' of a type (line 1660)
        ndarray_110229 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1660, 27), np_110228, 'ndarray')
        # Processing the call keyword arguments (line 1660)
        kwargs_110230 = {}
        # Getting the type of 'isinstance' (line 1660)
        isinstance_110226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 13), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1660)
        isinstance_call_result_110231 = invoke(stypy.reporting.localization.Localization(__file__, 1660, 13), isinstance_110226, *[x_110227, ndarray_110229], **kwargs_110230)
        
        
        # Getting the type of 'x' (line 1660)
        x_110232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 43), 'x')
        # Obtaining the member 'ndim' of a type (line 1660)
        ndim_110233 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1660, 43), x_110232, 'ndim')
        int_110234 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1660, 53), 'int')
        # Applying the binary operator '==' (line 1660)
        result_eq_110235 = python_operator(stypy.reporting.localization.Localization(__file__, 1660, 43), '==', ndim_110233, int_110234)
        
        # Applying the binary operator 'and' (line 1660)
        result_and_keyword_110236 = python_operator(stypy.reporting.localization.Localization(__file__, 1660, 13), 'and', isinstance_call_result_110231, result_eq_110235)
        
        # Testing the type of an if condition (line 1660)
        if_condition_110237 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1660, 13), result_and_keyword_110236)
        # Assigning a type to the variable 'if_condition_110237' (line 1660)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1660, 13), 'if_condition_110237', if_condition_110237)
        # SSA begins for if statement (line 1660)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to item(...): (line 1661)
        # Processing the call keyword arguments (line 1661)
        kwargs_110248 = {}
        
        # Call to compiled_interp(...): (line 1661)
        # Processing the call arguments (line 1661)
        
        # Obtaining an instance of the builtin type 'list' (line 1661)
        list_110239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1661, 35), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1661)
        # Adding element type (line 1661)
        # Getting the type of 'x' (line 1661)
        x_110240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 36), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1661, 35), list_110239, x_110240)
        
        # Getting the type of 'xp' (line 1661)
        xp_110241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 40), 'xp', False)
        # Getting the type of 'fp' (line 1661)
        fp_110242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 44), 'fp', False)
        # Getting the type of 'left' (line 1661)
        left_110243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 48), 'left', False)
        # Getting the type of 'right' (line 1661)
        right_110244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 54), 'right', False)
        # Processing the call keyword arguments (line 1661)
        kwargs_110245 = {}
        # Getting the type of 'compiled_interp' (line 1661)
        compiled_interp_110238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 19), 'compiled_interp', False)
        # Calling compiled_interp(args, kwargs) (line 1661)
        compiled_interp_call_result_110246 = invoke(stypy.reporting.localization.Localization(__file__, 1661, 19), compiled_interp_110238, *[list_110239, xp_110241, fp_110242, left_110243, right_110244], **kwargs_110245)
        
        # Obtaining the member 'item' of a type (line 1661)
        item_110247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1661, 19), compiled_interp_call_result_110246, 'item')
        # Calling item(args, kwargs) (line 1661)
        item_call_result_110249 = invoke(stypy.reporting.localization.Localization(__file__, 1661, 19), item_110247, *[], **kwargs_110248)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1661)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1661, 12), 'stypy_return_type', item_call_result_110249)
        # SSA branch for the else part of an if statement (line 1660)
        module_type_store.open_ssa_branch('else')
        
        # Call to compiled_interp(...): (line 1663)
        # Processing the call arguments (line 1663)
        # Getting the type of 'x' (line 1663)
        x_110251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 35), 'x', False)
        # Getting the type of 'xp' (line 1663)
        xp_110252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 38), 'xp', False)
        # Getting the type of 'fp' (line 1663)
        fp_110253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 42), 'fp', False)
        # Getting the type of 'left' (line 1663)
        left_110254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 46), 'left', False)
        # Getting the type of 'right' (line 1663)
        right_110255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 52), 'right', False)
        # Processing the call keyword arguments (line 1663)
        kwargs_110256 = {}
        # Getting the type of 'compiled_interp' (line 1663)
        compiled_interp_110250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 19), 'compiled_interp', False)
        # Calling compiled_interp(args, kwargs) (line 1663)
        compiled_interp_call_result_110257 = invoke(stypy.reporting.localization.Localization(__file__, 1663, 19), compiled_interp_110250, *[x_110251, xp_110252, fp_110253, left_110254, right_110255], **kwargs_110256)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1663)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1663, 12), 'stypy_return_type', compiled_interp_call_result_110257)
        # SSA join for if statement (line 1660)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1658)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_110204:
            # Runtime conditional SSA for else branch (line 1657)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_110203) or more_types_in_union_110204):
        
        
        # Getting the type of 'period' (line 1665)
        period_110258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1665, 11), 'period')
        int_110259 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1665, 21), 'int')
        # Applying the binary operator '==' (line 1665)
        result_eq_110260 = python_operator(stypy.reporting.localization.Localization(__file__, 1665, 11), '==', period_110258, int_110259)
        
        # Testing the type of an if condition (line 1665)
        if_condition_110261 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1665, 8), result_eq_110260)
        # Assigning a type to the variable 'if_condition_110261' (line 1665)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1665, 8), 'if_condition_110261', if_condition_110261)
        # SSA begins for if statement (line 1665)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1666)
        # Processing the call arguments (line 1666)
        str_110263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1666, 29), 'str', 'period must be a non-zero value')
        # Processing the call keyword arguments (line 1666)
        kwargs_110264 = {}
        # Getting the type of 'ValueError' (line 1666)
        ValueError_110262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1666, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1666)
        ValueError_call_result_110265 = invoke(stypy.reporting.localization.Localization(__file__, 1666, 18), ValueError_110262, *[str_110263], **kwargs_110264)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1666, 12), ValueError_call_result_110265, 'raise parameter', BaseException)
        # SSA join for if statement (line 1665)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1667):
        
        # Assigning a Call to a Name (line 1667):
        
        # Call to abs(...): (line 1667)
        # Processing the call arguments (line 1667)
        # Getting the type of 'period' (line 1667)
        period_110267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 21), 'period', False)
        # Processing the call keyword arguments (line 1667)
        kwargs_110268 = {}
        # Getting the type of 'abs' (line 1667)
        abs_110266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 17), 'abs', False)
        # Calling abs(args, kwargs) (line 1667)
        abs_call_result_110269 = invoke(stypy.reporting.localization.Localization(__file__, 1667, 17), abs_110266, *[period_110267], **kwargs_110268)
        
        # Assigning a type to the variable 'period' (line 1667)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1667, 8), 'period', abs_call_result_110269)
        
        # Assigning a Name to a Name (line 1668):
        
        # Assigning a Name to a Name (line 1668):
        # Getting the type of 'None' (line 1668)
        None_110270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 15), 'None')
        # Assigning a type to the variable 'left' (line 1668)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1668, 8), 'left', None_110270)
        
        # Assigning a Name to a Name (line 1669):
        
        # Assigning a Name to a Name (line 1669):
        # Getting the type of 'None' (line 1669)
        None_110271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1669, 16), 'None')
        # Assigning a type to the variable 'right' (line 1669)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1669, 8), 'right', None_110271)
        
        # Assigning a Name to a Name (line 1670):
        
        # Assigning a Name to a Name (line 1670):
        # Getting the type of 'True' (line 1670)
        True_110272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 23), 'True')
        # Assigning a type to the variable 'return_array' (line 1670)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1670, 8), 'return_array', True_110272)
        
        
        # Call to isinstance(...): (line 1671)
        # Processing the call arguments (line 1671)
        # Getting the type of 'x' (line 1671)
        x_110274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 22), 'x', False)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1671)
        tuple_110275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1671, 26), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1671)
        # Adding element type (line 1671)
        # Getting the type of 'float' (line 1671)
        float_110276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 26), 'float', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1671, 26), tuple_110275, float_110276)
        # Adding element type (line 1671)
        # Getting the type of 'int' (line 1671)
        int_110277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 33), 'int', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1671, 26), tuple_110275, int_110277)
        # Adding element type (line 1671)
        # Getting the type of 'number' (line 1671)
        number_110278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 38), 'number', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1671, 26), tuple_110275, number_110278)
        
        # Processing the call keyword arguments (line 1671)
        kwargs_110279 = {}
        # Getting the type of 'isinstance' (line 1671)
        isinstance_110273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1671)
        isinstance_call_result_110280 = invoke(stypy.reporting.localization.Localization(__file__, 1671, 11), isinstance_110273, *[x_110274, tuple_110275], **kwargs_110279)
        
        # Testing the type of an if condition (line 1671)
        if_condition_110281 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1671, 8), isinstance_call_result_110280)
        # Assigning a type to the variable 'if_condition_110281' (line 1671)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1671, 8), 'if_condition_110281', if_condition_110281)
        # SSA begins for if statement (line 1671)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1672):
        
        # Assigning a Name to a Name (line 1672):
        # Getting the type of 'False' (line 1672)
        False_110282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1672, 27), 'False')
        # Assigning a type to the variable 'return_array' (line 1672)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1672, 12), 'return_array', False_110282)
        
        # Assigning a List to a Name (line 1673):
        
        # Assigning a List to a Name (line 1673):
        
        # Obtaining an instance of the builtin type 'list' (line 1673)
        list_110283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1673, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1673)
        # Adding element type (line 1673)
        # Getting the type of 'x' (line 1673)
        x_110284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 17), 'x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1673, 16), list_110283, x_110284)
        
        # Assigning a type to the variable 'x' (line 1673)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1673, 12), 'x', list_110283)
        # SSA join for if statement (line 1671)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1674):
        
        # Assigning a Call to a Name (line 1674):
        
        # Call to asarray(...): (line 1674)
        # Processing the call arguments (line 1674)
        # Getting the type of 'x' (line 1674)
        x_110287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 23), 'x', False)
        # Processing the call keyword arguments (line 1674)
        # Getting the type of 'np' (line 1674)
        np_110288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 32), 'np', False)
        # Obtaining the member 'float64' of a type (line 1674)
        float64_110289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1674, 32), np_110288, 'float64')
        keyword_110290 = float64_110289
        kwargs_110291 = {'dtype': keyword_110290}
        # Getting the type of 'np' (line 1674)
        np_110285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 12), 'np', False)
        # Obtaining the member 'asarray' of a type (line 1674)
        asarray_110286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1674, 12), np_110285, 'asarray')
        # Calling asarray(args, kwargs) (line 1674)
        asarray_call_result_110292 = invoke(stypy.reporting.localization.Localization(__file__, 1674, 12), asarray_110286, *[x_110287], **kwargs_110291)
        
        # Assigning a type to the variable 'x' (line 1674)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1674, 8), 'x', asarray_call_result_110292)
        
        # Assigning a Call to a Name (line 1675):
        
        # Assigning a Call to a Name (line 1675):
        
        # Call to asarray(...): (line 1675)
        # Processing the call arguments (line 1675)
        # Getting the type of 'xp' (line 1675)
        xp_110295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 24), 'xp', False)
        # Processing the call keyword arguments (line 1675)
        # Getting the type of 'np' (line 1675)
        np_110296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 34), 'np', False)
        # Obtaining the member 'float64' of a type (line 1675)
        float64_110297 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1675, 34), np_110296, 'float64')
        keyword_110298 = float64_110297
        kwargs_110299 = {'dtype': keyword_110298}
        # Getting the type of 'np' (line 1675)
        np_110293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 13), 'np', False)
        # Obtaining the member 'asarray' of a type (line 1675)
        asarray_110294 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1675, 13), np_110293, 'asarray')
        # Calling asarray(args, kwargs) (line 1675)
        asarray_call_result_110300 = invoke(stypy.reporting.localization.Localization(__file__, 1675, 13), asarray_110294, *[xp_110295], **kwargs_110299)
        
        # Assigning a type to the variable 'xp' (line 1675)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1675, 8), 'xp', asarray_call_result_110300)
        
        # Assigning a Call to a Name (line 1676):
        
        # Assigning a Call to a Name (line 1676):
        
        # Call to asarray(...): (line 1676)
        # Processing the call arguments (line 1676)
        # Getting the type of 'fp' (line 1676)
        fp_110303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 24), 'fp', False)
        # Processing the call keyword arguments (line 1676)
        # Getting the type of 'np' (line 1676)
        np_110304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 34), 'np', False)
        # Obtaining the member 'float64' of a type (line 1676)
        float64_110305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1676, 34), np_110304, 'float64')
        keyword_110306 = float64_110305
        kwargs_110307 = {'dtype': keyword_110306}
        # Getting the type of 'np' (line 1676)
        np_110301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 13), 'np', False)
        # Obtaining the member 'asarray' of a type (line 1676)
        asarray_110302 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1676, 13), np_110301, 'asarray')
        # Calling asarray(args, kwargs) (line 1676)
        asarray_call_result_110308 = invoke(stypy.reporting.localization.Localization(__file__, 1676, 13), asarray_110302, *[fp_110303], **kwargs_110307)
        
        # Assigning a type to the variable 'fp' (line 1676)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1676, 8), 'fp', asarray_call_result_110308)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'xp' (line 1677)
        xp_110309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 11), 'xp')
        # Obtaining the member 'ndim' of a type (line 1677)
        ndim_110310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1677, 11), xp_110309, 'ndim')
        int_110311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1677, 22), 'int')
        # Applying the binary operator '!=' (line 1677)
        result_ne_110312 = python_operator(stypy.reporting.localization.Localization(__file__, 1677, 11), '!=', ndim_110310, int_110311)
        
        
        # Getting the type of 'fp' (line 1677)
        fp_110313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 27), 'fp')
        # Obtaining the member 'ndim' of a type (line 1677)
        ndim_110314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1677, 27), fp_110313, 'ndim')
        int_110315 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1677, 38), 'int')
        # Applying the binary operator '!=' (line 1677)
        result_ne_110316 = python_operator(stypy.reporting.localization.Localization(__file__, 1677, 27), '!=', ndim_110314, int_110315)
        
        # Applying the binary operator 'or' (line 1677)
        result_or_keyword_110317 = python_operator(stypy.reporting.localization.Localization(__file__, 1677, 11), 'or', result_ne_110312, result_ne_110316)
        
        # Testing the type of an if condition (line 1677)
        if_condition_110318 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1677, 8), result_or_keyword_110317)
        # Assigning a type to the variable 'if_condition_110318' (line 1677)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1677, 8), 'if_condition_110318', if_condition_110318)
        # SSA begins for if statement (line 1677)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1678)
        # Processing the call arguments (line 1678)
        str_110320 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1678, 29), 'str', 'Data points must be 1-D sequences')
        # Processing the call keyword arguments (line 1678)
        kwargs_110321 = {}
        # Getting the type of 'ValueError' (line 1678)
        ValueError_110319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1678)
        ValueError_call_result_110322 = invoke(stypy.reporting.localization.Localization(__file__, 1678, 18), ValueError_110319, *[str_110320], **kwargs_110321)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1678, 12), ValueError_call_result_110322, 'raise parameter', BaseException)
        # SSA join for if statement (line 1677)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Obtaining the type of the subscript
        int_110323 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1679, 20), 'int')
        # Getting the type of 'xp' (line 1679)
        xp_110324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1679, 11), 'xp')
        # Obtaining the member 'shape' of a type (line 1679)
        shape_110325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1679, 11), xp_110324, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1679)
        getitem___110326 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1679, 11), shape_110325, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1679)
        subscript_call_result_110327 = invoke(stypy.reporting.localization.Localization(__file__, 1679, 11), getitem___110326, int_110323)
        
        
        # Obtaining the type of the subscript
        int_110328 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1679, 35), 'int')
        # Getting the type of 'fp' (line 1679)
        fp_110329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1679, 26), 'fp')
        # Obtaining the member 'shape' of a type (line 1679)
        shape_110330 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1679, 26), fp_110329, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1679)
        getitem___110331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1679, 26), shape_110330, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1679)
        subscript_call_result_110332 = invoke(stypy.reporting.localization.Localization(__file__, 1679, 26), getitem___110331, int_110328)
        
        # Applying the binary operator '!=' (line 1679)
        result_ne_110333 = python_operator(stypy.reporting.localization.Localization(__file__, 1679, 11), '!=', subscript_call_result_110327, subscript_call_result_110332)
        
        # Testing the type of an if condition (line 1679)
        if_condition_110334 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1679, 8), result_ne_110333)
        # Assigning a type to the variable 'if_condition_110334' (line 1679)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1679, 8), 'if_condition_110334', if_condition_110334)
        # SSA begins for if statement (line 1679)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1680)
        # Processing the call arguments (line 1680)
        str_110336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1680, 29), 'str', 'fp and xp are not of the same length')
        # Processing the call keyword arguments (line 1680)
        kwargs_110337 = {}
        # Getting the type of 'ValueError' (line 1680)
        ValueError_110335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1680)
        ValueError_call_result_110338 = invoke(stypy.reporting.localization.Localization(__file__, 1680, 18), ValueError_110335, *[str_110336], **kwargs_110337)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1680, 12), ValueError_call_result_110338, 'raise parameter', BaseException)
        # SSA join for if statement (line 1679)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 1682):
        
        # Assigning a BinOp to a Name (line 1682):
        # Getting the type of 'x' (line 1682)
        x_110339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 12), 'x')
        # Getting the type of 'period' (line 1682)
        period_110340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 16), 'period')
        # Applying the binary operator '%' (line 1682)
        result_mod_110341 = python_operator(stypy.reporting.localization.Localization(__file__, 1682, 12), '%', x_110339, period_110340)
        
        # Assigning a type to the variable 'x' (line 1682)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1682, 8), 'x', result_mod_110341)
        
        # Assigning a BinOp to a Name (line 1683):
        
        # Assigning a BinOp to a Name (line 1683):
        # Getting the type of 'xp' (line 1683)
        xp_110342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 13), 'xp')
        # Getting the type of 'period' (line 1683)
        period_110343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 18), 'period')
        # Applying the binary operator '%' (line 1683)
        result_mod_110344 = python_operator(stypy.reporting.localization.Localization(__file__, 1683, 13), '%', xp_110342, period_110343)
        
        # Assigning a type to the variable 'xp' (line 1683)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1683, 8), 'xp', result_mod_110344)
        
        # Assigning a Call to a Name (line 1684):
        
        # Assigning a Call to a Name (line 1684):
        
        # Call to argsort(...): (line 1684)
        # Processing the call arguments (line 1684)
        # Getting the type of 'xp' (line 1684)
        xp_110347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1684, 30), 'xp', False)
        # Processing the call keyword arguments (line 1684)
        kwargs_110348 = {}
        # Getting the type of 'np' (line 1684)
        np_110345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1684, 19), 'np', False)
        # Obtaining the member 'argsort' of a type (line 1684)
        argsort_110346 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1684, 19), np_110345, 'argsort')
        # Calling argsort(args, kwargs) (line 1684)
        argsort_call_result_110349 = invoke(stypy.reporting.localization.Localization(__file__, 1684, 19), argsort_110346, *[xp_110347], **kwargs_110348)
        
        # Assigning a type to the variable 'asort_xp' (line 1684)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1684, 8), 'asort_xp', argsort_call_result_110349)
        
        # Assigning a Subscript to a Name (line 1685):
        
        # Assigning a Subscript to a Name (line 1685):
        
        # Obtaining the type of the subscript
        # Getting the type of 'asort_xp' (line 1685)
        asort_xp_110350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1685, 16), 'asort_xp')
        # Getting the type of 'xp' (line 1685)
        xp_110351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1685, 13), 'xp')
        # Obtaining the member '__getitem__' of a type (line 1685)
        getitem___110352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1685, 13), xp_110351, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1685)
        subscript_call_result_110353 = invoke(stypy.reporting.localization.Localization(__file__, 1685, 13), getitem___110352, asort_xp_110350)
        
        # Assigning a type to the variable 'xp' (line 1685)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1685, 8), 'xp', subscript_call_result_110353)
        
        # Assigning a Subscript to a Name (line 1686):
        
        # Assigning a Subscript to a Name (line 1686):
        
        # Obtaining the type of the subscript
        # Getting the type of 'asort_xp' (line 1686)
        asort_xp_110354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 16), 'asort_xp')
        # Getting the type of 'fp' (line 1686)
        fp_110355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 13), 'fp')
        # Obtaining the member '__getitem__' of a type (line 1686)
        getitem___110356 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1686, 13), fp_110355, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1686)
        subscript_call_result_110357 = invoke(stypy.reporting.localization.Localization(__file__, 1686, 13), getitem___110356, asort_xp_110354)
        
        # Assigning a type to the variable 'fp' (line 1686)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1686, 8), 'fp', subscript_call_result_110357)
        
        # Assigning a Call to a Name (line 1687):
        
        # Assigning a Call to a Name (line 1687):
        
        # Call to concatenate(...): (line 1687)
        # Processing the call arguments (line 1687)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1687)
        tuple_110360 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1687, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1687)
        # Adding element type (line 1687)
        
        # Obtaining the type of the subscript
        int_110361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1687, 32), 'int')
        slice_110362 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1687, 29), int_110361, None, None)
        # Getting the type of 'xp' (line 1687)
        xp_110363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 29), 'xp', False)
        # Obtaining the member '__getitem__' of a type (line 1687)
        getitem___110364 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1687, 29), xp_110363, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1687)
        subscript_call_result_110365 = invoke(stypy.reporting.localization.Localization(__file__, 1687, 29), getitem___110364, slice_110362)
        
        # Getting the type of 'period' (line 1687)
        period_110366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 37), 'period', False)
        # Applying the binary operator '-' (line 1687)
        result_sub_110367 = python_operator(stypy.reporting.localization.Localization(__file__, 1687, 29), '-', subscript_call_result_110365, period_110366)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1687, 29), tuple_110360, result_sub_110367)
        # Adding element type (line 1687)
        # Getting the type of 'xp' (line 1687)
        xp_110368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 45), 'xp', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1687, 29), tuple_110360, xp_110368)
        # Adding element type (line 1687)
        
        # Obtaining the type of the subscript
        int_110369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1687, 52), 'int')
        int_110370 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1687, 54), 'int')
        slice_110371 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1687, 49), int_110369, int_110370, None)
        # Getting the type of 'xp' (line 1687)
        xp_110372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 49), 'xp', False)
        # Obtaining the member '__getitem__' of a type (line 1687)
        getitem___110373 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1687, 49), xp_110372, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1687)
        subscript_call_result_110374 = invoke(stypy.reporting.localization.Localization(__file__, 1687, 49), getitem___110373, slice_110371)
        
        # Getting the type of 'period' (line 1687)
        period_110375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 57), 'period', False)
        # Applying the binary operator '+' (line 1687)
        result_add_110376 = python_operator(stypy.reporting.localization.Localization(__file__, 1687, 49), '+', subscript_call_result_110374, period_110375)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1687, 29), tuple_110360, result_add_110376)
        
        # Processing the call keyword arguments (line 1687)
        kwargs_110377 = {}
        # Getting the type of 'np' (line 1687)
        np_110358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 13), 'np', False)
        # Obtaining the member 'concatenate' of a type (line 1687)
        concatenate_110359 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1687, 13), np_110358, 'concatenate')
        # Calling concatenate(args, kwargs) (line 1687)
        concatenate_call_result_110378 = invoke(stypy.reporting.localization.Localization(__file__, 1687, 13), concatenate_110359, *[tuple_110360], **kwargs_110377)
        
        # Assigning a type to the variable 'xp' (line 1687)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1687, 8), 'xp', concatenate_call_result_110378)
        
        # Assigning a Call to a Name (line 1688):
        
        # Assigning a Call to a Name (line 1688):
        
        # Call to concatenate(...): (line 1688)
        # Processing the call arguments (line 1688)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1688)
        tuple_110381 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1688, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1688)
        # Adding element type (line 1688)
        
        # Obtaining the type of the subscript
        int_110382 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1688, 32), 'int')
        slice_110383 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1688, 29), int_110382, None, None)
        # Getting the type of 'fp' (line 1688)
        fp_110384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1688, 29), 'fp', False)
        # Obtaining the member '__getitem__' of a type (line 1688)
        getitem___110385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1688, 29), fp_110384, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1688)
        subscript_call_result_110386 = invoke(stypy.reporting.localization.Localization(__file__, 1688, 29), getitem___110385, slice_110383)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1688, 29), tuple_110381, subscript_call_result_110386)
        # Adding element type (line 1688)
        # Getting the type of 'fp' (line 1688)
        fp_110387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1688, 38), 'fp', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1688, 29), tuple_110381, fp_110387)
        # Adding element type (line 1688)
        
        # Obtaining the type of the subscript
        int_110388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1688, 45), 'int')
        int_110389 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1688, 47), 'int')
        slice_110390 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1688, 42), int_110388, int_110389, None)
        # Getting the type of 'fp' (line 1688)
        fp_110391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1688, 42), 'fp', False)
        # Obtaining the member '__getitem__' of a type (line 1688)
        getitem___110392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1688, 42), fp_110391, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1688)
        subscript_call_result_110393 = invoke(stypy.reporting.localization.Localization(__file__, 1688, 42), getitem___110392, slice_110390)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1688, 29), tuple_110381, subscript_call_result_110393)
        
        # Processing the call keyword arguments (line 1688)
        kwargs_110394 = {}
        # Getting the type of 'np' (line 1688)
        np_110379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1688, 13), 'np', False)
        # Obtaining the member 'concatenate' of a type (line 1688)
        concatenate_110380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1688, 13), np_110379, 'concatenate')
        # Calling concatenate(args, kwargs) (line 1688)
        concatenate_call_result_110395 = invoke(stypy.reporting.localization.Localization(__file__, 1688, 13), concatenate_110380, *[tuple_110381], **kwargs_110394)
        
        # Assigning a type to the variable 'fp' (line 1688)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1688, 8), 'fp', concatenate_call_result_110395)
        
        # Getting the type of 'return_array' (line 1689)
        return_array_110396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1689, 11), 'return_array')
        # Testing the type of an if condition (line 1689)
        if_condition_110397 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1689, 8), return_array_110396)
        # Assigning a type to the variable 'if_condition_110397' (line 1689)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1689, 8), 'if_condition_110397', if_condition_110397)
        # SSA begins for if statement (line 1689)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to compiled_interp(...): (line 1690)
        # Processing the call arguments (line 1690)
        # Getting the type of 'x' (line 1690)
        x_110399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 35), 'x', False)
        # Getting the type of 'xp' (line 1690)
        xp_110400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 38), 'xp', False)
        # Getting the type of 'fp' (line 1690)
        fp_110401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 42), 'fp', False)
        # Getting the type of 'left' (line 1690)
        left_110402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 46), 'left', False)
        # Getting the type of 'right' (line 1690)
        right_110403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 52), 'right', False)
        # Processing the call keyword arguments (line 1690)
        kwargs_110404 = {}
        # Getting the type of 'compiled_interp' (line 1690)
        compiled_interp_110398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 19), 'compiled_interp', False)
        # Calling compiled_interp(args, kwargs) (line 1690)
        compiled_interp_call_result_110405 = invoke(stypy.reporting.localization.Localization(__file__, 1690, 19), compiled_interp_110398, *[x_110399, xp_110400, fp_110401, left_110402, right_110403], **kwargs_110404)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1690)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1690, 12), 'stypy_return_type', compiled_interp_call_result_110405)
        # SSA branch for the else part of an if statement (line 1689)
        module_type_store.open_ssa_branch('else')
        
        # Call to item(...): (line 1692)
        # Processing the call keyword arguments (line 1692)
        kwargs_110415 = {}
        
        # Call to compiled_interp(...): (line 1692)
        # Processing the call arguments (line 1692)
        # Getting the type of 'x' (line 1692)
        x_110407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 35), 'x', False)
        # Getting the type of 'xp' (line 1692)
        xp_110408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 38), 'xp', False)
        # Getting the type of 'fp' (line 1692)
        fp_110409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 42), 'fp', False)
        # Getting the type of 'left' (line 1692)
        left_110410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 46), 'left', False)
        # Getting the type of 'right' (line 1692)
        right_110411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 52), 'right', False)
        # Processing the call keyword arguments (line 1692)
        kwargs_110412 = {}
        # Getting the type of 'compiled_interp' (line 1692)
        compiled_interp_110406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 19), 'compiled_interp', False)
        # Calling compiled_interp(args, kwargs) (line 1692)
        compiled_interp_call_result_110413 = invoke(stypy.reporting.localization.Localization(__file__, 1692, 19), compiled_interp_110406, *[x_110407, xp_110408, fp_110409, left_110410, right_110411], **kwargs_110412)
        
        # Obtaining the member 'item' of a type (line 1692)
        item_110414 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1692, 19), compiled_interp_call_result_110413, 'item')
        # Calling item(args, kwargs) (line 1692)
        item_call_result_110416 = invoke(stypy.reporting.localization.Localization(__file__, 1692, 19), item_110414, *[], **kwargs_110415)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1692)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1692, 12), 'stypy_return_type', item_call_result_110416)
        # SSA join for if statement (line 1689)
        module_type_store = module_type_store.join_ssa_context()
        

        if (may_be_110203 and more_types_in_union_110204):
            # SSA join for if statement (line 1657)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of 'interp(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'interp' in the type store
    # Getting the type of 'stypy_return_type' (line 1570)
    stypy_return_type_110417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1570, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_110417)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'interp'
    return stypy_return_type_110417

# Assigning a type to the variable 'interp' (line 1570)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1570, 0), 'interp', interp)

@norecursion
def angle(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_110418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1695, 17), 'int')
    defaults = [int_110418]
    # Create a new context for function 'angle'
    module_type_store = module_type_store.open_function_context('angle', 1695, 0, False)
    
    # Passed parameters checking function
    angle.stypy_localization = localization
    angle.stypy_type_of_self = None
    angle.stypy_type_store = module_type_store
    angle.stypy_function_name = 'angle'
    angle.stypy_param_names_list = ['z', 'deg']
    angle.stypy_varargs_param_name = None
    angle.stypy_kwargs_param_name = None
    angle.stypy_call_defaults = defaults
    angle.stypy_call_varargs = varargs
    angle.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'angle', ['z', 'deg'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'angle', localization, ['z', 'deg'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'angle(...)' code ##################

    str_110419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1726, (-1)), 'str', '\n    Return the angle of the complex argument.\n\n    Parameters\n    ----------\n    z : array_like\n        A complex number or sequence of complex numbers.\n    deg : bool, optional\n        Return angle in degrees if True, radians if False (default).\n\n    Returns\n    -------\n    angle : ndarray or scalar\n        The counterclockwise angle from the positive real axis on\n        the complex plane, with dtype as numpy.float64.\n\n    See Also\n    --------\n    arctan2\n    absolute\n\n\n\n    Examples\n    --------\n    >>> np.angle([1.0, 1.0j, 1+1j])               # in radians\n    array([ 0.        ,  1.57079633,  0.78539816])\n    >>> np.angle(1+1j, deg=True)                  # in degrees\n    45.0\n\n    ')
    
    # Getting the type of 'deg' (line 1727)
    deg_110420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 7), 'deg')
    # Testing the type of an if condition (line 1727)
    if_condition_110421 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1727, 4), deg_110420)
    # Assigning a type to the variable 'if_condition_110421' (line 1727)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1727, 4), 'if_condition_110421', if_condition_110421)
    # SSA begins for if statement (line 1727)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1728):
    
    # Assigning a BinOp to a Name (line 1728):
    int_110422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1728, 15), 'int')
    # Getting the type of 'pi' (line 1728)
    pi_110423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1728, 19), 'pi')
    # Applying the binary operator 'div' (line 1728)
    result_div_110424 = python_operator(stypy.reporting.localization.Localization(__file__, 1728, 15), 'div', int_110422, pi_110423)
    
    # Assigning a type to the variable 'fact' (line 1728)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1728, 8), 'fact', result_div_110424)
    # SSA branch for the else part of an if statement (line 1727)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Num to a Name (line 1730):
    
    # Assigning a Num to a Name (line 1730):
    float_110425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1730, 15), 'float')
    # Assigning a type to the variable 'fact' (line 1730)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1730, 8), 'fact', float_110425)
    # SSA join for if statement (line 1727)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1731):
    
    # Assigning a Call to a Name (line 1731):
    
    # Call to asarray(...): (line 1731)
    # Processing the call arguments (line 1731)
    # Getting the type of 'z' (line 1731)
    z_110427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1731, 16), 'z', False)
    # Processing the call keyword arguments (line 1731)
    kwargs_110428 = {}
    # Getting the type of 'asarray' (line 1731)
    asarray_110426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1731, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1731)
    asarray_call_result_110429 = invoke(stypy.reporting.localization.Localization(__file__, 1731, 8), asarray_110426, *[z_110427], **kwargs_110428)
    
    # Assigning a type to the variable 'z' (line 1731)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1731, 4), 'z', asarray_call_result_110429)
    
    
    # Call to issubclass(...): (line 1732)
    # Processing the call arguments (line 1732)
    # Getting the type of 'z' (line 1732)
    z_110431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1732, 19), 'z', False)
    # Obtaining the member 'dtype' of a type (line 1732)
    dtype_110432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1732, 19), z_110431, 'dtype')
    # Obtaining the member 'type' of a type (line 1732)
    type_110433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1732, 19), dtype_110432, 'type')
    # Getting the type of '_nx' (line 1732)
    _nx_110434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1732, 33), '_nx', False)
    # Obtaining the member 'complexfloating' of a type (line 1732)
    complexfloating_110435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1732, 33), _nx_110434, 'complexfloating')
    # Processing the call keyword arguments (line 1732)
    kwargs_110436 = {}
    # Getting the type of 'issubclass' (line 1732)
    issubclass_110430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1732, 8), 'issubclass', False)
    # Calling issubclass(args, kwargs) (line 1732)
    issubclass_call_result_110437 = invoke(stypy.reporting.localization.Localization(__file__, 1732, 8), issubclass_110430, *[type_110433, complexfloating_110435], **kwargs_110436)
    
    # Testing the type of an if condition (line 1732)
    if_condition_110438 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1732, 4), issubclass_call_result_110437)
    # Assigning a type to the variable 'if_condition_110438' (line 1732)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1732, 4), 'if_condition_110438', if_condition_110438)
    # SSA begins for if statement (line 1732)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 1733):
    
    # Assigning a Attribute to a Name (line 1733):
    # Getting the type of 'z' (line 1733)
    z_110439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1733, 16), 'z')
    # Obtaining the member 'imag' of a type (line 1733)
    imag_110440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1733, 16), z_110439, 'imag')
    # Assigning a type to the variable 'zimag' (line 1733)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1733, 8), 'zimag', imag_110440)
    
    # Assigning a Attribute to a Name (line 1734):
    
    # Assigning a Attribute to a Name (line 1734):
    # Getting the type of 'z' (line 1734)
    z_110441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1734, 16), 'z')
    # Obtaining the member 'real' of a type (line 1734)
    real_110442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1734, 16), z_110441, 'real')
    # Assigning a type to the variable 'zreal' (line 1734)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1734, 8), 'zreal', real_110442)
    # SSA branch for the else part of an if statement (line 1732)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Num to a Name (line 1736):
    
    # Assigning a Num to a Name (line 1736):
    int_110443 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1736, 16), 'int')
    # Assigning a type to the variable 'zimag' (line 1736)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1736, 8), 'zimag', int_110443)
    
    # Assigning a Name to a Name (line 1737):
    
    # Assigning a Name to a Name (line 1737):
    # Getting the type of 'z' (line 1737)
    z_110444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 16), 'z')
    # Assigning a type to the variable 'zreal' (line 1737)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1737, 8), 'zreal', z_110444)
    # SSA join for if statement (line 1732)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to arctan2(...): (line 1738)
    # Processing the call arguments (line 1738)
    # Getting the type of 'zimag' (line 1738)
    zimag_110446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 19), 'zimag', False)
    # Getting the type of 'zreal' (line 1738)
    zreal_110447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 26), 'zreal', False)
    # Processing the call keyword arguments (line 1738)
    kwargs_110448 = {}
    # Getting the type of 'arctan2' (line 1738)
    arctan2_110445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 11), 'arctan2', False)
    # Calling arctan2(args, kwargs) (line 1738)
    arctan2_call_result_110449 = invoke(stypy.reporting.localization.Localization(__file__, 1738, 11), arctan2_110445, *[zimag_110446, zreal_110447], **kwargs_110448)
    
    # Getting the type of 'fact' (line 1738)
    fact_110450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 35), 'fact')
    # Applying the binary operator '*' (line 1738)
    result_mul_110451 = python_operator(stypy.reporting.localization.Localization(__file__, 1738, 11), '*', arctan2_call_result_110449, fact_110450)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1738)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1738, 4), 'stypy_return_type', result_mul_110451)
    
    # ################# End of 'angle(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'angle' in the type store
    # Getting the type of 'stypy_return_type' (line 1695)
    stypy_return_type_110452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1695, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_110452)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'angle'
    return stypy_return_type_110452

# Assigning a type to the variable 'angle' (line 1695)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1695, 0), 'angle', angle)

@norecursion
def unwrap(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'pi' (line 1741)
    pi_110453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1741, 22), 'pi')
    int_110454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1741, 31), 'int')
    defaults = [pi_110453, int_110454]
    # Create a new context for function 'unwrap'
    module_type_store = module_type_store.open_function_context('unwrap', 1741, 0, False)
    
    # Passed parameters checking function
    unwrap.stypy_localization = localization
    unwrap.stypy_type_of_self = None
    unwrap.stypy_type_store = module_type_store
    unwrap.stypy_function_name = 'unwrap'
    unwrap.stypy_param_names_list = ['p', 'discont', 'axis']
    unwrap.stypy_varargs_param_name = None
    unwrap.stypy_kwargs_param_name = None
    unwrap.stypy_call_defaults = defaults
    unwrap.stypy_call_varargs = varargs
    unwrap.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'unwrap', ['p', 'discont', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'unwrap', localization, ['p', 'discont', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'unwrap(...)' code ##################

    str_110455 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1781, (-1)), 'str', '\n    Unwrap by changing deltas between values to 2*pi complement.\n\n    Unwrap radian phase `p` by changing absolute jumps greater than\n    `discont` to their 2*pi complement along the given axis.\n\n    Parameters\n    ----------\n    p : array_like\n        Input array.\n    discont : float, optional\n        Maximum discontinuity between values, default is ``pi``.\n    axis : int, optional\n        Axis along which unwrap will operate, default is the last axis.\n\n    Returns\n    -------\n    out : ndarray\n        Output array.\n\n    See Also\n    --------\n    rad2deg, deg2rad\n\n    Notes\n    -----\n    If the discontinuity in `p` is smaller than ``pi``, but larger than\n    `discont`, no unwrapping is done because taking the 2*pi complement\n    would only make the discontinuity larger.\n\n    Examples\n    --------\n    >>> phase = np.linspace(0, np.pi, num=5)\n    >>> phase[3:] += np.pi\n    >>> phase\n    array([ 0.        ,  0.78539816,  1.57079633,  5.49778714,  6.28318531])\n    >>> np.unwrap(phase)\n    array([ 0.        ,  0.78539816,  1.57079633, -0.78539816,  0.        ])\n\n    ')
    
    # Assigning a Call to a Name (line 1782):
    
    # Assigning a Call to a Name (line 1782):
    
    # Call to asarray(...): (line 1782)
    # Processing the call arguments (line 1782)
    # Getting the type of 'p' (line 1782)
    p_110457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1782, 16), 'p', False)
    # Processing the call keyword arguments (line 1782)
    kwargs_110458 = {}
    # Getting the type of 'asarray' (line 1782)
    asarray_110456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1782, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1782)
    asarray_call_result_110459 = invoke(stypy.reporting.localization.Localization(__file__, 1782, 8), asarray_110456, *[p_110457], **kwargs_110458)
    
    # Assigning a type to the variable 'p' (line 1782)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1782, 4), 'p', asarray_call_result_110459)
    
    # Assigning a Call to a Name (line 1783):
    
    # Assigning a Call to a Name (line 1783):
    
    # Call to len(...): (line 1783)
    # Processing the call arguments (line 1783)
    # Getting the type of 'p' (line 1783)
    p_110461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1783, 13), 'p', False)
    # Obtaining the member 'shape' of a type (line 1783)
    shape_110462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1783, 13), p_110461, 'shape')
    # Processing the call keyword arguments (line 1783)
    kwargs_110463 = {}
    # Getting the type of 'len' (line 1783)
    len_110460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1783, 9), 'len', False)
    # Calling len(args, kwargs) (line 1783)
    len_call_result_110464 = invoke(stypy.reporting.localization.Localization(__file__, 1783, 9), len_110460, *[shape_110462], **kwargs_110463)
    
    # Assigning a type to the variable 'nd' (line 1783)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1783, 4), 'nd', len_call_result_110464)
    
    # Assigning a Call to a Name (line 1784):
    
    # Assigning a Call to a Name (line 1784):
    
    # Call to diff(...): (line 1784)
    # Processing the call arguments (line 1784)
    # Getting the type of 'p' (line 1784)
    p_110466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 14), 'p', False)
    # Processing the call keyword arguments (line 1784)
    # Getting the type of 'axis' (line 1784)
    axis_110467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 22), 'axis', False)
    keyword_110468 = axis_110467
    kwargs_110469 = {'axis': keyword_110468}
    # Getting the type of 'diff' (line 1784)
    diff_110465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 9), 'diff', False)
    # Calling diff(args, kwargs) (line 1784)
    diff_call_result_110470 = invoke(stypy.reporting.localization.Localization(__file__, 1784, 9), diff_110465, *[p_110466], **kwargs_110469)
    
    # Assigning a type to the variable 'dd' (line 1784)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1784, 4), 'dd', diff_call_result_110470)
    
    # Assigning a BinOp to a Name (line 1785):
    
    # Assigning a BinOp to a Name (line 1785):
    
    # Obtaining an instance of the builtin type 'list' (line 1785)
    list_110471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1785, 13), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1785)
    # Adding element type (line 1785)
    
    # Call to slice(...): (line 1785)
    # Processing the call arguments (line 1785)
    # Getting the type of 'None' (line 1785)
    None_110473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 20), 'None', False)
    # Getting the type of 'None' (line 1785)
    None_110474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 26), 'None', False)
    # Processing the call keyword arguments (line 1785)
    kwargs_110475 = {}
    # Getting the type of 'slice' (line 1785)
    slice_110472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 14), 'slice', False)
    # Calling slice(args, kwargs) (line 1785)
    slice_call_result_110476 = invoke(stypy.reporting.localization.Localization(__file__, 1785, 14), slice_110472, *[None_110473, None_110474], **kwargs_110475)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1785, 13), list_110471, slice_call_result_110476)
    
    # Getting the type of 'nd' (line 1785)
    nd_110477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 33), 'nd')
    # Applying the binary operator '*' (line 1785)
    result_mul_110478 = python_operator(stypy.reporting.localization.Localization(__file__, 1785, 13), '*', list_110471, nd_110477)
    
    # Assigning a type to the variable 'slice1' (line 1785)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1785, 4), 'slice1', result_mul_110478)
    
    # Assigning a Call to a Subscript (line 1786):
    
    # Assigning a Call to a Subscript (line 1786):
    
    # Call to slice(...): (line 1786)
    # Processing the call arguments (line 1786)
    int_110480 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1786, 25), 'int')
    # Getting the type of 'None' (line 1786)
    None_110481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 28), 'None', False)
    # Processing the call keyword arguments (line 1786)
    kwargs_110482 = {}
    # Getting the type of 'slice' (line 1786)
    slice_110479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 19), 'slice', False)
    # Calling slice(args, kwargs) (line 1786)
    slice_call_result_110483 = invoke(stypy.reporting.localization.Localization(__file__, 1786, 19), slice_110479, *[int_110480, None_110481], **kwargs_110482)
    
    # Getting the type of 'slice1' (line 1786)
    slice1_110484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 4), 'slice1')
    # Getting the type of 'axis' (line 1786)
    axis_110485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 11), 'axis')
    # Storing an element on a container (line 1786)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1786, 4), slice1_110484, (axis_110485, slice_call_result_110483))
    
    # Assigning a BinOp to a Name (line 1787):
    
    # Assigning a BinOp to a Name (line 1787):
    
    # Call to mod(...): (line 1787)
    # Processing the call arguments (line 1787)
    # Getting the type of 'dd' (line 1787)
    dd_110487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1787, 16), 'dd', False)
    # Getting the type of 'pi' (line 1787)
    pi_110488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1787, 21), 'pi', False)
    # Applying the binary operator '+' (line 1787)
    result_add_110489 = python_operator(stypy.reporting.localization.Localization(__file__, 1787, 16), '+', dd_110487, pi_110488)
    
    int_110490 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1787, 25), 'int')
    # Getting the type of 'pi' (line 1787)
    pi_110491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1787, 27), 'pi', False)
    # Applying the binary operator '*' (line 1787)
    result_mul_110492 = python_operator(stypy.reporting.localization.Localization(__file__, 1787, 25), '*', int_110490, pi_110491)
    
    # Processing the call keyword arguments (line 1787)
    kwargs_110493 = {}
    # Getting the type of 'mod' (line 1787)
    mod_110486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1787, 12), 'mod', False)
    # Calling mod(args, kwargs) (line 1787)
    mod_call_result_110494 = invoke(stypy.reporting.localization.Localization(__file__, 1787, 12), mod_110486, *[result_add_110489, result_mul_110492], **kwargs_110493)
    
    # Getting the type of 'pi' (line 1787)
    pi_110495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1787, 33), 'pi')
    # Applying the binary operator '-' (line 1787)
    result_sub_110496 = python_operator(stypy.reporting.localization.Localization(__file__, 1787, 12), '-', mod_call_result_110494, pi_110495)
    
    # Assigning a type to the variable 'ddmod' (line 1787)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1787, 4), 'ddmod', result_sub_110496)
    
    # Call to copyto(...): (line 1788)
    # Processing the call arguments (line 1788)
    # Getting the type of 'ddmod' (line 1788)
    ddmod_110499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 15), 'ddmod', False)
    # Getting the type of 'pi' (line 1788)
    pi_110500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 22), 'pi', False)
    # Processing the call keyword arguments (line 1788)
    
    # Getting the type of 'ddmod' (line 1788)
    ddmod_110501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 33), 'ddmod', False)
    
    # Getting the type of 'pi' (line 1788)
    pi_110502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 43), 'pi', False)
    # Applying the 'usub' unary operator (line 1788)
    result___neg___110503 = python_operator(stypy.reporting.localization.Localization(__file__, 1788, 42), 'usub', pi_110502)
    
    # Applying the binary operator '==' (line 1788)
    result_eq_110504 = python_operator(stypy.reporting.localization.Localization(__file__, 1788, 33), '==', ddmod_110501, result___neg___110503)
    
    
    # Getting the type of 'dd' (line 1788)
    dd_110505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 50), 'dd', False)
    int_110506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1788, 55), 'int')
    # Applying the binary operator '>' (line 1788)
    result_gt_110507 = python_operator(stypy.reporting.localization.Localization(__file__, 1788, 50), '>', dd_110505, int_110506)
    
    # Applying the binary operator '&' (line 1788)
    result_and__110508 = python_operator(stypy.reporting.localization.Localization(__file__, 1788, 32), '&', result_eq_110504, result_gt_110507)
    
    keyword_110509 = result_and__110508
    kwargs_110510 = {'where': keyword_110509}
    # Getting the type of '_nx' (line 1788)
    _nx_110497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 4), '_nx', False)
    # Obtaining the member 'copyto' of a type (line 1788)
    copyto_110498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1788, 4), _nx_110497, 'copyto')
    # Calling copyto(args, kwargs) (line 1788)
    copyto_call_result_110511 = invoke(stypy.reporting.localization.Localization(__file__, 1788, 4), copyto_110498, *[ddmod_110499, pi_110500], **kwargs_110510)
    
    
    # Assigning a BinOp to a Name (line 1789):
    
    # Assigning a BinOp to a Name (line 1789):
    # Getting the type of 'ddmod' (line 1789)
    ddmod_110512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1789, 17), 'ddmod')
    # Getting the type of 'dd' (line 1789)
    dd_110513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1789, 25), 'dd')
    # Applying the binary operator '-' (line 1789)
    result_sub_110514 = python_operator(stypy.reporting.localization.Localization(__file__, 1789, 17), '-', ddmod_110512, dd_110513)
    
    # Assigning a type to the variable 'ph_correct' (line 1789)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1789, 4), 'ph_correct', result_sub_110514)
    
    # Call to copyto(...): (line 1790)
    # Processing the call arguments (line 1790)
    # Getting the type of 'ph_correct' (line 1790)
    ph_correct_110517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1790, 15), 'ph_correct', False)
    int_110518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1790, 27), 'int')
    # Processing the call keyword arguments (line 1790)
    
    
    # Call to abs(...): (line 1790)
    # Processing the call arguments (line 1790)
    # Getting the type of 'dd' (line 1790)
    dd_110520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1790, 40), 'dd', False)
    # Processing the call keyword arguments (line 1790)
    kwargs_110521 = {}
    # Getting the type of 'abs' (line 1790)
    abs_110519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1790, 36), 'abs', False)
    # Calling abs(args, kwargs) (line 1790)
    abs_call_result_110522 = invoke(stypy.reporting.localization.Localization(__file__, 1790, 36), abs_110519, *[dd_110520], **kwargs_110521)
    
    # Getting the type of 'discont' (line 1790)
    discont_110523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1790, 46), 'discont', False)
    # Applying the binary operator '<' (line 1790)
    result_lt_110524 = python_operator(stypy.reporting.localization.Localization(__file__, 1790, 36), '<', abs_call_result_110522, discont_110523)
    
    keyword_110525 = result_lt_110524
    kwargs_110526 = {'where': keyword_110525}
    # Getting the type of '_nx' (line 1790)
    _nx_110515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1790, 4), '_nx', False)
    # Obtaining the member 'copyto' of a type (line 1790)
    copyto_110516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1790, 4), _nx_110515, 'copyto')
    # Calling copyto(args, kwargs) (line 1790)
    copyto_call_result_110527 = invoke(stypy.reporting.localization.Localization(__file__, 1790, 4), copyto_110516, *[ph_correct_110517, int_110518], **kwargs_110526)
    
    
    # Assigning a Call to a Name (line 1791):
    
    # Assigning a Call to a Name (line 1791):
    
    # Call to array(...): (line 1791)
    # Processing the call arguments (line 1791)
    # Getting the type of 'p' (line 1791)
    p_110529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 15), 'p', False)
    # Processing the call keyword arguments (line 1791)
    # Getting the type of 'True' (line 1791)
    True_110530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 23), 'True', False)
    keyword_110531 = True_110530
    str_110532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1791, 35), 'str', 'd')
    keyword_110533 = str_110532
    kwargs_110534 = {'dtype': keyword_110533, 'copy': keyword_110531}
    # Getting the type of 'array' (line 1791)
    array_110528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 9), 'array', False)
    # Calling array(args, kwargs) (line 1791)
    array_call_result_110535 = invoke(stypy.reporting.localization.Localization(__file__, 1791, 9), array_110528, *[p_110529], **kwargs_110534)
    
    # Assigning a type to the variable 'up' (line 1791)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1791, 4), 'up', array_call_result_110535)
    
    # Assigning a BinOp to a Subscript (line 1792):
    
    # Assigning a BinOp to a Subscript (line 1792):
    
    # Obtaining the type of the subscript
    # Getting the type of 'slice1' (line 1792)
    slice1_110536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 19), 'slice1')
    # Getting the type of 'p' (line 1792)
    p_110537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 17), 'p')
    # Obtaining the member '__getitem__' of a type (line 1792)
    getitem___110538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1792, 17), p_110537, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1792)
    subscript_call_result_110539 = invoke(stypy.reporting.localization.Localization(__file__, 1792, 17), getitem___110538, slice1_110536)
    
    
    # Call to cumsum(...): (line 1792)
    # Processing the call arguments (line 1792)
    # Getting the type of 'axis' (line 1792)
    axis_110542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 47), 'axis', False)
    # Processing the call keyword arguments (line 1792)
    kwargs_110543 = {}
    # Getting the type of 'ph_correct' (line 1792)
    ph_correct_110540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 29), 'ph_correct', False)
    # Obtaining the member 'cumsum' of a type (line 1792)
    cumsum_110541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1792, 29), ph_correct_110540, 'cumsum')
    # Calling cumsum(args, kwargs) (line 1792)
    cumsum_call_result_110544 = invoke(stypy.reporting.localization.Localization(__file__, 1792, 29), cumsum_110541, *[axis_110542], **kwargs_110543)
    
    # Applying the binary operator '+' (line 1792)
    result_add_110545 = python_operator(stypy.reporting.localization.Localization(__file__, 1792, 17), '+', subscript_call_result_110539, cumsum_call_result_110544)
    
    # Getting the type of 'up' (line 1792)
    up_110546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 4), 'up')
    # Getting the type of 'slice1' (line 1792)
    slice1_110547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 7), 'slice1')
    # Storing an element on a container (line 1792)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1792, 4), up_110546, (slice1_110547, result_add_110545))
    # Getting the type of 'up' (line 1793)
    up_110548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 11), 'up')
    # Assigning a type to the variable 'stypy_return_type' (line 1793)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1793, 4), 'stypy_return_type', up_110548)
    
    # ################# End of 'unwrap(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'unwrap' in the type store
    # Getting the type of 'stypy_return_type' (line 1741)
    stypy_return_type_110549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1741, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_110549)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'unwrap'
    return stypy_return_type_110549

# Assigning a type to the variable 'unwrap' (line 1741)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1741, 0), 'unwrap', unwrap)

@norecursion
def sort_complex(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'sort_complex'
    module_type_store = module_type_store.open_function_context('sort_complex', 1796, 0, False)
    
    # Passed parameters checking function
    sort_complex.stypy_localization = localization
    sort_complex.stypy_type_of_self = None
    sort_complex.stypy_type_store = module_type_store
    sort_complex.stypy_function_name = 'sort_complex'
    sort_complex.stypy_param_names_list = ['a']
    sort_complex.stypy_varargs_param_name = None
    sort_complex.stypy_kwargs_param_name = None
    sort_complex.stypy_call_defaults = defaults
    sort_complex.stypy_call_varargs = varargs
    sort_complex.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'sort_complex', ['a'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'sort_complex', localization, ['a'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'sort_complex(...)' code ##################

    str_110550 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1818, (-1)), 'str', '\n    Sort a complex array using the real part first, then the imaginary part.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array\n\n    Returns\n    -------\n    out : complex ndarray\n        Always returns a sorted complex array.\n\n    Examples\n    --------\n    >>> np.sort_complex([5, 3, 6, 2, 1])\n    array([ 1.+0.j,  2.+0.j,  3.+0.j,  5.+0.j,  6.+0.j])\n\n    >>> np.sort_complex([1 + 2j, 2 - 1j, 3 - 2j, 3 - 3j, 3 + 5j])\n    array([ 1.+2.j,  2.-1.j,  3.-3.j,  3.-2.j,  3.+5.j])\n\n    ')
    
    # Assigning a Call to a Name (line 1819):
    
    # Assigning a Call to a Name (line 1819):
    
    # Call to array(...): (line 1819)
    # Processing the call arguments (line 1819)
    # Getting the type of 'a' (line 1819)
    a_110552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 14), 'a', False)
    # Processing the call keyword arguments (line 1819)
    # Getting the type of 'True' (line 1819)
    True_110553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 22), 'True', False)
    keyword_110554 = True_110553
    kwargs_110555 = {'copy': keyword_110554}
    # Getting the type of 'array' (line 1819)
    array_110551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 8), 'array', False)
    # Calling array(args, kwargs) (line 1819)
    array_call_result_110556 = invoke(stypy.reporting.localization.Localization(__file__, 1819, 8), array_110551, *[a_110552], **kwargs_110555)
    
    # Assigning a type to the variable 'b' (line 1819)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1819, 4), 'b', array_call_result_110556)
    
    # Call to sort(...): (line 1820)
    # Processing the call keyword arguments (line 1820)
    kwargs_110559 = {}
    # Getting the type of 'b' (line 1820)
    b_110557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1820, 4), 'b', False)
    # Obtaining the member 'sort' of a type (line 1820)
    sort_110558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1820, 4), b_110557, 'sort')
    # Calling sort(args, kwargs) (line 1820)
    sort_call_result_110560 = invoke(stypy.reporting.localization.Localization(__file__, 1820, 4), sort_110558, *[], **kwargs_110559)
    
    
    
    
    # Call to issubclass(...): (line 1821)
    # Processing the call arguments (line 1821)
    # Getting the type of 'b' (line 1821)
    b_110562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1821, 22), 'b', False)
    # Obtaining the member 'dtype' of a type (line 1821)
    dtype_110563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1821, 22), b_110562, 'dtype')
    # Obtaining the member 'type' of a type (line 1821)
    type_110564 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1821, 22), dtype_110563, 'type')
    # Getting the type of '_nx' (line 1821)
    _nx_110565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1821, 36), '_nx', False)
    # Obtaining the member 'complexfloating' of a type (line 1821)
    complexfloating_110566 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1821, 36), _nx_110565, 'complexfloating')
    # Processing the call keyword arguments (line 1821)
    kwargs_110567 = {}
    # Getting the type of 'issubclass' (line 1821)
    issubclass_110561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1821, 11), 'issubclass', False)
    # Calling issubclass(args, kwargs) (line 1821)
    issubclass_call_result_110568 = invoke(stypy.reporting.localization.Localization(__file__, 1821, 11), issubclass_110561, *[type_110564, complexfloating_110566], **kwargs_110567)
    
    # Applying the 'not' unary operator (line 1821)
    result_not__110569 = python_operator(stypy.reporting.localization.Localization(__file__, 1821, 7), 'not', issubclass_call_result_110568)
    
    # Testing the type of an if condition (line 1821)
    if_condition_110570 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1821, 4), result_not__110569)
    # Assigning a type to the variable 'if_condition_110570' (line 1821)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1821, 4), 'if_condition_110570', if_condition_110570)
    # SSA begins for if statement (line 1821)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'b' (line 1822)
    b_110571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1822, 11), 'b')
    # Obtaining the member 'dtype' of a type (line 1822)
    dtype_110572 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1822, 11), b_110571, 'dtype')
    # Obtaining the member 'char' of a type (line 1822)
    char_110573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1822, 11), dtype_110572, 'char')
    str_110574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1822, 27), 'str', 'bhBH')
    # Applying the binary operator 'in' (line 1822)
    result_contains_110575 = python_operator(stypy.reporting.localization.Localization(__file__, 1822, 11), 'in', char_110573, str_110574)
    
    # Testing the type of an if condition (line 1822)
    if_condition_110576 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1822, 8), result_contains_110575)
    # Assigning a type to the variable 'if_condition_110576' (line 1822)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1822, 8), 'if_condition_110576', if_condition_110576)
    # SSA begins for if statement (line 1822)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to astype(...): (line 1823)
    # Processing the call arguments (line 1823)
    str_110579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1823, 28), 'str', 'F')
    # Processing the call keyword arguments (line 1823)
    kwargs_110580 = {}
    # Getting the type of 'b' (line 1823)
    b_110577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1823, 19), 'b', False)
    # Obtaining the member 'astype' of a type (line 1823)
    astype_110578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1823, 19), b_110577, 'astype')
    # Calling astype(args, kwargs) (line 1823)
    astype_call_result_110581 = invoke(stypy.reporting.localization.Localization(__file__, 1823, 19), astype_110578, *[str_110579], **kwargs_110580)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1823)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1823, 12), 'stypy_return_type', astype_call_result_110581)
    # SSA branch for the else part of an if statement (line 1822)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'b' (line 1824)
    b_110582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1824, 13), 'b')
    # Obtaining the member 'dtype' of a type (line 1824)
    dtype_110583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1824, 13), b_110582, 'dtype')
    # Obtaining the member 'char' of a type (line 1824)
    char_110584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1824, 13), dtype_110583, 'char')
    str_110585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1824, 29), 'str', 'g')
    # Applying the binary operator '==' (line 1824)
    result_eq_110586 = python_operator(stypy.reporting.localization.Localization(__file__, 1824, 13), '==', char_110584, str_110585)
    
    # Testing the type of an if condition (line 1824)
    if_condition_110587 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1824, 13), result_eq_110586)
    # Assigning a type to the variable 'if_condition_110587' (line 1824)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1824, 13), 'if_condition_110587', if_condition_110587)
    # SSA begins for if statement (line 1824)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to astype(...): (line 1825)
    # Processing the call arguments (line 1825)
    str_110590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1825, 28), 'str', 'G')
    # Processing the call keyword arguments (line 1825)
    kwargs_110591 = {}
    # Getting the type of 'b' (line 1825)
    b_110588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1825, 19), 'b', False)
    # Obtaining the member 'astype' of a type (line 1825)
    astype_110589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1825, 19), b_110588, 'astype')
    # Calling astype(args, kwargs) (line 1825)
    astype_call_result_110592 = invoke(stypy.reporting.localization.Localization(__file__, 1825, 19), astype_110589, *[str_110590], **kwargs_110591)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1825)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1825, 12), 'stypy_return_type', astype_call_result_110592)
    # SSA branch for the else part of an if statement (line 1824)
    module_type_store.open_ssa_branch('else')
    
    # Call to astype(...): (line 1827)
    # Processing the call arguments (line 1827)
    str_110595 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1827, 28), 'str', 'D')
    # Processing the call keyword arguments (line 1827)
    kwargs_110596 = {}
    # Getting the type of 'b' (line 1827)
    b_110593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1827, 19), 'b', False)
    # Obtaining the member 'astype' of a type (line 1827)
    astype_110594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1827, 19), b_110593, 'astype')
    # Calling astype(args, kwargs) (line 1827)
    astype_call_result_110597 = invoke(stypy.reporting.localization.Localization(__file__, 1827, 19), astype_110594, *[str_110595], **kwargs_110596)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1827)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1827, 12), 'stypy_return_type', astype_call_result_110597)
    # SSA join for if statement (line 1824)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1822)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 1821)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'b' (line 1829)
    b_110598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1829, 15), 'b')
    # Assigning a type to the variable 'stypy_return_type' (line 1829)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1829, 8), 'stypy_return_type', b_110598)
    # SSA join for if statement (line 1821)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'sort_complex(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'sort_complex' in the type store
    # Getting the type of 'stypy_return_type' (line 1796)
    stypy_return_type_110599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_110599)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'sort_complex'
    return stypy_return_type_110599

# Assigning a type to the variable 'sort_complex' (line 1796)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1796, 0), 'sort_complex', sort_complex)

@norecursion
def trim_zeros(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_110600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1832, 26), 'str', 'fb')
    defaults = [str_110600]
    # Create a new context for function 'trim_zeros'
    module_type_store = module_type_store.open_function_context('trim_zeros', 1832, 0, False)
    
    # Passed parameters checking function
    trim_zeros.stypy_localization = localization
    trim_zeros.stypy_type_of_self = None
    trim_zeros.stypy_type_store = module_type_store
    trim_zeros.stypy_function_name = 'trim_zeros'
    trim_zeros.stypy_param_names_list = ['filt', 'trim']
    trim_zeros.stypy_varargs_param_name = None
    trim_zeros.stypy_kwargs_param_name = None
    trim_zeros.stypy_call_defaults = defaults
    trim_zeros.stypy_call_varargs = varargs
    trim_zeros.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'trim_zeros', ['filt', 'trim'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'trim_zeros', localization, ['filt', 'trim'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'trim_zeros(...)' code ##################

    str_110601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1864, (-1)), 'str', "\n    Trim the leading and/or trailing zeros from a 1-D array or sequence.\n\n    Parameters\n    ----------\n    filt : 1-D array or sequence\n        Input array.\n    trim : str, optional\n        A string with 'f' representing trim from front and 'b' to trim from\n        back. Default is 'fb', trim zeros from both front and back of the\n        array.\n\n    Returns\n    -------\n    trimmed : 1-D array or sequence\n        The result of trimming the input. The input data type is preserved.\n\n    Examples\n    --------\n    >>> a = np.array((0, 0, 0, 1, 2, 3, 0, 2, 1, 0))\n    >>> np.trim_zeros(a)\n    array([1, 2, 3, 0, 2, 1])\n\n    >>> np.trim_zeros(a, 'b')\n    array([0, 0, 0, 1, 2, 3, 0, 2, 1])\n\n    The input data type is preserved, list/tuple in means list/tuple out.\n\n    >>> np.trim_zeros([0, 1, 2, 0])\n    [1, 2]\n\n    ")
    
    # Assigning a Num to a Name (line 1865):
    
    # Assigning a Num to a Name (line 1865):
    int_110602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1865, 12), 'int')
    # Assigning a type to the variable 'first' (line 1865)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1865, 4), 'first', int_110602)
    
    # Assigning a Call to a Name (line 1866):
    
    # Assigning a Call to a Name (line 1866):
    
    # Call to upper(...): (line 1866)
    # Processing the call keyword arguments (line 1866)
    kwargs_110605 = {}
    # Getting the type of 'trim' (line 1866)
    trim_110603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 11), 'trim', False)
    # Obtaining the member 'upper' of a type (line 1866)
    upper_110604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1866, 11), trim_110603, 'upper')
    # Calling upper(args, kwargs) (line 1866)
    upper_call_result_110606 = invoke(stypy.reporting.localization.Localization(__file__, 1866, 11), upper_110604, *[], **kwargs_110605)
    
    # Assigning a type to the variable 'trim' (line 1866)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1866, 4), 'trim', upper_call_result_110606)
    
    
    str_110607 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1867, 7), 'str', 'F')
    # Getting the type of 'trim' (line 1867)
    trim_110608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1867, 14), 'trim')
    # Applying the binary operator 'in' (line 1867)
    result_contains_110609 = python_operator(stypy.reporting.localization.Localization(__file__, 1867, 7), 'in', str_110607, trim_110608)
    
    # Testing the type of an if condition (line 1867)
    if_condition_110610 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1867, 4), result_contains_110609)
    # Assigning a type to the variable 'if_condition_110610' (line 1867)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1867, 4), 'if_condition_110610', if_condition_110610)
    # SSA begins for if statement (line 1867)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'filt' (line 1868)
    filt_110611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 17), 'filt')
    # Testing the type of a for loop iterable (line 1868)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1868, 8), filt_110611)
    # Getting the type of the for loop variable (line 1868)
    for_loop_var_110612 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1868, 8), filt_110611)
    # Assigning a type to the variable 'i' (line 1868)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1868, 8), 'i', for_loop_var_110612)
    # SSA begins for a for statement (line 1868)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'i' (line 1869)
    i_110613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 15), 'i')
    float_110614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1869, 20), 'float')
    # Applying the binary operator '!=' (line 1869)
    result_ne_110615 = python_operator(stypy.reporting.localization.Localization(__file__, 1869, 15), '!=', i_110613, float_110614)
    
    # Testing the type of an if condition (line 1869)
    if_condition_110616 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1869, 12), result_ne_110615)
    # Assigning a type to the variable 'if_condition_110616' (line 1869)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1869, 12), 'if_condition_110616', if_condition_110616)
    # SSA begins for if statement (line 1869)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA branch for the else part of an if statement (line 1869)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 1872):
    
    # Assigning a BinOp to a Name (line 1872):
    # Getting the type of 'first' (line 1872)
    first_110617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1872, 24), 'first')
    int_110618 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1872, 32), 'int')
    # Applying the binary operator '+' (line 1872)
    result_add_110619 = python_operator(stypy.reporting.localization.Localization(__file__, 1872, 24), '+', first_110617, int_110618)
    
    # Assigning a type to the variable 'first' (line 1872)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1872, 16), 'first', result_add_110619)
    # SSA join for if statement (line 1869)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1867)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1873):
    
    # Assigning a Call to a Name (line 1873):
    
    # Call to len(...): (line 1873)
    # Processing the call arguments (line 1873)
    # Getting the type of 'filt' (line 1873)
    filt_110621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1873, 15), 'filt', False)
    # Processing the call keyword arguments (line 1873)
    kwargs_110622 = {}
    # Getting the type of 'len' (line 1873)
    len_110620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1873, 11), 'len', False)
    # Calling len(args, kwargs) (line 1873)
    len_call_result_110623 = invoke(stypy.reporting.localization.Localization(__file__, 1873, 11), len_110620, *[filt_110621], **kwargs_110622)
    
    # Assigning a type to the variable 'last' (line 1873)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1873, 4), 'last', len_call_result_110623)
    
    
    str_110624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1874, 7), 'str', 'B')
    # Getting the type of 'trim' (line 1874)
    trim_110625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1874, 14), 'trim')
    # Applying the binary operator 'in' (line 1874)
    result_contains_110626 = python_operator(stypy.reporting.localization.Localization(__file__, 1874, 7), 'in', str_110624, trim_110625)
    
    # Testing the type of an if condition (line 1874)
    if_condition_110627 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1874, 4), result_contains_110626)
    # Assigning a type to the variable 'if_condition_110627' (line 1874)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1874, 4), 'if_condition_110627', if_condition_110627)
    # SSA begins for if statement (line 1874)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Obtaining the type of the subscript
    int_110628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1875, 24), 'int')
    slice_110629 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1875, 17), None, None, int_110628)
    # Getting the type of 'filt' (line 1875)
    filt_110630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1875, 17), 'filt')
    # Obtaining the member '__getitem__' of a type (line 1875)
    getitem___110631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1875, 17), filt_110630, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1875)
    subscript_call_result_110632 = invoke(stypy.reporting.localization.Localization(__file__, 1875, 17), getitem___110631, slice_110629)
    
    # Testing the type of a for loop iterable (line 1875)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1875, 8), subscript_call_result_110632)
    # Getting the type of the for loop variable (line 1875)
    for_loop_var_110633 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1875, 8), subscript_call_result_110632)
    # Assigning a type to the variable 'i' (line 1875)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1875, 8), 'i', for_loop_var_110633)
    # SSA begins for a for statement (line 1875)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'i' (line 1876)
    i_110634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1876, 15), 'i')
    float_110635 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1876, 20), 'float')
    # Applying the binary operator '!=' (line 1876)
    result_ne_110636 = python_operator(stypy.reporting.localization.Localization(__file__, 1876, 15), '!=', i_110634, float_110635)
    
    # Testing the type of an if condition (line 1876)
    if_condition_110637 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1876, 12), result_ne_110636)
    # Assigning a type to the variable 'if_condition_110637' (line 1876)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1876, 12), 'if_condition_110637', if_condition_110637)
    # SSA begins for if statement (line 1876)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA branch for the else part of an if statement (line 1876)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a BinOp to a Name (line 1879):
    
    # Assigning a BinOp to a Name (line 1879):
    # Getting the type of 'last' (line 1879)
    last_110638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1879, 23), 'last')
    int_110639 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1879, 30), 'int')
    # Applying the binary operator '-' (line 1879)
    result_sub_110640 = python_operator(stypy.reporting.localization.Localization(__file__, 1879, 23), '-', last_110638, int_110639)
    
    # Assigning a type to the variable 'last' (line 1879)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1879, 16), 'last', result_sub_110640)
    # SSA join for if statement (line 1876)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1874)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'first' (line 1880)
    first_110641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1880, 16), 'first')
    # Getting the type of 'last' (line 1880)
    last_110642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1880, 22), 'last')
    slice_110643 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1880, 11), first_110641, last_110642, None)
    # Getting the type of 'filt' (line 1880)
    filt_110644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1880, 11), 'filt')
    # Obtaining the member '__getitem__' of a type (line 1880)
    getitem___110645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1880, 11), filt_110644, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1880)
    subscript_call_result_110646 = invoke(stypy.reporting.localization.Localization(__file__, 1880, 11), getitem___110645, slice_110643)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1880)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1880, 4), 'stypy_return_type', subscript_call_result_110646)
    
    # ################# End of 'trim_zeros(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'trim_zeros' in the type store
    # Getting the type of 'stypy_return_type' (line 1832)
    stypy_return_type_110647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1832, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_110647)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'trim_zeros'
    return stypy_return_type_110647

# Assigning a type to the variable 'trim_zeros' (line 1832)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1832, 0), 'trim_zeros', trim_zeros)

@norecursion
def unique(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'unique'
    module_type_store = module_type_store.open_function_context('unique', 1883, 0, False)
    
    # Passed parameters checking function
    unique.stypy_localization = localization
    unique.stypy_type_of_self = None
    unique.stypy_type_store = module_type_store
    unique.stypy_function_name = 'unique'
    unique.stypy_param_names_list = ['x']
    unique.stypy_varargs_param_name = None
    unique.stypy_kwargs_param_name = None
    unique.stypy_call_defaults = defaults
    unique.stypy_call_varargs = varargs
    unique.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'unique', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'unique', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'unique(...)' code ##################

    str_110648 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1888, (-1)), 'str', '\n    This function is deprecated.  Use numpy.lib.arraysetops.unique()\n    instead.\n    ')
    
    
    # SSA begins for try-except statement (line 1889)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 1890):
    
    # Assigning a Call to a Name (line 1890):
    
    # Call to flatten(...): (line 1890)
    # Processing the call keyword arguments (line 1890)
    kwargs_110651 = {}
    # Getting the type of 'x' (line 1890)
    x_110649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1890, 14), 'x', False)
    # Obtaining the member 'flatten' of a type (line 1890)
    flatten_110650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1890, 14), x_110649, 'flatten')
    # Calling flatten(args, kwargs) (line 1890)
    flatten_call_result_110652 = invoke(stypy.reporting.localization.Localization(__file__, 1890, 14), flatten_110650, *[], **kwargs_110651)
    
    # Assigning a type to the variable 'tmp' (line 1890)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1890, 8), 'tmp', flatten_call_result_110652)
    
    
    # Getting the type of 'tmp' (line 1891)
    tmp_110653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1891, 11), 'tmp')
    # Obtaining the member 'size' of a type (line 1891)
    size_110654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1891, 11), tmp_110653, 'size')
    int_110655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1891, 23), 'int')
    # Applying the binary operator '==' (line 1891)
    result_eq_110656 = python_operator(stypy.reporting.localization.Localization(__file__, 1891, 11), '==', size_110654, int_110655)
    
    # Testing the type of an if condition (line 1891)
    if_condition_110657 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1891, 8), result_eq_110656)
    # Assigning a type to the variable 'if_condition_110657' (line 1891)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1891, 8), 'if_condition_110657', if_condition_110657)
    # SSA begins for if statement (line 1891)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'tmp' (line 1892)
    tmp_110658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 19), 'tmp')
    # Assigning a type to the variable 'stypy_return_type' (line 1892)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1892, 12), 'stypy_return_type', tmp_110658)
    # SSA join for if statement (line 1891)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to sort(...): (line 1893)
    # Processing the call keyword arguments (line 1893)
    kwargs_110661 = {}
    # Getting the type of 'tmp' (line 1893)
    tmp_110659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1893, 8), 'tmp', False)
    # Obtaining the member 'sort' of a type (line 1893)
    sort_110660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1893, 8), tmp_110659, 'sort')
    # Calling sort(args, kwargs) (line 1893)
    sort_call_result_110662 = invoke(stypy.reporting.localization.Localization(__file__, 1893, 8), sort_110660, *[], **kwargs_110661)
    
    
    # Assigning a Call to a Name (line 1894):
    
    # Assigning a Call to a Name (line 1894):
    
    # Call to concatenate(...): (line 1894)
    # Processing the call arguments (line 1894)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1894)
    tuple_110664 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1894, 27), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1894)
    # Adding element type (line 1894)
    
    # Obtaining an instance of the builtin type 'list' (line 1894)
    list_110665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1894, 27), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1894)
    # Adding element type (line 1894)
    # Getting the type of 'True' (line 1894)
    True_110666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1894, 28), 'True', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1894, 27), list_110665, True_110666)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1894, 27), tuple_110664, list_110665)
    # Adding element type (line 1894)
    
    
    # Obtaining the type of the subscript
    int_110667 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1894, 39), 'int')
    slice_110668 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1894, 35), int_110667, None, None)
    # Getting the type of 'tmp' (line 1894)
    tmp_110669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1894, 35), 'tmp', False)
    # Obtaining the member '__getitem__' of a type (line 1894)
    getitem___110670 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1894, 35), tmp_110669, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1894)
    subscript_call_result_110671 = invoke(stypy.reporting.localization.Localization(__file__, 1894, 35), getitem___110670, slice_110668)
    
    
    # Obtaining the type of the subscript
    int_110672 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1894, 51), 'int')
    slice_110673 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1894, 46), None, int_110672, None)
    # Getting the type of 'tmp' (line 1894)
    tmp_110674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1894, 46), 'tmp', False)
    # Obtaining the member '__getitem__' of a type (line 1894)
    getitem___110675 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1894, 46), tmp_110674, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1894)
    subscript_call_result_110676 = invoke(stypy.reporting.localization.Localization(__file__, 1894, 46), getitem___110675, slice_110673)
    
    # Applying the binary operator '!=' (line 1894)
    result_ne_110677 = python_operator(stypy.reporting.localization.Localization(__file__, 1894, 35), '!=', subscript_call_result_110671, subscript_call_result_110676)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1894, 27), tuple_110664, result_ne_110677)
    
    # Processing the call keyword arguments (line 1894)
    kwargs_110678 = {}
    # Getting the type of 'concatenate' (line 1894)
    concatenate_110663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1894, 14), 'concatenate', False)
    # Calling concatenate(args, kwargs) (line 1894)
    concatenate_call_result_110679 = invoke(stypy.reporting.localization.Localization(__file__, 1894, 14), concatenate_110663, *[tuple_110664], **kwargs_110678)
    
    # Assigning a type to the variable 'idx' (line 1894)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1894, 8), 'idx', concatenate_call_result_110679)
    
    # Obtaining the type of the subscript
    # Getting the type of 'idx' (line 1895)
    idx_110680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1895, 19), 'idx')
    # Getting the type of 'tmp' (line 1895)
    tmp_110681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1895, 15), 'tmp')
    # Obtaining the member '__getitem__' of a type (line 1895)
    getitem___110682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1895, 15), tmp_110681, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1895)
    subscript_call_result_110683 = invoke(stypy.reporting.localization.Localization(__file__, 1895, 15), getitem___110682, idx_110680)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1895)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1895, 8), 'stypy_return_type', subscript_call_result_110683)
    # SSA branch for the except part of a try statement (line 1889)
    # SSA branch for the except 'AttributeError' branch of a try statement (line 1889)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Call to a Name (line 1897):
    
    # Assigning a Call to a Name (line 1897):
    
    # Call to sorted(...): (line 1897)
    # Processing the call arguments (line 1897)
    
    # Call to set(...): (line 1897)
    # Processing the call arguments (line 1897)
    # Getting the type of 'x' (line 1897)
    x_110686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1897, 27), 'x', False)
    # Processing the call keyword arguments (line 1897)
    kwargs_110687 = {}
    # Getting the type of 'set' (line 1897)
    set_110685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1897, 23), 'set', False)
    # Calling set(args, kwargs) (line 1897)
    set_call_result_110688 = invoke(stypy.reporting.localization.Localization(__file__, 1897, 23), set_110685, *[x_110686], **kwargs_110687)
    
    # Processing the call keyword arguments (line 1897)
    kwargs_110689 = {}
    # Getting the type of 'sorted' (line 1897)
    sorted_110684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1897, 16), 'sorted', False)
    # Calling sorted(args, kwargs) (line 1897)
    sorted_call_result_110690 = invoke(stypy.reporting.localization.Localization(__file__, 1897, 16), sorted_110684, *[set_call_result_110688], **kwargs_110689)
    
    # Assigning a type to the variable 'items' (line 1897)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1897, 8), 'items', sorted_call_result_110690)
    
    # Call to asarray(...): (line 1898)
    # Processing the call arguments (line 1898)
    # Getting the type of 'items' (line 1898)
    items_110692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1898, 23), 'items', False)
    # Processing the call keyword arguments (line 1898)
    kwargs_110693 = {}
    # Getting the type of 'asarray' (line 1898)
    asarray_110691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1898, 15), 'asarray', False)
    # Calling asarray(args, kwargs) (line 1898)
    asarray_call_result_110694 = invoke(stypy.reporting.localization.Localization(__file__, 1898, 15), asarray_110691, *[items_110692], **kwargs_110693)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1898)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1898, 8), 'stypy_return_type', asarray_call_result_110694)
    # SSA join for try-except statement (line 1889)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'unique(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'unique' in the type store
    # Getting the type of 'stypy_return_type' (line 1883)
    stypy_return_type_110695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1883, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_110695)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'unique'
    return stypy_return_type_110695

# Assigning a type to the variable 'unique' (line 1883)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1883, 0), 'unique', unique)

@norecursion
def extract(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'extract'
    module_type_store = module_type_store.open_function_context('extract', 1901, 0, False)
    
    # Passed parameters checking function
    extract.stypy_localization = localization
    extract.stypy_type_of_self = None
    extract.stypy_type_store = module_type_store
    extract.stypy_function_name = 'extract'
    extract.stypy_param_names_list = ['condition', 'arr']
    extract.stypy_varargs_param_name = None
    extract.stypy_kwargs_param_name = None
    extract.stypy_call_defaults = defaults
    extract.stypy_call_varargs = varargs
    extract.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'extract', ['condition', 'arr'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'extract', localization, ['condition', 'arr'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'extract(...)' code ##################

    str_110696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1948, (-1)), 'str', '\n    Return the elements of an array that satisfy some condition.\n\n    This is equivalent to ``np.compress(ravel(condition), ravel(arr))``.  If\n    `condition` is boolean ``np.extract`` is equivalent to ``arr[condition]``.\n\n    Note that `place` does the exact opposite of `extract`.\n\n    Parameters\n    ----------\n    condition : array_like\n        An array whose nonzero or True entries indicate the elements of `arr`\n        to extract.\n    arr : array_like\n        Input array of the same size as `condition`.\n\n    Returns\n    -------\n    extract : ndarray\n        Rank 1 array of values from `arr` where `condition` is True.\n\n    See Also\n    --------\n    take, put, copyto, compress, place\n\n    Examples\n    --------\n    >>> arr = np.arange(12).reshape((3, 4))\n    >>> arr\n    array([[ 0,  1,  2,  3],\n           [ 4,  5,  6,  7],\n           [ 8,  9, 10, 11]])\n    >>> condition = np.mod(arr, 3)==0\n    >>> condition\n    array([[ True, False, False,  True],\n           [False, False,  True, False],\n           [False,  True, False, False]], dtype=bool)\n    >>> np.extract(condition, arr)\n    array([0, 3, 6, 9])\n\n\n    If `condition` is boolean:\n\n    >>> arr[condition]\n    array([0, 3, 6, 9])\n\n    ')
    
    # Call to take(...): (line 1949)
    # Processing the call arguments (line 1949)
    
    # Call to ravel(...): (line 1949)
    # Processing the call arguments (line 1949)
    # Getting the type of 'arr' (line 1949)
    arr_110700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1949, 26), 'arr', False)
    # Processing the call keyword arguments (line 1949)
    kwargs_110701 = {}
    # Getting the type of 'ravel' (line 1949)
    ravel_110699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1949, 20), 'ravel', False)
    # Calling ravel(args, kwargs) (line 1949)
    ravel_call_result_110702 = invoke(stypy.reporting.localization.Localization(__file__, 1949, 20), ravel_110699, *[arr_110700], **kwargs_110701)
    
    
    # Obtaining the type of the subscript
    int_110703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1949, 58), 'int')
    
    # Call to nonzero(...): (line 1949)
    # Processing the call arguments (line 1949)
    
    # Call to ravel(...): (line 1949)
    # Processing the call arguments (line 1949)
    # Getting the type of 'condition' (line 1949)
    condition_110706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1949, 46), 'condition', False)
    # Processing the call keyword arguments (line 1949)
    kwargs_110707 = {}
    # Getting the type of 'ravel' (line 1949)
    ravel_110705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1949, 40), 'ravel', False)
    # Calling ravel(args, kwargs) (line 1949)
    ravel_call_result_110708 = invoke(stypy.reporting.localization.Localization(__file__, 1949, 40), ravel_110705, *[condition_110706], **kwargs_110707)
    
    # Processing the call keyword arguments (line 1949)
    kwargs_110709 = {}
    # Getting the type of 'nonzero' (line 1949)
    nonzero_110704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1949, 32), 'nonzero', False)
    # Calling nonzero(args, kwargs) (line 1949)
    nonzero_call_result_110710 = invoke(stypy.reporting.localization.Localization(__file__, 1949, 32), nonzero_110704, *[ravel_call_result_110708], **kwargs_110709)
    
    # Obtaining the member '__getitem__' of a type (line 1949)
    getitem___110711 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1949, 32), nonzero_call_result_110710, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1949)
    subscript_call_result_110712 = invoke(stypy.reporting.localization.Localization(__file__, 1949, 32), getitem___110711, int_110703)
    
    # Processing the call keyword arguments (line 1949)
    kwargs_110713 = {}
    # Getting the type of '_nx' (line 1949)
    _nx_110697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1949, 11), '_nx', False)
    # Obtaining the member 'take' of a type (line 1949)
    take_110698 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1949, 11), _nx_110697, 'take')
    # Calling take(args, kwargs) (line 1949)
    take_call_result_110714 = invoke(stypy.reporting.localization.Localization(__file__, 1949, 11), take_110698, *[ravel_call_result_110702, subscript_call_result_110712], **kwargs_110713)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1949)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1949, 4), 'stypy_return_type', take_call_result_110714)
    
    # ################# End of 'extract(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'extract' in the type store
    # Getting the type of 'stypy_return_type' (line 1901)
    stypy_return_type_110715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1901, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_110715)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'extract'
    return stypy_return_type_110715

# Assigning a type to the variable 'extract' (line 1901)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1901, 0), 'extract', extract)

@norecursion
def place(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'place'
    module_type_store = module_type_store.open_function_context('place', 1952, 0, False)
    
    # Passed parameters checking function
    place.stypy_localization = localization
    place.stypy_type_of_self = None
    place.stypy_type_store = module_type_store
    place.stypy_function_name = 'place'
    place.stypy_param_names_list = ['arr', 'mask', 'vals']
    place.stypy_varargs_param_name = None
    place.stypy_kwargs_param_name = None
    place.stypy_call_defaults = defaults
    place.stypy_call_varargs = varargs
    place.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'place', ['arr', 'mask', 'vals'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'place', localization, ['arr', 'mask', 'vals'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'place(...)' code ##################

    str_110716 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1986, (-1)), 'str', '\n    Change elements of an array based on conditional and input values.\n\n    Similar to ``np.copyto(arr, vals, where=mask)``, the difference is that\n    `place` uses the first N elements of `vals`, where N is the number of\n    True values in `mask`, while `copyto` uses the elements where `mask`\n    is True.\n\n    Note that `extract` does the exact opposite of `place`.\n\n    Parameters\n    ----------\n    arr : ndarray\n        Array to put data into.\n    mask : array_like\n        Boolean mask array. Must have the same size as `a`.\n    vals : 1-D sequence\n        Values to put into `a`. Only the first N elements are used, where\n        N is the number of True values in `mask`. If `vals` is smaller\n        than N it will be repeated.\n\n    See Also\n    --------\n    copyto, put, take, extract\n\n    Examples\n    --------\n    >>> arr = np.arange(6).reshape(2, 3)\n    >>> np.place(arr, arr>2, [44, 55])\n    >>> arr\n    array([[ 0,  1,  2],\n           [44, 55, 44]])\n\n    ')
    
    
    
    # Call to isinstance(...): (line 1987)
    # Processing the call arguments (line 1987)
    # Getting the type of 'arr' (line 1987)
    arr_110718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1987, 22), 'arr', False)
    # Getting the type of 'np' (line 1987)
    np_110719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1987, 27), 'np', False)
    # Obtaining the member 'ndarray' of a type (line 1987)
    ndarray_110720 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1987, 27), np_110719, 'ndarray')
    # Processing the call keyword arguments (line 1987)
    kwargs_110721 = {}
    # Getting the type of 'isinstance' (line 1987)
    isinstance_110717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1987, 11), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1987)
    isinstance_call_result_110722 = invoke(stypy.reporting.localization.Localization(__file__, 1987, 11), isinstance_110717, *[arr_110718, ndarray_110720], **kwargs_110721)
    
    # Applying the 'not' unary operator (line 1987)
    result_not__110723 = python_operator(stypy.reporting.localization.Localization(__file__, 1987, 7), 'not', isinstance_call_result_110722)
    
    # Testing the type of an if condition (line 1987)
    if_condition_110724 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1987, 4), result_not__110723)
    # Assigning a type to the variable 'if_condition_110724' (line 1987)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1987, 4), 'if_condition_110724', if_condition_110724)
    # SSA begins for if statement (line 1987)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to TypeError(...): (line 1988)
    # Processing the call arguments (line 1988)
    
    # Call to format(...): (line 1988)
    # Processing the call keyword arguments (line 1988)
    
    # Call to type(...): (line 1989)
    # Processing the call arguments (line 1989)
    # Getting the type of 'arr' (line 1989)
    arr_110729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1989, 54), 'arr', False)
    # Processing the call keyword arguments (line 1989)
    kwargs_110730 = {}
    # Getting the type of 'type' (line 1989)
    type_110728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1989, 49), 'type', False)
    # Calling type(args, kwargs) (line 1989)
    type_call_result_110731 = invoke(stypy.reporting.localization.Localization(__file__, 1989, 49), type_110728, *[arr_110729], **kwargs_110730)
    
    # Obtaining the member '__name__' of a type (line 1989)
    name___110732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1989, 49), type_call_result_110731, '__name__')
    keyword_110733 = name___110732
    kwargs_110734 = {'name': keyword_110733}
    str_110726 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1988, 24), 'str', 'argument 1 must be numpy.ndarray, not {name}')
    # Obtaining the member 'format' of a type (line 1988)
    format_110727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1988, 24), str_110726, 'format')
    # Calling format(args, kwargs) (line 1988)
    format_call_result_110735 = invoke(stypy.reporting.localization.Localization(__file__, 1988, 24), format_110727, *[], **kwargs_110734)
    
    # Processing the call keyword arguments (line 1988)
    kwargs_110736 = {}
    # Getting the type of 'TypeError' (line 1988)
    TypeError_110725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1988, 14), 'TypeError', False)
    # Calling TypeError(args, kwargs) (line 1988)
    TypeError_call_result_110737 = invoke(stypy.reporting.localization.Localization(__file__, 1988, 14), TypeError_110725, *[format_call_result_110735], **kwargs_110736)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1988, 8), TypeError_call_result_110737, 'raise parameter', BaseException)
    # SSA join for if statement (line 1987)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to _insert(...): (line 1991)
    # Processing the call arguments (line 1991)
    # Getting the type of 'arr' (line 1991)
    arr_110739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 19), 'arr', False)
    # Getting the type of 'mask' (line 1991)
    mask_110740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 24), 'mask', False)
    # Getting the type of 'vals' (line 1991)
    vals_110741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 30), 'vals', False)
    # Processing the call keyword arguments (line 1991)
    kwargs_110742 = {}
    # Getting the type of '_insert' (line 1991)
    _insert_110738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 11), '_insert', False)
    # Calling _insert(args, kwargs) (line 1991)
    _insert_call_result_110743 = invoke(stypy.reporting.localization.Localization(__file__, 1991, 11), _insert_110738, *[arr_110739, mask_110740, vals_110741], **kwargs_110742)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1991)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1991, 4), 'stypy_return_type', _insert_call_result_110743)
    
    # ################# End of 'place(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'place' in the type store
    # Getting the type of 'stypy_return_type' (line 1952)
    stypy_return_type_110744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_110744)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'place'
    return stypy_return_type_110744

# Assigning a type to the variable 'place' (line 1952)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1952, 0), 'place', place)

@norecursion
def disp(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1994)
    None_110745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1994, 22), 'None')
    # Getting the type of 'True' (line 1994)
    True_110746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1994, 37), 'True')
    defaults = [None_110745, True_110746]
    # Create a new context for function 'disp'
    module_type_store = module_type_store.open_function_context('disp', 1994, 0, False)
    
    # Passed parameters checking function
    disp.stypy_localization = localization
    disp.stypy_type_of_self = None
    disp.stypy_type_store = module_type_store
    disp.stypy_function_name = 'disp'
    disp.stypy_param_names_list = ['mesg', 'device', 'linefeed']
    disp.stypy_varargs_param_name = None
    disp.stypy_kwargs_param_name = None
    disp.stypy_call_defaults = defaults
    disp.stypy_call_varargs = varargs
    disp.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'disp', ['mesg', 'device', 'linefeed'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'disp', localization, ['mesg', 'device', 'linefeed'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'disp(...)' code ##################

    str_110747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2025, (-1)), 'str', '\n    Display a message on a device.\n\n    Parameters\n    ----------\n    mesg : str\n        Message to display.\n    device : object\n        Device to write message. If None, defaults to ``sys.stdout`` which is\n        very similar to ``print``. `device` needs to have ``write()`` and\n        ``flush()`` methods.\n    linefeed : bool, optional\n        Option whether to print a line feed or not. Defaults to True.\n\n    Raises\n    ------\n    AttributeError\n        If `device` does not have a ``write()`` or ``flush()`` method.\n\n    Examples\n    --------\n    Besides ``sys.stdout``, a file-like object can also be used as it has\n    both required methods:\n\n    >>> from StringIO import StringIO\n    >>> buf = StringIO()\n    >>> np.disp(\'"Display" in a file\', device=buf)\n    >>> buf.getvalue()\n    \'"Display" in a file\\n\'\n\n    ')
    
    # Type idiom detected: calculating its left and rigth part (line 2026)
    # Getting the type of 'device' (line 2026)
    device_110748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2026, 7), 'device')
    # Getting the type of 'None' (line 2026)
    None_110749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2026, 17), 'None')
    
    (may_be_110750, more_types_in_union_110751) = may_be_none(device_110748, None_110749)

    if may_be_110750:

        if more_types_in_union_110751:
            # Runtime conditional SSA (line 2026)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Attribute to a Name (line 2027):
        
        # Assigning a Attribute to a Name (line 2027):
        # Getting the type of 'sys' (line 2027)
        sys_110752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2027, 17), 'sys')
        # Obtaining the member 'stdout' of a type (line 2027)
        stdout_110753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2027, 17), sys_110752, 'stdout')
        # Assigning a type to the variable 'device' (line 2027)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2027, 8), 'device', stdout_110753)

        if more_types_in_union_110751:
            # SSA join for if statement (line 2026)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Getting the type of 'linefeed' (line 2028)
    linefeed_110754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2028, 7), 'linefeed')
    # Testing the type of an if condition (line 2028)
    if_condition_110755 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2028, 4), linefeed_110754)
    # Assigning a type to the variable 'if_condition_110755' (line 2028)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2028, 4), 'if_condition_110755', if_condition_110755)
    # SSA begins for if statement (line 2028)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to write(...): (line 2029)
    # Processing the call arguments (line 2029)
    str_110758 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2029, 21), 'str', '%s\n')
    # Getting the type of 'mesg' (line 2029)
    mesg_110759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2029, 30), 'mesg', False)
    # Applying the binary operator '%' (line 2029)
    result_mod_110760 = python_operator(stypy.reporting.localization.Localization(__file__, 2029, 21), '%', str_110758, mesg_110759)
    
    # Processing the call keyword arguments (line 2029)
    kwargs_110761 = {}
    # Getting the type of 'device' (line 2029)
    device_110756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2029, 8), 'device', False)
    # Obtaining the member 'write' of a type (line 2029)
    write_110757 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2029, 8), device_110756, 'write')
    # Calling write(args, kwargs) (line 2029)
    write_call_result_110762 = invoke(stypy.reporting.localization.Localization(__file__, 2029, 8), write_110757, *[result_mod_110760], **kwargs_110761)
    
    # SSA branch for the else part of an if statement (line 2028)
    module_type_store.open_ssa_branch('else')
    
    # Call to write(...): (line 2031)
    # Processing the call arguments (line 2031)
    str_110765 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2031, 21), 'str', '%s')
    # Getting the type of 'mesg' (line 2031)
    mesg_110766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2031, 28), 'mesg', False)
    # Applying the binary operator '%' (line 2031)
    result_mod_110767 = python_operator(stypy.reporting.localization.Localization(__file__, 2031, 21), '%', str_110765, mesg_110766)
    
    # Processing the call keyword arguments (line 2031)
    kwargs_110768 = {}
    # Getting the type of 'device' (line 2031)
    device_110763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2031, 8), 'device', False)
    # Obtaining the member 'write' of a type (line 2031)
    write_110764 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2031, 8), device_110763, 'write')
    # Calling write(args, kwargs) (line 2031)
    write_call_result_110769 = invoke(stypy.reporting.localization.Localization(__file__, 2031, 8), write_110764, *[result_mod_110767], **kwargs_110768)
    
    # SSA join for if statement (line 2028)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to flush(...): (line 2032)
    # Processing the call keyword arguments (line 2032)
    kwargs_110772 = {}
    # Getting the type of 'device' (line 2032)
    device_110770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2032, 4), 'device', False)
    # Obtaining the member 'flush' of a type (line 2032)
    flush_110771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2032, 4), device_110770, 'flush')
    # Calling flush(args, kwargs) (line 2032)
    flush_call_result_110773 = invoke(stypy.reporting.localization.Localization(__file__, 2032, 4), flush_110771, *[], **kwargs_110772)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2033)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2033, 4), 'stypy_return_type', types.NoneType)
    
    # ################# End of 'disp(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'disp' in the type store
    # Getting the type of 'stypy_return_type' (line 1994)
    stypy_return_type_110774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1994, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_110774)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'disp'
    return stypy_return_type_110774

# Assigning a type to the variable 'disp' (line 1994)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1994, 0), 'disp', disp)
# Declaration of the 'vectorize' class

class vectorize(object, ):
    str_110775 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2149, (-1)), 'str', '\n    vectorize(pyfunc, otypes=\'\', doc=None, excluded=None, cache=False)\n\n    Generalized function class.\n\n    Define a vectorized function which takes a nested sequence\n    of objects or numpy arrays as inputs and returns a\n    numpy array as output. The vectorized function evaluates `pyfunc` over\n    successive tuples of the input arrays like the python map function,\n    except it uses the broadcasting rules of numpy.\n\n    The data type of the output of `vectorized` is determined by calling\n    the function with the first element of the input.  This can be avoided\n    by specifying the `otypes` argument.\n\n    Parameters\n    ----------\n    pyfunc : callable\n        A python function or method.\n    otypes : str or list of dtypes, optional\n        The output data type. It must be specified as either a string of\n        typecode characters or a list of data type specifiers. There should\n        be one data type specifier for each output.\n    doc : str, optional\n        The docstring for the function. If `None`, the docstring will be the\n        ``pyfunc.__doc__``.\n    excluded : set, optional\n        Set of strings or integers representing the positional or keyword\n        arguments for which the function will not be vectorized.  These will be\n        passed directly to `pyfunc` unmodified.\n\n        .. versionadded:: 1.7.0\n\n    cache : bool, optional\n       If `True`, then cache the first function call that determines the number\n       of outputs if `otypes` is not provided.\n\n        .. versionadded:: 1.7.0\n\n    Returns\n    -------\n    vectorized : callable\n        Vectorized function.\n\n    Examples\n    --------\n    >>> def myfunc(a, b):\n    ...     "Return a-b if a>b, otherwise return a+b"\n    ...     if a > b:\n    ...         return a - b\n    ...     else:\n    ...         return a + b\n\n    >>> vfunc = np.vectorize(myfunc)\n    >>> vfunc([1, 2, 3, 4], 2)\n    array([3, 4, 1, 2])\n\n    The docstring is taken from the input function to `vectorize` unless it\n    is specified\n\n    >>> vfunc.__doc__\n    \'Return a-b if a>b, otherwise return a+b\'\n    >>> vfunc = np.vectorize(myfunc, doc=\'Vectorized `myfunc`\')\n    >>> vfunc.__doc__\n    \'Vectorized `myfunc`\'\n\n    The output type is determined by evaluating the first element of the input,\n    unless it is specified\n\n    >>> out = vfunc([1, 2, 3, 4], 2)\n    >>> type(out[0])\n    <type \'numpy.int32\'>\n    >>> vfunc = np.vectorize(myfunc, otypes=[np.float])\n    >>> out = vfunc([1, 2, 3, 4], 2)\n    >>> type(out[0])\n    <type \'numpy.float64\'>\n\n    The `excluded` argument can be used to prevent vectorizing over certain\n    arguments.  This can be useful for array-like arguments of a fixed length\n    such as the coefficients for a polynomial as in `polyval`:\n\n    >>> def mypolyval(p, x):\n    ...     _p = list(p)\n    ...     res = _p.pop(0)\n    ...     while _p:\n    ...         res = res*x + _p.pop(0)\n    ...     return res\n    >>> vpolyval = np.vectorize(mypolyval, excluded=[\'p\'])\n    >>> vpolyval(p=[1, 2, 3], x=[0, 1])\n    array([3, 6])\n\n    Positional arguments may also be excluded by specifying their position:\n\n    >>> vpolyval.excluded.add(0)\n    >>> vpolyval([1, 2, 3], x=[0, 1])\n    array([3, 6])\n\n    Notes\n    -----\n    The `vectorize` function is provided primarily for convenience, not for\n    performance. The implementation is essentially a for loop.\n\n    If `otypes` is not specified, then a call to the function with the\n    first argument will be used to determine the number of outputs.  The\n    results of this call will be cached if `cache` is `True` to prevent\n    calling the function twice.  However, to implement the cache, the\n    original function must be wrapped which will slow down subsequent\n    calls, so only do this if your function is expensive.\n\n    The new keyword argument interface and `excluded` argument support\n    further degrades performance.\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        str_110776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2151, 38), 'str', '')
        # Getting the type of 'None' (line 2151)
        None_110777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2151, 46), 'None')
        # Getting the type of 'None' (line 2151)
        None_110778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2151, 61), 'None')
        # Getting the type of 'False' (line 2152)
        False_110779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2152, 23), 'False')
        defaults = [str_110776, None_110777, None_110778, False_110779]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2151, 4, False)
        # Assigning a type to the variable 'self' (line 2152)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2152, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'vectorize.__init__', ['pyfunc', 'otypes', 'doc', 'excluded', 'cache'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['pyfunc', 'otypes', 'doc', 'excluded', 'cache'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Name to a Attribute (line 2153):
        
        # Assigning a Name to a Attribute (line 2153):
        # Getting the type of 'pyfunc' (line 2153)
        pyfunc_110780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2153, 22), 'pyfunc')
        # Getting the type of 'self' (line 2153)
        self_110781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2153, 8), 'self')
        # Setting the type of the member 'pyfunc' of a type (line 2153)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2153, 8), self_110781, 'pyfunc', pyfunc_110780)
        
        # Assigning a Name to a Attribute (line 2154):
        
        # Assigning a Name to a Attribute (line 2154):
        # Getting the type of 'cache' (line 2154)
        cache_110782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2154, 21), 'cache')
        # Getting the type of 'self' (line 2154)
        self_110783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2154, 8), 'self')
        # Setting the type of the member 'cache' of a type (line 2154)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2154, 8), self_110783, 'cache', cache_110782)
        
        # Assigning a Name to a Attribute (line 2155):
        
        # Assigning a Name to a Attribute (line 2155):
        # Getting the type of 'None' (line 2155)
        None_110784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2155, 22), 'None')
        # Getting the type of 'self' (line 2155)
        self_110785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2155, 8), 'self')
        # Setting the type of the member '_ufunc' of a type (line 2155)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2155, 8), self_110785, '_ufunc', None_110784)
        
        # Type idiom detected: calculating its left and rigth part (line 2157)
        # Getting the type of 'doc' (line 2157)
        doc_110786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2157, 11), 'doc')
        # Getting the type of 'None' (line 2157)
        None_110787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2157, 18), 'None')
        
        (may_be_110788, more_types_in_union_110789) = may_be_none(doc_110786, None_110787)

        if may_be_110788:

            if more_types_in_union_110789:
                # Runtime conditional SSA (line 2157)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Attribute (line 2158):
            
            # Assigning a Attribute to a Attribute (line 2158):
            # Getting the type of 'pyfunc' (line 2158)
            pyfunc_110790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2158, 27), 'pyfunc')
            # Obtaining the member '__doc__' of a type (line 2158)
            doc___110791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2158, 27), pyfunc_110790, '__doc__')
            # Getting the type of 'self' (line 2158)
            self_110792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2158, 12), 'self')
            # Setting the type of the member '__doc__' of a type (line 2158)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2158, 12), self_110792, '__doc__', doc___110791)

            if more_types_in_union_110789:
                # Runtime conditional SSA for else branch (line 2157)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_110788) or more_types_in_union_110789):
            
            # Assigning a Name to a Attribute (line 2160):
            
            # Assigning a Name to a Attribute (line 2160):
            # Getting the type of 'doc' (line 2160)
            doc_110793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2160, 27), 'doc')
            # Getting the type of 'self' (line 2160)
            self_110794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2160, 12), 'self')
            # Setting the type of the member '__doc__' of a type (line 2160)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2160, 12), self_110794, '__doc__', doc_110793)

            if (may_be_110788 and more_types_in_union_110789):
                # SSA join for if statement (line 2157)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 2162)
        # Getting the type of 'str' (line 2162)
        str_110795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2162, 30), 'str')
        # Getting the type of 'otypes' (line 2162)
        otypes_110796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2162, 22), 'otypes')
        
        (may_be_110797, more_types_in_union_110798) = may_be_subtype(str_110795, otypes_110796)

        if may_be_110797:

            if more_types_in_union_110798:
                # Runtime conditional SSA (line 2162)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'otypes' (line 2162)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2162, 8), 'otypes', remove_not_subtype_from_union(otypes_110796, str))
            
            # Assigning a Name to a Attribute (line 2163):
            
            # Assigning a Name to a Attribute (line 2163):
            # Getting the type of 'otypes' (line 2163)
            otypes_110799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2163, 26), 'otypes')
            # Getting the type of 'self' (line 2163)
            self_110800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2163, 12), 'self')
            # Setting the type of the member 'otypes' of a type (line 2163)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2163, 12), self_110800, 'otypes', otypes_110799)
            
            # Getting the type of 'self' (line 2164)
            self_110801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2164, 24), 'self')
            # Obtaining the member 'otypes' of a type (line 2164)
            otypes_110802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2164, 24), self_110801, 'otypes')
            # Testing the type of a for loop iterable (line 2164)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2164, 12), otypes_110802)
            # Getting the type of the for loop variable (line 2164)
            for_loop_var_110803 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2164, 12), otypes_110802)
            # Assigning a type to the variable 'char' (line 2164)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2164, 12), 'char', for_loop_var_110803)
            # SSA begins for a for statement (line 2164)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            
            # Getting the type of 'char' (line 2165)
            char_110804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2165, 19), 'char')
            
            # Obtaining the type of the subscript
            str_110805 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2165, 41), 'str', 'All')
            # Getting the type of 'typecodes' (line 2165)
            typecodes_110806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2165, 31), 'typecodes')
            # Obtaining the member '__getitem__' of a type (line 2165)
            getitem___110807 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2165, 31), typecodes_110806, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2165)
            subscript_call_result_110808 = invoke(stypy.reporting.localization.Localization(__file__, 2165, 31), getitem___110807, str_110805)
            
            # Applying the binary operator 'notin' (line 2165)
            result_contains_110809 = python_operator(stypy.reporting.localization.Localization(__file__, 2165, 19), 'notin', char_110804, subscript_call_result_110808)
            
            # Testing the type of an if condition (line 2165)
            if_condition_110810 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2165, 16), result_contains_110809)
            # Assigning a type to the variable 'if_condition_110810' (line 2165)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2165, 16), 'if_condition_110810', if_condition_110810)
            # SSA begins for if statement (line 2165)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to ValueError(...): (line 2166)
            # Processing the call arguments (line 2166)
            str_110812 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2167, 24), 'str', 'Invalid otype specified: %s')
            
            # Obtaining an instance of the builtin type 'tuple' (line 2167)
            tuple_110813 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2167, 57), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2167)
            # Adding element type (line 2167)
            # Getting the type of 'char' (line 2167)
            char_110814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2167, 57), 'char', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2167, 57), tuple_110813, char_110814)
            
            # Applying the binary operator '%' (line 2167)
            result_mod_110815 = python_operator(stypy.reporting.localization.Localization(__file__, 2167, 24), '%', str_110812, tuple_110813)
            
            # Processing the call keyword arguments (line 2166)
            kwargs_110816 = {}
            # Getting the type of 'ValueError' (line 2166)
            ValueError_110811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2166, 26), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 2166)
            ValueError_call_result_110817 = invoke(stypy.reporting.localization.Localization(__file__, 2166, 26), ValueError_110811, *[result_mod_110815], **kwargs_110816)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2166, 20), ValueError_call_result_110817, 'raise parameter', BaseException)
            # SSA join for if statement (line 2165)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_110798:
                # Runtime conditional SSA for else branch (line 2162)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_110797) or more_types_in_union_110798):
            # Assigning a type to the variable 'otypes' (line 2162)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2162, 8), 'otypes', remove_subtype_from_union(otypes_110796, str))
            
            
            # Call to iterable(...): (line 2168)
            # Processing the call arguments (line 2168)
            # Getting the type of 'otypes' (line 2168)
            otypes_110819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2168, 22), 'otypes', False)
            # Processing the call keyword arguments (line 2168)
            kwargs_110820 = {}
            # Getting the type of 'iterable' (line 2168)
            iterable_110818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2168, 13), 'iterable', False)
            # Calling iterable(args, kwargs) (line 2168)
            iterable_call_result_110821 = invoke(stypy.reporting.localization.Localization(__file__, 2168, 13), iterable_110818, *[otypes_110819], **kwargs_110820)
            
            # Testing the type of an if condition (line 2168)
            if_condition_110822 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2168, 13), iterable_call_result_110821)
            # Assigning a type to the variable 'if_condition_110822' (line 2168)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2168, 13), 'if_condition_110822', if_condition_110822)
            # SSA begins for if statement (line 2168)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Attribute (line 2169):
            
            # Assigning a Call to a Attribute (line 2169):
            
            # Call to join(...): (line 2169)
            # Processing the call arguments (line 2169)
            # Calculating list comprehension
            # Calculating comprehension expression
            # Getting the type of 'otypes' (line 2169)
            otypes_110831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2169, 62), 'otypes', False)
            comprehension_110832 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2169, 35), otypes_110831)
            # Assigning a type to the variable 'x' (line 2169)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2169, 35), 'x', comprehension_110832)
            
            # Call to dtype(...): (line 2169)
            # Processing the call arguments (line 2169)
            # Getting the type of 'x' (line 2169)
            x_110827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2169, 45), 'x', False)
            # Processing the call keyword arguments (line 2169)
            kwargs_110828 = {}
            # Getting the type of '_nx' (line 2169)
            _nx_110825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2169, 35), '_nx', False)
            # Obtaining the member 'dtype' of a type (line 2169)
            dtype_110826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2169, 35), _nx_110825, 'dtype')
            # Calling dtype(args, kwargs) (line 2169)
            dtype_call_result_110829 = invoke(stypy.reporting.localization.Localization(__file__, 2169, 35), dtype_110826, *[x_110827], **kwargs_110828)
            
            # Obtaining the member 'char' of a type (line 2169)
            char_110830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2169, 35), dtype_call_result_110829, 'char')
            list_110833 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2169, 35), 'list')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2169, 35), list_110833, char_110830)
            # Processing the call keyword arguments (line 2169)
            kwargs_110834 = {}
            str_110823 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2169, 26), 'str', '')
            # Obtaining the member 'join' of a type (line 2169)
            join_110824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2169, 26), str_110823, 'join')
            # Calling join(args, kwargs) (line 2169)
            join_call_result_110835 = invoke(stypy.reporting.localization.Localization(__file__, 2169, 26), join_110824, *[list_110833], **kwargs_110834)
            
            # Getting the type of 'self' (line 2169)
            self_110836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2169, 12), 'self')
            # Setting the type of the member 'otypes' of a type (line 2169)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2169, 12), self_110836, 'otypes', join_call_result_110835)
            # SSA branch for the else part of an if statement (line 2168)
            module_type_store.open_ssa_branch('else')
            
            # Call to ValueError(...): (line 2171)
            # Processing the call arguments (line 2171)
            str_110838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2172, 16), 'str', 'Invalid otype specification')
            # Processing the call keyword arguments (line 2171)
            kwargs_110839 = {}
            # Getting the type of 'ValueError' (line 2171)
            ValueError_110837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2171, 18), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 2171)
            ValueError_call_result_110840 = invoke(stypy.reporting.localization.Localization(__file__, 2171, 18), ValueError_110837, *[str_110838], **kwargs_110839)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2171, 12), ValueError_call_result_110840, 'raise parameter', BaseException)
            # SSA join for if statement (line 2168)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_110797 and more_types_in_union_110798):
                # SSA join for if statement (line 2162)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 2175)
        # Getting the type of 'excluded' (line 2175)
        excluded_110841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2175, 11), 'excluded')
        # Getting the type of 'None' (line 2175)
        None_110842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2175, 23), 'None')
        
        (may_be_110843, more_types_in_union_110844) = may_be_none(excluded_110841, None_110842)

        if may_be_110843:

            if more_types_in_union_110844:
                # Runtime conditional SSA (line 2175)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 2176):
            
            # Assigning a Call to a Name (line 2176):
            
            # Call to set(...): (line 2176)
            # Processing the call keyword arguments (line 2176)
            kwargs_110846 = {}
            # Getting the type of 'set' (line 2176)
            set_110845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2176, 23), 'set', False)
            # Calling set(args, kwargs) (line 2176)
            set_call_result_110847 = invoke(stypy.reporting.localization.Localization(__file__, 2176, 23), set_110845, *[], **kwargs_110846)
            
            # Assigning a type to the variable 'excluded' (line 2176)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2176, 12), 'excluded', set_call_result_110847)

            if more_types_in_union_110844:
                # SSA join for if statement (line 2175)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Attribute (line 2177):
        
        # Assigning a Call to a Attribute (line 2177):
        
        # Call to set(...): (line 2177)
        # Processing the call arguments (line 2177)
        # Getting the type of 'excluded' (line 2177)
        excluded_110849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2177, 28), 'excluded', False)
        # Processing the call keyword arguments (line 2177)
        kwargs_110850 = {}
        # Getting the type of 'set' (line 2177)
        set_110848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2177, 24), 'set', False)
        # Calling set(args, kwargs) (line 2177)
        set_call_result_110851 = invoke(stypy.reporting.localization.Localization(__file__, 2177, 24), set_110848, *[excluded_110849], **kwargs_110850)
        
        # Getting the type of 'self' (line 2177)
        self_110852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2177, 8), 'self')
        # Setting the type of the member 'excluded' of a type (line 2177)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2177, 8), self_110852, 'excluded', set_call_result_110851)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 2179, 4, False)
        # Assigning a type to the variable 'self' (line 2180)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2180, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        vectorize.__call__.__dict__.__setitem__('stypy_localization', localization)
        vectorize.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        vectorize.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        vectorize.__call__.__dict__.__setitem__('stypy_function_name', 'vectorize.__call__')
        vectorize.__call__.__dict__.__setitem__('stypy_param_names_list', [])
        vectorize.__call__.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        vectorize.__call__.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        vectorize.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        vectorize.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        vectorize.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        vectorize.__call__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'vectorize.__call__', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        str_110853 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2183, (-1)), 'str', '\n        Return arrays with the results of `pyfunc` broadcast (vectorized) over\n        `args` and `kwargs` not in `excluded`.\n        ')
        
        # Assigning a Attribute to a Name (line 2184):
        
        # Assigning a Attribute to a Name (line 2184):
        # Getting the type of 'self' (line 2184)
        self_110854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2184, 19), 'self')
        # Obtaining the member 'excluded' of a type (line 2184)
        excluded_110855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2184, 19), self_110854, 'excluded')
        # Assigning a type to the variable 'excluded' (line 2184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2184, 8), 'excluded', excluded_110855)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'kwargs' (line 2185)
        kwargs_110856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 15), 'kwargs')
        # Applying the 'not' unary operator (line 2185)
        result_not__110857 = python_operator(stypy.reporting.localization.Localization(__file__, 2185, 11), 'not', kwargs_110856)
        
        
        # Getting the type of 'excluded' (line 2185)
        excluded_110858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 30), 'excluded')
        # Applying the 'not' unary operator (line 2185)
        result_not__110859 = python_operator(stypy.reporting.localization.Localization(__file__, 2185, 26), 'not', excluded_110858)
        
        # Applying the binary operator 'and' (line 2185)
        result_and_keyword_110860 = python_operator(stypy.reporting.localization.Localization(__file__, 2185, 11), 'and', result_not__110857, result_not__110859)
        
        # Testing the type of an if condition (line 2185)
        if_condition_110861 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2185, 8), result_and_keyword_110860)
        # Assigning a type to the variable 'if_condition_110861' (line 2185)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2185, 8), 'if_condition_110861', if_condition_110861)
        # SSA begins for if statement (line 2185)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 2186):
        
        # Assigning a Attribute to a Name (line 2186):
        # Getting the type of 'self' (line 2186)
        self_110862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2186, 19), 'self')
        # Obtaining the member 'pyfunc' of a type (line 2186)
        pyfunc_110863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2186, 19), self_110862, 'pyfunc')
        # Assigning a type to the variable 'func' (line 2186)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2186, 12), 'func', pyfunc_110863)
        
        # Assigning a Name to a Name (line 2187):
        
        # Assigning a Name to a Name (line 2187):
        # Getting the type of 'args' (line 2187)
        args_110864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2187, 20), 'args')
        # Assigning a type to the variable 'vargs' (line 2187)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2187, 12), 'vargs', args_110864)
        # SSA branch for the else part of an if statement (line 2185)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 2192):
        
        # Assigning a Call to a Name (line 2192):
        
        # Call to len(...): (line 2192)
        # Processing the call arguments (line 2192)
        # Getting the type of 'args' (line 2192)
        args_110866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2192, 24), 'args', False)
        # Processing the call keyword arguments (line 2192)
        kwargs_110867 = {}
        # Getting the type of 'len' (line 2192)
        len_110865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2192, 20), 'len', False)
        # Calling len(args, kwargs) (line 2192)
        len_call_result_110868 = invoke(stypy.reporting.localization.Localization(__file__, 2192, 20), len_110865, *[args_110866], **kwargs_110867)
        
        # Assigning a type to the variable 'nargs' (line 2192)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2192, 12), 'nargs', len_call_result_110868)
        
        # Assigning a ListComp to a Name (line 2194):
        
        # Assigning a ListComp to a Name (line 2194):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'kwargs' (line 2194)
        kwargs_110873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2194, 34), 'kwargs')
        comprehension_110874 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2194, 21), kwargs_110873)
        # Assigning a type to the variable '_n' (line 2194)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2194, 21), '_n', comprehension_110874)
        
        # Getting the type of '_n' (line 2194)
        _n_110870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2194, 44), '_n')
        # Getting the type of 'excluded' (line 2194)
        excluded_110871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2194, 54), 'excluded')
        # Applying the binary operator 'notin' (line 2194)
        result_contains_110872 = python_operator(stypy.reporting.localization.Localization(__file__, 2194, 44), 'notin', _n_110870, excluded_110871)
        
        # Getting the type of '_n' (line 2194)
        _n_110869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2194, 21), '_n')
        list_110875 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2194, 21), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2194, 21), list_110875, _n_110869)
        # Assigning a type to the variable 'names' (line 2194)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2194, 12), 'names', list_110875)
        
        # Assigning a ListComp to a Name (line 2195):
        
        # Assigning a ListComp to a Name (line 2195):
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to range(...): (line 2195)
        # Processing the call arguments (line 2195)
        # Getting the type of 'nargs' (line 2195)
        nargs_110881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 39), 'nargs', False)
        # Processing the call keyword arguments (line 2195)
        kwargs_110882 = {}
        # Getting the type of 'range' (line 2195)
        range_110880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 33), 'range', False)
        # Calling range(args, kwargs) (line 2195)
        range_call_result_110883 = invoke(stypy.reporting.localization.Localization(__file__, 2195, 33), range_110880, *[nargs_110881], **kwargs_110882)
        
        comprehension_110884 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2195, 20), range_call_result_110883)
        # Assigning a type to the variable '_i' (line 2195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2195, 20), '_i', comprehension_110884)
        
        # Getting the type of '_i' (line 2195)
        _i_110877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 49), '_i')
        # Getting the type of 'excluded' (line 2195)
        excluded_110878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 59), 'excluded')
        # Applying the binary operator 'notin' (line 2195)
        result_contains_110879 = python_operator(stypy.reporting.localization.Localization(__file__, 2195, 49), 'notin', _i_110877, excluded_110878)
        
        # Getting the type of '_i' (line 2195)
        _i_110876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2195, 20), '_i')
        list_110885 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2195, 20), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2195, 20), list_110885, _i_110876)
        # Assigning a type to the variable 'inds' (line 2195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2195, 12), 'inds', list_110885)
        
        # Assigning a Call to a Name (line 2196):
        
        # Assigning a Call to a Name (line 2196):
        
        # Call to list(...): (line 2196)
        # Processing the call arguments (line 2196)
        # Getting the type of 'args' (line 2196)
        args_110887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2196, 28), 'args', False)
        # Processing the call keyword arguments (line 2196)
        kwargs_110888 = {}
        # Getting the type of 'list' (line 2196)
        list_110886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2196, 23), 'list', False)
        # Calling list(args, kwargs) (line 2196)
        list_call_result_110889 = invoke(stypy.reporting.localization.Localization(__file__, 2196, 23), list_110886, *[args_110887], **kwargs_110888)
        
        # Assigning a type to the variable 'the_args' (line 2196)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2196, 12), 'the_args', list_call_result_110889)

        @norecursion
        def func(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'func'
            module_type_store = module_type_store.open_function_context('func', 2198, 12, False)
            
            # Passed parameters checking function
            func.stypy_localization = localization
            func.stypy_type_of_self = None
            func.stypy_type_store = module_type_store
            func.stypy_function_name = 'func'
            func.stypy_param_names_list = []
            func.stypy_varargs_param_name = 'vargs'
            func.stypy_kwargs_param_name = None
            func.stypy_call_defaults = defaults
            func.stypy_call_varargs = varargs
            func.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'func', [], 'vargs', None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'func', localization, [], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'func(...)' code ##################

            
            
            # Call to enumerate(...): (line 2199)
            # Processing the call arguments (line 2199)
            # Getting the type of 'inds' (line 2199)
            inds_110891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2199, 40), 'inds', False)
            # Processing the call keyword arguments (line 2199)
            kwargs_110892 = {}
            # Getting the type of 'enumerate' (line 2199)
            enumerate_110890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2199, 30), 'enumerate', False)
            # Calling enumerate(args, kwargs) (line 2199)
            enumerate_call_result_110893 = invoke(stypy.reporting.localization.Localization(__file__, 2199, 30), enumerate_110890, *[inds_110891], **kwargs_110892)
            
            # Testing the type of a for loop iterable (line 2199)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2199, 16), enumerate_call_result_110893)
            # Getting the type of the for loop variable (line 2199)
            for_loop_var_110894 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2199, 16), enumerate_call_result_110893)
            # Assigning a type to the variable '_n' (line 2199)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2199, 16), '_n', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2199, 16), for_loop_var_110894))
            # Assigning a type to the variable '_i' (line 2199)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2199, 16), '_i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2199, 16), for_loop_var_110894))
            # SSA begins for a for statement (line 2199)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            # Assigning a Subscript to a Subscript (line 2200):
            
            # Assigning a Subscript to a Subscript (line 2200):
            
            # Obtaining the type of the subscript
            # Getting the type of '_n' (line 2200)
            _n_110895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2200, 41), '_n')
            # Getting the type of 'vargs' (line 2200)
            vargs_110896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2200, 35), 'vargs')
            # Obtaining the member '__getitem__' of a type (line 2200)
            getitem___110897 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2200, 35), vargs_110896, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2200)
            subscript_call_result_110898 = invoke(stypy.reporting.localization.Localization(__file__, 2200, 35), getitem___110897, _n_110895)
            
            # Getting the type of 'the_args' (line 2200)
            the_args_110899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2200, 20), 'the_args')
            # Getting the type of '_i' (line 2200)
            _i_110900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2200, 29), '_i')
            # Storing an element on a container (line 2200)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2200, 20), the_args_110899, (_i_110900, subscript_call_result_110898))
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Call to update(...): (line 2201)
            # Processing the call arguments (line 2201)
            
            # Call to zip(...): (line 2201)
            # Processing the call arguments (line 2201)
            # Getting the type of 'names' (line 2201)
            names_110904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2201, 34), 'names', False)
            
            # Obtaining the type of the subscript
            
            # Call to len(...): (line 2201)
            # Processing the call arguments (line 2201)
            # Getting the type of 'inds' (line 2201)
            inds_110906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2201, 51), 'inds', False)
            # Processing the call keyword arguments (line 2201)
            kwargs_110907 = {}
            # Getting the type of 'len' (line 2201)
            len_110905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2201, 47), 'len', False)
            # Calling len(args, kwargs) (line 2201)
            len_call_result_110908 = invoke(stypy.reporting.localization.Localization(__file__, 2201, 47), len_110905, *[inds_110906], **kwargs_110907)
            
            slice_110909 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2201, 41), len_call_result_110908, None, None)
            # Getting the type of 'vargs' (line 2201)
            vargs_110910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2201, 41), 'vargs', False)
            # Obtaining the member '__getitem__' of a type (line 2201)
            getitem___110911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2201, 41), vargs_110910, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 2201)
            subscript_call_result_110912 = invoke(stypy.reporting.localization.Localization(__file__, 2201, 41), getitem___110911, slice_110909)
            
            # Processing the call keyword arguments (line 2201)
            kwargs_110913 = {}
            # Getting the type of 'zip' (line 2201)
            zip_110903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2201, 30), 'zip', False)
            # Calling zip(args, kwargs) (line 2201)
            zip_call_result_110914 = invoke(stypy.reporting.localization.Localization(__file__, 2201, 30), zip_110903, *[names_110904, subscript_call_result_110912], **kwargs_110913)
            
            # Processing the call keyword arguments (line 2201)
            kwargs_110915 = {}
            # Getting the type of 'kwargs' (line 2201)
            kwargs_110901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2201, 16), 'kwargs', False)
            # Obtaining the member 'update' of a type (line 2201)
            update_110902 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2201, 16), kwargs_110901, 'update')
            # Calling update(args, kwargs) (line 2201)
            update_call_result_110916 = invoke(stypy.reporting.localization.Localization(__file__, 2201, 16), update_110902, *[zip_call_result_110914], **kwargs_110915)
            
            
            # Call to pyfunc(...): (line 2202)
            # Getting the type of 'the_args' (line 2202)
            the_args_110919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2202, 36), 'the_args', False)
            # Processing the call keyword arguments (line 2202)
            # Getting the type of 'kwargs' (line 2202)
            kwargs_110920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2202, 48), 'kwargs', False)
            kwargs_110921 = {'kwargs_110920': kwargs_110920}
            # Getting the type of 'self' (line 2202)
            self_110917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2202, 23), 'self', False)
            # Obtaining the member 'pyfunc' of a type (line 2202)
            pyfunc_110918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2202, 23), self_110917, 'pyfunc')
            # Calling pyfunc(args, kwargs) (line 2202)
            pyfunc_call_result_110922 = invoke(stypy.reporting.localization.Localization(__file__, 2202, 23), pyfunc_110918, *[the_args_110919], **kwargs_110921)
            
            # Assigning a type to the variable 'stypy_return_type' (line 2202)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2202, 16), 'stypy_return_type', pyfunc_call_result_110922)
            
            # ################# End of 'func(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'func' in the type store
            # Getting the type of 'stypy_return_type' (line 2198)
            stypy_return_type_110923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2198, 12), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_110923)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'func'
            return stypy_return_type_110923

        # Assigning a type to the variable 'func' (line 2198)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2198, 12), 'func', func)
        
        # Assigning a ListComp to a Name (line 2204):
        
        # Assigning a ListComp to a Name (line 2204):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'inds' (line 2204)
        inds_110928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2204, 40), 'inds')
        comprehension_110929 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2204, 21), inds_110928)
        # Assigning a type to the variable '_i' (line 2204)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2204, 21), '_i', comprehension_110929)
        
        # Obtaining the type of the subscript
        # Getting the type of '_i' (line 2204)
        _i_110924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2204, 26), '_i')
        # Getting the type of 'args' (line 2204)
        args_110925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2204, 21), 'args')
        # Obtaining the member '__getitem__' of a type (line 2204)
        getitem___110926 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2204, 21), args_110925, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2204)
        subscript_call_result_110927 = invoke(stypy.reporting.localization.Localization(__file__, 2204, 21), getitem___110926, _i_110924)
        
        list_110930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2204, 21), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2204, 21), list_110930, subscript_call_result_110927)
        # Assigning a type to the variable 'vargs' (line 2204)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2204, 12), 'vargs', list_110930)
        
        # Call to extend(...): (line 2205)
        # Processing the call arguments (line 2205)
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'names' (line 2205)
        names_110937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2205, 47), 'names', False)
        comprehension_110938 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2205, 26), names_110937)
        # Assigning a type to the variable '_n' (line 2205)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2205, 26), '_n', comprehension_110938)
        
        # Obtaining the type of the subscript
        # Getting the type of '_n' (line 2205)
        _n_110933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2205, 33), '_n', False)
        # Getting the type of 'kwargs' (line 2205)
        kwargs_110934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2205, 26), 'kwargs', False)
        # Obtaining the member '__getitem__' of a type (line 2205)
        getitem___110935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2205, 26), kwargs_110934, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2205)
        subscript_call_result_110936 = invoke(stypy.reporting.localization.Localization(__file__, 2205, 26), getitem___110935, _n_110933)
        
        list_110939 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2205, 26), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2205, 26), list_110939, subscript_call_result_110936)
        # Processing the call keyword arguments (line 2205)
        kwargs_110940 = {}
        # Getting the type of 'vargs' (line 2205)
        vargs_110931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2205, 12), 'vargs', False)
        # Obtaining the member 'extend' of a type (line 2205)
        extend_110932 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2205, 12), vargs_110931, 'extend')
        # Calling extend(args, kwargs) (line 2205)
        extend_call_result_110941 = invoke(stypy.reporting.localization.Localization(__file__, 2205, 12), extend_110932, *[list_110939], **kwargs_110940)
        
        # SSA join for if statement (line 2185)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _vectorize_call(...): (line 2207)
        # Processing the call keyword arguments (line 2207)
        # Getting the type of 'func' (line 2207)
        func_110944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2207, 41), 'func', False)
        keyword_110945 = func_110944
        # Getting the type of 'vargs' (line 2207)
        vargs_110946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2207, 52), 'vargs', False)
        keyword_110947 = vargs_110946
        kwargs_110948 = {'args': keyword_110947, 'func': keyword_110945}
        # Getting the type of 'self' (line 2207)
        self_110942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2207, 15), 'self', False)
        # Obtaining the member '_vectorize_call' of a type (line 2207)
        _vectorize_call_110943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2207, 15), self_110942, '_vectorize_call')
        # Calling _vectorize_call(args, kwargs) (line 2207)
        _vectorize_call_call_result_110949 = invoke(stypy.reporting.localization.Localization(__file__, 2207, 15), _vectorize_call_110943, *[], **kwargs_110948)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2207)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2207, 8), 'stypy_return_type', _vectorize_call_call_result_110949)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 2179)
        stypy_return_type_110950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2179, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_110950)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_110950


    @norecursion
    def _get_ufunc_and_otypes(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_ufunc_and_otypes'
        module_type_store = module_type_store.open_function_context('_get_ufunc_and_otypes', 2209, 4, False)
        # Assigning a type to the variable 'self' (line 2210)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2210, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        vectorize._get_ufunc_and_otypes.__dict__.__setitem__('stypy_localization', localization)
        vectorize._get_ufunc_and_otypes.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        vectorize._get_ufunc_and_otypes.__dict__.__setitem__('stypy_type_store', module_type_store)
        vectorize._get_ufunc_and_otypes.__dict__.__setitem__('stypy_function_name', 'vectorize._get_ufunc_and_otypes')
        vectorize._get_ufunc_and_otypes.__dict__.__setitem__('stypy_param_names_list', ['func', 'args'])
        vectorize._get_ufunc_and_otypes.__dict__.__setitem__('stypy_varargs_param_name', None)
        vectorize._get_ufunc_and_otypes.__dict__.__setitem__('stypy_kwargs_param_name', None)
        vectorize._get_ufunc_and_otypes.__dict__.__setitem__('stypy_call_defaults', defaults)
        vectorize._get_ufunc_and_otypes.__dict__.__setitem__('stypy_call_varargs', varargs)
        vectorize._get_ufunc_and_otypes.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        vectorize._get_ufunc_and_otypes.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'vectorize._get_ufunc_and_otypes', ['func', 'args'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_ufunc_and_otypes', localization, ['func', 'args'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_ufunc_and_otypes(...)' code ##################

        str_110951 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2210, 8), 'str', 'Return (ufunc, otypes).')
        
        
        # Getting the type of 'args' (line 2212)
        args_110952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2212, 15), 'args')
        # Applying the 'not' unary operator (line 2212)
        result_not__110953 = python_operator(stypy.reporting.localization.Localization(__file__, 2212, 11), 'not', args_110952)
        
        # Testing the type of an if condition (line 2212)
        if_condition_110954 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2212, 8), result_not__110953)
        # Assigning a type to the variable 'if_condition_110954' (line 2212)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2212, 8), 'if_condition_110954', if_condition_110954)
        # SSA begins for if statement (line 2212)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 2213)
        # Processing the call arguments (line 2213)
        str_110956 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2213, 29), 'str', 'args can not be empty')
        # Processing the call keyword arguments (line 2213)
        kwargs_110957 = {}
        # Getting the type of 'ValueError' (line 2213)
        ValueError_110955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2213, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2213)
        ValueError_call_result_110958 = invoke(stypy.reporting.localization.Localization(__file__, 2213, 18), ValueError_110955, *[str_110956], **kwargs_110957)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2213, 12), ValueError_call_result_110958, 'raise parameter', BaseException)
        # SSA join for if statement (line 2212)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 2215)
        self_110959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2215, 11), 'self')
        # Obtaining the member 'otypes' of a type (line 2215)
        otypes_110960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2215, 11), self_110959, 'otypes')
        # Testing the type of an if condition (line 2215)
        if_condition_110961 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2215, 8), otypes_110960)
        # Assigning a type to the variable 'if_condition_110961' (line 2215)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2215, 8), 'if_condition_110961', if_condition_110961)
        # SSA begins for if statement (line 2215)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 2216):
        
        # Assigning a Attribute to a Name (line 2216):
        # Getting the type of 'self' (line 2216)
        self_110962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2216, 21), 'self')
        # Obtaining the member 'otypes' of a type (line 2216)
        otypes_110963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2216, 21), self_110962, 'otypes')
        # Assigning a type to the variable 'otypes' (line 2216)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2216, 12), 'otypes', otypes_110963)
        
        # Assigning a Call to a Name (line 2217):
        
        # Assigning a Call to a Name (line 2217):
        
        # Call to len(...): (line 2217)
        # Processing the call arguments (line 2217)
        # Getting the type of 'otypes' (line 2217)
        otypes_110965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2217, 23), 'otypes', False)
        # Processing the call keyword arguments (line 2217)
        kwargs_110966 = {}
        # Getting the type of 'len' (line 2217)
        len_110964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2217, 19), 'len', False)
        # Calling len(args, kwargs) (line 2217)
        len_call_result_110967 = invoke(stypy.reporting.localization.Localization(__file__, 2217, 19), len_110964, *[otypes_110965], **kwargs_110966)
        
        # Assigning a type to the variable 'nout' (line 2217)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2217, 12), 'nout', len_call_result_110967)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'func' (line 2221)
        func_110968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2221, 15), 'func')
        # Getting the type of 'self' (line 2221)
        self_110969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2221, 23), 'self')
        # Obtaining the member 'pyfunc' of a type (line 2221)
        pyfunc_110970 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2221, 23), self_110969, 'pyfunc')
        # Applying the binary operator 'is' (line 2221)
        result_is__110971 = python_operator(stypy.reporting.localization.Localization(__file__, 2221, 15), 'is', func_110968, pyfunc_110970)
        
        
        # Getting the type of 'self' (line 2221)
        self_110972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2221, 39), 'self')
        # Obtaining the member '_ufunc' of a type (line 2221)
        _ufunc_110973 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2221, 39), self_110972, '_ufunc')
        # Getting the type of 'None' (line 2221)
        None_110974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2221, 58), 'None')
        # Applying the binary operator 'isnot' (line 2221)
        result_is_not_110975 = python_operator(stypy.reporting.localization.Localization(__file__, 2221, 39), 'isnot', _ufunc_110973, None_110974)
        
        # Applying the binary operator 'and' (line 2221)
        result_and_keyword_110976 = python_operator(stypy.reporting.localization.Localization(__file__, 2221, 15), 'and', result_is__110971, result_is_not_110975)
        
        # Testing the type of an if condition (line 2221)
        if_condition_110977 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2221, 12), result_and_keyword_110976)
        # Assigning a type to the variable 'if_condition_110977' (line 2221)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2221, 12), 'if_condition_110977', if_condition_110977)
        # SSA begins for if statement (line 2221)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 2222):
        
        # Assigning a Attribute to a Name (line 2222):
        # Getting the type of 'self' (line 2222)
        self_110978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2222, 24), 'self')
        # Obtaining the member '_ufunc' of a type (line 2222)
        _ufunc_110979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2222, 24), self_110978, '_ufunc')
        # Assigning a type to the variable 'ufunc' (line 2222)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2222, 16), 'ufunc', _ufunc_110979)
        # SSA branch for the else part of an if statement (line 2221)
        module_type_store.open_ssa_branch('else')
        
        # Multiple assignment of 2 elements.
        
        # Assigning a Call to a Attribute (line 2224):
        
        # Call to frompyfunc(...): (line 2224)
        # Processing the call arguments (line 2224)
        # Getting the type of 'func' (line 2224)
        func_110981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2224, 49), 'func', False)
        
        # Call to len(...): (line 2224)
        # Processing the call arguments (line 2224)
        # Getting the type of 'args' (line 2224)
        args_110983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2224, 59), 'args', False)
        # Processing the call keyword arguments (line 2224)
        kwargs_110984 = {}
        # Getting the type of 'len' (line 2224)
        len_110982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2224, 55), 'len', False)
        # Calling len(args, kwargs) (line 2224)
        len_call_result_110985 = invoke(stypy.reporting.localization.Localization(__file__, 2224, 55), len_110982, *[args_110983], **kwargs_110984)
        
        # Getting the type of 'nout' (line 2224)
        nout_110986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2224, 66), 'nout', False)
        # Processing the call keyword arguments (line 2224)
        kwargs_110987 = {}
        # Getting the type of 'frompyfunc' (line 2224)
        frompyfunc_110980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2224, 38), 'frompyfunc', False)
        # Calling frompyfunc(args, kwargs) (line 2224)
        frompyfunc_call_result_110988 = invoke(stypy.reporting.localization.Localization(__file__, 2224, 38), frompyfunc_110980, *[func_110981, len_call_result_110985, nout_110986], **kwargs_110987)
        
        # Getting the type of 'self' (line 2224)
        self_110989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2224, 24), 'self')
        # Setting the type of the member '_ufunc' of a type (line 2224)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2224, 24), self_110989, '_ufunc', frompyfunc_call_result_110988)
        
        # Assigning a Attribute to a Name (line 2224):
        # Getting the type of 'self' (line 2224)
        self_110990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2224, 24), 'self')
        # Obtaining the member '_ufunc' of a type (line 2224)
        _ufunc_110991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2224, 24), self_110990, '_ufunc')
        # Assigning a type to the variable 'ufunc' (line 2224)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2224, 16), 'ufunc', _ufunc_110991)
        # SSA join for if statement (line 2221)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 2215)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a ListComp to a Name (line 2231):
        
        # Assigning a ListComp to a Name (line 2231):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'args' (line 2231)
        args_111000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2231, 52), 'args')
        comprehension_111001 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2231, 22), args_111000)
        # Assigning a type to the variable '_a' (line 2231)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2231, 22), '_a', comprehension_111001)
        
        # Obtaining the type of the subscript
        int_110992 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2231, 39), 'int')
        
        # Call to asarray(...): (line 2231)
        # Processing the call arguments (line 2231)
        # Getting the type of '_a' (line 2231)
        _a_110994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2231, 30), '_a', False)
        # Processing the call keyword arguments (line 2231)
        kwargs_110995 = {}
        # Getting the type of 'asarray' (line 2231)
        asarray_110993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2231, 22), 'asarray', False)
        # Calling asarray(args, kwargs) (line 2231)
        asarray_call_result_110996 = invoke(stypy.reporting.localization.Localization(__file__, 2231, 22), asarray_110993, *[_a_110994], **kwargs_110995)
        
        # Obtaining the member 'flat' of a type (line 2231)
        flat_110997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2231, 22), asarray_call_result_110996, 'flat')
        # Obtaining the member '__getitem__' of a type (line 2231)
        getitem___110998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2231, 22), flat_110997, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2231)
        subscript_call_result_110999 = invoke(stypy.reporting.localization.Localization(__file__, 2231, 22), getitem___110998, int_110992)
        
        list_111002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2231, 22), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2231, 22), list_111002, subscript_call_result_110999)
        # Assigning a type to the variable 'inputs' (line 2231)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2231, 12), 'inputs', list_111002)
        
        # Assigning a Call to a Name (line 2232):
        
        # Assigning a Call to a Name (line 2232):
        
        # Call to func(...): (line 2232)
        # Getting the type of 'inputs' (line 2232)
        inputs_111004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2232, 28), 'inputs', False)
        # Processing the call keyword arguments (line 2232)
        kwargs_111005 = {}
        # Getting the type of 'func' (line 2232)
        func_111003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2232, 22), 'func', False)
        # Calling func(args, kwargs) (line 2232)
        func_call_result_111006 = invoke(stypy.reporting.localization.Localization(__file__, 2232, 22), func_111003, *[inputs_111004], **kwargs_111005)
        
        # Assigning a type to the variable 'outputs' (line 2232)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2232, 12), 'outputs', func_call_result_111006)
        
        # Getting the type of 'self' (line 2238)
        self_111007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2238, 15), 'self')
        # Obtaining the member 'cache' of a type (line 2238)
        cache_111008 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2238, 15), self_111007, 'cache')
        # Testing the type of an if condition (line 2238)
        if_condition_111009 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2238, 12), cache_111008)
        # Assigning a type to the variable 'if_condition_111009' (line 2238)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2238, 12), 'if_condition_111009', if_condition_111009)
        # SSA begins for if statement (line 2238)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a List to a Name (line 2239):
        
        # Assigning a List to a Name (line 2239):
        
        # Obtaining an instance of the builtin type 'list' (line 2239)
        list_111010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2239, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2239)
        # Adding element type (line 2239)
        # Getting the type of 'outputs' (line 2239)
        outputs_111011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2239, 26), 'outputs')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2239, 25), list_111010, outputs_111011)
        
        # Assigning a type to the variable '_cache' (line 2239)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2239, 16), '_cache', list_111010)

        @norecursion
        def _func(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_func'
            module_type_store = module_type_store.open_function_context('_func', 2241, 16, False)
            
            # Passed parameters checking function
            _func.stypy_localization = localization
            _func.stypy_type_of_self = None
            _func.stypy_type_store = module_type_store
            _func.stypy_function_name = '_func'
            _func.stypy_param_names_list = []
            _func.stypy_varargs_param_name = 'vargs'
            _func.stypy_kwargs_param_name = None
            _func.stypy_call_defaults = defaults
            _func.stypy_call_varargs = varargs
            _func.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_func', [], 'vargs', None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, '_func', localization, [], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '_func(...)' code ##################

            
            # Getting the type of '_cache' (line 2242)
            _cache_111012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2242, 23), '_cache')
            # Testing the type of an if condition (line 2242)
            if_condition_111013 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2242, 20), _cache_111012)
            # Assigning a type to the variable 'if_condition_111013' (line 2242)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2242, 20), 'if_condition_111013', if_condition_111013)
            # SSA begins for if statement (line 2242)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to pop(...): (line 2243)
            # Processing the call keyword arguments (line 2243)
            kwargs_111016 = {}
            # Getting the type of '_cache' (line 2243)
            _cache_111014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2243, 31), '_cache', False)
            # Obtaining the member 'pop' of a type (line 2243)
            pop_111015 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2243, 31), _cache_111014, 'pop')
            # Calling pop(args, kwargs) (line 2243)
            pop_call_result_111017 = invoke(stypy.reporting.localization.Localization(__file__, 2243, 31), pop_111015, *[], **kwargs_111016)
            
            # Assigning a type to the variable 'stypy_return_type' (line 2243)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2243, 24), 'stypy_return_type', pop_call_result_111017)
            # SSA branch for the else part of an if statement (line 2242)
            module_type_store.open_ssa_branch('else')
            
            # Call to func(...): (line 2245)
            # Getting the type of 'vargs' (line 2245)
            vargs_111019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2245, 37), 'vargs', False)
            # Processing the call keyword arguments (line 2245)
            kwargs_111020 = {}
            # Getting the type of 'func' (line 2245)
            func_111018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2245, 31), 'func', False)
            # Calling func(args, kwargs) (line 2245)
            func_call_result_111021 = invoke(stypy.reporting.localization.Localization(__file__, 2245, 31), func_111018, *[vargs_111019], **kwargs_111020)
            
            # Assigning a type to the variable 'stypy_return_type' (line 2245)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2245, 24), 'stypy_return_type', func_call_result_111021)
            # SSA join for if statement (line 2242)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # ################# End of '_func(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function '_func' in the type store
            # Getting the type of 'stypy_return_type' (line 2241)
            stypy_return_type_111022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2241, 16), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_111022)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_func'
            return stypy_return_type_111022

        # Assigning a type to the variable '_func' (line 2241)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2241, 16), '_func', _func)
        # SSA branch for the else part of an if statement (line 2238)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 2247):
        
        # Assigning a Name to a Name (line 2247):
        # Getting the type of 'func' (line 2247)
        func_111023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2247, 24), 'func')
        # Assigning a type to the variable '_func' (line 2247)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2247, 16), '_func', func_111023)
        # SSA join for if statement (line 2238)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 2249)
        # Getting the type of 'tuple' (line 2249)
        tuple_111024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2249, 35), 'tuple')
        # Getting the type of 'outputs' (line 2249)
        outputs_111025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2249, 26), 'outputs')
        
        (may_be_111026, more_types_in_union_111027) = may_be_subtype(tuple_111024, outputs_111025)

        if may_be_111026:

            if more_types_in_union_111027:
                # Runtime conditional SSA (line 2249)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'outputs' (line 2249)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2249, 12), 'outputs', remove_not_subtype_from_union(outputs_111025, tuple))
            
            # Assigning a Call to a Name (line 2250):
            
            # Assigning a Call to a Name (line 2250):
            
            # Call to len(...): (line 2250)
            # Processing the call arguments (line 2250)
            # Getting the type of 'outputs' (line 2250)
            outputs_111029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2250, 27), 'outputs', False)
            # Processing the call keyword arguments (line 2250)
            kwargs_111030 = {}
            # Getting the type of 'len' (line 2250)
            len_111028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2250, 23), 'len', False)
            # Calling len(args, kwargs) (line 2250)
            len_call_result_111031 = invoke(stypy.reporting.localization.Localization(__file__, 2250, 23), len_111028, *[outputs_111029], **kwargs_111030)
            
            # Assigning a type to the variable 'nout' (line 2250)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2250, 16), 'nout', len_call_result_111031)

            if more_types_in_union_111027:
                # Runtime conditional SSA for else branch (line 2249)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_111026) or more_types_in_union_111027):
            # Assigning a type to the variable 'outputs' (line 2249)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2249, 12), 'outputs', remove_subtype_from_union(outputs_111025, tuple))
            
            # Assigning a Num to a Name (line 2252):
            
            # Assigning a Num to a Name (line 2252):
            int_111032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2252, 23), 'int')
            # Assigning a type to the variable 'nout' (line 2252)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2252, 16), 'nout', int_111032)
            
            # Assigning a Tuple to a Name (line 2253):
            
            # Assigning a Tuple to a Name (line 2253):
            
            # Obtaining an instance of the builtin type 'tuple' (line 2253)
            tuple_111033 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2253, 27), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 2253)
            # Adding element type (line 2253)
            # Getting the type of 'outputs' (line 2253)
            outputs_111034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2253, 27), 'outputs')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2253, 27), tuple_111033, outputs_111034)
            
            # Assigning a type to the variable 'outputs' (line 2253)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2253, 16), 'outputs', tuple_111033)

            if (may_be_111026 and more_types_in_union_111027):
                # SSA join for if statement (line 2249)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 2255):
        
        # Assigning a Call to a Name (line 2255):
        
        # Call to join(...): (line 2255)
        # Processing the call arguments (line 2255)
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to range(...): (line 2256)
        # Processing the call arguments (line 2256)
        # Getting the type of 'nout' (line 2256)
        nout_111047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2256, 46), 'nout', False)
        # Processing the call keyword arguments (line 2256)
        kwargs_111048 = {}
        # Getting the type of 'range' (line 2256)
        range_111046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2256, 40), 'range', False)
        # Calling range(args, kwargs) (line 2256)
        range_call_result_111049 = invoke(stypy.reporting.localization.Localization(__file__, 2256, 40), range_111046, *[nout_111047], **kwargs_111048)
        
        comprehension_111050 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2255, 30), range_call_result_111049)
        # Assigning a type to the variable '_k' (line 2255)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2255, 30), '_k', comprehension_111050)
        
        # Call to asarray(...): (line 2255)
        # Processing the call arguments (line 2255)
        
        # Obtaining the type of the subscript
        # Getting the type of '_k' (line 2255)
        _k_111038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2255, 46), '_k', False)
        # Getting the type of 'outputs' (line 2255)
        outputs_111039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2255, 38), 'outputs', False)
        # Obtaining the member '__getitem__' of a type (line 2255)
        getitem___111040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2255, 38), outputs_111039, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2255)
        subscript_call_result_111041 = invoke(stypy.reporting.localization.Localization(__file__, 2255, 38), getitem___111040, _k_111038)
        
        # Processing the call keyword arguments (line 2255)
        kwargs_111042 = {}
        # Getting the type of 'asarray' (line 2255)
        asarray_111037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2255, 30), 'asarray', False)
        # Calling asarray(args, kwargs) (line 2255)
        asarray_call_result_111043 = invoke(stypy.reporting.localization.Localization(__file__, 2255, 30), asarray_111037, *[subscript_call_result_111041], **kwargs_111042)
        
        # Obtaining the member 'dtype' of a type (line 2255)
        dtype_111044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2255, 30), asarray_call_result_111043, 'dtype')
        # Obtaining the member 'char' of a type (line 2255)
        char_111045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2255, 30), dtype_111044, 'char')
        list_111051 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2255, 30), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2255, 30), list_111051, char_111045)
        # Processing the call keyword arguments (line 2255)
        kwargs_111052 = {}
        str_111035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2255, 21), 'str', '')
        # Obtaining the member 'join' of a type (line 2255)
        join_111036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2255, 21), str_111035, 'join')
        # Calling join(args, kwargs) (line 2255)
        join_call_result_111053 = invoke(stypy.reporting.localization.Localization(__file__, 2255, 21), join_111036, *[list_111051], **kwargs_111052)
        
        # Assigning a type to the variable 'otypes' (line 2255)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2255, 12), 'otypes', join_call_result_111053)
        
        # Assigning a Call to a Name (line 2261):
        
        # Assigning a Call to a Name (line 2261):
        
        # Call to frompyfunc(...): (line 2261)
        # Processing the call arguments (line 2261)
        # Getting the type of '_func' (line 2261)
        _func_111055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2261, 31), '_func', False)
        
        # Call to len(...): (line 2261)
        # Processing the call arguments (line 2261)
        # Getting the type of 'args' (line 2261)
        args_111057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2261, 42), 'args', False)
        # Processing the call keyword arguments (line 2261)
        kwargs_111058 = {}
        # Getting the type of 'len' (line 2261)
        len_111056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2261, 38), 'len', False)
        # Calling len(args, kwargs) (line 2261)
        len_call_result_111059 = invoke(stypy.reporting.localization.Localization(__file__, 2261, 38), len_111056, *[args_111057], **kwargs_111058)
        
        # Getting the type of 'nout' (line 2261)
        nout_111060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2261, 49), 'nout', False)
        # Processing the call keyword arguments (line 2261)
        kwargs_111061 = {}
        # Getting the type of 'frompyfunc' (line 2261)
        frompyfunc_111054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2261, 20), 'frompyfunc', False)
        # Calling frompyfunc(args, kwargs) (line 2261)
        frompyfunc_call_result_111062 = invoke(stypy.reporting.localization.Localization(__file__, 2261, 20), frompyfunc_111054, *[_func_111055, len_call_result_111059, nout_111060], **kwargs_111061)
        
        # Assigning a type to the variable 'ufunc' (line 2261)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2261, 12), 'ufunc', frompyfunc_call_result_111062)
        # SSA join for if statement (line 2215)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 2263)
        tuple_111063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2263, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2263)
        # Adding element type (line 2263)
        # Getting the type of 'ufunc' (line 2263)
        ufunc_111064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2263, 15), 'ufunc')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2263, 15), tuple_111063, ufunc_111064)
        # Adding element type (line 2263)
        # Getting the type of 'otypes' (line 2263)
        otypes_111065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2263, 22), 'otypes')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2263, 15), tuple_111063, otypes_111065)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2263)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2263, 8), 'stypy_return_type', tuple_111063)
        
        # ################# End of '_get_ufunc_and_otypes(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_ufunc_and_otypes' in the type store
        # Getting the type of 'stypy_return_type' (line 2209)
        stypy_return_type_111066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2209, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_111066)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_ufunc_and_otypes'
        return stypy_return_type_111066


    @norecursion
    def _vectorize_call(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_vectorize_call'
        module_type_store = module_type_store.open_function_context('_vectorize_call', 2265, 4, False)
        # Assigning a type to the variable 'self' (line 2266)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2266, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        vectorize._vectorize_call.__dict__.__setitem__('stypy_localization', localization)
        vectorize._vectorize_call.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        vectorize._vectorize_call.__dict__.__setitem__('stypy_type_store', module_type_store)
        vectorize._vectorize_call.__dict__.__setitem__('stypy_function_name', 'vectorize._vectorize_call')
        vectorize._vectorize_call.__dict__.__setitem__('stypy_param_names_list', ['func', 'args'])
        vectorize._vectorize_call.__dict__.__setitem__('stypy_varargs_param_name', None)
        vectorize._vectorize_call.__dict__.__setitem__('stypy_kwargs_param_name', None)
        vectorize._vectorize_call.__dict__.__setitem__('stypy_call_defaults', defaults)
        vectorize._vectorize_call.__dict__.__setitem__('stypy_call_varargs', varargs)
        vectorize._vectorize_call.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        vectorize._vectorize_call.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'vectorize._vectorize_call', ['func', 'args'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_vectorize_call', localization, ['func', 'args'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_vectorize_call(...)' code ##################

        str_111067 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2266, 8), 'str', 'Vectorized call to `func` over positional `args`.')
        
        
        # Getting the type of 'args' (line 2267)
        args_111068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2267, 15), 'args')
        # Applying the 'not' unary operator (line 2267)
        result_not__111069 = python_operator(stypy.reporting.localization.Localization(__file__, 2267, 11), 'not', args_111068)
        
        # Testing the type of an if condition (line 2267)
        if_condition_111070 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2267, 8), result_not__111069)
        # Assigning a type to the variable 'if_condition_111070' (line 2267)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2267, 8), 'if_condition_111070', if_condition_111070)
        # SSA begins for if statement (line 2267)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2268):
        
        # Assigning a Call to a Name (line 2268):
        
        # Call to func(...): (line 2268)
        # Processing the call keyword arguments (line 2268)
        kwargs_111072 = {}
        # Getting the type of 'func' (line 2268)
        func_111071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2268, 19), 'func', False)
        # Calling func(args, kwargs) (line 2268)
        func_call_result_111073 = invoke(stypy.reporting.localization.Localization(__file__, 2268, 19), func_111071, *[], **kwargs_111072)
        
        # Assigning a type to the variable '_res' (line 2268)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2268, 12), '_res', func_call_result_111073)
        # SSA branch for the else part of an if statement (line 2267)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Tuple (line 2270):
        
        # Assigning a Call to a Name:
        
        # Call to _get_ufunc_and_otypes(...): (line 2270)
        # Processing the call keyword arguments (line 2270)
        # Getting the type of 'func' (line 2270)
        func_111076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 60), 'func', False)
        keyword_111077 = func_111076
        # Getting the type of 'args' (line 2270)
        args_111078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 71), 'args', False)
        keyword_111079 = args_111078
        kwargs_111080 = {'args': keyword_111079, 'func': keyword_111077}
        # Getting the type of 'self' (line 2270)
        self_111074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 28), 'self', False)
        # Obtaining the member '_get_ufunc_and_otypes' of a type (line 2270)
        _get_ufunc_and_otypes_111075 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2270, 28), self_111074, '_get_ufunc_and_otypes')
        # Calling _get_ufunc_and_otypes(args, kwargs) (line 2270)
        _get_ufunc_and_otypes_call_result_111081 = invoke(stypy.reporting.localization.Localization(__file__, 2270, 28), _get_ufunc_and_otypes_111075, *[], **kwargs_111080)
        
        # Assigning a type to the variable 'call_assignment_107422' (line 2270)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2270, 12), 'call_assignment_107422', _get_ufunc_and_otypes_call_result_111081)
        
        # Assigning a Call to a Name (line 2270):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_111084 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2270, 12), 'int')
        # Processing the call keyword arguments
        kwargs_111085 = {}
        # Getting the type of 'call_assignment_107422' (line 2270)
        call_assignment_107422_111082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 12), 'call_assignment_107422', False)
        # Obtaining the member '__getitem__' of a type (line 2270)
        getitem___111083 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2270, 12), call_assignment_107422_111082, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_111086 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___111083, *[int_111084], **kwargs_111085)
        
        # Assigning a type to the variable 'call_assignment_107423' (line 2270)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2270, 12), 'call_assignment_107423', getitem___call_result_111086)
        
        # Assigning a Name to a Name (line 2270):
        # Getting the type of 'call_assignment_107423' (line 2270)
        call_assignment_107423_111087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 12), 'call_assignment_107423')
        # Assigning a type to the variable 'ufunc' (line 2270)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2270, 12), 'ufunc', call_assignment_107423_111087)
        
        # Assigning a Call to a Name (line 2270):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_111090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2270, 12), 'int')
        # Processing the call keyword arguments
        kwargs_111091 = {}
        # Getting the type of 'call_assignment_107422' (line 2270)
        call_assignment_107422_111088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 12), 'call_assignment_107422', False)
        # Obtaining the member '__getitem__' of a type (line 2270)
        getitem___111089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2270, 12), call_assignment_107422_111088, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_111092 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___111089, *[int_111090], **kwargs_111091)
        
        # Assigning a type to the variable 'call_assignment_107424' (line 2270)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2270, 12), 'call_assignment_107424', getitem___call_result_111092)
        
        # Assigning a Name to a Name (line 2270):
        # Getting the type of 'call_assignment_107424' (line 2270)
        call_assignment_107424_111093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 12), 'call_assignment_107424')
        # Assigning a type to the variable 'otypes' (line 2270)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2270, 19), 'otypes', call_assignment_107424_111093)
        
        # Assigning a ListComp to a Name (line 2273):
        
        # Assigning a ListComp to a Name (line 2273):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'args' (line 2274)
        args_111104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2274, 32), 'args')
        comprehension_111105 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2273, 22), args_111104)
        # Assigning a type to the variable '_a' (line 2273)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2273, 22), '_a', comprehension_111105)
        
        # Call to array(...): (line 2273)
        # Processing the call arguments (line 2273)
        # Getting the type of '_a' (line 2273)
        _a_111095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2273, 28), '_a', False)
        # Processing the call keyword arguments (line 2273)
        # Getting the type of 'False' (line 2273)
        False_111096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2273, 37), 'False', False)
        keyword_111097 = False_111096
        # Getting the type of 'True' (line 2273)
        True_111098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2273, 50), 'True', False)
        keyword_111099 = True_111098
        # Getting the type of 'object' (line 2273)
        object_111100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2273, 62), 'object', False)
        keyword_111101 = object_111100
        kwargs_111102 = {'subok': keyword_111099, 'copy': keyword_111097, 'dtype': keyword_111101}
        # Getting the type of 'array' (line 2273)
        array_111094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2273, 22), 'array', False)
        # Calling array(args, kwargs) (line 2273)
        array_call_result_111103 = invoke(stypy.reporting.localization.Localization(__file__, 2273, 22), array_111094, *[_a_111095], **kwargs_111102)
        
        list_111106 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2273, 22), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2273, 22), list_111106, array_call_result_111103)
        # Assigning a type to the variable 'inputs' (line 2273)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2273, 12), 'inputs', list_111106)
        
        # Assigning a Call to a Name (line 2276):
        
        # Assigning a Call to a Name (line 2276):
        
        # Call to ufunc(...): (line 2276)
        # Getting the type of 'inputs' (line 2276)
        inputs_111108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2276, 29), 'inputs', False)
        # Processing the call keyword arguments (line 2276)
        kwargs_111109 = {}
        # Getting the type of 'ufunc' (line 2276)
        ufunc_111107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2276, 22), 'ufunc', False)
        # Calling ufunc(args, kwargs) (line 2276)
        ufunc_call_result_111110 = invoke(stypy.reporting.localization.Localization(__file__, 2276, 22), ufunc_111107, *[inputs_111108], **kwargs_111109)
        
        # Assigning a type to the variable 'outputs' (line 2276)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2276, 12), 'outputs', ufunc_call_result_111110)
        
        
        # Getting the type of 'ufunc' (line 2278)
        ufunc_111111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2278, 15), 'ufunc')
        # Obtaining the member 'nout' of a type (line 2278)
        nout_111112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2278, 15), ufunc_111111, 'nout')
        int_111113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2278, 29), 'int')
        # Applying the binary operator '==' (line 2278)
        result_eq_111114 = python_operator(stypy.reporting.localization.Localization(__file__, 2278, 15), '==', nout_111112, int_111113)
        
        # Testing the type of an if condition (line 2278)
        if_condition_111115 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2278, 12), result_eq_111114)
        # Assigning a type to the variable 'if_condition_111115' (line 2278)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2278, 12), 'if_condition_111115', if_condition_111115)
        # SSA begins for if statement (line 2278)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2279):
        
        # Assigning a Call to a Name (line 2279):
        
        # Call to array(...): (line 2279)
        # Processing the call arguments (line 2279)
        # Getting the type of 'outputs' (line 2279)
        outputs_111117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2279, 29), 'outputs', False)
        # Processing the call keyword arguments (line 2279)
        # Getting the type of 'False' (line 2280)
        False_111118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2280, 34), 'False', False)
        keyword_111119 = False_111118
        # Getting the type of 'True' (line 2280)
        True_111120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2280, 47), 'True', False)
        keyword_111121 = True_111120
        
        # Obtaining the type of the subscript
        int_111122 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2280, 66), 'int')
        # Getting the type of 'otypes' (line 2280)
        otypes_111123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2280, 59), 'otypes', False)
        # Obtaining the member '__getitem__' of a type (line 2280)
        getitem___111124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2280, 59), otypes_111123, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2280)
        subscript_call_result_111125 = invoke(stypy.reporting.localization.Localization(__file__, 2280, 59), getitem___111124, int_111122)
        
        keyword_111126 = subscript_call_result_111125
        kwargs_111127 = {'subok': keyword_111121, 'copy': keyword_111119, 'dtype': keyword_111126}
        # Getting the type of 'array' (line 2279)
        array_111116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2279, 23), 'array', False)
        # Calling array(args, kwargs) (line 2279)
        array_call_result_111128 = invoke(stypy.reporting.localization.Localization(__file__, 2279, 23), array_111116, *[outputs_111117], **kwargs_111127)
        
        # Assigning a type to the variable '_res' (line 2279)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2279, 16), '_res', array_call_result_111128)
        # SSA branch for the else part of an if statement (line 2278)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 2282):
        
        # Assigning a Call to a Name (line 2282):
        
        # Call to tuple(...): (line 2282)
        # Processing the call arguments (line 2282)
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to zip(...): (line 2283)
        # Processing the call arguments (line 2283)
        # Getting the type of 'outputs' (line 2283)
        outputs_111141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2283, 48), 'outputs', False)
        # Getting the type of 'otypes' (line 2283)
        otypes_111142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2283, 57), 'otypes', False)
        # Processing the call keyword arguments (line 2283)
        kwargs_111143 = {}
        # Getting the type of 'zip' (line 2283)
        zip_111140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2283, 44), 'zip', False)
        # Calling zip(args, kwargs) (line 2283)
        zip_call_result_111144 = invoke(stypy.reporting.localization.Localization(__file__, 2283, 44), zip_111140, *[outputs_111141, otypes_111142], **kwargs_111143)
        
        comprehension_111145 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2282, 30), zip_call_result_111144)
        # Assigning a type to the variable '_x' (line 2282)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2282, 30), '_x', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2282, 30), comprehension_111145))
        # Assigning a type to the variable '_t' (line 2282)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2282, 30), '_t', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2282, 30), comprehension_111145))
        
        # Call to array(...): (line 2282)
        # Processing the call arguments (line 2282)
        # Getting the type of '_x' (line 2282)
        _x_111131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2282, 36), '_x', False)
        # Processing the call keyword arguments (line 2282)
        # Getting the type of 'False' (line 2282)
        False_111132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2282, 45), 'False', False)
        keyword_111133 = False_111132
        # Getting the type of 'True' (line 2282)
        True_111134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2282, 58), 'True', False)
        keyword_111135 = True_111134
        # Getting the type of '_t' (line 2282)
        _t_111136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2282, 70), '_t', False)
        keyword_111137 = _t_111136
        kwargs_111138 = {'subok': keyword_111135, 'copy': keyword_111133, 'dtype': keyword_111137}
        # Getting the type of 'array' (line 2282)
        array_111130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2282, 30), 'array', False)
        # Calling array(args, kwargs) (line 2282)
        array_call_result_111139 = invoke(stypy.reporting.localization.Localization(__file__, 2282, 30), array_111130, *[_x_111131], **kwargs_111138)
        
        list_111146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2282, 30), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2282, 30), list_111146, array_call_result_111139)
        # Processing the call keyword arguments (line 2282)
        kwargs_111147 = {}
        # Getting the type of 'tuple' (line 2282)
        tuple_111129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2282, 23), 'tuple', False)
        # Calling tuple(args, kwargs) (line 2282)
        tuple_call_result_111148 = invoke(stypy.reporting.localization.Localization(__file__, 2282, 23), tuple_111129, *[list_111146], **kwargs_111147)
        
        # Assigning a type to the variable '_res' (line 2282)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2282, 16), '_res', tuple_call_result_111148)
        # SSA join for if statement (line 2278)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2267)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of '_res' (line 2284)
        _res_111149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2284, 15), '_res')
        # Assigning a type to the variable 'stypy_return_type' (line 2284)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2284, 8), 'stypy_return_type', _res_111149)
        
        # ################# End of '_vectorize_call(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_vectorize_call' in the type store
        # Getting the type of 'stypy_return_type' (line 2265)
        stypy_return_type_111150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2265, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_111150)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_vectorize_call'
        return stypy_return_type_111150


# Assigning a type to the variable 'vectorize' (line 2036)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2036, 0), 'vectorize', vectorize)

@norecursion
def cov(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2287)
    None_111151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2287, 13), 'None')
    # Getting the type of 'True' (line 2287)
    True_111152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2287, 26), 'True')
    # Getting the type of 'False' (line 2287)
    False_111153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2287, 37), 'False')
    # Getting the type of 'None' (line 2287)
    None_111154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2287, 49), 'None')
    # Getting the type of 'None' (line 2287)
    None_111155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2287, 64), 'None')
    # Getting the type of 'None' (line 2288)
    None_111156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2288, 17), 'None')
    defaults = [None_111151, True_111152, False_111153, None_111154, None_111155, None_111156]
    # Create a new context for function 'cov'
    module_type_store = module_type_store.open_function_context('cov', 2287, 0, False)
    
    # Passed parameters checking function
    cov.stypy_localization = localization
    cov.stypy_type_of_self = None
    cov.stypy_type_store = module_type_store
    cov.stypy_function_name = 'cov'
    cov.stypy_param_names_list = ['m', 'y', 'rowvar', 'bias', 'ddof', 'fweights', 'aweights']
    cov.stypy_varargs_param_name = None
    cov.stypy_kwargs_param_name = None
    cov.stypy_call_defaults = defaults
    cov.stypy_call_varargs = varargs
    cov.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'cov', ['m', 'y', 'rowvar', 'bias', 'ddof', 'fweights', 'aweights'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'cov', localization, ['m', 'y', 'rowvar', 'bias', 'ddof', 'fweights', 'aweights'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'cov(...)' code ##################

    str_111157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2399, (-1)), 'str', '\n    Estimate a covariance matrix, given data and weights.\n\n    Covariance indicates the level to which two variables vary together.\n    If we examine N-dimensional samples, :math:`X = [x_1, x_2, ... x_N]^T`,\n    then the covariance matrix element :math:`C_{ij}` is the covariance of\n    :math:`x_i` and :math:`x_j`. The element :math:`C_{ii}` is the variance\n    of :math:`x_i`.\n\n    See the notes for an outline of the algorithm.\n\n    Parameters\n    ----------\n    m : array_like\n        A 1-D or 2-D array containing multiple variables and observations.\n        Each row of `m` represents a variable, and each column a single\n        observation of all those variables. Also see `rowvar` below.\n    y : array_like, optional\n        An additional set of variables and observations. `y` has the same form\n        as that of `m`.\n    rowvar : bool, optional\n        If `rowvar` is True (default), then each row represents a\n        variable, with observations in the columns. Otherwise, the relationship\n        is transposed: each column represents a variable, while the rows\n        contain observations.\n    bias : bool, optional\n        Default normalization (False) is by ``(N - 1)``, where ``N`` is the\n        number of observations given (unbiased estimate). If `bias` is True, then\n        normalization is by ``N``. These values can be overridden by using the\n        keyword ``ddof`` in numpy versions >= 1.5.\n    ddof : int, optional\n        If not ``None`` the default value implied by `bias` is overridden.\n        Note that ``ddof=1`` will return the unbiased estimate, even if both\n        `fweights` and `aweights` are specified, and ``ddof=0`` will return\n        the simple average. See the notes for the details. The default value\n        is ``None``.\n\n        .. versionadded:: 1.5\n    fweights : array_like, int, optional\n        1-D array of integer freguency weights; the number of times each\n        observation vector should be repeated.\n\n        .. versionadded:: 1.10\n    aweights : array_like, optional\n        1-D array of observation vector weights. These relative weights are\n        typically large for observations considered "important" and smaller for\n        observations considered less "important". If ``ddof=0`` the array of\n        weights can be used to assign probabilities to observation vectors.\n\n        .. versionadded:: 1.10\n\n    Returns\n    -------\n    out : ndarray\n        The covariance matrix of the variables.\n\n    See Also\n    --------\n    corrcoef : Normalized covariance matrix\n\n    Notes\n    -----\n    Assume that the observations are in the columns of the observation\n    array `m` and let ``f = fweights`` and ``a = aweights`` for brevity. The\n    steps to compute the weighted covariance are as follows::\n\n        >>> w = f * a\n        >>> v1 = np.sum(w)\n        >>> v2 = np.sum(w * a)\n        >>> m -= np.sum(m * w, axis=1, keepdims=True) / v1\n        >>> cov = np.dot(m * w, m.T) * v1 / (v1**2 - ddof * v2)\n\n    Note that when ``a == 1``, the normalization factor\n    ``v1 / (v1**2 - ddof * v2)`` goes over to ``1 / (np.sum(f) - ddof)``\n    as it should.\n\n    Examples\n    --------\n    Consider two variables, :math:`x_0` and :math:`x_1`, which\n    correlate perfectly, but in opposite directions:\n\n    >>> x = np.array([[0, 2], [1, 1], [2, 0]]).T\n    >>> x\n    array([[0, 1, 2],\n           [2, 1, 0]])\n\n    Note how :math:`x_0` increases while :math:`x_1` decreases. The covariance\n    matrix shows this clearly:\n\n    >>> np.cov(x)\n    array([[ 1., -1.],\n           [-1.,  1.]])\n\n    Note that element :math:`C_{0,1}`, which shows the correlation between\n    :math:`x_0` and :math:`x_1`, is negative.\n\n    Further, note how `x` and `y` are combined:\n\n    >>> x = [-2.1, -1,  4.3]\n    >>> y = [3,  1.1,  0.12]\n    >>> X = np.vstack((x,y))\n    >>> print(np.cov(X))\n    [[ 11.71        -4.286     ]\n     [ -4.286        2.14413333]]\n    >>> print(np.cov(x, y))\n    [[ 11.71        -4.286     ]\n     [ -4.286        2.14413333]]\n    >>> print(np.cov(x))\n    11.71\n\n    ')
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'ddof' (line 2401)
    ddof_111158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2401, 7), 'ddof')
    # Getting the type of 'None' (line 2401)
    None_111159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2401, 19), 'None')
    # Applying the binary operator 'isnot' (line 2401)
    result_is_not_111160 = python_operator(stypy.reporting.localization.Localization(__file__, 2401, 7), 'isnot', ddof_111158, None_111159)
    
    
    # Getting the type of 'ddof' (line 2401)
    ddof_111161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2401, 28), 'ddof')
    
    # Call to int(...): (line 2401)
    # Processing the call arguments (line 2401)
    # Getting the type of 'ddof' (line 2401)
    ddof_111163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2401, 40), 'ddof', False)
    # Processing the call keyword arguments (line 2401)
    kwargs_111164 = {}
    # Getting the type of 'int' (line 2401)
    int_111162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2401, 36), 'int', False)
    # Calling int(args, kwargs) (line 2401)
    int_call_result_111165 = invoke(stypy.reporting.localization.Localization(__file__, 2401, 36), int_111162, *[ddof_111163], **kwargs_111164)
    
    # Applying the binary operator '!=' (line 2401)
    result_ne_111166 = python_operator(stypy.reporting.localization.Localization(__file__, 2401, 28), '!=', ddof_111161, int_call_result_111165)
    
    # Applying the binary operator 'and' (line 2401)
    result_and_keyword_111167 = python_operator(stypy.reporting.localization.Localization(__file__, 2401, 7), 'and', result_is_not_111160, result_ne_111166)
    
    # Testing the type of an if condition (line 2401)
    if_condition_111168 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2401, 4), result_and_keyword_111167)
    # Assigning a type to the variable 'if_condition_111168' (line 2401)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2401, 4), 'if_condition_111168', if_condition_111168)
    # SSA begins for if statement (line 2401)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2402)
    # Processing the call arguments (line 2402)
    str_111170 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2403, 12), 'str', 'ddof must be integer')
    # Processing the call keyword arguments (line 2402)
    kwargs_111171 = {}
    # Getting the type of 'ValueError' (line 2402)
    ValueError_111169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2402, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2402)
    ValueError_call_result_111172 = invoke(stypy.reporting.localization.Localization(__file__, 2402, 14), ValueError_111169, *[str_111170], **kwargs_111171)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2402, 8), ValueError_call_result_111172, 'raise parameter', BaseException)
    # SSA join for if statement (line 2401)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2406):
    
    # Assigning a Call to a Name (line 2406):
    
    # Call to asarray(...): (line 2406)
    # Processing the call arguments (line 2406)
    # Getting the type of 'm' (line 2406)
    m_111175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2406, 19), 'm', False)
    # Processing the call keyword arguments (line 2406)
    kwargs_111176 = {}
    # Getting the type of 'np' (line 2406)
    np_111173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2406, 8), 'np', False)
    # Obtaining the member 'asarray' of a type (line 2406)
    asarray_111174 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2406, 8), np_111173, 'asarray')
    # Calling asarray(args, kwargs) (line 2406)
    asarray_call_result_111177 = invoke(stypy.reporting.localization.Localization(__file__, 2406, 8), asarray_111174, *[m_111175], **kwargs_111176)
    
    # Assigning a type to the variable 'm' (line 2406)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2406, 4), 'm', asarray_call_result_111177)
    
    # Type idiom detected: calculating its left and rigth part (line 2407)
    # Getting the type of 'y' (line 2407)
    y_111178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2407, 7), 'y')
    # Getting the type of 'None' (line 2407)
    None_111179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2407, 12), 'None')
    
    (may_be_111180, more_types_in_union_111181) = may_be_none(y_111178, None_111179)

    if may_be_111180:

        if more_types_in_union_111181:
            # Runtime conditional SSA (line 2407)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 2408):
        
        # Assigning a Call to a Name (line 2408):
        
        # Call to result_type(...): (line 2408)
        # Processing the call arguments (line 2408)
        # Getting the type of 'm' (line 2408)
        m_111184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2408, 31), 'm', False)
        # Getting the type of 'np' (line 2408)
        np_111185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2408, 34), 'np', False)
        # Obtaining the member 'float64' of a type (line 2408)
        float64_111186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2408, 34), np_111185, 'float64')
        # Processing the call keyword arguments (line 2408)
        kwargs_111187 = {}
        # Getting the type of 'np' (line 2408)
        np_111182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2408, 16), 'np', False)
        # Obtaining the member 'result_type' of a type (line 2408)
        result_type_111183 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2408, 16), np_111182, 'result_type')
        # Calling result_type(args, kwargs) (line 2408)
        result_type_call_result_111188 = invoke(stypy.reporting.localization.Localization(__file__, 2408, 16), result_type_111183, *[m_111184, float64_111186], **kwargs_111187)
        
        # Assigning a type to the variable 'dtype' (line 2408)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2408, 8), 'dtype', result_type_call_result_111188)

        if more_types_in_union_111181:
            # Runtime conditional SSA for else branch (line 2407)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_111180) or more_types_in_union_111181):
        
        # Assigning a Call to a Name (line 2410):
        
        # Assigning a Call to a Name (line 2410):
        
        # Call to asarray(...): (line 2410)
        # Processing the call arguments (line 2410)
        # Getting the type of 'y' (line 2410)
        y_111191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2410, 23), 'y', False)
        # Processing the call keyword arguments (line 2410)
        kwargs_111192 = {}
        # Getting the type of 'np' (line 2410)
        np_111189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2410, 12), 'np', False)
        # Obtaining the member 'asarray' of a type (line 2410)
        asarray_111190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2410, 12), np_111189, 'asarray')
        # Calling asarray(args, kwargs) (line 2410)
        asarray_call_result_111193 = invoke(stypy.reporting.localization.Localization(__file__, 2410, 12), asarray_111190, *[y_111191], **kwargs_111192)
        
        # Assigning a type to the variable 'y' (line 2410)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2410, 8), 'y', asarray_call_result_111193)
        
        # Assigning a Call to a Name (line 2411):
        
        # Assigning a Call to a Name (line 2411):
        
        # Call to result_type(...): (line 2411)
        # Processing the call arguments (line 2411)
        # Getting the type of 'm' (line 2411)
        m_111196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2411, 31), 'm', False)
        # Getting the type of 'y' (line 2411)
        y_111197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2411, 34), 'y', False)
        # Getting the type of 'np' (line 2411)
        np_111198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2411, 37), 'np', False)
        # Obtaining the member 'float64' of a type (line 2411)
        float64_111199 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2411, 37), np_111198, 'float64')
        # Processing the call keyword arguments (line 2411)
        kwargs_111200 = {}
        # Getting the type of 'np' (line 2411)
        np_111194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2411, 16), 'np', False)
        # Obtaining the member 'result_type' of a type (line 2411)
        result_type_111195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2411, 16), np_111194, 'result_type')
        # Calling result_type(args, kwargs) (line 2411)
        result_type_call_result_111201 = invoke(stypy.reporting.localization.Localization(__file__, 2411, 16), result_type_111195, *[m_111196, y_111197, float64_111199], **kwargs_111200)
        
        # Assigning a type to the variable 'dtype' (line 2411)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2411, 8), 'dtype', result_type_call_result_111201)

        if (may_be_111180 and more_types_in_union_111181):
            # SSA join for if statement (line 2407)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 2412):
    
    # Assigning a Call to a Name (line 2412):
    
    # Call to array(...): (line 2412)
    # Processing the call arguments (line 2412)
    # Getting the type of 'm' (line 2412)
    m_111203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2412, 14), 'm', False)
    # Processing the call keyword arguments (line 2412)
    int_111204 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2412, 23), 'int')
    keyword_111205 = int_111204
    # Getting the type of 'dtype' (line 2412)
    dtype_111206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2412, 32), 'dtype', False)
    keyword_111207 = dtype_111206
    kwargs_111208 = {'dtype': keyword_111207, 'ndmin': keyword_111205}
    # Getting the type of 'array' (line 2412)
    array_111202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2412, 8), 'array', False)
    # Calling array(args, kwargs) (line 2412)
    array_call_result_111209 = invoke(stypy.reporting.localization.Localization(__file__, 2412, 8), array_111202, *[m_111203], **kwargs_111208)
    
    # Assigning a type to the variable 'X' (line 2412)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2412, 4), 'X', array_call_result_111209)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'rowvar' (line 2413)
    rowvar_111210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2413, 7), 'rowvar')
    int_111211 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2413, 17), 'int')
    # Applying the binary operator '==' (line 2413)
    result_eq_111212 = python_operator(stypy.reporting.localization.Localization(__file__, 2413, 7), '==', rowvar_111210, int_111211)
    
    
    
    # Obtaining the type of the subscript
    int_111213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2413, 31), 'int')
    # Getting the type of 'X' (line 2413)
    X_111214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2413, 23), 'X')
    # Obtaining the member 'shape' of a type (line 2413)
    shape_111215 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2413, 23), X_111214, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2413)
    getitem___111216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2413, 23), shape_111215, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2413)
    subscript_call_result_111217 = invoke(stypy.reporting.localization.Localization(__file__, 2413, 23), getitem___111216, int_111213)
    
    int_111218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2413, 37), 'int')
    # Applying the binary operator '!=' (line 2413)
    result_ne_111219 = python_operator(stypy.reporting.localization.Localization(__file__, 2413, 23), '!=', subscript_call_result_111217, int_111218)
    
    # Applying the binary operator 'and' (line 2413)
    result_and_keyword_111220 = python_operator(stypy.reporting.localization.Localization(__file__, 2413, 7), 'and', result_eq_111212, result_ne_111219)
    
    # Testing the type of an if condition (line 2413)
    if_condition_111221 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2413, 4), result_and_keyword_111220)
    # Assigning a type to the variable 'if_condition_111221' (line 2413)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2413, 4), 'if_condition_111221', if_condition_111221)
    # SSA begins for if statement (line 2413)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 2414):
    
    # Assigning a Attribute to a Name (line 2414):
    # Getting the type of 'X' (line 2414)
    X_111222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2414, 12), 'X')
    # Obtaining the member 'T' of a type (line 2414)
    T_111223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2414, 12), X_111222, 'T')
    # Assigning a type to the variable 'X' (line 2414)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2414, 8), 'X', T_111223)
    # SSA join for if statement (line 2413)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Obtaining the type of the subscript
    int_111224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2415, 15), 'int')
    # Getting the type of 'X' (line 2415)
    X_111225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2415, 7), 'X')
    # Obtaining the member 'shape' of a type (line 2415)
    shape_111226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2415, 7), X_111225, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2415)
    getitem___111227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2415, 7), shape_111226, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2415)
    subscript_call_result_111228 = invoke(stypy.reporting.localization.Localization(__file__, 2415, 7), getitem___111227, int_111224)
    
    int_111229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2415, 21), 'int')
    # Applying the binary operator '==' (line 2415)
    result_eq_111230 = python_operator(stypy.reporting.localization.Localization(__file__, 2415, 7), '==', subscript_call_result_111228, int_111229)
    
    # Testing the type of an if condition (line 2415)
    if_condition_111231 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2415, 4), result_eq_111230)
    # Assigning a type to the variable 'if_condition_111231' (line 2415)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2415, 4), 'if_condition_111231', if_condition_111231)
    # SSA begins for if statement (line 2415)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to reshape(...): (line 2416)
    # Processing the call arguments (line 2416)
    int_111238 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2416, 36), 'int')
    int_111239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2416, 39), 'int')
    # Processing the call keyword arguments (line 2416)
    kwargs_111240 = {}
    
    # Call to array(...): (line 2416)
    # Processing the call arguments (line 2416)
    
    # Obtaining an instance of the builtin type 'list' (line 2416)
    list_111234 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2416, 24), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2416)
    
    # Processing the call keyword arguments (line 2416)
    kwargs_111235 = {}
    # Getting the type of 'np' (line 2416)
    np_111232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2416, 15), 'np', False)
    # Obtaining the member 'array' of a type (line 2416)
    array_111233 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2416, 15), np_111232, 'array')
    # Calling array(args, kwargs) (line 2416)
    array_call_result_111236 = invoke(stypy.reporting.localization.Localization(__file__, 2416, 15), array_111233, *[list_111234], **kwargs_111235)
    
    # Obtaining the member 'reshape' of a type (line 2416)
    reshape_111237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2416, 15), array_call_result_111236, 'reshape')
    # Calling reshape(args, kwargs) (line 2416)
    reshape_call_result_111241 = invoke(stypy.reporting.localization.Localization(__file__, 2416, 15), reshape_111237, *[int_111238, int_111239], **kwargs_111240)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2416)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2416, 8), 'stypy_return_type', reshape_call_result_111241)
    # SSA join for if statement (line 2415)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 2417)
    # Getting the type of 'y' (line 2417)
    y_111242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2417, 4), 'y')
    # Getting the type of 'None' (line 2417)
    None_111243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2417, 16), 'None')
    
    (may_be_111244, more_types_in_union_111245) = may_not_be_none(y_111242, None_111243)

    if may_be_111244:

        if more_types_in_union_111245:
            # Runtime conditional SSA (line 2417)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 2418):
        
        # Assigning a Call to a Name (line 2418):
        
        # Call to array(...): (line 2418)
        # Processing the call arguments (line 2418)
        # Getting the type of 'y' (line 2418)
        y_111247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2418, 18), 'y', False)
        # Processing the call keyword arguments (line 2418)
        # Getting the type of 'False' (line 2418)
        False_111248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2418, 26), 'False', False)
        keyword_111249 = False_111248
        int_111250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2418, 39), 'int')
        keyword_111251 = int_111250
        # Getting the type of 'dtype' (line 2418)
        dtype_111252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2418, 48), 'dtype', False)
        keyword_111253 = dtype_111252
        kwargs_111254 = {'dtype': keyword_111253, 'copy': keyword_111249, 'ndmin': keyword_111251}
        # Getting the type of 'array' (line 2418)
        array_111246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2418, 12), 'array', False)
        # Calling array(args, kwargs) (line 2418)
        array_call_result_111255 = invoke(stypy.reporting.localization.Localization(__file__, 2418, 12), array_111246, *[y_111247], **kwargs_111254)
        
        # Assigning a type to the variable 'y' (line 2418)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2418, 8), 'y', array_call_result_111255)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'rowvar' (line 2419)
        rowvar_111256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2419, 11), 'rowvar')
        int_111257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2419, 21), 'int')
        # Applying the binary operator '==' (line 2419)
        result_eq_111258 = python_operator(stypy.reporting.localization.Localization(__file__, 2419, 11), '==', rowvar_111256, int_111257)
        
        
        
        # Obtaining the type of the subscript
        int_111259 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2419, 35), 'int')
        # Getting the type of 'y' (line 2419)
        y_111260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2419, 27), 'y')
        # Obtaining the member 'shape' of a type (line 2419)
        shape_111261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2419, 27), y_111260, 'shape')
        # Obtaining the member '__getitem__' of a type (line 2419)
        getitem___111262 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2419, 27), shape_111261, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2419)
        subscript_call_result_111263 = invoke(stypy.reporting.localization.Localization(__file__, 2419, 27), getitem___111262, int_111259)
        
        int_111264 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2419, 41), 'int')
        # Applying the binary operator '!=' (line 2419)
        result_ne_111265 = python_operator(stypy.reporting.localization.Localization(__file__, 2419, 27), '!=', subscript_call_result_111263, int_111264)
        
        # Applying the binary operator 'and' (line 2419)
        result_and_keyword_111266 = python_operator(stypy.reporting.localization.Localization(__file__, 2419, 11), 'and', result_eq_111258, result_ne_111265)
        
        # Testing the type of an if condition (line 2419)
        if_condition_111267 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2419, 8), result_and_keyword_111266)
        # Assigning a type to the variable 'if_condition_111267' (line 2419)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2419, 8), 'if_condition_111267', if_condition_111267)
        # SSA begins for if statement (line 2419)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 2420):
        
        # Assigning a Attribute to a Name (line 2420):
        # Getting the type of 'y' (line 2420)
        y_111268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2420, 16), 'y')
        # Obtaining the member 'T' of a type (line 2420)
        T_111269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2420, 16), y_111268, 'T')
        # Assigning a type to the variable 'y' (line 2420)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2420, 12), 'y', T_111269)
        # SSA join for if statement (line 2419)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 2421):
        
        # Assigning a Call to a Name (line 2421):
        
        # Call to vstack(...): (line 2421)
        # Processing the call arguments (line 2421)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2421)
        tuple_111272 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2421, 23), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2421)
        # Adding element type (line 2421)
        # Getting the type of 'X' (line 2421)
        X_111273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2421, 23), 'X', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2421, 23), tuple_111272, X_111273)
        # Adding element type (line 2421)
        # Getting the type of 'y' (line 2421)
        y_111274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2421, 26), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2421, 23), tuple_111272, y_111274)
        
        # Processing the call keyword arguments (line 2421)
        kwargs_111275 = {}
        # Getting the type of 'np' (line 2421)
        np_111270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2421, 12), 'np', False)
        # Obtaining the member 'vstack' of a type (line 2421)
        vstack_111271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2421, 12), np_111270, 'vstack')
        # Calling vstack(args, kwargs) (line 2421)
        vstack_call_result_111276 = invoke(stypy.reporting.localization.Localization(__file__, 2421, 12), vstack_111271, *[tuple_111272], **kwargs_111275)
        
        # Assigning a type to the variable 'X' (line 2421)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2421, 8), 'X', vstack_call_result_111276)

        if more_types_in_union_111245:
            # SSA join for if statement (line 2417)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 2423)
    # Getting the type of 'ddof' (line 2423)
    ddof_111277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2423, 7), 'ddof')
    # Getting the type of 'None' (line 2423)
    None_111278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2423, 15), 'None')
    
    (may_be_111279, more_types_in_union_111280) = may_be_none(ddof_111277, None_111278)

    if may_be_111279:

        if more_types_in_union_111280:
            # Runtime conditional SSA (line 2423)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        
        # Getting the type of 'bias' (line 2424)
        bias_111281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2424, 11), 'bias')
        int_111282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2424, 19), 'int')
        # Applying the binary operator '==' (line 2424)
        result_eq_111283 = python_operator(stypy.reporting.localization.Localization(__file__, 2424, 11), '==', bias_111281, int_111282)
        
        # Testing the type of an if condition (line 2424)
        if_condition_111284 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2424, 8), result_eq_111283)
        # Assigning a type to the variable 'if_condition_111284' (line 2424)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2424, 8), 'if_condition_111284', if_condition_111284)
        # SSA begins for if statement (line 2424)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 2425):
        
        # Assigning a Num to a Name (line 2425):
        int_111285 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2425, 19), 'int')
        # Assigning a type to the variable 'ddof' (line 2425)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2425, 12), 'ddof', int_111285)
        # SSA branch for the else part of an if statement (line 2424)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Num to a Name (line 2427):
        
        # Assigning a Num to a Name (line 2427):
        int_111286 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2427, 19), 'int')
        # Assigning a type to the variable 'ddof' (line 2427)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2427, 12), 'ddof', int_111286)
        # SSA join for if statement (line 2424)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_111280:
            # SSA join for if statement (line 2423)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Name to a Name (line 2430):
    
    # Assigning a Name to a Name (line 2430):
    # Getting the type of 'None' (line 2430)
    None_111287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2430, 8), 'None')
    # Assigning a type to the variable 'w' (line 2430)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2430, 4), 'w', None_111287)
    
    # Type idiom detected: calculating its left and rigth part (line 2431)
    # Getting the type of 'fweights' (line 2431)
    fweights_111288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2431, 4), 'fweights')
    # Getting the type of 'None' (line 2431)
    None_111289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2431, 23), 'None')
    
    (may_be_111290, more_types_in_union_111291) = may_not_be_none(fweights_111288, None_111289)

    if may_be_111290:

        if more_types_in_union_111291:
            # Runtime conditional SSA (line 2431)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 2432):
        
        # Assigning a Call to a Name (line 2432):
        
        # Call to asarray(...): (line 2432)
        # Processing the call arguments (line 2432)
        # Getting the type of 'fweights' (line 2432)
        fweights_111294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2432, 30), 'fweights', False)
        # Processing the call keyword arguments (line 2432)
        # Getting the type of 'np' (line 2432)
        np_111295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2432, 46), 'np', False)
        # Obtaining the member 'float' of a type (line 2432)
        float_111296 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2432, 46), np_111295, 'float')
        keyword_111297 = float_111296
        kwargs_111298 = {'dtype': keyword_111297}
        # Getting the type of 'np' (line 2432)
        np_111292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2432, 19), 'np', False)
        # Obtaining the member 'asarray' of a type (line 2432)
        asarray_111293 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2432, 19), np_111292, 'asarray')
        # Calling asarray(args, kwargs) (line 2432)
        asarray_call_result_111299 = invoke(stypy.reporting.localization.Localization(__file__, 2432, 19), asarray_111293, *[fweights_111294], **kwargs_111298)
        
        # Assigning a type to the variable 'fweights' (line 2432)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2432, 8), 'fweights', asarray_call_result_111299)
        
        
        
        # Call to all(...): (line 2433)
        # Processing the call arguments (line 2433)
        
        # Getting the type of 'fweights' (line 2433)
        fweights_111302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2433, 22), 'fweights', False)
        
        # Call to around(...): (line 2433)
        # Processing the call arguments (line 2433)
        # Getting the type of 'fweights' (line 2433)
        fweights_111305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2433, 44), 'fweights', False)
        # Processing the call keyword arguments (line 2433)
        kwargs_111306 = {}
        # Getting the type of 'np' (line 2433)
        np_111303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2433, 34), 'np', False)
        # Obtaining the member 'around' of a type (line 2433)
        around_111304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2433, 34), np_111303, 'around')
        # Calling around(args, kwargs) (line 2433)
        around_call_result_111307 = invoke(stypy.reporting.localization.Localization(__file__, 2433, 34), around_111304, *[fweights_111305], **kwargs_111306)
        
        # Applying the binary operator '==' (line 2433)
        result_eq_111308 = python_operator(stypy.reporting.localization.Localization(__file__, 2433, 22), '==', fweights_111302, around_call_result_111307)
        
        # Processing the call keyword arguments (line 2433)
        kwargs_111309 = {}
        # Getting the type of 'np' (line 2433)
        np_111300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2433, 15), 'np', False)
        # Obtaining the member 'all' of a type (line 2433)
        all_111301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2433, 15), np_111300, 'all')
        # Calling all(args, kwargs) (line 2433)
        all_call_result_111310 = invoke(stypy.reporting.localization.Localization(__file__, 2433, 15), all_111301, *[result_eq_111308], **kwargs_111309)
        
        # Applying the 'not' unary operator (line 2433)
        result_not__111311 = python_operator(stypy.reporting.localization.Localization(__file__, 2433, 11), 'not', all_call_result_111310)
        
        # Testing the type of an if condition (line 2433)
        if_condition_111312 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2433, 8), result_not__111311)
        # Assigning a type to the variable 'if_condition_111312' (line 2433)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2433, 8), 'if_condition_111312', if_condition_111312)
        # SSA begins for if statement (line 2433)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to TypeError(...): (line 2434)
        # Processing the call arguments (line 2434)
        str_111314 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2435, 16), 'str', 'fweights must be integer')
        # Processing the call keyword arguments (line 2434)
        kwargs_111315 = {}
        # Getting the type of 'TypeError' (line 2434)
        TypeError_111313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2434, 18), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 2434)
        TypeError_call_result_111316 = invoke(stypy.reporting.localization.Localization(__file__, 2434, 18), TypeError_111313, *[str_111314], **kwargs_111315)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2434, 12), TypeError_call_result_111316, 'raise parameter', BaseException)
        # SSA join for if statement (line 2433)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'fweights' (line 2436)
        fweights_111317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2436, 11), 'fweights')
        # Obtaining the member 'ndim' of a type (line 2436)
        ndim_111318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2436, 11), fweights_111317, 'ndim')
        int_111319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2436, 27), 'int')
        # Applying the binary operator '>' (line 2436)
        result_gt_111320 = python_operator(stypy.reporting.localization.Localization(__file__, 2436, 11), '>', ndim_111318, int_111319)
        
        # Testing the type of an if condition (line 2436)
        if_condition_111321 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2436, 8), result_gt_111320)
        # Assigning a type to the variable 'if_condition_111321' (line 2436)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2436, 8), 'if_condition_111321', if_condition_111321)
        # SSA begins for if statement (line 2436)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to RuntimeError(...): (line 2437)
        # Processing the call arguments (line 2437)
        str_111323 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2438, 16), 'str', 'cannot handle multidimensional fweights')
        # Processing the call keyword arguments (line 2437)
        kwargs_111324 = {}
        # Getting the type of 'RuntimeError' (line 2437)
        RuntimeError_111322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2437, 18), 'RuntimeError', False)
        # Calling RuntimeError(args, kwargs) (line 2437)
        RuntimeError_call_result_111325 = invoke(stypy.reporting.localization.Localization(__file__, 2437, 18), RuntimeError_111322, *[str_111323], **kwargs_111324)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2437, 12), RuntimeError_call_result_111325, 'raise parameter', BaseException)
        # SSA join for if statement (line 2436)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Obtaining the type of the subscript
        int_111326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2439, 26), 'int')
        # Getting the type of 'fweights' (line 2439)
        fweights_111327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2439, 11), 'fweights')
        # Obtaining the member 'shape' of a type (line 2439)
        shape_111328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2439, 11), fweights_111327, 'shape')
        # Obtaining the member '__getitem__' of a type (line 2439)
        getitem___111329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2439, 11), shape_111328, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2439)
        subscript_call_result_111330 = invoke(stypy.reporting.localization.Localization(__file__, 2439, 11), getitem___111329, int_111326)
        
        
        # Obtaining the type of the subscript
        int_111331 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2439, 40), 'int')
        # Getting the type of 'X' (line 2439)
        X_111332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2439, 32), 'X')
        # Obtaining the member 'shape' of a type (line 2439)
        shape_111333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2439, 32), X_111332, 'shape')
        # Obtaining the member '__getitem__' of a type (line 2439)
        getitem___111334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2439, 32), shape_111333, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2439)
        subscript_call_result_111335 = invoke(stypy.reporting.localization.Localization(__file__, 2439, 32), getitem___111334, int_111331)
        
        # Applying the binary operator '!=' (line 2439)
        result_ne_111336 = python_operator(stypy.reporting.localization.Localization(__file__, 2439, 11), '!=', subscript_call_result_111330, subscript_call_result_111335)
        
        # Testing the type of an if condition (line 2439)
        if_condition_111337 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2439, 8), result_ne_111336)
        # Assigning a type to the variable 'if_condition_111337' (line 2439)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2439, 8), 'if_condition_111337', if_condition_111337)
        # SSA begins for if statement (line 2439)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to RuntimeError(...): (line 2440)
        # Processing the call arguments (line 2440)
        str_111339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2441, 16), 'str', 'incompatible numbers of samples and fweights')
        # Processing the call keyword arguments (line 2440)
        kwargs_111340 = {}
        # Getting the type of 'RuntimeError' (line 2440)
        RuntimeError_111338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2440, 18), 'RuntimeError', False)
        # Calling RuntimeError(args, kwargs) (line 2440)
        RuntimeError_call_result_111341 = invoke(stypy.reporting.localization.Localization(__file__, 2440, 18), RuntimeError_111338, *[str_111339], **kwargs_111340)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2440, 12), RuntimeError_call_result_111341, 'raise parameter', BaseException)
        # SSA join for if statement (line 2439)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to any(...): (line 2442)
        # Processing the call arguments (line 2442)
        
        # Getting the type of 'fweights' (line 2442)
        fweights_111343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2442, 15), 'fweights', False)
        int_111344 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2442, 26), 'int')
        # Applying the binary operator '<' (line 2442)
        result_lt_111345 = python_operator(stypy.reporting.localization.Localization(__file__, 2442, 15), '<', fweights_111343, int_111344)
        
        # Processing the call keyword arguments (line 2442)
        kwargs_111346 = {}
        # Getting the type of 'any' (line 2442)
        any_111342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2442, 11), 'any', False)
        # Calling any(args, kwargs) (line 2442)
        any_call_result_111347 = invoke(stypy.reporting.localization.Localization(__file__, 2442, 11), any_111342, *[result_lt_111345], **kwargs_111346)
        
        # Testing the type of an if condition (line 2442)
        if_condition_111348 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2442, 8), any_call_result_111347)
        # Assigning a type to the variable 'if_condition_111348' (line 2442)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2442, 8), 'if_condition_111348', if_condition_111348)
        # SSA begins for if statement (line 2442)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 2443)
        # Processing the call arguments (line 2443)
        str_111350 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2444, 16), 'str', 'fweights cannot be negative')
        # Processing the call keyword arguments (line 2443)
        kwargs_111351 = {}
        # Getting the type of 'ValueError' (line 2443)
        ValueError_111349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2443, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2443)
        ValueError_call_result_111352 = invoke(stypy.reporting.localization.Localization(__file__, 2443, 18), ValueError_111349, *[str_111350], **kwargs_111351)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2443, 12), ValueError_call_result_111352, 'raise parameter', BaseException)
        # SSA join for if statement (line 2442)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 2445):
        
        # Assigning a Name to a Name (line 2445):
        # Getting the type of 'fweights' (line 2445)
        fweights_111353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2445, 12), 'fweights')
        # Assigning a type to the variable 'w' (line 2445)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2445, 8), 'w', fweights_111353)

        if more_types_in_union_111291:
            # SSA join for if statement (line 2431)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 2446)
    # Getting the type of 'aweights' (line 2446)
    aweights_111354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2446, 4), 'aweights')
    # Getting the type of 'None' (line 2446)
    None_111355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2446, 23), 'None')
    
    (may_be_111356, more_types_in_union_111357) = may_not_be_none(aweights_111354, None_111355)

    if may_be_111356:

        if more_types_in_union_111357:
            # Runtime conditional SSA (line 2446)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 2447):
        
        # Assigning a Call to a Name (line 2447):
        
        # Call to asarray(...): (line 2447)
        # Processing the call arguments (line 2447)
        # Getting the type of 'aweights' (line 2447)
        aweights_111360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2447, 30), 'aweights', False)
        # Processing the call keyword arguments (line 2447)
        # Getting the type of 'np' (line 2447)
        np_111361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2447, 46), 'np', False)
        # Obtaining the member 'float' of a type (line 2447)
        float_111362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2447, 46), np_111361, 'float')
        keyword_111363 = float_111362
        kwargs_111364 = {'dtype': keyword_111363}
        # Getting the type of 'np' (line 2447)
        np_111358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2447, 19), 'np', False)
        # Obtaining the member 'asarray' of a type (line 2447)
        asarray_111359 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2447, 19), np_111358, 'asarray')
        # Calling asarray(args, kwargs) (line 2447)
        asarray_call_result_111365 = invoke(stypy.reporting.localization.Localization(__file__, 2447, 19), asarray_111359, *[aweights_111360], **kwargs_111364)
        
        # Assigning a type to the variable 'aweights' (line 2447)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2447, 8), 'aweights', asarray_call_result_111365)
        
        
        # Getting the type of 'aweights' (line 2448)
        aweights_111366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2448, 11), 'aweights')
        # Obtaining the member 'ndim' of a type (line 2448)
        ndim_111367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2448, 11), aweights_111366, 'ndim')
        int_111368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2448, 27), 'int')
        # Applying the binary operator '>' (line 2448)
        result_gt_111369 = python_operator(stypy.reporting.localization.Localization(__file__, 2448, 11), '>', ndim_111367, int_111368)
        
        # Testing the type of an if condition (line 2448)
        if_condition_111370 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2448, 8), result_gt_111369)
        # Assigning a type to the variable 'if_condition_111370' (line 2448)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2448, 8), 'if_condition_111370', if_condition_111370)
        # SSA begins for if statement (line 2448)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to RuntimeError(...): (line 2449)
        # Processing the call arguments (line 2449)
        str_111372 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2450, 16), 'str', 'cannot handle multidimensional aweights')
        # Processing the call keyword arguments (line 2449)
        kwargs_111373 = {}
        # Getting the type of 'RuntimeError' (line 2449)
        RuntimeError_111371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2449, 18), 'RuntimeError', False)
        # Calling RuntimeError(args, kwargs) (line 2449)
        RuntimeError_call_result_111374 = invoke(stypy.reporting.localization.Localization(__file__, 2449, 18), RuntimeError_111371, *[str_111372], **kwargs_111373)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2449, 12), RuntimeError_call_result_111374, 'raise parameter', BaseException)
        # SSA join for if statement (line 2448)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Obtaining the type of the subscript
        int_111375 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2451, 26), 'int')
        # Getting the type of 'aweights' (line 2451)
        aweights_111376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2451, 11), 'aweights')
        # Obtaining the member 'shape' of a type (line 2451)
        shape_111377 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2451, 11), aweights_111376, 'shape')
        # Obtaining the member '__getitem__' of a type (line 2451)
        getitem___111378 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2451, 11), shape_111377, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2451)
        subscript_call_result_111379 = invoke(stypy.reporting.localization.Localization(__file__, 2451, 11), getitem___111378, int_111375)
        
        
        # Obtaining the type of the subscript
        int_111380 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2451, 40), 'int')
        # Getting the type of 'X' (line 2451)
        X_111381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2451, 32), 'X')
        # Obtaining the member 'shape' of a type (line 2451)
        shape_111382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2451, 32), X_111381, 'shape')
        # Obtaining the member '__getitem__' of a type (line 2451)
        getitem___111383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2451, 32), shape_111382, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2451)
        subscript_call_result_111384 = invoke(stypy.reporting.localization.Localization(__file__, 2451, 32), getitem___111383, int_111380)
        
        # Applying the binary operator '!=' (line 2451)
        result_ne_111385 = python_operator(stypy.reporting.localization.Localization(__file__, 2451, 11), '!=', subscript_call_result_111379, subscript_call_result_111384)
        
        # Testing the type of an if condition (line 2451)
        if_condition_111386 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2451, 8), result_ne_111385)
        # Assigning a type to the variable 'if_condition_111386' (line 2451)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2451, 8), 'if_condition_111386', if_condition_111386)
        # SSA begins for if statement (line 2451)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to RuntimeError(...): (line 2452)
        # Processing the call arguments (line 2452)
        str_111388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2453, 16), 'str', 'incompatible numbers of samples and aweights')
        # Processing the call keyword arguments (line 2452)
        kwargs_111389 = {}
        # Getting the type of 'RuntimeError' (line 2452)
        RuntimeError_111387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2452, 18), 'RuntimeError', False)
        # Calling RuntimeError(args, kwargs) (line 2452)
        RuntimeError_call_result_111390 = invoke(stypy.reporting.localization.Localization(__file__, 2452, 18), RuntimeError_111387, *[str_111388], **kwargs_111389)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2452, 12), RuntimeError_call_result_111390, 'raise parameter', BaseException)
        # SSA join for if statement (line 2451)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to any(...): (line 2454)
        # Processing the call arguments (line 2454)
        
        # Getting the type of 'aweights' (line 2454)
        aweights_111392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2454, 15), 'aweights', False)
        int_111393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2454, 26), 'int')
        # Applying the binary operator '<' (line 2454)
        result_lt_111394 = python_operator(stypy.reporting.localization.Localization(__file__, 2454, 15), '<', aweights_111392, int_111393)
        
        # Processing the call keyword arguments (line 2454)
        kwargs_111395 = {}
        # Getting the type of 'any' (line 2454)
        any_111391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2454, 11), 'any', False)
        # Calling any(args, kwargs) (line 2454)
        any_call_result_111396 = invoke(stypy.reporting.localization.Localization(__file__, 2454, 11), any_111391, *[result_lt_111394], **kwargs_111395)
        
        # Testing the type of an if condition (line 2454)
        if_condition_111397 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2454, 8), any_call_result_111396)
        # Assigning a type to the variable 'if_condition_111397' (line 2454)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2454, 8), 'if_condition_111397', if_condition_111397)
        # SSA begins for if statement (line 2454)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 2455)
        # Processing the call arguments (line 2455)
        str_111399 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2456, 16), 'str', 'aweights cannot be negative')
        # Processing the call keyword arguments (line 2455)
        kwargs_111400 = {}
        # Getting the type of 'ValueError' (line 2455)
        ValueError_111398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2455, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2455)
        ValueError_call_result_111401 = invoke(stypy.reporting.localization.Localization(__file__, 2455, 18), ValueError_111398, *[str_111399], **kwargs_111400)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2455, 12), ValueError_call_result_111401, 'raise parameter', BaseException)
        # SSA join for if statement (line 2454)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 2457)
        # Getting the type of 'w' (line 2457)
        w_111402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2457, 11), 'w')
        # Getting the type of 'None' (line 2457)
        None_111403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2457, 16), 'None')
        
        (may_be_111404, more_types_in_union_111405) = may_be_none(w_111402, None_111403)

        if may_be_111404:

            if more_types_in_union_111405:
                # Runtime conditional SSA (line 2457)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Name (line 2458):
            
            # Assigning a Name to a Name (line 2458):
            # Getting the type of 'aweights' (line 2458)
            aweights_111406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2458, 16), 'aweights')
            # Assigning a type to the variable 'w' (line 2458)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2458, 12), 'w', aweights_111406)

            if more_types_in_union_111405:
                # Runtime conditional SSA for else branch (line 2457)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_111404) or more_types_in_union_111405):
            
            # Getting the type of 'w' (line 2460)
            w_111407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2460, 12), 'w')
            # Getting the type of 'aweights' (line 2460)
            aweights_111408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2460, 17), 'aweights')
            # Applying the binary operator '*=' (line 2460)
            result_imul_111409 = python_operator(stypy.reporting.localization.Localization(__file__, 2460, 12), '*=', w_111407, aweights_111408)
            # Assigning a type to the variable 'w' (line 2460)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2460, 12), 'w', result_imul_111409)
            

            if (may_be_111404 and more_types_in_union_111405):
                # SSA join for if statement (line 2457)
                module_type_store = module_type_store.join_ssa_context()


        

        if more_types_in_union_111357:
            # SSA join for if statement (line 2446)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Tuple (line 2462):
    
    # Assigning a Call to a Name:
    
    # Call to average(...): (line 2462)
    # Processing the call arguments (line 2462)
    # Getting the type of 'X' (line 2462)
    X_111411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2462, 25), 'X', False)
    # Processing the call keyword arguments (line 2462)
    int_111412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2462, 33), 'int')
    keyword_111413 = int_111412
    # Getting the type of 'w' (line 2462)
    w_111414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2462, 44), 'w', False)
    keyword_111415 = w_111414
    # Getting the type of 'True' (line 2462)
    True_111416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2462, 56), 'True', False)
    keyword_111417 = True_111416
    kwargs_111418 = {'weights': keyword_111415, 'returned': keyword_111417, 'axis': keyword_111413}
    # Getting the type of 'average' (line 2462)
    average_111410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2462, 17), 'average', False)
    # Calling average(args, kwargs) (line 2462)
    average_call_result_111419 = invoke(stypy.reporting.localization.Localization(__file__, 2462, 17), average_111410, *[X_111411], **kwargs_111418)
    
    # Assigning a type to the variable 'call_assignment_107425' (line 2462)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2462, 4), 'call_assignment_107425', average_call_result_111419)
    
    # Assigning a Call to a Name (line 2462):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_111422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2462, 4), 'int')
    # Processing the call keyword arguments
    kwargs_111423 = {}
    # Getting the type of 'call_assignment_107425' (line 2462)
    call_assignment_107425_111420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2462, 4), 'call_assignment_107425', False)
    # Obtaining the member '__getitem__' of a type (line 2462)
    getitem___111421 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2462, 4), call_assignment_107425_111420, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_111424 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___111421, *[int_111422], **kwargs_111423)
    
    # Assigning a type to the variable 'call_assignment_107426' (line 2462)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2462, 4), 'call_assignment_107426', getitem___call_result_111424)
    
    # Assigning a Name to a Name (line 2462):
    # Getting the type of 'call_assignment_107426' (line 2462)
    call_assignment_107426_111425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2462, 4), 'call_assignment_107426')
    # Assigning a type to the variable 'avg' (line 2462)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2462, 4), 'avg', call_assignment_107426_111425)
    
    # Assigning a Call to a Name (line 2462):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_111428 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2462, 4), 'int')
    # Processing the call keyword arguments
    kwargs_111429 = {}
    # Getting the type of 'call_assignment_107425' (line 2462)
    call_assignment_107425_111426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2462, 4), 'call_assignment_107425', False)
    # Obtaining the member '__getitem__' of a type (line 2462)
    getitem___111427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2462, 4), call_assignment_107425_111426, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_111430 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___111427, *[int_111428], **kwargs_111429)
    
    # Assigning a type to the variable 'call_assignment_107427' (line 2462)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2462, 4), 'call_assignment_107427', getitem___call_result_111430)
    
    # Assigning a Name to a Name (line 2462):
    # Getting the type of 'call_assignment_107427' (line 2462)
    call_assignment_107427_111431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2462, 4), 'call_assignment_107427')
    # Assigning a type to the variable 'w_sum' (line 2462)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2462, 9), 'w_sum', call_assignment_107427_111431)
    
    # Assigning a Subscript to a Name (line 2463):
    
    # Assigning a Subscript to a Name (line 2463):
    
    # Obtaining the type of the subscript
    int_111432 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2463, 18), 'int')
    # Getting the type of 'w_sum' (line 2463)
    w_sum_111433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2463, 12), 'w_sum')
    # Obtaining the member '__getitem__' of a type (line 2463)
    getitem___111434 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2463, 12), w_sum_111433, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2463)
    subscript_call_result_111435 = invoke(stypy.reporting.localization.Localization(__file__, 2463, 12), getitem___111434, int_111432)
    
    # Assigning a type to the variable 'w_sum' (line 2463)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2463, 4), 'w_sum', subscript_call_result_111435)
    
    # Type idiom detected: calculating its left and rigth part (line 2466)
    # Getting the type of 'w' (line 2466)
    w_111436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2466, 7), 'w')
    # Getting the type of 'None' (line 2466)
    None_111437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2466, 12), 'None')
    
    (may_be_111438, more_types_in_union_111439) = may_be_none(w_111436, None_111437)

    if may_be_111438:

        if more_types_in_union_111439:
            # Runtime conditional SSA (line 2466)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a BinOp to a Name (line 2467):
        
        # Assigning a BinOp to a Name (line 2467):
        
        # Obtaining the type of the subscript
        int_111440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2467, 23), 'int')
        # Getting the type of 'X' (line 2467)
        X_111441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2467, 15), 'X')
        # Obtaining the member 'shape' of a type (line 2467)
        shape_111442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2467, 15), X_111441, 'shape')
        # Obtaining the member '__getitem__' of a type (line 2467)
        getitem___111443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2467, 15), shape_111442, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2467)
        subscript_call_result_111444 = invoke(stypy.reporting.localization.Localization(__file__, 2467, 15), getitem___111443, int_111440)
        
        # Getting the type of 'ddof' (line 2467)
        ddof_111445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2467, 28), 'ddof')
        # Applying the binary operator '-' (line 2467)
        result_sub_111446 = python_operator(stypy.reporting.localization.Localization(__file__, 2467, 15), '-', subscript_call_result_111444, ddof_111445)
        
        # Assigning a type to the variable 'fact' (line 2467)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2467, 8), 'fact', result_sub_111446)

        if more_types_in_union_111439:
            # Runtime conditional SSA for else branch (line 2466)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_111438) or more_types_in_union_111439):
        
        
        # Getting the type of 'ddof' (line 2468)
        ddof_111447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2468, 9), 'ddof')
        int_111448 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2468, 17), 'int')
        # Applying the binary operator '==' (line 2468)
        result_eq_111449 = python_operator(stypy.reporting.localization.Localization(__file__, 2468, 9), '==', ddof_111447, int_111448)
        
        # Testing the type of an if condition (line 2468)
        if_condition_111450 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2468, 9), result_eq_111449)
        # Assigning a type to the variable 'if_condition_111450' (line 2468)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2468, 9), 'if_condition_111450', if_condition_111450)
        # SSA begins for if statement (line 2468)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 2469):
        
        # Assigning a Name to a Name (line 2469):
        # Getting the type of 'w_sum' (line 2469)
        w_sum_111451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2469, 15), 'w_sum')
        # Assigning a type to the variable 'fact' (line 2469)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2469, 8), 'fact', w_sum_111451)
        # SSA branch for the else part of an if statement (line 2468)
        module_type_store.open_ssa_branch('else')
        
        # Type idiom detected: calculating its left and rigth part (line 2470)
        # Getting the type of 'aweights' (line 2470)
        aweights_111452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2470, 9), 'aweights')
        # Getting the type of 'None' (line 2470)
        None_111453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2470, 21), 'None')
        
        (may_be_111454, more_types_in_union_111455) = may_be_none(aweights_111452, None_111453)

        if may_be_111454:

            if more_types_in_union_111455:
                # Runtime conditional SSA (line 2470)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a BinOp to a Name (line 2471):
            
            # Assigning a BinOp to a Name (line 2471):
            # Getting the type of 'w_sum' (line 2471)
            w_sum_111456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2471, 15), 'w_sum')
            # Getting the type of 'ddof' (line 2471)
            ddof_111457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2471, 23), 'ddof')
            # Applying the binary operator '-' (line 2471)
            result_sub_111458 = python_operator(stypy.reporting.localization.Localization(__file__, 2471, 15), '-', w_sum_111456, ddof_111457)
            
            # Assigning a type to the variable 'fact' (line 2471)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2471, 8), 'fact', result_sub_111458)

            if more_types_in_union_111455:
                # Runtime conditional SSA for else branch (line 2470)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_111454) or more_types_in_union_111455):
            
            # Assigning a BinOp to a Name (line 2473):
            
            # Assigning a BinOp to a Name (line 2473):
            # Getting the type of 'w_sum' (line 2473)
            w_sum_111459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2473, 15), 'w_sum')
            # Getting the type of 'ddof' (line 2473)
            ddof_111460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2473, 23), 'ddof')
            
            # Call to sum(...): (line 2473)
            # Processing the call arguments (line 2473)
            # Getting the type of 'w' (line 2473)
            w_111462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2473, 32), 'w', False)
            # Getting the type of 'aweights' (line 2473)
            aweights_111463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2473, 34), 'aweights', False)
            # Applying the binary operator '*' (line 2473)
            result_mul_111464 = python_operator(stypy.reporting.localization.Localization(__file__, 2473, 32), '*', w_111462, aweights_111463)
            
            # Processing the call keyword arguments (line 2473)
            kwargs_111465 = {}
            # Getting the type of 'sum' (line 2473)
            sum_111461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2473, 28), 'sum', False)
            # Calling sum(args, kwargs) (line 2473)
            sum_call_result_111466 = invoke(stypy.reporting.localization.Localization(__file__, 2473, 28), sum_111461, *[result_mul_111464], **kwargs_111465)
            
            # Applying the binary operator '*' (line 2473)
            result_mul_111467 = python_operator(stypy.reporting.localization.Localization(__file__, 2473, 23), '*', ddof_111460, sum_call_result_111466)
            
            # Getting the type of 'w_sum' (line 2473)
            w_sum_111468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2473, 44), 'w_sum')
            # Applying the binary operator 'div' (line 2473)
            result_div_111469 = python_operator(stypy.reporting.localization.Localization(__file__, 2473, 43), 'div', result_mul_111467, w_sum_111468)
            
            # Applying the binary operator '-' (line 2473)
            result_sub_111470 = python_operator(stypy.reporting.localization.Localization(__file__, 2473, 15), '-', w_sum_111459, result_div_111469)
            
            # Assigning a type to the variable 'fact' (line 2473)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2473, 8), 'fact', result_sub_111470)

            if (may_be_111454 and more_types_in_union_111455):
                # SSA join for if statement (line 2470)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 2468)
        module_type_store = module_type_store.join_ssa_context()
        

        if (may_be_111438 and more_types_in_union_111439):
            # SSA join for if statement (line 2466)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Getting the type of 'fact' (line 2475)
    fact_111471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2475, 7), 'fact')
    int_111472 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2475, 15), 'int')
    # Applying the binary operator '<=' (line 2475)
    result_le_111473 = python_operator(stypy.reporting.localization.Localization(__file__, 2475, 7), '<=', fact_111471, int_111472)
    
    # Testing the type of an if condition (line 2475)
    if_condition_111474 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2475, 4), result_le_111473)
    # Assigning a type to the variable 'if_condition_111474' (line 2475)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2475, 4), 'if_condition_111474', if_condition_111474)
    # SSA begins for if statement (line 2475)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 2476)
    # Processing the call arguments (line 2476)
    str_111477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2476, 22), 'str', 'Degrees of freedom <= 0 for slice')
    # Getting the type of 'RuntimeWarning' (line 2476)
    RuntimeWarning_111478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2476, 59), 'RuntimeWarning', False)
    # Processing the call keyword arguments (line 2476)
    kwargs_111479 = {}
    # Getting the type of 'warnings' (line 2476)
    warnings_111475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2476, 8), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 2476)
    warn_111476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2476, 8), warnings_111475, 'warn')
    # Calling warn(args, kwargs) (line 2476)
    warn_call_result_111480 = invoke(stypy.reporting.localization.Localization(__file__, 2476, 8), warn_111476, *[str_111477, RuntimeWarning_111478], **kwargs_111479)
    
    
    # Assigning a Num to a Name (line 2477):
    
    # Assigning a Num to a Name (line 2477):
    float_111481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2477, 15), 'float')
    # Assigning a type to the variable 'fact' (line 2477)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2477, 8), 'fact', float_111481)
    # SSA join for if statement (line 2475)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'X' (line 2479)
    X_111482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2479, 4), 'X')
    
    # Obtaining the type of the subscript
    slice_111483 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2479, 9), None, None, None)
    # Getting the type of 'None' (line 2479)
    None_111484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2479, 16), 'None')
    # Getting the type of 'avg' (line 2479)
    avg_111485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2479, 9), 'avg')
    # Obtaining the member '__getitem__' of a type (line 2479)
    getitem___111486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2479, 9), avg_111485, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2479)
    subscript_call_result_111487 = invoke(stypy.reporting.localization.Localization(__file__, 2479, 9), getitem___111486, (slice_111483, None_111484))
    
    # Applying the binary operator '-=' (line 2479)
    result_isub_111488 = python_operator(stypy.reporting.localization.Localization(__file__, 2479, 4), '-=', X_111482, subscript_call_result_111487)
    # Assigning a type to the variable 'X' (line 2479)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2479, 4), 'X', result_isub_111488)
    
    
    # Type idiom detected: calculating its left and rigth part (line 2480)
    # Getting the type of 'w' (line 2480)
    w_111489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2480, 7), 'w')
    # Getting the type of 'None' (line 2480)
    None_111490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2480, 12), 'None')
    
    (may_be_111491, more_types_in_union_111492) = may_be_none(w_111489, None_111490)

    if may_be_111491:

        if more_types_in_union_111492:
            # Runtime conditional SSA (line 2480)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Attribute to a Name (line 2481):
        
        # Assigning a Attribute to a Name (line 2481):
        # Getting the type of 'X' (line 2481)
        X_111493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2481, 14), 'X')
        # Obtaining the member 'T' of a type (line 2481)
        T_111494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2481, 14), X_111493, 'T')
        # Assigning a type to the variable 'X_T' (line 2481)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2481, 8), 'X_T', T_111494)

        if more_types_in_union_111492:
            # Runtime conditional SSA for else branch (line 2480)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_111491) or more_types_in_union_111492):
        
        # Assigning a Attribute to a Name (line 2483):
        
        # Assigning a Attribute to a Name (line 2483):
        # Getting the type of 'X' (line 2483)
        X_111495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2483, 15), 'X')
        # Getting the type of 'w' (line 2483)
        w_111496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2483, 17), 'w')
        # Applying the binary operator '*' (line 2483)
        result_mul_111497 = python_operator(stypy.reporting.localization.Localization(__file__, 2483, 15), '*', X_111495, w_111496)
        
        # Obtaining the member 'T' of a type (line 2483)
        T_111498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2483, 15), result_mul_111497, 'T')
        # Assigning a type to the variable 'X_T' (line 2483)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2483, 8), 'X_T', T_111498)

        if (may_be_111491 and more_types_in_union_111492):
            # SSA join for if statement (line 2480)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 2484):
    
    # Assigning a Call to a Name (line 2484):
    
    # Call to dot(...): (line 2484)
    # Processing the call arguments (line 2484)
    # Getting the type of 'X' (line 2484)
    X_111500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2484, 12), 'X', False)
    
    # Call to conj(...): (line 2484)
    # Processing the call keyword arguments (line 2484)
    kwargs_111503 = {}
    # Getting the type of 'X_T' (line 2484)
    X_T_111501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2484, 15), 'X_T', False)
    # Obtaining the member 'conj' of a type (line 2484)
    conj_111502 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2484, 15), X_T_111501, 'conj')
    # Calling conj(args, kwargs) (line 2484)
    conj_call_result_111504 = invoke(stypy.reporting.localization.Localization(__file__, 2484, 15), conj_111502, *[], **kwargs_111503)
    
    # Processing the call keyword arguments (line 2484)
    kwargs_111505 = {}
    # Getting the type of 'dot' (line 2484)
    dot_111499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2484, 8), 'dot', False)
    # Calling dot(args, kwargs) (line 2484)
    dot_call_result_111506 = invoke(stypy.reporting.localization.Localization(__file__, 2484, 8), dot_111499, *[X_111500, conj_call_result_111504], **kwargs_111505)
    
    # Assigning a type to the variable 'c' (line 2484)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2484, 4), 'c', dot_call_result_111506)
    
    # Getting the type of 'c' (line 2485)
    c_111507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2485, 4), 'c')
    float_111508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2485, 9), 'float')
    
    # Call to float64(...): (line 2485)
    # Processing the call arguments (line 2485)
    # Getting the type of 'fact' (line 2485)
    fact_111511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2485, 25), 'fact', False)
    # Processing the call keyword arguments (line 2485)
    kwargs_111512 = {}
    # Getting the type of 'np' (line 2485)
    np_111509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2485, 14), 'np', False)
    # Obtaining the member 'float64' of a type (line 2485)
    float64_111510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2485, 14), np_111509, 'float64')
    # Calling float64(args, kwargs) (line 2485)
    float64_call_result_111513 = invoke(stypy.reporting.localization.Localization(__file__, 2485, 14), float64_111510, *[fact_111511], **kwargs_111512)
    
    # Applying the binary operator 'div' (line 2485)
    result_div_111514 = python_operator(stypy.reporting.localization.Localization(__file__, 2485, 9), 'div', float_111508, float64_call_result_111513)
    
    # Applying the binary operator '*=' (line 2485)
    result_imul_111515 = python_operator(stypy.reporting.localization.Localization(__file__, 2485, 4), '*=', c_111507, result_div_111514)
    # Assigning a type to the variable 'c' (line 2485)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2485, 4), 'c', result_imul_111515)
    
    
    # Call to squeeze(...): (line 2486)
    # Processing the call keyword arguments (line 2486)
    kwargs_111518 = {}
    # Getting the type of 'c' (line 2486)
    c_111516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2486, 11), 'c', False)
    # Obtaining the member 'squeeze' of a type (line 2486)
    squeeze_111517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2486, 11), c_111516, 'squeeze')
    # Calling squeeze(args, kwargs) (line 2486)
    squeeze_call_result_111519 = invoke(stypy.reporting.localization.Localization(__file__, 2486, 11), squeeze_111517, *[], **kwargs_111518)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2486)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2486, 4), 'stypy_return_type', squeeze_call_result_111519)
    
    # ################# End of 'cov(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'cov' in the type store
    # Getting the type of 'stypy_return_type' (line 2287)
    stypy_return_type_111520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2287, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_111520)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'cov'
    return stypy_return_type_111520

# Assigning a type to the variable 'cov' (line 2287)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2287, 0), 'cov', cov)

@norecursion
def corrcoef(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2489)
    None_111521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2489, 18), 'None')
    int_111522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2489, 31), 'int')
    # Getting the type of 'np' (line 2489)
    np_111523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2489, 39), 'np')
    # Obtaining the member '_NoValue' of a type (line 2489)
    _NoValue_111524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2489, 39), np_111523, '_NoValue')
    # Getting the type of 'np' (line 2489)
    np_111525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2489, 57), 'np')
    # Obtaining the member '_NoValue' of a type (line 2489)
    _NoValue_111526 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2489, 57), np_111525, '_NoValue')
    defaults = [None_111521, int_111522, _NoValue_111524, _NoValue_111526]
    # Create a new context for function 'corrcoef'
    module_type_store = module_type_store.open_function_context('corrcoef', 2489, 0, False)
    
    # Passed parameters checking function
    corrcoef.stypy_localization = localization
    corrcoef.stypy_type_of_self = None
    corrcoef.stypy_type_store = module_type_store
    corrcoef.stypy_function_name = 'corrcoef'
    corrcoef.stypy_param_names_list = ['x', 'y', 'rowvar', 'bias', 'ddof']
    corrcoef.stypy_varargs_param_name = None
    corrcoef.stypy_kwargs_param_name = None
    corrcoef.stypy_call_defaults = defaults
    corrcoef.stypy_call_varargs = varargs
    corrcoef.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'corrcoef', ['x', 'y', 'rowvar', 'bias', 'ddof'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'corrcoef', localization, ['x', 'y', 'rowvar', 'bias', 'ddof'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'corrcoef(...)' code ##################

    str_111527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2545, (-1)), 'str', '\n    Return Pearson product-moment correlation coefficients.\n\n    Please refer to the documentation for `cov` for more detail.  The\n    relationship between the correlation coefficient matrix, `R`, and the\n    covariance matrix, `C`, is\n\n    .. math:: R_{ij} = \\frac{ C_{ij} } { \\sqrt{ C_{ii} * C_{jj} } }\n\n    The values of `R` are between -1 and 1, inclusive.\n\n    Parameters\n    ----------\n    x : array_like\n        A 1-D or 2-D array containing multiple variables and observations.\n        Each row of `x` represents a variable, and each column a single\n        observation of all those variables. Also see `rowvar` below.\n    y : array_like, optional\n        An additional set of variables and observations. `y` has the same\n        shape as `x`.\n    rowvar : int, optional\n        If `rowvar` is non-zero (default), then each row represents a\n        variable, with observations in the columns. Otherwise, the relationship\n        is transposed: each column represents a variable, while the rows\n        contain observations.\n    bias : _NoValue, optional\n        Has no effect, do not use.\n\n        .. deprecated:: 1.10.0\n    ddof : _NoValue, optional\n        Has no effect, do not use.\n\n        .. deprecated:: 1.10.0\n\n    Returns\n    -------\n    R : ndarray\n        The correlation coefficient matrix of the variables.\n\n    See Also\n    --------\n    cov : Covariance matrix\n\n    Notes\n    -----\n    Due to floating point rounding the resulting array may not be Hermitian,\n    the diagonal elements may not be 1, and the elements may not satisfy the\n    inequality abs(a) <= 1. The real and imaginary parts are clipped to the\n    interval [-1,  1] in an attempt to improve on that situation but is not\n    much help in the complex case.\n\n    This function accepts but discards arguments `bias` and `ddof`.  This is\n    for backwards compatibility with previous versions of this function.  These\n    arguments had no effect on the return values of the function and can be\n    safely ignored in this and previous versions of numpy.\n    ')
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'bias' (line 2546)
    bias_111528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2546, 7), 'bias')
    # Getting the type of 'np' (line 2546)
    np_111529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2546, 19), 'np')
    # Obtaining the member '_NoValue' of a type (line 2546)
    _NoValue_111530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2546, 19), np_111529, '_NoValue')
    # Applying the binary operator 'isnot' (line 2546)
    result_is_not_111531 = python_operator(stypy.reporting.localization.Localization(__file__, 2546, 7), 'isnot', bias_111528, _NoValue_111530)
    
    
    # Getting the type of 'ddof' (line 2546)
    ddof_111532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2546, 34), 'ddof')
    # Getting the type of 'np' (line 2546)
    np_111533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2546, 46), 'np')
    # Obtaining the member '_NoValue' of a type (line 2546)
    _NoValue_111534 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2546, 46), np_111533, '_NoValue')
    # Applying the binary operator 'isnot' (line 2546)
    result_is_not_111535 = python_operator(stypy.reporting.localization.Localization(__file__, 2546, 34), 'isnot', ddof_111532, _NoValue_111534)
    
    # Applying the binary operator 'or' (line 2546)
    result_or_keyword_111536 = python_operator(stypy.reporting.localization.Localization(__file__, 2546, 7), 'or', result_is_not_111531, result_is_not_111535)
    
    # Testing the type of an if condition (line 2546)
    if_condition_111537 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2546, 4), result_or_keyword_111536)
    # Assigning a type to the variable 'if_condition_111537' (line 2546)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2546, 4), 'if_condition_111537', if_condition_111537)
    # SSA begins for if statement (line 2546)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 2548)
    # Processing the call arguments (line 2548)
    str_111540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2548, 22), 'str', 'bias and ddof have no effect and are deprecated')
    # Getting the type of 'DeprecationWarning' (line 2549)
    DeprecationWarning_111541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2549, 22), 'DeprecationWarning', False)
    # Processing the call keyword arguments (line 2548)
    kwargs_111542 = {}
    # Getting the type of 'warnings' (line 2548)
    warnings_111538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2548, 8), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 2548)
    warn_111539 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2548, 8), warnings_111538, 'warn')
    # Calling warn(args, kwargs) (line 2548)
    warn_call_result_111543 = invoke(stypy.reporting.localization.Localization(__file__, 2548, 8), warn_111539, *[str_111540, DeprecationWarning_111541], **kwargs_111542)
    
    # SSA join for if statement (line 2546)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2550):
    
    # Assigning a Call to a Name (line 2550):
    
    # Call to cov(...): (line 2550)
    # Processing the call arguments (line 2550)
    # Getting the type of 'x' (line 2550)
    x_111545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2550, 12), 'x', False)
    # Getting the type of 'y' (line 2550)
    y_111546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2550, 15), 'y', False)
    # Getting the type of 'rowvar' (line 2550)
    rowvar_111547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2550, 18), 'rowvar', False)
    # Processing the call keyword arguments (line 2550)
    kwargs_111548 = {}
    # Getting the type of 'cov' (line 2550)
    cov_111544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2550, 8), 'cov', False)
    # Calling cov(args, kwargs) (line 2550)
    cov_call_result_111549 = invoke(stypy.reporting.localization.Localization(__file__, 2550, 8), cov_111544, *[x_111545, y_111546, rowvar_111547], **kwargs_111548)
    
    # Assigning a type to the variable 'c' (line 2550)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2550, 4), 'c', cov_call_result_111549)
    
    
    # SSA begins for try-except statement (line 2551)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 2552):
    
    # Assigning a Call to a Name (line 2552):
    
    # Call to diag(...): (line 2552)
    # Processing the call arguments (line 2552)
    # Getting the type of 'c' (line 2552)
    c_111551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2552, 17), 'c', False)
    # Processing the call keyword arguments (line 2552)
    kwargs_111552 = {}
    # Getting the type of 'diag' (line 2552)
    diag_111550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2552, 12), 'diag', False)
    # Calling diag(args, kwargs) (line 2552)
    diag_call_result_111553 = invoke(stypy.reporting.localization.Localization(__file__, 2552, 12), diag_111550, *[c_111551], **kwargs_111552)
    
    # Assigning a type to the variable 'd' (line 2552)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2552, 8), 'd', diag_call_result_111553)
    # SSA branch for the except part of a try statement (line 2551)
    # SSA branch for the except 'ValueError' branch of a try statement (line 2551)
    module_type_store.open_ssa_branch('except')
    # Getting the type of 'c' (line 2556)
    c_111554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2556, 15), 'c')
    # Getting the type of 'c' (line 2556)
    c_111555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2556, 19), 'c')
    # Applying the binary operator 'div' (line 2556)
    result_div_111556 = python_operator(stypy.reporting.localization.Localization(__file__, 2556, 15), 'div', c_111554, c_111555)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2556)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2556, 8), 'stypy_return_type', result_div_111556)
    # SSA join for try-except statement (line 2551)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2557):
    
    # Assigning a Call to a Name (line 2557):
    
    # Call to sqrt(...): (line 2557)
    # Processing the call arguments (line 2557)
    # Getting the type of 'd' (line 2557)
    d_111558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2557, 18), 'd', False)
    # Obtaining the member 'real' of a type (line 2557)
    real_111559 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2557, 18), d_111558, 'real')
    # Processing the call keyword arguments (line 2557)
    kwargs_111560 = {}
    # Getting the type of 'sqrt' (line 2557)
    sqrt_111557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2557, 13), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 2557)
    sqrt_call_result_111561 = invoke(stypy.reporting.localization.Localization(__file__, 2557, 13), sqrt_111557, *[real_111559], **kwargs_111560)
    
    # Assigning a type to the variable 'stddev' (line 2557)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2557, 4), 'stddev', sqrt_call_result_111561)
    
    # Getting the type of 'c' (line 2558)
    c_111562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2558, 4), 'c')
    
    # Obtaining the type of the subscript
    slice_111563 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2558, 9), None, None, None)
    # Getting the type of 'None' (line 2558)
    None_111564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2558, 19), 'None')
    # Getting the type of 'stddev' (line 2558)
    stddev_111565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2558, 9), 'stddev')
    # Obtaining the member '__getitem__' of a type (line 2558)
    getitem___111566 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2558, 9), stddev_111565, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2558)
    subscript_call_result_111567 = invoke(stypy.reporting.localization.Localization(__file__, 2558, 9), getitem___111566, (slice_111563, None_111564))
    
    # Applying the binary operator 'div=' (line 2558)
    result_div_111568 = python_operator(stypy.reporting.localization.Localization(__file__, 2558, 4), 'div=', c_111562, subscript_call_result_111567)
    # Assigning a type to the variable 'c' (line 2558)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2558, 4), 'c', result_div_111568)
    
    
    # Getting the type of 'c' (line 2559)
    c_111569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2559, 4), 'c')
    
    # Obtaining the type of the subscript
    # Getting the type of 'None' (line 2559)
    None_111570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2559, 16), 'None')
    slice_111571 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2559, 9), None, None, None)
    # Getting the type of 'stddev' (line 2559)
    stddev_111572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2559, 9), 'stddev')
    # Obtaining the member '__getitem__' of a type (line 2559)
    getitem___111573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2559, 9), stddev_111572, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2559)
    subscript_call_result_111574 = invoke(stypy.reporting.localization.Localization(__file__, 2559, 9), getitem___111573, (None_111570, slice_111571))
    
    # Applying the binary operator 'div=' (line 2559)
    result_div_111575 = python_operator(stypy.reporting.localization.Localization(__file__, 2559, 4), 'div=', c_111569, subscript_call_result_111574)
    # Assigning a type to the variable 'c' (line 2559)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2559, 4), 'c', result_div_111575)
    
    
    # Call to clip(...): (line 2564)
    # Processing the call arguments (line 2564)
    # Getting the type of 'c' (line 2564)
    c_111578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2564, 12), 'c', False)
    # Obtaining the member 'real' of a type (line 2564)
    real_111579 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2564, 12), c_111578, 'real')
    int_111580 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2564, 20), 'int')
    int_111581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2564, 24), 'int')
    # Processing the call keyword arguments (line 2564)
    # Getting the type of 'c' (line 2564)
    c_111582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2564, 31), 'c', False)
    # Obtaining the member 'real' of a type (line 2564)
    real_111583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2564, 31), c_111582, 'real')
    keyword_111584 = real_111583
    kwargs_111585 = {'out': keyword_111584}
    # Getting the type of 'np' (line 2564)
    np_111576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2564, 4), 'np', False)
    # Obtaining the member 'clip' of a type (line 2564)
    clip_111577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2564, 4), np_111576, 'clip')
    # Calling clip(args, kwargs) (line 2564)
    clip_call_result_111586 = invoke(stypy.reporting.localization.Localization(__file__, 2564, 4), clip_111577, *[real_111579, int_111580, int_111581], **kwargs_111585)
    
    
    
    # Call to iscomplexobj(...): (line 2565)
    # Processing the call arguments (line 2565)
    # Getting the type of 'c' (line 2565)
    c_111589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2565, 23), 'c', False)
    # Processing the call keyword arguments (line 2565)
    kwargs_111590 = {}
    # Getting the type of 'np' (line 2565)
    np_111587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2565, 7), 'np', False)
    # Obtaining the member 'iscomplexobj' of a type (line 2565)
    iscomplexobj_111588 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2565, 7), np_111587, 'iscomplexobj')
    # Calling iscomplexobj(args, kwargs) (line 2565)
    iscomplexobj_call_result_111591 = invoke(stypy.reporting.localization.Localization(__file__, 2565, 7), iscomplexobj_111588, *[c_111589], **kwargs_111590)
    
    # Testing the type of an if condition (line 2565)
    if_condition_111592 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2565, 4), iscomplexobj_call_result_111591)
    # Assigning a type to the variable 'if_condition_111592' (line 2565)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2565, 4), 'if_condition_111592', if_condition_111592)
    # SSA begins for if statement (line 2565)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to clip(...): (line 2566)
    # Processing the call arguments (line 2566)
    # Getting the type of 'c' (line 2566)
    c_111595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2566, 16), 'c', False)
    # Obtaining the member 'imag' of a type (line 2566)
    imag_111596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2566, 16), c_111595, 'imag')
    int_111597 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2566, 24), 'int')
    int_111598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2566, 28), 'int')
    # Processing the call keyword arguments (line 2566)
    # Getting the type of 'c' (line 2566)
    c_111599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2566, 35), 'c', False)
    # Obtaining the member 'imag' of a type (line 2566)
    imag_111600 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2566, 35), c_111599, 'imag')
    keyword_111601 = imag_111600
    kwargs_111602 = {'out': keyword_111601}
    # Getting the type of 'np' (line 2566)
    np_111593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2566, 8), 'np', False)
    # Obtaining the member 'clip' of a type (line 2566)
    clip_111594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2566, 8), np_111593, 'clip')
    # Calling clip(args, kwargs) (line 2566)
    clip_call_result_111603 = invoke(stypy.reporting.localization.Localization(__file__, 2566, 8), clip_111594, *[imag_111596, int_111597, int_111598], **kwargs_111602)
    
    # SSA join for if statement (line 2565)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'c' (line 2568)
    c_111604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2568, 11), 'c')
    # Assigning a type to the variable 'stypy_return_type' (line 2568)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2568, 4), 'stypy_return_type', c_111604)
    
    # ################# End of 'corrcoef(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'corrcoef' in the type store
    # Getting the type of 'stypy_return_type' (line 2489)
    stypy_return_type_111605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2489, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_111605)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'corrcoef'
    return stypy_return_type_111605

# Assigning a type to the variable 'corrcoef' (line 2489)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2489, 0), 'corrcoef', corrcoef)

@norecursion
def blackman(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'blackman'
    module_type_store = module_type_store.open_function_context('blackman', 2571, 0, False)
    
    # Passed parameters checking function
    blackman.stypy_localization = localization
    blackman.stypy_type_of_self = None
    blackman.stypy_type_store = module_type_store
    blackman.stypy_function_name = 'blackman'
    blackman.stypy_param_names_list = ['M']
    blackman.stypy_varargs_param_name = None
    blackman.stypy_kwargs_param_name = None
    blackman.stypy_call_defaults = defaults
    blackman.stypy_call_varargs = varargs
    blackman.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'blackman', ['M'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'blackman', localization, ['M'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'blackman(...)' code ##################

    str_111606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2660, (-1)), 'str', '\n    Return the Blackman window.\n\n    The Blackman window is a taper formed by using the first three\n    terms of a summation of cosines. It was designed to have close to the\n    minimal leakage possible.  It is close to optimal, only slightly worse\n    than a Kaiser window.\n\n    Parameters\n    ----------\n    M : int\n        Number of points in the output window. If zero or less, an empty\n        array is returned.\n\n    Returns\n    -------\n    out : ndarray\n        The window, with the maximum value normalized to one (the value one\n        appears only if the number of samples is odd).\n\n    See Also\n    --------\n    bartlett, hamming, hanning, kaiser\n\n    Notes\n    -----\n    The Blackman window is defined as\n\n    .. math::  w(n) = 0.42 - 0.5 \\cos(2\\pi n/M) + 0.08 \\cos(4\\pi n/M)\n\n    Most references to the Blackman window come from the signal processing\n    literature, where it is used as one of many windowing functions for\n    smoothing values.  It is also known as an apodization (which means\n    "removing the foot", i.e. smoothing discontinuities at the beginning\n    and end of the sampled signal) or tapering function. It is known as a\n    "near optimal" tapering function, almost as good (by some measures)\n    as the kaiser window.\n\n    References\n    ----------\n    Blackman, R.B. and Tukey, J.W., (1958) The measurement of power spectra,\n    Dover Publications, New York.\n\n    Oppenheim, A.V., and R.W. Schafer. Discrete-Time Signal Processing.\n    Upper Saddle River, NJ: Prentice-Hall, 1999, pp. 468-471.\n\n    Examples\n    --------\n    >>> np.blackman(12)\n    array([ -1.38777878e-17,   3.26064346e-02,   1.59903635e-01,\n             4.14397981e-01,   7.36045180e-01,   9.67046769e-01,\n             9.67046769e-01,   7.36045180e-01,   4.14397981e-01,\n             1.59903635e-01,   3.26064346e-02,  -1.38777878e-17])\n\n\n    Plot the window and the frequency response:\n\n    >>> from numpy.fft import fft, fftshift\n    >>> window = np.blackman(51)\n    >>> plt.plot(window)\n    [<matplotlib.lines.Line2D object at 0x...>]\n    >>> plt.title("Blackman window")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.ylabel("Amplitude")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.xlabel("Sample")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.show()\n\n    >>> plt.figure()\n    <matplotlib.figure.Figure object at 0x...>\n    >>> A = fft(window, 2048) / 25.5\n    >>> mag = np.abs(fftshift(A))\n    >>> freq = np.linspace(-0.5, 0.5, len(A))\n    >>> response = 20 * np.log10(mag)\n    >>> response = np.clip(response, -100, 100)\n    >>> plt.plot(freq, response)\n    [<matplotlib.lines.Line2D object at 0x...>]\n    >>> plt.title("Frequency response of Blackman window")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.ylabel("Magnitude [dB]")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.xlabel("Normalized frequency [cycles per sample]")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.axis(\'tight\')\n    (-0.5, 0.5, -100.0, ...)\n    >>> plt.show()\n\n    ')
    
    
    # Getting the type of 'M' (line 2661)
    M_111607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2661, 7), 'M')
    int_111608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2661, 11), 'int')
    # Applying the binary operator '<' (line 2661)
    result_lt_111609 = python_operator(stypy.reporting.localization.Localization(__file__, 2661, 7), '<', M_111607, int_111608)
    
    # Testing the type of an if condition (line 2661)
    if_condition_111610 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2661, 4), result_lt_111609)
    # Assigning a type to the variable 'if_condition_111610' (line 2661)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2661, 4), 'if_condition_111610', if_condition_111610)
    # SSA begins for if statement (line 2661)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to array(...): (line 2662)
    # Processing the call arguments (line 2662)
    
    # Obtaining an instance of the builtin type 'list' (line 2662)
    list_111612 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2662, 21), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2662)
    
    # Processing the call keyword arguments (line 2662)
    kwargs_111613 = {}
    # Getting the type of 'array' (line 2662)
    array_111611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2662, 15), 'array', False)
    # Calling array(args, kwargs) (line 2662)
    array_call_result_111614 = invoke(stypy.reporting.localization.Localization(__file__, 2662, 15), array_111611, *[list_111612], **kwargs_111613)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2662)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2662, 8), 'stypy_return_type', array_call_result_111614)
    # SSA join for if statement (line 2661)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'M' (line 2663)
    M_111615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2663, 7), 'M')
    int_111616 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2663, 12), 'int')
    # Applying the binary operator '==' (line 2663)
    result_eq_111617 = python_operator(stypy.reporting.localization.Localization(__file__, 2663, 7), '==', M_111615, int_111616)
    
    # Testing the type of an if condition (line 2663)
    if_condition_111618 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2663, 4), result_eq_111617)
    # Assigning a type to the variable 'if_condition_111618' (line 2663)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2663, 4), 'if_condition_111618', if_condition_111618)
    # SSA begins for if statement (line 2663)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ones(...): (line 2664)
    # Processing the call arguments (line 2664)
    int_111620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2664, 20), 'int')
    # Getting the type of 'float' (line 2664)
    float_111621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2664, 23), 'float', False)
    # Processing the call keyword arguments (line 2664)
    kwargs_111622 = {}
    # Getting the type of 'ones' (line 2664)
    ones_111619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2664, 15), 'ones', False)
    # Calling ones(args, kwargs) (line 2664)
    ones_call_result_111623 = invoke(stypy.reporting.localization.Localization(__file__, 2664, 15), ones_111619, *[int_111620, float_111621], **kwargs_111622)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2664)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2664, 8), 'stypy_return_type', ones_call_result_111623)
    # SSA join for if statement (line 2663)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2665):
    
    # Assigning a Call to a Name (line 2665):
    
    # Call to arange(...): (line 2665)
    # Processing the call arguments (line 2665)
    int_111625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2665, 15), 'int')
    # Getting the type of 'M' (line 2665)
    M_111626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2665, 18), 'M', False)
    # Processing the call keyword arguments (line 2665)
    kwargs_111627 = {}
    # Getting the type of 'arange' (line 2665)
    arange_111624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2665, 8), 'arange', False)
    # Calling arange(args, kwargs) (line 2665)
    arange_call_result_111628 = invoke(stypy.reporting.localization.Localization(__file__, 2665, 8), arange_111624, *[int_111625, M_111626], **kwargs_111627)
    
    # Assigning a type to the variable 'n' (line 2665)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2665, 4), 'n', arange_call_result_111628)
    float_111629 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2666, 11), 'float')
    float_111630 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2666, 18), 'float')
    
    # Call to cos(...): (line 2666)
    # Processing the call arguments (line 2666)
    float_111632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2666, 26), 'float')
    # Getting the type of 'pi' (line 2666)
    pi_111633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2666, 30), 'pi', False)
    # Applying the binary operator '*' (line 2666)
    result_mul_111634 = python_operator(stypy.reporting.localization.Localization(__file__, 2666, 26), '*', float_111632, pi_111633)
    
    # Getting the type of 'n' (line 2666)
    n_111635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2666, 33), 'n', False)
    # Applying the binary operator '*' (line 2666)
    result_mul_111636 = python_operator(stypy.reporting.localization.Localization(__file__, 2666, 32), '*', result_mul_111634, n_111635)
    
    # Getting the type of 'M' (line 2666)
    M_111637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2666, 36), 'M', False)
    int_111638 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2666, 38), 'int')
    # Applying the binary operator '-' (line 2666)
    result_sub_111639 = python_operator(stypy.reporting.localization.Localization(__file__, 2666, 36), '-', M_111637, int_111638)
    
    # Applying the binary operator 'div' (line 2666)
    result_div_111640 = python_operator(stypy.reporting.localization.Localization(__file__, 2666, 34), 'div', result_mul_111636, result_sub_111639)
    
    # Processing the call keyword arguments (line 2666)
    kwargs_111641 = {}
    # Getting the type of 'cos' (line 2666)
    cos_111631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2666, 22), 'cos', False)
    # Calling cos(args, kwargs) (line 2666)
    cos_call_result_111642 = invoke(stypy.reporting.localization.Localization(__file__, 2666, 22), cos_111631, *[result_div_111640], **kwargs_111641)
    
    # Applying the binary operator '*' (line 2666)
    result_mul_111643 = python_operator(stypy.reporting.localization.Localization(__file__, 2666, 18), '*', float_111630, cos_call_result_111642)
    
    # Applying the binary operator '-' (line 2666)
    result_sub_111644 = python_operator(stypy.reporting.localization.Localization(__file__, 2666, 11), '-', float_111629, result_mul_111643)
    
    float_111645 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2666, 44), 'float')
    
    # Call to cos(...): (line 2666)
    # Processing the call arguments (line 2666)
    float_111647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2666, 53), 'float')
    # Getting the type of 'pi' (line 2666)
    pi_111648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2666, 57), 'pi', False)
    # Applying the binary operator '*' (line 2666)
    result_mul_111649 = python_operator(stypy.reporting.localization.Localization(__file__, 2666, 53), '*', float_111647, pi_111648)
    
    # Getting the type of 'n' (line 2666)
    n_111650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2666, 60), 'n', False)
    # Applying the binary operator '*' (line 2666)
    result_mul_111651 = python_operator(stypy.reporting.localization.Localization(__file__, 2666, 59), '*', result_mul_111649, n_111650)
    
    # Getting the type of 'M' (line 2666)
    M_111652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2666, 63), 'M', False)
    int_111653 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2666, 65), 'int')
    # Applying the binary operator '-' (line 2666)
    result_sub_111654 = python_operator(stypy.reporting.localization.Localization(__file__, 2666, 63), '-', M_111652, int_111653)
    
    # Applying the binary operator 'div' (line 2666)
    result_div_111655 = python_operator(stypy.reporting.localization.Localization(__file__, 2666, 61), 'div', result_mul_111651, result_sub_111654)
    
    # Processing the call keyword arguments (line 2666)
    kwargs_111656 = {}
    # Getting the type of 'cos' (line 2666)
    cos_111646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2666, 49), 'cos', False)
    # Calling cos(args, kwargs) (line 2666)
    cos_call_result_111657 = invoke(stypy.reporting.localization.Localization(__file__, 2666, 49), cos_111646, *[result_div_111655], **kwargs_111656)
    
    # Applying the binary operator '*' (line 2666)
    result_mul_111658 = python_operator(stypy.reporting.localization.Localization(__file__, 2666, 44), '*', float_111645, cos_call_result_111657)
    
    # Applying the binary operator '+' (line 2666)
    result_add_111659 = python_operator(stypy.reporting.localization.Localization(__file__, 2666, 42), '+', result_sub_111644, result_mul_111658)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2666)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2666, 4), 'stypy_return_type', result_add_111659)
    
    # ################# End of 'blackman(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'blackman' in the type store
    # Getting the type of 'stypy_return_type' (line 2571)
    stypy_return_type_111660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2571, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_111660)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'blackman'
    return stypy_return_type_111660

# Assigning a type to the variable 'blackman' (line 2571)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2571, 0), 'blackman', blackman)

@norecursion
def bartlett(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'bartlett'
    module_type_store = module_type_store.open_function_context('bartlett', 2669, 0, False)
    
    # Passed parameters checking function
    bartlett.stypy_localization = localization
    bartlett.stypy_type_of_self = None
    bartlett.stypy_type_store = module_type_store
    bartlett.stypy_function_name = 'bartlett'
    bartlett.stypy_param_names_list = ['M']
    bartlett.stypy_varargs_param_name = None
    bartlett.stypy_kwargs_param_name = None
    bartlett.stypy_call_defaults = defaults
    bartlett.stypy_call_varargs = varargs
    bartlett.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'bartlett', ['M'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'bartlett', localization, ['M'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'bartlett(...)' code ##################

    str_111661 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2767, (-1)), 'str', '\n    Return the Bartlett window.\n\n    The Bartlett window is very similar to a triangular window, except\n    that the end points are at zero.  It is often used in signal\n    processing for tapering a signal, without generating too much\n    ripple in the frequency domain.\n\n    Parameters\n    ----------\n    M : int\n        Number of points in the output window. If zero or less, an\n        empty array is returned.\n\n    Returns\n    -------\n    out : array\n        The triangular window, with the maximum value normalized to one\n        (the value one appears only if the number of samples is odd), with\n        the first and last samples equal to zero.\n\n    See Also\n    --------\n    blackman, hamming, hanning, kaiser\n\n    Notes\n    -----\n    The Bartlett window is defined as\n\n    .. math:: w(n) = \\frac{2}{M-1} \\left(\n              \\frac{M-1}{2} - \\left|n - \\frac{M-1}{2}\\right|\n              \\right)\n\n    Most references to the Bartlett window come from the signal\n    processing literature, where it is used as one of many windowing\n    functions for smoothing values.  Note that convolution with this\n    window produces linear interpolation.  It is also known as an\n    apodization (which means"removing the foot", i.e. smoothing\n    discontinuities at the beginning and end of the sampled signal) or\n    tapering function. The fourier transform of the Bartlett is the product\n    of two sinc functions.\n    Note the excellent discussion in Kanasewich.\n\n    References\n    ----------\n    .. [1] M.S. Bartlett, "Periodogram Analysis and Continuous Spectra",\n           Biometrika 37, 1-16, 1950.\n    .. [2] E.R. Kanasewich, "Time Sequence Analysis in Geophysics",\n           The University of Alberta Press, 1975, pp. 109-110.\n    .. [3] A.V. Oppenheim and R.W. Schafer, "Discrete-Time Signal\n           Processing", Prentice-Hall, 1999, pp. 468-471.\n    .. [4] Wikipedia, "Window function",\n           http://en.wikipedia.org/wiki/Window_function\n    .. [5] W.H. Press,  B.P. Flannery, S.A. Teukolsky, and W.T. Vetterling,\n           "Numerical Recipes", Cambridge University Press, 1986, page 429.\n\n\n    Examples\n    --------\n    >>> np.bartlett(12)\n    array([ 0.        ,  0.18181818,  0.36363636,  0.54545455,  0.72727273,\n            0.90909091,  0.90909091,  0.72727273,  0.54545455,  0.36363636,\n            0.18181818,  0.        ])\n\n    Plot the window and its frequency response (requires SciPy and matplotlib):\n\n    >>> from numpy.fft import fft, fftshift\n    >>> window = np.bartlett(51)\n    >>> plt.plot(window)\n    [<matplotlib.lines.Line2D object at 0x...>]\n    >>> plt.title("Bartlett window")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.ylabel("Amplitude")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.xlabel("Sample")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.show()\n\n    >>> plt.figure()\n    <matplotlib.figure.Figure object at 0x...>\n    >>> A = fft(window, 2048) / 25.5\n    >>> mag = np.abs(fftshift(A))\n    >>> freq = np.linspace(-0.5, 0.5, len(A))\n    >>> response = 20 * np.log10(mag)\n    >>> response = np.clip(response, -100, 100)\n    >>> plt.plot(freq, response)\n    [<matplotlib.lines.Line2D object at 0x...>]\n    >>> plt.title("Frequency response of Bartlett window")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.ylabel("Magnitude [dB]")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.xlabel("Normalized frequency [cycles per sample]")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.axis(\'tight\')\n    (-0.5, 0.5, -100.0, ...)\n    >>> plt.show()\n\n    ')
    
    
    # Getting the type of 'M' (line 2768)
    M_111662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2768, 7), 'M')
    int_111663 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2768, 11), 'int')
    # Applying the binary operator '<' (line 2768)
    result_lt_111664 = python_operator(stypy.reporting.localization.Localization(__file__, 2768, 7), '<', M_111662, int_111663)
    
    # Testing the type of an if condition (line 2768)
    if_condition_111665 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2768, 4), result_lt_111664)
    # Assigning a type to the variable 'if_condition_111665' (line 2768)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2768, 4), 'if_condition_111665', if_condition_111665)
    # SSA begins for if statement (line 2768)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to array(...): (line 2769)
    # Processing the call arguments (line 2769)
    
    # Obtaining an instance of the builtin type 'list' (line 2769)
    list_111667 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2769, 21), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2769)
    
    # Processing the call keyword arguments (line 2769)
    kwargs_111668 = {}
    # Getting the type of 'array' (line 2769)
    array_111666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2769, 15), 'array', False)
    # Calling array(args, kwargs) (line 2769)
    array_call_result_111669 = invoke(stypy.reporting.localization.Localization(__file__, 2769, 15), array_111666, *[list_111667], **kwargs_111668)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2769)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2769, 8), 'stypy_return_type', array_call_result_111669)
    # SSA join for if statement (line 2768)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'M' (line 2770)
    M_111670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2770, 7), 'M')
    int_111671 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2770, 12), 'int')
    # Applying the binary operator '==' (line 2770)
    result_eq_111672 = python_operator(stypy.reporting.localization.Localization(__file__, 2770, 7), '==', M_111670, int_111671)
    
    # Testing the type of an if condition (line 2770)
    if_condition_111673 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2770, 4), result_eq_111672)
    # Assigning a type to the variable 'if_condition_111673' (line 2770)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2770, 4), 'if_condition_111673', if_condition_111673)
    # SSA begins for if statement (line 2770)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ones(...): (line 2771)
    # Processing the call arguments (line 2771)
    int_111675 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2771, 20), 'int')
    # Getting the type of 'float' (line 2771)
    float_111676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2771, 23), 'float', False)
    # Processing the call keyword arguments (line 2771)
    kwargs_111677 = {}
    # Getting the type of 'ones' (line 2771)
    ones_111674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2771, 15), 'ones', False)
    # Calling ones(args, kwargs) (line 2771)
    ones_call_result_111678 = invoke(stypy.reporting.localization.Localization(__file__, 2771, 15), ones_111674, *[int_111675, float_111676], **kwargs_111677)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2771)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2771, 8), 'stypy_return_type', ones_call_result_111678)
    # SSA join for if statement (line 2770)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2772):
    
    # Assigning a Call to a Name (line 2772):
    
    # Call to arange(...): (line 2772)
    # Processing the call arguments (line 2772)
    int_111680 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2772, 15), 'int')
    # Getting the type of 'M' (line 2772)
    M_111681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2772, 18), 'M', False)
    # Processing the call keyword arguments (line 2772)
    kwargs_111682 = {}
    # Getting the type of 'arange' (line 2772)
    arange_111679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2772, 8), 'arange', False)
    # Calling arange(args, kwargs) (line 2772)
    arange_call_result_111683 = invoke(stypy.reporting.localization.Localization(__file__, 2772, 8), arange_111679, *[int_111680, M_111681], **kwargs_111682)
    
    # Assigning a type to the variable 'n' (line 2772)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2772, 4), 'n', arange_call_result_111683)
    
    # Call to where(...): (line 2773)
    # Processing the call arguments (line 2773)
    
    # Call to less_equal(...): (line 2773)
    # Processing the call arguments (line 2773)
    # Getting the type of 'n' (line 2773)
    n_111686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 28), 'n', False)
    # Getting the type of 'M' (line 2773)
    M_111687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 32), 'M', False)
    int_111688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2773, 34), 'int')
    # Applying the binary operator '-' (line 2773)
    result_sub_111689 = python_operator(stypy.reporting.localization.Localization(__file__, 2773, 32), '-', M_111687, int_111688)
    
    float_111690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2773, 37), 'float')
    # Applying the binary operator 'div' (line 2773)
    result_div_111691 = python_operator(stypy.reporting.localization.Localization(__file__, 2773, 31), 'div', result_sub_111689, float_111690)
    
    # Processing the call keyword arguments (line 2773)
    kwargs_111692 = {}
    # Getting the type of 'less_equal' (line 2773)
    less_equal_111685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 17), 'less_equal', False)
    # Calling less_equal(args, kwargs) (line 2773)
    less_equal_call_result_111693 = invoke(stypy.reporting.localization.Localization(__file__, 2773, 17), less_equal_111685, *[n_111686, result_div_111691], **kwargs_111692)
    
    float_111694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2773, 43), 'float')
    # Getting the type of 'n' (line 2773)
    n_111695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 47), 'n', False)
    # Applying the binary operator '*' (line 2773)
    result_mul_111696 = python_operator(stypy.reporting.localization.Localization(__file__, 2773, 43), '*', float_111694, n_111695)
    
    # Getting the type of 'M' (line 2773)
    M_111697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 50), 'M', False)
    int_111698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2773, 52), 'int')
    # Applying the binary operator '-' (line 2773)
    result_sub_111699 = python_operator(stypy.reporting.localization.Localization(__file__, 2773, 50), '-', M_111697, int_111698)
    
    # Applying the binary operator 'div' (line 2773)
    result_div_111700 = python_operator(stypy.reporting.localization.Localization(__file__, 2773, 48), 'div', result_mul_111696, result_sub_111699)
    
    float_111701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2773, 56), 'float')
    float_111702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2773, 62), 'float')
    # Getting the type of 'n' (line 2773)
    n_111703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 66), 'n', False)
    # Applying the binary operator '*' (line 2773)
    result_mul_111704 = python_operator(stypy.reporting.localization.Localization(__file__, 2773, 62), '*', float_111702, n_111703)
    
    # Getting the type of 'M' (line 2773)
    M_111705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 69), 'M', False)
    int_111706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2773, 71), 'int')
    # Applying the binary operator '-' (line 2773)
    result_sub_111707 = python_operator(stypy.reporting.localization.Localization(__file__, 2773, 69), '-', M_111705, int_111706)
    
    # Applying the binary operator 'div' (line 2773)
    result_div_111708 = python_operator(stypy.reporting.localization.Localization(__file__, 2773, 67), 'div', result_mul_111704, result_sub_111707)
    
    # Applying the binary operator '-' (line 2773)
    result_sub_111709 = python_operator(stypy.reporting.localization.Localization(__file__, 2773, 56), '-', float_111701, result_div_111708)
    
    # Processing the call keyword arguments (line 2773)
    kwargs_111710 = {}
    # Getting the type of 'where' (line 2773)
    where_111684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 11), 'where', False)
    # Calling where(args, kwargs) (line 2773)
    where_call_result_111711 = invoke(stypy.reporting.localization.Localization(__file__, 2773, 11), where_111684, *[less_equal_call_result_111693, result_div_111700, result_sub_111709], **kwargs_111710)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2773)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2773, 4), 'stypy_return_type', where_call_result_111711)
    
    # ################# End of 'bartlett(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'bartlett' in the type store
    # Getting the type of 'stypy_return_type' (line 2669)
    stypy_return_type_111712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2669, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_111712)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'bartlett'
    return stypy_return_type_111712

# Assigning a type to the variable 'bartlett' (line 2669)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2669, 0), 'bartlett', bartlett)

@norecursion
def hanning(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'hanning'
    module_type_store = module_type_store.open_function_context('hanning', 2776, 0, False)
    
    # Passed parameters checking function
    hanning.stypy_localization = localization
    hanning.stypy_type_of_self = None
    hanning.stypy_type_store = module_type_store
    hanning.stypy_function_name = 'hanning'
    hanning.stypy_param_names_list = ['M']
    hanning.stypy_varargs_param_name = None
    hanning.stypy_kwargs_param_name = None
    hanning.stypy_call_defaults = defaults
    hanning.stypy_call_varargs = varargs
    hanning.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'hanning', ['M'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'hanning', localization, ['M'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'hanning(...)' code ##################

    str_111713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2867, (-1)), 'str', '\n    Return the Hanning window.\n\n    The Hanning window is a taper formed by using a weighted cosine.\n\n    Parameters\n    ----------\n    M : int\n        Number of points in the output window. If zero or less, an\n        empty array is returned.\n\n    Returns\n    -------\n    out : ndarray, shape(M,)\n        The window, with the maximum value normalized to one (the value\n        one appears only if `M` is odd).\n\n    See Also\n    --------\n    bartlett, blackman, hamming, kaiser\n\n    Notes\n    -----\n    The Hanning window is defined as\n\n    .. math::  w(n) = 0.5 - 0.5cos\\left(\\frac{2\\pi{n}}{M-1}\\right)\n               \\qquad 0 \\leq n \\leq M-1\n\n    The Hanning was named for Julius von Hann, an Austrian meteorologist.\n    It is also known as the Cosine Bell. Some authors prefer that it be\n    called a Hann window, to help avoid confusion with the very similar\n    Hamming window.\n\n    Most references to the Hanning window come from the signal processing\n    literature, where it is used as one of many windowing functions for\n    smoothing values.  It is also known as an apodization (which means\n    "removing the foot", i.e. smoothing discontinuities at the beginning\n    and end of the sampled signal) or tapering function.\n\n    References\n    ----------\n    .. [1] Blackman, R.B. and Tukey, J.W., (1958) The measurement of power\n           spectra, Dover Publications, New York.\n    .. [2] E.R. Kanasewich, "Time Sequence Analysis in Geophysics",\n           The University of Alberta Press, 1975, pp. 106-108.\n    .. [3] Wikipedia, "Window function",\n           http://en.wikipedia.org/wiki/Window_function\n    .. [4] W.H. Press,  B.P. Flannery, S.A. Teukolsky, and W.T. Vetterling,\n           "Numerical Recipes", Cambridge University Press, 1986, page 425.\n\n    Examples\n    --------\n    >>> np.hanning(12)\n    array([ 0.        ,  0.07937323,  0.29229249,  0.57115742,  0.82743037,\n            0.97974649,  0.97974649,  0.82743037,  0.57115742,  0.29229249,\n            0.07937323,  0.        ])\n\n    Plot the window and its frequency response:\n\n    >>> from numpy.fft import fft, fftshift\n    >>> window = np.hanning(51)\n    >>> plt.plot(window)\n    [<matplotlib.lines.Line2D object at 0x...>]\n    >>> plt.title("Hann window")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.ylabel("Amplitude")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.xlabel("Sample")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.show()\n\n    >>> plt.figure()\n    <matplotlib.figure.Figure object at 0x...>\n    >>> A = fft(window, 2048) / 25.5\n    >>> mag = np.abs(fftshift(A))\n    >>> freq = np.linspace(-0.5, 0.5, len(A))\n    >>> response = 20 * np.log10(mag)\n    >>> response = np.clip(response, -100, 100)\n    >>> plt.plot(freq, response)\n    [<matplotlib.lines.Line2D object at 0x...>]\n    >>> plt.title("Frequency response of the Hann window")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.ylabel("Magnitude [dB]")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.xlabel("Normalized frequency [cycles per sample]")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.axis(\'tight\')\n    (-0.5, 0.5, -100.0, ...)\n    >>> plt.show()\n\n    ')
    
    
    # Getting the type of 'M' (line 2868)
    M_111714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2868, 7), 'M')
    int_111715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2868, 11), 'int')
    # Applying the binary operator '<' (line 2868)
    result_lt_111716 = python_operator(stypy.reporting.localization.Localization(__file__, 2868, 7), '<', M_111714, int_111715)
    
    # Testing the type of an if condition (line 2868)
    if_condition_111717 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2868, 4), result_lt_111716)
    # Assigning a type to the variable 'if_condition_111717' (line 2868)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2868, 4), 'if_condition_111717', if_condition_111717)
    # SSA begins for if statement (line 2868)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to array(...): (line 2869)
    # Processing the call arguments (line 2869)
    
    # Obtaining an instance of the builtin type 'list' (line 2869)
    list_111719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2869, 21), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2869)
    
    # Processing the call keyword arguments (line 2869)
    kwargs_111720 = {}
    # Getting the type of 'array' (line 2869)
    array_111718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2869, 15), 'array', False)
    # Calling array(args, kwargs) (line 2869)
    array_call_result_111721 = invoke(stypy.reporting.localization.Localization(__file__, 2869, 15), array_111718, *[list_111719], **kwargs_111720)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2869)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2869, 8), 'stypy_return_type', array_call_result_111721)
    # SSA join for if statement (line 2868)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'M' (line 2870)
    M_111722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2870, 7), 'M')
    int_111723 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2870, 12), 'int')
    # Applying the binary operator '==' (line 2870)
    result_eq_111724 = python_operator(stypy.reporting.localization.Localization(__file__, 2870, 7), '==', M_111722, int_111723)
    
    # Testing the type of an if condition (line 2870)
    if_condition_111725 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2870, 4), result_eq_111724)
    # Assigning a type to the variable 'if_condition_111725' (line 2870)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2870, 4), 'if_condition_111725', if_condition_111725)
    # SSA begins for if statement (line 2870)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ones(...): (line 2871)
    # Processing the call arguments (line 2871)
    int_111727 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2871, 20), 'int')
    # Getting the type of 'float' (line 2871)
    float_111728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2871, 23), 'float', False)
    # Processing the call keyword arguments (line 2871)
    kwargs_111729 = {}
    # Getting the type of 'ones' (line 2871)
    ones_111726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2871, 15), 'ones', False)
    # Calling ones(args, kwargs) (line 2871)
    ones_call_result_111730 = invoke(stypy.reporting.localization.Localization(__file__, 2871, 15), ones_111726, *[int_111727, float_111728], **kwargs_111729)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2871)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2871, 8), 'stypy_return_type', ones_call_result_111730)
    # SSA join for if statement (line 2870)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2872):
    
    # Assigning a Call to a Name (line 2872):
    
    # Call to arange(...): (line 2872)
    # Processing the call arguments (line 2872)
    int_111732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2872, 15), 'int')
    # Getting the type of 'M' (line 2872)
    M_111733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2872, 18), 'M', False)
    # Processing the call keyword arguments (line 2872)
    kwargs_111734 = {}
    # Getting the type of 'arange' (line 2872)
    arange_111731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2872, 8), 'arange', False)
    # Calling arange(args, kwargs) (line 2872)
    arange_call_result_111735 = invoke(stypy.reporting.localization.Localization(__file__, 2872, 8), arange_111731, *[int_111732, M_111733], **kwargs_111734)
    
    # Assigning a type to the variable 'n' (line 2872)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2872, 4), 'n', arange_call_result_111735)
    float_111736 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2873, 11), 'float')
    float_111737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2873, 17), 'float')
    
    # Call to cos(...): (line 2873)
    # Processing the call arguments (line 2873)
    float_111739 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2873, 25), 'float')
    # Getting the type of 'pi' (line 2873)
    pi_111740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2873, 29), 'pi', False)
    # Applying the binary operator '*' (line 2873)
    result_mul_111741 = python_operator(stypy.reporting.localization.Localization(__file__, 2873, 25), '*', float_111739, pi_111740)
    
    # Getting the type of 'n' (line 2873)
    n_111742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2873, 32), 'n', False)
    # Applying the binary operator '*' (line 2873)
    result_mul_111743 = python_operator(stypy.reporting.localization.Localization(__file__, 2873, 31), '*', result_mul_111741, n_111742)
    
    # Getting the type of 'M' (line 2873)
    M_111744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2873, 35), 'M', False)
    int_111745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2873, 37), 'int')
    # Applying the binary operator '-' (line 2873)
    result_sub_111746 = python_operator(stypy.reporting.localization.Localization(__file__, 2873, 35), '-', M_111744, int_111745)
    
    # Applying the binary operator 'div' (line 2873)
    result_div_111747 = python_operator(stypy.reporting.localization.Localization(__file__, 2873, 33), 'div', result_mul_111743, result_sub_111746)
    
    # Processing the call keyword arguments (line 2873)
    kwargs_111748 = {}
    # Getting the type of 'cos' (line 2873)
    cos_111738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2873, 21), 'cos', False)
    # Calling cos(args, kwargs) (line 2873)
    cos_call_result_111749 = invoke(stypy.reporting.localization.Localization(__file__, 2873, 21), cos_111738, *[result_div_111747], **kwargs_111748)
    
    # Applying the binary operator '*' (line 2873)
    result_mul_111750 = python_operator(stypy.reporting.localization.Localization(__file__, 2873, 17), '*', float_111737, cos_call_result_111749)
    
    # Applying the binary operator '-' (line 2873)
    result_sub_111751 = python_operator(stypy.reporting.localization.Localization(__file__, 2873, 11), '-', float_111736, result_mul_111750)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2873)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2873, 4), 'stypy_return_type', result_sub_111751)
    
    # ################# End of 'hanning(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'hanning' in the type store
    # Getting the type of 'stypy_return_type' (line 2776)
    stypy_return_type_111752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2776, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_111752)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'hanning'
    return stypy_return_type_111752

# Assigning a type to the variable 'hanning' (line 2776)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2776, 0), 'hanning', hanning)

@norecursion
def hamming(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'hamming'
    module_type_store = module_type_store.open_function_context('hamming', 2876, 0, False)
    
    # Passed parameters checking function
    hamming.stypy_localization = localization
    hamming.stypy_type_of_self = None
    hamming.stypy_type_store = module_type_store
    hamming.stypy_function_name = 'hamming'
    hamming.stypy_param_names_list = ['M']
    hamming.stypy_varargs_param_name = None
    hamming.stypy_kwargs_param_name = None
    hamming.stypy_call_defaults = defaults
    hamming.stypy_call_varargs = varargs
    hamming.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'hamming', ['M'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'hamming', localization, ['M'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'hamming(...)' code ##################

    str_111753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2965, (-1)), 'str', '\n    Return the Hamming window.\n\n    The Hamming window is a taper formed by using a weighted cosine.\n\n    Parameters\n    ----------\n    M : int\n        Number of points in the output window. If zero or less, an\n        empty array is returned.\n\n    Returns\n    -------\n    out : ndarray\n        The window, with the maximum value normalized to one (the value\n        one appears only if the number of samples is odd).\n\n    See Also\n    --------\n    bartlett, blackman, hanning, kaiser\n\n    Notes\n    -----\n    The Hamming window is defined as\n\n    .. math::  w(n) = 0.54 - 0.46cos\\left(\\frac{2\\pi{n}}{M-1}\\right)\n               \\qquad 0 \\leq n \\leq M-1\n\n    The Hamming was named for R. W. Hamming, an associate of J. W. Tukey\n    and is described in Blackman and Tukey. It was recommended for\n    smoothing the truncated autocovariance function in the time domain.\n    Most references to the Hamming window come from the signal processing\n    literature, where it is used as one of many windowing functions for\n    smoothing values.  It is also known as an apodization (which means\n    "removing the foot", i.e. smoothing discontinuities at the beginning\n    and end of the sampled signal) or tapering function.\n\n    References\n    ----------\n    .. [1] Blackman, R.B. and Tukey, J.W., (1958) The measurement of power\n           spectra, Dover Publications, New York.\n    .. [2] E.R. Kanasewich, "Time Sequence Analysis in Geophysics", The\n           University of Alberta Press, 1975, pp. 109-110.\n    .. [3] Wikipedia, "Window function",\n           http://en.wikipedia.org/wiki/Window_function\n    .. [4] W.H. Press,  B.P. Flannery, S.A. Teukolsky, and W.T. Vetterling,\n           "Numerical Recipes", Cambridge University Press, 1986, page 425.\n\n    Examples\n    --------\n    >>> np.hamming(12)\n    array([ 0.08      ,  0.15302337,  0.34890909,  0.60546483,  0.84123594,\n            0.98136677,  0.98136677,  0.84123594,  0.60546483,  0.34890909,\n            0.15302337,  0.08      ])\n\n    Plot the window and the frequency response:\n\n    >>> from numpy.fft import fft, fftshift\n    >>> window = np.hamming(51)\n    >>> plt.plot(window)\n    [<matplotlib.lines.Line2D object at 0x...>]\n    >>> plt.title("Hamming window")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.ylabel("Amplitude")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.xlabel("Sample")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.show()\n\n    >>> plt.figure()\n    <matplotlib.figure.Figure object at 0x...>\n    >>> A = fft(window, 2048) / 25.5\n    >>> mag = np.abs(fftshift(A))\n    >>> freq = np.linspace(-0.5, 0.5, len(A))\n    >>> response = 20 * np.log10(mag)\n    >>> response = np.clip(response, -100, 100)\n    >>> plt.plot(freq, response)\n    [<matplotlib.lines.Line2D object at 0x...>]\n    >>> plt.title("Frequency response of Hamming window")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.ylabel("Magnitude [dB]")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.xlabel("Normalized frequency [cycles per sample]")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.axis(\'tight\')\n    (-0.5, 0.5, -100.0, ...)\n    >>> plt.show()\n\n    ')
    
    
    # Getting the type of 'M' (line 2966)
    M_111754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2966, 7), 'M')
    int_111755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2966, 11), 'int')
    # Applying the binary operator '<' (line 2966)
    result_lt_111756 = python_operator(stypy.reporting.localization.Localization(__file__, 2966, 7), '<', M_111754, int_111755)
    
    # Testing the type of an if condition (line 2966)
    if_condition_111757 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2966, 4), result_lt_111756)
    # Assigning a type to the variable 'if_condition_111757' (line 2966)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2966, 4), 'if_condition_111757', if_condition_111757)
    # SSA begins for if statement (line 2966)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to array(...): (line 2967)
    # Processing the call arguments (line 2967)
    
    # Obtaining an instance of the builtin type 'list' (line 2967)
    list_111759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2967, 21), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2967)
    
    # Processing the call keyword arguments (line 2967)
    kwargs_111760 = {}
    # Getting the type of 'array' (line 2967)
    array_111758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2967, 15), 'array', False)
    # Calling array(args, kwargs) (line 2967)
    array_call_result_111761 = invoke(stypy.reporting.localization.Localization(__file__, 2967, 15), array_111758, *[list_111759], **kwargs_111760)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2967)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2967, 8), 'stypy_return_type', array_call_result_111761)
    # SSA join for if statement (line 2966)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'M' (line 2968)
    M_111762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2968, 7), 'M')
    int_111763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2968, 12), 'int')
    # Applying the binary operator '==' (line 2968)
    result_eq_111764 = python_operator(stypy.reporting.localization.Localization(__file__, 2968, 7), '==', M_111762, int_111763)
    
    # Testing the type of an if condition (line 2968)
    if_condition_111765 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2968, 4), result_eq_111764)
    # Assigning a type to the variable 'if_condition_111765' (line 2968)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2968, 4), 'if_condition_111765', if_condition_111765)
    # SSA begins for if statement (line 2968)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ones(...): (line 2969)
    # Processing the call arguments (line 2969)
    int_111767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2969, 20), 'int')
    # Getting the type of 'float' (line 2969)
    float_111768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2969, 23), 'float', False)
    # Processing the call keyword arguments (line 2969)
    kwargs_111769 = {}
    # Getting the type of 'ones' (line 2969)
    ones_111766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2969, 15), 'ones', False)
    # Calling ones(args, kwargs) (line 2969)
    ones_call_result_111770 = invoke(stypy.reporting.localization.Localization(__file__, 2969, 15), ones_111766, *[int_111767, float_111768], **kwargs_111769)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2969)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2969, 8), 'stypy_return_type', ones_call_result_111770)
    # SSA join for if statement (line 2968)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2970):
    
    # Assigning a Call to a Name (line 2970):
    
    # Call to arange(...): (line 2970)
    # Processing the call arguments (line 2970)
    int_111772 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2970, 15), 'int')
    # Getting the type of 'M' (line 2970)
    M_111773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2970, 18), 'M', False)
    # Processing the call keyword arguments (line 2970)
    kwargs_111774 = {}
    # Getting the type of 'arange' (line 2970)
    arange_111771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2970, 8), 'arange', False)
    # Calling arange(args, kwargs) (line 2970)
    arange_call_result_111775 = invoke(stypy.reporting.localization.Localization(__file__, 2970, 8), arange_111771, *[int_111772, M_111773], **kwargs_111774)
    
    # Assigning a type to the variable 'n' (line 2970)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2970, 4), 'n', arange_call_result_111775)
    float_111776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2971, 11), 'float')
    float_111777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2971, 18), 'float')
    
    # Call to cos(...): (line 2971)
    # Processing the call arguments (line 2971)
    float_111779 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2971, 27), 'float')
    # Getting the type of 'pi' (line 2971)
    pi_111780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2971, 31), 'pi', False)
    # Applying the binary operator '*' (line 2971)
    result_mul_111781 = python_operator(stypy.reporting.localization.Localization(__file__, 2971, 27), '*', float_111779, pi_111780)
    
    # Getting the type of 'n' (line 2971)
    n_111782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2971, 34), 'n', False)
    # Applying the binary operator '*' (line 2971)
    result_mul_111783 = python_operator(stypy.reporting.localization.Localization(__file__, 2971, 33), '*', result_mul_111781, n_111782)
    
    # Getting the type of 'M' (line 2971)
    M_111784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2971, 37), 'M', False)
    int_111785 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2971, 39), 'int')
    # Applying the binary operator '-' (line 2971)
    result_sub_111786 = python_operator(stypy.reporting.localization.Localization(__file__, 2971, 37), '-', M_111784, int_111785)
    
    # Applying the binary operator 'div' (line 2971)
    result_div_111787 = python_operator(stypy.reporting.localization.Localization(__file__, 2971, 35), 'div', result_mul_111783, result_sub_111786)
    
    # Processing the call keyword arguments (line 2971)
    kwargs_111788 = {}
    # Getting the type of 'cos' (line 2971)
    cos_111778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2971, 23), 'cos', False)
    # Calling cos(args, kwargs) (line 2971)
    cos_call_result_111789 = invoke(stypy.reporting.localization.Localization(__file__, 2971, 23), cos_111778, *[result_div_111787], **kwargs_111788)
    
    # Applying the binary operator '*' (line 2971)
    result_mul_111790 = python_operator(stypy.reporting.localization.Localization(__file__, 2971, 18), '*', float_111777, cos_call_result_111789)
    
    # Applying the binary operator '-' (line 2971)
    result_sub_111791 = python_operator(stypy.reporting.localization.Localization(__file__, 2971, 11), '-', float_111776, result_mul_111790)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2971)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2971, 4), 'stypy_return_type', result_sub_111791)
    
    # ################# End of 'hamming(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'hamming' in the type store
    # Getting the type of 'stypy_return_type' (line 2876)
    stypy_return_type_111792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2876, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_111792)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'hamming'
    return stypy_return_type_111792

# Assigning a type to the variable 'hamming' (line 2876)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2876, 0), 'hamming', hamming)

# Assigning a List to a Name (line 2975):

# Assigning a List to a Name (line 2975):

# Obtaining an instance of the builtin type 'list' (line 2975)
list_111793 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2975, 7), 'list')
# Adding type elements to the builtin type 'list' instance (line 2975)
# Adding element type (line 2975)
float_111794 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2976, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2975, 7), list_111793, float_111794)
# Adding element type (line 2975)
float_111795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2977, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2975, 7), list_111793, float_111795)
# Adding element type (line 2975)
float_111796 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2978, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2975, 7), list_111793, float_111796)
# Adding element type (line 2975)
float_111797 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2979, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2975, 7), list_111793, float_111797)
# Adding element type (line 2975)
float_111798 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2980, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2975, 7), list_111793, float_111798)
# Adding element type (line 2975)
float_111799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2981, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2975, 7), list_111793, float_111799)
# Adding element type (line 2975)
float_111800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2982, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2975, 7), list_111793, float_111800)
# Adding element type (line 2975)
float_111801 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2983, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2975, 7), list_111793, float_111801)
# Adding element type (line 2975)
float_111802 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2984, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2975, 7), list_111793, float_111802)
# Adding element type (line 2975)
float_111803 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2985, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2975, 7), list_111793, float_111803)
# Adding element type (line 2975)
float_111804 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2986, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2975, 7), list_111793, float_111804)
# Adding element type (line 2975)
float_111805 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2987, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2975, 7), list_111793, float_111805)
# Adding element type (line 2975)
float_111806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2988, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2975, 7), list_111793, float_111806)
# Adding element type (line 2975)
float_111807 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2989, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2975, 7), list_111793, float_111807)
# Adding element type (line 2975)
float_111808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2990, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2975, 7), list_111793, float_111808)
# Adding element type (line 2975)
float_111809 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2991, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2975, 7), list_111793, float_111809)
# Adding element type (line 2975)
float_111810 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2992, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2975, 7), list_111793, float_111810)
# Adding element type (line 2975)
float_111811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2993, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2975, 7), list_111793, float_111811)
# Adding element type (line 2975)
float_111812 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2994, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2975, 7), list_111793, float_111812)
# Adding element type (line 2975)
float_111813 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2995, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2975, 7), list_111793, float_111813)
# Adding element type (line 2975)
float_111814 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2996, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2975, 7), list_111793, float_111814)
# Adding element type (line 2975)
float_111815 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2997, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2975, 7), list_111793, float_111815)
# Adding element type (line 2975)
float_111816 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2998, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2975, 7), list_111793, float_111816)
# Adding element type (line 2975)
float_111817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2999, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2975, 7), list_111793, float_111817)
# Adding element type (line 2975)
float_111818 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3000, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2975, 7), list_111793, float_111818)
# Adding element type (line 2975)
float_111819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3001, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2975, 7), list_111793, float_111819)
# Adding element type (line 2975)
float_111820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3002, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2975, 7), list_111793, float_111820)
# Adding element type (line 2975)
float_111821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3003, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2975, 7), list_111793, float_111821)
# Adding element type (line 2975)
float_111822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3004, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2975, 7), list_111793, float_111822)
# Adding element type (line 2975)
float_111823 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3005, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2975, 7), list_111793, float_111823)

# Assigning a type to the variable '_i0A' (line 2975)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2975, 0), '_i0A', list_111793)

# Assigning a List to a Name (line 3008):

# Assigning a List to a Name (line 3008):

# Obtaining an instance of the builtin type 'list' (line 3008)
list_111824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3008, 7), 'list')
# Adding type elements to the builtin type 'list' instance (line 3008)
# Adding element type (line 3008)
float_111825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3009, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3008, 7), list_111824, float_111825)
# Adding element type (line 3008)
float_111826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3010, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3008, 7), list_111824, float_111826)
# Adding element type (line 3008)
float_111827 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3011, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3008, 7), list_111824, float_111827)
# Adding element type (line 3008)
float_111828 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3012, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3008, 7), list_111824, float_111828)
# Adding element type (line 3008)
float_111829 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3013, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3008, 7), list_111824, float_111829)
# Adding element type (line 3008)
float_111830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3014, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3008, 7), list_111824, float_111830)
# Adding element type (line 3008)
float_111831 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3015, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3008, 7), list_111824, float_111831)
# Adding element type (line 3008)
float_111832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3016, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3008, 7), list_111824, float_111832)
# Adding element type (line 3008)
float_111833 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3017, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3008, 7), list_111824, float_111833)
# Adding element type (line 3008)
float_111834 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3018, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3008, 7), list_111824, float_111834)
# Adding element type (line 3008)
float_111835 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3019, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3008, 7), list_111824, float_111835)
# Adding element type (line 3008)
float_111836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3020, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3008, 7), list_111824, float_111836)
# Adding element type (line 3008)
float_111837 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3021, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3008, 7), list_111824, float_111837)
# Adding element type (line 3008)
float_111838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3022, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3008, 7), list_111824, float_111838)
# Adding element type (line 3008)
float_111839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3023, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3008, 7), list_111824, float_111839)
# Adding element type (line 3008)
float_111840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3024, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3008, 7), list_111824, float_111840)
# Adding element type (line 3008)
float_111841 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3025, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3008, 7), list_111824, float_111841)
# Adding element type (line 3008)
float_111842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3026, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3008, 7), list_111824, float_111842)
# Adding element type (line 3008)
float_111843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3027, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3008, 7), list_111824, float_111843)
# Adding element type (line 3008)
float_111844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3028, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3008, 7), list_111824, float_111844)
# Adding element type (line 3008)
float_111845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3029, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3008, 7), list_111824, float_111845)
# Adding element type (line 3008)
float_111846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3030, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3008, 7), list_111824, float_111846)
# Adding element type (line 3008)
float_111847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3031, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3008, 7), list_111824, float_111847)
# Adding element type (line 3008)
float_111848 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3032, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3008, 7), list_111824, float_111848)
# Adding element type (line 3008)
float_111849 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3033, 4), 'float')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3008, 7), list_111824, float_111849)

# Assigning a type to the variable '_i0B' (line 3008)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3008, 0), '_i0B', list_111824)

@norecursion
def _chbevl(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_chbevl'
    module_type_store = module_type_store.open_function_context('_chbevl', 3037, 0, False)
    
    # Passed parameters checking function
    _chbevl.stypy_localization = localization
    _chbevl.stypy_type_of_self = None
    _chbevl.stypy_type_store = module_type_store
    _chbevl.stypy_function_name = '_chbevl'
    _chbevl.stypy_param_names_list = ['x', 'vals']
    _chbevl.stypy_varargs_param_name = None
    _chbevl.stypy_kwargs_param_name = None
    _chbevl.stypy_call_defaults = defaults
    _chbevl.stypy_call_varargs = varargs
    _chbevl.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_chbevl', ['x', 'vals'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_chbevl', localization, ['x', 'vals'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_chbevl(...)' code ##################

    
    # Assigning a Subscript to a Name (line 3038):
    
    # Assigning a Subscript to a Name (line 3038):
    
    # Obtaining the type of the subscript
    int_111850 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3038, 14), 'int')
    # Getting the type of 'vals' (line 3038)
    vals_111851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3038, 9), 'vals')
    # Obtaining the member '__getitem__' of a type (line 3038)
    getitem___111852 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3038, 9), vals_111851, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3038)
    subscript_call_result_111853 = invoke(stypy.reporting.localization.Localization(__file__, 3038, 9), getitem___111852, int_111850)
    
    # Assigning a type to the variable 'b0' (line 3038)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3038, 4), 'b0', subscript_call_result_111853)
    
    # Assigning a Num to a Name (line 3039):
    
    # Assigning a Num to a Name (line 3039):
    float_111854 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3039, 9), 'float')
    # Assigning a type to the variable 'b1' (line 3039)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3039, 4), 'b1', float_111854)
    
    
    # Call to range(...): (line 3041)
    # Processing the call arguments (line 3041)
    int_111856 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3041, 19), 'int')
    
    # Call to len(...): (line 3041)
    # Processing the call arguments (line 3041)
    # Getting the type of 'vals' (line 3041)
    vals_111858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3041, 26), 'vals', False)
    # Processing the call keyword arguments (line 3041)
    kwargs_111859 = {}
    # Getting the type of 'len' (line 3041)
    len_111857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3041, 22), 'len', False)
    # Calling len(args, kwargs) (line 3041)
    len_call_result_111860 = invoke(stypy.reporting.localization.Localization(__file__, 3041, 22), len_111857, *[vals_111858], **kwargs_111859)
    
    # Processing the call keyword arguments (line 3041)
    kwargs_111861 = {}
    # Getting the type of 'range' (line 3041)
    range_111855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3041, 13), 'range', False)
    # Calling range(args, kwargs) (line 3041)
    range_call_result_111862 = invoke(stypy.reporting.localization.Localization(__file__, 3041, 13), range_111855, *[int_111856, len_call_result_111860], **kwargs_111861)
    
    # Testing the type of a for loop iterable (line 3041)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3041, 4), range_call_result_111862)
    # Getting the type of the for loop variable (line 3041)
    for_loop_var_111863 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3041, 4), range_call_result_111862)
    # Assigning a type to the variable 'i' (line 3041)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3041, 4), 'i', for_loop_var_111863)
    # SSA begins for a for statement (line 3041)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Name to a Name (line 3042):
    
    # Assigning a Name to a Name (line 3042):
    # Getting the type of 'b1' (line 3042)
    b1_111864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3042, 13), 'b1')
    # Assigning a type to the variable 'b2' (line 3042)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3042, 8), 'b2', b1_111864)
    
    # Assigning a Name to a Name (line 3043):
    
    # Assigning a Name to a Name (line 3043):
    # Getting the type of 'b0' (line 3043)
    b0_111865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3043, 13), 'b0')
    # Assigning a type to the variable 'b1' (line 3043)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3043, 8), 'b1', b0_111865)
    
    # Assigning a BinOp to a Name (line 3044):
    
    # Assigning a BinOp to a Name (line 3044):
    # Getting the type of 'x' (line 3044)
    x_111866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3044, 13), 'x')
    # Getting the type of 'b1' (line 3044)
    b1_111867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3044, 15), 'b1')
    # Applying the binary operator '*' (line 3044)
    result_mul_111868 = python_operator(stypy.reporting.localization.Localization(__file__, 3044, 13), '*', x_111866, b1_111867)
    
    # Getting the type of 'b2' (line 3044)
    b2_111869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3044, 20), 'b2')
    # Applying the binary operator '-' (line 3044)
    result_sub_111870 = python_operator(stypy.reporting.localization.Localization(__file__, 3044, 13), '-', result_mul_111868, b2_111869)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 3044)
    i_111871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3044, 30), 'i')
    # Getting the type of 'vals' (line 3044)
    vals_111872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3044, 25), 'vals')
    # Obtaining the member '__getitem__' of a type (line 3044)
    getitem___111873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3044, 25), vals_111872, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3044)
    subscript_call_result_111874 = invoke(stypy.reporting.localization.Localization(__file__, 3044, 25), getitem___111873, i_111871)
    
    # Applying the binary operator '+' (line 3044)
    result_add_111875 = python_operator(stypy.reporting.localization.Localization(__file__, 3044, 23), '+', result_sub_111870, subscript_call_result_111874)
    
    # Assigning a type to the variable 'b0' (line 3044)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3044, 8), 'b0', result_add_111875)
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    float_111876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3046, 11), 'float')
    # Getting the type of 'b0' (line 3046)
    b0_111877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3046, 16), 'b0')
    # Getting the type of 'b2' (line 3046)
    b2_111878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3046, 21), 'b2')
    # Applying the binary operator '-' (line 3046)
    result_sub_111879 = python_operator(stypy.reporting.localization.Localization(__file__, 3046, 16), '-', b0_111877, b2_111878)
    
    # Applying the binary operator '*' (line 3046)
    result_mul_111880 = python_operator(stypy.reporting.localization.Localization(__file__, 3046, 11), '*', float_111876, result_sub_111879)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3046)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3046, 4), 'stypy_return_type', result_mul_111880)
    
    # ################# End of '_chbevl(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_chbevl' in the type store
    # Getting the type of 'stypy_return_type' (line 3037)
    stypy_return_type_111881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3037, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_111881)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_chbevl'
    return stypy_return_type_111881

# Assigning a type to the variable '_chbevl' (line 3037)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3037, 0), '_chbevl', _chbevl)

@norecursion
def _i0_1(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_i0_1'
    module_type_store = module_type_store.open_function_context('_i0_1', 3049, 0, False)
    
    # Passed parameters checking function
    _i0_1.stypy_localization = localization
    _i0_1.stypy_type_of_self = None
    _i0_1.stypy_type_store = module_type_store
    _i0_1.stypy_function_name = '_i0_1'
    _i0_1.stypy_param_names_list = ['x']
    _i0_1.stypy_varargs_param_name = None
    _i0_1.stypy_kwargs_param_name = None
    _i0_1.stypy_call_defaults = defaults
    _i0_1.stypy_call_varargs = varargs
    _i0_1.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_i0_1', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_i0_1', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_i0_1(...)' code ##################

    
    # Call to exp(...): (line 3050)
    # Processing the call arguments (line 3050)
    # Getting the type of 'x' (line 3050)
    x_111883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3050, 15), 'x', False)
    # Processing the call keyword arguments (line 3050)
    kwargs_111884 = {}
    # Getting the type of 'exp' (line 3050)
    exp_111882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3050, 11), 'exp', False)
    # Calling exp(args, kwargs) (line 3050)
    exp_call_result_111885 = invoke(stypy.reporting.localization.Localization(__file__, 3050, 11), exp_111882, *[x_111883], **kwargs_111884)
    
    
    # Call to _chbevl(...): (line 3050)
    # Processing the call arguments (line 3050)
    # Getting the type of 'x' (line 3050)
    x_111887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3050, 28), 'x', False)
    float_111888 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3050, 30), 'float')
    # Applying the binary operator 'div' (line 3050)
    result_div_111889 = python_operator(stypy.reporting.localization.Localization(__file__, 3050, 28), 'div', x_111887, float_111888)
    
    int_111890 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3050, 34), 'int')
    # Applying the binary operator '-' (line 3050)
    result_sub_111891 = python_operator(stypy.reporting.localization.Localization(__file__, 3050, 28), '-', result_div_111889, int_111890)
    
    # Getting the type of '_i0A' (line 3050)
    _i0A_111892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3050, 37), '_i0A', False)
    # Processing the call keyword arguments (line 3050)
    kwargs_111893 = {}
    # Getting the type of '_chbevl' (line 3050)
    _chbevl_111886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3050, 20), '_chbevl', False)
    # Calling _chbevl(args, kwargs) (line 3050)
    _chbevl_call_result_111894 = invoke(stypy.reporting.localization.Localization(__file__, 3050, 20), _chbevl_111886, *[result_sub_111891, _i0A_111892], **kwargs_111893)
    
    # Applying the binary operator '*' (line 3050)
    result_mul_111895 = python_operator(stypy.reporting.localization.Localization(__file__, 3050, 11), '*', exp_call_result_111885, _chbevl_call_result_111894)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3050)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3050, 4), 'stypy_return_type', result_mul_111895)
    
    # ################# End of '_i0_1(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_i0_1' in the type store
    # Getting the type of 'stypy_return_type' (line 3049)
    stypy_return_type_111896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3049, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_111896)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_i0_1'
    return stypy_return_type_111896

# Assigning a type to the variable '_i0_1' (line 3049)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3049, 0), '_i0_1', _i0_1)

@norecursion
def _i0_2(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_i0_2'
    module_type_store = module_type_store.open_function_context('_i0_2', 3053, 0, False)
    
    # Passed parameters checking function
    _i0_2.stypy_localization = localization
    _i0_2.stypy_type_of_self = None
    _i0_2.stypy_type_store = module_type_store
    _i0_2.stypy_function_name = '_i0_2'
    _i0_2.stypy_param_names_list = ['x']
    _i0_2.stypy_varargs_param_name = None
    _i0_2.stypy_kwargs_param_name = None
    _i0_2.stypy_call_defaults = defaults
    _i0_2.stypy_call_varargs = varargs
    _i0_2.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_i0_2', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_i0_2', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_i0_2(...)' code ##################

    
    # Call to exp(...): (line 3054)
    # Processing the call arguments (line 3054)
    # Getting the type of 'x' (line 3054)
    x_111898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3054, 15), 'x', False)
    # Processing the call keyword arguments (line 3054)
    kwargs_111899 = {}
    # Getting the type of 'exp' (line 3054)
    exp_111897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3054, 11), 'exp', False)
    # Calling exp(args, kwargs) (line 3054)
    exp_call_result_111900 = invoke(stypy.reporting.localization.Localization(__file__, 3054, 11), exp_111897, *[x_111898], **kwargs_111899)
    
    
    # Call to _chbevl(...): (line 3054)
    # Processing the call arguments (line 3054)
    float_111902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3054, 28), 'float')
    # Getting the type of 'x' (line 3054)
    x_111903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3054, 33), 'x', False)
    # Applying the binary operator 'div' (line 3054)
    result_div_111904 = python_operator(stypy.reporting.localization.Localization(__file__, 3054, 28), 'div', float_111902, x_111903)
    
    float_111905 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3054, 37), 'float')
    # Applying the binary operator '-' (line 3054)
    result_sub_111906 = python_operator(stypy.reporting.localization.Localization(__file__, 3054, 28), '-', result_div_111904, float_111905)
    
    # Getting the type of '_i0B' (line 3054)
    _i0B_111907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3054, 42), '_i0B', False)
    # Processing the call keyword arguments (line 3054)
    kwargs_111908 = {}
    # Getting the type of '_chbevl' (line 3054)
    _chbevl_111901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3054, 20), '_chbevl', False)
    # Calling _chbevl(args, kwargs) (line 3054)
    _chbevl_call_result_111909 = invoke(stypy.reporting.localization.Localization(__file__, 3054, 20), _chbevl_111901, *[result_sub_111906, _i0B_111907], **kwargs_111908)
    
    # Applying the binary operator '*' (line 3054)
    result_mul_111910 = python_operator(stypy.reporting.localization.Localization(__file__, 3054, 11), '*', exp_call_result_111900, _chbevl_call_result_111909)
    
    
    # Call to sqrt(...): (line 3054)
    # Processing the call arguments (line 3054)
    # Getting the type of 'x' (line 3054)
    x_111912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3054, 55), 'x', False)
    # Processing the call keyword arguments (line 3054)
    kwargs_111913 = {}
    # Getting the type of 'sqrt' (line 3054)
    sqrt_111911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3054, 50), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 3054)
    sqrt_call_result_111914 = invoke(stypy.reporting.localization.Localization(__file__, 3054, 50), sqrt_111911, *[x_111912], **kwargs_111913)
    
    # Applying the binary operator 'div' (line 3054)
    result_div_111915 = python_operator(stypy.reporting.localization.Localization(__file__, 3054, 48), 'div', result_mul_111910, sqrt_call_result_111914)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3054)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3054, 4), 'stypy_return_type', result_div_111915)
    
    # ################# End of '_i0_2(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_i0_2' in the type store
    # Getting the type of 'stypy_return_type' (line 3053)
    stypy_return_type_111916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3053, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_111916)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_i0_2'
    return stypy_return_type_111916

# Assigning a type to the variable '_i0_2' (line 3053)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3053, 0), '_i0_2', _i0_2)

@norecursion
def i0(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'i0'
    module_type_store = module_type_store.open_function_context('i0', 3057, 0, False)
    
    # Passed parameters checking function
    i0.stypy_localization = localization
    i0.stypy_type_of_self = None
    i0.stypy_type_store = module_type_store
    i0.stypy_function_name = 'i0'
    i0.stypy_param_names_list = ['x']
    i0.stypy_varargs_param_name = None
    i0.stypy_kwargs_param_name = None
    i0.stypy_call_defaults = defaults
    i0.stypy_call_varargs = varargs
    i0.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'i0', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'i0', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'i0(...)' code ##################

    str_111917 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3110, (-1)), 'str', '\n    Modified Bessel function of the first kind, order 0.\n\n    Usually denoted :math:`I_0`.  This function does broadcast, but will *not*\n    "up-cast" int dtype arguments unless accompanied by at least one float or\n    complex dtype argument (see Raises below).\n\n    Parameters\n    ----------\n    x : array_like, dtype float or complex\n        Argument of the Bessel function.\n\n    Returns\n    -------\n    out : ndarray, shape = x.shape, dtype = x.dtype\n        The modified Bessel function evaluated at each of the elements of `x`.\n\n    Raises\n    ------\n    TypeError: array cannot be safely cast to required type\n        If argument consists exclusively of int dtypes.\n\n    See Also\n    --------\n    scipy.special.iv, scipy.special.ive\n\n    Notes\n    -----\n    We use the algorithm published by Clenshaw [1]_ and referenced by\n    Abramowitz and Stegun [2]_, for which the function domain is\n    partitioned into the two intervals [0,8] and (8,inf), and Chebyshev\n    polynomial expansions are employed in each interval. Relative error on\n    the domain [0,30] using IEEE arithmetic is documented [3]_ as having a\n    peak of 5.8e-16 with an rms of 1.4e-16 (n = 30000).\n\n    References\n    ----------\n    .. [1] C. W. Clenshaw, "Chebyshev series for mathematical functions", in\n           *National Physical Laboratory Mathematical Tables*, vol. 5, London:\n           Her Majesty\'s Stationery Office, 1962.\n    .. [2] M. Abramowitz and I. A. Stegun, *Handbook of Mathematical\n           Functions*, 10th printing, New York: Dover, 1964, pp. 379.\n           http://www.math.sfu.ca/~cbm/aands/page_379.htm\n    .. [3] http://kobesearch.cpan.org/htdocs/Math-Cephes/Math/Cephes.html\n\n    Examples\n    --------\n    >>> np.i0([0.])\n    array(1.0)\n    >>> np.i0([0., 1. + 2j])\n    array([ 1.00000000+0.j        ,  0.18785373+0.64616944j])\n\n    ')
    
    # Assigning a Call to a Name (line 3111):
    
    # Assigning a Call to a Name (line 3111):
    
    # Call to copy(...): (line 3111)
    # Processing the call keyword arguments (line 3111)
    kwargs_111923 = {}
    
    # Call to atleast_1d(...): (line 3111)
    # Processing the call arguments (line 3111)
    # Getting the type of 'x' (line 3111)
    x_111919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3111, 19), 'x', False)
    # Processing the call keyword arguments (line 3111)
    kwargs_111920 = {}
    # Getting the type of 'atleast_1d' (line 3111)
    atleast_1d_111918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3111, 8), 'atleast_1d', False)
    # Calling atleast_1d(args, kwargs) (line 3111)
    atleast_1d_call_result_111921 = invoke(stypy.reporting.localization.Localization(__file__, 3111, 8), atleast_1d_111918, *[x_111919], **kwargs_111920)
    
    # Obtaining the member 'copy' of a type (line 3111)
    copy_111922 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3111, 8), atleast_1d_call_result_111921, 'copy')
    # Calling copy(args, kwargs) (line 3111)
    copy_call_result_111924 = invoke(stypy.reporting.localization.Localization(__file__, 3111, 8), copy_111922, *[], **kwargs_111923)
    
    # Assigning a type to the variable 'x' (line 3111)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3111, 4), 'x', copy_call_result_111924)
    
    # Assigning a Call to a Name (line 3112):
    
    # Assigning a Call to a Name (line 3112):
    
    # Call to empty_like(...): (line 3112)
    # Processing the call arguments (line 3112)
    # Getting the type of 'x' (line 3112)
    x_111926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3112, 19), 'x', False)
    # Processing the call keyword arguments (line 3112)
    kwargs_111927 = {}
    # Getting the type of 'empty_like' (line 3112)
    empty_like_111925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3112, 8), 'empty_like', False)
    # Calling empty_like(args, kwargs) (line 3112)
    empty_like_call_result_111928 = invoke(stypy.reporting.localization.Localization(__file__, 3112, 8), empty_like_111925, *[x_111926], **kwargs_111927)
    
    # Assigning a type to the variable 'y' (line 3112)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3112, 4), 'y', empty_like_call_result_111928)
    
    # Assigning a Compare to a Name (line 3113):
    
    # Assigning a Compare to a Name (line 3113):
    
    # Getting the type of 'x' (line 3113)
    x_111929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3113, 11), 'x')
    int_111930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3113, 15), 'int')
    # Applying the binary operator '<' (line 3113)
    result_lt_111931 = python_operator(stypy.reporting.localization.Localization(__file__, 3113, 11), '<', x_111929, int_111930)
    
    # Assigning a type to the variable 'ind' (line 3113)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3113, 4), 'ind', result_lt_111931)
    
    # Assigning a UnaryOp to a Subscript (line 3114):
    
    # Assigning a UnaryOp to a Subscript (line 3114):
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'ind' (line 3114)
    ind_111932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3114, 16), 'ind')
    # Getting the type of 'x' (line 3114)
    x_111933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3114, 14), 'x')
    # Obtaining the member '__getitem__' of a type (line 3114)
    getitem___111934 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3114, 14), x_111933, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3114)
    subscript_call_result_111935 = invoke(stypy.reporting.localization.Localization(__file__, 3114, 14), getitem___111934, ind_111932)
    
    # Applying the 'usub' unary operator (line 3114)
    result___neg___111936 = python_operator(stypy.reporting.localization.Localization(__file__, 3114, 13), 'usub', subscript_call_result_111935)
    
    # Getting the type of 'x' (line 3114)
    x_111937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3114, 4), 'x')
    # Getting the type of 'ind' (line 3114)
    ind_111938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3114, 6), 'ind')
    # Storing an element on a container (line 3114)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3114, 4), x_111937, (ind_111938, result___neg___111936))
    
    # Assigning a Compare to a Name (line 3115):
    
    # Assigning a Compare to a Name (line 3115):
    
    # Getting the type of 'x' (line 3115)
    x_111939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3115, 11), 'x')
    float_111940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3115, 16), 'float')
    # Applying the binary operator '<=' (line 3115)
    result_le_111941 = python_operator(stypy.reporting.localization.Localization(__file__, 3115, 11), '<=', x_111939, float_111940)
    
    # Assigning a type to the variable 'ind' (line 3115)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3115, 4), 'ind', result_le_111941)
    
    # Assigning a Call to a Subscript (line 3116):
    
    # Assigning a Call to a Subscript (line 3116):
    
    # Call to _i0_1(...): (line 3116)
    # Processing the call arguments (line 3116)
    
    # Obtaining the type of the subscript
    # Getting the type of 'ind' (line 3116)
    ind_111943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3116, 21), 'ind', False)
    # Getting the type of 'x' (line 3116)
    x_111944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3116, 19), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 3116)
    getitem___111945 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3116, 19), x_111944, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3116)
    subscript_call_result_111946 = invoke(stypy.reporting.localization.Localization(__file__, 3116, 19), getitem___111945, ind_111943)
    
    # Processing the call keyword arguments (line 3116)
    kwargs_111947 = {}
    # Getting the type of '_i0_1' (line 3116)
    _i0_1_111942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3116, 13), '_i0_1', False)
    # Calling _i0_1(args, kwargs) (line 3116)
    _i0_1_call_result_111948 = invoke(stypy.reporting.localization.Localization(__file__, 3116, 13), _i0_1_111942, *[subscript_call_result_111946], **kwargs_111947)
    
    # Getting the type of 'y' (line 3116)
    y_111949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3116, 4), 'y')
    # Getting the type of 'ind' (line 3116)
    ind_111950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3116, 6), 'ind')
    # Storing an element on a container (line 3116)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3116, 4), y_111949, (ind_111950, _i0_1_call_result_111948))
    
    # Assigning a UnaryOp to a Name (line 3117):
    
    # Assigning a UnaryOp to a Name (line 3117):
    
    # Getting the type of 'ind' (line 3117)
    ind_111951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3117, 12), 'ind')
    # Applying the '~' unary operator (line 3117)
    result_inv_111952 = python_operator(stypy.reporting.localization.Localization(__file__, 3117, 11), '~', ind_111951)
    
    # Assigning a type to the variable 'ind2' (line 3117)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3117, 4), 'ind2', result_inv_111952)
    
    # Assigning a Call to a Subscript (line 3118):
    
    # Assigning a Call to a Subscript (line 3118):
    
    # Call to _i0_2(...): (line 3118)
    # Processing the call arguments (line 3118)
    
    # Obtaining the type of the subscript
    # Getting the type of 'ind2' (line 3118)
    ind2_111954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3118, 22), 'ind2', False)
    # Getting the type of 'x' (line 3118)
    x_111955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3118, 20), 'x', False)
    # Obtaining the member '__getitem__' of a type (line 3118)
    getitem___111956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3118, 20), x_111955, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3118)
    subscript_call_result_111957 = invoke(stypy.reporting.localization.Localization(__file__, 3118, 20), getitem___111956, ind2_111954)
    
    # Processing the call keyword arguments (line 3118)
    kwargs_111958 = {}
    # Getting the type of '_i0_2' (line 3118)
    _i0_2_111953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3118, 14), '_i0_2', False)
    # Calling _i0_2(args, kwargs) (line 3118)
    _i0_2_call_result_111959 = invoke(stypy.reporting.localization.Localization(__file__, 3118, 14), _i0_2_111953, *[subscript_call_result_111957], **kwargs_111958)
    
    # Getting the type of 'y' (line 3118)
    y_111960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3118, 4), 'y')
    # Getting the type of 'ind2' (line 3118)
    ind2_111961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3118, 6), 'ind2')
    # Storing an element on a container (line 3118)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3118, 4), y_111960, (ind2_111961, _i0_2_call_result_111959))
    
    # Call to squeeze(...): (line 3119)
    # Processing the call keyword arguments (line 3119)
    kwargs_111964 = {}
    # Getting the type of 'y' (line 3119)
    y_111962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3119, 11), 'y', False)
    # Obtaining the member 'squeeze' of a type (line 3119)
    squeeze_111963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3119, 11), y_111962, 'squeeze')
    # Calling squeeze(args, kwargs) (line 3119)
    squeeze_call_result_111965 = invoke(stypy.reporting.localization.Localization(__file__, 3119, 11), squeeze_111963, *[], **kwargs_111964)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3119)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3119, 4), 'stypy_return_type', squeeze_call_result_111965)
    
    # ################# End of 'i0(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'i0' in the type store
    # Getting the type of 'stypy_return_type' (line 3057)
    stypy_return_type_111966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3057, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_111966)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'i0'
    return stypy_return_type_111966

# Assigning a type to the variable 'i0' (line 3057)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3057, 0), 'i0', i0)

@norecursion
def kaiser(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'kaiser'
    module_type_store = module_type_store.open_function_context('kaiser', 3124, 0, False)
    
    # Passed parameters checking function
    kaiser.stypy_localization = localization
    kaiser.stypy_type_of_self = None
    kaiser.stypy_type_store = module_type_store
    kaiser.stypy_function_name = 'kaiser'
    kaiser.stypy_param_names_list = ['M', 'beta']
    kaiser.stypy_varargs_param_name = None
    kaiser.stypy_kwargs_param_name = None
    kaiser.stypy_call_defaults = defaults
    kaiser.stypy_call_varargs = varargs
    kaiser.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'kaiser', ['M', 'beta'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'kaiser', localization, ['M', 'beta'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'kaiser(...)' code ##################

    str_111967 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3242, (-1)), 'str', '\n    Return the Kaiser window.\n\n    The Kaiser window is a taper formed by using a Bessel function.\n\n    Parameters\n    ----------\n    M : int\n        Number of points in the output window. If zero or less, an\n        empty array is returned.\n    beta : float\n        Shape parameter for window.\n\n    Returns\n    -------\n    out : array\n        The window, with the maximum value normalized to one (the value\n        one appears only if the number of samples is odd).\n\n    See Also\n    --------\n    bartlett, blackman, hamming, hanning\n\n    Notes\n    -----\n    The Kaiser window is defined as\n\n    .. math::  w(n) = I_0\\left( \\beta \\sqrt{1-\\frac{4n^2}{(M-1)^2}}\n               \\right)/I_0(\\beta)\n\n    with\n\n    .. math:: \\quad -\\frac{M-1}{2} \\leq n \\leq \\frac{M-1}{2},\n\n    where :math:`I_0` is the modified zeroth-order Bessel function.\n\n    The Kaiser was named for Jim Kaiser, who discovered a simple\n    approximation to the DPSS window based on Bessel functions.  The Kaiser\n    window is a very good approximation to the Digital Prolate Spheroidal\n    Sequence, or Slepian window, which is the transform which maximizes the\n    energy in the main lobe of the window relative to total energy.\n\n    The Kaiser can approximate many other windows by varying the beta\n    parameter.\n\n    ====  =======================\n    beta  Window shape\n    ====  =======================\n    0     Rectangular\n    5     Similar to a Hamming\n    6     Similar to a Hanning\n    8.6   Similar to a Blackman\n    ====  =======================\n\n    A beta value of 14 is probably a good starting point. Note that as beta\n    gets large, the window narrows, and so the number of samples needs to be\n    large enough to sample the increasingly narrow spike, otherwise NaNs will\n    get returned.\n\n    Most references to the Kaiser window come from the signal processing\n    literature, where it is used as one of many windowing functions for\n    smoothing values.  It is also known as an apodization (which means\n    "removing the foot", i.e. smoothing discontinuities at the beginning\n    and end of the sampled signal) or tapering function.\n\n    References\n    ----------\n    .. [1] J. F. Kaiser, "Digital Filters" - Ch 7 in "Systems analysis by\n           digital computer", Editors: F.F. Kuo and J.F. Kaiser, p 218-285.\n           John Wiley and Sons, New York, (1966).\n    .. [2] E.R. Kanasewich, "Time Sequence Analysis in Geophysics", The\n           University of Alberta Press, 1975, pp. 177-178.\n    .. [3] Wikipedia, "Window function",\n           http://en.wikipedia.org/wiki/Window_function\n\n    Examples\n    --------\n    >>> np.kaiser(12, 14)\n    array([  7.72686684e-06,   3.46009194e-03,   4.65200189e-02,\n             2.29737120e-01,   5.99885316e-01,   9.45674898e-01,\n             9.45674898e-01,   5.99885316e-01,   2.29737120e-01,\n             4.65200189e-02,   3.46009194e-03,   7.72686684e-06])\n\n\n    Plot the window and the frequency response:\n\n    >>> from numpy.fft import fft, fftshift\n    >>> window = np.kaiser(51, 14)\n    >>> plt.plot(window)\n    [<matplotlib.lines.Line2D object at 0x...>]\n    >>> plt.title("Kaiser window")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.ylabel("Amplitude")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.xlabel("Sample")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.show()\n\n    >>> plt.figure()\n    <matplotlib.figure.Figure object at 0x...>\n    >>> A = fft(window, 2048) / 25.5\n    >>> mag = np.abs(fftshift(A))\n    >>> freq = np.linspace(-0.5, 0.5, len(A))\n    >>> response = 20 * np.log10(mag)\n    >>> response = np.clip(response, -100, 100)\n    >>> plt.plot(freq, response)\n    [<matplotlib.lines.Line2D object at 0x...>]\n    >>> plt.title("Frequency response of Kaiser window")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.ylabel("Magnitude [dB]")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.xlabel("Normalized frequency [cycles per sample]")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.axis(\'tight\')\n    (-0.5, 0.5, -100.0, ...)\n    >>> plt.show()\n\n    ')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3243, 4))
    
    # 'from numpy.dual import i0' statement (line 3243)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/lib/')
    import_111968 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 3243, 4), 'numpy.dual')

    if (type(import_111968) is not StypyTypeError):

        if (import_111968 != 'pyd_module'):
            __import__(import_111968)
            sys_modules_111969 = sys.modules[import_111968]
            import_from_module(stypy.reporting.localization.Localization(__file__, 3243, 4), 'numpy.dual', sys_modules_111969.module_type_store, module_type_store, ['i0'])
            nest_module(stypy.reporting.localization.Localization(__file__, 3243, 4), __file__, sys_modules_111969, sys_modules_111969.module_type_store, module_type_store)
        else:
            from numpy.dual import i0

            import_from_module(stypy.reporting.localization.Localization(__file__, 3243, 4), 'numpy.dual', None, module_type_store, ['i0'], [i0])

    else:
        # Assigning a type to the variable 'numpy.dual' (line 3243)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3243, 4), 'numpy.dual', import_111968)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/lib/')
    
    
    
    # Getting the type of 'M' (line 3244)
    M_111970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3244, 7), 'M')
    int_111971 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3244, 12), 'int')
    # Applying the binary operator '==' (line 3244)
    result_eq_111972 = python_operator(stypy.reporting.localization.Localization(__file__, 3244, 7), '==', M_111970, int_111971)
    
    # Testing the type of an if condition (line 3244)
    if_condition_111973 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3244, 4), result_eq_111972)
    # Assigning a type to the variable 'if_condition_111973' (line 3244)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3244, 4), 'if_condition_111973', if_condition_111973)
    # SSA begins for if statement (line 3244)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to array(...): (line 3245)
    # Processing the call arguments (line 3245)
    
    # Obtaining an instance of the builtin type 'list' (line 3245)
    list_111976 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3245, 24), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3245)
    # Adding element type (line 3245)
    float_111977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3245, 25), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3245, 24), list_111976, float_111977)
    
    # Processing the call keyword arguments (line 3245)
    kwargs_111978 = {}
    # Getting the type of 'np' (line 3245)
    np_111974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3245, 15), 'np', False)
    # Obtaining the member 'array' of a type (line 3245)
    array_111975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3245, 15), np_111974, 'array')
    # Calling array(args, kwargs) (line 3245)
    array_call_result_111979 = invoke(stypy.reporting.localization.Localization(__file__, 3245, 15), array_111975, *[list_111976], **kwargs_111978)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3245)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3245, 8), 'stypy_return_type', array_call_result_111979)
    # SSA join for if statement (line 3244)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 3246):
    
    # Assigning a Call to a Name (line 3246):
    
    # Call to arange(...): (line 3246)
    # Processing the call arguments (line 3246)
    int_111981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3246, 15), 'int')
    # Getting the type of 'M' (line 3246)
    M_111982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3246, 18), 'M', False)
    # Processing the call keyword arguments (line 3246)
    kwargs_111983 = {}
    # Getting the type of 'arange' (line 3246)
    arange_111980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3246, 8), 'arange', False)
    # Calling arange(args, kwargs) (line 3246)
    arange_call_result_111984 = invoke(stypy.reporting.localization.Localization(__file__, 3246, 8), arange_111980, *[int_111981, M_111982], **kwargs_111983)
    
    # Assigning a type to the variable 'n' (line 3246)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3246, 4), 'n', arange_call_result_111984)
    
    # Assigning a BinOp to a Name (line 3247):
    
    # Assigning a BinOp to a Name (line 3247):
    # Getting the type of 'M' (line 3247)
    M_111985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3247, 13), 'M')
    int_111986 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3247, 15), 'int')
    # Applying the binary operator '-' (line 3247)
    result_sub_111987 = python_operator(stypy.reporting.localization.Localization(__file__, 3247, 13), '-', M_111985, int_111986)
    
    float_111988 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3247, 18), 'float')
    # Applying the binary operator 'div' (line 3247)
    result_div_111989 = python_operator(stypy.reporting.localization.Localization(__file__, 3247, 12), 'div', result_sub_111987, float_111988)
    
    # Assigning a type to the variable 'alpha' (line 3247)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3247, 4), 'alpha', result_div_111989)
    
    # Call to i0(...): (line 3248)
    # Processing the call arguments (line 3248)
    # Getting the type of 'beta' (line 3248)
    beta_111991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3248, 14), 'beta', False)
    
    # Call to sqrt(...): (line 3248)
    # Processing the call arguments (line 3248)
    int_111993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3248, 26), 'int')
    # Getting the type of 'n' (line 3248)
    n_111994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3248, 30), 'n', False)
    # Getting the type of 'alpha' (line 3248)
    alpha_111995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3248, 32), 'alpha', False)
    # Applying the binary operator '-' (line 3248)
    result_sub_111996 = python_operator(stypy.reporting.localization.Localization(__file__, 3248, 30), '-', n_111994, alpha_111995)
    
    # Getting the type of 'alpha' (line 3248)
    alpha_111997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3248, 39), 'alpha', False)
    # Applying the binary operator 'div' (line 3248)
    result_div_111998 = python_operator(stypy.reporting.localization.Localization(__file__, 3248, 29), 'div', result_sub_111996, alpha_111997)
    
    float_111999 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3248, 47), 'float')
    # Applying the binary operator '**' (line 3248)
    result_pow_112000 = python_operator(stypy.reporting.localization.Localization(__file__, 3248, 28), '**', result_div_111998, float_111999)
    
    # Applying the binary operator '-' (line 3248)
    result_sub_112001 = python_operator(stypy.reporting.localization.Localization(__file__, 3248, 26), '-', int_111993, result_pow_112000)
    
    # Processing the call keyword arguments (line 3248)
    kwargs_112002 = {}
    # Getting the type of 'sqrt' (line 3248)
    sqrt_111992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3248, 21), 'sqrt', False)
    # Calling sqrt(args, kwargs) (line 3248)
    sqrt_call_result_112003 = invoke(stypy.reporting.localization.Localization(__file__, 3248, 21), sqrt_111992, *[result_sub_112001], **kwargs_112002)
    
    # Applying the binary operator '*' (line 3248)
    result_mul_112004 = python_operator(stypy.reporting.localization.Localization(__file__, 3248, 14), '*', beta_111991, sqrt_call_result_112003)
    
    # Processing the call keyword arguments (line 3248)
    kwargs_112005 = {}
    # Getting the type of 'i0' (line 3248)
    i0_111990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3248, 11), 'i0', False)
    # Calling i0(args, kwargs) (line 3248)
    i0_call_result_112006 = invoke(stypy.reporting.localization.Localization(__file__, 3248, 11), i0_111990, *[result_mul_112004], **kwargs_112005)
    
    
    # Call to i0(...): (line 3248)
    # Processing the call arguments (line 3248)
    
    # Call to float(...): (line 3248)
    # Processing the call arguments (line 3248)
    # Getting the type of 'beta' (line 3248)
    beta_112009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3248, 62), 'beta', False)
    # Processing the call keyword arguments (line 3248)
    kwargs_112010 = {}
    # Getting the type of 'float' (line 3248)
    float_112008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3248, 56), 'float', False)
    # Calling float(args, kwargs) (line 3248)
    float_call_result_112011 = invoke(stypy.reporting.localization.Localization(__file__, 3248, 56), float_112008, *[beta_112009], **kwargs_112010)
    
    # Processing the call keyword arguments (line 3248)
    kwargs_112012 = {}
    # Getting the type of 'i0' (line 3248)
    i0_112007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3248, 53), 'i0', False)
    # Calling i0(args, kwargs) (line 3248)
    i0_call_result_112013 = invoke(stypy.reporting.localization.Localization(__file__, 3248, 53), i0_112007, *[float_call_result_112011], **kwargs_112012)
    
    # Applying the binary operator 'div' (line 3248)
    result_div_112014 = python_operator(stypy.reporting.localization.Localization(__file__, 3248, 11), 'div', i0_call_result_112006, i0_call_result_112013)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3248)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3248, 4), 'stypy_return_type', result_div_112014)
    
    # ################# End of 'kaiser(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'kaiser' in the type store
    # Getting the type of 'stypy_return_type' (line 3124)
    stypy_return_type_112015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3124, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_112015)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'kaiser'
    return stypy_return_type_112015

# Assigning a type to the variable 'kaiser' (line 3124)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3124, 0), 'kaiser', kaiser)

@norecursion
def sinc(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'sinc'
    module_type_store = module_type_store.open_function_context('sinc', 3251, 0, False)
    
    # Passed parameters checking function
    sinc.stypy_localization = localization
    sinc.stypy_type_of_self = None
    sinc.stypy_type_store = module_type_store
    sinc.stypy_function_name = 'sinc'
    sinc.stypy_param_names_list = ['x']
    sinc.stypy_varargs_param_name = None
    sinc.stypy_kwargs_param_name = None
    sinc.stypy_call_defaults = defaults
    sinc.stypy_call_varargs = varargs
    sinc.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'sinc', ['x'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'sinc', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'sinc(...)' code ##################

    str_112016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3324, (-1)), 'str', '\n    Return the sinc function.\n\n    The sinc function is :math:`\\sin(\\pi x)/(\\pi x)`.\n\n    Parameters\n    ----------\n    x : ndarray\n        Array (possibly multi-dimensional) of values for which to to\n        calculate ``sinc(x)``.\n\n    Returns\n    -------\n    out : ndarray\n        ``sinc(x)``, which has the same shape as the input.\n\n    Notes\n    -----\n    ``sinc(0)`` is the limit value 1.\n\n    The name sinc is short for "sine cardinal" or "sinus cardinalis".\n\n    The sinc function is used in various signal processing applications,\n    including in anti-aliasing, in the construction of a Lanczos resampling\n    filter, and in interpolation.\n\n    For bandlimited interpolation of discrete-time signals, the ideal\n    interpolation kernel is proportional to the sinc function.\n\n    References\n    ----------\n    .. [1] Weisstein, Eric W. "Sinc Function." From MathWorld--A Wolfram Web\n           Resource. http://mathworld.wolfram.com/SincFunction.html\n    .. [2] Wikipedia, "Sinc function",\n           http://en.wikipedia.org/wiki/Sinc_function\n\n    Examples\n    --------\n    >>> x = np.linspace(-4, 4, 41)\n    >>> np.sinc(x)\n    array([ -3.89804309e-17,  -4.92362781e-02,  -8.40918587e-02,\n            -8.90384387e-02,  -5.84680802e-02,   3.89804309e-17,\n             6.68206631e-02,   1.16434881e-01,   1.26137788e-01,\n             8.50444803e-02,  -3.89804309e-17,  -1.03943254e-01,\n            -1.89206682e-01,  -2.16236208e-01,  -1.55914881e-01,\n             3.89804309e-17,   2.33872321e-01,   5.04551152e-01,\n             7.56826729e-01,   9.35489284e-01,   1.00000000e+00,\n             9.35489284e-01,   7.56826729e-01,   5.04551152e-01,\n             2.33872321e-01,   3.89804309e-17,  -1.55914881e-01,\n            -2.16236208e-01,  -1.89206682e-01,  -1.03943254e-01,\n            -3.89804309e-17,   8.50444803e-02,   1.26137788e-01,\n             1.16434881e-01,   6.68206631e-02,   3.89804309e-17,\n            -5.84680802e-02,  -8.90384387e-02,  -8.40918587e-02,\n            -4.92362781e-02,  -3.89804309e-17])\n\n    >>> plt.plot(x, np.sinc(x))\n    [<matplotlib.lines.Line2D object at 0x...>]\n    >>> plt.title("Sinc Function")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.ylabel("Amplitude")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.xlabel("X")\n    <matplotlib.text.Text object at 0x...>\n    >>> plt.show()\n\n    It works in 2-D as well:\n\n    >>> x = np.linspace(-4, 4, 401)\n    >>> xx = np.outer(x, x)\n    >>> plt.imshow(np.sinc(xx))\n    <matplotlib.image.AxesImage object at 0x...>\n\n    ')
    
    # Assigning a Call to a Name (line 3325):
    
    # Assigning a Call to a Name (line 3325):
    
    # Call to asanyarray(...): (line 3325)
    # Processing the call arguments (line 3325)
    # Getting the type of 'x' (line 3325)
    x_112019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3325, 22), 'x', False)
    # Processing the call keyword arguments (line 3325)
    kwargs_112020 = {}
    # Getting the type of 'np' (line 3325)
    np_112017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3325, 8), 'np', False)
    # Obtaining the member 'asanyarray' of a type (line 3325)
    asanyarray_112018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3325, 8), np_112017, 'asanyarray')
    # Calling asanyarray(args, kwargs) (line 3325)
    asanyarray_call_result_112021 = invoke(stypy.reporting.localization.Localization(__file__, 3325, 8), asanyarray_112018, *[x_112019], **kwargs_112020)
    
    # Assigning a type to the variable 'x' (line 3325)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3325, 4), 'x', asanyarray_call_result_112021)
    
    # Assigning a BinOp to a Name (line 3326):
    
    # Assigning a BinOp to a Name (line 3326):
    # Getting the type of 'pi' (line 3326)
    pi_112022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3326, 8), 'pi')
    
    # Call to where(...): (line 3326)
    # Processing the call arguments (line 3326)
    
    # Getting the type of 'x' (line 3326)
    x_112024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3326, 19), 'x', False)
    int_112025 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3326, 24), 'int')
    # Applying the binary operator '==' (line 3326)
    result_eq_112026 = python_operator(stypy.reporting.localization.Localization(__file__, 3326, 19), '==', x_112024, int_112025)
    
    float_112027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3326, 27), 'float')
    # Getting the type of 'x' (line 3326)
    x_112028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3326, 36), 'x', False)
    # Processing the call keyword arguments (line 3326)
    kwargs_112029 = {}
    # Getting the type of 'where' (line 3326)
    where_112023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3326, 13), 'where', False)
    # Calling where(args, kwargs) (line 3326)
    where_call_result_112030 = invoke(stypy.reporting.localization.Localization(__file__, 3326, 13), where_112023, *[result_eq_112026, float_112027, x_112028], **kwargs_112029)
    
    # Applying the binary operator '*' (line 3326)
    result_mul_112031 = python_operator(stypy.reporting.localization.Localization(__file__, 3326, 8), '*', pi_112022, where_call_result_112030)
    
    # Assigning a type to the variable 'y' (line 3326)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3326, 4), 'y', result_mul_112031)
    
    # Call to sin(...): (line 3327)
    # Processing the call arguments (line 3327)
    # Getting the type of 'y' (line 3327)
    y_112033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3327, 15), 'y', False)
    # Processing the call keyword arguments (line 3327)
    kwargs_112034 = {}
    # Getting the type of 'sin' (line 3327)
    sin_112032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3327, 11), 'sin', False)
    # Calling sin(args, kwargs) (line 3327)
    sin_call_result_112035 = invoke(stypy.reporting.localization.Localization(__file__, 3327, 11), sin_112032, *[y_112033], **kwargs_112034)
    
    # Getting the type of 'y' (line 3327)
    y_112036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3327, 18), 'y')
    # Applying the binary operator 'div' (line 3327)
    result_div_112037 = python_operator(stypy.reporting.localization.Localization(__file__, 3327, 11), 'div', sin_call_result_112035, y_112036)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3327)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3327, 4), 'stypy_return_type', result_div_112037)
    
    # ################# End of 'sinc(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'sinc' in the type store
    # Getting the type of 'stypy_return_type' (line 3251)
    stypy_return_type_112038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3251, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_112038)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'sinc'
    return stypy_return_type_112038

# Assigning a type to the variable 'sinc' (line 3251)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3251, 0), 'sinc', sinc)

@norecursion
def msort(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'msort'
    module_type_store = module_type_store.open_function_context('msort', 3330, 0, False)
    
    # Passed parameters checking function
    msort.stypy_localization = localization
    msort.stypy_type_of_self = None
    msort.stypy_type_store = module_type_store
    msort.stypy_function_name = 'msort'
    msort.stypy_param_names_list = ['a']
    msort.stypy_varargs_param_name = None
    msort.stypy_kwargs_param_name = None
    msort.stypy_call_defaults = defaults
    msort.stypy_call_varargs = varargs
    msort.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'msort', ['a'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'msort', localization, ['a'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'msort(...)' code ##################

    str_112039 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3352, (-1)), 'str', '\n    Return a copy of an array sorted along the first axis.\n\n    Parameters\n    ----------\n    a : array_like\n        Array to be sorted.\n\n    Returns\n    -------\n    sorted_array : ndarray\n        Array of the same type and shape as `a`.\n\n    See Also\n    --------\n    sort\n\n    Notes\n    -----\n    ``np.msort(a)`` is equivalent to  ``np.sort(a, axis=0)``.\n\n    ')
    
    # Assigning a Call to a Name (line 3353):
    
    # Assigning a Call to a Name (line 3353):
    
    # Call to array(...): (line 3353)
    # Processing the call arguments (line 3353)
    # Getting the type of 'a' (line 3353)
    a_112041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3353, 14), 'a', False)
    # Processing the call keyword arguments (line 3353)
    # Getting the type of 'True' (line 3353)
    True_112042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3353, 23), 'True', False)
    keyword_112043 = True_112042
    # Getting the type of 'True' (line 3353)
    True_112044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3353, 34), 'True', False)
    keyword_112045 = True_112044
    kwargs_112046 = {'subok': keyword_112043, 'copy': keyword_112045}
    # Getting the type of 'array' (line 3353)
    array_112040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3353, 8), 'array', False)
    # Calling array(args, kwargs) (line 3353)
    array_call_result_112047 = invoke(stypy.reporting.localization.Localization(__file__, 3353, 8), array_112040, *[a_112041], **kwargs_112046)
    
    # Assigning a type to the variable 'b' (line 3353)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3353, 4), 'b', array_call_result_112047)
    
    # Call to sort(...): (line 3354)
    # Processing the call arguments (line 3354)
    int_112050 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3354, 11), 'int')
    # Processing the call keyword arguments (line 3354)
    kwargs_112051 = {}
    # Getting the type of 'b' (line 3354)
    b_112048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3354, 4), 'b', False)
    # Obtaining the member 'sort' of a type (line 3354)
    sort_112049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3354, 4), b_112048, 'sort')
    # Calling sort(args, kwargs) (line 3354)
    sort_call_result_112052 = invoke(stypy.reporting.localization.Localization(__file__, 3354, 4), sort_112049, *[int_112050], **kwargs_112051)
    
    # Getting the type of 'b' (line 3355)
    b_112053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3355, 11), 'b')
    # Assigning a type to the variable 'stypy_return_type' (line 3355)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3355, 4), 'stypy_return_type', b_112053)
    
    # ################# End of 'msort(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'msort' in the type store
    # Getting the type of 'stypy_return_type' (line 3330)
    stypy_return_type_112054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3330, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_112054)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'msort'
    return stypy_return_type_112054

# Assigning a type to the variable 'msort' (line 3330)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3330, 0), 'msort', msort)

@norecursion
def _ureduce(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_ureduce'
    module_type_store = module_type_store.open_function_context('_ureduce', 3358, 0, False)
    
    # Passed parameters checking function
    _ureduce.stypy_localization = localization
    _ureduce.stypy_type_of_self = None
    _ureduce.stypy_type_store = module_type_store
    _ureduce.stypy_function_name = '_ureduce'
    _ureduce.stypy_param_names_list = ['a', 'func']
    _ureduce.stypy_varargs_param_name = None
    _ureduce.stypy_kwargs_param_name = 'kwargs'
    _ureduce.stypy_call_defaults = defaults
    _ureduce.stypy_call_varargs = varargs
    _ureduce.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_ureduce', ['a', 'func'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_ureduce', localization, ['a', 'func'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_ureduce(...)' code ##################

    str_112055 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3383, (-1)), 'str', "\n    Internal Function.\n    Call `func` with `a` as first argument swapping the axes to use extended\n    axis on functions that don't support it natively.\n\n    Returns result and a.shape with axis dims set to 1.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array or object that can be converted to an array.\n    func : callable\n        Reduction function Kapable of receiving an axis argument.\n        It is is called with `a` as first argument followed by `kwargs`.\n     kwargs : keyword arguments\n        additional keyword arguments to pass to `func`.\n\n    Returns\n    -------\n    result : tuple\n        Result of func(a, **kwargs) and a.shape with axis dims set to 1\n        which can be used to reshape the result to the same shape a ufunc with\n        keepdims=True would produce.\n\n    ")
    
    # Assigning a Call to a Name (line 3384):
    
    # Assigning a Call to a Name (line 3384):
    
    # Call to asanyarray(...): (line 3384)
    # Processing the call arguments (line 3384)
    # Getting the type of 'a' (line 3384)
    a_112058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3384, 22), 'a', False)
    # Processing the call keyword arguments (line 3384)
    kwargs_112059 = {}
    # Getting the type of 'np' (line 3384)
    np_112056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3384, 8), 'np', False)
    # Obtaining the member 'asanyarray' of a type (line 3384)
    asanyarray_112057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3384, 8), np_112056, 'asanyarray')
    # Calling asanyarray(args, kwargs) (line 3384)
    asanyarray_call_result_112060 = invoke(stypy.reporting.localization.Localization(__file__, 3384, 8), asanyarray_112057, *[a_112058], **kwargs_112059)
    
    # Assigning a type to the variable 'a' (line 3384)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3384, 4), 'a', asanyarray_call_result_112060)
    
    # Assigning a Call to a Name (line 3385):
    
    # Assigning a Call to a Name (line 3385):
    
    # Call to get(...): (line 3385)
    # Processing the call arguments (line 3385)
    str_112063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3385, 22), 'str', 'axis')
    # Getting the type of 'None' (line 3385)
    None_112064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3385, 30), 'None', False)
    # Processing the call keyword arguments (line 3385)
    kwargs_112065 = {}
    # Getting the type of 'kwargs' (line 3385)
    kwargs_112061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3385, 11), 'kwargs', False)
    # Obtaining the member 'get' of a type (line 3385)
    get_112062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3385, 11), kwargs_112061, 'get')
    # Calling get(args, kwargs) (line 3385)
    get_call_result_112066 = invoke(stypy.reporting.localization.Localization(__file__, 3385, 11), get_112062, *[str_112063, None_112064], **kwargs_112065)
    
    # Assigning a type to the variable 'axis' (line 3385)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3385, 4), 'axis', get_call_result_112066)
    
    # Type idiom detected: calculating its left and rigth part (line 3386)
    # Getting the type of 'axis' (line 3386)
    axis_112067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3386, 4), 'axis')
    # Getting the type of 'None' (line 3386)
    None_112068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3386, 19), 'None')
    
    (may_be_112069, more_types_in_union_112070) = may_not_be_none(axis_112067, None_112068)

    if may_be_112069:

        if more_types_in_union_112070:
            # Runtime conditional SSA (line 3386)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 3387):
        
        # Assigning a Call to a Name (line 3387):
        
        # Call to list(...): (line 3387)
        # Processing the call arguments (line 3387)
        # Getting the type of 'a' (line 3387)
        a_112072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3387, 23), 'a', False)
        # Obtaining the member 'shape' of a type (line 3387)
        shape_112073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3387, 23), a_112072, 'shape')
        # Processing the call keyword arguments (line 3387)
        kwargs_112074 = {}
        # Getting the type of 'list' (line 3387)
        list_112071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3387, 18), 'list', False)
        # Calling list(args, kwargs) (line 3387)
        list_call_result_112075 = invoke(stypy.reporting.localization.Localization(__file__, 3387, 18), list_112071, *[shape_112073], **kwargs_112074)
        
        # Assigning a type to the variable 'keepdim' (line 3387)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3387, 8), 'keepdim', list_call_result_112075)
        
        # Assigning a Attribute to a Name (line 3388):
        
        # Assigning a Attribute to a Name (line 3388):
        # Getting the type of 'a' (line 3388)
        a_112076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3388, 13), 'a')
        # Obtaining the member 'ndim' of a type (line 3388)
        ndim_112077 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3388, 13), a_112076, 'ndim')
        # Assigning a type to the variable 'nd' (line 3388)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3388, 8), 'nd', ndim_112077)
        
        
        # SSA begins for try-except statement (line 3389)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 3390):
        
        # Assigning a Call to a Name (line 3390):
        
        # Call to index(...): (line 3390)
        # Processing the call arguments (line 3390)
        # Getting the type of 'axis' (line 3390)
        axis_112080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3390, 34), 'axis', False)
        # Processing the call keyword arguments (line 3390)
        kwargs_112081 = {}
        # Getting the type of 'operator' (line 3390)
        operator_112078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3390, 19), 'operator', False)
        # Obtaining the member 'index' of a type (line 3390)
        index_112079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3390, 19), operator_112078, 'index')
        # Calling index(args, kwargs) (line 3390)
        index_call_result_112082 = invoke(stypy.reporting.localization.Localization(__file__, 3390, 19), index_112079, *[axis_112080], **kwargs_112081)
        
        # Assigning a type to the variable 'axis' (line 3390)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3390, 12), 'axis', index_call_result_112082)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'axis' (line 3391)
        axis_112083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3391, 15), 'axis')
        # Getting the type of 'nd' (line 3391)
        nd_112084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3391, 23), 'nd')
        # Applying the binary operator '>=' (line 3391)
        result_ge_112085 = python_operator(stypy.reporting.localization.Localization(__file__, 3391, 15), '>=', axis_112083, nd_112084)
        
        
        # Getting the type of 'axis' (line 3391)
        axis_112086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3391, 29), 'axis')
        
        # Getting the type of 'nd' (line 3391)
        nd_112087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3391, 37), 'nd')
        # Applying the 'usub' unary operator (line 3391)
        result___neg___112088 = python_operator(stypy.reporting.localization.Localization(__file__, 3391, 36), 'usub', nd_112087)
        
        # Applying the binary operator '<' (line 3391)
        result_lt_112089 = python_operator(stypy.reporting.localization.Localization(__file__, 3391, 29), '<', axis_112086, result___neg___112088)
        
        # Applying the binary operator 'or' (line 3391)
        result_or_keyword_112090 = python_operator(stypy.reporting.localization.Localization(__file__, 3391, 15), 'or', result_ge_112085, result_lt_112089)
        
        # Testing the type of an if condition (line 3391)
        if_condition_112091 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3391, 12), result_or_keyword_112090)
        # Assigning a type to the variable 'if_condition_112091' (line 3391)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3391, 12), 'if_condition_112091', if_condition_112091)
        # SSA begins for if statement (line 3391)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to IndexError(...): (line 3392)
        # Processing the call arguments (line 3392)
        str_112093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3392, 33), 'str', 'axis %d out of bounds (%d)')
        
        # Obtaining an instance of the builtin type 'tuple' (line 3392)
        tuple_112094 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3392, 65), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3392)
        # Adding element type (line 3392)
        # Getting the type of 'axis' (line 3392)
        axis_112095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3392, 65), 'axis', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3392, 65), tuple_112094, axis_112095)
        # Adding element type (line 3392)
        # Getting the type of 'a' (line 3392)
        a_112096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3392, 71), 'a', False)
        # Obtaining the member 'ndim' of a type (line 3392)
        ndim_112097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3392, 71), a_112096, 'ndim')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3392, 65), tuple_112094, ndim_112097)
        
        # Applying the binary operator '%' (line 3392)
        result_mod_112098 = python_operator(stypy.reporting.localization.Localization(__file__, 3392, 33), '%', str_112093, tuple_112094)
        
        # Processing the call keyword arguments (line 3392)
        kwargs_112099 = {}
        # Getting the type of 'IndexError' (line 3392)
        IndexError_112092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3392, 22), 'IndexError', False)
        # Calling IndexError(args, kwargs) (line 3392)
        IndexError_call_result_112100 = invoke(stypy.reporting.localization.Localization(__file__, 3392, 22), IndexError_112092, *[result_mod_112098], **kwargs_112099)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3392, 16), IndexError_call_result_112100, 'raise parameter', BaseException)
        # SSA join for if statement (line 3391)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Num to a Subscript (line 3393):
        
        # Assigning a Num to a Subscript (line 3393):
        int_112101 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3393, 28), 'int')
        # Getting the type of 'keepdim' (line 3393)
        keepdim_112102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3393, 12), 'keepdim')
        # Getting the type of 'axis' (line 3393)
        axis_112103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3393, 20), 'axis')
        # Storing an element on a container (line 3393)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3393, 12), keepdim_112102, (axis_112103, int_112101))
        # SSA branch for the except part of a try statement (line 3389)
        # SSA branch for the except 'TypeError' branch of a try statement (line 3389)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Call to a Name (line 3395):
        
        # Assigning a Call to a Name (line 3395):
        
        # Call to set(...): (line 3395)
        # Processing the call keyword arguments (line 3395)
        kwargs_112105 = {}
        # Getting the type of 'set' (line 3395)
        set_112104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3395, 18), 'set', False)
        # Calling set(args, kwargs) (line 3395)
        set_call_result_112106 = invoke(stypy.reporting.localization.Localization(__file__, 3395, 18), set_112104, *[], **kwargs_112105)
        
        # Assigning a type to the variable 'sax' (line 3395)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3395, 12), 'sax', set_call_result_112106)
        
        # Getting the type of 'axis' (line 3396)
        axis_112107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3396, 21), 'axis')
        # Testing the type of a for loop iterable (line 3396)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3396, 12), axis_112107)
        # Getting the type of the for loop variable (line 3396)
        for_loop_var_112108 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3396, 12), axis_112107)
        # Assigning a type to the variable 'x' (line 3396)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3396, 12), 'x', for_loop_var_112108)
        # SSA begins for a for statement (line 3396)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'x' (line 3397)
        x_112109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3397, 19), 'x')
        # Getting the type of 'nd' (line 3397)
        nd_112110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3397, 24), 'nd')
        # Applying the binary operator '>=' (line 3397)
        result_ge_112111 = python_operator(stypy.reporting.localization.Localization(__file__, 3397, 19), '>=', x_112109, nd_112110)
        
        
        # Getting the type of 'x' (line 3397)
        x_112112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3397, 30), 'x')
        
        # Getting the type of 'nd' (line 3397)
        nd_112113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3397, 35), 'nd')
        # Applying the 'usub' unary operator (line 3397)
        result___neg___112114 = python_operator(stypy.reporting.localization.Localization(__file__, 3397, 34), 'usub', nd_112113)
        
        # Applying the binary operator '<' (line 3397)
        result_lt_112115 = python_operator(stypy.reporting.localization.Localization(__file__, 3397, 30), '<', x_112112, result___neg___112114)
        
        # Applying the binary operator 'or' (line 3397)
        result_or_keyword_112116 = python_operator(stypy.reporting.localization.Localization(__file__, 3397, 19), 'or', result_ge_112111, result_lt_112115)
        
        # Testing the type of an if condition (line 3397)
        if_condition_112117 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3397, 16), result_or_keyword_112116)
        # Assigning a type to the variable 'if_condition_112117' (line 3397)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3397, 16), 'if_condition_112117', if_condition_112117)
        # SSA begins for if statement (line 3397)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to IndexError(...): (line 3398)
        # Processing the call arguments (line 3398)
        str_112119 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3398, 37), 'str', 'axis %d out of bounds (%d)')
        
        # Obtaining an instance of the builtin type 'tuple' (line 3398)
        tuple_112120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3398, 69), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3398)
        # Adding element type (line 3398)
        # Getting the type of 'x' (line 3398)
        x_112121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3398, 69), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3398, 69), tuple_112120, x_112121)
        # Adding element type (line 3398)
        # Getting the type of 'nd' (line 3398)
        nd_112122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3398, 72), 'nd', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3398, 69), tuple_112120, nd_112122)
        
        # Applying the binary operator '%' (line 3398)
        result_mod_112123 = python_operator(stypy.reporting.localization.Localization(__file__, 3398, 37), '%', str_112119, tuple_112120)
        
        # Processing the call keyword arguments (line 3398)
        kwargs_112124 = {}
        # Getting the type of 'IndexError' (line 3398)
        IndexError_112118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3398, 26), 'IndexError', False)
        # Calling IndexError(args, kwargs) (line 3398)
        IndexError_call_result_112125 = invoke(stypy.reporting.localization.Localization(__file__, 3398, 26), IndexError_112118, *[result_mod_112123], **kwargs_112124)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3398, 20), IndexError_call_result_112125, 'raise parameter', BaseException)
        # SSA join for if statement (line 3397)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'x' (line 3399)
        x_112126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3399, 19), 'x')
        # Getting the type of 'sax' (line 3399)
        sax_112127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3399, 24), 'sax')
        # Applying the binary operator 'in' (line 3399)
        result_contains_112128 = python_operator(stypy.reporting.localization.Localization(__file__, 3399, 19), 'in', x_112126, sax_112127)
        
        # Testing the type of an if condition (line 3399)
        if_condition_112129 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3399, 16), result_contains_112128)
        # Assigning a type to the variable 'if_condition_112129' (line 3399)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3399, 16), 'if_condition_112129', if_condition_112129)
        # SSA begins for if statement (line 3399)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 3400)
        # Processing the call arguments (line 3400)
        str_112131 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3400, 37), 'str', 'duplicate value in axis')
        # Processing the call keyword arguments (line 3400)
        kwargs_112132 = {}
        # Getting the type of 'ValueError' (line 3400)
        ValueError_112130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3400, 26), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 3400)
        ValueError_call_result_112133 = invoke(stypy.reporting.localization.Localization(__file__, 3400, 26), ValueError_112130, *[str_112131], **kwargs_112132)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3400, 20), ValueError_call_result_112133, 'raise parameter', BaseException)
        # SSA join for if statement (line 3399)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to add(...): (line 3401)
        # Processing the call arguments (line 3401)
        # Getting the type of 'x' (line 3401)
        x_112136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3401, 24), 'x', False)
        # Getting the type of 'nd' (line 3401)
        nd_112137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3401, 28), 'nd', False)
        # Applying the binary operator '%' (line 3401)
        result_mod_112138 = python_operator(stypy.reporting.localization.Localization(__file__, 3401, 24), '%', x_112136, nd_112137)
        
        # Processing the call keyword arguments (line 3401)
        kwargs_112139 = {}
        # Getting the type of 'sax' (line 3401)
        sax_112134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3401, 16), 'sax', False)
        # Obtaining the member 'add' of a type (line 3401)
        add_112135 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3401, 16), sax_112134, 'add')
        # Calling add(args, kwargs) (line 3401)
        add_call_result_112140 = invoke(stypy.reporting.localization.Localization(__file__, 3401, 16), add_112135, *[result_mod_112138], **kwargs_112139)
        
        
        # Assigning a Num to a Subscript (line 3402):
        
        # Assigning a Num to a Subscript (line 3402):
        int_112141 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3402, 29), 'int')
        # Getting the type of 'keepdim' (line 3402)
        keepdim_112142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3402, 16), 'keepdim')
        # Getting the type of 'x' (line 3402)
        x_112143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3402, 24), 'x')
        # Storing an element on a container (line 3402)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3402, 16), keepdim_112142, (x_112143, int_112141))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 3403):
        
        # Assigning a Call to a Name (line 3403):
        
        # Call to symmetric_difference(...): (line 3403)
        # Processing the call arguments (line 3403)
        
        # Call to frozenset(...): (line 3403)
        # Processing the call arguments (line 3403)
        
        # Call to range(...): (line 3403)
        # Processing the call arguments (line 3403)
        # Getting the type of 'nd' (line 3403)
        nd_112148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3403, 60), 'nd', False)
        # Processing the call keyword arguments (line 3403)
        kwargs_112149 = {}
        # Getting the type of 'range' (line 3403)
        range_112147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3403, 54), 'range', False)
        # Calling range(args, kwargs) (line 3403)
        range_call_result_112150 = invoke(stypy.reporting.localization.Localization(__file__, 3403, 54), range_112147, *[nd_112148], **kwargs_112149)
        
        # Processing the call keyword arguments (line 3403)
        kwargs_112151 = {}
        # Getting the type of 'frozenset' (line 3403)
        frozenset_112146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3403, 44), 'frozenset', False)
        # Calling frozenset(args, kwargs) (line 3403)
        frozenset_call_result_112152 = invoke(stypy.reporting.localization.Localization(__file__, 3403, 44), frozenset_112146, *[range_call_result_112150], **kwargs_112151)
        
        # Processing the call keyword arguments (line 3403)
        kwargs_112153 = {}
        # Getting the type of 'sax' (line 3403)
        sax_112144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3403, 19), 'sax', False)
        # Obtaining the member 'symmetric_difference' of a type (line 3403)
        symmetric_difference_112145 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3403, 19), sax_112144, 'symmetric_difference')
        # Calling symmetric_difference(args, kwargs) (line 3403)
        symmetric_difference_call_result_112154 = invoke(stypy.reporting.localization.Localization(__file__, 3403, 19), symmetric_difference_112145, *[frozenset_call_result_112152], **kwargs_112153)
        
        # Assigning a type to the variable 'keep' (line 3403)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3403, 12), 'keep', symmetric_difference_call_result_112154)
        
        # Assigning a Call to a Name (line 3404):
        
        # Assigning a Call to a Name (line 3404):
        
        # Call to len(...): (line 3404)
        # Processing the call arguments (line 3404)
        # Getting the type of 'keep' (line 3404)
        keep_112156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3404, 24), 'keep', False)
        # Processing the call keyword arguments (line 3404)
        kwargs_112157 = {}
        # Getting the type of 'len' (line 3404)
        len_112155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3404, 20), 'len', False)
        # Calling len(args, kwargs) (line 3404)
        len_call_result_112158 = invoke(stypy.reporting.localization.Localization(__file__, 3404, 20), len_112155, *[keep_112156], **kwargs_112157)
        
        # Assigning a type to the variable 'nkeep' (line 3404)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3404, 12), 'nkeep', len_call_result_112158)
        
        
        # Call to enumerate(...): (line 3406)
        # Processing the call arguments (line 3406)
        
        # Call to sorted(...): (line 3406)
        # Processing the call arguments (line 3406)
        # Getting the type of 'keep' (line 3406)
        keep_112161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3406, 41), 'keep', False)
        # Processing the call keyword arguments (line 3406)
        kwargs_112162 = {}
        # Getting the type of 'sorted' (line 3406)
        sorted_112160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3406, 34), 'sorted', False)
        # Calling sorted(args, kwargs) (line 3406)
        sorted_call_result_112163 = invoke(stypy.reporting.localization.Localization(__file__, 3406, 34), sorted_112160, *[keep_112161], **kwargs_112162)
        
        # Processing the call keyword arguments (line 3406)
        kwargs_112164 = {}
        # Getting the type of 'enumerate' (line 3406)
        enumerate_112159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3406, 24), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 3406)
        enumerate_call_result_112165 = invoke(stypy.reporting.localization.Localization(__file__, 3406, 24), enumerate_112159, *[sorted_call_result_112163], **kwargs_112164)
        
        # Testing the type of a for loop iterable (line 3406)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3406, 12), enumerate_call_result_112165)
        # Getting the type of the for loop variable (line 3406)
        for_loop_var_112166 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3406, 12), enumerate_call_result_112165)
        # Assigning a type to the variable 'i' (line 3406)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3406, 12), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3406, 12), for_loop_var_112166))
        # Assigning a type to the variable 's' (line 3406)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3406, 12), 's', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3406, 12), for_loop_var_112166))
        # SSA begins for a for statement (line 3406)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 3407):
        
        # Assigning a Call to a Name (line 3407):
        
        # Call to swapaxes(...): (line 3407)
        # Processing the call arguments (line 3407)
        # Getting the type of 'i' (line 3407)
        i_112169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3407, 31), 'i', False)
        # Getting the type of 's' (line 3407)
        s_112170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3407, 34), 's', False)
        # Processing the call keyword arguments (line 3407)
        kwargs_112171 = {}
        # Getting the type of 'a' (line 3407)
        a_112167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3407, 20), 'a', False)
        # Obtaining the member 'swapaxes' of a type (line 3407)
        swapaxes_112168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3407, 20), a_112167, 'swapaxes')
        # Calling swapaxes(args, kwargs) (line 3407)
        swapaxes_call_result_112172 = invoke(stypy.reporting.localization.Localization(__file__, 3407, 20), swapaxes_112168, *[i_112169, s_112170], **kwargs_112171)
        
        # Assigning a type to the variable 'a' (line 3407)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3407, 16), 'a', swapaxes_call_result_112172)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 3409):
        
        # Assigning a Call to a Name (line 3409):
        
        # Call to reshape(...): (line 3409)
        # Processing the call arguments (line 3409)
        
        # Obtaining the type of the subscript
        # Getting the type of 'nkeep' (line 3409)
        nkeep_112175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3409, 35), 'nkeep', False)
        slice_112176 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3409, 26), None, nkeep_112175, None)
        # Getting the type of 'a' (line 3409)
        a_112177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3409, 26), 'a', False)
        # Obtaining the member 'shape' of a type (line 3409)
        shape_112178 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3409, 26), a_112177, 'shape')
        # Obtaining the member '__getitem__' of a type (line 3409)
        getitem___112179 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3409, 26), shape_112178, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3409)
        subscript_call_result_112180 = invoke(stypy.reporting.localization.Localization(__file__, 3409, 26), getitem___112179, slice_112176)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 3409)
        tuple_112181 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3409, 45), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 3409)
        # Adding element type (line 3409)
        int_112182 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3409, 45), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3409, 45), tuple_112181, int_112182)
        
        # Applying the binary operator '+' (line 3409)
        result_add_112183 = python_operator(stypy.reporting.localization.Localization(__file__, 3409, 26), '+', subscript_call_result_112180, tuple_112181)
        
        # Processing the call keyword arguments (line 3409)
        kwargs_112184 = {}
        # Getting the type of 'a' (line 3409)
        a_112173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3409, 16), 'a', False)
        # Obtaining the member 'reshape' of a type (line 3409)
        reshape_112174 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3409, 16), a_112173, 'reshape')
        # Calling reshape(args, kwargs) (line 3409)
        reshape_call_result_112185 = invoke(stypy.reporting.localization.Localization(__file__, 3409, 16), reshape_112174, *[result_add_112183], **kwargs_112184)
        
        # Assigning a type to the variable 'a' (line 3409)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3409, 12), 'a', reshape_call_result_112185)
        
        # Assigning a Num to a Subscript (line 3410):
        
        # Assigning a Num to a Subscript (line 3410):
        int_112186 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3410, 29), 'int')
        # Getting the type of 'kwargs' (line 3410)
        kwargs_112187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3410, 12), 'kwargs')
        str_112188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3410, 19), 'str', 'axis')
        # Storing an element on a container (line 3410)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3410, 12), kwargs_112187, (str_112188, int_112186))
        # SSA join for try-except statement (line 3389)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_112070:
            # Runtime conditional SSA for else branch (line 3386)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_112069) or more_types_in_union_112070):
        
        # Assigning a BinOp to a Name (line 3412):
        
        # Assigning a BinOp to a Name (line 3412):
        
        # Obtaining an instance of the builtin type 'list' (line 3412)
        list_112189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3412, 18), 'list')
        # Adding type elements to the builtin type 'list' instance (line 3412)
        # Adding element type (line 3412)
        int_112190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3412, 19), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3412, 18), list_112189, int_112190)
        
        # Getting the type of 'a' (line 3412)
        a_112191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3412, 24), 'a')
        # Obtaining the member 'ndim' of a type (line 3412)
        ndim_112192 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3412, 24), a_112191, 'ndim')
        # Applying the binary operator '*' (line 3412)
        result_mul_112193 = python_operator(stypy.reporting.localization.Localization(__file__, 3412, 18), '*', list_112189, ndim_112192)
        
        # Assigning a type to the variable 'keepdim' (line 3412)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3412, 8), 'keepdim', result_mul_112193)

        if (may_be_112069 and more_types_in_union_112070):
            # SSA join for if statement (line 3386)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 3414):
    
    # Assigning a Call to a Name (line 3414):
    
    # Call to func(...): (line 3414)
    # Processing the call arguments (line 3414)
    # Getting the type of 'a' (line 3414)
    a_112195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3414, 13), 'a', False)
    # Processing the call keyword arguments (line 3414)
    # Getting the type of 'kwargs' (line 3414)
    kwargs_112196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3414, 18), 'kwargs', False)
    kwargs_112197 = {'kwargs_112196': kwargs_112196}
    # Getting the type of 'func' (line 3414)
    func_112194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3414, 8), 'func', False)
    # Calling func(args, kwargs) (line 3414)
    func_call_result_112198 = invoke(stypy.reporting.localization.Localization(__file__, 3414, 8), func_112194, *[a_112195], **kwargs_112197)
    
    # Assigning a type to the variable 'r' (line 3414)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3414, 4), 'r', func_call_result_112198)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3415)
    tuple_112199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3415, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3415)
    # Adding element type (line 3415)
    # Getting the type of 'r' (line 3415)
    r_112200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3415, 11), 'r')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3415, 11), tuple_112199, r_112200)
    # Adding element type (line 3415)
    # Getting the type of 'keepdim' (line 3415)
    keepdim_112201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3415, 14), 'keepdim')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3415, 11), tuple_112199, keepdim_112201)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3415)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3415, 4), 'stypy_return_type', tuple_112199)
    
    # ################# End of '_ureduce(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_ureduce' in the type store
    # Getting the type of 'stypy_return_type' (line 3358)
    stypy_return_type_112202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3358, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_112202)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_ureduce'
    return stypy_return_type_112202

# Assigning a type to the variable '_ureduce' (line 3358)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3358, 0), '_ureduce', _ureduce)

@norecursion
def median(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 3418)
    None_112203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3418, 19), 'None')
    # Getting the type of 'None' (line 3418)
    None_112204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3418, 29), 'None')
    # Getting the type of 'False' (line 3418)
    False_112205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3418, 51), 'False')
    # Getting the type of 'False' (line 3418)
    False_112206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3418, 67), 'False')
    defaults = [None_112203, None_112204, False_112205, False_112206]
    # Create a new context for function 'median'
    module_type_store = module_type_store.open_function_context('median', 3418, 0, False)
    
    # Passed parameters checking function
    median.stypy_localization = localization
    median.stypy_type_of_self = None
    median.stypy_type_store = module_type_store
    median.stypy_function_name = 'median'
    median.stypy_param_names_list = ['a', 'axis', 'out', 'overwrite_input', 'keepdims']
    median.stypy_varargs_param_name = None
    median.stypy_kwargs_param_name = None
    median.stypy_call_defaults = defaults
    median.stypy_call_varargs = varargs
    median.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'median', ['a', 'axis', 'out', 'overwrite_input', 'keepdims'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'median', localization, ['a', 'axis', 'out', 'overwrite_input', 'keepdims'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'median(...)' code ##################

    str_112207 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3498, (-1)), 'str', '\n    Compute the median along the specified axis.\n\n    Returns the median of the array elements.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array or object that can be converted to an array.\n    axis : {int, sequence of int, None}, optional\n        Axis or axes along which the medians are computed. The default\n        is to compute the median along a flattened version of the array.\n        A sequence of axes is supported since version 1.9.0.\n    out : ndarray, optional\n        Alternative output array in which to place the result. It must\n        have the same shape and buffer length as the expected output,\n        but the type (of the output) will be cast if necessary.\n    overwrite_input : bool, optional\n       If True, then allow use of memory of input array `a` for\n       calculations. The input array will be modified by the call to\n       `median`. This will save memory when you do not need to preserve\n       the contents of the input array. Treat the input as undefined,\n       but it will probably be fully or partially sorted. Default is\n       False. If `overwrite_input` is ``True`` and `a` is not already an\n       `ndarray`, an error will be raised.\n    keepdims : bool, optional\n        If this is set to True, the axes which are reduced are left\n        in the result as dimensions with size one. With this option,\n        the result will broadcast correctly against the original `arr`.\n\n        .. versionadded:: 1.9.0\n\n    Returns\n    -------\n    median : ndarray\n        A new array holding the result. If the input contains integers\n        or floats smaller than ``float64``, then the output data-type is\n        ``np.float64``.  Otherwise, the data-type of the output is the\n        same as that of the input. If `out` is specified, that array is\n        returned instead.\n\n    See Also\n    --------\n    mean, percentile\n\n    Notes\n    -----\n    Given a vector ``V`` of length ``N``, the median of ``V`` is the\n    middle value of a sorted copy of ``V``, ``V_sorted`` - i\n    e., ``V_sorted[(N-1)/2]``, when ``N`` is odd, and the average of the\n    two middle values of ``V_sorted`` when ``N`` is even.\n\n    Examples\n    --------\n    >>> a = np.array([[10, 7, 4], [3, 2, 1]])\n    >>> a\n    array([[10,  7,  4],\n           [ 3,  2,  1]])\n    >>> np.median(a)\n    3.5\n    >>> np.median(a, axis=0)\n    array([ 6.5,  4.5,  2.5])\n    >>> np.median(a, axis=1)\n    array([ 7.,  2.])\n    >>> m = np.median(a, axis=0)\n    >>> out = np.zeros_like(m)\n    >>> np.median(a, axis=0, out=m)\n    array([ 6.5,  4.5,  2.5])\n    >>> m\n    array([ 6.5,  4.5,  2.5])\n    >>> b = a.copy()\n    >>> np.median(b, axis=1, overwrite_input=True)\n    array([ 7.,  2.])\n    >>> assert not np.all(a==b)\n    >>> b = a.copy()\n    >>> np.median(b, axis=None, overwrite_input=True)\n    3.5\n    >>> assert not np.all(a==b)\n\n    ')
    
    # Assigning a Call to a Tuple (line 3499):
    
    # Assigning a Call to a Name:
    
    # Call to _ureduce(...): (line 3499)
    # Processing the call arguments (line 3499)
    # Getting the type of 'a' (line 3499)
    a_112209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3499, 20), 'a', False)
    # Processing the call keyword arguments (line 3499)
    # Getting the type of '_median' (line 3499)
    _median_112210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3499, 28), '_median', False)
    keyword_112211 = _median_112210
    # Getting the type of 'axis' (line 3499)
    axis_112212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3499, 42), 'axis', False)
    keyword_112213 = axis_112212
    # Getting the type of 'out' (line 3499)
    out_112214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3499, 52), 'out', False)
    keyword_112215 = out_112214
    # Getting the type of 'overwrite_input' (line 3500)
    overwrite_input_112216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3500, 36), 'overwrite_input', False)
    keyword_112217 = overwrite_input_112216
    kwargs_112218 = {'overwrite_input': keyword_112217, 'out': keyword_112215, 'func': keyword_112211, 'axis': keyword_112213}
    # Getting the type of '_ureduce' (line 3499)
    _ureduce_112208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3499, 11), '_ureduce', False)
    # Calling _ureduce(args, kwargs) (line 3499)
    _ureduce_call_result_112219 = invoke(stypy.reporting.localization.Localization(__file__, 3499, 11), _ureduce_112208, *[a_112209], **kwargs_112218)
    
    # Assigning a type to the variable 'call_assignment_107428' (line 3499)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3499, 4), 'call_assignment_107428', _ureduce_call_result_112219)
    
    # Assigning a Call to a Name (line 3499):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_112222 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3499, 4), 'int')
    # Processing the call keyword arguments
    kwargs_112223 = {}
    # Getting the type of 'call_assignment_107428' (line 3499)
    call_assignment_107428_112220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3499, 4), 'call_assignment_107428', False)
    # Obtaining the member '__getitem__' of a type (line 3499)
    getitem___112221 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3499, 4), call_assignment_107428_112220, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_112224 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___112221, *[int_112222], **kwargs_112223)
    
    # Assigning a type to the variable 'call_assignment_107429' (line 3499)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3499, 4), 'call_assignment_107429', getitem___call_result_112224)
    
    # Assigning a Name to a Name (line 3499):
    # Getting the type of 'call_assignment_107429' (line 3499)
    call_assignment_107429_112225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3499, 4), 'call_assignment_107429')
    # Assigning a type to the variable 'r' (line 3499)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3499, 4), 'r', call_assignment_107429_112225)
    
    # Assigning a Call to a Name (line 3499):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_112228 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3499, 4), 'int')
    # Processing the call keyword arguments
    kwargs_112229 = {}
    # Getting the type of 'call_assignment_107428' (line 3499)
    call_assignment_107428_112226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3499, 4), 'call_assignment_107428', False)
    # Obtaining the member '__getitem__' of a type (line 3499)
    getitem___112227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3499, 4), call_assignment_107428_112226, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_112230 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___112227, *[int_112228], **kwargs_112229)
    
    # Assigning a type to the variable 'call_assignment_107430' (line 3499)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3499, 4), 'call_assignment_107430', getitem___call_result_112230)
    
    # Assigning a Name to a Name (line 3499):
    # Getting the type of 'call_assignment_107430' (line 3499)
    call_assignment_107430_112231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3499, 4), 'call_assignment_107430')
    # Assigning a type to the variable 'k' (line 3499)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3499, 7), 'k', call_assignment_107430_112231)
    
    # Getting the type of 'keepdims' (line 3501)
    keepdims_112232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3501, 7), 'keepdims')
    # Testing the type of an if condition (line 3501)
    if_condition_112233 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3501, 4), keepdims_112232)
    # Assigning a type to the variable 'if_condition_112233' (line 3501)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3501, 4), 'if_condition_112233', if_condition_112233)
    # SSA begins for if statement (line 3501)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to reshape(...): (line 3502)
    # Processing the call arguments (line 3502)
    # Getting the type of 'k' (line 3502)
    k_112236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3502, 25), 'k', False)
    # Processing the call keyword arguments (line 3502)
    kwargs_112237 = {}
    # Getting the type of 'r' (line 3502)
    r_112234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3502, 15), 'r', False)
    # Obtaining the member 'reshape' of a type (line 3502)
    reshape_112235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3502, 15), r_112234, 'reshape')
    # Calling reshape(args, kwargs) (line 3502)
    reshape_call_result_112238 = invoke(stypy.reporting.localization.Localization(__file__, 3502, 15), reshape_112235, *[k_112236], **kwargs_112237)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3502)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3502, 8), 'stypy_return_type', reshape_call_result_112238)
    # SSA branch for the else part of an if statement (line 3501)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'r' (line 3504)
    r_112239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3504, 15), 'r')
    # Assigning a type to the variable 'stypy_return_type' (line 3504)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3504, 8), 'stypy_return_type', r_112239)
    # SSA join for if statement (line 3501)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'median(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'median' in the type store
    # Getting the type of 'stypy_return_type' (line 3418)
    stypy_return_type_112240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3418, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_112240)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'median'
    return stypy_return_type_112240

# Assigning a type to the variable 'median' (line 3418)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3418, 0), 'median', median)

@norecursion
def _median(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 3506)
    None_112241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3506, 20), 'None')
    # Getting the type of 'None' (line 3506)
    None_112242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3506, 30), 'None')
    # Getting the type of 'False' (line 3506)
    False_112243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3506, 52), 'False')
    defaults = [None_112241, None_112242, False_112243]
    # Create a new context for function '_median'
    module_type_store = module_type_store.open_function_context('_median', 3506, 0, False)
    
    # Passed parameters checking function
    _median.stypy_localization = localization
    _median.stypy_type_of_self = None
    _median.stypy_type_store = module_type_store
    _median.stypy_function_name = '_median'
    _median.stypy_param_names_list = ['a', 'axis', 'out', 'overwrite_input']
    _median.stypy_varargs_param_name = None
    _median.stypy_kwargs_param_name = None
    _median.stypy_call_defaults = defaults
    _median.stypy_call_varargs = varargs
    _median.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_median', ['a', 'axis', 'out', 'overwrite_input'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_median', localization, ['a', 'axis', 'out', 'overwrite_input'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_median(...)' code ##################

    
    # Assigning a Call to a Name (line 3509):
    
    # Assigning a Call to a Name (line 3509):
    
    # Call to asanyarray(...): (line 3509)
    # Processing the call arguments (line 3509)
    # Getting the type of 'a' (line 3509)
    a_112246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3509, 22), 'a', False)
    # Processing the call keyword arguments (line 3509)
    kwargs_112247 = {}
    # Getting the type of 'np' (line 3509)
    np_112244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3509, 8), 'np', False)
    # Obtaining the member 'asanyarray' of a type (line 3509)
    asanyarray_112245 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3509, 8), np_112244, 'asanyarray')
    # Calling asanyarray(args, kwargs) (line 3509)
    asanyarray_call_result_112248 = invoke(stypy.reporting.localization.Localization(__file__, 3509, 8), asanyarray_112245, *[a_112246], **kwargs_112247)
    
    # Assigning a type to the variable 'a' (line 3509)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3509, 4), 'a', asanyarray_call_result_112248)
    
    # Type idiom detected: calculating its left and rigth part (line 3512)
    # Getting the type of 'axis' (line 3512)
    axis_112249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3512, 7), 'axis')
    # Getting the type of 'None' (line 3512)
    None_112250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3512, 15), 'None')
    
    (may_be_112251, more_types_in_union_112252) = may_be_none(axis_112249, None_112250)

    if may_be_112251:

        if more_types_in_union_112252:
            # Runtime conditional SSA (line 3512)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Attribute to a Name (line 3513):
        
        # Assigning a Attribute to a Name (line 3513):
        # Getting the type of 'a' (line 3513)
        a_112253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3513, 13), 'a')
        # Obtaining the member 'size' of a type (line 3513)
        size_112254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3513, 13), a_112253, 'size')
        # Assigning a type to the variable 'sz' (line 3513)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3513, 8), 'sz', size_112254)

        if more_types_in_union_112252:
            # Runtime conditional SSA for else branch (line 3512)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_112251) or more_types_in_union_112252):
        
        # Assigning a Subscript to a Name (line 3515):
        
        # Assigning a Subscript to a Name (line 3515):
        
        # Obtaining the type of the subscript
        # Getting the type of 'axis' (line 3515)
        axis_112255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3515, 21), 'axis')
        # Getting the type of 'a' (line 3515)
        a_112256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3515, 13), 'a')
        # Obtaining the member 'shape' of a type (line 3515)
        shape_112257 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3515, 13), a_112256, 'shape')
        # Obtaining the member '__getitem__' of a type (line 3515)
        getitem___112258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3515, 13), shape_112257, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3515)
        subscript_call_result_112259 = invoke(stypy.reporting.localization.Localization(__file__, 3515, 13), getitem___112258, axis_112255)
        
        # Assigning a type to the variable 'sz' (line 3515)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3515, 8), 'sz', subscript_call_result_112259)

        if (may_be_112251 and more_types_in_union_112252):
            # SSA join for if statement (line 3512)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Getting the type of 'sz' (line 3516)
    sz_112260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3516, 7), 'sz')
    int_112261 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3516, 12), 'int')
    # Applying the binary operator '%' (line 3516)
    result_mod_112262 = python_operator(stypy.reporting.localization.Localization(__file__, 3516, 7), '%', sz_112260, int_112261)
    
    int_112263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3516, 17), 'int')
    # Applying the binary operator '==' (line 3516)
    result_eq_112264 = python_operator(stypy.reporting.localization.Localization(__file__, 3516, 7), '==', result_mod_112262, int_112263)
    
    # Testing the type of an if condition (line 3516)
    if_condition_112265 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3516, 4), result_eq_112264)
    # Assigning a type to the variable 'if_condition_112265' (line 3516)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3516, 4), 'if_condition_112265', if_condition_112265)
    # SSA begins for if statement (line 3516)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 3517):
    
    # Assigning a BinOp to a Name (line 3517):
    # Getting the type of 'sz' (line 3517)
    sz_112266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3517, 14), 'sz')
    int_112267 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3517, 20), 'int')
    # Applying the binary operator '//' (line 3517)
    result_floordiv_112268 = python_operator(stypy.reporting.localization.Localization(__file__, 3517, 14), '//', sz_112266, int_112267)
    
    # Assigning a type to the variable 'szh' (line 3517)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3517, 8), 'szh', result_floordiv_112268)
    
    # Assigning a List to a Name (line 3518):
    
    # Assigning a List to a Name (line 3518):
    
    # Obtaining an instance of the builtin type 'list' (line 3518)
    list_112269 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3518, 14), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3518)
    # Adding element type (line 3518)
    # Getting the type of 'szh' (line 3518)
    szh_112270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3518, 15), 'szh')
    int_112271 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3518, 21), 'int')
    # Applying the binary operator '-' (line 3518)
    result_sub_112272 = python_operator(stypy.reporting.localization.Localization(__file__, 3518, 15), '-', szh_112270, int_112271)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3518, 14), list_112269, result_sub_112272)
    # Adding element type (line 3518)
    # Getting the type of 'szh' (line 3518)
    szh_112273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3518, 24), 'szh')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3518, 14), list_112269, szh_112273)
    
    # Assigning a type to the variable 'kth' (line 3518)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3518, 8), 'kth', list_112269)
    # SSA branch for the else part of an if statement (line 3516)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a List to a Name (line 3520):
    
    # Assigning a List to a Name (line 3520):
    
    # Obtaining an instance of the builtin type 'list' (line 3520)
    list_112274 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3520, 14), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3520)
    # Adding element type (line 3520)
    # Getting the type of 'sz' (line 3520)
    sz_112275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3520, 16), 'sz')
    int_112276 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3520, 21), 'int')
    # Applying the binary operator '-' (line 3520)
    result_sub_112277 = python_operator(stypy.reporting.localization.Localization(__file__, 3520, 16), '-', sz_112275, int_112276)
    
    int_112278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3520, 27), 'int')
    # Applying the binary operator '//' (line 3520)
    result_floordiv_112279 = python_operator(stypy.reporting.localization.Localization(__file__, 3520, 15), '//', result_sub_112277, int_112278)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3520, 14), list_112274, result_floordiv_112279)
    
    # Assigning a type to the variable 'kth' (line 3520)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3520, 8), 'kth', list_112274)
    # SSA join for if statement (line 3516)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to issubdtype(...): (line 3522)
    # Processing the call arguments (line 3522)
    # Getting the type of 'a' (line 3522)
    a_112282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3522, 21), 'a', False)
    # Obtaining the member 'dtype' of a type (line 3522)
    dtype_112283 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3522, 21), a_112282, 'dtype')
    # Getting the type of 'np' (line 3522)
    np_112284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3522, 30), 'np', False)
    # Obtaining the member 'inexact' of a type (line 3522)
    inexact_112285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3522, 30), np_112284, 'inexact')
    # Processing the call keyword arguments (line 3522)
    kwargs_112286 = {}
    # Getting the type of 'np' (line 3522)
    np_112280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3522, 7), 'np', False)
    # Obtaining the member 'issubdtype' of a type (line 3522)
    issubdtype_112281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3522, 7), np_112280, 'issubdtype')
    # Calling issubdtype(args, kwargs) (line 3522)
    issubdtype_call_result_112287 = invoke(stypy.reporting.localization.Localization(__file__, 3522, 7), issubdtype_112281, *[dtype_112283, inexact_112285], **kwargs_112286)
    
    # Testing the type of an if condition (line 3522)
    if_condition_112288 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3522, 4), issubdtype_call_result_112287)
    # Assigning a type to the variable 'if_condition_112288' (line 3522)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3522, 4), 'if_condition_112288', if_condition_112288)
    # SSA begins for if statement (line 3522)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 3523)
    # Processing the call arguments (line 3523)
    int_112291 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3523, 19), 'int')
    # Processing the call keyword arguments (line 3523)
    kwargs_112292 = {}
    # Getting the type of 'kth' (line 3523)
    kth_112289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3523, 8), 'kth', False)
    # Obtaining the member 'append' of a type (line 3523)
    append_112290 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3523, 8), kth_112289, 'append')
    # Calling append(args, kwargs) (line 3523)
    append_call_result_112293 = invoke(stypy.reporting.localization.Localization(__file__, 3523, 8), append_112290, *[int_112291], **kwargs_112292)
    
    # SSA join for if statement (line 3522)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'overwrite_input' (line 3525)
    overwrite_input_112294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3525, 7), 'overwrite_input')
    # Testing the type of an if condition (line 3525)
    if_condition_112295 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3525, 4), overwrite_input_112294)
    # Assigning a type to the variable 'if_condition_112295' (line 3525)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3525, 4), 'if_condition_112295', if_condition_112295)
    # SSA begins for if statement (line 3525)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Type idiom detected: calculating its left and rigth part (line 3526)
    # Getting the type of 'axis' (line 3526)
    axis_112296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3526, 11), 'axis')
    # Getting the type of 'None' (line 3526)
    None_112297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3526, 19), 'None')
    
    (may_be_112298, more_types_in_union_112299) = may_be_none(axis_112296, None_112297)

    if may_be_112298:

        if more_types_in_union_112299:
            # Runtime conditional SSA (line 3526)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 3527):
        
        # Assigning a Call to a Name (line 3527):
        
        # Call to ravel(...): (line 3527)
        # Processing the call keyword arguments (line 3527)
        kwargs_112302 = {}
        # Getting the type of 'a' (line 3527)
        a_112300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3527, 19), 'a', False)
        # Obtaining the member 'ravel' of a type (line 3527)
        ravel_112301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3527, 19), a_112300, 'ravel')
        # Calling ravel(args, kwargs) (line 3527)
        ravel_call_result_112303 = invoke(stypy.reporting.localization.Localization(__file__, 3527, 19), ravel_112301, *[], **kwargs_112302)
        
        # Assigning a type to the variable 'part' (line 3527)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3527, 12), 'part', ravel_call_result_112303)
        
        # Call to partition(...): (line 3528)
        # Processing the call arguments (line 3528)
        # Getting the type of 'kth' (line 3528)
        kth_112306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3528, 27), 'kth', False)
        # Processing the call keyword arguments (line 3528)
        kwargs_112307 = {}
        # Getting the type of 'part' (line 3528)
        part_112304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3528, 12), 'part', False)
        # Obtaining the member 'partition' of a type (line 3528)
        partition_112305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3528, 12), part_112304, 'partition')
        # Calling partition(args, kwargs) (line 3528)
        partition_call_result_112308 = invoke(stypy.reporting.localization.Localization(__file__, 3528, 12), partition_112305, *[kth_112306], **kwargs_112307)
        

        if more_types_in_union_112299:
            # Runtime conditional SSA for else branch (line 3526)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_112298) or more_types_in_union_112299):
        
        # Call to partition(...): (line 3530)
        # Processing the call arguments (line 3530)
        # Getting the type of 'kth' (line 3530)
        kth_112311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3530, 24), 'kth', False)
        # Processing the call keyword arguments (line 3530)
        # Getting the type of 'axis' (line 3530)
        axis_112312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3530, 34), 'axis', False)
        keyword_112313 = axis_112312
        kwargs_112314 = {'axis': keyword_112313}
        # Getting the type of 'a' (line 3530)
        a_112309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3530, 12), 'a', False)
        # Obtaining the member 'partition' of a type (line 3530)
        partition_112310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3530, 12), a_112309, 'partition')
        # Calling partition(args, kwargs) (line 3530)
        partition_call_result_112315 = invoke(stypy.reporting.localization.Localization(__file__, 3530, 12), partition_112310, *[kth_112311], **kwargs_112314)
        
        
        # Assigning a Name to a Name (line 3531):
        
        # Assigning a Name to a Name (line 3531):
        # Getting the type of 'a' (line 3531)
        a_112316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3531, 19), 'a')
        # Assigning a type to the variable 'part' (line 3531)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3531, 12), 'part', a_112316)

        if (may_be_112298 and more_types_in_union_112299):
            # SSA join for if statement (line 3526)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA branch for the else part of an if statement (line 3525)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 3533):
    
    # Assigning a Call to a Name (line 3533):
    
    # Call to partition(...): (line 3533)
    # Processing the call arguments (line 3533)
    # Getting the type of 'a' (line 3533)
    a_112318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3533, 25), 'a', False)
    # Getting the type of 'kth' (line 3533)
    kth_112319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3533, 28), 'kth', False)
    # Processing the call keyword arguments (line 3533)
    # Getting the type of 'axis' (line 3533)
    axis_112320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3533, 38), 'axis', False)
    keyword_112321 = axis_112320
    kwargs_112322 = {'axis': keyword_112321}
    # Getting the type of 'partition' (line 3533)
    partition_112317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3533, 15), 'partition', False)
    # Calling partition(args, kwargs) (line 3533)
    partition_call_result_112323 = invoke(stypy.reporting.localization.Localization(__file__, 3533, 15), partition_112317, *[a_112318, kth_112319], **kwargs_112322)
    
    # Assigning a type to the variable 'part' (line 3533)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3533, 8), 'part', partition_call_result_112323)
    # SSA join for if statement (line 3525)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'part' (line 3535)
    part_112324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3535, 7), 'part')
    # Obtaining the member 'shape' of a type (line 3535)
    shape_112325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3535, 7), part_112324, 'shape')
    
    # Obtaining an instance of the builtin type 'tuple' (line 3535)
    tuple_112326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3535, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3535)
    
    # Applying the binary operator '==' (line 3535)
    result_eq_112327 = python_operator(stypy.reporting.localization.Localization(__file__, 3535, 7), '==', shape_112325, tuple_112326)
    
    # Testing the type of an if condition (line 3535)
    if_condition_112328 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3535, 4), result_eq_112327)
    # Assigning a type to the variable 'if_condition_112328' (line 3535)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3535, 4), 'if_condition_112328', if_condition_112328)
    # SSA begins for if statement (line 3535)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to item(...): (line 3537)
    # Processing the call keyword arguments (line 3537)
    kwargs_112331 = {}
    # Getting the type of 'part' (line 3537)
    part_112329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3537, 15), 'part', False)
    # Obtaining the member 'item' of a type (line 3537)
    item_112330 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3537, 15), part_112329, 'item')
    # Calling item(args, kwargs) (line 3537)
    item_call_result_112332 = invoke(stypy.reporting.localization.Localization(__file__, 3537, 15), item_112330, *[], **kwargs_112331)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3537)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3537, 8), 'stypy_return_type', item_call_result_112332)
    # SSA join for if statement (line 3535)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 3538)
    # Getting the type of 'axis' (line 3538)
    axis_112333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3538, 7), 'axis')
    # Getting the type of 'None' (line 3538)
    None_112334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3538, 15), 'None')
    
    (may_be_112335, more_types_in_union_112336) = may_be_none(axis_112333, None_112334)

    if may_be_112335:

        if more_types_in_union_112336:
            # Runtime conditional SSA (line 3538)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Num to a Name (line 3539):
        
        # Assigning a Num to a Name (line 3539):
        int_112337 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3539, 15), 'int')
        # Assigning a type to the variable 'axis' (line 3539)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3539, 8), 'axis', int_112337)

        if more_types_in_union_112336:
            # SSA join for if statement (line 3538)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a BinOp to a Name (line 3541):
    
    # Assigning a BinOp to a Name (line 3541):
    
    # Obtaining an instance of the builtin type 'list' (line 3541)
    list_112338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3541, 14), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3541)
    # Adding element type (line 3541)
    
    # Call to slice(...): (line 3541)
    # Processing the call arguments (line 3541)
    # Getting the type of 'None' (line 3541)
    None_112340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3541, 21), 'None', False)
    # Processing the call keyword arguments (line 3541)
    kwargs_112341 = {}
    # Getting the type of 'slice' (line 3541)
    slice_112339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3541, 15), 'slice', False)
    # Calling slice(args, kwargs) (line 3541)
    slice_call_result_112342 = invoke(stypy.reporting.localization.Localization(__file__, 3541, 15), slice_112339, *[None_112340], **kwargs_112341)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3541, 14), list_112338, slice_call_result_112342)
    
    # Getting the type of 'part' (line 3541)
    part_112343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3541, 30), 'part')
    # Obtaining the member 'ndim' of a type (line 3541)
    ndim_112344 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3541, 30), part_112343, 'ndim')
    # Applying the binary operator '*' (line 3541)
    result_mul_112345 = python_operator(stypy.reporting.localization.Localization(__file__, 3541, 14), '*', list_112338, ndim_112344)
    
    # Assigning a type to the variable 'indexer' (line 3541)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3541, 4), 'indexer', result_mul_112345)
    
    # Assigning a BinOp to a Name (line 3542):
    
    # Assigning a BinOp to a Name (line 3542):
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 3542)
    axis_112346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3542, 23), 'axis')
    # Getting the type of 'part' (line 3542)
    part_112347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3542, 12), 'part')
    # Obtaining the member 'shape' of a type (line 3542)
    shape_112348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3542, 12), part_112347, 'shape')
    # Obtaining the member '__getitem__' of a type (line 3542)
    getitem___112349 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3542, 12), shape_112348, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3542)
    subscript_call_result_112350 = invoke(stypy.reporting.localization.Localization(__file__, 3542, 12), getitem___112349, axis_112346)
    
    int_112351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3542, 32), 'int')
    # Applying the binary operator '//' (line 3542)
    result_floordiv_112352 = python_operator(stypy.reporting.localization.Localization(__file__, 3542, 12), '//', subscript_call_result_112350, int_112351)
    
    # Assigning a type to the variable 'index' (line 3542)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3542, 4), 'index', result_floordiv_112352)
    
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 3543)
    axis_112353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3543, 18), 'axis')
    # Getting the type of 'part' (line 3543)
    part_112354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3543, 7), 'part')
    # Obtaining the member 'shape' of a type (line 3543)
    shape_112355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3543, 7), part_112354, 'shape')
    # Obtaining the member '__getitem__' of a type (line 3543)
    getitem___112356 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3543, 7), shape_112355, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3543)
    subscript_call_result_112357 = invoke(stypy.reporting.localization.Localization(__file__, 3543, 7), getitem___112356, axis_112353)
    
    int_112358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3543, 26), 'int')
    # Applying the binary operator '%' (line 3543)
    result_mod_112359 = python_operator(stypy.reporting.localization.Localization(__file__, 3543, 7), '%', subscript_call_result_112357, int_112358)
    
    int_112360 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3543, 31), 'int')
    # Applying the binary operator '==' (line 3543)
    result_eq_112361 = python_operator(stypy.reporting.localization.Localization(__file__, 3543, 7), '==', result_mod_112359, int_112360)
    
    # Testing the type of an if condition (line 3543)
    if_condition_112362 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3543, 4), result_eq_112361)
    # Assigning a type to the variable 'if_condition_112362' (line 3543)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3543, 4), 'if_condition_112362', if_condition_112362)
    # SSA begins for if statement (line 3543)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Subscript (line 3545):
    
    # Assigning a Call to a Subscript (line 3545):
    
    # Call to slice(...): (line 3545)
    # Processing the call arguments (line 3545)
    # Getting the type of 'index' (line 3545)
    index_112364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3545, 30), 'index', False)
    # Getting the type of 'index' (line 3545)
    index_112365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3545, 37), 'index', False)
    int_112366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3545, 43), 'int')
    # Applying the binary operator '+' (line 3545)
    result_add_112367 = python_operator(stypy.reporting.localization.Localization(__file__, 3545, 37), '+', index_112365, int_112366)
    
    # Processing the call keyword arguments (line 3545)
    kwargs_112368 = {}
    # Getting the type of 'slice' (line 3545)
    slice_112363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3545, 24), 'slice', False)
    # Calling slice(args, kwargs) (line 3545)
    slice_call_result_112369 = invoke(stypy.reporting.localization.Localization(__file__, 3545, 24), slice_112363, *[index_112364, result_add_112367], **kwargs_112368)
    
    # Getting the type of 'indexer' (line 3545)
    indexer_112370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3545, 8), 'indexer')
    # Getting the type of 'axis' (line 3545)
    axis_112371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3545, 16), 'axis')
    # Storing an element on a container (line 3545)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3545, 8), indexer_112370, (axis_112371, slice_call_result_112369))
    # SSA branch for the else part of an if statement (line 3543)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Subscript (line 3547):
    
    # Assigning a Call to a Subscript (line 3547):
    
    # Call to slice(...): (line 3547)
    # Processing the call arguments (line 3547)
    # Getting the type of 'index' (line 3547)
    index_112373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3547, 30), 'index', False)
    int_112374 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3547, 36), 'int')
    # Applying the binary operator '-' (line 3547)
    result_sub_112375 = python_operator(stypy.reporting.localization.Localization(__file__, 3547, 30), '-', index_112373, int_112374)
    
    # Getting the type of 'index' (line 3547)
    index_112376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3547, 39), 'index', False)
    int_112377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3547, 45), 'int')
    # Applying the binary operator '+' (line 3547)
    result_add_112378 = python_operator(stypy.reporting.localization.Localization(__file__, 3547, 39), '+', index_112376, int_112377)
    
    # Processing the call keyword arguments (line 3547)
    kwargs_112379 = {}
    # Getting the type of 'slice' (line 3547)
    slice_112372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3547, 24), 'slice', False)
    # Calling slice(args, kwargs) (line 3547)
    slice_call_result_112380 = invoke(stypy.reporting.localization.Localization(__file__, 3547, 24), slice_112372, *[result_sub_112375, result_add_112378], **kwargs_112379)
    
    # Getting the type of 'indexer' (line 3547)
    indexer_112381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3547, 8), 'indexer')
    # Getting the type of 'axis' (line 3547)
    axis_112382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3547, 16), 'axis')
    # Storing an element on a container (line 3547)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3547, 8), indexer_112381, (axis_112382, slice_call_result_112380))
    # SSA join for if statement (line 3543)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Call to issubdtype(...): (line 3550)
    # Processing the call arguments (line 3550)
    # Getting the type of 'a' (line 3550)
    a_112385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3550, 21), 'a', False)
    # Obtaining the member 'dtype' of a type (line 3550)
    dtype_112386 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3550, 21), a_112385, 'dtype')
    # Getting the type of 'np' (line 3550)
    np_112387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3550, 30), 'np', False)
    # Obtaining the member 'inexact' of a type (line 3550)
    inexact_112388 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3550, 30), np_112387, 'inexact')
    # Processing the call keyword arguments (line 3550)
    kwargs_112389 = {}
    # Getting the type of 'np' (line 3550)
    np_112383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3550, 7), 'np', False)
    # Obtaining the member 'issubdtype' of a type (line 3550)
    issubdtype_112384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3550, 7), np_112383, 'issubdtype')
    # Calling issubdtype(args, kwargs) (line 3550)
    issubdtype_call_result_112390 = invoke(stypy.reporting.localization.Localization(__file__, 3550, 7), issubdtype_112384, *[dtype_112386, inexact_112388], **kwargs_112389)
    
    
    # Getting the type of 'sz' (line 3550)
    sz_112391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3550, 46), 'sz')
    int_112392 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3550, 51), 'int')
    # Applying the binary operator '>' (line 3550)
    result_gt_112393 = python_operator(stypy.reporting.localization.Localization(__file__, 3550, 46), '>', sz_112391, int_112392)
    
    # Applying the binary operator 'and' (line 3550)
    result_and_keyword_112394 = python_operator(stypy.reporting.localization.Localization(__file__, 3550, 7), 'and', issubdtype_call_result_112390, result_gt_112393)
    
    # Testing the type of an if condition (line 3550)
    if_condition_112395 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3550, 4), result_and_keyword_112394)
    # Assigning a type to the variable 'if_condition_112395' (line 3550)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3550, 4), 'if_condition_112395', if_condition_112395)
    # SSA begins for if statement (line 3550)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3552):
    
    # Assigning a Call to a Name (line 3552):
    
    # Call to mean(...): (line 3552)
    # Processing the call arguments (line 3552)
    
    # Obtaining the type of the subscript
    # Getting the type of 'indexer' (line 3552)
    indexer_112397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3552, 25), 'indexer', False)
    # Getting the type of 'part' (line 3552)
    part_112398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3552, 20), 'part', False)
    # Obtaining the member '__getitem__' of a type (line 3552)
    getitem___112399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3552, 20), part_112398, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3552)
    subscript_call_result_112400 = invoke(stypy.reporting.localization.Localization(__file__, 3552, 20), getitem___112399, indexer_112397)
    
    # Processing the call keyword arguments (line 3552)
    # Getting the type of 'axis' (line 3552)
    axis_112401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3552, 40), 'axis', False)
    keyword_112402 = axis_112401
    # Getting the type of 'out' (line 3552)
    out_112403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3552, 50), 'out', False)
    keyword_112404 = out_112403
    kwargs_112405 = {'out': keyword_112404, 'axis': keyword_112402}
    # Getting the type of 'mean' (line 3552)
    mean_112396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3552, 15), 'mean', False)
    # Calling mean(args, kwargs) (line 3552)
    mean_call_result_112406 = invoke(stypy.reporting.localization.Localization(__file__, 3552, 15), mean_112396, *[subscript_call_result_112400], **kwargs_112405)
    
    # Assigning a type to the variable 'rout' (line 3552)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3552, 8), 'rout', mean_call_result_112406)
    
    # Assigning a Call to a Name (line 3553):
    
    # Assigning a Call to a Name (line 3553):
    
    # Call to rollaxis(...): (line 3553)
    # Processing the call arguments (line 3553)
    # Getting the type of 'part' (line 3553)
    part_112409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3553, 27), 'part', False)
    # Getting the type of 'axis' (line 3553)
    axis_112410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3553, 33), 'axis', False)
    # Getting the type of 'part' (line 3553)
    part_112411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3553, 39), 'part', False)
    # Obtaining the member 'ndim' of a type (line 3553)
    ndim_112412 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3553, 39), part_112411, 'ndim')
    # Processing the call keyword arguments (line 3553)
    kwargs_112413 = {}
    # Getting the type of 'np' (line 3553)
    np_112407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3553, 15), 'np', False)
    # Obtaining the member 'rollaxis' of a type (line 3553)
    rollaxis_112408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3553, 15), np_112407, 'rollaxis')
    # Calling rollaxis(args, kwargs) (line 3553)
    rollaxis_call_result_112414 = invoke(stypy.reporting.localization.Localization(__file__, 3553, 15), rollaxis_112408, *[part_112409, axis_112410, ndim_112412], **kwargs_112413)
    
    # Assigning a type to the variable 'part' (line 3553)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3553, 8), 'part', rollaxis_call_result_112414)
    
    # Assigning a Call to a Name (line 3554):
    
    # Assigning a Call to a Name (line 3554):
    
    # Call to isnan(...): (line 3554)
    # Processing the call arguments (line 3554)
    
    # Obtaining the type of the subscript
    Ellipsis_112417 = Ellipsis
    int_112418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3554, 31), 'int')
    # Getting the type of 'part' (line 3554)
    part_112419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3554, 21), 'part', False)
    # Obtaining the member '__getitem__' of a type (line 3554)
    getitem___112420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3554, 21), part_112419, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3554)
    subscript_call_result_112421 = invoke(stypy.reporting.localization.Localization(__file__, 3554, 21), getitem___112420, (Ellipsis_112417, int_112418))
    
    # Processing the call keyword arguments (line 3554)
    kwargs_112422 = {}
    # Getting the type of 'np' (line 3554)
    np_112415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3554, 12), 'np', False)
    # Obtaining the member 'isnan' of a type (line 3554)
    isnan_112416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3554, 12), np_112415, 'isnan')
    # Calling isnan(args, kwargs) (line 3554)
    isnan_call_result_112423 = invoke(stypy.reporting.localization.Localization(__file__, 3554, 12), isnan_112416, *[subscript_call_result_112421], **kwargs_112422)
    
    # Assigning a type to the variable 'n' (line 3554)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3554, 8), 'n', isnan_call_result_112423)
    
    
    # Getting the type of 'rout' (line 3555)
    rout_112424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3555, 11), 'rout')
    # Obtaining the member 'ndim' of a type (line 3555)
    ndim_112425 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3555, 11), rout_112424, 'ndim')
    int_112426 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3555, 24), 'int')
    # Applying the binary operator '==' (line 3555)
    result_eq_112427 = python_operator(stypy.reporting.localization.Localization(__file__, 3555, 11), '==', ndim_112425, int_112426)
    
    # Testing the type of an if condition (line 3555)
    if_condition_112428 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3555, 8), result_eq_112427)
    # Assigning a type to the variable 'if_condition_112428' (line 3555)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3555, 8), 'if_condition_112428', if_condition_112428)
    # SSA begins for if statement (line 3555)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'n' (line 3556)
    n_112429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3556, 15), 'n')
    # Getting the type of 'True' (line 3556)
    True_112430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3556, 20), 'True')
    # Applying the binary operator '==' (line 3556)
    result_eq_112431 = python_operator(stypy.reporting.localization.Localization(__file__, 3556, 15), '==', n_112429, True_112430)
    
    # Testing the type of an if condition (line 3556)
    if_condition_112432 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3556, 12), result_eq_112431)
    # Assigning a type to the variable 'if_condition_112432' (line 3556)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3556, 12), 'if_condition_112432', if_condition_112432)
    # SSA begins for if statement (line 3556)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 3557)
    # Processing the call arguments (line 3557)
    str_112435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3557, 30), 'str', 'Invalid value encountered in median')
    # Getting the type of 'RuntimeWarning' (line 3558)
    RuntimeWarning_112436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3558, 30), 'RuntimeWarning', False)
    # Processing the call keyword arguments (line 3557)
    kwargs_112437 = {}
    # Getting the type of 'warnings' (line 3557)
    warnings_112433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3557, 16), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 3557)
    warn_112434 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3557, 16), warnings_112433, 'warn')
    # Calling warn(args, kwargs) (line 3557)
    warn_call_result_112438 = invoke(stypy.reporting.localization.Localization(__file__, 3557, 16), warn_112434, *[str_112435, RuntimeWarning_112436], **kwargs_112437)
    
    
    # Type idiom detected: calculating its left and rigth part (line 3559)
    # Getting the type of 'out' (line 3559)
    out_112439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3559, 16), 'out')
    # Getting the type of 'None' (line 3559)
    None_112440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3559, 30), 'None')
    
    (may_be_112441, more_types_in_union_112442) = may_not_be_none(out_112439, None_112440)

    if may_be_112441:

        if more_types_in_union_112442:
            # Runtime conditional SSA (line 3559)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Subscript (line 3560):
        
        # Assigning a Call to a Subscript (line 3560):
        
        # Call to type(...): (line 3560)
        # Processing the call arguments (line 3560)
        # Getting the type of 'np' (line 3560)
        np_112446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3560, 44), 'np', False)
        # Obtaining the member 'nan' of a type (line 3560)
        nan_112447 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3560, 44), np_112446, 'nan')
        # Processing the call keyword arguments (line 3560)
        kwargs_112448 = {}
        # Getting the type of 'a' (line 3560)
        a_112443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3560, 31), 'a', False)
        # Obtaining the member 'dtype' of a type (line 3560)
        dtype_112444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3560, 31), a_112443, 'dtype')
        # Obtaining the member 'type' of a type (line 3560)
        type_112445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3560, 31), dtype_112444, 'type')
        # Calling type(args, kwargs) (line 3560)
        type_call_result_112449 = invoke(stypy.reporting.localization.Localization(__file__, 3560, 31), type_112445, *[nan_112447], **kwargs_112448)
        
        # Getting the type of 'out' (line 3560)
        out_112450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3560, 20), 'out')
        Ellipsis_112451 = Ellipsis
        # Storing an element on a container (line 3560)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3560, 20), out_112450, (Ellipsis_112451, type_call_result_112449))
        
        # Assigning a Name to a Name (line 3561):
        
        # Assigning a Name to a Name (line 3561):
        # Getting the type of 'out' (line 3561)
        out_112452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3561, 27), 'out')
        # Assigning a type to the variable 'rout' (line 3561)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3561, 20), 'rout', out_112452)

        if more_types_in_union_112442:
            # Runtime conditional SSA for else branch (line 3559)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_112441) or more_types_in_union_112442):
        
        # Assigning a Call to a Name (line 3563):
        
        # Assigning a Call to a Name (line 3563):
        
        # Call to type(...): (line 3563)
        # Processing the call arguments (line 3563)
        # Getting the type of 'np' (line 3563)
        np_112456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3563, 40), 'np', False)
        # Obtaining the member 'nan' of a type (line 3563)
        nan_112457 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3563, 40), np_112456, 'nan')
        # Processing the call keyword arguments (line 3563)
        kwargs_112458 = {}
        # Getting the type of 'a' (line 3563)
        a_112453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3563, 27), 'a', False)
        # Obtaining the member 'dtype' of a type (line 3563)
        dtype_112454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3563, 27), a_112453, 'dtype')
        # Obtaining the member 'type' of a type (line 3563)
        type_112455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3563, 27), dtype_112454, 'type')
        # Calling type(args, kwargs) (line 3563)
        type_call_result_112459 = invoke(stypy.reporting.localization.Localization(__file__, 3563, 27), type_112455, *[nan_112457], **kwargs_112458)
        
        # Assigning a type to the variable 'rout' (line 3563)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3563, 20), 'rout', type_call_result_112459)

        if (may_be_112441 and more_types_in_union_112442):
            # SSA join for if statement (line 3559)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA join for if statement (line 3556)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 3555)
    module_type_store.open_ssa_branch('else')
    
    
    
    # Call to count_nonzero(...): (line 3564)
    # Processing the call arguments (line 3564)
    
    # Call to ravel(...): (line 3564)
    # Processing the call keyword arguments (line 3564)
    kwargs_112464 = {}
    # Getting the type of 'n' (line 3564)
    n_112462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3564, 30), 'n', False)
    # Obtaining the member 'ravel' of a type (line 3564)
    ravel_112463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3564, 30), n_112462, 'ravel')
    # Calling ravel(args, kwargs) (line 3564)
    ravel_call_result_112465 = invoke(stypy.reporting.localization.Localization(__file__, 3564, 30), ravel_112463, *[], **kwargs_112464)
    
    # Processing the call keyword arguments (line 3564)
    kwargs_112466 = {}
    # Getting the type of 'np' (line 3564)
    np_112460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3564, 13), 'np', False)
    # Obtaining the member 'count_nonzero' of a type (line 3564)
    count_nonzero_112461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3564, 13), np_112460, 'count_nonzero')
    # Calling count_nonzero(args, kwargs) (line 3564)
    count_nonzero_call_result_112467 = invoke(stypy.reporting.localization.Localization(__file__, 3564, 13), count_nonzero_112461, *[ravel_call_result_112465], **kwargs_112466)
    
    int_112468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3564, 43), 'int')
    # Applying the binary operator '>' (line 3564)
    result_gt_112469 = python_operator(stypy.reporting.localization.Localization(__file__, 3564, 13), '>', count_nonzero_call_result_112467, int_112468)
    
    # Testing the type of an if condition (line 3564)
    if_condition_112470 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3564, 13), result_gt_112469)
    # Assigning a type to the variable 'if_condition_112470' (line 3564)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3564, 13), 'if_condition_112470', if_condition_112470)
    # SSA begins for if statement (line 3564)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 3565)
    # Processing the call arguments (line 3565)
    str_112473 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3565, 26), 'str', 'Invalid value encountered in median for')
    str_112474 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3566, 26), 'str', ' %d results')
    
    # Call to count_nonzero(...): (line 3566)
    # Processing the call arguments (line 3566)
    
    # Call to ravel(...): (line 3566)
    # Processing the call keyword arguments (line 3566)
    kwargs_112479 = {}
    # Getting the type of 'n' (line 3566)
    n_112477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3566, 59), 'n', False)
    # Obtaining the member 'ravel' of a type (line 3566)
    ravel_112478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3566, 59), n_112477, 'ravel')
    # Calling ravel(args, kwargs) (line 3566)
    ravel_call_result_112480 = invoke(stypy.reporting.localization.Localization(__file__, 3566, 59), ravel_112478, *[], **kwargs_112479)
    
    # Processing the call keyword arguments (line 3566)
    kwargs_112481 = {}
    # Getting the type of 'np' (line 3566)
    np_112475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3566, 42), 'np', False)
    # Obtaining the member 'count_nonzero' of a type (line 3566)
    count_nonzero_112476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3566, 42), np_112475, 'count_nonzero')
    # Calling count_nonzero(args, kwargs) (line 3566)
    count_nonzero_call_result_112482 = invoke(stypy.reporting.localization.Localization(__file__, 3566, 42), count_nonzero_112476, *[ravel_call_result_112480], **kwargs_112481)
    
    # Applying the binary operator '%' (line 3566)
    result_mod_112483 = python_operator(stypy.reporting.localization.Localization(__file__, 3566, 26), '%', str_112474, count_nonzero_call_result_112482)
    
    # Applying the binary operator '+' (line 3565)
    result_add_112484 = python_operator(stypy.reporting.localization.Localization(__file__, 3565, 26), '+', str_112473, result_mod_112483)
    
    # Getting the type of 'RuntimeWarning' (line 3567)
    RuntimeWarning_112485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3567, 26), 'RuntimeWarning', False)
    # Processing the call keyword arguments (line 3565)
    kwargs_112486 = {}
    # Getting the type of 'warnings' (line 3565)
    warnings_112471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3565, 12), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 3565)
    warn_112472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3565, 12), warnings_112471, 'warn')
    # Calling warn(args, kwargs) (line 3565)
    warn_call_result_112487 = invoke(stypy.reporting.localization.Localization(__file__, 3565, 12), warn_112472, *[result_add_112484, RuntimeWarning_112485], **kwargs_112486)
    
    
    # Assigning a Attribute to a Subscript (line 3568):
    
    # Assigning a Attribute to a Subscript (line 3568):
    # Getting the type of 'np' (line 3568)
    np_112488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3568, 22), 'np')
    # Obtaining the member 'nan' of a type (line 3568)
    nan_112489 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3568, 22), np_112488, 'nan')
    # Getting the type of 'rout' (line 3568)
    rout_112490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3568, 12), 'rout')
    # Getting the type of 'n' (line 3568)
    n_112491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3568, 17), 'n')
    # Storing an element on a container (line 3568)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3568, 12), rout_112490, (n_112491, nan_112489))
    # SSA join for if statement (line 3564)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3555)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'rout' (line 3569)
    rout_112492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3569, 15), 'rout')
    # Assigning a type to the variable 'stypy_return_type' (line 3569)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3569, 8), 'stypy_return_type', rout_112492)
    # SSA branch for the else part of an if statement (line 3550)
    module_type_store.open_ssa_branch('else')
    
    # Call to mean(...): (line 3574)
    # Processing the call arguments (line 3574)
    
    # Obtaining the type of the subscript
    # Getting the type of 'indexer' (line 3574)
    indexer_112494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3574, 25), 'indexer', False)
    # Getting the type of 'part' (line 3574)
    part_112495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3574, 20), 'part', False)
    # Obtaining the member '__getitem__' of a type (line 3574)
    getitem___112496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3574, 20), part_112495, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3574)
    subscript_call_result_112497 = invoke(stypy.reporting.localization.Localization(__file__, 3574, 20), getitem___112496, indexer_112494)
    
    # Processing the call keyword arguments (line 3574)
    # Getting the type of 'axis' (line 3574)
    axis_112498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3574, 40), 'axis', False)
    keyword_112499 = axis_112498
    # Getting the type of 'out' (line 3574)
    out_112500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3574, 50), 'out', False)
    keyword_112501 = out_112500
    kwargs_112502 = {'out': keyword_112501, 'axis': keyword_112499}
    # Getting the type of 'mean' (line 3574)
    mean_112493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3574, 15), 'mean', False)
    # Calling mean(args, kwargs) (line 3574)
    mean_call_result_112503 = invoke(stypy.reporting.localization.Localization(__file__, 3574, 15), mean_112493, *[subscript_call_result_112497], **kwargs_112502)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3574)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3574, 8), 'stypy_return_type', mean_call_result_112503)
    # SSA join for if statement (line 3550)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_median(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_median' in the type store
    # Getting the type of 'stypy_return_type' (line 3506)
    stypy_return_type_112504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3506, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_112504)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_median'
    return stypy_return_type_112504

# Assigning a type to the variable '_median' (line 3506)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3506, 0), '_median', _median)

@norecursion
def percentile(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 3577)
    None_112505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3577, 26), 'None')
    # Getting the type of 'None' (line 3577)
    None_112506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3577, 36), 'None')
    # Getting the type of 'False' (line 3578)
    False_112507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3578, 31), 'False')
    str_112508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3578, 52), 'str', 'linear')
    # Getting the type of 'False' (line 3578)
    False_112509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3578, 71), 'False')
    defaults = [None_112505, None_112506, False_112507, str_112508, False_112509]
    # Create a new context for function 'percentile'
    module_type_store = module_type_store.open_function_context('percentile', 3577, 0, False)
    
    # Passed parameters checking function
    percentile.stypy_localization = localization
    percentile.stypy_type_of_self = None
    percentile.stypy_type_store = module_type_store
    percentile.stypy_function_name = 'percentile'
    percentile.stypy_param_names_list = ['a', 'q', 'axis', 'out', 'overwrite_input', 'interpolation', 'keepdims']
    percentile.stypy_varargs_param_name = None
    percentile.stypy_kwargs_param_name = None
    percentile.stypy_call_defaults = defaults
    percentile.stypy_call_varargs = varargs
    percentile.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'percentile', ['a', 'q', 'axis', 'out', 'overwrite_input', 'interpolation', 'keepdims'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'percentile', localization, ['a', 'q', 'axis', 'out', 'overwrite_input', 'interpolation', 'keepdims'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'percentile(...)' code ##################

    str_112510 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3684, (-1)), 'str', "\n    Compute the qth percentile of the data along the specified axis.\n\n    Returns the qth percentile(s) of the array elements.\n\n    Parameters\n    ----------\n    a : array_like\n        Input array or object that can be converted to an array.\n    q : float in range of [0,100] (or sequence of floats)\n        Percentile to compute, which must be between 0 and 100 inclusive.\n    axis : {int, sequence of int, None}, optional\n        Axis or axes along which the percentiles are computed. The\n        default is to compute the percentile(s) along a flattened\n        version of the array. A sequence of axes is supported since\n        version 1.9.0.\n    out : ndarray, optional\n        Alternative output array in which to place the result. It must\n        have the same shape and buffer length as the expected output,\n        but the type (of the output) will be cast if necessary.\n    overwrite_input : bool, optional\n        If True, then allow use of memory of input array `a` \n        calculations. The input array will be modified by the call to\n        `percentile`. This will save memory when you do not need to\n        preserve the contents of the input array. In this case you\n        should not make any assumptions about the contents of the input\n        `a` after this function completes -- treat it as undefined.\n        Default is False. If `a` is not already an array, this parameter\n        will have no effect as `a` will be converted to an array\n        internally regardless of the value of this parameter.\n    interpolation : {'linear', 'lower', 'higher', 'midpoint', 'nearest'}\n        This optional parameter specifies the interpolation method to\n        use when the desired quantile lies between two data points\n        ``i < j``:\n            * linear: ``i + (j - i) * fraction``, where ``fraction``\n              is the fractional part of the index surrounded by ``i``\n              and ``j``.\n            * lower: ``i``.\n            * higher: ``j``.\n            * nearest: ``i`` or ``j``, whichever is nearest.\n            * midpoint: ``(i + j) / 2``.\n\n        .. versionadded:: 1.9.0\n    keepdims : bool, optional\n        If this is set to True, the axes which are reduced are left in\n        the result as dimensions with size one. With this option, the\n        result will broadcast correctly against the original array `a`.\n\n        .. versionadded:: 1.9.0\n\n    Returns\n    -------\n    percentile : scalar or ndarray\n        If `q` is a single percentile and `axis=None`, then the result\n        is a scalar. If multiple percentiles are given, first axis of\n        the result corresponds to the percentiles. The other axes are\n        the axes that remain after the reduction of `a`. If the input \n        contains integers or floats smaller than ``float64``, the output\n        data-type is ``float64``. Otherwise, the output data-type is the\n        same as that of the input. If `out` is specified, that array is\n        returned instead.\n\n    See Also\n    --------\n    mean, median, nanpercentile\n\n    Notes\n    -----\n    Given a vector ``V`` of length ``N``, the ``q``-th percentile of\n    ``V`` is the value ``q/100`` of the way from the mimumum to the\n    maximum in in a sorted copy of ``V``. The values and distances of\n    the two nearest neighbors as well as the `interpolation` parameter\n    will determine the percentile if the normalized ranking does not\n    match the location of ``q`` exactly. This function is the same as\n    the median if ``q=50``, the same as the minimum if ``q=0`` and the\n    same as the maximum if ``q=100``.\n\n    Examples\n    --------\n    >>> a = np.array([[10, 7, 4], [3, 2, 1]])\n    >>> a\n    array([[10,  7,  4],\n           [ 3,  2,  1]])\n    >>> np.percentile(a, 50)\n    3.5\n    >>> np.percentile(a, 50, axis=0)\n    array([[ 6.5,  4.5,  2.5]])\n    >>> np.percentile(a, 50, axis=1)\n    array([ 7.,  2.])\n    >>> np.percentile(a, 50, axis=1, keepdims=True)\n    array([[ 7.],\n           [ 2.]])\n\n    >>> m = np.percentile(a, 50, axis=0)\n    >>> out = np.zeros_like(m)\n    >>> np.percentile(a, 50, axis=0, out=out)\n    array([[ 6.5,  4.5,  2.5]])\n    >>> m\n    array([[ 6.5,  4.5,  2.5]])\n\n    >>> b = a.copy()\n    >>> np.percentile(b, 50, axis=1, overwrite_input=True)\n    array([ 7.,  2.])\n    >>> assert not np.all(a == b)\n\n    ")
    
    # Assigning a Call to a Name (line 3685):
    
    # Assigning a Call to a Name (line 3685):
    
    # Call to array(...): (line 3685)
    # Processing the call arguments (line 3685)
    # Getting the type of 'q' (line 3685)
    q_112512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3685, 14), 'q', False)
    # Processing the call keyword arguments (line 3685)
    # Getting the type of 'np' (line 3685)
    np_112513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3685, 23), 'np', False)
    # Obtaining the member 'float64' of a type (line 3685)
    float64_112514 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3685, 23), np_112513, 'float64')
    keyword_112515 = float64_112514
    # Getting the type of 'True' (line 3685)
    True_112516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3685, 40), 'True', False)
    keyword_112517 = True_112516
    kwargs_112518 = {'dtype': keyword_112515, 'copy': keyword_112517}
    # Getting the type of 'array' (line 3685)
    array_112511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3685, 8), 'array', False)
    # Calling array(args, kwargs) (line 3685)
    array_call_result_112519 = invoke(stypy.reporting.localization.Localization(__file__, 3685, 8), array_112511, *[q_112512], **kwargs_112518)
    
    # Assigning a type to the variable 'q' (line 3685)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3685, 4), 'q', array_call_result_112519)
    
    # Assigning a Call to a Tuple (line 3686):
    
    # Assigning a Call to a Name:
    
    # Call to _ureduce(...): (line 3686)
    # Processing the call arguments (line 3686)
    # Getting the type of 'a' (line 3686)
    a_112521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3686, 20), 'a', False)
    # Processing the call keyword arguments (line 3686)
    # Getting the type of '_percentile' (line 3686)
    _percentile_112522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3686, 28), '_percentile', False)
    keyword_112523 = _percentile_112522
    # Getting the type of 'q' (line 3686)
    q_112524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3686, 43), 'q', False)
    keyword_112525 = q_112524
    # Getting the type of 'axis' (line 3686)
    axis_112526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3686, 51), 'axis', False)
    keyword_112527 = axis_112526
    # Getting the type of 'out' (line 3686)
    out_112528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3686, 61), 'out', False)
    keyword_112529 = out_112528
    # Getting the type of 'overwrite_input' (line 3687)
    overwrite_input_112530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3687, 36), 'overwrite_input', False)
    keyword_112531 = overwrite_input_112530
    # Getting the type of 'interpolation' (line 3688)
    interpolation_112532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3688, 34), 'interpolation', False)
    keyword_112533 = interpolation_112532
    kwargs_112534 = {'q': keyword_112525, 'axis': keyword_112527, 'func': keyword_112523, 'overwrite_input': keyword_112531, 'interpolation': keyword_112533, 'out': keyword_112529}
    # Getting the type of '_ureduce' (line 3686)
    _ureduce_112520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3686, 11), '_ureduce', False)
    # Calling _ureduce(args, kwargs) (line 3686)
    _ureduce_call_result_112535 = invoke(stypy.reporting.localization.Localization(__file__, 3686, 11), _ureduce_112520, *[a_112521], **kwargs_112534)
    
    # Assigning a type to the variable 'call_assignment_107431' (line 3686)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3686, 4), 'call_assignment_107431', _ureduce_call_result_112535)
    
    # Assigning a Call to a Name (line 3686):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_112538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3686, 4), 'int')
    # Processing the call keyword arguments
    kwargs_112539 = {}
    # Getting the type of 'call_assignment_107431' (line 3686)
    call_assignment_107431_112536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3686, 4), 'call_assignment_107431', False)
    # Obtaining the member '__getitem__' of a type (line 3686)
    getitem___112537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3686, 4), call_assignment_107431_112536, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_112540 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___112537, *[int_112538], **kwargs_112539)
    
    # Assigning a type to the variable 'call_assignment_107432' (line 3686)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3686, 4), 'call_assignment_107432', getitem___call_result_112540)
    
    # Assigning a Name to a Name (line 3686):
    # Getting the type of 'call_assignment_107432' (line 3686)
    call_assignment_107432_112541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3686, 4), 'call_assignment_107432')
    # Assigning a type to the variable 'r' (line 3686)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3686, 4), 'r', call_assignment_107432_112541)
    
    # Assigning a Call to a Name (line 3686):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_112544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3686, 4), 'int')
    # Processing the call keyword arguments
    kwargs_112545 = {}
    # Getting the type of 'call_assignment_107431' (line 3686)
    call_assignment_107431_112542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3686, 4), 'call_assignment_107431', False)
    # Obtaining the member '__getitem__' of a type (line 3686)
    getitem___112543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3686, 4), call_assignment_107431_112542, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_112546 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___112543, *[int_112544], **kwargs_112545)
    
    # Assigning a type to the variable 'call_assignment_107433' (line 3686)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3686, 4), 'call_assignment_107433', getitem___call_result_112546)
    
    # Assigning a Name to a Name (line 3686):
    # Getting the type of 'call_assignment_107433' (line 3686)
    call_assignment_107433_112547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3686, 4), 'call_assignment_107433')
    # Assigning a type to the variable 'k' (line 3686)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3686, 7), 'k', call_assignment_107433_112547)
    
    # Getting the type of 'keepdims' (line 3689)
    keepdims_112548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3689, 7), 'keepdims')
    # Testing the type of an if condition (line 3689)
    if_condition_112549 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3689, 4), keepdims_112548)
    # Assigning a type to the variable 'if_condition_112549' (line 3689)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3689, 4), 'if_condition_112549', if_condition_112549)
    # SSA begins for if statement (line 3689)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'q' (line 3690)
    q_112550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3690, 11), 'q')
    # Obtaining the member 'ndim' of a type (line 3690)
    ndim_112551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3690, 11), q_112550, 'ndim')
    int_112552 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3690, 21), 'int')
    # Applying the binary operator '==' (line 3690)
    result_eq_112553 = python_operator(stypy.reporting.localization.Localization(__file__, 3690, 11), '==', ndim_112551, int_112552)
    
    # Testing the type of an if condition (line 3690)
    if_condition_112554 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3690, 8), result_eq_112553)
    # Assigning a type to the variable 'if_condition_112554' (line 3690)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3690, 8), 'if_condition_112554', if_condition_112554)
    # SSA begins for if statement (line 3690)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to reshape(...): (line 3691)
    # Processing the call arguments (line 3691)
    # Getting the type of 'k' (line 3691)
    k_112557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3691, 29), 'k', False)
    # Processing the call keyword arguments (line 3691)
    kwargs_112558 = {}
    # Getting the type of 'r' (line 3691)
    r_112555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3691, 19), 'r', False)
    # Obtaining the member 'reshape' of a type (line 3691)
    reshape_112556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3691, 19), r_112555, 'reshape')
    # Calling reshape(args, kwargs) (line 3691)
    reshape_call_result_112559 = invoke(stypy.reporting.localization.Localization(__file__, 3691, 19), reshape_112556, *[k_112557], **kwargs_112558)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3691)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3691, 12), 'stypy_return_type', reshape_call_result_112559)
    # SSA branch for the else part of an if statement (line 3690)
    module_type_store.open_ssa_branch('else')
    
    # Call to reshape(...): (line 3693)
    # Processing the call arguments (line 3693)
    
    # Obtaining an instance of the builtin type 'list' (line 3693)
    list_112562 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3693, 29), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3693)
    # Adding element type (line 3693)
    
    # Call to len(...): (line 3693)
    # Processing the call arguments (line 3693)
    # Getting the type of 'q' (line 3693)
    q_112564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3693, 34), 'q', False)
    # Processing the call keyword arguments (line 3693)
    kwargs_112565 = {}
    # Getting the type of 'len' (line 3693)
    len_112563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3693, 30), 'len', False)
    # Calling len(args, kwargs) (line 3693)
    len_call_result_112566 = invoke(stypy.reporting.localization.Localization(__file__, 3693, 30), len_112563, *[q_112564], **kwargs_112565)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3693, 29), list_112562, len_call_result_112566)
    
    # Getting the type of 'k' (line 3693)
    k_112567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3693, 40), 'k', False)
    # Applying the binary operator '+' (line 3693)
    result_add_112568 = python_operator(stypy.reporting.localization.Localization(__file__, 3693, 29), '+', list_112562, k_112567)
    
    # Processing the call keyword arguments (line 3693)
    kwargs_112569 = {}
    # Getting the type of 'r' (line 3693)
    r_112560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3693, 19), 'r', False)
    # Obtaining the member 'reshape' of a type (line 3693)
    reshape_112561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3693, 19), r_112560, 'reshape')
    # Calling reshape(args, kwargs) (line 3693)
    reshape_call_result_112570 = invoke(stypy.reporting.localization.Localization(__file__, 3693, 19), reshape_112561, *[result_add_112568], **kwargs_112569)
    
    # Assigning a type to the variable 'stypy_return_type' (line 3693)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3693, 12), 'stypy_return_type', reshape_call_result_112570)
    # SSA join for if statement (line 3690)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 3689)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'r' (line 3695)
    r_112571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3695, 15), 'r')
    # Assigning a type to the variable 'stypy_return_type' (line 3695)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3695, 8), 'stypy_return_type', r_112571)
    # SSA join for if statement (line 3689)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'percentile(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'percentile' in the type store
    # Getting the type of 'stypy_return_type' (line 3577)
    stypy_return_type_112572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3577, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_112572)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'percentile'
    return stypy_return_type_112572

# Assigning a type to the variable 'percentile' (line 3577)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3577, 0), 'percentile', percentile)

@norecursion
def _percentile(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 3698)
    None_112573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3698, 27), 'None')
    # Getting the type of 'None' (line 3698)
    None_112574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3698, 37), 'None')
    # Getting the type of 'False' (line 3699)
    False_112575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3699, 32), 'False')
    str_112576 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3699, 53), 'str', 'linear')
    # Getting the type of 'False' (line 3699)
    False_112577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3699, 72), 'False')
    defaults = [None_112573, None_112574, False_112575, str_112576, False_112577]
    # Create a new context for function '_percentile'
    module_type_store = module_type_store.open_function_context('_percentile', 3698, 0, False)
    
    # Passed parameters checking function
    _percentile.stypy_localization = localization
    _percentile.stypy_type_of_self = None
    _percentile.stypy_type_store = module_type_store
    _percentile.stypy_function_name = '_percentile'
    _percentile.stypy_param_names_list = ['a', 'q', 'axis', 'out', 'overwrite_input', 'interpolation', 'keepdims']
    _percentile.stypy_varargs_param_name = None
    _percentile.stypy_kwargs_param_name = None
    _percentile.stypy_call_defaults = defaults
    _percentile.stypy_call_varargs = varargs
    _percentile.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_percentile', ['a', 'q', 'axis', 'out', 'overwrite_input', 'interpolation', 'keepdims'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_percentile', localization, ['a', 'q', 'axis', 'out', 'overwrite_input', 'interpolation', 'keepdims'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_percentile(...)' code ##################

    
    # Assigning a Call to a Name (line 3700):
    
    # Assigning a Call to a Name (line 3700):
    
    # Call to asarray(...): (line 3700)
    # Processing the call arguments (line 3700)
    # Getting the type of 'a' (line 3700)
    a_112579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3700, 16), 'a', False)
    # Processing the call keyword arguments (line 3700)
    kwargs_112580 = {}
    # Getting the type of 'asarray' (line 3700)
    asarray_112578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3700, 8), 'asarray', False)
    # Calling asarray(args, kwargs) (line 3700)
    asarray_call_result_112581 = invoke(stypy.reporting.localization.Localization(__file__, 3700, 8), asarray_112578, *[a_112579], **kwargs_112580)
    
    # Assigning a type to the variable 'a' (line 3700)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3700, 4), 'a', asarray_call_result_112581)
    
    
    # Getting the type of 'q' (line 3701)
    q_112582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3701, 7), 'q')
    # Obtaining the member 'ndim' of a type (line 3701)
    ndim_112583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3701, 7), q_112582, 'ndim')
    int_112584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3701, 17), 'int')
    # Applying the binary operator '==' (line 3701)
    result_eq_112585 = python_operator(stypy.reporting.localization.Localization(__file__, 3701, 7), '==', ndim_112583, int_112584)
    
    # Testing the type of an if condition (line 3701)
    if_condition_112586 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3701, 4), result_eq_112585)
    # Assigning a type to the variable 'if_condition_112586' (line 3701)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3701, 4), 'if_condition_112586', if_condition_112586)
    # SSA begins for if statement (line 3701)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 3703):
    
    # Assigning a Name to a Name (line 3703):
    # Getting the type of 'True' (line 3703)
    True_112587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3703, 16), 'True')
    # Assigning a type to the variable 'zerod' (line 3703)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3703, 8), 'zerod', True_112587)
    
    # Assigning a Subscript to a Name (line 3704):
    
    # Assigning a Subscript to a Name (line 3704):
    
    # Obtaining the type of the subscript
    # Getting the type of 'None' (line 3704)
    None_112588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3704, 14), 'None')
    # Getting the type of 'q' (line 3704)
    q_112589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3704, 12), 'q')
    # Obtaining the member '__getitem__' of a type (line 3704)
    getitem___112590 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3704, 12), q_112589, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3704)
    subscript_call_result_112591 = invoke(stypy.reporting.localization.Localization(__file__, 3704, 12), getitem___112590, None_112588)
    
    # Assigning a type to the variable 'q' (line 3704)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3704, 8), 'q', subscript_call_result_112591)
    # SSA branch for the else part of an if statement (line 3701)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 3706):
    
    # Assigning a Name to a Name (line 3706):
    # Getting the type of 'False' (line 3706)
    False_112592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3706, 16), 'False')
    # Assigning a type to the variable 'zerod' (line 3706)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3706, 8), 'zerod', False_112592)
    # SSA join for if statement (line 3701)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'q' (line 3709)
    q_112593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3709, 7), 'q')
    # Obtaining the member 'size' of a type (line 3709)
    size_112594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3709, 7), q_112593, 'size')
    int_112595 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3709, 16), 'int')
    # Applying the binary operator '<' (line 3709)
    result_lt_112596 = python_operator(stypy.reporting.localization.Localization(__file__, 3709, 7), '<', size_112594, int_112595)
    
    # Testing the type of an if condition (line 3709)
    if_condition_112597 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3709, 4), result_lt_112596)
    # Assigning a type to the variable 'if_condition_112597' (line 3709)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3709, 4), 'if_condition_112597', if_condition_112597)
    # SSA begins for if statement (line 3709)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Call to range(...): (line 3710)
    # Processing the call arguments (line 3710)
    # Getting the type of 'q' (line 3710)
    q_112599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3710, 23), 'q', False)
    # Obtaining the member 'size' of a type (line 3710)
    size_112600 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3710, 23), q_112599, 'size')
    # Processing the call keyword arguments (line 3710)
    kwargs_112601 = {}
    # Getting the type of 'range' (line 3710)
    range_112598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3710, 17), 'range', False)
    # Calling range(args, kwargs) (line 3710)
    range_call_result_112602 = invoke(stypy.reporting.localization.Localization(__file__, 3710, 17), range_112598, *[size_112600], **kwargs_112601)
    
    # Testing the type of a for loop iterable (line 3710)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3710, 8), range_call_result_112602)
    # Getting the type of the for loop variable (line 3710)
    for_loop_var_112603 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3710, 8), range_call_result_112602)
    # Assigning a type to the variable 'i' (line 3710)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3710, 8), 'i', for_loop_var_112603)
    # SSA begins for a for statement (line 3710)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Evaluating a boolean operation
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 3711)
    i_112604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3711, 17), 'i')
    # Getting the type of 'q' (line 3711)
    q_112605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3711, 15), 'q')
    # Obtaining the member '__getitem__' of a type (line 3711)
    getitem___112606 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3711, 15), q_112605, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3711)
    subscript_call_result_112607 = invoke(stypy.reporting.localization.Localization(__file__, 3711, 15), getitem___112606, i_112604)
    
    float_112608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3711, 22), 'float')
    # Applying the binary operator '<' (line 3711)
    result_lt_112609 = python_operator(stypy.reporting.localization.Localization(__file__, 3711, 15), '<', subscript_call_result_112607, float_112608)
    
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 3711)
    i_112610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3711, 30), 'i')
    # Getting the type of 'q' (line 3711)
    q_112611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3711, 28), 'q')
    # Obtaining the member '__getitem__' of a type (line 3711)
    getitem___112612 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3711, 28), q_112611, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3711)
    subscript_call_result_112613 = invoke(stypy.reporting.localization.Localization(__file__, 3711, 28), getitem___112612, i_112610)
    
    float_112614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3711, 35), 'float')
    # Applying the binary operator '>' (line 3711)
    result_gt_112615 = python_operator(stypy.reporting.localization.Localization(__file__, 3711, 28), '>', subscript_call_result_112613, float_112614)
    
    # Applying the binary operator 'or' (line 3711)
    result_or_keyword_112616 = python_operator(stypy.reporting.localization.Localization(__file__, 3711, 15), 'or', result_lt_112609, result_gt_112615)
    
    # Testing the type of an if condition (line 3711)
    if_condition_112617 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3711, 12), result_or_keyword_112616)
    # Assigning a type to the variable 'if_condition_112617' (line 3711)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3711, 12), 'if_condition_112617', if_condition_112617)
    # SSA begins for if statement (line 3711)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 3712)
    # Processing the call arguments (line 3712)
    str_112619 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3712, 33), 'str', 'Percentiles must be in the range [0,100]')
    # Processing the call keyword arguments (line 3712)
    kwargs_112620 = {}
    # Getting the type of 'ValueError' (line 3712)
    ValueError_112618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3712, 22), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 3712)
    ValueError_call_result_112621 = invoke(stypy.reporting.localization.Localization(__file__, 3712, 22), ValueError_112618, *[str_112619], **kwargs_112620)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3712, 16), ValueError_call_result_112621, 'raise parameter', BaseException)
    # SSA join for if statement (line 3711)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'q' (line 3713)
    q_112622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3713, 12), 'q')
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 3713)
    i_112623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3713, 14), 'i')
    # Getting the type of 'q' (line 3713)
    q_112624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3713, 12), 'q')
    # Obtaining the member '__getitem__' of a type (line 3713)
    getitem___112625 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3713, 12), q_112624, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3713)
    subscript_call_result_112626 = invoke(stypy.reporting.localization.Localization(__file__, 3713, 12), getitem___112625, i_112623)
    
    float_112627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3713, 20), 'float')
    # Applying the binary operator 'div=' (line 3713)
    result_div_112628 = python_operator(stypy.reporting.localization.Localization(__file__, 3713, 12), 'div=', subscript_call_result_112626, float_112627)
    # Getting the type of 'q' (line 3713)
    q_112629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3713, 12), 'q')
    # Getting the type of 'i' (line 3713)
    i_112630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3713, 14), 'i')
    # Storing an element on a container (line 3713)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3713, 12), q_112629, (i_112630, result_div_112628))
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 3709)
    module_type_store.open_ssa_branch('else')
    
    
    # Evaluating a boolean operation
    
    # Call to count_nonzero(...): (line 3716)
    # Processing the call arguments (line 3716)
    
    # Getting the type of 'q' (line 3716)
    q_112633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3716, 28), 'q', False)
    float_112634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3716, 32), 'float')
    # Applying the binary operator '<' (line 3716)
    result_lt_112635 = python_operator(stypy.reporting.localization.Localization(__file__, 3716, 28), '<', q_112633, float_112634)
    
    # Processing the call keyword arguments (line 3716)
    kwargs_112636 = {}
    # Getting the type of 'np' (line 3716)
    np_112631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3716, 11), 'np', False)
    # Obtaining the member 'count_nonzero' of a type (line 3716)
    count_nonzero_112632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3716, 11), np_112631, 'count_nonzero')
    # Calling count_nonzero(args, kwargs) (line 3716)
    count_nonzero_call_result_112637 = invoke(stypy.reporting.localization.Localization(__file__, 3716, 11), count_nonzero_112632, *[result_lt_112635], **kwargs_112636)
    
    
    # Call to count_nonzero(...): (line 3716)
    # Processing the call arguments (line 3716)
    
    # Getting the type of 'q' (line 3716)
    q_112640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3716, 56), 'q', False)
    float_112641 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3716, 60), 'float')
    # Applying the binary operator '>' (line 3716)
    result_gt_112642 = python_operator(stypy.reporting.localization.Localization(__file__, 3716, 56), '>', q_112640, float_112641)
    
    # Processing the call keyword arguments (line 3716)
    kwargs_112643 = {}
    # Getting the type of 'np' (line 3716)
    np_112638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3716, 39), 'np', False)
    # Obtaining the member 'count_nonzero' of a type (line 3716)
    count_nonzero_112639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3716, 39), np_112638, 'count_nonzero')
    # Calling count_nonzero(args, kwargs) (line 3716)
    count_nonzero_call_result_112644 = invoke(stypy.reporting.localization.Localization(__file__, 3716, 39), count_nonzero_112639, *[result_gt_112642], **kwargs_112643)
    
    # Applying the binary operator 'or' (line 3716)
    result_or_keyword_112645 = python_operator(stypy.reporting.localization.Localization(__file__, 3716, 11), 'or', count_nonzero_call_result_112637, count_nonzero_call_result_112644)
    
    # Testing the type of an if condition (line 3716)
    if_condition_112646 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3716, 8), result_or_keyword_112645)
    # Assigning a type to the variable 'if_condition_112646' (line 3716)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3716, 8), 'if_condition_112646', if_condition_112646)
    # SSA begins for if statement (line 3716)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 3717)
    # Processing the call arguments (line 3717)
    str_112648 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3717, 29), 'str', 'Percentiles must be in the range [0,100]')
    # Processing the call keyword arguments (line 3717)
    kwargs_112649 = {}
    # Getting the type of 'ValueError' (line 3717)
    ValueError_112647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3717, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 3717)
    ValueError_call_result_112650 = invoke(stypy.reporting.localization.Localization(__file__, 3717, 18), ValueError_112647, *[str_112648], **kwargs_112649)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3717, 12), ValueError_call_result_112650, 'raise parameter', BaseException)
    # SSA join for if statement (line 3716)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'q' (line 3718)
    q_112651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3718, 8), 'q')
    float_112652 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3718, 13), 'float')
    # Applying the binary operator 'div=' (line 3718)
    result_div_112653 = python_operator(stypy.reporting.localization.Localization(__file__, 3718, 8), 'div=', q_112651, float_112652)
    # Assigning a type to the variable 'q' (line 3718)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3718, 8), 'q', result_div_112653)
    
    # SSA join for if statement (line 3709)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'overwrite_input' (line 3721)
    overwrite_input_112654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3721, 7), 'overwrite_input')
    # Testing the type of an if condition (line 3721)
    if_condition_112655 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3721, 4), overwrite_input_112654)
    # Assigning a type to the variable 'if_condition_112655' (line 3721)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3721, 4), 'if_condition_112655', if_condition_112655)
    # SSA begins for if statement (line 3721)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Type idiom detected: calculating its left and rigth part (line 3722)
    # Getting the type of 'axis' (line 3722)
    axis_112656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3722, 11), 'axis')
    # Getting the type of 'None' (line 3722)
    None_112657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3722, 19), 'None')
    
    (may_be_112658, more_types_in_union_112659) = may_be_none(axis_112656, None_112657)

    if may_be_112658:

        if more_types_in_union_112659:
            # Runtime conditional SSA (line 3722)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 3723):
        
        # Assigning a Call to a Name (line 3723):
        
        # Call to ravel(...): (line 3723)
        # Processing the call keyword arguments (line 3723)
        kwargs_112662 = {}
        # Getting the type of 'a' (line 3723)
        a_112660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3723, 17), 'a', False)
        # Obtaining the member 'ravel' of a type (line 3723)
        ravel_112661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3723, 17), a_112660, 'ravel')
        # Calling ravel(args, kwargs) (line 3723)
        ravel_call_result_112663 = invoke(stypy.reporting.localization.Localization(__file__, 3723, 17), ravel_112661, *[], **kwargs_112662)
        
        # Assigning a type to the variable 'ap' (line 3723)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3723, 12), 'ap', ravel_call_result_112663)

        if more_types_in_union_112659:
            # Runtime conditional SSA for else branch (line 3722)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_112658) or more_types_in_union_112659):
        
        # Assigning a Name to a Name (line 3725):
        
        # Assigning a Name to a Name (line 3725):
        # Getting the type of 'a' (line 3725)
        a_112664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3725, 17), 'a')
        # Assigning a type to the variable 'ap' (line 3725)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3725, 12), 'ap', a_112664)

        if (may_be_112658 and more_types_in_union_112659):
            # SSA join for if statement (line 3722)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA branch for the else part of an if statement (line 3721)
    module_type_store.open_ssa_branch('else')
    
    # Type idiom detected: calculating its left and rigth part (line 3727)
    # Getting the type of 'axis' (line 3727)
    axis_112665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3727, 11), 'axis')
    # Getting the type of 'None' (line 3727)
    None_112666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3727, 19), 'None')
    
    (may_be_112667, more_types_in_union_112668) = may_be_none(axis_112665, None_112666)

    if may_be_112667:

        if more_types_in_union_112668:
            # Runtime conditional SSA (line 3727)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 3728):
        
        # Assigning a Call to a Name (line 3728):
        
        # Call to flatten(...): (line 3728)
        # Processing the call keyword arguments (line 3728)
        kwargs_112671 = {}
        # Getting the type of 'a' (line 3728)
        a_112669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3728, 17), 'a', False)
        # Obtaining the member 'flatten' of a type (line 3728)
        flatten_112670 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3728, 17), a_112669, 'flatten')
        # Calling flatten(args, kwargs) (line 3728)
        flatten_call_result_112672 = invoke(stypy.reporting.localization.Localization(__file__, 3728, 17), flatten_112670, *[], **kwargs_112671)
        
        # Assigning a type to the variable 'ap' (line 3728)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3728, 12), 'ap', flatten_call_result_112672)

        if more_types_in_union_112668:
            # Runtime conditional SSA for else branch (line 3727)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_112667) or more_types_in_union_112668):
        
        # Assigning a Call to a Name (line 3730):
        
        # Assigning a Call to a Name (line 3730):
        
        # Call to copy(...): (line 3730)
        # Processing the call keyword arguments (line 3730)
        kwargs_112675 = {}
        # Getting the type of 'a' (line 3730)
        a_112673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3730, 17), 'a', False)
        # Obtaining the member 'copy' of a type (line 3730)
        copy_112674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3730, 17), a_112673, 'copy')
        # Calling copy(args, kwargs) (line 3730)
        copy_call_result_112676 = invoke(stypy.reporting.localization.Localization(__file__, 3730, 17), copy_112674, *[], **kwargs_112675)
        
        # Assigning a type to the variable 'ap' (line 3730)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3730, 12), 'ap', copy_call_result_112676)

        if (may_be_112667 and more_types_in_union_112668):
            # SSA join for if statement (line 3727)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA join for if statement (line 3721)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 3732)
    # Getting the type of 'axis' (line 3732)
    axis_112677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3732, 7), 'axis')
    # Getting the type of 'None' (line 3732)
    None_112678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3732, 15), 'None')
    
    (may_be_112679, more_types_in_union_112680) = may_be_none(axis_112677, None_112678)

    if may_be_112679:

        if more_types_in_union_112680:
            # Runtime conditional SSA (line 3732)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Num to a Name (line 3733):
        
        # Assigning a Num to a Name (line 3733):
        int_112681 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3733, 15), 'int')
        # Assigning a type to the variable 'axis' (line 3733)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3733, 8), 'axis', int_112681)

        if more_types_in_union_112680:
            # SSA join for if statement (line 3732)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Subscript to a Name (line 3735):
    
    # Assigning a Subscript to a Name (line 3735):
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 3735)
    axis_112682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3735, 18), 'axis')
    # Getting the type of 'ap' (line 3735)
    ap_112683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3735, 9), 'ap')
    # Obtaining the member 'shape' of a type (line 3735)
    shape_112684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3735, 9), ap_112683, 'shape')
    # Obtaining the member '__getitem__' of a type (line 3735)
    getitem___112685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3735, 9), shape_112684, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3735)
    subscript_call_result_112686 = invoke(stypy.reporting.localization.Localization(__file__, 3735, 9), getitem___112685, axis_112682)
    
    # Assigning a type to the variable 'Nx' (line 3735)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3735, 4), 'Nx', subscript_call_result_112686)
    
    # Assigning a BinOp to a Name (line 3736):
    
    # Assigning a BinOp to a Name (line 3736):
    # Getting the type of 'q' (line 3736)
    q_112687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3736, 14), 'q')
    # Getting the type of 'Nx' (line 3736)
    Nx_112688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3736, 19), 'Nx')
    int_112689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3736, 24), 'int')
    # Applying the binary operator '-' (line 3736)
    result_sub_112690 = python_operator(stypy.reporting.localization.Localization(__file__, 3736, 19), '-', Nx_112688, int_112689)
    
    # Applying the binary operator '*' (line 3736)
    result_mul_112691 = python_operator(stypy.reporting.localization.Localization(__file__, 3736, 14), '*', q_112687, result_sub_112690)
    
    # Assigning a type to the variable 'indices' (line 3736)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3736, 4), 'indices', result_mul_112691)
    
    
    # Getting the type of 'interpolation' (line 3739)
    interpolation_112692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3739, 7), 'interpolation')
    str_112693 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3739, 24), 'str', 'lower')
    # Applying the binary operator '==' (line 3739)
    result_eq_112694 = python_operator(stypy.reporting.localization.Localization(__file__, 3739, 7), '==', interpolation_112692, str_112693)
    
    # Testing the type of an if condition (line 3739)
    if_condition_112695 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3739, 4), result_eq_112694)
    # Assigning a type to the variable 'if_condition_112695' (line 3739)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3739, 4), 'if_condition_112695', if_condition_112695)
    # SSA begins for if statement (line 3739)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3740):
    
    # Assigning a Call to a Name (line 3740):
    
    # Call to astype(...): (line 3740)
    # Processing the call arguments (line 3740)
    # Getting the type of 'intp' (line 3740)
    intp_112701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3740, 40), 'intp', False)
    # Processing the call keyword arguments (line 3740)
    kwargs_112702 = {}
    
    # Call to floor(...): (line 3740)
    # Processing the call arguments (line 3740)
    # Getting the type of 'indices' (line 3740)
    indices_112697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3740, 24), 'indices', False)
    # Processing the call keyword arguments (line 3740)
    kwargs_112698 = {}
    # Getting the type of 'floor' (line 3740)
    floor_112696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3740, 18), 'floor', False)
    # Calling floor(args, kwargs) (line 3740)
    floor_call_result_112699 = invoke(stypy.reporting.localization.Localization(__file__, 3740, 18), floor_112696, *[indices_112697], **kwargs_112698)
    
    # Obtaining the member 'astype' of a type (line 3740)
    astype_112700 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3740, 18), floor_call_result_112699, 'astype')
    # Calling astype(args, kwargs) (line 3740)
    astype_call_result_112703 = invoke(stypy.reporting.localization.Localization(__file__, 3740, 18), astype_112700, *[intp_112701], **kwargs_112702)
    
    # Assigning a type to the variable 'indices' (line 3740)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3740, 8), 'indices', astype_call_result_112703)
    # SSA branch for the else part of an if statement (line 3739)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'interpolation' (line 3741)
    interpolation_112704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3741, 9), 'interpolation')
    str_112705 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3741, 26), 'str', 'higher')
    # Applying the binary operator '==' (line 3741)
    result_eq_112706 = python_operator(stypy.reporting.localization.Localization(__file__, 3741, 9), '==', interpolation_112704, str_112705)
    
    # Testing the type of an if condition (line 3741)
    if_condition_112707 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3741, 9), result_eq_112706)
    # Assigning a type to the variable 'if_condition_112707' (line 3741)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3741, 9), 'if_condition_112707', if_condition_112707)
    # SSA begins for if statement (line 3741)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3742):
    
    # Assigning a Call to a Name (line 3742):
    
    # Call to astype(...): (line 3742)
    # Processing the call arguments (line 3742)
    # Getting the type of 'intp' (line 3742)
    intp_112713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3742, 39), 'intp', False)
    # Processing the call keyword arguments (line 3742)
    kwargs_112714 = {}
    
    # Call to ceil(...): (line 3742)
    # Processing the call arguments (line 3742)
    # Getting the type of 'indices' (line 3742)
    indices_112709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3742, 23), 'indices', False)
    # Processing the call keyword arguments (line 3742)
    kwargs_112710 = {}
    # Getting the type of 'ceil' (line 3742)
    ceil_112708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3742, 18), 'ceil', False)
    # Calling ceil(args, kwargs) (line 3742)
    ceil_call_result_112711 = invoke(stypy.reporting.localization.Localization(__file__, 3742, 18), ceil_112708, *[indices_112709], **kwargs_112710)
    
    # Obtaining the member 'astype' of a type (line 3742)
    astype_112712 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3742, 18), ceil_call_result_112711, 'astype')
    # Calling astype(args, kwargs) (line 3742)
    astype_call_result_112715 = invoke(stypy.reporting.localization.Localization(__file__, 3742, 18), astype_112712, *[intp_112713], **kwargs_112714)
    
    # Assigning a type to the variable 'indices' (line 3742)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3742, 8), 'indices', astype_call_result_112715)
    # SSA branch for the else part of an if statement (line 3741)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'interpolation' (line 3743)
    interpolation_112716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3743, 9), 'interpolation')
    str_112717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3743, 26), 'str', 'midpoint')
    # Applying the binary operator '==' (line 3743)
    result_eq_112718 = python_operator(stypy.reporting.localization.Localization(__file__, 3743, 9), '==', interpolation_112716, str_112717)
    
    # Testing the type of an if condition (line 3743)
    if_condition_112719 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3743, 9), result_eq_112718)
    # Assigning a type to the variable 'if_condition_112719' (line 3743)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3743, 9), 'if_condition_112719', if_condition_112719)
    # SSA begins for if statement (line 3743)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 3744):
    
    # Assigning a BinOp to a Name (line 3744):
    float_112720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3744, 18), 'float')
    
    # Call to floor(...): (line 3744)
    # Processing the call arguments (line 3744)
    # Getting the type of 'indices' (line 3744)
    indices_112722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3744, 31), 'indices', False)
    # Processing the call keyword arguments (line 3744)
    kwargs_112723 = {}
    # Getting the type of 'floor' (line 3744)
    floor_112721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3744, 25), 'floor', False)
    # Calling floor(args, kwargs) (line 3744)
    floor_call_result_112724 = invoke(stypy.reporting.localization.Localization(__file__, 3744, 25), floor_112721, *[indices_112722], **kwargs_112723)
    
    
    # Call to ceil(...): (line 3744)
    # Processing the call arguments (line 3744)
    # Getting the type of 'indices' (line 3744)
    indices_112726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3744, 47), 'indices', False)
    # Processing the call keyword arguments (line 3744)
    kwargs_112727 = {}
    # Getting the type of 'ceil' (line 3744)
    ceil_112725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3744, 42), 'ceil', False)
    # Calling ceil(args, kwargs) (line 3744)
    ceil_call_result_112728 = invoke(stypy.reporting.localization.Localization(__file__, 3744, 42), ceil_112725, *[indices_112726], **kwargs_112727)
    
    # Applying the binary operator '+' (line 3744)
    result_add_112729 = python_operator(stypy.reporting.localization.Localization(__file__, 3744, 25), '+', floor_call_result_112724, ceil_call_result_112728)
    
    # Applying the binary operator '*' (line 3744)
    result_mul_112730 = python_operator(stypy.reporting.localization.Localization(__file__, 3744, 18), '*', float_112720, result_add_112729)
    
    # Assigning a type to the variable 'indices' (line 3744)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3744, 8), 'indices', result_mul_112730)
    # SSA branch for the else part of an if statement (line 3743)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'interpolation' (line 3745)
    interpolation_112731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3745, 9), 'interpolation')
    str_112732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3745, 26), 'str', 'nearest')
    # Applying the binary operator '==' (line 3745)
    result_eq_112733 = python_operator(stypy.reporting.localization.Localization(__file__, 3745, 9), '==', interpolation_112731, str_112732)
    
    # Testing the type of an if condition (line 3745)
    if_condition_112734 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3745, 9), result_eq_112733)
    # Assigning a type to the variable 'if_condition_112734' (line 3745)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3745, 9), 'if_condition_112734', if_condition_112734)
    # SSA begins for if statement (line 3745)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3746):
    
    # Assigning a Call to a Name (line 3746):
    
    # Call to astype(...): (line 3746)
    # Processing the call arguments (line 3746)
    # Getting the type of 'intp' (line 3746)
    intp_112740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3746, 41), 'intp', False)
    # Processing the call keyword arguments (line 3746)
    kwargs_112741 = {}
    
    # Call to around(...): (line 3746)
    # Processing the call arguments (line 3746)
    # Getting the type of 'indices' (line 3746)
    indices_112736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3746, 25), 'indices', False)
    # Processing the call keyword arguments (line 3746)
    kwargs_112737 = {}
    # Getting the type of 'around' (line 3746)
    around_112735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3746, 18), 'around', False)
    # Calling around(args, kwargs) (line 3746)
    around_call_result_112738 = invoke(stypy.reporting.localization.Localization(__file__, 3746, 18), around_112735, *[indices_112736], **kwargs_112737)
    
    # Obtaining the member 'astype' of a type (line 3746)
    astype_112739 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3746, 18), around_call_result_112738, 'astype')
    # Calling astype(args, kwargs) (line 3746)
    astype_call_result_112742 = invoke(stypy.reporting.localization.Localization(__file__, 3746, 18), astype_112739, *[intp_112740], **kwargs_112741)
    
    # Assigning a type to the variable 'indices' (line 3746)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3746, 8), 'indices', astype_call_result_112742)
    # SSA branch for the else part of an if statement (line 3745)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'interpolation' (line 3747)
    interpolation_112743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3747, 9), 'interpolation')
    str_112744 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3747, 26), 'str', 'linear')
    # Applying the binary operator '==' (line 3747)
    result_eq_112745 = python_operator(stypy.reporting.localization.Localization(__file__, 3747, 9), '==', interpolation_112743, str_112744)
    
    # Testing the type of an if condition (line 3747)
    if_condition_112746 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3747, 9), result_eq_112745)
    # Assigning a type to the variable 'if_condition_112746' (line 3747)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3747, 9), 'if_condition_112746', if_condition_112746)
    # SSA begins for if statement (line 3747)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    pass
    # SSA branch for the else part of an if statement (line 3747)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 3750)
    # Processing the call arguments (line 3750)
    str_112748 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3751, 12), 'str', "interpolation can only be 'linear', 'lower' 'higher', 'midpoint', or 'nearest'")
    # Processing the call keyword arguments (line 3750)
    kwargs_112749 = {}
    # Getting the type of 'ValueError' (line 3750)
    ValueError_112747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3750, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 3750)
    ValueError_call_result_112750 = invoke(stypy.reporting.localization.Localization(__file__, 3750, 14), ValueError_112747, *[str_112748], **kwargs_112749)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 3750, 8), ValueError_call_result_112750, 'raise parameter', BaseException)
    # SSA join for if statement (line 3747)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3745)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3743)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3741)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3739)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 3754):
    
    # Assigning a Call to a Name (line 3754):
    
    # Call to array(...): (line 3754)
    # Processing the call arguments (line 3754)
    # Getting the type of 'False' (line 3754)
    False_112753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3754, 17), 'False', False)
    # Processing the call keyword arguments (line 3754)
    # Getting the type of 'bool' (line 3754)
    bool_112754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3754, 30), 'bool', False)
    keyword_112755 = bool_112754
    kwargs_112756 = {'dtype': keyword_112755}
    # Getting the type of 'np' (line 3754)
    np_112751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3754, 8), 'np', False)
    # Obtaining the member 'array' of a type (line 3754)
    array_112752 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3754, 8), np_112751, 'array')
    # Calling array(args, kwargs) (line 3754)
    array_call_result_112757 = invoke(stypy.reporting.localization.Localization(__file__, 3754, 8), array_112752, *[False_112753], **kwargs_112756)
    
    # Assigning a type to the variable 'n' (line 3754)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3754, 4), 'n', array_call_result_112757)
    
    
    # Getting the type of 'indices' (line 3755)
    indices_112758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3755, 7), 'indices')
    # Obtaining the member 'dtype' of a type (line 3755)
    dtype_112759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3755, 7), indices_112758, 'dtype')
    # Getting the type of 'intp' (line 3755)
    intp_112760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3755, 24), 'intp')
    # Applying the binary operator '==' (line 3755)
    result_eq_112761 = python_operator(stypy.reporting.localization.Localization(__file__, 3755, 7), '==', dtype_112759, intp_112760)
    
    # Testing the type of an if condition (line 3755)
    if_condition_112762 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3755, 4), result_eq_112761)
    # Assigning a type to the variable 'if_condition_112762' (line 3755)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3755, 4), 'if_condition_112762', if_condition_112762)
    # SSA begins for if statement (line 3755)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Call to issubdtype(...): (line 3757)
    # Processing the call arguments (line 3757)
    # Getting the type of 'a' (line 3757)
    a_112765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3757, 25), 'a', False)
    # Obtaining the member 'dtype' of a type (line 3757)
    dtype_112766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3757, 25), a_112765, 'dtype')
    # Getting the type of 'np' (line 3757)
    np_112767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3757, 34), 'np', False)
    # Obtaining the member 'inexact' of a type (line 3757)
    inexact_112768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3757, 34), np_112767, 'inexact')
    # Processing the call keyword arguments (line 3757)
    kwargs_112769 = {}
    # Getting the type of 'np' (line 3757)
    np_112763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3757, 11), 'np', False)
    # Obtaining the member 'issubdtype' of a type (line 3757)
    issubdtype_112764 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3757, 11), np_112763, 'issubdtype')
    # Calling issubdtype(args, kwargs) (line 3757)
    issubdtype_call_result_112770 = invoke(stypy.reporting.localization.Localization(__file__, 3757, 11), issubdtype_112764, *[dtype_112766, inexact_112768], **kwargs_112769)
    
    # Testing the type of an if condition (line 3757)
    if_condition_112771 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3757, 8), issubdtype_call_result_112770)
    # Assigning a type to the variable 'if_condition_112771' (line 3757)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3757, 8), 'if_condition_112771', if_condition_112771)
    # SSA begins for if statement (line 3757)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3758):
    
    # Assigning a Call to a Name (line 3758):
    
    # Call to concatenate(...): (line 3758)
    # Processing the call arguments (line 3758)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3758)
    tuple_112773 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3758, 35), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3758)
    # Adding element type (line 3758)
    # Getting the type of 'indices' (line 3758)
    indices_112774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3758, 35), 'indices', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3758, 35), tuple_112773, indices_112774)
    # Adding element type (line 3758)
    
    # Obtaining an instance of the builtin type 'list' (line 3758)
    list_112775 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3758, 44), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3758)
    # Adding element type (line 3758)
    int_112776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3758, 45), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3758, 44), list_112775, int_112776)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3758, 35), tuple_112773, list_112775)
    
    # Processing the call keyword arguments (line 3758)
    kwargs_112777 = {}
    # Getting the type of 'concatenate' (line 3758)
    concatenate_112772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3758, 22), 'concatenate', False)
    # Calling concatenate(args, kwargs) (line 3758)
    concatenate_call_result_112778 = invoke(stypy.reporting.localization.Localization(__file__, 3758, 22), concatenate_112772, *[tuple_112773], **kwargs_112777)
    
    # Assigning a type to the variable 'indices' (line 3758)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3758, 12), 'indices', concatenate_call_result_112778)
    # SSA join for if statement (line 3757)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to partition(...): (line 3760)
    # Processing the call arguments (line 3760)
    # Getting the type of 'indices' (line 3760)
    indices_112781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3760, 21), 'indices', False)
    # Processing the call keyword arguments (line 3760)
    # Getting the type of 'axis' (line 3760)
    axis_112782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3760, 35), 'axis', False)
    keyword_112783 = axis_112782
    kwargs_112784 = {'axis': keyword_112783}
    # Getting the type of 'ap' (line 3760)
    ap_112779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3760, 8), 'ap', False)
    # Obtaining the member 'partition' of a type (line 3760)
    partition_112780 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3760, 8), ap_112779, 'partition')
    # Calling partition(args, kwargs) (line 3760)
    partition_call_result_112785 = invoke(stypy.reporting.localization.Localization(__file__, 3760, 8), partition_112780, *[indices_112781], **kwargs_112784)
    
    
    # Assigning a Call to a Name (line 3762):
    
    # Assigning a Call to a Name (line 3762):
    
    # Call to rollaxis(...): (line 3762)
    # Processing the call arguments (line 3762)
    # Getting the type of 'ap' (line 3762)
    ap_112788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3762, 25), 'ap', False)
    # Getting the type of 'axis' (line 3762)
    axis_112789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3762, 29), 'axis', False)
    int_112790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3762, 35), 'int')
    # Processing the call keyword arguments (line 3762)
    kwargs_112791 = {}
    # Getting the type of 'np' (line 3762)
    np_112786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3762, 13), 'np', False)
    # Obtaining the member 'rollaxis' of a type (line 3762)
    rollaxis_112787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3762, 13), np_112786, 'rollaxis')
    # Calling rollaxis(args, kwargs) (line 3762)
    rollaxis_call_result_112792 = invoke(stypy.reporting.localization.Localization(__file__, 3762, 13), rollaxis_112787, *[ap_112788, axis_112789, int_112790], **kwargs_112791)
    
    # Assigning a type to the variable 'ap' (line 3762)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3762, 8), 'ap', rollaxis_call_result_112792)
    
    # Assigning a Num to a Name (line 3763):
    
    # Assigning a Num to a Name (line 3763):
    int_112793 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3763, 15), 'int')
    # Assigning a type to the variable 'axis' (line 3763)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3763, 8), 'axis', int_112793)
    
    
    # Call to issubdtype(...): (line 3766)
    # Processing the call arguments (line 3766)
    # Getting the type of 'a' (line 3766)
    a_112796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3766, 25), 'a', False)
    # Obtaining the member 'dtype' of a type (line 3766)
    dtype_112797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3766, 25), a_112796, 'dtype')
    # Getting the type of 'np' (line 3766)
    np_112798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3766, 34), 'np', False)
    # Obtaining the member 'inexact' of a type (line 3766)
    inexact_112799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3766, 34), np_112798, 'inexact')
    # Processing the call keyword arguments (line 3766)
    kwargs_112800 = {}
    # Getting the type of 'np' (line 3766)
    np_112794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3766, 11), 'np', False)
    # Obtaining the member 'issubdtype' of a type (line 3766)
    issubdtype_112795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3766, 11), np_112794, 'issubdtype')
    # Calling issubdtype(args, kwargs) (line 3766)
    issubdtype_call_result_112801 = invoke(stypy.reporting.localization.Localization(__file__, 3766, 11), issubdtype_112795, *[dtype_112797, inexact_112799], **kwargs_112800)
    
    # Testing the type of an if condition (line 3766)
    if_condition_112802 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3766, 8), issubdtype_call_result_112801)
    # Assigning a type to the variable 'if_condition_112802' (line 3766)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3766, 8), 'if_condition_112802', if_condition_112802)
    # SSA begins for if statement (line 3766)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 3767):
    
    # Assigning a Subscript to a Name (line 3767):
    
    # Obtaining the type of the subscript
    int_112803 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3767, 31), 'int')
    slice_112804 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3767, 22), None, int_112803, None)
    # Getting the type of 'indices' (line 3767)
    indices_112805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3767, 22), 'indices')
    # Obtaining the member '__getitem__' of a type (line 3767)
    getitem___112806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3767, 22), indices_112805, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3767)
    subscript_call_result_112807 = invoke(stypy.reporting.localization.Localization(__file__, 3767, 22), getitem___112806, slice_112804)
    
    # Assigning a type to the variable 'indices' (line 3767)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3767, 12), 'indices', subscript_call_result_112807)
    
    # Assigning a Call to a Name (line 3768):
    
    # Assigning a Call to a Name (line 3768):
    
    # Call to isnan(...): (line 3768)
    # Processing the call arguments (line 3768)
    
    # Obtaining the type of the subscript
    int_112810 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3768, 28), 'int')
    slice_112811 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3768, 25), int_112810, None, None)
    Ellipsis_112812 = Ellipsis
    # Getting the type of 'ap' (line 3768)
    ap_112813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3768, 25), 'ap', False)
    # Obtaining the member '__getitem__' of a type (line 3768)
    getitem___112814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3768, 25), ap_112813, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3768)
    subscript_call_result_112815 = invoke(stypy.reporting.localization.Localization(__file__, 3768, 25), getitem___112814, (slice_112811, Ellipsis_112812))
    
    # Processing the call keyword arguments (line 3768)
    kwargs_112816 = {}
    # Getting the type of 'np' (line 3768)
    np_112808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3768, 16), 'np', False)
    # Obtaining the member 'isnan' of a type (line 3768)
    isnan_112809 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3768, 16), np_112808, 'isnan')
    # Calling isnan(args, kwargs) (line 3768)
    isnan_call_result_112817 = invoke(stypy.reporting.localization.Localization(__file__, 3768, 16), isnan_112809, *[subscript_call_result_112815], **kwargs_112816)
    
    # Assigning a type to the variable 'n' (line 3768)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3768, 12), 'n', isnan_call_result_112817)
    # SSA join for if statement (line 3766)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'zerod' (line 3770)
    zerod_112818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3770, 11), 'zerod')
    # Testing the type of an if condition (line 3770)
    if_condition_112819 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3770, 8), zerod_112818)
    # Assigning a type to the variable 'if_condition_112819' (line 3770)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3770, 8), 'if_condition_112819', if_condition_112819)
    # SSA begins for if statement (line 3770)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 3771):
    
    # Assigning a Subscript to a Name (line 3771):
    
    # Obtaining the type of the subscript
    int_112820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3771, 30), 'int')
    # Getting the type of 'indices' (line 3771)
    indices_112821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3771, 22), 'indices')
    # Obtaining the member '__getitem__' of a type (line 3771)
    getitem___112822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3771, 22), indices_112821, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3771)
    subscript_call_result_112823 = invoke(stypy.reporting.localization.Localization(__file__, 3771, 22), getitem___112822, int_112820)
    
    # Assigning a type to the variable 'indices' (line 3771)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3771, 12), 'indices', subscript_call_result_112823)
    # SSA join for if statement (line 3770)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 3772):
    
    # Assigning a Call to a Name (line 3772):
    
    # Call to take(...): (line 3772)
    # Processing the call arguments (line 3772)
    # Getting the type of 'ap' (line 3772)
    ap_112825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3772, 17), 'ap', False)
    # Getting the type of 'indices' (line 3772)
    indices_112826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3772, 21), 'indices', False)
    # Processing the call keyword arguments (line 3772)
    # Getting the type of 'axis' (line 3772)
    axis_112827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3772, 35), 'axis', False)
    keyword_112828 = axis_112827
    # Getting the type of 'out' (line 3772)
    out_112829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3772, 45), 'out', False)
    keyword_112830 = out_112829
    kwargs_112831 = {'out': keyword_112830, 'axis': keyword_112828}
    # Getting the type of 'take' (line 3772)
    take_112824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3772, 12), 'take', False)
    # Calling take(args, kwargs) (line 3772)
    take_call_result_112832 = invoke(stypy.reporting.localization.Localization(__file__, 3772, 12), take_112824, *[ap_112825, indices_112826], **kwargs_112831)
    
    # Assigning a type to the variable 'r' (line 3772)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3772, 8), 'r', take_call_result_112832)
    # SSA branch for the else part of an if statement (line 3755)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 3776):
    
    # Assigning a Call to a Name (line 3776):
    
    # Call to astype(...): (line 3776)
    # Processing the call arguments (line 3776)
    # Getting the type of 'intp' (line 3776)
    intp_112838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3776, 46), 'intp', False)
    # Processing the call keyword arguments (line 3776)
    kwargs_112839 = {}
    
    # Call to floor(...): (line 3776)
    # Processing the call arguments (line 3776)
    # Getting the type of 'indices' (line 3776)
    indices_112834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3776, 30), 'indices', False)
    # Processing the call keyword arguments (line 3776)
    kwargs_112835 = {}
    # Getting the type of 'floor' (line 3776)
    floor_112833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3776, 24), 'floor', False)
    # Calling floor(args, kwargs) (line 3776)
    floor_call_result_112836 = invoke(stypy.reporting.localization.Localization(__file__, 3776, 24), floor_112833, *[indices_112834], **kwargs_112835)
    
    # Obtaining the member 'astype' of a type (line 3776)
    astype_112837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3776, 24), floor_call_result_112836, 'astype')
    # Calling astype(args, kwargs) (line 3776)
    astype_call_result_112840 = invoke(stypy.reporting.localization.Localization(__file__, 3776, 24), astype_112837, *[intp_112838], **kwargs_112839)
    
    # Assigning a type to the variable 'indices_below' (line 3776)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3776, 8), 'indices_below', astype_call_result_112840)
    
    # Assigning a BinOp to a Name (line 3777):
    
    # Assigning a BinOp to a Name (line 3777):
    # Getting the type of 'indices_below' (line 3777)
    indices_below_112841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3777, 24), 'indices_below')
    int_112842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3777, 40), 'int')
    # Applying the binary operator '+' (line 3777)
    result_add_112843 = python_operator(stypy.reporting.localization.Localization(__file__, 3777, 24), '+', indices_below_112841, int_112842)
    
    # Assigning a type to the variable 'indices_above' (line 3777)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3777, 8), 'indices_above', result_add_112843)
    
    # Assigning a BinOp to a Subscript (line 3778):
    
    # Assigning a BinOp to a Subscript (line 3778):
    # Getting the type of 'Nx' (line 3778)
    Nx_112844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3778, 48), 'Nx')
    int_112845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3778, 53), 'int')
    # Applying the binary operator '-' (line 3778)
    result_sub_112846 = python_operator(stypy.reporting.localization.Localization(__file__, 3778, 48), '-', Nx_112844, int_112845)
    
    # Getting the type of 'indices_above' (line 3778)
    indices_above_112847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3778, 8), 'indices_above')
    
    # Getting the type of 'indices_above' (line 3778)
    indices_above_112848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3778, 22), 'indices_above')
    # Getting the type of 'Nx' (line 3778)
    Nx_112849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3778, 38), 'Nx')
    int_112850 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3778, 43), 'int')
    # Applying the binary operator '-' (line 3778)
    result_sub_112851 = python_operator(stypy.reporting.localization.Localization(__file__, 3778, 38), '-', Nx_112849, int_112850)
    
    # Applying the binary operator '>' (line 3778)
    result_gt_112852 = python_operator(stypy.reporting.localization.Localization(__file__, 3778, 22), '>', indices_above_112848, result_sub_112851)
    
    # Storing an element on a container (line 3778)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3778, 8), indices_above_112847, (result_gt_112852, result_sub_112846))
    
    
    # Call to issubdtype(...): (line 3781)
    # Processing the call arguments (line 3781)
    # Getting the type of 'a' (line 3781)
    a_112855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3781, 25), 'a', False)
    # Obtaining the member 'dtype' of a type (line 3781)
    dtype_112856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3781, 25), a_112855, 'dtype')
    # Getting the type of 'np' (line 3781)
    np_112857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3781, 34), 'np', False)
    # Obtaining the member 'inexact' of a type (line 3781)
    inexact_112858 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3781, 34), np_112857, 'inexact')
    # Processing the call keyword arguments (line 3781)
    kwargs_112859 = {}
    # Getting the type of 'np' (line 3781)
    np_112853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3781, 11), 'np', False)
    # Obtaining the member 'issubdtype' of a type (line 3781)
    issubdtype_112854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3781, 11), np_112853, 'issubdtype')
    # Calling issubdtype(args, kwargs) (line 3781)
    issubdtype_call_result_112860 = invoke(stypy.reporting.localization.Localization(__file__, 3781, 11), issubdtype_112854, *[dtype_112856, inexact_112858], **kwargs_112859)
    
    # Testing the type of an if condition (line 3781)
    if_condition_112861 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3781, 8), issubdtype_call_result_112860)
    # Assigning a type to the variable 'if_condition_112861' (line 3781)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3781, 8), 'if_condition_112861', if_condition_112861)
    # SSA begins for if statement (line 3781)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3782):
    
    # Assigning a Call to a Name (line 3782):
    
    # Call to concatenate(...): (line 3782)
    # Processing the call arguments (line 3782)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3782)
    tuple_112863 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3782, 41), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3782)
    # Adding element type (line 3782)
    # Getting the type of 'indices_above' (line 3782)
    indices_above_112864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3782, 41), 'indices_above', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3782, 41), tuple_112863, indices_above_112864)
    # Adding element type (line 3782)
    
    # Obtaining an instance of the builtin type 'list' (line 3782)
    list_112865 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3782, 56), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3782)
    # Adding element type (line 3782)
    int_112866 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3782, 57), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3782, 56), list_112865, int_112866)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3782, 41), tuple_112863, list_112865)
    
    # Processing the call keyword arguments (line 3782)
    kwargs_112867 = {}
    # Getting the type of 'concatenate' (line 3782)
    concatenate_112862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3782, 28), 'concatenate', False)
    # Calling concatenate(args, kwargs) (line 3782)
    concatenate_call_result_112868 = invoke(stypy.reporting.localization.Localization(__file__, 3782, 28), concatenate_112862, *[tuple_112863], **kwargs_112867)
    
    # Assigning a type to the variable 'indices_above' (line 3782)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3782, 12), 'indices_above', concatenate_call_result_112868)
    # SSA join for if statement (line 3781)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 3784):
    
    # Assigning a BinOp to a Name (line 3784):
    # Getting the type of 'indices' (line 3784)
    indices_112869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3784, 24), 'indices')
    # Getting the type of 'indices_below' (line 3784)
    indices_below_112870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3784, 34), 'indices_below')
    # Applying the binary operator '-' (line 3784)
    result_sub_112871 = python_operator(stypy.reporting.localization.Localization(__file__, 3784, 24), '-', indices_112869, indices_below_112870)
    
    # Assigning a type to the variable 'weights_above' (line 3784)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3784, 8), 'weights_above', result_sub_112871)
    
    # Assigning a BinOp to a Name (line 3785):
    
    # Assigning a BinOp to a Name (line 3785):
    float_112872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3785, 24), 'float')
    # Getting the type of 'weights_above' (line 3785)
    weights_above_112873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3785, 30), 'weights_above')
    # Applying the binary operator '-' (line 3785)
    result_sub_112874 = python_operator(stypy.reporting.localization.Localization(__file__, 3785, 24), '-', float_112872, weights_above_112873)
    
    # Assigning a type to the variable 'weights_below' (line 3785)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3785, 8), 'weights_below', result_sub_112874)
    
    # Assigning a BinOp to a Name (line 3787):
    
    # Assigning a BinOp to a Name (line 3787):
    
    # Obtaining an instance of the builtin type 'list' (line 3787)
    list_112875 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3787, 24), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3787)
    # Adding element type (line 3787)
    int_112876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3787, 25), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3787, 24), list_112875, int_112876)
    
    # Getting the type of 'ap' (line 3787)
    ap_112877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3787, 32), 'ap')
    # Obtaining the member 'ndim' of a type (line 3787)
    ndim_112878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3787, 32), ap_112877, 'ndim')
    # Applying the binary operator '*' (line 3787)
    result_mul_112879 = python_operator(stypy.reporting.localization.Localization(__file__, 3787, 24), '*', list_112875, ndim_112878)
    
    # Assigning a type to the variable 'weights_shape' (line 3787)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3787, 8), 'weights_shape', result_mul_112879)
    
    # Assigning a Call to a Subscript (line 3788):
    
    # Assigning a Call to a Subscript (line 3788):
    
    # Call to len(...): (line 3788)
    # Processing the call arguments (line 3788)
    # Getting the type of 'indices' (line 3788)
    indices_112881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3788, 34), 'indices', False)
    # Processing the call keyword arguments (line 3788)
    kwargs_112882 = {}
    # Getting the type of 'len' (line 3788)
    len_112880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3788, 30), 'len', False)
    # Calling len(args, kwargs) (line 3788)
    len_call_result_112883 = invoke(stypy.reporting.localization.Localization(__file__, 3788, 30), len_112880, *[indices_112881], **kwargs_112882)
    
    # Getting the type of 'weights_shape' (line 3788)
    weights_shape_112884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3788, 8), 'weights_shape')
    # Getting the type of 'axis' (line 3788)
    axis_112885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3788, 22), 'axis')
    # Storing an element on a container (line 3788)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3788, 8), weights_shape_112884, (axis_112885, len_call_result_112883))
    
    # Assigning a Name to a Attribute (line 3789):
    
    # Assigning a Name to a Attribute (line 3789):
    # Getting the type of 'weights_shape' (line 3789)
    weights_shape_112886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3789, 30), 'weights_shape')
    # Getting the type of 'weights_below' (line 3789)
    weights_below_112887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3789, 8), 'weights_below')
    # Setting the type of the member 'shape' of a type (line 3789)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3789, 8), weights_below_112887, 'shape', weights_shape_112886)
    
    # Assigning a Name to a Attribute (line 3790):
    
    # Assigning a Name to a Attribute (line 3790):
    # Getting the type of 'weights_shape' (line 3790)
    weights_shape_112888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3790, 30), 'weights_shape')
    # Getting the type of 'weights_above' (line 3790)
    weights_above_112889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3790, 8), 'weights_above')
    # Setting the type of the member 'shape' of a type (line 3790)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3790, 8), weights_above_112889, 'shape', weights_shape_112888)
    
    # Call to partition(...): (line 3792)
    # Processing the call arguments (line 3792)
    
    # Call to concatenate(...): (line 3792)
    # Processing the call arguments (line 3792)
    
    # Obtaining an instance of the builtin type 'tuple' (line 3792)
    tuple_112893 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3792, 34), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3792)
    # Adding element type (line 3792)
    # Getting the type of 'indices_below' (line 3792)
    indices_below_112894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3792, 34), 'indices_below', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3792, 34), tuple_112893, indices_below_112894)
    # Adding element type (line 3792)
    # Getting the type of 'indices_above' (line 3792)
    indices_above_112895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3792, 49), 'indices_above', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3792, 34), tuple_112893, indices_above_112895)
    
    # Processing the call keyword arguments (line 3792)
    kwargs_112896 = {}
    # Getting the type of 'concatenate' (line 3792)
    concatenate_112892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3792, 21), 'concatenate', False)
    # Calling concatenate(args, kwargs) (line 3792)
    concatenate_call_result_112897 = invoke(stypy.reporting.localization.Localization(__file__, 3792, 21), concatenate_112892, *[tuple_112893], **kwargs_112896)
    
    # Processing the call keyword arguments (line 3792)
    # Getting the type of 'axis' (line 3792)
    axis_112898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3792, 71), 'axis', False)
    keyword_112899 = axis_112898
    kwargs_112900 = {'axis': keyword_112899}
    # Getting the type of 'ap' (line 3792)
    ap_112890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3792, 8), 'ap', False)
    # Obtaining the member 'partition' of a type (line 3792)
    partition_112891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3792, 8), ap_112890, 'partition')
    # Calling partition(args, kwargs) (line 3792)
    partition_call_result_112901 = invoke(stypy.reporting.localization.Localization(__file__, 3792, 8), partition_112891, *[concatenate_call_result_112897], **kwargs_112900)
    
    
    # Assigning a Call to a Name (line 3795):
    
    # Assigning a Call to a Name (line 3795):
    
    # Call to rollaxis(...): (line 3795)
    # Processing the call arguments (line 3795)
    # Getting the type of 'ap' (line 3795)
    ap_112904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3795, 25), 'ap', False)
    # Getting the type of 'axis' (line 3795)
    axis_112905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3795, 29), 'axis', False)
    int_112906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3795, 35), 'int')
    # Processing the call keyword arguments (line 3795)
    kwargs_112907 = {}
    # Getting the type of 'np' (line 3795)
    np_112902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3795, 13), 'np', False)
    # Obtaining the member 'rollaxis' of a type (line 3795)
    rollaxis_112903 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3795, 13), np_112902, 'rollaxis')
    # Calling rollaxis(args, kwargs) (line 3795)
    rollaxis_call_result_112908 = invoke(stypy.reporting.localization.Localization(__file__, 3795, 13), rollaxis_112903, *[ap_112904, axis_112905, int_112906], **kwargs_112907)
    
    # Assigning a type to the variable 'ap' (line 3795)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3795, 8), 'ap', rollaxis_call_result_112908)
    
    # Assigning a Call to a Name (line 3796):
    
    # Assigning a Call to a Name (line 3796):
    
    # Call to rollaxis(...): (line 3796)
    # Processing the call arguments (line 3796)
    # Getting the type of 'weights_below' (line 3796)
    weights_below_112911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3796, 36), 'weights_below', False)
    # Getting the type of 'axis' (line 3796)
    axis_112912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3796, 51), 'axis', False)
    int_112913 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3796, 57), 'int')
    # Processing the call keyword arguments (line 3796)
    kwargs_112914 = {}
    # Getting the type of 'np' (line 3796)
    np_112909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3796, 24), 'np', False)
    # Obtaining the member 'rollaxis' of a type (line 3796)
    rollaxis_112910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3796, 24), np_112909, 'rollaxis')
    # Calling rollaxis(args, kwargs) (line 3796)
    rollaxis_call_result_112915 = invoke(stypy.reporting.localization.Localization(__file__, 3796, 24), rollaxis_112910, *[weights_below_112911, axis_112912, int_112913], **kwargs_112914)
    
    # Assigning a type to the variable 'weights_below' (line 3796)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3796, 8), 'weights_below', rollaxis_call_result_112915)
    
    # Assigning a Call to a Name (line 3797):
    
    # Assigning a Call to a Name (line 3797):
    
    # Call to rollaxis(...): (line 3797)
    # Processing the call arguments (line 3797)
    # Getting the type of 'weights_above' (line 3797)
    weights_above_112918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3797, 36), 'weights_above', False)
    # Getting the type of 'axis' (line 3797)
    axis_112919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3797, 51), 'axis', False)
    int_112920 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3797, 57), 'int')
    # Processing the call keyword arguments (line 3797)
    kwargs_112921 = {}
    # Getting the type of 'np' (line 3797)
    np_112916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3797, 24), 'np', False)
    # Obtaining the member 'rollaxis' of a type (line 3797)
    rollaxis_112917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3797, 24), np_112916, 'rollaxis')
    # Calling rollaxis(args, kwargs) (line 3797)
    rollaxis_call_result_112922 = invoke(stypy.reporting.localization.Localization(__file__, 3797, 24), rollaxis_112917, *[weights_above_112918, axis_112919, int_112920], **kwargs_112921)
    
    # Assigning a type to the variable 'weights_above' (line 3797)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3797, 8), 'weights_above', rollaxis_call_result_112922)
    
    # Assigning a Num to a Name (line 3798):
    
    # Assigning a Num to a Name (line 3798):
    int_112923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3798, 15), 'int')
    # Assigning a type to the variable 'axis' (line 3798)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3798, 8), 'axis', int_112923)
    
    
    # Call to issubdtype(...): (line 3801)
    # Processing the call arguments (line 3801)
    # Getting the type of 'a' (line 3801)
    a_112926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3801, 25), 'a', False)
    # Obtaining the member 'dtype' of a type (line 3801)
    dtype_112927 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3801, 25), a_112926, 'dtype')
    # Getting the type of 'np' (line 3801)
    np_112928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3801, 34), 'np', False)
    # Obtaining the member 'inexact' of a type (line 3801)
    inexact_112929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3801, 34), np_112928, 'inexact')
    # Processing the call keyword arguments (line 3801)
    kwargs_112930 = {}
    # Getting the type of 'np' (line 3801)
    np_112924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3801, 11), 'np', False)
    # Obtaining the member 'issubdtype' of a type (line 3801)
    issubdtype_112925 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3801, 11), np_112924, 'issubdtype')
    # Calling issubdtype(args, kwargs) (line 3801)
    issubdtype_call_result_112931 = invoke(stypy.reporting.localization.Localization(__file__, 3801, 11), issubdtype_112925, *[dtype_112927, inexact_112929], **kwargs_112930)
    
    # Testing the type of an if condition (line 3801)
    if_condition_112932 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3801, 8), issubdtype_call_result_112931)
    # Assigning a type to the variable 'if_condition_112932' (line 3801)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3801, 8), 'if_condition_112932', if_condition_112932)
    # SSA begins for if statement (line 3801)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 3802):
    
    # Assigning a Subscript to a Name (line 3802):
    
    # Obtaining the type of the subscript
    int_112933 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3802, 43), 'int')
    slice_112934 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3802, 28), None, int_112933, None)
    # Getting the type of 'indices_above' (line 3802)
    indices_above_112935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3802, 28), 'indices_above')
    # Obtaining the member '__getitem__' of a type (line 3802)
    getitem___112936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3802, 28), indices_above_112935, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3802)
    subscript_call_result_112937 = invoke(stypy.reporting.localization.Localization(__file__, 3802, 28), getitem___112936, slice_112934)
    
    # Assigning a type to the variable 'indices_above' (line 3802)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3802, 12), 'indices_above', subscript_call_result_112937)
    
    # Assigning a Call to a Name (line 3803):
    
    # Assigning a Call to a Name (line 3803):
    
    # Call to isnan(...): (line 3803)
    # Processing the call arguments (line 3803)
    
    # Obtaining the type of the subscript
    int_112940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3803, 28), 'int')
    slice_112941 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3803, 25), int_112940, None, None)
    Ellipsis_112942 = Ellipsis
    # Getting the type of 'ap' (line 3803)
    ap_112943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3803, 25), 'ap', False)
    # Obtaining the member '__getitem__' of a type (line 3803)
    getitem___112944 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3803, 25), ap_112943, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3803)
    subscript_call_result_112945 = invoke(stypy.reporting.localization.Localization(__file__, 3803, 25), getitem___112944, (slice_112941, Ellipsis_112942))
    
    # Processing the call keyword arguments (line 3803)
    kwargs_112946 = {}
    # Getting the type of 'np' (line 3803)
    np_112938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3803, 16), 'np', False)
    # Obtaining the member 'isnan' of a type (line 3803)
    isnan_112939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3803, 16), np_112938, 'isnan')
    # Calling isnan(args, kwargs) (line 3803)
    isnan_call_result_112947 = invoke(stypy.reporting.localization.Localization(__file__, 3803, 16), isnan_112939, *[subscript_call_result_112945], **kwargs_112946)
    
    # Assigning a type to the variable 'n' (line 3803)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3803, 12), 'n', isnan_call_result_112947)
    # SSA join for if statement (line 3801)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 3805):
    
    # Assigning a BinOp to a Name (line 3805):
    
    # Call to take(...): (line 3805)
    # Processing the call arguments (line 3805)
    # Getting the type of 'ap' (line 3805)
    ap_112949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3805, 18), 'ap', False)
    # Getting the type of 'indices_below' (line 3805)
    indices_below_112950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3805, 22), 'indices_below', False)
    # Processing the call keyword arguments (line 3805)
    # Getting the type of 'axis' (line 3805)
    axis_112951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3805, 42), 'axis', False)
    keyword_112952 = axis_112951
    kwargs_112953 = {'axis': keyword_112952}
    # Getting the type of 'take' (line 3805)
    take_112948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3805, 13), 'take', False)
    # Calling take(args, kwargs) (line 3805)
    take_call_result_112954 = invoke(stypy.reporting.localization.Localization(__file__, 3805, 13), take_112948, *[ap_112949, indices_below_112950], **kwargs_112953)
    
    # Getting the type of 'weights_below' (line 3805)
    weights_below_112955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3805, 50), 'weights_below')
    # Applying the binary operator '*' (line 3805)
    result_mul_112956 = python_operator(stypy.reporting.localization.Localization(__file__, 3805, 13), '*', take_call_result_112954, weights_below_112955)
    
    # Assigning a type to the variable 'x1' (line 3805)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3805, 8), 'x1', result_mul_112956)
    
    # Assigning a BinOp to a Name (line 3806):
    
    # Assigning a BinOp to a Name (line 3806):
    
    # Call to take(...): (line 3806)
    # Processing the call arguments (line 3806)
    # Getting the type of 'ap' (line 3806)
    ap_112958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3806, 18), 'ap', False)
    # Getting the type of 'indices_above' (line 3806)
    indices_above_112959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3806, 22), 'indices_above', False)
    # Processing the call keyword arguments (line 3806)
    # Getting the type of 'axis' (line 3806)
    axis_112960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3806, 42), 'axis', False)
    keyword_112961 = axis_112960
    kwargs_112962 = {'axis': keyword_112961}
    # Getting the type of 'take' (line 3806)
    take_112957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3806, 13), 'take', False)
    # Calling take(args, kwargs) (line 3806)
    take_call_result_112963 = invoke(stypy.reporting.localization.Localization(__file__, 3806, 13), take_112957, *[ap_112958, indices_above_112959], **kwargs_112962)
    
    # Getting the type of 'weights_above' (line 3806)
    weights_above_112964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3806, 50), 'weights_above')
    # Applying the binary operator '*' (line 3806)
    result_mul_112965 = python_operator(stypy.reporting.localization.Localization(__file__, 3806, 13), '*', take_call_result_112963, weights_above_112964)
    
    # Assigning a type to the variable 'x2' (line 3806)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3806, 8), 'x2', result_mul_112965)
    
    # Assigning a Call to a Name (line 3809):
    
    # Assigning a Call to a Name (line 3809):
    
    # Call to rollaxis(...): (line 3809)
    # Processing the call arguments (line 3809)
    # Getting the type of 'x1' (line 3809)
    x1_112968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3809, 25), 'x1', False)
    # Getting the type of 'axis' (line 3809)
    axis_112969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3809, 29), 'axis', False)
    int_112970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3809, 35), 'int')
    # Processing the call keyword arguments (line 3809)
    kwargs_112971 = {}
    # Getting the type of 'np' (line 3809)
    np_112966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3809, 13), 'np', False)
    # Obtaining the member 'rollaxis' of a type (line 3809)
    rollaxis_112967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3809, 13), np_112966, 'rollaxis')
    # Calling rollaxis(args, kwargs) (line 3809)
    rollaxis_call_result_112972 = invoke(stypy.reporting.localization.Localization(__file__, 3809, 13), rollaxis_112967, *[x1_112968, axis_112969, int_112970], **kwargs_112971)
    
    # Assigning a type to the variable 'x1' (line 3809)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3809, 8), 'x1', rollaxis_call_result_112972)
    
    # Assigning a Call to a Name (line 3810):
    
    # Assigning a Call to a Name (line 3810):
    
    # Call to rollaxis(...): (line 3810)
    # Processing the call arguments (line 3810)
    # Getting the type of 'x2' (line 3810)
    x2_112975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3810, 25), 'x2', False)
    # Getting the type of 'axis' (line 3810)
    axis_112976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3810, 29), 'axis', False)
    int_112977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3810, 35), 'int')
    # Processing the call keyword arguments (line 3810)
    kwargs_112978 = {}
    # Getting the type of 'np' (line 3810)
    np_112973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3810, 13), 'np', False)
    # Obtaining the member 'rollaxis' of a type (line 3810)
    rollaxis_112974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3810, 13), np_112973, 'rollaxis')
    # Calling rollaxis(args, kwargs) (line 3810)
    rollaxis_call_result_112979 = invoke(stypy.reporting.localization.Localization(__file__, 3810, 13), rollaxis_112974, *[x2_112975, axis_112976, int_112977], **kwargs_112978)
    
    # Assigning a type to the variable 'x2' (line 3810)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3810, 8), 'x2', rollaxis_call_result_112979)
    
    # Getting the type of 'zerod' (line 3812)
    zerod_112980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3812, 11), 'zerod')
    # Testing the type of an if condition (line 3812)
    if_condition_112981 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3812, 8), zerod_112980)
    # Assigning a type to the variable 'if_condition_112981' (line 3812)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3812, 8), 'if_condition_112981', if_condition_112981)
    # SSA begins for if statement (line 3812)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 3813):
    
    # Assigning a Call to a Name (line 3813):
    
    # Call to squeeze(...): (line 3813)
    # Processing the call arguments (line 3813)
    int_112984 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3813, 28), 'int')
    # Processing the call keyword arguments (line 3813)
    kwargs_112985 = {}
    # Getting the type of 'x1' (line 3813)
    x1_112982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3813, 17), 'x1', False)
    # Obtaining the member 'squeeze' of a type (line 3813)
    squeeze_112983 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3813, 17), x1_112982, 'squeeze')
    # Calling squeeze(args, kwargs) (line 3813)
    squeeze_call_result_112986 = invoke(stypy.reporting.localization.Localization(__file__, 3813, 17), squeeze_112983, *[int_112984], **kwargs_112985)
    
    # Assigning a type to the variable 'x1' (line 3813)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3813, 12), 'x1', squeeze_call_result_112986)
    
    # Assigning a Call to a Name (line 3814):
    
    # Assigning a Call to a Name (line 3814):
    
    # Call to squeeze(...): (line 3814)
    # Processing the call arguments (line 3814)
    int_112989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3814, 28), 'int')
    # Processing the call keyword arguments (line 3814)
    kwargs_112990 = {}
    # Getting the type of 'x2' (line 3814)
    x2_112987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3814, 17), 'x2', False)
    # Obtaining the member 'squeeze' of a type (line 3814)
    squeeze_112988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3814, 17), x2_112987, 'squeeze')
    # Calling squeeze(args, kwargs) (line 3814)
    squeeze_call_result_112991 = invoke(stypy.reporting.localization.Localization(__file__, 3814, 17), squeeze_112988, *[int_112989], **kwargs_112990)
    
    # Assigning a type to the variable 'x2' (line 3814)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3814, 12), 'x2', squeeze_call_result_112991)
    # SSA join for if statement (line 3812)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 3816)
    # Getting the type of 'out' (line 3816)
    out_112992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3816, 8), 'out')
    # Getting the type of 'None' (line 3816)
    None_112993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3816, 22), 'None')
    
    (may_be_112994, more_types_in_union_112995) = may_not_be_none(out_112992, None_112993)

    if may_be_112994:

        if more_types_in_union_112995:
            # Runtime conditional SSA (line 3816)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 3817):
        
        # Assigning a Call to a Name (line 3817):
        
        # Call to add(...): (line 3817)
        # Processing the call arguments (line 3817)
        # Getting the type of 'x1' (line 3817)
        x1_112997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3817, 20), 'x1', False)
        # Getting the type of 'x2' (line 3817)
        x2_112998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3817, 24), 'x2', False)
        # Processing the call keyword arguments (line 3817)
        # Getting the type of 'out' (line 3817)
        out_112999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3817, 32), 'out', False)
        keyword_113000 = out_112999
        kwargs_113001 = {'out': keyword_113000}
        # Getting the type of 'add' (line 3817)
        add_112996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3817, 16), 'add', False)
        # Calling add(args, kwargs) (line 3817)
        add_call_result_113002 = invoke(stypy.reporting.localization.Localization(__file__, 3817, 16), add_112996, *[x1_112997, x2_112998], **kwargs_113001)
        
        # Assigning a type to the variable 'r' (line 3817)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3817, 12), 'r', add_call_result_113002)

        if more_types_in_union_112995:
            # Runtime conditional SSA for else branch (line 3816)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_112994) or more_types_in_union_112995):
        
        # Assigning a Call to a Name (line 3819):
        
        # Assigning a Call to a Name (line 3819):
        
        # Call to add(...): (line 3819)
        # Processing the call arguments (line 3819)
        # Getting the type of 'x1' (line 3819)
        x1_113004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3819, 20), 'x1', False)
        # Getting the type of 'x2' (line 3819)
        x2_113005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3819, 24), 'x2', False)
        # Processing the call keyword arguments (line 3819)
        kwargs_113006 = {}
        # Getting the type of 'add' (line 3819)
        add_113003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3819, 16), 'add', False)
        # Calling add(args, kwargs) (line 3819)
        add_call_result_113007 = invoke(stypy.reporting.localization.Localization(__file__, 3819, 16), add_113003, *[x1_113004, x2_113005], **kwargs_113006)
        
        # Assigning a type to the variable 'r' (line 3819)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3819, 12), 'r', add_call_result_113007)

        if (may_be_112994 and more_types_in_union_112995):
            # SSA join for if statement (line 3816)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA join for if statement (line 3755)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to any(...): (line 3821)
    # Processing the call arguments (line 3821)
    # Getting the type of 'n' (line 3821)
    n_113010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3821, 14), 'n', False)
    # Processing the call keyword arguments (line 3821)
    kwargs_113011 = {}
    # Getting the type of 'np' (line 3821)
    np_113008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3821, 7), 'np', False)
    # Obtaining the member 'any' of a type (line 3821)
    any_113009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3821, 7), np_113008, 'any')
    # Calling any(args, kwargs) (line 3821)
    any_call_result_113012 = invoke(stypy.reporting.localization.Localization(__file__, 3821, 7), any_113009, *[n_113010], **kwargs_113011)
    
    # Testing the type of an if condition (line 3821)
    if_condition_113013 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3821, 4), any_call_result_113012)
    # Assigning a type to the variable 'if_condition_113013' (line 3821)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3821, 4), 'if_condition_113013', if_condition_113013)
    # SSA begins for if statement (line 3821)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 3822)
    # Processing the call arguments (line 3822)
    str_113016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3822, 22), 'str', 'Invalid value encountered in percentile')
    # Getting the type of 'RuntimeWarning' (line 3823)
    RuntimeWarning_113017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3823, 30), 'RuntimeWarning', False)
    # Processing the call keyword arguments (line 3822)
    kwargs_113018 = {}
    # Getting the type of 'warnings' (line 3822)
    warnings_113014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3822, 8), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 3822)
    warn_113015 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3822, 8), warnings_113014, 'warn')
    # Calling warn(args, kwargs) (line 3822)
    warn_call_result_113019 = invoke(stypy.reporting.localization.Localization(__file__, 3822, 8), warn_113015, *[str_113016, RuntimeWarning_113017], **kwargs_113018)
    
    
    # Getting the type of 'zerod' (line 3824)
    zerod_113020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3824, 11), 'zerod')
    # Testing the type of an if condition (line 3824)
    if_condition_113021 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3824, 8), zerod_113020)
    # Assigning a type to the variable 'if_condition_113021' (line 3824)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3824, 8), 'if_condition_113021', if_condition_113021)
    # SSA begins for if statement (line 3824)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'ap' (line 3825)
    ap_113022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3825, 15), 'ap')
    # Obtaining the member 'ndim' of a type (line 3825)
    ndim_113023 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3825, 15), ap_113022, 'ndim')
    int_113024 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3825, 26), 'int')
    # Applying the binary operator '==' (line 3825)
    result_eq_113025 = python_operator(stypy.reporting.localization.Localization(__file__, 3825, 15), '==', ndim_113023, int_113024)
    
    # Testing the type of an if condition (line 3825)
    if_condition_113026 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3825, 12), result_eq_113025)
    # Assigning a type to the variable 'if_condition_113026' (line 3825)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3825, 12), 'if_condition_113026', if_condition_113026)
    # SSA begins for if statement (line 3825)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Type idiom detected: calculating its left and rigth part (line 3826)
    # Getting the type of 'out' (line 3826)
    out_113027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3826, 16), 'out')
    # Getting the type of 'None' (line 3826)
    None_113028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3826, 30), 'None')
    
    (may_be_113029, more_types_in_union_113030) = may_not_be_none(out_113027, None_113028)

    if may_be_113029:

        if more_types_in_union_113030:
            # Runtime conditional SSA (line 3826)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Subscript (line 3827):
        
        # Assigning a Call to a Subscript (line 3827):
        
        # Call to type(...): (line 3827)
        # Processing the call arguments (line 3827)
        # Getting the type of 'np' (line 3827)
        np_113034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3827, 44), 'np', False)
        # Obtaining the member 'nan' of a type (line 3827)
        nan_113035 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3827, 44), np_113034, 'nan')
        # Processing the call keyword arguments (line 3827)
        kwargs_113036 = {}
        # Getting the type of 'a' (line 3827)
        a_113031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3827, 31), 'a', False)
        # Obtaining the member 'dtype' of a type (line 3827)
        dtype_113032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3827, 31), a_113031, 'dtype')
        # Obtaining the member 'type' of a type (line 3827)
        type_113033 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3827, 31), dtype_113032, 'type')
        # Calling type(args, kwargs) (line 3827)
        type_call_result_113037 = invoke(stypy.reporting.localization.Localization(__file__, 3827, 31), type_113033, *[nan_113035], **kwargs_113036)
        
        # Getting the type of 'out' (line 3827)
        out_113038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3827, 20), 'out')
        Ellipsis_113039 = Ellipsis
        # Storing an element on a container (line 3827)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3827, 20), out_113038, (Ellipsis_113039, type_call_result_113037))
        
        # Assigning a Name to a Name (line 3828):
        
        # Assigning a Name to a Name (line 3828):
        # Getting the type of 'out' (line 3828)
        out_113040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3828, 24), 'out')
        # Assigning a type to the variable 'r' (line 3828)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3828, 20), 'r', out_113040)

        if more_types_in_union_113030:
            # Runtime conditional SSA for else branch (line 3826)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_113029) or more_types_in_union_113030):
        
        # Assigning a Call to a Name (line 3830):
        
        # Assigning a Call to a Name (line 3830):
        
        # Call to type(...): (line 3830)
        # Processing the call arguments (line 3830)
        # Getting the type of 'np' (line 3830)
        np_113044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3830, 37), 'np', False)
        # Obtaining the member 'nan' of a type (line 3830)
        nan_113045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3830, 37), np_113044, 'nan')
        # Processing the call keyword arguments (line 3830)
        kwargs_113046 = {}
        # Getting the type of 'a' (line 3830)
        a_113041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3830, 24), 'a', False)
        # Obtaining the member 'dtype' of a type (line 3830)
        dtype_113042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3830, 24), a_113041, 'dtype')
        # Obtaining the member 'type' of a type (line 3830)
        type_113043 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3830, 24), dtype_113042, 'type')
        # Calling type(args, kwargs) (line 3830)
        type_call_result_113047 = invoke(stypy.reporting.localization.Localization(__file__, 3830, 24), type_113043, *[nan_113045], **kwargs_113046)
        
        # Assigning a type to the variable 'r' (line 3830)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3830, 20), 'r', type_call_result_113047)

        if (may_be_113029 and more_types_in_union_113030):
            # SSA join for if statement (line 3826)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA branch for the else part of an if statement (line 3825)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Subscript (line 3832):
    
    # Assigning a Call to a Subscript (line 3832):
    
    # Call to type(...): (line 3832)
    # Processing the call arguments (line 3832)
    # Getting the type of 'np' (line 3832)
    np_113051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3832, 52), 'np', False)
    # Obtaining the member 'nan' of a type (line 3832)
    nan_113052 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3832, 52), np_113051, 'nan')
    # Processing the call keyword arguments (line 3832)
    kwargs_113053 = {}
    # Getting the type of 'a' (line 3832)
    a_113048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3832, 39), 'a', False)
    # Obtaining the member 'dtype' of a type (line 3832)
    dtype_113049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3832, 39), a_113048, 'dtype')
    # Obtaining the member 'type' of a type (line 3832)
    type_113050 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3832, 39), dtype_113049, 'type')
    # Calling type(args, kwargs) (line 3832)
    type_call_result_113054 = invoke(stypy.reporting.localization.Localization(__file__, 3832, 39), type_113050, *[nan_113052], **kwargs_113053)
    
    # Getting the type of 'r' (line 3832)
    r_113055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3832, 16), 'r')
    Ellipsis_113056 = Ellipsis
    
    # Call to squeeze(...): (line 3832)
    # Processing the call arguments (line 3832)
    int_113059 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3832, 33), 'int')
    # Processing the call keyword arguments (line 3832)
    kwargs_113060 = {}
    # Getting the type of 'n' (line 3832)
    n_113057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3832, 23), 'n', False)
    # Obtaining the member 'squeeze' of a type (line 3832)
    squeeze_113058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3832, 23), n_113057, 'squeeze')
    # Calling squeeze(args, kwargs) (line 3832)
    squeeze_call_result_113061 = invoke(stypy.reporting.localization.Localization(__file__, 3832, 23), squeeze_113058, *[int_113059], **kwargs_113060)
    
    # Storing an element on a container (line 3832)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3832, 16), r_113055, ((Ellipsis_113056, squeeze_call_result_113061), type_call_result_113054))
    # SSA join for if statement (line 3825)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 3824)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'r' (line 3834)
    r_113062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3834, 15), 'r')
    # Obtaining the member 'ndim' of a type (line 3834)
    ndim_113063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3834, 15), r_113062, 'ndim')
    int_113064 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3834, 25), 'int')
    # Applying the binary operator '==' (line 3834)
    result_eq_113065 = python_operator(stypy.reporting.localization.Localization(__file__, 3834, 15), '==', ndim_113063, int_113064)
    
    # Testing the type of an if condition (line 3834)
    if_condition_113066 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3834, 12), result_eq_113065)
    # Assigning a type to the variable 'if_condition_113066' (line 3834)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3834, 12), 'if_condition_113066', if_condition_113066)
    # SSA begins for if statement (line 3834)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Subscript (line 3835):
    
    # Assigning a Call to a Subscript (line 3835):
    
    # Call to type(...): (line 3835)
    # Processing the call arguments (line 3835)
    # Getting the type of 'np' (line 3835)
    np_113070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3835, 36), 'np', False)
    # Obtaining the member 'nan' of a type (line 3835)
    nan_113071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3835, 36), np_113070, 'nan')
    # Processing the call keyword arguments (line 3835)
    kwargs_113072 = {}
    # Getting the type of 'a' (line 3835)
    a_113067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3835, 23), 'a', False)
    # Obtaining the member 'dtype' of a type (line 3835)
    dtype_113068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3835, 23), a_113067, 'dtype')
    # Obtaining the member 'type' of a type (line 3835)
    type_113069 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3835, 23), dtype_113068, 'type')
    # Calling type(args, kwargs) (line 3835)
    type_call_result_113073 = invoke(stypy.reporting.localization.Localization(__file__, 3835, 23), type_113069, *[nan_113071], **kwargs_113072)
    
    # Getting the type of 'r' (line 3835)
    r_113074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3835, 16), 'r')
    slice_113075 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 3835, 16), None, None, None)
    # Storing an element on a container (line 3835)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3835, 16), r_113074, (slice_113075, type_call_result_113073))
    # SSA branch for the else part of an if statement (line 3834)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Subscript (line 3837):
    
    # Assigning a Call to a Subscript (line 3837):
    
    # Call to type(...): (line 3837)
    # Processing the call arguments (line 3837)
    # Getting the type of 'np' (line 3837)
    np_113079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3837, 59), 'np', False)
    # Obtaining the member 'nan' of a type (line 3837)
    nan_113080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3837, 59), np_113079, 'nan')
    # Processing the call keyword arguments (line 3837)
    kwargs_113081 = {}
    # Getting the type of 'a' (line 3837)
    a_113076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3837, 46), 'a', False)
    # Obtaining the member 'dtype' of a type (line 3837)
    dtype_113077 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3837, 46), a_113076, 'dtype')
    # Obtaining the member 'type' of a type (line 3837)
    type_113078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3837, 46), dtype_113077, 'type')
    # Calling type(args, kwargs) (line 3837)
    type_call_result_113082 = invoke(stypy.reporting.localization.Localization(__file__, 3837, 46), type_113078, *[nan_113080], **kwargs_113081)
    
    # Getting the type of 'r' (line 3837)
    r_113083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3837, 16), 'r')
    Ellipsis_113084 = Ellipsis
    
    # Call to repeat(...): (line 3837)
    # Processing the call arguments (line 3837)
    # Getting the type of 'q' (line 3837)
    q_113087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3837, 32), 'q', False)
    # Obtaining the member 'size' of a type (line 3837)
    size_113088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3837, 32), q_113087, 'size')
    int_113089 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3837, 40), 'int')
    # Processing the call keyword arguments (line 3837)
    kwargs_113090 = {}
    # Getting the type of 'n' (line 3837)
    n_113085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3837, 23), 'n', False)
    # Obtaining the member 'repeat' of a type (line 3837)
    repeat_113086 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3837, 23), n_113085, 'repeat')
    # Calling repeat(args, kwargs) (line 3837)
    repeat_call_result_113091 = invoke(stypy.reporting.localization.Localization(__file__, 3837, 23), repeat_113086, *[size_113088, int_113089], **kwargs_113090)
    
    # Storing an element on a container (line 3837)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3837, 16), r_113083, ((Ellipsis_113084, repeat_call_result_113091), type_call_result_113082))
    # SSA join for if statement (line 3834)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3824)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 3821)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'r' (line 3839)
    r_113092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3839, 11), 'r')
    # Assigning a type to the variable 'stypy_return_type' (line 3839)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3839, 4), 'stypy_return_type', r_113092)
    
    # ################# End of '_percentile(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_percentile' in the type store
    # Getting the type of 'stypy_return_type' (line 3698)
    stypy_return_type_113093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3698, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_113093)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_percentile'
    return stypy_return_type_113093

# Assigning a type to the variable '_percentile' (line 3698)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3698, 0), '_percentile', _percentile)

@norecursion
def trapz(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 3842)
    None_113094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3842, 15), 'None')
    float_113095 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3842, 24), 'float')
    int_113096 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3842, 34), 'int')
    defaults = [None_113094, float_113095, int_113096]
    # Create a new context for function 'trapz'
    module_type_store = module_type_store.open_function_context('trapz', 3842, 0, False)
    
    # Passed parameters checking function
    trapz.stypy_localization = localization
    trapz.stypy_type_of_self = None
    trapz.stypy_type_store = module_type_store
    trapz.stypy_function_name = 'trapz'
    trapz.stypy_param_names_list = ['y', 'x', 'dx', 'axis']
    trapz.stypy_varargs_param_name = None
    trapz.stypy_kwargs_param_name = None
    trapz.stypy_call_defaults = defaults
    trapz.stypy_call_varargs = varargs
    trapz.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'trapz', ['y', 'x', 'dx', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'trapz', localization, ['y', 'x', 'dx', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'trapz(...)' code ##################

    str_113097 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3903, (-1)), 'str', '\n    Integrate along the given axis using the composite trapezoidal rule.\n\n    Integrate `y` (`x`) along given axis.\n\n    Parameters\n    ----------\n    y : array_like\n        Input array to integrate.\n    x : array_like, optional\n        The sample points corresponding to the `y` values. If `x` is None,\n        the sample points are assumed to be evenly spaced `dx` apart. The\n        default is None.\n    dx : scalar, optional\n        The spacing between sample points when `x` is None. The default is 1.\n    axis : int, optional\n        The axis along which to integrate.\n\n    Returns\n    -------\n    trapz : float\n        Definite integral as approximated by trapezoidal rule.\n\n    See Also\n    --------\n    sum, cumsum\n\n    Notes\n    -----\n    Image [2]_ illustrates trapezoidal rule -- y-axis locations of points\n    will be taken from `y` array, by default x-axis distances between\n    points will be 1.0, alternatively they can be provided with `x` array\n    or with `dx` scalar.  Return value will be equal to combined area under\n    the red lines.\n\n\n    References\n    ----------\n    .. [1] Wikipedia page: http://en.wikipedia.org/wiki/Trapezoidal_rule\n\n    .. [2] Illustration image:\n           http://en.wikipedia.org/wiki/File:Composite_trapezoidal_rule_illustration.png\n\n    Examples\n    --------\n    >>> np.trapz([1,2,3])\n    4.0\n    >>> np.trapz([1,2,3], x=[4,6,8])\n    8.0\n    >>> np.trapz([1,2,3], dx=2)\n    8.0\n    >>> a = np.arange(6).reshape(2, 3)\n    >>> a\n    array([[0, 1, 2],\n           [3, 4, 5]])\n    >>> np.trapz(a, axis=0)\n    array([ 1.5,  2.5,  3.5])\n    >>> np.trapz(a, axis=1)\n    array([ 2.,  8.])\n\n    ')
    
    # Assigning a Call to a Name (line 3904):
    
    # Assigning a Call to a Name (line 3904):
    
    # Call to asanyarray(...): (line 3904)
    # Processing the call arguments (line 3904)
    # Getting the type of 'y' (line 3904)
    y_113099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3904, 19), 'y', False)
    # Processing the call keyword arguments (line 3904)
    kwargs_113100 = {}
    # Getting the type of 'asanyarray' (line 3904)
    asanyarray_113098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3904, 8), 'asanyarray', False)
    # Calling asanyarray(args, kwargs) (line 3904)
    asanyarray_call_result_113101 = invoke(stypy.reporting.localization.Localization(__file__, 3904, 8), asanyarray_113098, *[y_113099], **kwargs_113100)
    
    # Assigning a type to the variable 'y' (line 3904)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3904, 4), 'y', asanyarray_call_result_113101)
    
    # Type idiom detected: calculating its left and rigth part (line 3905)
    # Getting the type of 'x' (line 3905)
    x_113102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3905, 7), 'x')
    # Getting the type of 'None' (line 3905)
    None_113103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3905, 12), 'None')
    
    (may_be_113104, more_types_in_union_113105) = may_be_none(x_113102, None_113103)

    if may_be_113104:

        if more_types_in_union_113105:
            # Runtime conditional SSA (line 3905)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Name (line 3906):
        
        # Assigning a Name to a Name (line 3906):
        # Getting the type of 'dx' (line 3906)
        dx_113106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3906, 12), 'dx')
        # Assigning a type to the variable 'd' (line 3906)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3906, 8), 'd', dx_113106)

        if more_types_in_union_113105:
            # Runtime conditional SSA for else branch (line 3905)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_113104) or more_types_in_union_113105):
        
        # Assigning a Call to a Name (line 3908):
        
        # Assigning a Call to a Name (line 3908):
        
        # Call to asanyarray(...): (line 3908)
        # Processing the call arguments (line 3908)
        # Getting the type of 'x' (line 3908)
        x_113108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3908, 23), 'x', False)
        # Processing the call keyword arguments (line 3908)
        kwargs_113109 = {}
        # Getting the type of 'asanyarray' (line 3908)
        asanyarray_113107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3908, 12), 'asanyarray', False)
        # Calling asanyarray(args, kwargs) (line 3908)
        asanyarray_call_result_113110 = invoke(stypy.reporting.localization.Localization(__file__, 3908, 12), asanyarray_113107, *[x_113108], **kwargs_113109)
        
        # Assigning a type to the variable 'x' (line 3908)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3908, 8), 'x', asanyarray_call_result_113110)
        
        
        # Getting the type of 'x' (line 3909)
        x_113111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3909, 11), 'x')
        # Obtaining the member 'ndim' of a type (line 3909)
        ndim_113112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3909, 11), x_113111, 'ndim')
        int_113113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3909, 21), 'int')
        # Applying the binary operator '==' (line 3909)
        result_eq_113114 = python_operator(stypy.reporting.localization.Localization(__file__, 3909, 11), '==', ndim_113112, int_113113)
        
        # Testing the type of an if condition (line 3909)
        if_condition_113115 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3909, 8), result_eq_113114)
        # Assigning a type to the variable 'if_condition_113115' (line 3909)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3909, 8), 'if_condition_113115', if_condition_113115)
        # SSA begins for if statement (line 3909)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 3910):
        
        # Assigning a Call to a Name (line 3910):
        
        # Call to diff(...): (line 3910)
        # Processing the call arguments (line 3910)
        # Getting the type of 'x' (line 3910)
        x_113117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3910, 21), 'x', False)
        # Processing the call keyword arguments (line 3910)
        kwargs_113118 = {}
        # Getting the type of 'diff' (line 3910)
        diff_113116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3910, 16), 'diff', False)
        # Calling diff(args, kwargs) (line 3910)
        diff_call_result_113119 = invoke(stypy.reporting.localization.Localization(__file__, 3910, 16), diff_113116, *[x_113117], **kwargs_113118)
        
        # Assigning a type to the variable 'd' (line 3910)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3910, 12), 'd', diff_call_result_113119)
        
        # Assigning a BinOp to a Name (line 3912):
        
        # Assigning a BinOp to a Name (line 3912):
        
        # Obtaining an instance of the builtin type 'list' (line 3912)
        list_113120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3912, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 3912)
        # Adding element type (line 3912)
        int_113121 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3912, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3912, 20), list_113120, int_113121)
        
        # Getting the type of 'y' (line 3912)
        y_113122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3912, 24), 'y')
        # Obtaining the member 'ndim' of a type (line 3912)
        ndim_113123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3912, 24), y_113122, 'ndim')
        # Applying the binary operator '*' (line 3912)
        result_mul_113124 = python_operator(stypy.reporting.localization.Localization(__file__, 3912, 20), '*', list_113120, ndim_113123)
        
        # Assigning a type to the variable 'shape' (line 3912)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3912, 12), 'shape', result_mul_113124)
        
        # Assigning a Subscript to a Subscript (line 3913):
        
        # Assigning a Subscript to a Subscript (line 3913):
        
        # Obtaining the type of the subscript
        int_113125 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3913, 34), 'int')
        # Getting the type of 'd' (line 3913)
        d_113126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3913, 26), 'd')
        # Obtaining the member 'shape' of a type (line 3913)
        shape_113127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3913, 26), d_113126, 'shape')
        # Obtaining the member '__getitem__' of a type (line 3913)
        getitem___113128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3913, 26), shape_113127, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 3913)
        subscript_call_result_113129 = invoke(stypy.reporting.localization.Localization(__file__, 3913, 26), getitem___113128, int_113125)
        
        # Getting the type of 'shape' (line 3913)
        shape_113130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3913, 12), 'shape')
        # Getting the type of 'axis' (line 3913)
        axis_113131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3913, 18), 'axis')
        # Storing an element on a container (line 3913)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3913, 12), shape_113130, (axis_113131, subscript_call_result_113129))
        
        # Assigning a Call to a Name (line 3914):
        
        # Assigning a Call to a Name (line 3914):
        
        # Call to reshape(...): (line 3914)
        # Processing the call arguments (line 3914)
        # Getting the type of 'shape' (line 3914)
        shape_113134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3914, 26), 'shape', False)
        # Processing the call keyword arguments (line 3914)
        kwargs_113135 = {}
        # Getting the type of 'd' (line 3914)
        d_113132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3914, 16), 'd', False)
        # Obtaining the member 'reshape' of a type (line 3914)
        reshape_113133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3914, 16), d_113132, 'reshape')
        # Calling reshape(args, kwargs) (line 3914)
        reshape_call_result_113136 = invoke(stypy.reporting.localization.Localization(__file__, 3914, 16), reshape_113133, *[shape_113134], **kwargs_113135)
        
        # Assigning a type to the variable 'd' (line 3914)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3914, 12), 'd', reshape_call_result_113136)
        # SSA branch for the else part of an if statement (line 3909)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 3916):
        
        # Assigning a Call to a Name (line 3916):
        
        # Call to diff(...): (line 3916)
        # Processing the call arguments (line 3916)
        # Getting the type of 'x' (line 3916)
        x_113138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3916, 21), 'x', False)
        # Processing the call keyword arguments (line 3916)
        # Getting the type of 'axis' (line 3916)
        axis_113139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3916, 29), 'axis', False)
        keyword_113140 = axis_113139
        kwargs_113141 = {'axis': keyword_113140}
        # Getting the type of 'diff' (line 3916)
        diff_113137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3916, 16), 'diff', False)
        # Calling diff(args, kwargs) (line 3916)
        diff_call_result_113142 = invoke(stypy.reporting.localization.Localization(__file__, 3916, 16), diff_113137, *[x_113138], **kwargs_113141)
        
        # Assigning a type to the variable 'd' (line 3916)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3916, 12), 'd', diff_call_result_113142)
        # SSA join for if statement (line 3909)
        module_type_store = module_type_store.join_ssa_context()
        

        if (may_be_113104 and more_types_in_union_113105):
            # SSA join for if statement (line 3905)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 3917):
    
    # Assigning a Call to a Name (line 3917):
    
    # Call to len(...): (line 3917)
    # Processing the call arguments (line 3917)
    # Getting the type of 'y' (line 3917)
    y_113144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3917, 13), 'y', False)
    # Obtaining the member 'shape' of a type (line 3917)
    shape_113145 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3917, 13), y_113144, 'shape')
    # Processing the call keyword arguments (line 3917)
    kwargs_113146 = {}
    # Getting the type of 'len' (line 3917)
    len_113143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3917, 9), 'len', False)
    # Calling len(args, kwargs) (line 3917)
    len_call_result_113147 = invoke(stypy.reporting.localization.Localization(__file__, 3917, 9), len_113143, *[shape_113145], **kwargs_113146)
    
    # Assigning a type to the variable 'nd' (line 3917)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3917, 4), 'nd', len_call_result_113147)
    
    # Assigning a BinOp to a Name (line 3918):
    
    # Assigning a BinOp to a Name (line 3918):
    
    # Obtaining an instance of the builtin type 'list' (line 3918)
    list_113148 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3918, 13), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3918)
    # Adding element type (line 3918)
    
    # Call to slice(...): (line 3918)
    # Processing the call arguments (line 3918)
    # Getting the type of 'None' (line 3918)
    None_113150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3918, 20), 'None', False)
    # Processing the call keyword arguments (line 3918)
    kwargs_113151 = {}
    # Getting the type of 'slice' (line 3918)
    slice_113149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3918, 14), 'slice', False)
    # Calling slice(args, kwargs) (line 3918)
    slice_call_result_113152 = invoke(stypy.reporting.localization.Localization(__file__, 3918, 14), slice_113149, *[None_113150], **kwargs_113151)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3918, 13), list_113148, slice_call_result_113152)
    
    # Getting the type of 'nd' (line 3918)
    nd_113153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3918, 27), 'nd')
    # Applying the binary operator '*' (line 3918)
    result_mul_113154 = python_operator(stypy.reporting.localization.Localization(__file__, 3918, 13), '*', list_113148, nd_113153)
    
    # Assigning a type to the variable 'slice1' (line 3918)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3918, 4), 'slice1', result_mul_113154)
    
    # Assigning a BinOp to a Name (line 3919):
    
    # Assigning a BinOp to a Name (line 3919):
    
    # Obtaining an instance of the builtin type 'list' (line 3919)
    list_113155 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3919, 13), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3919)
    # Adding element type (line 3919)
    
    # Call to slice(...): (line 3919)
    # Processing the call arguments (line 3919)
    # Getting the type of 'None' (line 3919)
    None_113157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3919, 20), 'None', False)
    # Processing the call keyword arguments (line 3919)
    kwargs_113158 = {}
    # Getting the type of 'slice' (line 3919)
    slice_113156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3919, 14), 'slice', False)
    # Calling slice(args, kwargs) (line 3919)
    slice_call_result_113159 = invoke(stypy.reporting.localization.Localization(__file__, 3919, 14), slice_113156, *[None_113157], **kwargs_113158)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3919, 13), list_113155, slice_call_result_113159)
    
    # Getting the type of 'nd' (line 3919)
    nd_113160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3919, 27), 'nd')
    # Applying the binary operator '*' (line 3919)
    result_mul_113161 = python_operator(stypy.reporting.localization.Localization(__file__, 3919, 13), '*', list_113155, nd_113160)
    
    # Assigning a type to the variable 'slice2' (line 3919)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3919, 4), 'slice2', result_mul_113161)
    
    # Assigning a Call to a Subscript (line 3920):
    
    # Assigning a Call to a Subscript (line 3920):
    
    # Call to slice(...): (line 3920)
    # Processing the call arguments (line 3920)
    int_113163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3920, 25), 'int')
    # Getting the type of 'None' (line 3920)
    None_113164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3920, 28), 'None', False)
    # Processing the call keyword arguments (line 3920)
    kwargs_113165 = {}
    # Getting the type of 'slice' (line 3920)
    slice_113162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3920, 19), 'slice', False)
    # Calling slice(args, kwargs) (line 3920)
    slice_call_result_113166 = invoke(stypy.reporting.localization.Localization(__file__, 3920, 19), slice_113162, *[int_113163, None_113164], **kwargs_113165)
    
    # Getting the type of 'slice1' (line 3920)
    slice1_113167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3920, 4), 'slice1')
    # Getting the type of 'axis' (line 3920)
    axis_113168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3920, 11), 'axis')
    # Storing an element on a container (line 3920)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3920, 4), slice1_113167, (axis_113168, slice_call_result_113166))
    
    # Assigning a Call to a Subscript (line 3921):
    
    # Assigning a Call to a Subscript (line 3921):
    
    # Call to slice(...): (line 3921)
    # Processing the call arguments (line 3921)
    # Getting the type of 'None' (line 3921)
    None_113170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3921, 25), 'None', False)
    int_113171 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3921, 31), 'int')
    # Processing the call keyword arguments (line 3921)
    kwargs_113172 = {}
    # Getting the type of 'slice' (line 3921)
    slice_113169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3921, 19), 'slice', False)
    # Calling slice(args, kwargs) (line 3921)
    slice_call_result_113173 = invoke(stypy.reporting.localization.Localization(__file__, 3921, 19), slice_113169, *[None_113170, int_113171], **kwargs_113172)
    
    # Getting the type of 'slice2' (line 3921)
    slice2_113174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3921, 4), 'slice2')
    # Getting the type of 'axis' (line 3921)
    axis_113175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3921, 11), 'axis')
    # Storing an element on a container (line 3921)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3921, 4), slice2_113174, (axis_113175, slice_call_result_113173))
    
    
    # SSA begins for try-except statement (line 3922)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 3923):
    
    # Assigning a Call to a Name (line 3923):
    
    # Call to sum(...): (line 3923)
    # Processing the call arguments (line 3923)
    # Getting the type of 'axis' (line 3923)
    axis_113190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3923, 54), 'axis', False)
    # Processing the call keyword arguments (line 3923)
    kwargs_113191 = {}
    # Getting the type of 'd' (line 3923)
    d_113176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3923, 15), 'd', False)
    
    # Obtaining the type of the subscript
    # Getting the type of 'slice1' (line 3923)
    slice1_113177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3923, 22), 'slice1', False)
    # Getting the type of 'y' (line 3923)
    y_113178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3923, 20), 'y', False)
    # Obtaining the member '__getitem__' of a type (line 3923)
    getitem___113179 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3923, 20), y_113178, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3923)
    subscript_call_result_113180 = invoke(stypy.reporting.localization.Localization(__file__, 3923, 20), getitem___113179, slice1_113177)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'slice2' (line 3923)
    slice2_113181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3923, 34), 'slice2', False)
    # Getting the type of 'y' (line 3923)
    y_113182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3923, 32), 'y', False)
    # Obtaining the member '__getitem__' of a type (line 3923)
    getitem___113183 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3923, 32), y_113182, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3923)
    subscript_call_result_113184 = invoke(stypy.reporting.localization.Localization(__file__, 3923, 32), getitem___113183, slice2_113181)
    
    # Applying the binary operator '+' (line 3923)
    result_add_113185 = python_operator(stypy.reporting.localization.Localization(__file__, 3923, 20), '+', subscript_call_result_113180, subscript_call_result_113184)
    
    # Applying the binary operator '*' (line 3923)
    result_mul_113186 = python_operator(stypy.reporting.localization.Localization(__file__, 3923, 15), '*', d_113176, result_add_113185)
    
    float_113187 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3923, 45), 'float')
    # Applying the binary operator 'div' (line 3923)
    result_div_113188 = python_operator(stypy.reporting.localization.Localization(__file__, 3923, 43), 'div', result_mul_113186, float_113187)
    
    # Obtaining the member 'sum' of a type (line 3923)
    sum_113189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3923, 43), result_div_113188, 'sum')
    # Calling sum(args, kwargs) (line 3923)
    sum_call_result_113192 = invoke(stypy.reporting.localization.Localization(__file__, 3923, 43), sum_113189, *[axis_113190], **kwargs_113191)
    
    # Assigning a type to the variable 'ret' (line 3923)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3923, 8), 'ret', sum_call_result_113192)
    # SSA branch for the except part of a try statement (line 3922)
    # SSA branch for the except 'ValueError' branch of a try statement (line 3922)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Call to a Name (line 3926):
    
    # Assigning a Call to a Name (line 3926):
    
    # Call to asarray(...): (line 3926)
    # Processing the call arguments (line 3926)
    # Getting the type of 'd' (line 3926)
    d_113195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3926, 23), 'd', False)
    # Processing the call keyword arguments (line 3926)
    kwargs_113196 = {}
    # Getting the type of 'np' (line 3926)
    np_113193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3926, 12), 'np', False)
    # Obtaining the member 'asarray' of a type (line 3926)
    asarray_113194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3926, 12), np_113193, 'asarray')
    # Calling asarray(args, kwargs) (line 3926)
    asarray_call_result_113197 = invoke(stypy.reporting.localization.Localization(__file__, 3926, 12), asarray_113194, *[d_113195], **kwargs_113196)
    
    # Assigning a type to the variable 'd' (line 3926)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3926, 8), 'd', asarray_call_result_113197)
    
    # Assigning a Call to a Name (line 3927):
    
    # Assigning a Call to a Name (line 3927):
    
    # Call to asarray(...): (line 3927)
    # Processing the call arguments (line 3927)
    # Getting the type of 'y' (line 3927)
    y_113200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3927, 23), 'y', False)
    # Processing the call keyword arguments (line 3927)
    kwargs_113201 = {}
    # Getting the type of 'np' (line 3927)
    np_113198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3927, 12), 'np', False)
    # Obtaining the member 'asarray' of a type (line 3927)
    asarray_113199 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3927, 12), np_113198, 'asarray')
    # Calling asarray(args, kwargs) (line 3927)
    asarray_call_result_113202 = invoke(stypy.reporting.localization.Localization(__file__, 3927, 12), asarray_113199, *[y_113200], **kwargs_113201)
    
    # Assigning a type to the variable 'y' (line 3927)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3927, 8), 'y', asarray_call_result_113202)
    
    # Assigning a Call to a Name (line 3928):
    
    # Assigning a Call to a Name (line 3928):
    
    # Call to reduce(...): (line 3928)
    # Processing the call arguments (line 3928)
    # Getting the type of 'd' (line 3928)
    d_113205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3928, 25), 'd', False)
    
    # Obtaining the type of the subscript
    # Getting the type of 'slice1' (line 3928)
    slice1_113206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3928, 32), 'slice1', False)
    # Getting the type of 'y' (line 3928)
    y_113207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3928, 30), 'y', False)
    # Obtaining the member '__getitem__' of a type (line 3928)
    getitem___113208 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3928, 30), y_113207, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3928)
    subscript_call_result_113209 = invoke(stypy.reporting.localization.Localization(__file__, 3928, 30), getitem___113208, slice1_113206)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'slice2' (line 3928)
    slice2_113210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3928, 42), 'slice2', False)
    # Getting the type of 'y' (line 3928)
    y_113211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3928, 40), 'y', False)
    # Obtaining the member '__getitem__' of a type (line 3928)
    getitem___113212 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3928, 40), y_113211, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3928)
    subscript_call_result_113213 = invoke(stypy.reporting.localization.Localization(__file__, 3928, 40), getitem___113212, slice2_113210)
    
    # Applying the binary operator '+' (line 3928)
    result_add_113214 = python_operator(stypy.reporting.localization.Localization(__file__, 3928, 30), '+', subscript_call_result_113209, subscript_call_result_113213)
    
    # Applying the binary operator '*' (line 3928)
    result_mul_113215 = python_operator(stypy.reporting.localization.Localization(__file__, 3928, 25), '*', d_113205, result_add_113214)
    
    float_113216 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3928, 51), 'float')
    # Applying the binary operator 'div' (line 3928)
    result_div_113217 = python_operator(stypy.reporting.localization.Localization(__file__, 3928, 50), 'div', result_mul_113215, float_113216)
    
    # Getting the type of 'axis' (line 3928)
    axis_113218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3928, 56), 'axis', False)
    # Processing the call keyword arguments (line 3928)
    kwargs_113219 = {}
    # Getting the type of 'add' (line 3928)
    add_113203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3928, 14), 'add', False)
    # Obtaining the member 'reduce' of a type (line 3928)
    reduce_113204 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3928, 14), add_113203, 'reduce')
    # Calling reduce(args, kwargs) (line 3928)
    reduce_call_result_113220 = invoke(stypy.reporting.localization.Localization(__file__, 3928, 14), reduce_113204, *[result_div_113217, axis_113218], **kwargs_113219)
    
    # Assigning a type to the variable 'ret' (line 3928)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3928, 8), 'ret', reduce_call_result_113220)
    # SSA join for try-except statement (line 3922)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'ret' (line 3929)
    ret_113221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3929, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3929)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3929, 4), 'stypy_return_type', ret_113221)
    
    # ################# End of 'trapz(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'trapz' in the type store
    # Getting the type of 'stypy_return_type' (line 3842)
    stypy_return_type_113222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3842, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_113222)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'trapz'
    return stypy_return_type_113222

# Assigning a type to the variable 'trapz' (line 3842)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3842, 0), 'trapz', trapz)

@norecursion
def add_newdoc(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'add_newdoc'
    module_type_store = module_type_store.open_function_context('add_newdoc', 3933, 0, False)
    
    # Passed parameters checking function
    add_newdoc.stypy_localization = localization
    add_newdoc.stypy_type_of_self = None
    add_newdoc.stypy_type_store = module_type_store
    add_newdoc.stypy_function_name = 'add_newdoc'
    add_newdoc.stypy_param_names_list = ['place', 'obj', 'doc']
    add_newdoc.stypy_varargs_param_name = None
    add_newdoc.stypy_kwargs_param_name = None
    add_newdoc.stypy_call_defaults = defaults
    add_newdoc.stypy_call_varargs = varargs
    add_newdoc.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'add_newdoc', ['place', 'obj', 'doc'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'add_newdoc', localization, ['place', 'obj', 'doc'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'add_newdoc(...)' code ##################

    str_113223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3953, (-1)), 'str', '\n    Adds documentation to obj which is in module place.\n\n    If doc is a string add it to obj as a docstring\n\n    If doc is a tuple, then the first element is interpreted as\n       an attribute of obj and the second as the docstring\n          (method, docstring)\n\n    If doc is a list, then each element of the list should be a\n       sequence of length two --> [(method1, docstring1),\n       (method2, docstring2), ...]\n\n    This routine never raises an error.\n\n    This routine cannot modify read-only docstrings, as appear\n    in new-style classes or built-in functions. Because this\n    routine never raises an error the caller must check manually\n    that the docstrings were changed.\n    ')
    
    
    # SSA begins for try-except statement (line 3954)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 3955):
    
    # Assigning a Call to a Name (line 3955):
    
    # Call to getattr(...): (line 3955)
    # Processing the call arguments (line 3955)
    
    # Call to __import__(...): (line 3955)
    # Processing the call arguments (line 3955)
    # Getting the type of 'place' (line 3955)
    place_113226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3955, 33), 'place', False)
    
    # Call to globals(...): (line 3955)
    # Processing the call keyword arguments (line 3955)
    kwargs_113228 = {}
    # Getting the type of 'globals' (line 3955)
    globals_113227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3955, 40), 'globals', False)
    # Calling globals(args, kwargs) (line 3955)
    globals_call_result_113229 = invoke(stypy.reporting.localization.Localization(__file__, 3955, 40), globals_113227, *[], **kwargs_113228)
    
    
    # Obtaining an instance of the builtin type 'dict' (line 3955)
    dict_113230 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3955, 51), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 3955)
    
    
    # Obtaining an instance of the builtin type 'list' (line 3955)
    list_113231 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3955, 55), 'list')
    # Adding type elements to the builtin type 'list' instance (line 3955)
    # Adding element type (line 3955)
    # Getting the type of 'obj' (line 3955)
    obj_113232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3955, 56), 'obj', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3955, 55), list_113231, obj_113232)
    
    # Processing the call keyword arguments (line 3955)
    kwargs_113233 = {}
    # Getting the type of '__import__' (line 3955)
    import___113225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3955, 22), '__import__', False)
    # Calling __import__(args, kwargs) (line 3955)
    import___call_result_113234 = invoke(stypy.reporting.localization.Localization(__file__, 3955, 22), import___113225, *[place_113226, globals_call_result_113229, dict_113230, list_113231], **kwargs_113233)
    
    # Getting the type of 'obj' (line 3955)
    obj_113235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3955, 63), 'obj', False)
    # Processing the call keyword arguments (line 3955)
    kwargs_113236 = {}
    # Getting the type of 'getattr' (line 3955)
    getattr_113224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3955, 14), 'getattr', False)
    # Calling getattr(args, kwargs) (line 3955)
    getattr_call_result_113237 = invoke(stypy.reporting.localization.Localization(__file__, 3955, 14), getattr_113224, *[import___call_result_113234, obj_113235], **kwargs_113236)
    
    # Assigning a type to the variable 'new' (line 3955)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3955, 8), 'new', getattr_call_result_113237)
    
    # Type idiom detected: calculating its left and rigth part (line 3956)
    # Getting the type of 'str' (line 3956)
    str_113238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3956, 27), 'str')
    # Getting the type of 'doc' (line 3956)
    doc_113239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3956, 22), 'doc')
    
    (may_be_113240, more_types_in_union_113241) = may_be_subtype(str_113238, doc_113239)

    if may_be_113240:

        if more_types_in_union_113241:
            # Runtime conditional SSA (line 3956)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'doc' (line 3956)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3956, 8), 'doc', remove_not_subtype_from_union(doc_113239, str))
        
        # Call to add_docstring(...): (line 3957)
        # Processing the call arguments (line 3957)
        # Getting the type of 'new' (line 3957)
        new_113243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3957, 26), 'new', False)
        
        # Call to strip(...): (line 3957)
        # Processing the call keyword arguments (line 3957)
        kwargs_113246 = {}
        # Getting the type of 'doc' (line 3957)
        doc_113244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3957, 31), 'doc', False)
        # Obtaining the member 'strip' of a type (line 3957)
        strip_113245 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3957, 31), doc_113244, 'strip')
        # Calling strip(args, kwargs) (line 3957)
        strip_call_result_113247 = invoke(stypy.reporting.localization.Localization(__file__, 3957, 31), strip_113245, *[], **kwargs_113246)
        
        # Processing the call keyword arguments (line 3957)
        kwargs_113248 = {}
        # Getting the type of 'add_docstring' (line 3957)
        add_docstring_113242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3957, 12), 'add_docstring', False)
        # Calling add_docstring(args, kwargs) (line 3957)
        add_docstring_call_result_113249 = invoke(stypy.reporting.localization.Localization(__file__, 3957, 12), add_docstring_113242, *[new_113243, strip_call_result_113247], **kwargs_113248)
        

        if more_types_in_union_113241:
            # Runtime conditional SSA for else branch (line 3956)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_113240) or more_types_in_union_113241):
        # Assigning a type to the variable 'doc' (line 3956)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3956, 8), 'doc', remove_subtype_from_union(doc_113239, str))
        
        # Type idiom detected: calculating its left and rigth part (line 3958)
        # Getting the type of 'tuple' (line 3958)
        tuple_113250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3958, 29), 'tuple')
        # Getting the type of 'doc' (line 3958)
        doc_113251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3958, 24), 'doc')
        
        (may_be_113252, more_types_in_union_113253) = may_be_subtype(tuple_113250, doc_113251)

        if may_be_113252:

            if more_types_in_union_113253:
                # Runtime conditional SSA (line 3958)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'doc' (line 3958)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3958, 13), 'doc', remove_not_subtype_from_union(doc_113251, tuple))
            
            # Call to add_docstring(...): (line 3959)
            # Processing the call arguments (line 3959)
            
            # Call to getattr(...): (line 3959)
            # Processing the call arguments (line 3959)
            # Getting the type of 'new' (line 3959)
            new_113256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3959, 34), 'new', False)
            
            # Obtaining the type of the subscript
            int_113257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3959, 43), 'int')
            # Getting the type of 'doc' (line 3959)
            doc_113258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3959, 39), 'doc', False)
            # Obtaining the member '__getitem__' of a type (line 3959)
            getitem___113259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3959, 39), doc_113258, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3959)
            subscript_call_result_113260 = invoke(stypy.reporting.localization.Localization(__file__, 3959, 39), getitem___113259, int_113257)
            
            # Processing the call keyword arguments (line 3959)
            kwargs_113261 = {}
            # Getting the type of 'getattr' (line 3959)
            getattr_113255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3959, 26), 'getattr', False)
            # Calling getattr(args, kwargs) (line 3959)
            getattr_call_result_113262 = invoke(stypy.reporting.localization.Localization(__file__, 3959, 26), getattr_113255, *[new_113256, subscript_call_result_113260], **kwargs_113261)
            
            
            # Call to strip(...): (line 3959)
            # Processing the call keyword arguments (line 3959)
            kwargs_113268 = {}
            
            # Obtaining the type of the subscript
            int_113263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3959, 52), 'int')
            # Getting the type of 'doc' (line 3959)
            doc_113264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3959, 48), 'doc', False)
            # Obtaining the member '__getitem__' of a type (line 3959)
            getitem___113265 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3959, 48), doc_113264, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 3959)
            subscript_call_result_113266 = invoke(stypy.reporting.localization.Localization(__file__, 3959, 48), getitem___113265, int_113263)
            
            # Obtaining the member 'strip' of a type (line 3959)
            strip_113267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3959, 48), subscript_call_result_113266, 'strip')
            # Calling strip(args, kwargs) (line 3959)
            strip_call_result_113269 = invoke(stypy.reporting.localization.Localization(__file__, 3959, 48), strip_113267, *[], **kwargs_113268)
            
            # Processing the call keyword arguments (line 3959)
            kwargs_113270 = {}
            # Getting the type of 'add_docstring' (line 3959)
            add_docstring_113254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3959, 12), 'add_docstring', False)
            # Calling add_docstring(args, kwargs) (line 3959)
            add_docstring_call_result_113271 = invoke(stypy.reporting.localization.Localization(__file__, 3959, 12), add_docstring_113254, *[getattr_call_result_113262, strip_call_result_113269], **kwargs_113270)
            

            if more_types_in_union_113253:
                # Runtime conditional SSA for else branch (line 3958)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_113252) or more_types_in_union_113253):
            # Assigning a type to the variable 'doc' (line 3958)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3958, 13), 'doc', remove_subtype_from_union(doc_113251, tuple))
            
            # Type idiom detected: calculating its left and rigth part (line 3960)
            # Getting the type of 'list' (line 3960)
            list_113272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3960, 29), 'list')
            # Getting the type of 'doc' (line 3960)
            doc_113273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3960, 24), 'doc')
            
            (may_be_113274, more_types_in_union_113275) = may_be_subtype(list_113272, doc_113273)

            if may_be_113274:

                if more_types_in_union_113275:
                    # Runtime conditional SSA (line 3960)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                # Assigning a type to the variable 'doc' (line 3960)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3960, 13), 'doc', remove_not_subtype_from_union(doc_113273, list))
                
                # Getting the type of 'doc' (line 3961)
                doc_113276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3961, 23), 'doc')
                # Testing the type of a for loop iterable (line 3961)
                is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 3961, 12), doc_113276)
                # Getting the type of the for loop variable (line 3961)
                for_loop_var_113277 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 3961, 12), doc_113276)
                # Assigning a type to the variable 'val' (line 3961)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3961, 12), 'val', for_loop_var_113277)
                # SSA begins for a for statement (line 3961)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
                
                # Call to add_docstring(...): (line 3962)
                # Processing the call arguments (line 3962)
                
                # Call to getattr(...): (line 3962)
                # Processing the call arguments (line 3962)
                # Getting the type of 'new' (line 3962)
                new_113280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3962, 38), 'new', False)
                
                # Obtaining the type of the subscript
                int_113281 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3962, 47), 'int')
                # Getting the type of 'val' (line 3962)
                val_113282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3962, 43), 'val', False)
                # Obtaining the member '__getitem__' of a type (line 3962)
                getitem___113283 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3962, 43), val_113282, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 3962)
                subscript_call_result_113284 = invoke(stypy.reporting.localization.Localization(__file__, 3962, 43), getitem___113283, int_113281)
                
                # Processing the call keyword arguments (line 3962)
                kwargs_113285 = {}
                # Getting the type of 'getattr' (line 3962)
                getattr_113279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3962, 30), 'getattr', False)
                # Calling getattr(args, kwargs) (line 3962)
                getattr_call_result_113286 = invoke(stypy.reporting.localization.Localization(__file__, 3962, 30), getattr_113279, *[new_113280, subscript_call_result_113284], **kwargs_113285)
                
                
                # Call to strip(...): (line 3962)
                # Processing the call keyword arguments (line 3962)
                kwargs_113292 = {}
                
                # Obtaining the type of the subscript
                int_113287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3962, 56), 'int')
                # Getting the type of 'val' (line 3962)
                val_113288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3962, 52), 'val', False)
                # Obtaining the member '__getitem__' of a type (line 3962)
                getitem___113289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3962, 52), val_113288, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 3962)
                subscript_call_result_113290 = invoke(stypy.reporting.localization.Localization(__file__, 3962, 52), getitem___113289, int_113287)
                
                # Obtaining the member 'strip' of a type (line 3962)
                strip_113291 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3962, 52), subscript_call_result_113290, 'strip')
                # Calling strip(args, kwargs) (line 3962)
                strip_call_result_113293 = invoke(stypy.reporting.localization.Localization(__file__, 3962, 52), strip_113291, *[], **kwargs_113292)
                
                # Processing the call keyword arguments (line 3962)
                kwargs_113294 = {}
                # Getting the type of 'add_docstring' (line 3962)
                add_docstring_113278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3962, 16), 'add_docstring', False)
                # Calling add_docstring(args, kwargs) (line 3962)
                add_docstring_call_result_113295 = invoke(stypy.reporting.localization.Localization(__file__, 3962, 16), add_docstring_113278, *[getattr_call_result_113286, strip_call_result_113293], **kwargs_113294)
                
                # SSA join for a for statement
                module_type_store = module_type_store.join_ssa_context()
                

                if more_types_in_union_113275:
                    # SSA join for if statement (line 3960)
                    module_type_store = module_type_store.join_ssa_context()


            

            if (may_be_113252 and more_types_in_union_113253):
                # SSA join for if statement (line 3958)
                module_type_store = module_type_store.join_ssa_context()


        

        if (may_be_113240 and more_types_in_union_113241):
            # SSA join for if statement (line 3956)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA branch for the except part of a try statement (line 3954)
    # SSA branch for the except '<any exception>' branch of a try statement (line 3954)
    module_type_store.open_ssa_branch('except')
    pass
    # SSA join for try-except statement (line 3954)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'add_newdoc(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'add_newdoc' in the type store
    # Getting the type of 'stypy_return_type' (line 3933)
    stypy_return_type_113296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3933, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_113296)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'add_newdoc'
    return stypy_return_type_113296

# Assigning a type to the variable 'add_newdoc' (line 3933)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3933, 0), 'add_newdoc', add_newdoc)

@norecursion
def meshgrid(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'meshgrid'
    module_type_store = module_type_store.open_function_context('meshgrid', 3968, 0, False)
    
    # Passed parameters checking function
    meshgrid.stypy_localization = localization
    meshgrid.stypy_type_of_self = None
    meshgrid.stypy_type_store = module_type_store
    meshgrid.stypy_function_name = 'meshgrid'
    meshgrid.stypy_param_names_list = []
    meshgrid.stypy_varargs_param_name = 'xi'
    meshgrid.stypy_kwargs_param_name = 'kwargs'
    meshgrid.stypy_call_defaults = defaults
    meshgrid.stypy_call_varargs = varargs
    meshgrid.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'meshgrid', [], 'xi', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'meshgrid', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'meshgrid(...)' code ##################

    str_113297 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4069, (-1)), 'str', '\n    Return coordinate matrices from coordinate vectors.\n\n    Make N-D coordinate arrays for vectorized evaluations of\n    N-D scalar/vector fields over N-D grids, given\n    one-dimensional coordinate arrays x1, x2,..., xn.\n\n    .. versionchanged:: 1.9\n       1-D and 0-D cases are allowed.\n\n    Parameters\n    ----------\n    x1, x2,..., xn : array_like\n        1-D arrays representing the coordinates of a grid.\n    indexing : {\'xy\', \'ij\'}, optional\n        Cartesian (\'xy\', default) or matrix (\'ij\') indexing of output.\n        See Notes for more details.\n\n        .. versionadded:: 1.7.0\n    sparse : bool, optional\n        If True a sparse grid is returned in order to conserve memory.\n        Default is False.\n\n        .. versionadded:: 1.7.0\n    copy : bool, optional\n        If False, a view into the original arrays are returned in order to\n        conserve memory.  Default is True.  Please note that\n        ``sparse=False, copy=False`` will likely return non-contiguous\n        arrays.  Furthermore, more than one element of a broadcast array\n        may refer to a single memory location.  If you need to write to the\n        arrays, make copies first.\n\n        .. versionadded:: 1.7.0\n\n    Returns\n    -------\n    X1, X2,..., XN : ndarray\n        For vectors `x1`, `x2`,..., \'xn\' with lengths ``Ni=len(xi)`` ,\n        return ``(N1, N2, N3,...Nn)`` shaped arrays if indexing=\'ij\'\n        or ``(N2, N1, N3,...Nn)`` shaped arrays if indexing=\'xy\'\n        with the elements of `xi` repeated to fill the matrix along\n        the first dimension for `x1`, the second for `x2` and so on.\n\n    Notes\n    -----\n    This function supports both indexing conventions through the indexing\n    keyword argument.  Giving the string \'ij\' returns a meshgrid with\n    matrix indexing, while \'xy\' returns a meshgrid with Cartesian indexing.\n    In the 2-D case with inputs of length M and N, the outputs are of shape\n    (N, M) for \'xy\' indexing and (M, N) for \'ij\' indexing.  In the 3-D case\n    with inputs of length M, N and P, outputs are of shape (N, M, P) for\n    \'xy\' indexing and (M, N, P) for \'ij\' indexing.  The difference is\n    illustrated by the following code snippet::\n\n        xv, yv = meshgrid(x, y, sparse=False, indexing=\'ij\')\n        for i in range(nx):\n            for j in range(ny):\n                # treat xv[i,j], yv[i,j]\n\n        xv, yv = meshgrid(x, y, sparse=False, indexing=\'xy\')\n        for i in range(nx):\n            for j in range(ny):\n                # treat xv[j,i], yv[j,i]\n\n    In the 1-D and 0-D case, the indexing and sparse keywords have no effect.\n\n    See Also\n    --------\n    index_tricks.mgrid : Construct a multi-dimensional "meshgrid"\n                     using indexing notation.\n    index_tricks.ogrid : Construct an open multi-dimensional "meshgrid"\n                     using indexing notation.\n\n    Examples\n    --------\n    >>> nx, ny = (3, 2)\n    >>> x = np.linspace(0, 1, nx)\n    >>> y = np.linspace(0, 1, ny)\n    >>> xv, yv = meshgrid(x, y)\n    >>> xv\n    array([[ 0. ,  0.5,  1. ],\n           [ 0. ,  0.5,  1. ]])\n    >>> yv\n    array([[ 0.,  0.,  0.],\n           [ 1.,  1.,  1.]])\n    >>> xv, yv = meshgrid(x, y, sparse=True)  # make sparse output arrays\n    >>> xv\n    array([[ 0. ,  0.5,  1. ]])\n    >>> yv\n    array([[ 0.],\n           [ 1.]])\n\n    `meshgrid` is very useful to evaluate functions on a grid.\n\n    >>> x = np.arange(-5, 5, 0.1)\n    >>> y = np.arange(-5, 5, 0.1)\n    >>> xx, yy = meshgrid(x, y, sparse=True)\n    >>> z = np.sin(xx**2 + yy**2) / (xx**2 + yy**2)\n    >>> h = plt.contourf(x,y,z)\n\n    ')
    
    # Assigning a Call to a Name (line 4070):
    
    # Assigning a Call to a Name (line 4070):
    
    # Call to len(...): (line 4070)
    # Processing the call arguments (line 4070)
    # Getting the type of 'xi' (line 4070)
    xi_113299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4070, 15), 'xi', False)
    # Processing the call keyword arguments (line 4070)
    kwargs_113300 = {}
    # Getting the type of 'len' (line 4070)
    len_113298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4070, 11), 'len', False)
    # Calling len(args, kwargs) (line 4070)
    len_call_result_113301 = invoke(stypy.reporting.localization.Localization(__file__, 4070, 11), len_113298, *[xi_113299], **kwargs_113300)
    
    # Assigning a type to the variable 'ndim' (line 4070)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4070, 4), 'ndim', len_call_result_113301)
    
    # Assigning a Call to a Name (line 4072):
    
    # Assigning a Call to a Name (line 4072):
    
    # Call to pop(...): (line 4072)
    # Processing the call arguments (line 4072)
    str_113304 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4072, 23), 'str', 'copy')
    # Getting the type of 'True' (line 4072)
    True_113305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4072, 31), 'True', False)
    # Processing the call keyword arguments (line 4072)
    kwargs_113306 = {}
    # Getting the type of 'kwargs' (line 4072)
    kwargs_113302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4072, 12), 'kwargs', False)
    # Obtaining the member 'pop' of a type (line 4072)
    pop_113303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4072, 12), kwargs_113302, 'pop')
    # Calling pop(args, kwargs) (line 4072)
    pop_call_result_113307 = invoke(stypy.reporting.localization.Localization(__file__, 4072, 12), pop_113303, *[str_113304, True_113305], **kwargs_113306)
    
    # Assigning a type to the variable 'copy_' (line 4072)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4072, 4), 'copy_', pop_call_result_113307)
    
    # Assigning a Call to a Name (line 4073):
    
    # Assigning a Call to a Name (line 4073):
    
    # Call to pop(...): (line 4073)
    # Processing the call arguments (line 4073)
    str_113310 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4073, 24), 'str', 'sparse')
    # Getting the type of 'False' (line 4073)
    False_113311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4073, 34), 'False', False)
    # Processing the call keyword arguments (line 4073)
    kwargs_113312 = {}
    # Getting the type of 'kwargs' (line 4073)
    kwargs_113308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4073, 13), 'kwargs', False)
    # Obtaining the member 'pop' of a type (line 4073)
    pop_113309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4073, 13), kwargs_113308, 'pop')
    # Calling pop(args, kwargs) (line 4073)
    pop_call_result_113313 = invoke(stypy.reporting.localization.Localization(__file__, 4073, 13), pop_113309, *[str_113310, False_113311], **kwargs_113312)
    
    # Assigning a type to the variable 'sparse' (line 4073)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4073, 4), 'sparse', pop_call_result_113313)
    
    # Assigning a Call to a Name (line 4074):
    
    # Assigning a Call to a Name (line 4074):
    
    # Call to pop(...): (line 4074)
    # Processing the call arguments (line 4074)
    str_113316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4074, 26), 'str', 'indexing')
    str_113317 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4074, 38), 'str', 'xy')
    # Processing the call keyword arguments (line 4074)
    kwargs_113318 = {}
    # Getting the type of 'kwargs' (line 4074)
    kwargs_113314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4074, 15), 'kwargs', False)
    # Obtaining the member 'pop' of a type (line 4074)
    pop_113315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4074, 15), kwargs_113314, 'pop')
    # Calling pop(args, kwargs) (line 4074)
    pop_call_result_113319 = invoke(stypy.reporting.localization.Localization(__file__, 4074, 15), pop_113315, *[str_113316, str_113317], **kwargs_113318)
    
    # Assigning a type to the variable 'indexing' (line 4074)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4074, 4), 'indexing', pop_call_result_113319)
    
    # Getting the type of 'kwargs' (line 4076)
    kwargs_113320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4076, 7), 'kwargs')
    # Testing the type of an if condition (line 4076)
    if_condition_113321 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4076, 4), kwargs_113320)
    # Assigning a type to the variable 'if_condition_113321' (line 4076)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4076, 4), 'if_condition_113321', if_condition_113321)
    # SSA begins for if statement (line 4076)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to TypeError(...): (line 4077)
    # Processing the call arguments (line 4077)
    str_113323 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4077, 24), 'str', "meshgrid() got an unexpected keyword argument '%s'")
    
    # Obtaining an instance of the builtin type 'tuple' (line 4078)
    tuple_113324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4078, 27), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 4078)
    # Adding element type (line 4078)
    
    # Obtaining the type of the subscript
    int_113325 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4078, 40), 'int')
    
    # Call to list(...): (line 4078)
    # Processing the call arguments (line 4078)
    # Getting the type of 'kwargs' (line 4078)
    kwargs_113327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4078, 32), 'kwargs', False)
    # Processing the call keyword arguments (line 4078)
    kwargs_113328 = {}
    # Getting the type of 'list' (line 4078)
    list_113326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4078, 27), 'list', False)
    # Calling list(args, kwargs) (line 4078)
    list_call_result_113329 = invoke(stypy.reporting.localization.Localization(__file__, 4078, 27), list_113326, *[kwargs_113327], **kwargs_113328)
    
    # Obtaining the member '__getitem__' of a type (line 4078)
    getitem___113330 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4078, 27), list_call_result_113329, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4078)
    subscript_call_result_113331 = invoke(stypy.reporting.localization.Localization(__file__, 4078, 27), getitem___113330, int_113325)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4078, 27), tuple_113324, subscript_call_result_113331)
    
    # Applying the binary operator '%' (line 4077)
    result_mod_113332 = python_operator(stypy.reporting.localization.Localization(__file__, 4077, 24), '%', str_113323, tuple_113324)
    
    # Processing the call keyword arguments (line 4077)
    kwargs_113333 = {}
    # Getting the type of 'TypeError' (line 4077)
    TypeError_113322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4077, 14), 'TypeError', False)
    # Calling TypeError(args, kwargs) (line 4077)
    TypeError_call_result_113334 = invoke(stypy.reporting.localization.Localization(__file__, 4077, 14), TypeError_113322, *[result_mod_113332], **kwargs_113333)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 4077, 8), TypeError_call_result_113334, 'raise parameter', BaseException)
    # SSA join for if statement (line 4076)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'indexing' (line 4080)
    indexing_113335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4080, 7), 'indexing')
    
    # Obtaining an instance of the builtin type 'list' (line 4080)
    list_113336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4080, 23), 'list')
    # Adding type elements to the builtin type 'list' instance (line 4080)
    # Adding element type (line 4080)
    str_113337 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4080, 24), 'str', 'xy')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4080, 23), list_113336, str_113337)
    # Adding element type (line 4080)
    str_113338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4080, 30), 'str', 'ij')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4080, 23), list_113336, str_113338)
    
    # Applying the binary operator 'notin' (line 4080)
    result_contains_113339 = python_operator(stypy.reporting.localization.Localization(__file__, 4080, 7), 'notin', indexing_113335, list_113336)
    
    # Testing the type of an if condition (line 4080)
    if_condition_113340 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4080, 4), result_contains_113339)
    # Assigning a type to the variable 'if_condition_113340' (line 4080)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4080, 4), 'if_condition_113340', if_condition_113340)
    # SSA begins for if statement (line 4080)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 4081)
    # Processing the call arguments (line 4081)
    str_113342 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4082, 12), 'str', "Valid values for `indexing` are 'xy' and 'ij'.")
    # Processing the call keyword arguments (line 4081)
    kwargs_113343 = {}
    # Getting the type of 'ValueError' (line 4081)
    ValueError_113341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4081, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 4081)
    ValueError_call_result_113344 = invoke(stypy.reporting.localization.Localization(__file__, 4081, 14), ValueError_113341, *[str_113342], **kwargs_113343)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 4081, 8), ValueError_call_result_113344, 'raise parameter', BaseException)
    # SSA join for if statement (line 4080)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 4084):
    
    # Assigning a BinOp to a Name (line 4084):
    
    # Obtaining an instance of the builtin type 'tuple' (line 4084)
    tuple_113345 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4084, 10), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 4084)
    # Adding element type (line 4084)
    int_113346 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4084, 10), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4084, 10), tuple_113345, int_113346)
    
    # Getting the type of 'ndim' (line 4084)
    ndim_113347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4084, 16), 'ndim')
    # Applying the binary operator '*' (line 4084)
    result_mul_113348 = python_operator(stypy.reporting.localization.Localization(__file__, 4084, 9), '*', tuple_113345, ndim_113347)
    
    # Assigning a type to the variable 's0' (line 4084)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4084, 4), 's0', result_mul_113348)
    
    # Assigning a ListComp to a Name (line 4085):
    
    # Assigning a ListComp to a Name (line 4085):
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to enumerate(...): (line 4086)
    # Processing the call arguments (line 4086)
    # Getting the type of 'xi' (line 4086)
    xi_113375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4086, 36), 'xi', False)
    # Processing the call keyword arguments (line 4086)
    kwargs_113376 = {}
    # Getting the type of 'enumerate' (line 4086)
    enumerate_113374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4086, 26), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 4086)
    enumerate_call_result_113377 = invoke(stypy.reporting.localization.Localization(__file__, 4086, 26), enumerate_113374, *[xi_113375], **kwargs_113376)
    
    comprehension_113378 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4085, 14), enumerate_call_result_113377)
    # Assigning a type to the variable 'i' (line 4085)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4085, 14), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4085, 14), comprehension_113378))
    # Assigning a type to the variable 'x' (line 4085)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4085, 14), 'x', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4085, 14), comprehension_113378))
    
    # Call to reshape(...): (line 4085)
    # Processing the call arguments (line 4085)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 4085)
    i_113355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4085, 43), 'i', False)
    slice_113356 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 4085, 39), None, i_113355, None)
    # Getting the type of 's0' (line 4085)
    s0_113357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4085, 39), 's0', False)
    # Obtaining the member '__getitem__' of a type (line 4085)
    getitem___113358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4085, 39), s0_113357, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4085)
    subscript_call_result_113359 = invoke(stypy.reporting.localization.Localization(__file__, 4085, 39), getitem___113358, slice_113356)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 4085)
    tuple_113360 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4085, 49), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 4085)
    # Adding element type (line 4085)
    int_113361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4085, 49), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4085, 49), tuple_113360, int_113361)
    
    # Applying the binary operator '+' (line 4085)
    result_add_113362 = python_operator(stypy.reporting.localization.Localization(__file__, 4085, 39), '+', subscript_call_result_113359, tuple_113360)
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 4085)
    i_113363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4085, 59), 'i', False)
    int_113364 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4085, 63), 'int')
    # Applying the binary operator '+' (line 4085)
    result_add_113365 = python_operator(stypy.reporting.localization.Localization(__file__, 4085, 59), '+', i_113363, int_113364)
    
    # Getting the type of 'None' (line 4085)
    None_113366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4085, 65), 'None', False)
    slice_113367 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 4085, 56), result_add_113365, None, None_113366)
    # Getting the type of 's0' (line 4085)
    s0_113368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4085, 56), 's0', False)
    # Obtaining the member '__getitem__' of a type (line 4085)
    getitem___113369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4085, 56), s0_113368, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4085)
    subscript_call_result_113370 = invoke(stypy.reporting.localization.Localization(__file__, 4085, 56), getitem___113369, slice_113367)
    
    # Applying the binary operator '+' (line 4085)
    result_add_113371 = python_operator(stypy.reporting.localization.Localization(__file__, 4085, 54), '+', result_add_113362, subscript_call_result_113370)
    
    # Processing the call keyword arguments (line 4085)
    kwargs_113372 = {}
    
    # Call to asanyarray(...): (line 4085)
    # Processing the call arguments (line 4085)
    # Getting the type of 'x' (line 4085)
    x_113351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4085, 28), 'x', False)
    # Processing the call keyword arguments (line 4085)
    kwargs_113352 = {}
    # Getting the type of 'np' (line 4085)
    np_113349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4085, 14), 'np', False)
    # Obtaining the member 'asanyarray' of a type (line 4085)
    asanyarray_113350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4085, 14), np_113349, 'asanyarray')
    # Calling asanyarray(args, kwargs) (line 4085)
    asanyarray_call_result_113353 = invoke(stypy.reporting.localization.Localization(__file__, 4085, 14), asanyarray_113350, *[x_113351], **kwargs_113352)
    
    # Obtaining the member 'reshape' of a type (line 4085)
    reshape_113354 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4085, 14), asanyarray_call_result_113353, 'reshape')
    # Calling reshape(args, kwargs) (line 4085)
    reshape_call_result_113373 = invoke(stypy.reporting.localization.Localization(__file__, 4085, 14), reshape_113354, *[result_add_113371], **kwargs_113372)
    
    list_113379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4085, 14), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4085, 14), list_113379, reshape_call_result_113373)
    # Assigning a type to the variable 'output' (line 4085)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4085, 4), 'output', list_113379)
    
    # Assigning a ListComp to a Name (line 4088):
    
    # Assigning a ListComp to a Name (line 4088):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'output' (line 4088)
    output_113382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4088, 29), 'output')
    comprehension_113383 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4088, 13), output_113382)
    # Assigning a type to the variable 'x' (line 4088)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4088, 13), 'x', comprehension_113383)
    # Getting the type of 'x' (line 4088)
    x_113380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4088, 13), 'x')
    # Obtaining the member 'size' of a type (line 4088)
    size_113381 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4088, 13), x_113380, 'size')
    list_113384 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4088, 13), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4088, 13), list_113384, size_113381)
    # Assigning a type to the variable 'shape' (line 4088)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4088, 4), 'shape', list_113384)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'indexing' (line 4090)
    indexing_113385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4090, 7), 'indexing')
    str_113386 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4090, 19), 'str', 'xy')
    # Applying the binary operator '==' (line 4090)
    result_eq_113387 = python_operator(stypy.reporting.localization.Localization(__file__, 4090, 7), '==', indexing_113385, str_113386)
    
    
    # Getting the type of 'ndim' (line 4090)
    ndim_113388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4090, 28), 'ndim')
    int_113389 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4090, 35), 'int')
    # Applying the binary operator '>' (line 4090)
    result_gt_113390 = python_operator(stypy.reporting.localization.Localization(__file__, 4090, 28), '>', ndim_113388, int_113389)
    
    # Applying the binary operator 'and' (line 4090)
    result_and_keyword_113391 = python_operator(stypy.reporting.localization.Localization(__file__, 4090, 7), 'and', result_eq_113387, result_gt_113390)
    
    # Testing the type of an if condition (line 4090)
    if_condition_113392 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4090, 4), result_and_keyword_113391)
    # Assigning a type to the variable 'if_condition_113392' (line 4090)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4090, 4), 'if_condition_113392', if_condition_113392)
    # SSA begins for if statement (line 4090)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Attribute (line 4092):
    
    # Assigning a BinOp to a Attribute (line 4092):
    
    # Obtaining an instance of the builtin type 'tuple' (line 4092)
    tuple_113393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4092, 27), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 4092)
    # Adding element type (line 4092)
    int_113394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4092, 27), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4092, 27), tuple_113393, int_113394)
    # Adding element type (line 4092)
    int_113395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4092, 30), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4092, 27), tuple_113393, int_113395)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 4092)
    tuple_113396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4092, 37), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 4092)
    # Adding element type (line 4092)
    int_113397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4092, 37), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4092, 37), tuple_113396, int_113397)
    
    # Getting the type of 'ndim' (line 4092)
    ndim_113398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4092, 42), 'ndim')
    int_113399 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4092, 49), 'int')
    # Applying the binary operator '-' (line 4092)
    result_sub_113400 = python_operator(stypy.reporting.localization.Localization(__file__, 4092, 42), '-', ndim_113398, int_113399)
    
    # Applying the binary operator '*' (line 4092)
    result_mul_113401 = python_operator(stypy.reporting.localization.Localization(__file__, 4092, 36), '*', tuple_113396, result_sub_113400)
    
    # Applying the binary operator '+' (line 4092)
    result_add_113402 = python_operator(stypy.reporting.localization.Localization(__file__, 4092, 26), '+', tuple_113393, result_mul_113401)
    
    
    # Obtaining the type of the subscript
    int_113403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4092, 15), 'int')
    # Getting the type of 'output' (line 4092)
    output_113404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4092, 8), 'output')
    # Obtaining the member '__getitem__' of a type (line 4092)
    getitem___113405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4092, 8), output_113404, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4092)
    subscript_call_result_113406 = invoke(stypy.reporting.localization.Localization(__file__, 4092, 8), getitem___113405, int_113403)
    
    # Setting the type of the member 'shape' of a type (line 4092)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4092, 8), subscript_call_result_113406, 'shape', result_add_113402)
    
    # Assigning a BinOp to a Attribute (line 4093):
    
    # Assigning a BinOp to a Attribute (line 4093):
    
    # Obtaining an instance of the builtin type 'tuple' (line 4093)
    tuple_113407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4093, 27), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 4093)
    # Adding element type (line 4093)
    int_113408 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4093, 27), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4093, 27), tuple_113407, int_113408)
    # Adding element type (line 4093)
    int_113409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4093, 31), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4093, 27), tuple_113407, int_113409)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 4093)
    tuple_113410 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4093, 37), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 4093)
    # Adding element type (line 4093)
    int_113411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4093, 37), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4093, 37), tuple_113410, int_113411)
    
    # Getting the type of 'ndim' (line 4093)
    ndim_113412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4093, 42), 'ndim')
    int_113413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4093, 49), 'int')
    # Applying the binary operator '-' (line 4093)
    result_sub_113414 = python_operator(stypy.reporting.localization.Localization(__file__, 4093, 42), '-', ndim_113412, int_113413)
    
    # Applying the binary operator '*' (line 4093)
    result_mul_113415 = python_operator(stypy.reporting.localization.Localization(__file__, 4093, 36), '*', tuple_113410, result_sub_113414)
    
    # Applying the binary operator '+' (line 4093)
    result_add_113416 = python_operator(stypy.reporting.localization.Localization(__file__, 4093, 26), '+', tuple_113407, result_mul_113415)
    
    
    # Obtaining the type of the subscript
    int_113417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4093, 15), 'int')
    # Getting the type of 'output' (line 4093)
    output_113418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4093, 8), 'output')
    # Obtaining the member '__getitem__' of a type (line 4093)
    getitem___113419 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4093, 8), output_113418, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4093)
    subscript_call_result_113420 = invoke(stypy.reporting.localization.Localization(__file__, 4093, 8), getitem___113419, int_113417)
    
    # Setting the type of the member 'shape' of a type (line 4093)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 4093, 8), subscript_call_result_113420, 'shape', result_add_113416)
    
    # Assigning a Tuple to a Tuple (line 4094):
    
    # Assigning a Subscript to a Name (line 4094):
    
    # Obtaining the type of the subscript
    int_113421 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4094, 35), 'int')
    # Getting the type of 'shape' (line 4094)
    shape_113422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4094, 29), 'shape')
    # Obtaining the member '__getitem__' of a type (line 4094)
    getitem___113423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4094, 29), shape_113422, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4094)
    subscript_call_result_113424 = invoke(stypy.reporting.localization.Localization(__file__, 4094, 29), getitem___113423, int_113421)
    
    # Assigning a type to the variable 'tuple_assignment_107434' (line 4094)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4094, 8), 'tuple_assignment_107434', subscript_call_result_113424)
    
    # Assigning a Subscript to a Name (line 4094):
    
    # Obtaining the type of the subscript
    int_113425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4094, 45), 'int')
    # Getting the type of 'shape' (line 4094)
    shape_113426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4094, 39), 'shape')
    # Obtaining the member '__getitem__' of a type (line 4094)
    getitem___113427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4094, 39), shape_113426, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4094)
    subscript_call_result_113428 = invoke(stypy.reporting.localization.Localization(__file__, 4094, 39), getitem___113427, int_113425)
    
    # Assigning a type to the variable 'tuple_assignment_107435' (line 4094)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4094, 8), 'tuple_assignment_107435', subscript_call_result_113428)
    
    # Assigning a Name to a Subscript (line 4094):
    # Getting the type of 'tuple_assignment_107434' (line 4094)
    tuple_assignment_107434_113429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4094, 8), 'tuple_assignment_107434')
    # Getting the type of 'shape' (line 4094)
    shape_113430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4094, 8), 'shape')
    int_113431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4094, 14), 'int')
    # Storing an element on a container (line 4094)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4094, 8), shape_113430, (int_113431, tuple_assignment_107434_113429))
    
    # Assigning a Name to a Subscript (line 4094):
    # Getting the type of 'tuple_assignment_107435' (line 4094)
    tuple_assignment_107435_113432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4094, 8), 'tuple_assignment_107435')
    # Getting the type of 'shape' (line 4094)
    shape_113433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4094, 18), 'shape')
    int_113434 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4094, 24), 'int')
    # Storing an element on a container (line 4094)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4094, 18), shape_113433, (int_113434, tuple_assignment_107435_113432))
    # SSA join for if statement (line 4090)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'sparse' (line 4096)
    sparse_113435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4096, 7), 'sparse')
    # Testing the type of an if condition (line 4096)
    if_condition_113436 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4096, 4), sparse_113435)
    # Assigning a type to the variable 'if_condition_113436' (line 4096)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4096, 4), 'if_condition_113436', if_condition_113436)
    # SSA begins for if statement (line 4096)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'copy_' (line 4097)
    copy__113437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4097, 11), 'copy_')
    # Testing the type of an if condition (line 4097)
    if_condition_113438 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4097, 8), copy__113437)
    # Assigning a type to the variable 'if_condition_113438' (line 4097)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4097, 8), 'if_condition_113438', if_condition_113438)
    # SSA begins for if statement (line 4097)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'output' (line 4098)
    output_113443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4098, 38), 'output')
    comprehension_113444 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4098, 20), output_113443)
    # Assigning a type to the variable 'x' (line 4098)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4098, 20), 'x', comprehension_113444)
    
    # Call to copy(...): (line 4098)
    # Processing the call keyword arguments (line 4098)
    kwargs_113441 = {}
    # Getting the type of 'x' (line 4098)
    x_113439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4098, 20), 'x', False)
    # Obtaining the member 'copy' of a type (line 4098)
    copy_113440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4098, 20), x_113439, 'copy')
    # Calling copy(args, kwargs) (line 4098)
    copy_call_result_113442 = invoke(stypy.reporting.localization.Localization(__file__, 4098, 20), copy_113440, *[], **kwargs_113441)
    
    list_113445 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4098, 20), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4098, 20), list_113445, copy_call_result_113442)
    # Assigning a type to the variable 'stypy_return_type' (line 4098)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4098, 12), 'stypy_return_type', list_113445)
    # SSA branch for the else part of an if statement (line 4097)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'output' (line 4100)
    output_113446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4100, 19), 'output')
    # Assigning a type to the variable 'stypy_return_type' (line 4100)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4100, 12), 'stypy_return_type', output_113446)
    # SSA join for if statement (line 4097)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 4096)
    module_type_store.open_ssa_branch('else')
    
    # Getting the type of 'copy_' (line 4103)
    copy__113447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4103, 11), 'copy_')
    # Testing the type of an if condition (line 4103)
    if_condition_113448 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4103, 8), copy__113447)
    # Assigning a type to the variable 'if_condition_113448' (line 4103)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4103, 8), 'if_condition_113448', if_condition_113448)
    # SSA begins for if statement (line 4103)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 4104):
    
    # Assigning a Call to a Name (line 4104):
    
    # Call to ones(...): (line 4104)
    # Processing the call arguments (line 4104)
    # Getting the type of 'shape' (line 4104)
    shape_113451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4104, 32), 'shape', False)
    # Processing the call keyword arguments (line 4104)
    # Getting the type of 'int' (line 4104)
    int_113452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4104, 45), 'int', False)
    keyword_113453 = int_113452
    kwargs_113454 = {'dtype': keyword_113453}
    # Getting the type of 'np' (line 4104)
    np_113449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4104, 24), 'np', False)
    # Obtaining the member 'ones' of a type (line 4104)
    ones_113450 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4104, 24), np_113449, 'ones')
    # Calling ones(args, kwargs) (line 4104)
    ones_call_result_113455 = invoke(stypy.reporting.localization.Localization(__file__, 4104, 24), ones_113450, *[shape_113451], **kwargs_113454)
    
    # Assigning a type to the variable 'mult_fact' (line 4104)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4104, 12), 'mult_fact', ones_call_result_113455)
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'output' (line 4105)
    output_113459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4105, 43), 'output')
    comprehension_113460 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4105, 20), output_113459)
    # Assigning a type to the variable 'x' (line 4105)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4105, 20), 'x', comprehension_113460)
    # Getting the type of 'x' (line 4105)
    x_113456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4105, 20), 'x')
    # Getting the type of 'mult_fact' (line 4105)
    mult_fact_113457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4105, 24), 'mult_fact')
    # Applying the binary operator '*' (line 4105)
    result_mul_113458 = python_operator(stypy.reporting.localization.Localization(__file__, 4105, 20), '*', x_113456, mult_fact_113457)
    
    list_113461 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4105, 20), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4105, 20), list_113461, result_mul_113458)
    # Assigning a type to the variable 'stypy_return_type' (line 4105)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4105, 12), 'stypy_return_type', list_113461)
    # SSA branch for the else part of an if statement (line 4103)
    module_type_store.open_ssa_branch('else')
    
    # Call to broadcast_arrays(...): (line 4107)
    # Getting the type of 'output' (line 4107)
    output_113464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4107, 40), 'output', False)
    # Processing the call keyword arguments (line 4107)
    kwargs_113465 = {}
    # Getting the type of 'np' (line 4107)
    np_113462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4107, 19), 'np', False)
    # Obtaining the member 'broadcast_arrays' of a type (line 4107)
    broadcast_arrays_113463 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4107, 19), np_113462, 'broadcast_arrays')
    # Calling broadcast_arrays(args, kwargs) (line 4107)
    broadcast_arrays_call_result_113466 = invoke(stypy.reporting.localization.Localization(__file__, 4107, 19), broadcast_arrays_113463, *[output_113464], **kwargs_113465)
    
    # Assigning a type to the variable 'stypy_return_type' (line 4107)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4107, 12), 'stypy_return_type', broadcast_arrays_call_result_113466)
    # SSA join for if statement (line 4103)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 4096)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'meshgrid(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'meshgrid' in the type store
    # Getting the type of 'stypy_return_type' (line 3968)
    stypy_return_type_113467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3968, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_113467)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'meshgrid'
    return stypy_return_type_113467

# Assigning a type to the variable 'meshgrid' (line 3968)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3968, 0), 'meshgrid', meshgrid)

@norecursion
def delete(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 4110)
    None_113468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4110, 26), 'None')
    defaults = [None_113468]
    # Create a new context for function 'delete'
    module_type_store = module_type_store.open_function_context('delete', 4110, 0, False)
    
    # Passed parameters checking function
    delete.stypy_localization = localization
    delete.stypy_type_of_self = None
    delete.stypy_type_store = module_type_store
    delete.stypy_function_name = 'delete'
    delete.stypy_param_names_list = ['arr', 'obj', 'axis']
    delete.stypy_varargs_param_name = None
    delete.stypy_kwargs_param_name = None
    delete.stypy_call_defaults = defaults
    delete.stypy_call_varargs = varargs
    delete.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'delete', ['arr', 'obj', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'delete', localization, ['arr', 'obj', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'delete(...)' code ##################

    str_113469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4167, (-1)), 'str', '\n    Return a new array with sub-arrays along an axis deleted. For a one\n    dimensional array, this returns those entries not returned by\n    `arr[obj]`.\n\n    Parameters\n    ----------\n    arr : array_like\n      Input array.\n    obj : slice, int or array of ints\n      Indicate which sub-arrays to remove.\n    axis : int, optional\n      The axis along which to delete the subarray defined by `obj`.\n      If `axis` is None, `obj` is applied to the flattened array.\n\n    Returns\n    -------\n    out : ndarray\n        A copy of `arr` with the elements specified by `obj` removed. Note\n        that `delete` does not occur in-place. If `axis` is None, `out` is\n        a flattened array.\n\n    See Also\n    --------\n    insert : Insert elements into an array.\n    append : Append elements at the end of an array.\n\n    Notes\n    -----\n    Often it is preferable to use a boolean mask. For example:\n\n    >>> mask = np.ones(len(arr), dtype=bool)\n    >>> mask[[0,2,4]] = False\n    >>> result = arr[mask,...]\n\n    Is equivalent to `np.delete(arr, [0,2,4], axis=0)`, but allows further\n    use of `mask`.\n\n    Examples\n    --------\n    >>> arr = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])\n    >>> arr\n    array([[ 1,  2,  3,  4],\n           [ 5,  6,  7,  8],\n           [ 9, 10, 11, 12]])\n    >>> np.delete(arr, 1, 0)\n    array([[ 1,  2,  3,  4],\n           [ 9, 10, 11, 12]])\n\n    >>> np.delete(arr, np.s_[::2], 1)\n    array([[ 2,  4],\n           [ 6,  8],\n           [10, 12]])\n    >>> np.delete(arr, [1,3,5], None)\n    array([ 1,  3,  5,  7,  8,  9, 10, 11, 12])\n\n    ')
    
    # Assigning a Name to a Name (line 4168):
    
    # Assigning a Name to a Name (line 4168):
    # Getting the type of 'None' (line 4168)
    None_113470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4168, 11), 'None')
    # Assigning a type to the variable 'wrap' (line 4168)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4168, 4), 'wrap', None_113470)
    
    
    
    # Call to type(...): (line 4169)
    # Processing the call arguments (line 4169)
    # Getting the type of 'arr' (line 4169)
    arr_113472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4169, 12), 'arr', False)
    # Processing the call keyword arguments (line 4169)
    kwargs_113473 = {}
    # Getting the type of 'type' (line 4169)
    type_113471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4169, 7), 'type', False)
    # Calling type(args, kwargs) (line 4169)
    type_call_result_113474 = invoke(stypy.reporting.localization.Localization(__file__, 4169, 7), type_113471, *[arr_113472], **kwargs_113473)
    
    # Getting the type of 'ndarray' (line 4169)
    ndarray_113475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4169, 24), 'ndarray')
    # Applying the binary operator 'isnot' (line 4169)
    result_is_not_113476 = python_operator(stypy.reporting.localization.Localization(__file__, 4169, 7), 'isnot', type_call_result_113474, ndarray_113475)
    
    # Testing the type of an if condition (line 4169)
    if_condition_113477 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4169, 4), result_is_not_113476)
    # Assigning a type to the variable 'if_condition_113477' (line 4169)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4169, 4), 'if_condition_113477', if_condition_113477)
    # SSA begins for if statement (line 4169)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # SSA begins for try-except statement (line 4170)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Attribute to a Name (line 4171):
    
    # Assigning a Attribute to a Name (line 4171):
    # Getting the type of 'arr' (line 4171)
    arr_113478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4171, 19), 'arr')
    # Obtaining the member '__array_wrap__' of a type (line 4171)
    array_wrap___113479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4171, 19), arr_113478, '__array_wrap__')
    # Assigning a type to the variable 'wrap' (line 4171)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4171, 12), 'wrap', array_wrap___113479)
    # SSA branch for the except part of a try statement (line 4170)
    # SSA branch for the except 'AttributeError' branch of a try statement (line 4170)
    module_type_store.open_ssa_branch('except')
    pass
    # SSA join for try-except statement (line 4170)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 4169)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 4175):
    
    # Assigning a Call to a Name (line 4175):
    
    # Call to asarray(...): (line 4175)
    # Processing the call arguments (line 4175)
    # Getting the type of 'arr' (line 4175)
    arr_113481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4175, 18), 'arr', False)
    # Processing the call keyword arguments (line 4175)
    kwargs_113482 = {}
    # Getting the type of 'asarray' (line 4175)
    asarray_113480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4175, 10), 'asarray', False)
    # Calling asarray(args, kwargs) (line 4175)
    asarray_call_result_113483 = invoke(stypy.reporting.localization.Localization(__file__, 4175, 10), asarray_113480, *[arr_113481], **kwargs_113482)
    
    # Assigning a type to the variable 'arr' (line 4175)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4175, 4), 'arr', asarray_call_result_113483)
    
    # Assigning a Attribute to a Name (line 4176):
    
    # Assigning a Attribute to a Name (line 4176):
    # Getting the type of 'arr' (line 4176)
    arr_113484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4176, 11), 'arr')
    # Obtaining the member 'ndim' of a type (line 4176)
    ndim_113485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4176, 11), arr_113484, 'ndim')
    # Assigning a type to the variable 'ndim' (line 4176)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4176, 4), 'ndim', ndim_113485)
    
    # Assigning a IfExp to a Name (line 4177):
    
    # Assigning a IfExp to a Name (line 4177):
    
    # Getting the type of 'arr' (line 4177)
    arr_113486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4177, 22), 'arr')
    # Obtaining the member 'flags' of a type (line 4177)
    flags_113487 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4177, 22), arr_113486, 'flags')
    # Obtaining the member 'fnc' of a type (line 4177)
    fnc_113488 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4177, 22), flags_113487, 'fnc')
    # Testing the type of an if expression (line 4177)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4177, 15), fnc_113488)
    # SSA begins for if expression (line 4177)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    str_113489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4177, 15), 'str', 'F')
    # SSA branch for the else part of an if expression (line 4177)
    module_type_store.open_ssa_branch('if expression else')
    str_113490 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4177, 41), 'str', 'C')
    # SSA join for if expression (line 4177)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_113491 = union_type.UnionType.add(str_113489, str_113490)
    
    # Assigning a type to the variable 'arrorder' (line 4177)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4177, 4), 'arrorder', if_exp_113491)
    
    # Type idiom detected: calculating its left and rigth part (line 4178)
    # Getting the type of 'axis' (line 4178)
    axis_113492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4178, 7), 'axis')
    # Getting the type of 'None' (line 4178)
    None_113493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4178, 15), 'None')
    
    (may_be_113494, more_types_in_union_113495) = may_be_none(axis_113492, None_113493)

    if may_be_113494:

        if more_types_in_union_113495:
            # Runtime conditional SSA (line 4178)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        
        # Getting the type of 'ndim' (line 4179)
        ndim_113496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4179, 11), 'ndim')
        int_113497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4179, 19), 'int')
        # Applying the binary operator '!=' (line 4179)
        result_ne_113498 = python_operator(stypy.reporting.localization.Localization(__file__, 4179, 11), '!=', ndim_113496, int_113497)
        
        # Testing the type of an if condition (line 4179)
        if_condition_113499 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4179, 8), result_ne_113498)
        # Assigning a type to the variable 'if_condition_113499' (line 4179)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4179, 8), 'if_condition_113499', if_condition_113499)
        # SSA begins for if statement (line 4179)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 4180):
        
        # Assigning a Call to a Name (line 4180):
        
        # Call to ravel(...): (line 4180)
        # Processing the call keyword arguments (line 4180)
        kwargs_113502 = {}
        # Getting the type of 'arr' (line 4180)
        arr_113500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4180, 18), 'arr', False)
        # Obtaining the member 'ravel' of a type (line 4180)
        ravel_113501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4180, 18), arr_113500, 'ravel')
        # Calling ravel(args, kwargs) (line 4180)
        ravel_call_result_113503 = invoke(stypy.reporting.localization.Localization(__file__, 4180, 18), ravel_113501, *[], **kwargs_113502)
        
        # Assigning a type to the variable 'arr' (line 4180)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4180, 12), 'arr', ravel_call_result_113503)
        # SSA join for if statement (line 4179)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 4181):
        
        # Assigning a Attribute to a Name (line 4181):
        # Getting the type of 'arr' (line 4181)
        arr_113504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4181, 15), 'arr')
        # Obtaining the member 'ndim' of a type (line 4181)
        ndim_113505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4181, 15), arr_113504, 'ndim')
        # Assigning a type to the variable 'ndim' (line 4181)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4181, 8), 'ndim', ndim_113505)
        
        # Assigning a BinOp to a Name (line 4182):
        
        # Assigning a BinOp to a Name (line 4182):
        # Getting the type of 'ndim' (line 4182)
        ndim_113506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4182, 15), 'ndim')
        int_113507 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4182, 22), 'int')
        # Applying the binary operator '-' (line 4182)
        result_sub_113508 = python_operator(stypy.reporting.localization.Localization(__file__, 4182, 15), '-', ndim_113506, int_113507)
        
        # Assigning a type to the variable 'axis' (line 4182)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4182, 8), 'axis', result_sub_113508)

        if more_types_in_union_113495:
            # SSA join for if statement (line 4178)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Getting the type of 'ndim' (line 4183)
    ndim_113509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4183, 7), 'ndim')
    int_113510 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4183, 15), 'int')
    # Applying the binary operator '==' (line 4183)
    result_eq_113511 = python_operator(stypy.reporting.localization.Localization(__file__, 4183, 7), '==', ndim_113509, int_113510)
    
    # Testing the type of an if condition (line 4183)
    if_condition_113512 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4183, 4), result_eq_113511)
    # Assigning a type to the variable 'if_condition_113512' (line 4183)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4183, 4), 'if_condition_113512', if_condition_113512)
    # SSA begins for if statement (line 4183)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 4185)
    # Processing the call arguments (line 4185)
    str_113515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4186, 12), 'str', 'in the future the special handling of scalars will be removed from delete and raise an error')
    # Getting the type of 'DeprecationWarning' (line 4187)
    DeprecationWarning_113516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4187, 46), 'DeprecationWarning', False)
    # Processing the call keyword arguments (line 4185)
    kwargs_113517 = {}
    # Getting the type of 'warnings' (line 4185)
    warnings_113513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4185, 8), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 4185)
    warn_113514 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4185, 8), warnings_113513, 'warn')
    # Calling warn(args, kwargs) (line 4185)
    warn_call_result_113518 = invoke(stypy.reporting.localization.Localization(__file__, 4185, 8), warn_113514, *[str_113515, DeprecationWarning_113516], **kwargs_113517)
    
    
    # Getting the type of 'wrap' (line 4188)
    wrap_113519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4188, 11), 'wrap')
    # Testing the type of an if condition (line 4188)
    if_condition_113520 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4188, 8), wrap_113519)
    # Assigning a type to the variable 'if_condition_113520' (line 4188)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4188, 8), 'if_condition_113520', if_condition_113520)
    # SSA begins for if statement (line 4188)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to wrap(...): (line 4189)
    # Processing the call arguments (line 4189)
    # Getting the type of 'arr' (line 4189)
    arr_113522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4189, 24), 'arr', False)
    # Processing the call keyword arguments (line 4189)
    kwargs_113523 = {}
    # Getting the type of 'wrap' (line 4189)
    wrap_113521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4189, 19), 'wrap', False)
    # Calling wrap(args, kwargs) (line 4189)
    wrap_call_result_113524 = invoke(stypy.reporting.localization.Localization(__file__, 4189, 19), wrap_113521, *[arr_113522], **kwargs_113523)
    
    # Assigning a type to the variable 'stypy_return_type' (line 4189)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4189, 12), 'stypy_return_type', wrap_call_result_113524)
    # SSA branch for the else part of an if statement (line 4188)
    module_type_store.open_ssa_branch('else')
    
    # Call to copy(...): (line 4191)
    # Processing the call keyword arguments (line 4191)
    kwargs_113527 = {}
    # Getting the type of 'arr' (line 4191)
    arr_113525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4191, 19), 'arr', False)
    # Obtaining the member 'copy' of a type (line 4191)
    copy_113526 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4191, 19), arr_113525, 'copy')
    # Calling copy(args, kwargs) (line 4191)
    copy_call_result_113528 = invoke(stypy.reporting.localization.Localization(__file__, 4191, 19), copy_113526, *[], **kwargs_113527)
    
    # Assigning a type to the variable 'stypy_return_type' (line 4191)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4191, 12), 'stypy_return_type', copy_call_result_113528)
    # SSA join for if statement (line 4188)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 4183)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 4193):
    
    # Assigning a BinOp to a Name (line 4193):
    
    # Obtaining an instance of the builtin type 'list' (line 4193)
    list_113529 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4193, 12), 'list')
    # Adding type elements to the builtin type 'list' instance (line 4193)
    # Adding element type (line 4193)
    
    # Call to slice(...): (line 4193)
    # Processing the call arguments (line 4193)
    # Getting the type of 'None' (line 4193)
    None_113531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4193, 19), 'None', False)
    # Processing the call keyword arguments (line 4193)
    kwargs_113532 = {}
    # Getting the type of 'slice' (line 4193)
    slice_113530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4193, 13), 'slice', False)
    # Calling slice(args, kwargs) (line 4193)
    slice_call_result_113533 = invoke(stypy.reporting.localization.Localization(__file__, 4193, 13), slice_113530, *[None_113531], **kwargs_113532)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4193, 12), list_113529, slice_call_result_113533)
    
    # Getting the type of 'ndim' (line 4193)
    ndim_113534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4193, 26), 'ndim')
    # Applying the binary operator '*' (line 4193)
    result_mul_113535 = python_operator(stypy.reporting.localization.Localization(__file__, 4193, 12), '*', list_113529, ndim_113534)
    
    # Assigning a type to the variable 'slobj' (line 4193)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4193, 4), 'slobj', result_mul_113535)
    
    # Assigning a Subscript to a Name (line 4194):
    
    # Assigning a Subscript to a Name (line 4194):
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 4194)
    axis_113536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4194, 18), 'axis')
    # Getting the type of 'arr' (line 4194)
    arr_113537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4194, 8), 'arr')
    # Obtaining the member 'shape' of a type (line 4194)
    shape_113538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4194, 8), arr_113537, 'shape')
    # Obtaining the member '__getitem__' of a type (line 4194)
    getitem___113539 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4194, 8), shape_113538, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4194)
    subscript_call_result_113540 = invoke(stypy.reporting.localization.Localization(__file__, 4194, 8), getitem___113539, axis_113536)
    
    # Assigning a type to the variable 'N' (line 4194)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4194, 4), 'N', subscript_call_result_113540)
    
    # Assigning a Call to a Name (line 4195):
    
    # Assigning a Call to a Name (line 4195):
    
    # Call to list(...): (line 4195)
    # Processing the call arguments (line 4195)
    # Getting the type of 'arr' (line 4195)
    arr_113542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4195, 20), 'arr', False)
    # Obtaining the member 'shape' of a type (line 4195)
    shape_113543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4195, 20), arr_113542, 'shape')
    # Processing the call keyword arguments (line 4195)
    kwargs_113544 = {}
    # Getting the type of 'list' (line 4195)
    list_113541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4195, 15), 'list', False)
    # Calling list(args, kwargs) (line 4195)
    list_call_result_113545 = invoke(stypy.reporting.localization.Localization(__file__, 4195, 15), list_113541, *[shape_113543], **kwargs_113544)
    
    # Assigning a type to the variable 'newshape' (line 4195)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4195, 4), 'newshape', list_call_result_113545)
    
    # Type idiom detected: calculating its left and rigth part (line 4197)
    # Getting the type of 'slice' (line 4197)
    slice_113546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4197, 23), 'slice')
    # Getting the type of 'obj' (line 4197)
    obj_113547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4197, 18), 'obj')
    
    (may_be_113548, more_types_in_union_113549) = may_be_subtype(slice_113546, obj_113547)

    if may_be_113548:

        if more_types_in_union_113549:
            # Runtime conditional SSA (line 4197)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'obj' (line 4197)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4197, 4), 'obj', remove_not_subtype_from_union(obj_113547, slice))
        
        # Assigning a Call to a Tuple (line 4198):
        
        # Assigning a Call to a Name:
        
        # Call to indices(...): (line 4198)
        # Processing the call arguments (line 4198)
        # Getting the type of 'N' (line 4198)
        N_113552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4198, 40), 'N', False)
        # Processing the call keyword arguments (line 4198)
        kwargs_113553 = {}
        # Getting the type of 'obj' (line 4198)
        obj_113550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4198, 28), 'obj', False)
        # Obtaining the member 'indices' of a type (line 4198)
        indices_113551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4198, 28), obj_113550, 'indices')
        # Calling indices(args, kwargs) (line 4198)
        indices_call_result_113554 = invoke(stypy.reporting.localization.Localization(__file__, 4198, 28), indices_113551, *[N_113552], **kwargs_113553)
        
        # Assigning a type to the variable 'call_assignment_107436' (line 4198)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4198, 8), 'call_assignment_107436', indices_call_result_113554)
        
        # Assigning a Call to a Name (line 4198):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_113557 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4198, 8), 'int')
        # Processing the call keyword arguments
        kwargs_113558 = {}
        # Getting the type of 'call_assignment_107436' (line 4198)
        call_assignment_107436_113555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4198, 8), 'call_assignment_107436', False)
        # Obtaining the member '__getitem__' of a type (line 4198)
        getitem___113556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4198, 8), call_assignment_107436_113555, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_113559 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___113556, *[int_113557], **kwargs_113558)
        
        # Assigning a type to the variable 'call_assignment_107437' (line 4198)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4198, 8), 'call_assignment_107437', getitem___call_result_113559)
        
        # Assigning a Name to a Name (line 4198):
        # Getting the type of 'call_assignment_107437' (line 4198)
        call_assignment_107437_113560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4198, 8), 'call_assignment_107437')
        # Assigning a type to the variable 'start' (line 4198)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4198, 8), 'start', call_assignment_107437_113560)
        
        # Assigning a Call to a Name (line 4198):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_113563 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4198, 8), 'int')
        # Processing the call keyword arguments
        kwargs_113564 = {}
        # Getting the type of 'call_assignment_107436' (line 4198)
        call_assignment_107436_113561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4198, 8), 'call_assignment_107436', False)
        # Obtaining the member '__getitem__' of a type (line 4198)
        getitem___113562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4198, 8), call_assignment_107436_113561, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_113565 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___113562, *[int_113563], **kwargs_113564)
        
        # Assigning a type to the variable 'call_assignment_107438' (line 4198)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4198, 8), 'call_assignment_107438', getitem___call_result_113565)
        
        # Assigning a Name to a Name (line 4198):
        # Getting the type of 'call_assignment_107438' (line 4198)
        call_assignment_107438_113566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4198, 8), 'call_assignment_107438')
        # Assigning a type to the variable 'stop' (line 4198)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4198, 15), 'stop', call_assignment_107438_113566)
        
        # Assigning a Call to a Name (line 4198):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_113569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4198, 8), 'int')
        # Processing the call keyword arguments
        kwargs_113570 = {}
        # Getting the type of 'call_assignment_107436' (line 4198)
        call_assignment_107436_113567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4198, 8), 'call_assignment_107436', False)
        # Obtaining the member '__getitem__' of a type (line 4198)
        getitem___113568 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4198, 8), call_assignment_107436_113567, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_113571 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___113568, *[int_113569], **kwargs_113570)
        
        # Assigning a type to the variable 'call_assignment_107439' (line 4198)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4198, 8), 'call_assignment_107439', getitem___call_result_113571)
        
        # Assigning a Name to a Name (line 4198):
        # Getting the type of 'call_assignment_107439' (line 4198)
        call_assignment_107439_113572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4198, 8), 'call_assignment_107439')
        # Assigning a type to the variable 'step' (line 4198)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4198, 21), 'step', call_assignment_107439_113572)
        
        # Assigning a Call to a Name (line 4199):
        
        # Assigning a Call to a Name (line 4199):
        
        # Call to range(...): (line 4199)
        # Processing the call arguments (line 4199)
        # Getting the type of 'start' (line 4199)
        start_113574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4199, 19), 'start', False)
        # Getting the type of 'stop' (line 4199)
        stop_113575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4199, 26), 'stop', False)
        # Getting the type of 'step' (line 4199)
        step_113576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4199, 32), 'step', False)
        # Processing the call keyword arguments (line 4199)
        kwargs_113577 = {}
        # Getting the type of 'range' (line 4199)
        range_113573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4199, 13), 'range', False)
        # Calling range(args, kwargs) (line 4199)
        range_call_result_113578 = invoke(stypy.reporting.localization.Localization(__file__, 4199, 13), range_113573, *[start_113574, stop_113575, step_113576], **kwargs_113577)
        
        # Assigning a type to the variable 'xr' (line 4199)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4199, 8), 'xr', range_call_result_113578)
        
        # Assigning a Call to a Name (line 4200):
        
        # Assigning a Call to a Name (line 4200):
        
        # Call to len(...): (line 4200)
        # Processing the call arguments (line 4200)
        # Getting the type of 'xr' (line 4200)
        xr_113580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4200, 23), 'xr', False)
        # Processing the call keyword arguments (line 4200)
        kwargs_113581 = {}
        # Getting the type of 'len' (line 4200)
        len_113579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4200, 19), 'len', False)
        # Calling len(args, kwargs) (line 4200)
        len_call_result_113582 = invoke(stypy.reporting.localization.Localization(__file__, 4200, 19), len_113579, *[xr_113580], **kwargs_113581)
        
        # Assigning a type to the variable 'numtodel' (line 4200)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4200, 8), 'numtodel', len_call_result_113582)
        
        
        # Getting the type of 'numtodel' (line 4202)
        numtodel_113583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4202, 11), 'numtodel')
        int_113584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4202, 23), 'int')
        # Applying the binary operator '<=' (line 4202)
        result_le_113585 = python_operator(stypy.reporting.localization.Localization(__file__, 4202, 11), '<=', numtodel_113583, int_113584)
        
        # Testing the type of an if condition (line 4202)
        if_condition_113586 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4202, 8), result_le_113585)
        # Assigning a type to the variable 'if_condition_113586' (line 4202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4202, 8), 'if_condition_113586', if_condition_113586)
        # SSA begins for if statement (line 4202)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'wrap' (line 4203)
        wrap_113587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4203, 15), 'wrap')
        # Testing the type of an if condition (line 4203)
        if_condition_113588 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4203, 12), wrap_113587)
        # Assigning a type to the variable 'if_condition_113588' (line 4203)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4203, 12), 'if_condition_113588', if_condition_113588)
        # SSA begins for if statement (line 4203)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to wrap(...): (line 4204)
        # Processing the call arguments (line 4204)
        
        # Call to copy(...): (line 4204)
        # Processing the call keyword arguments (line 4204)
        kwargs_113592 = {}
        # Getting the type of 'arr' (line 4204)
        arr_113590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4204, 28), 'arr', False)
        # Obtaining the member 'copy' of a type (line 4204)
        copy_113591 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4204, 28), arr_113590, 'copy')
        # Calling copy(args, kwargs) (line 4204)
        copy_call_result_113593 = invoke(stypy.reporting.localization.Localization(__file__, 4204, 28), copy_113591, *[], **kwargs_113592)
        
        # Processing the call keyword arguments (line 4204)
        kwargs_113594 = {}
        # Getting the type of 'wrap' (line 4204)
        wrap_113589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4204, 23), 'wrap', False)
        # Calling wrap(args, kwargs) (line 4204)
        wrap_call_result_113595 = invoke(stypy.reporting.localization.Localization(__file__, 4204, 23), wrap_113589, *[copy_call_result_113593], **kwargs_113594)
        
        # Assigning a type to the variable 'stypy_return_type' (line 4204)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4204, 16), 'stypy_return_type', wrap_call_result_113595)
        # SSA branch for the else part of an if statement (line 4203)
        module_type_store.open_ssa_branch('else')
        
        # Call to copy(...): (line 4206)
        # Processing the call keyword arguments (line 4206)
        kwargs_113598 = {}
        # Getting the type of 'arr' (line 4206)
        arr_113596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4206, 23), 'arr', False)
        # Obtaining the member 'copy' of a type (line 4206)
        copy_113597 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4206, 23), arr_113596, 'copy')
        # Calling copy(args, kwargs) (line 4206)
        copy_call_result_113599 = invoke(stypy.reporting.localization.Localization(__file__, 4206, 23), copy_113597, *[], **kwargs_113598)
        
        # Assigning a type to the variable 'stypy_return_type' (line 4206)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4206, 16), 'stypy_return_type', copy_call_result_113599)
        # SSA join for if statement (line 4203)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 4202)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'step' (line 4209)
        step_113600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4209, 11), 'step')
        int_113601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4209, 18), 'int')
        # Applying the binary operator '<' (line 4209)
        result_lt_113602 = python_operator(stypy.reporting.localization.Localization(__file__, 4209, 11), '<', step_113600, int_113601)
        
        # Testing the type of an if condition (line 4209)
        if_condition_113603 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4209, 8), result_lt_113602)
        # Assigning a type to the variable 'if_condition_113603' (line 4209)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4209, 8), 'if_condition_113603', if_condition_113603)
        # SSA begins for if statement (line 4209)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a UnaryOp to a Name (line 4210):
        
        # Assigning a UnaryOp to a Name (line 4210):
        
        # Getting the type of 'step' (line 4210)
        step_113604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4210, 20), 'step')
        # Applying the 'usub' unary operator (line 4210)
        result___neg___113605 = python_operator(stypy.reporting.localization.Localization(__file__, 4210, 19), 'usub', step_113604)
        
        # Assigning a type to the variable 'step' (line 4210)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4210, 12), 'step', result___neg___113605)
        
        # Assigning a Subscript to a Name (line 4211):
        
        # Assigning a Subscript to a Name (line 4211):
        
        # Obtaining the type of the subscript
        int_113606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4211, 23), 'int')
        # Getting the type of 'xr' (line 4211)
        xr_113607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4211, 20), 'xr')
        # Obtaining the member '__getitem__' of a type (line 4211)
        getitem___113608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4211, 20), xr_113607, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4211)
        subscript_call_result_113609 = invoke(stypy.reporting.localization.Localization(__file__, 4211, 20), getitem___113608, int_113606)
        
        # Assigning a type to the variable 'start' (line 4211)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4211, 12), 'start', subscript_call_result_113609)
        
        # Assigning a BinOp to a Name (line 4212):
        
        # Assigning a BinOp to a Name (line 4212):
        
        # Obtaining the type of the subscript
        int_113610 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4212, 22), 'int')
        # Getting the type of 'xr' (line 4212)
        xr_113611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4212, 19), 'xr')
        # Obtaining the member '__getitem__' of a type (line 4212)
        getitem___113612 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4212, 19), xr_113611, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4212)
        subscript_call_result_113613 = invoke(stypy.reporting.localization.Localization(__file__, 4212, 19), getitem___113612, int_113610)
        
        int_113614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4212, 27), 'int')
        # Applying the binary operator '+' (line 4212)
        result_add_113615 = python_operator(stypy.reporting.localization.Localization(__file__, 4212, 19), '+', subscript_call_result_113613, int_113614)
        
        # Assigning a type to the variable 'stop' (line 4212)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4212, 12), 'stop', result_add_113615)
        # SSA join for if statement (line 4209)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'newshape' (line 4214)
        newshape_113616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4214, 8), 'newshape')
        
        # Obtaining the type of the subscript
        # Getting the type of 'axis' (line 4214)
        axis_113617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4214, 17), 'axis')
        # Getting the type of 'newshape' (line 4214)
        newshape_113618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4214, 8), 'newshape')
        # Obtaining the member '__getitem__' of a type (line 4214)
        getitem___113619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4214, 8), newshape_113618, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4214)
        subscript_call_result_113620 = invoke(stypy.reporting.localization.Localization(__file__, 4214, 8), getitem___113619, axis_113617)
        
        # Getting the type of 'numtodel' (line 4214)
        numtodel_113621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4214, 26), 'numtodel')
        # Applying the binary operator '-=' (line 4214)
        result_isub_113622 = python_operator(stypy.reporting.localization.Localization(__file__, 4214, 8), '-=', subscript_call_result_113620, numtodel_113621)
        # Getting the type of 'newshape' (line 4214)
        newshape_113623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4214, 8), 'newshape')
        # Getting the type of 'axis' (line 4214)
        axis_113624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4214, 17), 'axis')
        # Storing an element on a container (line 4214)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4214, 8), newshape_113623, (axis_113624, result_isub_113622))
        
        
        # Assigning a Call to a Name (line 4215):
        
        # Assigning a Call to a Name (line 4215):
        
        # Call to empty(...): (line 4215)
        # Processing the call arguments (line 4215)
        # Getting the type of 'newshape' (line 4215)
        newshape_113626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4215, 20), 'newshape', False)
        # Getting the type of 'arr' (line 4215)
        arr_113627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4215, 30), 'arr', False)
        # Obtaining the member 'dtype' of a type (line 4215)
        dtype_113628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4215, 30), arr_113627, 'dtype')
        # Getting the type of 'arrorder' (line 4215)
        arrorder_113629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4215, 41), 'arrorder', False)
        # Processing the call keyword arguments (line 4215)
        kwargs_113630 = {}
        # Getting the type of 'empty' (line 4215)
        empty_113625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4215, 14), 'empty', False)
        # Calling empty(args, kwargs) (line 4215)
        empty_call_result_113631 = invoke(stypy.reporting.localization.Localization(__file__, 4215, 14), empty_113625, *[newshape_113626, dtype_113628, arrorder_113629], **kwargs_113630)
        
        # Assigning a type to the variable 'new' (line 4215)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4215, 8), 'new', empty_call_result_113631)
        
        
        # Getting the type of 'start' (line 4217)
        start_113632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4217, 11), 'start')
        int_113633 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4217, 20), 'int')
        # Applying the binary operator '==' (line 4217)
        result_eq_113634 = python_operator(stypy.reporting.localization.Localization(__file__, 4217, 11), '==', start_113632, int_113633)
        
        # Testing the type of an if condition (line 4217)
        if_condition_113635 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4217, 8), result_eq_113634)
        # Assigning a type to the variable 'if_condition_113635' (line 4217)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4217, 8), 'if_condition_113635', if_condition_113635)
        # SSA begins for if statement (line 4217)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        pass
        # SSA branch for the else part of an if statement (line 4217)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Subscript (line 4220):
        
        # Assigning a Call to a Subscript (line 4220):
        
        # Call to slice(...): (line 4220)
        # Processing the call arguments (line 4220)
        # Getting the type of 'None' (line 4220)
        None_113637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4220, 32), 'None', False)
        # Getting the type of 'start' (line 4220)
        start_113638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4220, 38), 'start', False)
        # Processing the call keyword arguments (line 4220)
        kwargs_113639 = {}
        # Getting the type of 'slice' (line 4220)
        slice_113636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4220, 26), 'slice', False)
        # Calling slice(args, kwargs) (line 4220)
        slice_call_result_113640 = invoke(stypy.reporting.localization.Localization(__file__, 4220, 26), slice_113636, *[None_113637, start_113638], **kwargs_113639)
        
        # Getting the type of 'slobj' (line 4220)
        slobj_113641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4220, 12), 'slobj')
        # Getting the type of 'axis' (line 4220)
        axis_113642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4220, 18), 'axis')
        # Storing an element on a container (line 4220)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4220, 12), slobj_113641, (axis_113642, slice_call_result_113640))
        
        # Assigning a Subscript to a Subscript (line 4221):
        
        # Assigning a Subscript to a Subscript (line 4221):
        
        # Obtaining the type of the subscript
        # Getting the type of 'slobj' (line 4221)
        slobj_113643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4221, 29), 'slobj')
        # Getting the type of 'arr' (line 4221)
        arr_113644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4221, 25), 'arr')
        # Obtaining the member '__getitem__' of a type (line 4221)
        getitem___113645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4221, 25), arr_113644, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4221)
        subscript_call_result_113646 = invoke(stypy.reporting.localization.Localization(__file__, 4221, 25), getitem___113645, slobj_113643)
        
        # Getting the type of 'new' (line 4221)
        new_113647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4221, 12), 'new')
        # Getting the type of 'slobj' (line 4221)
        slobj_113648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4221, 16), 'slobj')
        # Storing an element on a container (line 4221)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4221, 12), new_113647, (slobj_113648, subscript_call_result_113646))
        # SSA join for if statement (line 4217)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'stop' (line 4223)
        stop_113649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4223, 11), 'stop')
        # Getting the type of 'N' (line 4223)
        N_113650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4223, 19), 'N')
        # Applying the binary operator '==' (line 4223)
        result_eq_113651 = python_operator(stypy.reporting.localization.Localization(__file__, 4223, 11), '==', stop_113649, N_113650)
        
        # Testing the type of an if condition (line 4223)
        if_condition_113652 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4223, 8), result_eq_113651)
        # Assigning a type to the variable 'if_condition_113652' (line 4223)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4223, 8), 'if_condition_113652', if_condition_113652)
        # SSA begins for if statement (line 4223)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        pass
        # SSA branch for the else part of an if statement (line 4223)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Subscript (line 4226):
        
        # Assigning a Call to a Subscript (line 4226):
        
        # Call to slice(...): (line 4226)
        # Processing the call arguments (line 4226)
        # Getting the type of 'stop' (line 4226)
        stop_113654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4226, 32), 'stop', False)
        # Getting the type of 'numtodel' (line 4226)
        numtodel_113655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4226, 37), 'numtodel', False)
        # Applying the binary operator '-' (line 4226)
        result_sub_113656 = python_operator(stypy.reporting.localization.Localization(__file__, 4226, 32), '-', stop_113654, numtodel_113655)
        
        # Getting the type of 'None' (line 4226)
        None_113657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4226, 47), 'None', False)
        # Processing the call keyword arguments (line 4226)
        kwargs_113658 = {}
        # Getting the type of 'slice' (line 4226)
        slice_113653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4226, 26), 'slice', False)
        # Calling slice(args, kwargs) (line 4226)
        slice_call_result_113659 = invoke(stypy.reporting.localization.Localization(__file__, 4226, 26), slice_113653, *[result_sub_113656, None_113657], **kwargs_113658)
        
        # Getting the type of 'slobj' (line 4226)
        slobj_113660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4226, 12), 'slobj')
        # Getting the type of 'axis' (line 4226)
        axis_113661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4226, 18), 'axis')
        # Storing an element on a container (line 4226)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4226, 12), slobj_113660, (axis_113661, slice_call_result_113659))
        
        # Assigning a BinOp to a Name (line 4227):
        
        # Assigning a BinOp to a Name (line 4227):
        
        # Obtaining an instance of the builtin type 'list' (line 4227)
        list_113662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4227, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 4227)
        # Adding element type (line 4227)
        
        # Call to slice(...): (line 4227)
        # Processing the call arguments (line 4227)
        # Getting the type of 'None' (line 4227)
        None_113664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4227, 28), 'None', False)
        # Processing the call keyword arguments (line 4227)
        kwargs_113665 = {}
        # Getting the type of 'slice' (line 4227)
        slice_113663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4227, 22), 'slice', False)
        # Calling slice(args, kwargs) (line 4227)
        slice_call_result_113666 = invoke(stypy.reporting.localization.Localization(__file__, 4227, 22), slice_113663, *[None_113664], **kwargs_113665)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4227, 21), list_113662, slice_call_result_113666)
        
        # Getting the type of 'ndim' (line 4227)
        ndim_113667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4227, 35), 'ndim')
        # Applying the binary operator '*' (line 4227)
        result_mul_113668 = python_operator(stypy.reporting.localization.Localization(__file__, 4227, 21), '*', list_113662, ndim_113667)
        
        # Assigning a type to the variable 'slobj2' (line 4227)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4227, 12), 'slobj2', result_mul_113668)
        
        # Assigning a Call to a Subscript (line 4228):
        
        # Assigning a Call to a Subscript (line 4228):
        
        # Call to slice(...): (line 4228)
        # Processing the call arguments (line 4228)
        # Getting the type of 'stop' (line 4228)
        stop_113670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4228, 33), 'stop', False)
        # Getting the type of 'None' (line 4228)
        None_113671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4228, 39), 'None', False)
        # Processing the call keyword arguments (line 4228)
        kwargs_113672 = {}
        # Getting the type of 'slice' (line 4228)
        slice_113669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4228, 27), 'slice', False)
        # Calling slice(args, kwargs) (line 4228)
        slice_call_result_113673 = invoke(stypy.reporting.localization.Localization(__file__, 4228, 27), slice_113669, *[stop_113670, None_113671], **kwargs_113672)
        
        # Getting the type of 'slobj2' (line 4228)
        slobj2_113674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4228, 12), 'slobj2')
        # Getting the type of 'axis' (line 4228)
        axis_113675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4228, 19), 'axis')
        # Storing an element on a container (line 4228)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4228, 12), slobj2_113674, (axis_113675, slice_call_result_113673))
        
        # Assigning a Subscript to a Subscript (line 4229):
        
        # Assigning a Subscript to a Subscript (line 4229):
        
        # Obtaining the type of the subscript
        # Getting the type of 'slobj2' (line 4229)
        slobj2_113676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4229, 29), 'slobj2')
        # Getting the type of 'arr' (line 4229)
        arr_113677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4229, 25), 'arr')
        # Obtaining the member '__getitem__' of a type (line 4229)
        getitem___113678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4229, 25), arr_113677, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4229)
        subscript_call_result_113679 = invoke(stypy.reporting.localization.Localization(__file__, 4229, 25), getitem___113678, slobj2_113676)
        
        # Getting the type of 'new' (line 4229)
        new_113680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4229, 12), 'new')
        # Getting the type of 'slobj' (line 4229)
        slobj_113681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4229, 16), 'slobj')
        # Storing an element on a container (line 4229)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4229, 12), new_113680, (slobj_113681, subscript_call_result_113679))
        # SSA join for if statement (line 4223)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'step' (line 4231)
        step_113682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4231, 11), 'step')
        int_113683 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4231, 19), 'int')
        # Applying the binary operator '==' (line 4231)
        result_eq_113684 = python_operator(stypy.reporting.localization.Localization(__file__, 4231, 11), '==', step_113682, int_113683)
        
        # Testing the type of an if condition (line 4231)
        if_condition_113685 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4231, 8), result_eq_113684)
        # Assigning a type to the variable 'if_condition_113685' (line 4231)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4231, 8), 'if_condition_113685', if_condition_113685)
        # SSA begins for if statement (line 4231)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        pass
        # SSA branch for the else part of an if statement (line 4231)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 4234):
        
        # Assigning a Call to a Name (line 4234):
        
        # Call to ones(...): (line 4234)
        # Processing the call arguments (line 4234)
        # Getting the type of 'stop' (line 4234)
        stop_113687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4234, 24), 'stop', False)
        # Getting the type of 'start' (line 4234)
        start_113688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4234, 29), 'start', False)
        # Applying the binary operator '-' (line 4234)
        result_sub_113689 = python_operator(stypy.reporting.localization.Localization(__file__, 4234, 24), '-', stop_113687, start_113688)
        
        # Processing the call keyword arguments (line 4234)
        # Getting the type of 'bool' (line 4234)
        bool_113690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4234, 42), 'bool', False)
        keyword_113691 = bool_113690
        kwargs_113692 = {'dtype': keyword_113691}
        # Getting the type of 'ones' (line 4234)
        ones_113686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4234, 19), 'ones', False)
        # Calling ones(args, kwargs) (line 4234)
        ones_call_result_113693 = invoke(stypy.reporting.localization.Localization(__file__, 4234, 19), ones_113686, *[result_sub_113689], **kwargs_113692)
        
        # Assigning a type to the variable 'keep' (line 4234)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4234, 12), 'keep', ones_call_result_113693)
        
        # Assigning a Name to a Subscript (line 4235):
        
        # Assigning a Name to a Subscript (line 4235):
        # Getting the type of 'False' (line 4235)
        False_113694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4235, 37), 'False')
        # Getting the type of 'keep' (line 4235)
        keep_113695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4235, 12), 'keep')
        # Getting the type of 'stop' (line 4235)
        stop_113696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4235, 18), 'stop')
        # Getting the type of 'start' (line 4235)
        start_113697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4235, 23), 'start')
        # Applying the binary operator '-' (line 4235)
        result_sub_113698 = python_operator(stypy.reporting.localization.Localization(__file__, 4235, 18), '-', stop_113696, start_113697)
        
        # Getting the type of 'step' (line 4235)
        step_113699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4235, 29), 'step')
        slice_113700 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 4235, 12), None, result_sub_113698, step_113699)
        # Storing an element on a container (line 4235)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4235, 12), keep_113695, (slice_113700, False_113694))
        
        # Assigning a Call to a Subscript (line 4236):
        
        # Assigning a Call to a Subscript (line 4236):
        
        # Call to slice(...): (line 4236)
        # Processing the call arguments (line 4236)
        # Getting the type of 'start' (line 4236)
        start_113702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4236, 32), 'start', False)
        # Getting the type of 'stop' (line 4236)
        stop_113703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4236, 39), 'stop', False)
        # Getting the type of 'numtodel' (line 4236)
        numtodel_113704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4236, 44), 'numtodel', False)
        # Applying the binary operator '-' (line 4236)
        result_sub_113705 = python_operator(stypy.reporting.localization.Localization(__file__, 4236, 39), '-', stop_113703, numtodel_113704)
        
        # Processing the call keyword arguments (line 4236)
        kwargs_113706 = {}
        # Getting the type of 'slice' (line 4236)
        slice_113701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4236, 26), 'slice', False)
        # Calling slice(args, kwargs) (line 4236)
        slice_call_result_113707 = invoke(stypy.reporting.localization.Localization(__file__, 4236, 26), slice_113701, *[start_113702, result_sub_113705], **kwargs_113706)
        
        # Getting the type of 'slobj' (line 4236)
        slobj_113708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4236, 12), 'slobj')
        # Getting the type of 'axis' (line 4236)
        axis_113709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4236, 18), 'axis')
        # Storing an element on a container (line 4236)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4236, 12), slobj_113708, (axis_113709, slice_call_result_113707))
        
        # Assigning a BinOp to a Name (line 4237):
        
        # Assigning a BinOp to a Name (line 4237):
        
        # Obtaining an instance of the builtin type 'list' (line 4237)
        list_113710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4237, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 4237)
        # Adding element type (line 4237)
        
        # Call to slice(...): (line 4237)
        # Processing the call arguments (line 4237)
        # Getting the type of 'None' (line 4237)
        None_113712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4237, 28), 'None', False)
        # Processing the call keyword arguments (line 4237)
        kwargs_113713 = {}
        # Getting the type of 'slice' (line 4237)
        slice_113711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4237, 22), 'slice', False)
        # Calling slice(args, kwargs) (line 4237)
        slice_call_result_113714 = invoke(stypy.reporting.localization.Localization(__file__, 4237, 22), slice_113711, *[None_113712], **kwargs_113713)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4237, 21), list_113710, slice_call_result_113714)
        
        # Getting the type of 'ndim' (line 4237)
        ndim_113715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4237, 35), 'ndim')
        # Applying the binary operator '*' (line 4237)
        result_mul_113716 = python_operator(stypy.reporting.localization.Localization(__file__, 4237, 21), '*', list_113710, ndim_113715)
        
        # Assigning a type to the variable 'slobj2' (line 4237)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4237, 12), 'slobj2', result_mul_113716)
        
        # Assigning a Call to a Subscript (line 4238):
        
        # Assigning a Call to a Subscript (line 4238):
        
        # Call to slice(...): (line 4238)
        # Processing the call arguments (line 4238)
        # Getting the type of 'start' (line 4238)
        start_113718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4238, 33), 'start', False)
        # Getting the type of 'stop' (line 4238)
        stop_113719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4238, 40), 'stop', False)
        # Processing the call keyword arguments (line 4238)
        kwargs_113720 = {}
        # Getting the type of 'slice' (line 4238)
        slice_113717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4238, 27), 'slice', False)
        # Calling slice(args, kwargs) (line 4238)
        slice_call_result_113721 = invoke(stypy.reporting.localization.Localization(__file__, 4238, 27), slice_113717, *[start_113718, stop_113719], **kwargs_113720)
        
        # Getting the type of 'slobj2' (line 4238)
        slobj2_113722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4238, 12), 'slobj2')
        # Getting the type of 'axis' (line 4238)
        axis_113723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4238, 19), 'axis')
        # Storing an element on a container (line 4238)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4238, 12), slobj2_113722, (axis_113723, slice_call_result_113721))
        
        # Assigning a Subscript to a Name (line 4239):
        
        # Assigning a Subscript to a Name (line 4239):
        
        # Obtaining the type of the subscript
        # Getting the type of 'slobj2' (line 4239)
        slobj2_113724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4239, 22), 'slobj2')
        # Getting the type of 'arr' (line 4239)
        arr_113725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4239, 18), 'arr')
        # Obtaining the member '__getitem__' of a type (line 4239)
        getitem___113726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4239, 18), arr_113725, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4239)
        subscript_call_result_113727 = invoke(stypy.reporting.localization.Localization(__file__, 4239, 18), getitem___113726, slobj2_113724)
        
        # Assigning a type to the variable 'arr' (line 4239)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4239, 12), 'arr', subscript_call_result_113727)
        
        # Assigning a Name to a Subscript (line 4240):
        
        # Assigning a Name to a Subscript (line 4240):
        # Getting the type of 'keep' (line 4240)
        keep_113728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4240, 27), 'keep')
        # Getting the type of 'slobj2' (line 4240)
        slobj2_113729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4240, 12), 'slobj2')
        # Getting the type of 'axis' (line 4240)
        axis_113730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4240, 19), 'axis')
        # Storing an element on a container (line 4240)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4240, 12), slobj2_113729, (axis_113730, keep_113728))
        
        # Assigning a Subscript to a Subscript (line 4241):
        
        # Assigning a Subscript to a Subscript (line 4241):
        
        # Obtaining the type of the subscript
        # Getting the type of 'slobj2' (line 4241)
        slobj2_113731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4241, 29), 'slobj2')
        # Getting the type of 'arr' (line 4241)
        arr_113732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4241, 25), 'arr')
        # Obtaining the member '__getitem__' of a type (line 4241)
        getitem___113733 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4241, 25), arr_113732, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 4241)
        subscript_call_result_113734 = invoke(stypy.reporting.localization.Localization(__file__, 4241, 25), getitem___113733, slobj2_113731)
        
        # Getting the type of 'new' (line 4241)
        new_113735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4241, 12), 'new')
        # Getting the type of 'slobj' (line 4241)
        slobj_113736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4241, 16), 'slobj')
        # Storing an element on a container (line 4241)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4241, 12), new_113735, (slobj_113736, subscript_call_result_113734))
        # SSA join for if statement (line 4231)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'wrap' (line 4242)
        wrap_113737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4242, 11), 'wrap')
        # Testing the type of an if condition (line 4242)
        if_condition_113738 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4242, 8), wrap_113737)
        # Assigning a type to the variable 'if_condition_113738' (line 4242)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4242, 8), 'if_condition_113738', if_condition_113738)
        # SSA begins for if statement (line 4242)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to wrap(...): (line 4243)
        # Processing the call arguments (line 4243)
        # Getting the type of 'new' (line 4243)
        new_113740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4243, 24), 'new', False)
        # Processing the call keyword arguments (line 4243)
        kwargs_113741 = {}
        # Getting the type of 'wrap' (line 4243)
        wrap_113739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4243, 19), 'wrap', False)
        # Calling wrap(args, kwargs) (line 4243)
        wrap_call_result_113742 = invoke(stypy.reporting.localization.Localization(__file__, 4243, 19), wrap_113739, *[new_113740], **kwargs_113741)
        
        # Assigning a type to the variable 'stypy_return_type' (line 4243)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4243, 12), 'stypy_return_type', wrap_call_result_113742)
        # SSA branch for the else part of an if statement (line 4242)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'new' (line 4245)
        new_113743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4245, 19), 'new')
        # Assigning a type to the variable 'stypy_return_type' (line 4245)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4245, 12), 'stypy_return_type', new_113743)
        # SSA join for if statement (line 4242)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_113549:
            # SSA join for if statement (line 4197)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Name to a Name (line 4247):
    
    # Assigning a Name to a Name (line 4247):
    # Getting the type of 'obj' (line 4247)
    obj_113744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4247, 11), 'obj')
    # Assigning a type to the variable '_obj' (line 4247)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4247, 4), '_obj', obj_113744)
    
    # Assigning a Call to a Name (line 4248):
    
    # Assigning a Call to a Name (line 4248):
    
    # Call to asarray(...): (line 4248)
    # Processing the call arguments (line 4248)
    # Getting the type of 'obj' (line 4248)
    obj_113747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4248, 21), 'obj', False)
    # Processing the call keyword arguments (line 4248)
    kwargs_113748 = {}
    # Getting the type of 'np' (line 4248)
    np_113745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4248, 10), 'np', False)
    # Obtaining the member 'asarray' of a type (line 4248)
    asarray_113746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4248, 10), np_113745, 'asarray')
    # Calling asarray(args, kwargs) (line 4248)
    asarray_call_result_113749 = invoke(stypy.reporting.localization.Localization(__file__, 4248, 10), asarray_113746, *[obj_113747], **kwargs_113748)
    
    # Assigning a type to the variable 'obj' (line 4248)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4248, 4), 'obj', asarray_call_result_113749)
    
    
    # Getting the type of 'obj' (line 4251)
    obj_113750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4251, 7), 'obj')
    # Obtaining the member 'dtype' of a type (line 4251)
    dtype_113751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4251, 7), obj_113750, 'dtype')
    # Getting the type of 'bool' (line 4251)
    bool_113752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4251, 20), 'bool')
    # Applying the binary operator '==' (line 4251)
    result_eq_113753 = python_operator(stypy.reporting.localization.Localization(__file__, 4251, 7), '==', dtype_113751, bool_113752)
    
    # Testing the type of an if condition (line 4251)
    if_condition_113754 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4251, 4), result_eq_113753)
    # Assigning a type to the variable 'if_condition_113754' (line 4251)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4251, 4), 'if_condition_113754', if_condition_113754)
    # SSA begins for if statement (line 4251)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 4252)
    # Processing the call arguments (line 4252)
    str_113757 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4253, 12), 'str', 'in the future insert will treat boolean arrays and array-likes as boolean index instead of casting it to integer')
    # Getting the type of 'FutureWarning' (line 4254)
    FutureWarning_113758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4254, 65), 'FutureWarning', False)
    # Processing the call keyword arguments (line 4252)
    kwargs_113759 = {}
    # Getting the type of 'warnings' (line 4252)
    warnings_113755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4252, 8), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 4252)
    warn_113756 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4252, 8), warnings_113755, 'warn')
    # Calling warn(args, kwargs) (line 4252)
    warn_call_result_113760 = invoke(stypy.reporting.localization.Localization(__file__, 4252, 8), warn_113756, *[str_113757, FutureWarning_113758], **kwargs_113759)
    
    
    # Assigning a Call to a Name (line 4255):
    
    # Assigning a Call to a Name (line 4255):
    
    # Call to astype(...): (line 4255)
    # Processing the call arguments (line 4255)
    # Getting the type of 'intp' (line 4255)
    intp_113763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4255, 25), 'intp', False)
    # Processing the call keyword arguments (line 4255)
    kwargs_113764 = {}
    # Getting the type of 'obj' (line 4255)
    obj_113761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4255, 14), 'obj', False)
    # Obtaining the member 'astype' of a type (line 4255)
    astype_113762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4255, 14), obj_113761, 'astype')
    # Calling astype(args, kwargs) (line 4255)
    astype_call_result_113765 = invoke(stypy.reporting.localization.Localization(__file__, 4255, 14), astype_113762, *[intp_113763], **kwargs_113764)
    
    # Assigning a type to the variable 'obj' (line 4255)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4255, 8), 'obj', astype_call_result_113765)
    # SSA join for if statement (line 4251)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to isinstance(...): (line 4256)
    # Processing the call arguments (line 4256)
    # Getting the type of '_obj' (line 4256)
    _obj_113767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4256, 18), '_obj', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 4256)
    tuple_113768 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4256, 25), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 4256)
    # Adding element type (line 4256)
    # Getting the type of 'int' (line 4256)
    int_113769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4256, 25), 'int', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4256, 25), tuple_113768, int_113769)
    # Adding element type (line 4256)
    # Getting the type of 'long' (line 4256)
    long_113770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4256, 30), 'long', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4256, 25), tuple_113768, long_113770)
    # Adding element type (line 4256)
    # Getting the type of 'integer' (line 4256)
    integer_113771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4256, 36), 'integer', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4256, 25), tuple_113768, integer_113771)
    
    # Processing the call keyword arguments (line 4256)
    kwargs_113772 = {}
    # Getting the type of 'isinstance' (line 4256)
    isinstance_113766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4256, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 4256)
    isinstance_call_result_113773 = invoke(stypy.reporting.localization.Localization(__file__, 4256, 7), isinstance_113766, *[_obj_113767, tuple_113768], **kwargs_113772)
    
    # Testing the type of an if condition (line 4256)
    if_condition_113774 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4256, 4), isinstance_call_result_113773)
    # Assigning a type to the variable 'if_condition_113774' (line 4256)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4256, 4), 'if_condition_113774', if_condition_113774)
    # SSA begins for if statement (line 4256)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 4258):
    
    # Assigning a Call to a Name (line 4258):
    
    # Call to item(...): (line 4258)
    # Processing the call keyword arguments (line 4258)
    kwargs_113777 = {}
    # Getting the type of 'obj' (line 4258)
    obj_113775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4258, 14), 'obj', False)
    # Obtaining the member 'item' of a type (line 4258)
    item_113776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4258, 14), obj_113775, 'item')
    # Calling item(args, kwargs) (line 4258)
    item_call_result_113778 = invoke(stypy.reporting.localization.Localization(__file__, 4258, 14), item_113776, *[], **kwargs_113777)
    
    # Assigning a type to the variable 'obj' (line 4258)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4258, 8), 'obj', item_call_result_113778)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'obj' (line 4259)
    obj_113779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4259, 12), 'obj')
    
    # Getting the type of 'N' (line 4259)
    N_113780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4259, 19), 'N')
    # Applying the 'usub' unary operator (line 4259)
    result___neg___113781 = python_operator(stypy.reporting.localization.Localization(__file__, 4259, 18), 'usub', N_113780)
    
    # Applying the binary operator '<' (line 4259)
    result_lt_113782 = python_operator(stypy.reporting.localization.Localization(__file__, 4259, 12), '<', obj_113779, result___neg___113781)
    
    
    # Getting the type of 'obj' (line 4259)
    obj_113783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4259, 24), 'obj')
    # Getting the type of 'N' (line 4259)
    N_113784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4259, 31), 'N')
    # Applying the binary operator '>=' (line 4259)
    result_ge_113785 = python_operator(stypy.reporting.localization.Localization(__file__, 4259, 24), '>=', obj_113783, N_113784)
    
    # Applying the binary operator 'or' (line 4259)
    result_or_keyword_113786 = python_operator(stypy.reporting.localization.Localization(__file__, 4259, 12), 'or', result_lt_113782, result_ge_113785)
    
    # Testing the type of an if condition (line 4259)
    if_condition_113787 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4259, 8), result_or_keyword_113786)
    # Assigning a type to the variable 'if_condition_113787' (line 4259)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4259, 8), 'if_condition_113787', if_condition_113787)
    # SSA begins for if statement (line 4259)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to IndexError(...): (line 4260)
    # Processing the call arguments (line 4260)
    str_113789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4261, 16), 'str', 'index %i is out of bounds for axis %i with size %i')
    
    # Obtaining an instance of the builtin type 'tuple' (line 4262)
    tuple_113790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4262, 29), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 4262)
    # Adding element type (line 4262)
    # Getting the type of 'obj' (line 4262)
    obj_113791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4262, 29), 'obj', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4262, 29), tuple_113790, obj_113791)
    # Adding element type (line 4262)
    # Getting the type of 'axis' (line 4262)
    axis_113792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4262, 34), 'axis', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4262, 29), tuple_113790, axis_113792)
    # Adding element type (line 4262)
    # Getting the type of 'N' (line 4262)
    N_113793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4262, 40), 'N', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4262, 29), tuple_113790, N_113793)
    
    # Applying the binary operator '%' (line 4261)
    result_mod_113794 = python_operator(stypy.reporting.localization.Localization(__file__, 4261, 16), '%', str_113789, tuple_113790)
    
    # Processing the call keyword arguments (line 4260)
    kwargs_113795 = {}
    # Getting the type of 'IndexError' (line 4260)
    IndexError_113788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4260, 18), 'IndexError', False)
    # Calling IndexError(args, kwargs) (line 4260)
    IndexError_call_result_113796 = invoke(stypy.reporting.localization.Localization(__file__, 4260, 18), IndexError_113788, *[result_mod_113794], **kwargs_113795)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 4260, 12), IndexError_call_result_113796, 'raise parameter', BaseException)
    # SSA join for if statement (line 4259)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'obj' (line 4263)
    obj_113797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4263, 12), 'obj')
    int_113798 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4263, 18), 'int')
    # Applying the binary operator '<' (line 4263)
    result_lt_113799 = python_operator(stypy.reporting.localization.Localization(__file__, 4263, 12), '<', obj_113797, int_113798)
    
    # Testing the type of an if condition (line 4263)
    if_condition_113800 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4263, 8), result_lt_113799)
    # Assigning a type to the variable 'if_condition_113800' (line 4263)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4263, 8), 'if_condition_113800', if_condition_113800)
    # SSA begins for if statement (line 4263)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'obj' (line 4264)
    obj_113801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4264, 12), 'obj')
    # Getting the type of 'N' (line 4264)
    N_113802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4264, 19), 'N')
    # Applying the binary operator '+=' (line 4264)
    result_iadd_113803 = python_operator(stypy.reporting.localization.Localization(__file__, 4264, 12), '+=', obj_113801, N_113802)
    # Assigning a type to the variable 'obj' (line 4264)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4264, 12), 'obj', result_iadd_113803)
    
    # SSA join for if statement (line 4263)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'newshape' (line 4265)
    newshape_113804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4265, 8), 'newshape')
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 4265)
    axis_113805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4265, 17), 'axis')
    # Getting the type of 'newshape' (line 4265)
    newshape_113806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4265, 8), 'newshape')
    # Obtaining the member '__getitem__' of a type (line 4265)
    getitem___113807 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4265, 8), newshape_113806, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4265)
    subscript_call_result_113808 = invoke(stypy.reporting.localization.Localization(__file__, 4265, 8), getitem___113807, axis_113805)
    
    int_113809 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4265, 26), 'int')
    # Applying the binary operator '-=' (line 4265)
    result_isub_113810 = python_operator(stypy.reporting.localization.Localization(__file__, 4265, 8), '-=', subscript_call_result_113808, int_113809)
    # Getting the type of 'newshape' (line 4265)
    newshape_113811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4265, 8), 'newshape')
    # Getting the type of 'axis' (line 4265)
    axis_113812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4265, 17), 'axis')
    # Storing an element on a container (line 4265)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4265, 8), newshape_113811, (axis_113812, result_isub_113810))
    
    
    # Assigning a Call to a Name (line 4266):
    
    # Assigning a Call to a Name (line 4266):
    
    # Call to empty(...): (line 4266)
    # Processing the call arguments (line 4266)
    # Getting the type of 'newshape' (line 4266)
    newshape_113814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4266, 20), 'newshape', False)
    # Getting the type of 'arr' (line 4266)
    arr_113815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4266, 30), 'arr', False)
    # Obtaining the member 'dtype' of a type (line 4266)
    dtype_113816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4266, 30), arr_113815, 'dtype')
    # Getting the type of 'arrorder' (line 4266)
    arrorder_113817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4266, 41), 'arrorder', False)
    # Processing the call keyword arguments (line 4266)
    kwargs_113818 = {}
    # Getting the type of 'empty' (line 4266)
    empty_113813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4266, 14), 'empty', False)
    # Calling empty(args, kwargs) (line 4266)
    empty_call_result_113819 = invoke(stypy.reporting.localization.Localization(__file__, 4266, 14), empty_113813, *[newshape_113814, dtype_113816, arrorder_113817], **kwargs_113818)
    
    # Assigning a type to the variable 'new' (line 4266)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4266, 8), 'new', empty_call_result_113819)
    
    # Assigning a Call to a Subscript (line 4267):
    
    # Assigning a Call to a Subscript (line 4267):
    
    # Call to slice(...): (line 4267)
    # Processing the call arguments (line 4267)
    # Getting the type of 'None' (line 4267)
    None_113821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4267, 28), 'None', False)
    # Getting the type of 'obj' (line 4267)
    obj_113822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4267, 34), 'obj', False)
    # Processing the call keyword arguments (line 4267)
    kwargs_113823 = {}
    # Getting the type of 'slice' (line 4267)
    slice_113820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4267, 22), 'slice', False)
    # Calling slice(args, kwargs) (line 4267)
    slice_call_result_113824 = invoke(stypy.reporting.localization.Localization(__file__, 4267, 22), slice_113820, *[None_113821, obj_113822], **kwargs_113823)
    
    # Getting the type of 'slobj' (line 4267)
    slobj_113825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4267, 8), 'slobj')
    # Getting the type of 'axis' (line 4267)
    axis_113826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4267, 14), 'axis')
    # Storing an element on a container (line 4267)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4267, 8), slobj_113825, (axis_113826, slice_call_result_113824))
    
    # Assigning a Subscript to a Subscript (line 4268):
    
    # Assigning a Subscript to a Subscript (line 4268):
    
    # Obtaining the type of the subscript
    # Getting the type of 'slobj' (line 4268)
    slobj_113827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4268, 25), 'slobj')
    # Getting the type of 'arr' (line 4268)
    arr_113828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4268, 21), 'arr')
    # Obtaining the member '__getitem__' of a type (line 4268)
    getitem___113829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4268, 21), arr_113828, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4268)
    subscript_call_result_113830 = invoke(stypy.reporting.localization.Localization(__file__, 4268, 21), getitem___113829, slobj_113827)
    
    # Getting the type of 'new' (line 4268)
    new_113831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4268, 8), 'new')
    # Getting the type of 'slobj' (line 4268)
    slobj_113832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4268, 12), 'slobj')
    # Storing an element on a container (line 4268)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4268, 8), new_113831, (slobj_113832, subscript_call_result_113830))
    
    # Assigning a Call to a Subscript (line 4269):
    
    # Assigning a Call to a Subscript (line 4269):
    
    # Call to slice(...): (line 4269)
    # Processing the call arguments (line 4269)
    # Getting the type of 'obj' (line 4269)
    obj_113834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4269, 28), 'obj', False)
    # Getting the type of 'None' (line 4269)
    None_113835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4269, 33), 'None', False)
    # Processing the call keyword arguments (line 4269)
    kwargs_113836 = {}
    # Getting the type of 'slice' (line 4269)
    slice_113833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4269, 22), 'slice', False)
    # Calling slice(args, kwargs) (line 4269)
    slice_call_result_113837 = invoke(stypy.reporting.localization.Localization(__file__, 4269, 22), slice_113833, *[obj_113834, None_113835], **kwargs_113836)
    
    # Getting the type of 'slobj' (line 4269)
    slobj_113838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4269, 8), 'slobj')
    # Getting the type of 'axis' (line 4269)
    axis_113839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4269, 14), 'axis')
    # Storing an element on a container (line 4269)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4269, 8), slobj_113838, (axis_113839, slice_call_result_113837))
    
    # Assigning a BinOp to a Name (line 4270):
    
    # Assigning a BinOp to a Name (line 4270):
    
    # Obtaining an instance of the builtin type 'list' (line 4270)
    list_113840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4270, 17), 'list')
    # Adding type elements to the builtin type 'list' instance (line 4270)
    # Adding element type (line 4270)
    
    # Call to slice(...): (line 4270)
    # Processing the call arguments (line 4270)
    # Getting the type of 'None' (line 4270)
    None_113842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4270, 24), 'None', False)
    # Processing the call keyword arguments (line 4270)
    kwargs_113843 = {}
    # Getting the type of 'slice' (line 4270)
    slice_113841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4270, 18), 'slice', False)
    # Calling slice(args, kwargs) (line 4270)
    slice_call_result_113844 = invoke(stypy.reporting.localization.Localization(__file__, 4270, 18), slice_113841, *[None_113842], **kwargs_113843)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4270, 17), list_113840, slice_call_result_113844)
    
    # Getting the type of 'ndim' (line 4270)
    ndim_113845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4270, 31), 'ndim')
    # Applying the binary operator '*' (line 4270)
    result_mul_113846 = python_operator(stypy.reporting.localization.Localization(__file__, 4270, 17), '*', list_113840, ndim_113845)
    
    # Assigning a type to the variable 'slobj2' (line 4270)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4270, 8), 'slobj2', result_mul_113846)
    
    # Assigning a Call to a Subscript (line 4271):
    
    # Assigning a Call to a Subscript (line 4271):
    
    # Call to slice(...): (line 4271)
    # Processing the call arguments (line 4271)
    # Getting the type of 'obj' (line 4271)
    obj_113848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4271, 29), 'obj', False)
    int_113849 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4271, 33), 'int')
    # Applying the binary operator '+' (line 4271)
    result_add_113850 = python_operator(stypy.reporting.localization.Localization(__file__, 4271, 29), '+', obj_113848, int_113849)
    
    # Getting the type of 'None' (line 4271)
    None_113851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4271, 36), 'None', False)
    # Processing the call keyword arguments (line 4271)
    kwargs_113852 = {}
    # Getting the type of 'slice' (line 4271)
    slice_113847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4271, 23), 'slice', False)
    # Calling slice(args, kwargs) (line 4271)
    slice_call_result_113853 = invoke(stypy.reporting.localization.Localization(__file__, 4271, 23), slice_113847, *[result_add_113850, None_113851], **kwargs_113852)
    
    # Getting the type of 'slobj2' (line 4271)
    slobj2_113854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4271, 8), 'slobj2')
    # Getting the type of 'axis' (line 4271)
    axis_113855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4271, 15), 'axis')
    # Storing an element on a container (line 4271)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4271, 8), slobj2_113854, (axis_113855, slice_call_result_113853))
    
    # Assigning a Subscript to a Subscript (line 4272):
    
    # Assigning a Subscript to a Subscript (line 4272):
    
    # Obtaining the type of the subscript
    # Getting the type of 'slobj2' (line 4272)
    slobj2_113856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4272, 25), 'slobj2')
    # Getting the type of 'arr' (line 4272)
    arr_113857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4272, 21), 'arr')
    # Obtaining the member '__getitem__' of a type (line 4272)
    getitem___113858 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4272, 21), arr_113857, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4272)
    subscript_call_result_113859 = invoke(stypy.reporting.localization.Localization(__file__, 4272, 21), getitem___113858, slobj2_113856)
    
    # Getting the type of 'new' (line 4272)
    new_113860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4272, 8), 'new')
    # Getting the type of 'slobj' (line 4272)
    slobj_113861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4272, 12), 'slobj')
    # Storing an element on a container (line 4272)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4272, 8), new_113860, (slobj_113861, subscript_call_result_113859))
    # SSA branch for the else part of an if statement (line 4256)
    module_type_store.open_ssa_branch('else')
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'obj' (line 4274)
    obj_113862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4274, 11), 'obj')
    # Obtaining the member 'size' of a type (line 4274)
    size_113863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4274, 11), obj_113862, 'size')
    int_113864 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4274, 23), 'int')
    # Applying the binary operator '==' (line 4274)
    result_eq_113865 = python_operator(stypy.reporting.localization.Localization(__file__, 4274, 11), '==', size_113863, int_113864)
    
    
    
    # Call to isinstance(...): (line 4274)
    # Processing the call arguments (line 4274)
    # Getting the type of '_obj' (line 4274)
    _obj_113867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4274, 44), '_obj', False)
    # Getting the type of 'np' (line 4274)
    np_113868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4274, 50), 'np', False)
    # Obtaining the member 'ndarray' of a type (line 4274)
    ndarray_113869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4274, 50), np_113868, 'ndarray')
    # Processing the call keyword arguments (line 4274)
    kwargs_113870 = {}
    # Getting the type of 'isinstance' (line 4274)
    isinstance_113866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4274, 33), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 4274)
    isinstance_call_result_113871 = invoke(stypy.reporting.localization.Localization(__file__, 4274, 33), isinstance_113866, *[_obj_113867, ndarray_113869], **kwargs_113870)
    
    # Applying the 'not' unary operator (line 4274)
    result_not__113872 = python_operator(stypy.reporting.localization.Localization(__file__, 4274, 29), 'not', isinstance_call_result_113871)
    
    # Applying the binary operator 'and' (line 4274)
    result_and_keyword_113873 = python_operator(stypy.reporting.localization.Localization(__file__, 4274, 11), 'and', result_eq_113865, result_not__113872)
    
    # Testing the type of an if condition (line 4274)
    if_condition_113874 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4274, 8), result_and_keyword_113873)
    # Assigning a type to the variable 'if_condition_113874' (line 4274)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4274, 8), 'if_condition_113874', if_condition_113874)
    # SSA begins for if statement (line 4274)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 4275):
    
    # Assigning a Call to a Name (line 4275):
    
    # Call to astype(...): (line 4275)
    # Processing the call arguments (line 4275)
    # Getting the type of 'intp' (line 4275)
    intp_113877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4275, 29), 'intp', False)
    # Processing the call keyword arguments (line 4275)
    kwargs_113878 = {}
    # Getting the type of 'obj' (line 4275)
    obj_113875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4275, 18), 'obj', False)
    # Obtaining the member 'astype' of a type (line 4275)
    astype_113876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4275, 18), obj_113875, 'astype')
    # Calling astype(args, kwargs) (line 4275)
    astype_call_result_113879 = invoke(stypy.reporting.localization.Localization(__file__, 4275, 18), astype_113876, *[intp_113877], **kwargs_113878)
    
    # Assigning a type to the variable 'obj' (line 4275)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4275, 12), 'obj', astype_call_result_113879)
    # SSA join for if statement (line 4274)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to can_cast(...): (line 4276)
    # Processing the call arguments (line 4276)
    # Getting the type of 'obj' (line 4276)
    obj_113882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4276, 27), 'obj', False)
    # Getting the type of 'intp' (line 4276)
    intp_113883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4276, 32), 'intp', False)
    str_113884 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4276, 38), 'str', 'same_kind')
    # Processing the call keyword arguments (line 4276)
    kwargs_113885 = {}
    # Getting the type of 'np' (line 4276)
    np_113880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4276, 15), 'np', False)
    # Obtaining the member 'can_cast' of a type (line 4276)
    can_cast_113881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4276, 15), np_113880, 'can_cast')
    # Calling can_cast(args, kwargs) (line 4276)
    can_cast_call_result_113886 = invoke(stypy.reporting.localization.Localization(__file__, 4276, 15), can_cast_113881, *[obj_113882, intp_113883, str_113884], **kwargs_113885)
    
    # Applying the 'not' unary operator (line 4276)
    result_not__113887 = python_operator(stypy.reporting.localization.Localization(__file__, 4276, 11), 'not', can_cast_call_result_113886)
    
    # Testing the type of an if condition (line 4276)
    if_condition_113888 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4276, 8), result_not__113887)
    # Assigning a type to the variable 'if_condition_113888' (line 4276)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4276, 8), 'if_condition_113888', if_condition_113888)
    # SSA begins for if statement (line 4276)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 4280)
    # Processing the call arguments (line 4280)
    str_113891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4281, 16), 'str', 'using a non-integer array as obj in delete will result in an error in the future')
    # Getting the type of 'DeprecationWarning' (line 4282)
    DeprecationWarning_113892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4282, 39), 'DeprecationWarning', False)
    # Processing the call keyword arguments (line 4280)
    kwargs_113893 = {}
    # Getting the type of 'warnings' (line 4280)
    warnings_113889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4280, 12), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 4280)
    warn_113890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4280, 12), warnings_113889, 'warn')
    # Calling warn(args, kwargs) (line 4280)
    warn_call_result_113894 = invoke(stypy.reporting.localization.Localization(__file__, 4280, 12), warn_113890, *[str_113891, DeprecationWarning_113892], **kwargs_113893)
    
    
    # Assigning a Call to a Name (line 4283):
    
    # Assigning a Call to a Name (line 4283):
    
    # Call to astype(...): (line 4283)
    # Processing the call arguments (line 4283)
    # Getting the type of 'intp' (line 4283)
    intp_113897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4283, 29), 'intp', False)
    # Processing the call keyword arguments (line 4283)
    kwargs_113898 = {}
    # Getting the type of 'obj' (line 4283)
    obj_113895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4283, 18), 'obj', False)
    # Obtaining the member 'astype' of a type (line 4283)
    astype_113896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4283, 18), obj_113895, 'astype')
    # Calling astype(args, kwargs) (line 4283)
    astype_call_result_113899 = invoke(stypy.reporting.localization.Localization(__file__, 4283, 18), astype_113896, *[intp_113897], **kwargs_113898)
    
    # Assigning a type to the variable 'obj' (line 4283)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4283, 12), 'obj', astype_call_result_113899)
    # SSA join for if statement (line 4276)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 4284):
    
    # Assigning a Call to a Name (line 4284):
    
    # Call to ones(...): (line 4284)
    # Processing the call arguments (line 4284)
    # Getting the type of 'N' (line 4284)
    N_113901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4284, 20), 'N', False)
    # Processing the call keyword arguments (line 4284)
    # Getting the type of 'bool' (line 4284)
    bool_113902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4284, 29), 'bool', False)
    keyword_113903 = bool_113902
    kwargs_113904 = {'dtype': keyword_113903}
    # Getting the type of 'ones' (line 4284)
    ones_113900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4284, 15), 'ones', False)
    # Calling ones(args, kwargs) (line 4284)
    ones_call_result_113905 = invoke(stypy.reporting.localization.Localization(__file__, 4284, 15), ones_113900, *[N_113901], **kwargs_113904)
    
    # Assigning a type to the variable 'keep' (line 4284)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4284, 8), 'keep', ones_call_result_113905)
    
    # Assigning a BinOp to a Name (line 4287):
    
    # Assigning a BinOp to a Name (line 4287):
    
    # Getting the type of 'obj' (line 4287)
    obj_113906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4287, 25), 'obj')
    # Getting the type of 'N' (line 4287)
    N_113907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4287, 31), 'N')
    # Applying the binary operator '<' (line 4287)
    result_lt_113908 = python_operator(stypy.reporting.localization.Localization(__file__, 4287, 25), '<', obj_113906, N_113907)
    
    
    # Getting the type of 'obj' (line 4287)
    obj_113909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4287, 37), 'obj')
    
    # Getting the type of 'N' (line 4287)
    N_113910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4287, 45), 'N')
    # Applying the 'usub' unary operator (line 4287)
    result___neg___113911 = python_operator(stypy.reporting.localization.Localization(__file__, 4287, 44), 'usub', N_113910)
    
    # Applying the binary operator '>=' (line 4287)
    result_ge_113912 = python_operator(stypy.reporting.localization.Localization(__file__, 4287, 37), '>=', obj_113909, result___neg___113911)
    
    # Applying the binary operator '&' (line 4287)
    result_and__113913 = python_operator(stypy.reporting.localization.Localization(__file__, 4287, 24), '&', result_lt_113908, result_ge_113912)
    
    # Assigning a type to the variable 'inside_bounds' (line 4287)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4287, 8), 'inside_bounds', result_and__113913)
    
    
    
    # Call to all(...): (line 4288)
    # Processing the call keyword arguments (line 4288)
    kwargs_113916 = {}
    # Getting the type of 'inside_bounds' (line 4288)
    inside_bounds_113914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4288, 15), 'inside_bounds', False)
    # Obtaining the member 'all' of a type (line 4288)
    all_113915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4288, 15), inside_bounds_113914, 'all')
    # Calling all(args, kwargs) (line 4288)
    all_call_result_113917 = invoke(stypy.reporting.localization.Localization(__file__, 4288, 15), all_113915, *[], **kwargs_113916)
    
    # Applying the 'not' unary operator (line 4288)
    result_not__113918 = python_operator(stypy.reporting.localization.Localization(__file__, 4288, 11), 'not', all_call_result_113917)
    
    # Testing the type of an if condition (line 4288)
    if_condition_113919 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4288, 8), result_not__113918)
    # Assigning a type to the variable 'if_condition_113919' (line 4288)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4288, 8), 'if_condition_113919', if_condition_113919)
    # SSA begins for if statement (line 4288)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 4290)
    # Processing the call arguments (line 4290)
    str_113922 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4291, 16), 'str', 'in the future out of bounds indices will raise an error instead of being ignored by `numpy.delete`.')
    # Getting the type of 'DeprecationWarning' (line 4293)
    DeprecationWarning_113923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4293, 16), 'DeprecationWarning', False)
    # Processing the call keyword arguments (line 4290)
    kwargs_113924 = {}
    # Getting the type of 'warnings' (line 4290)
    warnings_113920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4290, 12), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 4290)
    warn_113921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4290, 12), warnings_113920, 'warn')
    # Calling warn(args, kwargs) (line 4290)
    warn_call_result_113925 = invoke(stypy.reporting.localization.Localization(__file__, 4290, 12), warn_113921, *[str_113922, DeprecationWarning_113923], **kwargs_113924)
    
    
    # Assigning a Subscript to a Name (line 4294):
    
    # Assigning a Subscript to a Name (line 4294):
    
    # Obtaining the type of the subscript
    # Getting the type of 'inside_bounds' (line 4294)
    inside_bounds_113926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4294, 22), 'inside_bounds')
    # Getting the type of 'obj' (line 4294)
    obj_113927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4294, 18), 'obj')
    # Obtaining the member '__getitem__' of a type (line 4294)
    getitem___113928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4294, 18), obj_113927, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4294)
    subscript_call_result_113929 = invoke(stypy.reporting.localization.Localization(__file__, 4294, 18), getitem___113928, inside_bounds_113926)
    
    # Assigning a type to the variable 'obj' (line 4294)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4294, 12), 'obj', subscript_call_result_113929)
    # SSA join for if statement (line 4288)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Compare to a Name (line 4295):
    
    # Assigning a Compare to a Name (line 4295):
    
    # Getting the type of 'obj' (line 4295)
    obj_113930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4295, 27), 'obj')
    int_113931 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4295, 34), 'int')
    # Applying the binary operator '>=' (line 4295)
    result_ge_113932 = python_operator(stypy.reporting.localization.Localization(__file__, 4295, 27), '>=', obj_113930, int_113931)
    
    # Assigning a type to the variable 'positive_indices' (line 4295)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4295, 8), 'positive_indices', result_ge_113932)
    
    
    
    # Call to all(...): (line 4296)
    # Processing the call keyword arguments (line 4296)
    kwargs_113935 = {}
    # Getting the type of 'positive_indices' (line 4296)
    positive_indices_113933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4296, 15), 'positive_indices', False)
    # Obtaining the member 'all' of a type (line 4296)
    all_113934 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4296, 15), positive_indices_113933, 'all')
    # Calling all(args, kwargs) (line 4296)
    all_call_result_113936 = invoke(stypy.reporting.localization.Localization(__file__, 4296, 15), all_113934, *[], **kwargs_113935)
    
    # Applying the 'not' unary operator (line 4296)
    result_not__113937 = python_operator(stypy.reporting.localization.Localization(__file__, 4296, 11), 'not', all_call_result_113936)
    
    # Testing the type of an if condition (line 4296)
    if_condition_113938 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4296, 8), result_not__113937)
    # Assigning a type to the variable 'if_condition_113938' (line 4296)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4296, 8), 'if_condition_113938', if_condition_113938)
    # SSA begins for if statement (line 4296)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 4297)
    # Processing the call arguments (line 4297)
    str_113941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4298, 16), 'str', 'in the future negative indices will not be ignored by `numpy.delete`.')
    # Getting the type of 'FutureWarning' (line 4299)
    FutureWarning_113942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4299, 35), 'FutureWarning', False)
    # Processing the call keyword arguments (line 4297)
    kwargs_113943 = {}
    # Getting the type of 'warnings' (line 4297)
    warnings_113939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4297, 12), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 4297)
    warn_113940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4297, 12), warnings_113939, 'warn')
    # Calling warn(args, kwargs) (line 4297)
    warn_call_result_113944 = invoke(stypy.reporting.localization.Localization(__file__, 4297, 12), warn_113940, *[str_113941, FutureWarning_113942], **kwargs_113943)
    
    
    # Assigning a Subscript to a Name (line 4300):
    
    # Assigning a Subscript to a Name (line 4300):
    
    # Obtaining the type of the subscript
    # Getting the type of 'positive_indices' (line 4300)
    positive_indices_113945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4300, 22), 'positive_indices')
    # Getting the type of 'obj' (line 4300)
    obj_113946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4300, 18), 'obj')
    # Obtaining the member '__getitem__' of a type (line 4300)
    getitem___113947 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4300, 18), obj_113946, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4300)
    subscript_call_result_113948 = invoke(stypy.reporting.localization.Localization(__file__, 4300, 18), getitem___113947, positive_indices_113945)
    
    # Assigning a type to the variable 'obj' (line 4300)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4300, 12), 'obj', subscript_call_result_113948)
    # SSA join for if statement (line 4296)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Subscript (line 4302):
    
    # Assigning a Name to a Subscript (line 4302):
    # Getting the type of 'False' (line 4302)
    False_113949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4302, 22), 'False')
    # Getting the type of 'keep' (line 4302)
    keep_113950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4302, 8), 'keep')
    
    # Obtaining an instance of the builtin type 'tuple' (line 4302)
    tuple_113951 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4302, 13), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 4302)
    # Adding element type (line 4302)
    # Getting the type of 'obj' (line 4302)
    obj_113952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4302, 13), 'obj')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4302, 13), tuple_113951, obj_113952)
    
    # Storing an element on a container (line 4302)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4302, 8), keep_113950, (tuple_113951, False_113949))
    
    # Assigning a Name to a Subscript (line 4303):
    
    # Assigning a Name to a Subscript (line 4303):
    # Getting the type of 'keep' (line 4303)
    keep_113953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4303, 22), 'keep')
    # Getting the type of 'slobj' (line 4303)
    slobj_113954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4303, 8), 'slobj')
    # Getting the type of 'axis' (line 4303)
    axis_113955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4303, 14), 'axis')
    # Storing an element on a container (line 4303)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4303, 8), slobj_113954, (axis_113955, keep_113953))
    
    # Assigning a Subscript to a Name (line 4304):
    
    # Assigning a Subscript to a Name (line 4304):
    
    # Obtaining the type of the subscript
    # Getting the type of 'slobj' (line 4304)
    slobj_113956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4304, 18), 'slobj')
    # Getting the type of 'arr' (line 4304)
    arr_113957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4304, 14), 'arr')
    # Obtaining the member '__getitem__' of a type (line 4304)
    getitem___113958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4304, 14), arr_113957, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4304)
    subscript_call_result_113959 = invoke(stypy.reporting.localization.Localization(__file__, 4304, 14), getitem___113958, slobj_113956)
    
    # Assigning a type to the variable 'new' (line 4304)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4304, 8), 'new', subscript_call_result_113959)
    # SSA join for if statement (line 4256)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'wrap' (line 4306)
    wrap_113960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4306, 7), 'wrap')
    # Testing the type of an if condition (line 4306)
    if_condition_113961 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4306, 4), wrap_113960)
    # Assigning a type to the variable 'if_condition_113961' (line 4306)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4306, 4), 'if_condition_113961', if_condition_113961)
    # SSA begins for if statement (line 4306)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to wrap(...): (line 4307)
    # Processing the call arguments (line 4307)
    # Getting the type of 'new' (line 4307)
    new_113963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4307, 20), 'new', False)
    # Processing the call keyword arguments (line 4307)
    kwargs_113964 = {}
    # Getting the type of 'wrap' (line 4307)
    wrap_113962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4307, 15), 'wrap', False)
    # Calling wrap(args, kwargs) (line 4307)
    wrap_call_result_113965 = invoke(stypy.reporting.localization.Localization(__file__, 4307, 15), wrap_113962, *[new_113963], **kwargs_113964)
    
    # Assigning a type to the variable 'stypy_return_type' (line 4307)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4307, 8), 'stypy_return_type', wrap_call_result_113965)
    # SSA branch for the else part of an if statement (line 4306)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'new' (line 4309)
    new_113966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4309, 15), 'new')
    # Assigning a type to the variable 'stypy_return_type' (line 4309)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4309, 8), 'stypy_return_type', new_113966)
    # SSA join for if statement (line 4306)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'delete(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'delete' in the type store
    # Getting the type of 'stypy_return_type' (line 4110)
    stypy_return_type_113967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4110, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_113967)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'delete'
    return stypy_return_type_113967

# Assigning a type to the variable 'delete' (line 4110)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4110, 0), 'delete', delete)

@norecursion
def insert(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 4312)
    None_113968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4312, 34), 'None')
    defaults = [None_113968]
    # Create a new context for function 'insert'
    module_type_store = module_type_store.open_function_context('insert', 4312, 0, False)
    
    # Passed parameters checking function
    insert.stypy_localization = localization
    insert.stypy_type_of_self = None
    insert.stypy_type_store = module_type_store
    insert.stypy_function_name = 'insert'
    insert.stypy_param_names_list = ['arr', 'obj', 'values', 'axis']
    insert.stypy_varargs_param_name = None
    insert.stypy_kwargs_param_name = None
    insert.stypy_call_defaults = defaults
    insert.stypy_call_varargs = varargs
    insert.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'insert', ['arr', 'obj', 'values', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'insert', localization, ['arr', 'obj', 'values', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'insert(...)' code ##################

    str_113969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4399, (-1)), 'str', '\n    Insert values along the given axis before the given indices.\n\n    Parameters\n    ----------\n    arr : array_like\n        Input array.\n    obj : int, slice or sequence of ints\n        Object that defines the index or indices before which `values` is\n        inserted.\n\n        .. versionadded:: 1.8.0\n\n        Support for multiple insertions when `obj` is a single scalar or a\n        sequence with one element (similar to calling insert multiple\n        times).\n    values : array_like\n        Values to insert into `arr`. If the type of `values` is different\n        from that of `arr`, `values` is converted to the type of `arr`.\n        `values` should be shaped so that ``arr[...,obj,...] = values``\n        is legal.\n    axis : int, optional\n        Axis along which to insert `values`.  If `axis` is None then `arr`\n        is flattened first.\n\n    Returns\n    -------\n    out : ndarray\n        A copy of `arr` with `values` inserted.  Note that `insert`\n        does not occur in-place: a new array is returned. If\n        `axis` is None, `out` is a flattened array.\n\n    See Also\n    --------\n    append : Append elements at the end of an array.\n    concatenate : Join a sequence of arrays along an existing axis.\n    delete : Delete elements from an array.\n\n    Notes\n    -----\n    Note that for higher dimensional inserts `obj=0` behaves very different\n    from `obj=[0]` just like `arr[:,0,:] = values` is different from\n    `arr[:,[0],:] = values`.\n\n    Examples\n    --------\n    >>> a = np.array([[1, 1], [2, 2], [3, 3]])\n    >>> a\n    array([[1, 1],\n           [2, 2],\n           [3, 3]])\n    >>> np.insert(a, 1, 5)\n    array([1, 5, 1, 2, 2, 3, 3])\n    >>> np.insert(a, 1, 5, axis=1)\n    array([[1, 5, 1],\n           [2, 5, 2],\n           [3, 5, 3]])\n\n    Difference between sequence and scalars:\n\n    >>> np.insert(a, [1], [[1],[2],[3]], axis=1)\n    array([[1, 1, 1],\n           [2, 2, 2],\n           [3, 3, 3]])\n    >>> np.array_equal(np.insert(a, 1, [1, 2, 3], axis=1),\n    ...                np.insert(a, [1], [[1],[2],[3]], axis=1))\n    True\n\n    >>> b = a.flatten()\n    >>> b\n    array([1, 1, 2, 2, 3, 3])\n    >>> np.insert(b, [2, 2], [5, 6])\n    array([1, 1, 5, 6, 2, 2, 3, 3])\n\n    >>> np.insert(b, slice(2, 4), [5, 6])\n    array([1, 1, 5, 2, 6, 2, 3, 3])\n\n    >>> np.insert(b, [2, 2], [7.13, False]) # type casting\n    array([1, 1, 7, 0, 2, 2, 3, 3])\n\n    >>> x = np.arange(8).reshape(2, 4)\n    >>> idx = (1, 3)\n    >>> np.insert(x, idx, 999, axis=1)\n    array([[  0, 999,   1,   2, 999,   3],\n           [  4, 999,   5,   6, 999,   7]])\n\n    ')
    
    # Assigning a Name to a Name (line 4400):
    
    # Assigning a Name to a Name (line 4400):
    # Getting the type of 'None' (line 4400)
    None_113970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4400, 11), 'None')
    # Assigning a type to the variable 'wrap' (line 4400)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4400, 4), 'wrap', None_113970)
    
    
    
    # Call to type(...): (line 4401)
    # Processing the call arguments (line 4401)
    # Getting the type of 'arr' (line 4401)
    arr_113972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4401, 12), 'arr', False)
    # Processing the call keyword arguments (line 4401)
    kwargs_113973 = {}
    # Getting the type of 'type' (line 4401)
    type_113971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4401, 7), 'type', False)
    # Calling type(args, kwargs) (line 4401)
    type_call_result_113974 = invoke(stypy.reporting.localization.Localization(__file__, 4401, 7), type_113971, *[arr_113972], **kwargs_113973)
    
    # Getting the type of 'ndarray' (line 4401)
    ndarray_113975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4401, 24), 'ndarray')
    # Applying the binary operator 'isnot' (line 4401)
    result_is_not_113976 = python_operator(stypy.reporting.localization.Localization(__file__, 4401, 7), 'isnot', type_call_result_113974, ndarray_113975)
    
    # Testing the type of an if condition (line 4401)
    if_condition_113977 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4401, 4), result_is_not_113976)
    # Assigning a type to the variable 'if_condition_113977' (line 4401)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4401, 4), 'if_condition_113977', if_condition_113977)
    # SSA begins for if statement (line 4401)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # SSA begins for try-except statement (line 4402)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Attribute to a Name (line 4403):
    
    # Assigning a Attribute to a Name (line 4403):
    # Getting the type of 'arr' (line 4403)
    arr_113978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4403, 19), 'arr')
    # Obtaining the member '__array_wrap__' of a type (line 4403)
    array_wrap___113979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4403, 19), arr_113978, '__array_wrap__')
    # Assigning a type to the variable 'wrap' (line 4403)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4403, 12), 'wrap', array_wrap___113979)
    # SSA branch for the except part of a try statement (line 4402)
    # SSA branch for the except 'AttributeError' branch of a try statement (line 4402)
    module_type_store.open_ssa_branch('except')
    pass
    # SSA join for try-except statement (line 4402)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 4401)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 4407):
    
    # Assigning a Call to a Name (line 4407):
    
    # Call to asarray(...): (line 4407)
    # Processing the call arguments (line 4407)
    # Getting the type of 'arr' (line 4407)
    arr_113981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4407, 18), 'arr', False)
    # Processing the call keyword arguments (line 4407)
    kwargs_113982 = {}
    # Getting the type of 'asarray' (line 4407)
    asarray_113980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4407, 10), 'asarray', False)
    # Calling asarray(args, kwargs) (line 4407)
    asarray_call_result_113983 = invoke(stypy.reporting.localization.Localization(__file__, 4407, 10), asarray_113980, *[arr_113981], **kwargs_113982)
    
    # Assigning a type to the variable 'arr' (line 4407)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4407, 4), 'arr', asarray_call_result_113983)
    
    # Assigning a Attribute to a Name (line 4408):
    
    # Assigning a Attribute to a Name (line 4408):
    # Getting the type of 'arr' (line 4408)
    arr_113984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4408, 11), 'arr')
    # Obtaining the member 'ndim' of a type (line 4408)
    ndim_113985 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4408, 11), arr_113984, 'ndim')
    # Assigning a type to the variable 'ndim' (line 4408)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4408, 4), 'ndim', ndim_113985)
    
    # Assigning a IfExp to a Name (line 4409):
    
    # Assigning a IfExp to a Name (line 4409):
    
    # Getting the type of 'arr' (line 4409)
    arr_113986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4409, 22), 'arr')
    # Obtaining the member 'flags' of a type (line 4409)
    flags_113987 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4409, 22), arr_113986, 'flags')
    # Obtaining the member 'fnc' of a type (line 4409)
    fnc_113988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4409, 22), flags_113987, 'fnc')
    # Testing the type of an if expression (line 4409)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4409, 15), fnc_113988)
    # SSA begins for if expression (line 4409)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    str_113989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4409, 15), 'str', 'F')
    # SSA branch for the else part of an if expression (line 4409)
    module_type_store.open_ssa_branch('if expression else')
    str_113990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4409, 41), 'str', 'C')
    # SSA join for if expression (line 4409)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_113991 = union_type.UnionType.add(str_113989, str_113990)
    
    # Assigning a type to the variable 'arrorder' (line 4409)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4409, 4), 'arrorder', if_exp_113991)
    
    # Type idiom detected: calculating its left and rigth part (line 4410)
    # Getting the type of 'axis' (line 4410)
    axis_113992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4410, 7), 'axis')
    # Getting the type of 'None' (line 4410)
    None_113993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4410, 15), 'None')
    
    (may_be_113994, more_types_in_union_113995) = may_be_none(axis_113992, None_113993)

    if may_be_113994:

        if more_types_in_union_113995:
            # Runtime conditional SSA (line 4410)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        
        # Getting the type of 'ndim' (line 4411)
        ndim_113996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4411, 11), 'ndim')
        int_113997 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4411, 19), 'int')
        # Applying the binary operator '!=' (line 4411)
        result_ne_113998 = python_operator(stypy.reporting.localization.Localization(__file__, 4411, 11), '!=', ndim_113996, int_113997)
        
        # Testing the type of an if condition (line 4411)
        if_condition_113999 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4411, 8), result_ne_113998)
        # Assigning a type to the variable 'if_condition_113999' (line 4411)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4411, 8), 'if_condition_113999', if_condition_113999)
        # SSA begins for if statement (line 4411)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 4412):
        
        # Assigning a Call to a Name (line 4412):
        
        # Call to ravel(...): (line 4412)
        # Processing the call keyword arguments (line 4412)
        kwargs_114002 = {}
        # Getting the type of 'arr' (line 4412)
        arr_114000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4412, 18), 'arr', False)
        # Obtaining the member 'ravel' of a type (line 4412)
        ravel_114001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4412, 18), arr_114000, 'ravel')
        # Calling ravel(args, kwargs) (line 4412)
        ravel_call_result_114003 = invoke(stypy.reporting.localization.Localization(__file__, 4412, 18), ravel_114001, *[], **kwargs_114002)
        
        # Assigning a type to the variable 'arr' (line 4412)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4412, 12), 'arr', ravel_call_result_114003)
        # SSA join for if statement (line 4411)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 4413):
        
        # Assigning a Attribute to a Name (line 4413):
        # Getting the type of 'arr' (line 4413)
        arr_114004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4413, 15), 'arr')
        # Obtaining the member 'ndim' of a type (line 4413)
        ndim_114005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4413, 15), arr_114004, 'ndim')
        # Assigning a type to the variable 'ndim' (line 4413)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4413, 8), 'ndim', ndim_114005)
        
        # Assigning a BinOp to a Name (line 4414):
        
        # Assigning a BinOp to a Name (line 4414):
        # Getting the type of 'ndim' (line 4414)
        ndim_114006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4414, 15), 'ndim')
        int_114007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4414, 22), 'int')
        # Applying the binary operator '-' (line 4414)
        result_sub_114008 = python_operator(stypy.reporting.localization.Localization(__file__, 4414, 15), '-', ndim_114006, int_114007)
        
        # Assigning a type to the variable 'axis' (line 4414)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4414, 8), 'axis', result_sub_114008)

        if more_types_in_union_113995:
            # Runtime conditional SSA for else branch (line 4410)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_113994) or more_types_in_union_113995):
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'ndim' (line 4416)
        ndim_114009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4416, 11), 'ndim')
        int_114010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4416, 18), 'int')
        # Applying the binary operator '>' (line 4416)
        result_gt_114011 = python_operator(stypy.reporting.localization.Localization(__file__, 4416, 11), '>', ndim_114009, int_114010)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'axis' (line 4416)
        axis_114012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4416, 25), 'axis')
        
        # Getting the type of 'ndim' (line 4416)
        ndim_114013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4416, 33), 'ndim')
        # Applying the 'usub' unary operator (line 4416)
        result___neg___114014 = python_operator(stypy.reporting.localization.Localization(__file__, 4416, 32), 'usub', ndim_114013)
        
        # Applying the binary operator '<' (line 4416)
        result_lt_114015 = python_operator(stypy.reporting.localization.Localization(__file__, 4416, 25), '<', axis_114012, result___neg___114014)
        
        
        # Getting the type of 'axis' (line 4416)
        axis_114016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4416, 41), 'axis')
        # Getting the type of 'ndim' (line 4416)
        ndim_114017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4416, 49), 'ndim')
        # Applying the binary operator '>=' (line 4416)
        result_ge_114018 = python_operator(stypy.reporting.localization.Localization(__file__, 4416, 41), '>=', axis_114016, ndim_114017)
        
        # Applying the binary operator 'or' (line 4416)
        result_or_keyword_114019 = python_operator(stypy.reporting.localization.Localization(__file__, 4416, 25), 'or', result_lt_114015, result_ge_114018)
        
        # Applying the binary operator 'and' (line 4416)
        result_and_keyword_114020 = python_operator(stypy.reporting.localization.Localization(__file__, 4416, 11), 'and', result_gt_114011, result_or_keyword_114019)
        
        # Testing the type of an if condition (line 4416)
        if_condition_114021 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4416, 8), result_and_keyword_114020)
        # Assigning a type to the variable 'if_condition_114021' (line 4416)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4416, 8), 'if_condition_114021', if_condition_114021)
        # SSA begins for if statement (line 4416)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to IndexError(...): (line 4417)
        # Processing the call arguments (line 4417)
        str_114023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4418, 16), 'str', 'axis %i is out of bounds for an array of dimension %i')
        
        # Obtaining an instance of the builtin type 'tuple' (line 4419)
        tuple_114024 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4419, 34), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 4419)
        # Adding element type (line 4419)
        # Getting the type of 'axis' (line 4419)
        axis_114025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4419, 34), 'axis', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4419, 34), tuple_114024, axis_114025)
        # Adding element type (line 4419)
        # Getting the type of 'ndim' (line 4419)
        ndim_114026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4419, 40), 'ndim', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4419, 34), tuple_114024, ndim_114026)
        
        # Applying the binary operator '%' (line 4418)
        result_mod_114027 = python_operator(stypy.reporting.localization.Localization(__file__, 4418, 16), '%', str_114023, tuple_114024)
        
        # Processing the call keyword arguments (line 4417)
        kwargs_114028 = {}
        # Getting the type of 'IndexError' (line 4417)
        IndexError_114022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4417, 18), 'IndexError', False)
        # Calling IndexError(args, kwargs) (line 4417)
        IndexError_call_result_114029 = invoke(stypy.reporting.localization.Localization(__file__, 4417, 18), IndexError_114022, *[result_mod_114027], **kwargs_114028)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 4417, 12), IndexError_call_result_114029, 'raise parameter', BaseException)
        # SSA join for if statement (line 4416)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'axis' (line 4420)
        axis_114030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4420, 12), 'axis')
        int_114031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4420, 19), 'int')
        # Applying the binary operator '<' (line 4420)
        result_lt_114032 = python_operator(stypy.reporting.localization.Localization(__file__, 4420, 12), '<', axis_114030, int_114031)
        
        # Testing the type of an if condition (line 4420)
        if_condition_114033 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4420, 8), result_lt_114032)
        # Assigning a type to the variable 'if_condition_114033' (line 4420)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4420, 8), 'if_condition_114033', if_condition_114033)
        # SSA begins for if statement (line 4420)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'axis' (line 4421)
        axis_114034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4421, 12), 'axis')
        # Getting the type of 'ndim' (line 4421)
        ndim_114035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4421, 20), 'ndim')
        # Applying the binary operator '+=' (line 4421)
        result_iadd_114036 = python_operator(stypy.reporting.localization.Localization(__file__, 4421, 12), '+=', axis_114034, ndim_114035)
        # Assigning a type to the variable 'axis' (line 4421)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4421, 12), 'axis', result_iadd_114036)
        
        # SSA join for if statement (line 4420)
        module_type_store = module_type_store.join_ssa_context()
        

        if (may_be_113994 and more_types_in_union_113995):
            # SSA join for if statement (line 4410)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Getting the type of 'ndim' (line 4422)
    ndim_114037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4422, 8), 'ndim')
    int_114038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4422, 16), 'int')
    # Applying the binary operator '==' (line 4422)
    result_eq_114039 = python_operator(stypy.reporting.localization.Localization(__file__, 4422, 8), '==', ndim_114037, int_114038)
    
    # Testing the type of an if condition (line 4422)
    if_condition_114040 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4422, 4), result_eq_114039)
    # Assigning a type to the variable 'if_condition_114040' (line 4422)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4422, 4), 'if_condition_114040', if_condition_114040)
    # SSA begins for if statement (line 4422)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 4424)
    # Processing the call arguments (line 4424)
    str_114043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4425, 12), 'str', 'in the future the special handling of scalars will be removed from insert and raise an error')
    # Getting the type of 'DeprecationWarning' (line 4426)
    DeprecationWarning_114044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4426, 46), 'DeprecationWarning', False)
    # Processing the call keyword arguments (line 4424)
    kwargs_114045 = {}
    # Getting the type of 'warnings' (line 4424)
    warnings_114041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4424, 8), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 4424)
    warn_114042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4424, 8), warnings_114041, 'warn')
    # Calling warn(args, kwargs) (line 4424)
    warn_call_result_114046 = invoke(stypy.reporting.localization.Localization(__file__, 4424, 8), warn_114042, *[str_114043, DeprecationWarning_114044], **kwargs_114045)
    
    
    # Assigning a Call to a Name (line 4427):
    
    # Assigning a Call to a Name (line 4427):
    
    # Call to copy(...): (line 4427)
    # Processing the call keyword arguments (line 4427)
    kwargs_114049 = {}
    # Getting the type of 'arr' (line 4427)
    arr_114047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4427, 14), 'arr', False)
    # Obtaining the member 'copy' of a type (line 4427)
    copy_114048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4427, 14), arr_114047, 'copy')
    # Calling copy(args, kwargs) (line 4427)
    copy_call_result_114050 = invoke(stypy.reporting.localization.Localization(__file__, 4427, 14), copy_114048, *[], **kwargs_114049)
    
    # Assigning a type to the variable 'arr' (line 4427)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4427, 8), 'arr', copy_call_result_114050)
    
    # Assigning a Name to a Subscript (line 4428):
    
    # Assigning a Name to a Subscript (line 4428):
    # Getting the type of 'values' (line 4428)
    values_114051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4428, 19), 'values')
    # Getting the type of 'arr' (line 4428)
    arr_114052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4428, 8), 'arr')
    Ellipsis_114053 = Ellipsis
    # Storing an element on a container (line 4428)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4428, 8), arr_114052, (Ellipsis_114053, values_114051))
    
    # Getting the type of 'wrap' (line 4429)
    wrap_114054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4429, 11), 'wrap')
    # Testing the type of an if condition (line 4429)
    if_condition_114055 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4429, 8), wrap_114054)
    # Assigning a type to the variable 'if_condition_114055' (line 4429)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4429, 8), 'if_condition_114055', if_condition_114055)
    # SSA begins for if statement (line 4429)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to wrap(...): (line 4430)
    # Processing the call arguments (line 4430)
    # Getting the type of 'arr' (line 4430)
    arr_114057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4430, 24), 'arr', False)
    # Processing the call keyword arguments (line 4430)
    kwargs_114058 = {}
    # Getting the type of 'wrap' (line 4430)
    wrap_114056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4430, 19), 'wrap', False)
    # Calling wrap(args, kwargs) (line 4430)
    wrap_call_result_114059 = invoke(stypy.reporting.localization.Localization(__file__, 4430, 19), wrap_114056, *[arr_114057], **kwargs_114058)
    
    # Assigning a type to the variable 'stypy_return_type' (line 4430)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4430, 12), 'stypy_return_type', wrap_call_result_114059)
    # SSA branch for the else part of an if statement (line 4429)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'arr' (line 4432)
    arr_114060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4432, 19), 'arr')
    # Assigning a type to the variable 'stypy_return_type' (line 4432)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4432, 12), 'stypy_return_type', arr_114060)
    # SSA join for if statement (line 4429)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 4422)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 4433):
    
    # Assigning a BinOp to a Name (line 4433):
    
    # Obtaining an instance of the builtin type 'list' (line 4433)
    list_114061 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4433, 12), 'list')
    # Adding type elements to the builtin type 'list' instance (line 4433)
    # Adding element type (line 4433)
    
    # Call to slice(...): (line 4433)
    # Processing the call arguments (line 4433)
    # Getting the type of 'None' (line 4433)
    None_114063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4433, 19), 'None', False)
    # Processing the call keyword arguments (line 4433)
    kwargs_114064 = {}
    # Getting the type of 'slice' (line 4433)
    slice_114062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4433, 13), 'slice', False)
    # Calling slice(args, kwargs) (line 4433)
    slice_call_result_114065 = invoke(stypy.reporting.localization.Localization(__file__, 4433, 13), slice_114062, *[None_114063], **kwargs_114064)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4433, 12), list_114061, slice_call_result_114065)
    
    # Getting the type of 'ndim' (line 4433)
    ndim_114066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4433, 26), 'ndim')
    # Applying the binary operator '*' (line 4433)
    result_mul_114067 = python_operator(stypy.reporting.localization.Localization(__file__, 4433, 12), '*', list_114061, ndim_114066)
    
    # Assigning a type to the variable 'slobj' (line 4433)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4433, 4), 'slobj', result_mul_114067)
    
    # Assigning a Subscript to a Name (line 4434):
    
    # Assigning a Subscript to a Name (line 4434):
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 4434)
    axis_114068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4434, 18), 'axis')
    # Getting the type of 'arr' (line 4434)
    arr_114069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4434, 8), 'arr')
    # Obtaining the member 'shape' of a type (line 4434)
    shape_114070 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4434, 8), arr_114069, 'shape')
    # Obtaining the member '__getitem__' of a type (line 4434)
    getitem___114071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4434, 8), shape_114070, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4434)
    subscript_call_result_114072 = invoke(stypy.reporting.localization.Localization(__file__, 4434, 8), getitem___114071, axis_114068)
    
    # Assigning a type to the variable 'N' (line 4434)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4434, 4), 'N', subscript_call_result_114072)
    
    # Assigning a Call to a Name (line 4435):
    
    # Assigning a Call to a Name (line 4435):
    
    # Call to list(...): (line 4435)
    # Processing the call arguments (line 4435)
    # Getting the type of 'arr' (line 4435)
    arr_114074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4435, 20), 'arr', False)
    # Obtaining the member 'shape' of a type (line 4435)
    shape_114075 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4435, 20), arr_114074, 'shape')
    # Processing the call keyword arguments (line 4435)
    kwargs_114076 = {}
    # Getting the type of 'list' (line 4435)
    list_114073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4435, 15), 'list', False)
    # Calling list(args, kwargs) (line 4435)
    list_call_result_114077 = invoke(stypy.reporting.localization.Localization(__file__, 4435, 15), list_114073, *[shape_114075], **kwargs_114076)
    
    # Assigning a type to the variable 'newshape' (line 4435)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4435, 4), 'newshape', list_call_result_114077)
    
    # Type idiom detected: calculating its left and rigth part (line 4437)
    # Getting the type of 'slice' (line 4437)
    slice_114078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4437, 23), 'slice')
    # Getting the type of 'obj' (line 4437)
    obj_114079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4437, 18), 'obj')
    
    (may_be_114080, more_types_in_union_114081) = may_be_subtype(slice_114078, obj_114079)

    if may_be_114080:

        if more_types_in_union_114081:
            # Runtime conditional SSA (line 4437)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'obj' (line 4437)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4437, 4), 'obj', remove_not_subtype_from_union(obj_114079, slice))
        
        # Assigning a Call to a Name (line 4439):
        
        # Assigning a Call to a Name (line 4439):
        
        # Call to arange(...): (line 4439)
        
        # Call to indices(...): (line 4439)
        # Processing the call arguments (line 4439)
        # Getting the type of 'N' (line 4439)
        N_114085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4439, 38), 'N', False)
        # Processing the call keyword arguments (line 4439)
        kwargs_114086 = {}
        # Getting the type of 'obj' (line 4439)
        obj_114083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4439, 26), 'obj', False)
        # Obtaining the member 'indices' of a type (line 4439)
        indices_114084 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4439, 26), obj_114083, 'indices')
        # Calling indices(args, kwargs) (line 4439)
        indices_call_result_114087 = invoke(stypy.reporting.localization.Localization(__file__, 4439, 26), indices_114084, *[N_114085], **kwargs_114086)
        
        # Processing the call keyword arguments (line 4439)
        
        # Obtaining an instance of the builtin type 'dict' (line 4439)
        dict_114088 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4439, 44), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 4439)
        # Adding element type (key, value) (line 4439)
        str_114089 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4439, 45), 'str', 'dtype')
        # Getting the type of 'intp' (line 4439)
        intp_114090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4439, 54), 'intp', False)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4439, 44), dict_114088, (str_114089, intp_114090))
        
        kwargs_114091 = {'dict_114088': dict_114088}
        # Getting the type of 'arange' (line 4439)
        arange_114082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4439, 18), 'arange', False)
        # Calling arange(args, kwargs) (line 4439)
        arange_call_result_114092 = invoke(stypy.reporting.localization.Localization(__file__, 4439, 18), arange_114082, *[indices_call_result_114087], **kwargs_114091)
        
        # Assigning a type to the variable 'indices' (line 4439)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4439, 8), 'indices', arange_call_result_114092)

        if more_types_in_union_114081:
            # Runtime conditional SSA for else branch (line 4437)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_114080) or more_types_in_union_114081):
        # Assigning a type to the variable 'obj' (line 4437)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4437, 4), 'obj', remove_subtype_from_union(obj_114079, slice))
        
        # Assigning a Call to a Name (line 4442):
        
        # Assigning a Call to a Name (line 4442):
        
        # Call to array(...): (line 4442)
        # Processing the call arguments (line 4442)
        # Getting the type of 'obj' (line 4442)
        obj_114095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4442, 27), 'obj', False)
        # Processing the call keyword arguments (line 4442)
        kwargs_114096 = {}
        # Getting the type of 'np' (line 4442)
        np_114093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4442, 18), 'np', False)
        # Obtaining the member 'array' of a type (line 4442)
        array_114094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4442, 18), np_114093, 'array')
        # Calling array(args, kwargs) (line 4442)
        array_call_result_114097 = invoke(stypy.reporting.localization.Localization(__file__, 4442, 18), array_114094, *[obj_114095], **kwargs_114096)
        
        # Assigning a type to the variable 'indices' (line 4442)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4442, 8), 'indices', array_call_result_114097)
        
        
        # Getting the type of 'indices' (line 4443)
        indices_114098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4443, 11), 'indices')
        # Obtaining the member 'dtype' of a type (line 4443)
        dtype_114099 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4443, 11), indices_114098, 'dtype')
        # Getting the type of 'bool' (line 4443)
        bool_114100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4443, 28), 'bool')
        # Applying the binary operator '==' (line 4443)
        result_eq_114101 = python_operator(stypy.reporting.localization.Localization(__file__, 4443, 11), '==', dtype_114099, bool_114100)
        
        # Testing the type of an if condition (line 4443)
        if_condition_114102 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4443, 8), result_eq_114101)
        # Assigning a type to the variable 'if_condition_114102' (line 4443)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4443, 8), 'if_condition_114102', if_condition_114102)
        # SSA begins for if statement (line 4443)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 4445)
        # Processing the call arguments (line 4445)
        str_114105 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4446, 16), 'str', 'in the future insert will treat boolean arrays and array-likes as a boolean index instead of casting it to integer')
        # Getting the type of 'FutureWarning' (line 4448)
        FutureWarning_114106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4448, 27), 'FutureWarning', False)
        # Processing the call keyword arguments (line 4445)
        kwargs_114107 = {}
        # Getting the type of 'warnings' (line 4445)
        warnings_114103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4445, 12), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 4445)
        warn_114104 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4445, 12), warnings_114103, 'warn')
        # Calling warn(args, kwargs) (line 4445)
        warn_call_result_114108 = invoke(stypy.reporting.localization.Localization(__file__, 4445, 12), warn_114104, *[str_114105, FutureWarning_114106], **kwargs_114107)
        
        
        # Assigning a Call to a Name (line 4449):
        
        # Assigning a Call to a Name (line 4449):
        
        # Call to astype(...): (line 4449)
        # Processing the call arguments (line 4449)
        # Getting the type of 'intp' (line 4449)
        intp_114111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4449, 37), 'intp', False)
        # Processing the call keyword arguments (line 4449)
        kwargs_114112 = {}
        # Getting the type of 'indices' (line 4449)
        indices_114109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4449, 22), 'indices', False)
        # Obtaining the member 'astype' of a type (line 4449)
        astype_114110 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4449, 22), indices_114109, 'astype')
        # Calling astype(args, kwargs) (line 4449)
        astype_call_result_114113 = invoke(stypy.reporting.localization.Localization(__file__, 4449, 22), astype_114110, *[intp_114111], **kwargs_114112)
        
        # Assigning a type to the variable 'indices' (line 4449)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4449, 12), 'indices', astype_call_result_114113)
        # SSA branch for the else part of an if statement (line 4443)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'indices' (line 4455)
        indices_114114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4455, 13), 'indices')
        # Obtaining the member 'ndim' of a type (line 4455)
        ndim_114115 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4455, 13), indices_114114, 'ndim')
        int_114116 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4455, 28), 'int')
        # Applying the binary operator '>' (line 4455)
        result_gt_114117 = python_operator(stypy.reporting.localization.Localization(__file__, 4455, 13), '>', ndim_114115, int_114116)
        
        # Testing the type of an if condition (line 4455)
        if_condition_114118 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4455, 13), result_gt_114117)
        # Assigning a type to the variable 'if_condition_114118' (line 4455)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4455, 13), 'if_condition_114118', if_condition_114118)
        # SSA begins for if statement (line 4455)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 4456)
        # Processing the call arguments (line 4456)
        str_114120 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4457, 16), 'str', 'index array argument obj to insert must be one dimensional or scalar')
        # Processing the call keyword arguments (line 4456)
        kwargs_114121 = {}
        # Getting the type of 'ValueError' (line 4456)
        ValueError_114119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4456, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 4456)
        ValueError_call_result_114122 = invoke(stypy.reporting.localization.Localization(__file__, 4456, 18), ValueError_114119, *[str_114120], **kwargs_114121)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 4456, 12), ValueError_call_result_114122, 'raise parameter', BaseException)
        # SSA join for if statement (line 4455)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 4443)
        module_type_store = module_type_store.join_ssa_context()
        

        if (may_be_114080 and more_types_in_union_114081):
            # SSA join for if statement (line 4437)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Getting the type of 'indices' (line 4459)
    indices_114123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4459, 7), 'indices')
    # Obtaining the member 'size' of a type (line 4459)
    size_114124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4459, 7), indices_114123, 'size')
    int_114125 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4459, 23), 'int')
    # Applying the binary operator '==' (line 4459)
    result_eq_114126 = python_operator(stypy.reporting.localization.Localization(__file__, 4459, 7), '==', size_114124, int_114125)
    
    # Testing the type of an if condition (line 4459)
    if_condition_114127 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4459, 4), result_eq_114126)
    # Assigning a type to the variable 'if_condition_114127' (line 4459)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4459, 4), 'if_condition_114127', if_condition_114127)
    # SSA begins for if statement (line 4459)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 4460):
    
    # Assigning a Call to a Name (line 4460):
    
    # Call to item(...): (line 4460)
    # Processing the call keyword arguments (line 4460)
    kwargs_114130 = {}
    # Getting the type of 'indices' (line 4460)
    indices_114128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4460, 16), 'indices', False)
    # Obtaining the member 'item' of a type (line 4460)
    item_114129 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4460, 16), indices_114128, 'item')
    # Calling item(args, kwargs) (line 4460)
    item_call_result_114131 = invoke(stypy.reporting.localization.Localization(__file__, 4460, 16), item_114129, *[], **kwargs_114130)
    
    # Assigning a type to the variable 'index' (line 4460)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4460, 8), 'index', item_call_result_114131)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'index' (line 4461)
    index_114132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4461, 11), 'index')
    
    # Getting the type of 'N' (line 4461)
    N_114133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4461, 20), 'N')
    # Applying the 'usub' unary operator (line 4461)
    result___neg___114134 = python_operator(stypy.reporting.localization.Localization(__file__, 4461, 19), 'usub', N_114133)
    
    # Applying the binary operator '<' (line 4461)
    result_lt_114135 = python_operator(stypy.reporting.localization.Localization(__file__, 4461, 11), '<', index_114132, result___neg___114134)
    
    
    # Getting the type of 'index' (line 4461)
    index_114136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4461, 25), 'index')
    # Getting the type of 'N' (line 4461)
    N_114137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4461, 33), 'N')
    # Applying the binary operator '>' (line 4461)
    result_gt_114138 = python_operator(stypy.reporting.localization.Localization(__file__, 4461, 25), '>', index_114136, N_114137)
    
    # Applying the binary operator 'or' (line 4461)
    result_or_keyword_114139 = python_operator(stypy.reporting.localization.Localization(__file__, 4461, 11), 'or', result_lt_114135, result_gt_114138)
    
    # Testing the type of an if condition (line 4461)
    if_condition_114140 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4461, 8), result_or_keyword_114139)
    # Assigning a type to the variable 'if_condition_114140' (line 4461)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4461, 8), 'if_condition_114140', if_condition_114140)
    # SSA begins for if statement (line 4461)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to IndexError(...): (line 4462)
    # Processing the call arguments (line 4462)
    str_114142 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4463, 16), 'str', 'index %i is out of bounds for axis %i with size %i')
    
    # Obtaining an instance of the builtin type 'tuple' (line 4464)
    tuple_114143 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4464, 29), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 4464)
    # Adding element type (line 4464)
    # Getting the type of 'obj' (line 4464)
    obj_114144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4464, 29), 'obj', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4464, 29), tuple_114143, obj_114144)
    # Adding element type (line 4464)
    # Getting the type of 'axis' (line 4464)
    axis_114145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4464, 34), 'axis', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4464, 29), tuple_114143, axis_114145)
    # Adding element type (line 4464)
    # Getting the type of 'N' (line 4464)
    N_114146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4464, 40), 'N', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4464, 29), tuple_114143, N_114146)
    
    # Applying the binary operator '%' (line 4463)
    result_mod_114147 = python_operator(stypy.reporting.localization.Localization(__file__, 4463, 16), '%', str_114142, tuple_114143)
    
    # Processing the call keyword arguments (line 4462)
    kwargs_114148 = {}
    # Getting the type of 'IndexError' (line 4462)
    IndexError_114141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4462, 18), 'IndexError', False)
    # Calling IndexError(args, kwargs) (line 4462)
    IndexError_call_result_114149 = invoke(stypy.reporting.localization.Localization(__file__, 4462, 18), IndexError_114141, *[result_mod_114147], **kwargs_114148)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 4462, 12), IndexError_call_result_114149, 'raise parameter', BaseException)
    # SSA join for if statement (line 4461)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'index' (line 4465)
    index_114150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4465, 12), 'index')
    int_114151 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4465, 20), 'int')
    # Applying the binary operator '<' (line 4465)
    result_lt_114152 = python_operator(stypy.reporting.localization.Localization(__file__, 4465, 12), '<', index_114150, int_114151)
    
    # Testing the type of an if condition (line 4465)
    if_condition_114153 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4465, 8), result_lt_114152)
    # Assigning a type to the variable 'if_condition_114153' (line 4465)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4465, 8), 'if_condition_114153', if_condition_114153)
    # SSA begins for if statement (line 4465)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'index' (line 4466)
    index_114154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4466, 12), 'index')
    # Getting the type of 'N' (line 4466)
    N_114155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4466, 21), 'N')
    # Applying the binary operator '+=' (line 4466)
    result_iadd_114156 = python_operator(stypy.reporting.localization.Localization(__file__, 4466, 12), '+=', index_114154, N_114155)
    # Assigning a type to the variable 'index' (line 4466)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4466, 12), 'index', result_iadd_114156)
    
    # SSA join for if statement (line 4465)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 4470):
    
    # Assigning a Call to a Name (line 4470):
    
    # Call to array(...): (line 4470)
    # Processing the call arguments (line 4470)
    # Getting the type of 'values' (line 4470)
    values_114158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4470, 23), 'values', False)
    # Processing the call keyword arguments (line 4470)
    # Getting the type of 'False' (line 4470)
    False_114159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4470, 36), 'False', False)
    keyword_114160 = False_114159
    # Getting the type of 'arr' (line 4470)
    arr_114161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4470, 49), 'arr', False)
    # Obtaining the member 'ndim' of a type (line 4470)
    ndim_114162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4470, 49), arr_114161, 'ndim')
    keyword_114163 = ndim_114162
    # Getting the type of 'arr' (line 4470)
    arr_114164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4470, 65), 'arr', False)
    # Obtaining the member 'dtype' of a type (line 4470)
    dtype_114165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4470, 65), arr_114164, 'dtype')
    keyword_114166 = dtype_114165
    kwargs_114167 = {'dtype': keyword_114166, 'copy': keyword_114160, 'ndmin': keyword_114163}
    # Getting the type of 'array' (line 4470)
    array_114157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4470, 17), 'array', False)
    # Calling array(args, kwargs) (line 4470)
    array_call_result_114168 = invoke(stypy.reporting.localization.Localization(__file__, 4470, 17), array_114157, *[values_114158], **kwargs_114167)
    
    # Assigning a type to the variable 'values' (line 4470)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4470, 8), 'values', array_call_result_114168)
    
    
    # Getting the type of 'indices' (line 4471)
    indices_114169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4471, 11), 'indices')
    # Obtaining the member 'ndim' of a type (line 4471)
    ndim_114170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4471, 11), indices_114169, 'ndim')
    int_114171 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4471, 27), 'int')
    # Applying the binary operator '==' (line 4471)
    result_eq_114172 = python_operator(stypy.reporting.localization.Localization(__file__, 4471, 11), '==', ndim_114170, int_114171)
    
    # Testing the type of an if condition (line 4471)
    if_condition_114173 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4471, 8), result_eq_114172)
    # Assigning a type to the variable 'if_condition_114173' (line 4471)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4471, 8), 'if_condition_114173', if_condition_114173)
    # SSA begins for if statement (line 4471)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 4475):
    
    # Assigning a Call to a Name (line 4475):
    
    # Call to rollaxis(...): (line 4475)
    # Processing the call arguments (line 4475)
    # Getting the type of 'values' (line 4475)
    values_114176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4475, 33), 'values', False)
    int_114177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4475, 41), 'int')
    # Getting the type of 'axis' (line 4475)
    axis_114178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4475, 45), 'axis', False)
    # Getting the type of 'values' (line 4475)
    values_114179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4475, 52), 'values', False)
    # Obtaining the member 'ndim' of a type (line 4475)
    ndim_114180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4475, 52), values_114179, 'ndim')
    # Applying the binary operator '%' (line 4475)
    result_mod_114181 = python_operator(stypy.reporting.localization.Localization(__file__, 4475, 45), '%', axis_114178, ndim_114180)
    
    int_114182 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4475, 67), 'int')
    # Applying the binary operator '+' (line 4475)
    result_add_114183 = python_operator(stypy.reporting.localization.Localization(__file__, 4475, 44), '+', result_mod_114181, int_114182)
    
    # Processing the call keyword arguments (line 4475)
    kwargs_114184 = {}
    # Getting the type of 'np' (line 4475)
    np_114174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4475, 21), 'np', False)
    # Obtaining the member 'rollaxis' of a type (line 4475)
    rollaxis_114175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4475, 21), np_114174, 'rollaxis')
    # Calling rollaxis(args, kwargs) (line 4475)
    rollaxis_call_result_114185 = invoke(stypy.reporting.localization.Localization(__file__, 4475, 21), rollaxis_114175, *[values_114176, int_114177, result_add_114183], **kwargs_114184)
    
    # Assigning a type to the variable 'values' (line 4475)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4475, 12), 'values', rollaxis_call_result_114185)
    # SSA join for if statement (line 4471)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 4476):
    
    # Assigning a Subscript to a Name (line 4476):
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 4476)
    axis_114186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4476, 30), 'axis')
    # Getting the type of 'values' (line 4476)
    values_114187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4476, 17), 'values')
    # Obtaining the member 'shape' of a type (line 4476)
    shape_114188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4476, 17), values_114187, 'shape')
    # Obtaining the member '__getitem__' of a type (line 4476)
    getitem___114189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4476, 17), shape_114188, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4476)
    subscript_call_result_114190 = invoke(stypy.reporting.localization.Localization(__file__, 4476, 17), getitem___114189, axis_114186)
    
    # Assigning a type to the variable 'numnew' (line 4476)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4476, 8), 'numnew', subscript_call_result_114190)
    
    # Getting the type of 'newshape' (line 4477)
    newshape_114191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4477, 8), 'newshape')
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 4477)
    axis_114192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4477, 17), 'axis')
    # Getting the type of 'newshape' (line 4477)
    newshape_114193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4477, 8), 'newshape')
    # Obtaining the member '__getitem__' of a type (line 4477)
    getitem___114194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4477, 8), newshape_114193, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4477)
    subscript_call_result_114195 = invoke(stypy.reporting.localization.Localization(__file__, 4477, 8), getitem___114194, axis_114192)
    
    # Getting the type of 'numnew' (line 4477)
    numnew_114196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4477, 26), 'numnew')
    # Applying the binary operator '+=' (line 4477)
    result_iadd_114197 = python_operator(stypy.reporting.localization.Localization(__file__, 4477, 8), '+=', subscript_call_result_114195, numnew_114196)
    # Getting the type of 'newshape' (line 4477)
    newshape_114198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4477, 8), 'newshape')
    # Getting the type of 'axis' (line 4477)
    axis_114199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4477, 17), 'axis')
    # Storing an element on a container (line 4477)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4477, 8), newshape_114198, (axis_114199, result_iadd_114197))
    
    
    # Assigning a Call to a Name (line 4478):
    
    # Assigning a Call to a Name (line 4478):
    
    # Call to empty(...): (line 4478)
    # Processing the call arguments (line 4478)
    # Getting the type of 'newshape' (line 4478)
    newshape_114201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4478, 20), 'newshape', False)
    # Getting the type of 'arr' (line 4478)
    arr_114202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4478, 30), 'arr', False)
    # Obtaining the member 'dtype' of a type (line 4478)
    dtype_114203 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4478, 30), arr_114202, 'dtype')
    # Getting the type of 'arrorder' (line 4478)
    arrorder_114204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4478, 41), 'arrorder', False)
    # Processing the call keyword arguments (line 4478)
    kwargs_114205 = {}
    # Getting the type of 'empty' (line 4478)
    empty_114200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4478, 14), 'empty', False)
    # Calling empty(args, kwargs) (line 4478)
    empty_call_result_114206 = invoke(stypy.reporting.localization.Localization(__file__, 4478, 14), empty_114200, *[newshape_114201, dtype_114203, arrorder_114204], **kwargs_114205)
    
    # Assigning a type to the variable 'new' (line 4478)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4478, 8), 'new', empty_call_result_114206)
    
    # Assigning a Call to a Subscript (line 4479):
    
    # Assigning a Call to a Subscript (line 4479):
    
    # Call to slice(...): (line 4479)
    # Processing the call arguments (line 4479)
    # Getting the type of 'None' (line 4479)
    None_114208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4479, 28), 'None', False)
    # Getting the type of 'index' (line 4479)
    index_114209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4479, 34), 'index', False)
    # Processing the call keyword arguments (line 4479)
    kwargs_114210 = {}
    # Getting the type of 'slice' (line 4479)
    slice_114207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4479, 22), 'slice', False)
    # Calling slice(args, kwargs) (line 4479)
    slice_call_result_114211 = invoke(stypy.reporting.localization.Localization(__file__, 4479, 22), slice_114207, *[None_114208, index_114209], **kwargs_114210)
    
    # Getting the type of 'slobj' (line 4479)
    slobj_114212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4479, 8), 'slobj')
    # Getting the type of 'axis' (line 4479)
    axis_114213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4479, 14), 'axis')
    # Storing an element on a container (line 4479)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4479, 8), slobj_114212, (axis_114213, slice_call_result_114211))
    
    # Assigning a Subscript to a Subscript (line 4480):
    
    # Assigning a Subscript to a Subscript (line 4480):
    
    # Obtaining the type of the subscript
    # Getting the type of 'slobj' (line 4480)
    slobj_114214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4480, 25), 'slobj')
    # Getting the type of 'arr' (line 4480)
    arr_114215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4480, 21), 'arr')
    # Obtaining the member '__getitem__' of a type (line 4480)
    getitem___114216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4480, 21), arr_114215, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4480)
    subscript_call_result_114217 = invoke(stypy.reporting.localization.Localization(__file__, 4480, 21), getitem___114216, slobj_114214)
    
    # Getting the type of 'new' (line 4480)
    new_114218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4480, 8), 'new')
    # Getting the type of 'slobj' (line 4480)
    slobj_114219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4480, 12), 'slobj')
    # Storing an element on a container (line 4480)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4480, 8), new_114218, (slobj_114219, subscript_call_result_114217))
    
    # Assigning a Call to a Subscript (line 4481):
    
    # Assigning a Call to a Subscript (line 4481):
    
    # Call to slice(...): (line 4481)
    # Processing the call arguments (line 4481)
    # Getting the type of 'index' (line 4481)
    index_114221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4481, 28), 'index', False)
    # Getting the type of 'index' (line 4481)
    index_114222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4481, 35), 'index', False)
    # Getting the type of 'numnew' (line 4481)
    numnew_114223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4481, 41), 'numnew', False)
    # Applying the binary operator '+' (line 4481)
    result_add_114224 = python_operator(stypy.reporting.localization.Localization(__file__, 4481, 35), '+', index_114222, numnew_114223)
    
    # Processing the call keyword arguments (line 4481)
    kwargs_114225 = {}
    # Getting the type of 'slice' (line 4481)
    slice_114220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4481, 22), 'slice', False)
    # Calling slice(args, kwargs) (line 4481)
    slice_call_result_114226 = invoke(stypy.reporting.localization.Localization(__file__, 4481, 22), slice_114220, *[index_114221, result_add_114224], **kwargs_114225)
    
    # Getting the type of 'slobj' (line 4481)
    slobj_114227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4481, 8), 'slobj')
    # Getting the type of 'axis' (line 4481)
    axis_114228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4481, 14), 'axis')
    # Storing an element on a container (line 4481)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4481, 8), slobj_114227, (axis_114228, slice_call_result_114226))
    
    # Assigning a Name to a Subscript (line 4482):
    
    # Assigning a Name to a Subscript (line 4482):
    # Getting the type of 'values' (line 4482)
    values_114229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4482, 21), 'values')
    # Getting the type of 'new' (line 4482)
    new_114230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4482, 8), 'new')
    # Getting the type of 'slobj' (line 4482)
    slobj_114231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4482, 12), 'slobj')
    # Storing an element on a container (line 4482)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4482, 8), new_114230, (slobj_114231, values_114229))
    
    # Assigning a Call to a Subscript (line 4483):
    
    # Assigning a Call to a Subscript (line 4483):
    
    # Call to slice(...): (line 4483)
    # Processing the call arguments (line 4483)
    # Getting the type of 'index' (line 4483)
    index_114233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4483, 28), 'index', False)
    # Getting the type of 'numnew' (line 4483)
    numnew_114234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4483, 34), 'numnew', False)
    # Applying the binary operator '+' (line 4483)
    result_add_114235 = python_operator(stypy.reporting.localization.Localization(__file__, 4483, 28), '+', index_114233, numnew_114234)
    
    # Getting the type of 'None' (line 4483)
    None_114236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4483, 42), 'None', False)
    # Processing the call keyword arguments (line 4483)
    kwargs_114237 = {}
    # Getting the type of 'slice' (line 4483)
    slice_114232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4483, 22), 'slice', False)
    # Calling slice(args, kwargs) (line 4483)
    slice_call_result_114238 = invoke(stypy.reporting.localization.Localization(__file__, 4483, 22), slice_114232, *[result_add_114235, None_114236], **kwargs_114237)
    
    # Getting the type of 'slobj' (line 4483)
    slobj_114239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4483, 8), 'slobj')
    # Getting the type of 'axis' (line 4483)
    axis_114240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4483, 14), 'axis')
    # Storing an element on a container (line 4483)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4483, 8), slobj_114239, (axis_114240, slice_call_result_114238))
    
    # Assigning a BinOp to a Name (line 4484):
    
    # Assigning a BinOp to a Name (line 4484):
    
    # Obtaining an instance of the builtin type 'list' (line 4484)
    list_114241 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4484, 17), 'list')
    # Adding type elements to the builtin type 'list' instance (line 4484)
    # Adding element type (line 4484)
    
    # Call to slice(...): (line 4484)
    # Processing the call arguments (line 4484)
    # Getting the type of 'None' (line 4484)
    None_114243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4484, 24), 'None', False)
    # Processing the call keyword arguments (line 4484)
    kwargs_114244 = {}
    # Getting the type of 'slice' (line 4484)
    slice_114242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4484, 18), 'slice', False)
    # Calling slice(args, kwargs) (line 4484)
    slice_call_result_114245 = invoke(stypy.reporting.localization.Localization(__file__, 4484, 18), slice_114242, *[None_114243], **kwargs_114244)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4484, 17), list_114241, slice_call_result_114245)
    
    # Getting the type of 'ndim' (line 4484)
    ndim_114246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4484, 33), 'ndim')
    # Applying the binary operator '*' (line 4484)
    result_mul_114247 = python_operator(stypy.reporting.localization.Localization(__file__, 4484, 17), '*', list_114241, ndim_114246)
    
    # Assigning a type to the variable 'slobj2' (line 4484)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4484, 8), 'slobj2', result_mul_114247)
    
    # Assigning a Call to a Subscript (line 4485):
    
    # Assigning a Call to a Subscript (line 4485):
    
    # Call to slice(...): (line 4485)
    # Processing the call arguments (line 4485)
    # Getting the type of 'index' (line 4485)
    index_114249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4485, 29), 'index', False)
    # Getting the type of 'None' (line 4485)
    None_114250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4485, 36), 'None', False)
    # Processing the call keyword arguments (line 4485)
    kwargs_114251 = {}
    # Getting the type of 'slice' (line 4485)
    slice_114248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4485, 23), 'slice', False)
    # Calling slice(args, kwargs) (line 4485)
    slice_call_result_114252 = invoke(stypy.reporting.localization.Localization(__file__, 4485, 23), slice_114248, *[index_114249, None_114250], **kwargs_114251)
    
    # Getting the type of 'slobj2' (line 4485)
    slobj2_114253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4485, 8), 'slobj2')
    # Getting the type of 'axis' (line 4485)
    axis_114254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4485, 15), 'axis')
    # Storing an element on a container (line 4485)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4485, 8), slobj2_114253, (axis_114254, slice_call_result_114252))
    
    # Assigning a Subscript to a Subscript (line 4486):
    
    # Assigning a Subscript to a Subscript (line 4486):
    
    # Obtaining the type of the subscript
    # Getting the type of 'slobj2' (line 4486)
    slobj2_114255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4486, 25), 'slobj2')
    # Getting the type of 'arr' (line 4486)
    arr_114256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4486, 21), 'arr')
    # Obtaining the member '__getitem__' of a type (line 4486)
    getitem___114257 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4486, 21), arr_114256, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4486)
    subscript_call_result_114258 = invoke(stypy.reporting.localization.Localization(__file__, 4486, 21), getitem___114257, slobj2_114255)
    
    # Getting the type of 'new' (line 4486)
    new_114259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4486, 8), 'new')
    # Getting the type of 'slobj' (line 4486)
    slobj_114260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4486, 12), 'slobj')
    # Storing an element on a container (line 4486)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4486, 8), new_114259, (slobj_114260, subscript_call_result_114258))
    
    # Getting the type of 'wrap' (line 4487)
    wrap_114261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4487, 11), 'wrap')
    # Testing the type of an if condition (line 4487)
    if_condition_114262 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4487, 8), wrap_114261)
    # Assigning a type to the variable 'if_condition_114262' (line 4487)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4487, 8), 'if_condition_114262', if_condition_114262)
    # SSA begins for if statement (line 4487)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to wrap(...): (line 4488)
    # Processing the call arguments (line 4488)
    # Getting the type of 'new' (line 4488)
    new_114264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4488, 24), 'new', False)
    # Processing the call keyword arguments (line 4488)
    kwargs_114265 = {}
    # Getting the type of 'wrap' (line 4488)
    wrap_114263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4488, 19), 'wrap', False)
    # Calling wrap(args, kwargs) (line 4488)
    wrap_call_result_114266 = invoke(stypy.reporting.localization.Localization(__file__, 4488, 19), wrap_114263, *[new_114264], **kwargs_114265)
    
    # Assigning a type to the variable 'stypy_return_type' (line 4488)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4488, 12), 'stypy_return_type', wrap_call_result_114266)
    # SSA join for if statement (line 4487)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'new' (line 4489)
    new_114267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4489, 15), 'new')
    # Assigning a type to the variable 'stypy_return_type' (line 4489)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4489, 8), 'stypy_return_type', new_114267)
    # SSA branch for the else part of an if statement (line 4459)
    module_type_store.open_ssa_branch('else')
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'indices' (line 4490)
    indices_114268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4490, 9), 'indices')
    # Obtaining the member 'size' of a type (line 4490)
    size_114269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4490, 9), indices_114268, 'size')
    int_114270 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4490, 25), 'int')
    # Applying the binary operator '==' (line 4490)
    result_eq_114271 = python_operator(stypy.reporting.localization.Localization(__file__, 4490, 9), '==', size_114269, int_114270)
    
    
    
    # Call to isinstance(...): (line 4490)
    # Processing the call arguments (line 4490)
    # Getting the type of 'obj' (line 4490)
    obj_114273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4490, 46), 'obj', False)
    # Getting the type of 'np' (line 4490)
    np_114274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4490, 51), 'np', False)
    # Obtaining the member 'ndarray' of a type (line 4490)
    ndarray_114275 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4490, 51), np_114274, 'ndarray')
    # Processing the call keyword arguments (line 4490)
    kwargs_114276 = {}
    # Getting the type of 'isinstance' (line 4490)
    isinstance_114272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4490, 35), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 4490)
    isinstance_call_result_114277 = invoke(stypy.reporting.localization.Localization(__file__, 4490, 35), isinstance_114272, *[obj_114273, ndarray_114275], **kwargs_114276)
    
    # Applying the 'not' unary operator (line 4490)
    result_not__114278 = python_operator(stypy.reporting.localization.Localization(__file__, 4490, 31), 'not', isinstance_call_result_114277)
    
    # Applying the binary operator 'and' (line 4490)
    result_and_keyword_114279 = python_operator(stypy.reporting.localization.Localization(__file__, 4490, 9), 'and', result_eq_114271, result_not__114278)
    
    # Testing the type of an if condition (line 4490)
    if_condition_114280 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4490, 9), result_and_keyword_114279)
    # Assigning a type to the variable 'if_condition_114280' (line 4490)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4490, 9), 'if_condition_114280', if_condition_114280)
    # SSA begins for if statement (line 4490)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 4492):
    
    # Assigning a Call to a Name (line 4492):
    
    # Call to astype(...): (line 4492)
    # Processing the call arguments (line 4492)
    # Getting the type of 'intp' (line 4492)
    intp_114283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4492, 33), 'intp', False)
    # Processing the call keyword arguments (line 4492)
    kwargs_114284 = {}
    # Getting the type of 'indices' (line 4492)
    indices_114281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4492, 18), 'indices', False)
    # Obtaining the member 'astype' of a type (line 4492)
    astype_114282 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4492, 18), indices_114281, 'astype')
    # Calling astype(args, kwargs) (line 4492)
    astype_call_result_114285 = invoke(stypy.reporting.localization.Localization(__file__, 4492, 18), astype_114282, *[intp_114283], **kwargs_114284)
    
    # Assigning a type to the variable 'indices' (line 4492)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4492, 8), 'indices', astype_call_result_114285)
    # SSA join for if statement (line 4490)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 4459)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to can_cast(...): (line 4494)
    # Processing the call arguments (line 4494)
    # Getting the type of 'indices' (line 4494)
    indices_114288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4494, 23), 'indices', False)
    # Getting the type of 'intp' (line 4494)
    intp_114289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4494, 32), 'intp', False)
    str_114290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4494, 38), 'str', 'same_kind')
    # Processing the call keyword arguments (line 4494)
    kwargs_114291 = {}
    # Getting the type of 'np' (line 4494)
    np_114286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4494, 11), 'np', False)
    # Obtaining the member 'can_cast' of a type (line 4494)
    can_cast_114287 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4494, 11), np_114286, 'can_cast')
    # Calling can_cast(args, kwargs) (line 4494)
    can_cast_call_result_114292 = invoke(stypy.reporting.localization.Localization(__file__, 4494, 11), can_cast_114287, *[indices_114288, intp_114289, str_114290], **kwargs_114291)
    
    # Applying the 'not' unary operator (line 4494)
    result_not__114293 = python_operator(stypy.reporting.localization.Localization(__file__, 4494, 7), 'not', can_cast_call_result_114292)
    
    # Testing the type of an if condition (line 4494)
    if_condition_114294 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4494, 4), result_not__114293)
    # Assigning a type to the variable 'if_condition_114294' (line 4494)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4494, 4), 'if_condition_114294', if_condition_114294)
    # SSA begins for if statement (line 4494)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 4496)
    # Processing the call arguments (line 4496)
    str_114297 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4497, 12), 'str', 'using a non-integer array as obj in insert will result in an error in the future')
    # Getting the type of 'DeprecationWarning' (line 4498)
    DeprecationWarning_114298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4498, 35), 'DeprecationWarning', False)
    # Processing the call keyword arguments (line 4496)
    kwargs_114299 = {}
    # Getting the type of 'warnings' (line 4496)
    warnings_114295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4496, 8), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 4496)
    warn_114296 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4496, 8), warnings_114295, 'warn')
    # Calling warn(args, kwargs) (line 4496)
    warn_call_result_114300 = invoke(stypy.reporting.localization.Localization(__file__, 4496, 8), warn_114296, *[str_114297, DeprecationWarning_114298], **kwargs_114299)
    
    
    # Assigning a Call to a Name (line 4499):
    
    # Assigning a Call to a Name (line 4499):
    
    # Call to astype(...): (line 4499)
    # Processing the call arguments (line 4499)
    # Getting the type of 'intp' (line 4499)
    intp_114303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4499, 33), 'intp', False)
    # Processing the call keyword arguments (line 4499)
    kwargs_114304 = {}
    # Getting the type of 'indices' (line 4499)
    indices_114301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4499, 18), 'indices', False)
    # Obtaining the member 'astype' of a type (line 4499)
    astype_114302 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4499, 18), indices_114301, 'astype')
    # Calling astype(args, kwargs) (line 4499)
    astype_call_result_114305 = invoke(stypy.reporting.localization.Localization(__file__, 4499, 18), astype_114302, *[intp_114303], **kwargs_114304)
    
    # Assigning a type to the variable 'indices' (line 4499)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4499, 8), 'indices', astype_call_result_114305)
    # SSA join for if statement (line 4494)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'indices' (line 4501)
    indices_114306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4501, 4), 'indices')
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'indices' (line 4501)
    indices_114307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4501, 12), 'indices')
    int_114308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4501, 22), 'int')
    # Applying the binary operator '<' (line 4501)
    result_lt_114309 = python_operator(stypy.reporting.localization.Localization(__file__, 4501, 12), '<', indices_114307, int_114308)
    
    # Getting the type of 'indices' (line 4501)
    indices_114310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4501, 4), 'indices')
    # Obtaining the member '__getitem__' of a type (line 4501)
    getitem___114311 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4501, 4), indices_114310, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4501)
    subscript_call_result_114312 = invoke(stypy.reporting.localization.Localization(__file__, 4501, 4), getitem___114311, result_lt_114309)
    
    # Getting the type of 'N' (line 4501)
    N_114313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4501, 28), 'N')
    # Applying the binary operator '+=' (line 4501)
    result_iadd_114314 = python_operator(stypy.reporting.localization.Localization(__file__, 4501, 4), '+=', subscript_call_result_114312, N_114313)
    # Getting the type of 'indices' (line 4501)
    indices_114315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4501, 4), 'indices')
    
    # Getting the type of 'indices' (line 4501)
    indices_114316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4501, 12), 'indices')
    int_114317 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4501, 22), 'int')
    # Applying the binary operator '<' (line 4501)
    result_lt_114318 = python_operator(stypy.reporting.localization.Localization(__file__, 4501, 12), '<', indices_114316, int_114317)
    
    # Storing an element on a container (line 4501)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4501, 4), indices_114315, (result_lt_114318, result_iadd_114314))
    
    
    # Assigning a Call to a Name (line 4503):
    
    # Assigning a Call to a Name (line 4503):
    
    # Call to len(...): (line 4503)
    # Processing the call arguments (line 4503)
    # Getting the type of 'indices' (line 4503)
    indices_114320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4503, 17), 'indices', False)
    # Processing the call keyword arguments (line 4503)
    kwargs_114321 = {}
    # Getting the type of 'len' (line 4503)
    len_114319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4503, 13), 'len', False)
    # Calling len(args, kwargs) (line 4503)
    len_call_result_114322 = invoke(stypy.reporting.localization.Localization(__file__, 4503, 13), len_114319, *[indices_114320], **kwargs_114321)
    
    # Assigning a type to the variable 'numnew' (line 4503)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4503, 4), 'numnew', len_call_result_114322)
    
    # Assigning a Call to a Name (line 4504):
    
    # Assigning a Call to a Name (line 4504):
    
    # Call to argsort(...): (line 4504)
    # Processing the call keyword arguments (line 4504)
    str_114325 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4504, 33), 'str', 'mergesort')
    keyword_114326 = str_114325
    kwargs_114327 = {'kind': keyword_114326}
    # Getting the type of 'indices' (line 4504)
    indices_114323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4504, 12), 'indices', False)
    # Obtaining the member 'argsort' of a type (line 4504)
    argsort_114324 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4504, 12), indices_114323, 'argsort')
    # Calling argsort(args, kwargs) (line 4504)
    argsort_call_result_114328 = invoke(stypy.reporting.localization.Localization(__file__, 4504, 12), argsort_114324, *[], **kwargs_114327)
    
    # Assigning a type to the variable 'order' (line 4504)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4504, 4), 'order', argsort_call_result_114328)
    
    # Getting the type of 'indices' (line 4505)
    indices_114329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4505, 4), 'indices')
    
    # Obtaining the type of the subscript
    # Getting the type of 'order' (line 4505)
    order_114330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4505, 12), 'order')
    # Getting the type of 'indices' (line 4505)
    indices_114331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4505, 4), 'indices')
    # Obtaining the member '__getitem__' of a type (line 4505)
    getitem___114332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4505, 4), indices_114331, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4505)
    subscript_call_result_114333 = invoke(stypy.reporting.localization.Localization(__file__, 4505, 4), getitem___114332, order_114330)
    
    
    # Call to arange(...): (line 4505)
    # Processing the call arguments (line 4505)
    # Getting the type of 'numnew' (line 4505)
    numnew_114336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4505, 32), 'numnew', False)
    # Processing the call keyword arguments (line 4505)
    kwargs_114337 = {}
    # Getting the type of 'np' (line 4505)
    np_114334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4505, 22), 'np', False)
    # Obtaining the member 'arange' of a type (line 4505)
    arange_114335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4505, 22), np_114334, 'arange')
    # Calling arange(args, kwargs) (line 4505)
    arange_call_result_114338 = invoke(stypy.reporting.localization.Localization(__file__, 4505, 22), arange_114335, *[numnew_114336], **kwargs_114337)
    
    # Applying the binary operator '+=' (line 4505)
    result_iadd_114339 = python_operator(stypy.reporting.localization.Localization(__file__, 4505, 4), '+=', subscript_call_result_114333, arange_call_result_114338)
    # Getting the type of 'indices' (line 4505)
    indices_114340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4505, 4), 'indices')
    # Getting the type of 'order' (line 4505)
    order_114341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4505, 12), 'order')
    # Storing an element on a container (line 4505)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4505, 4), indices_114340, (order_114341, result_iadd_114339))
    
    
    # Getting the type of 'newshape' (line 4507)
    newshape_114342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4507, 4), 'newshape')
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 4507)
    axis_114343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4507, 13), 'axis')
    # Getting the type of 'newshape' (line 4507)
    newshape_114344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4507, 4), 'newshape')
    # Obtaining the member '__getitem__' of a type (line 4507)
    getitem___114345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4507, 4), newshape_114344, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4507)
    subscript_call_result_114346 = invoke(stypy.reporting.localization.Localization(__file__, 4507, 4), getitem___114345, axis_114343)
    
    # Getting the type of 'numnew' (line 4507)
    numnew_114347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4507, 22), 'numnew')
    # Applying the binary operator '+=' (line 4507)
    result_iadd_114348 = python_operator(stypy.reporting.localization.Localization(__file__, 4507, 4), '+=', subscript_call_result_114346, numnew_114347)
    # Getting the type of 'newshape' (line 4507)
    newshape_114349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4507, 4), 'newshape')
    # Getting the type of 'axis' (line 4507)
    axis_114350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4507, 13), 'axis')
    # Storing an element on a container (line 4507)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4507, 4), newshape_114349, (axis_114350, result_iadd_114348))
    
    
    # Assigning a Call to a Name (line 4508):
    
    # Assigning a Call to a Name (line 4508):
    
    # Call to ones(...): (line 4508)
    # Processing the call arguments (line 4508)
    
    # Obtaining the type of the subscript
    # Getting the type of 'axis' (line 4508)
    axis_114352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4508, 29), 'axis', False)
    # Getting the type of 'newshape' (line 4508)
    newshape_114353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4508, 20), 'newshape', False)
    # Obtaining the member '__getitem__' of a type (line 4508)
    getitem___114354 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4508, 20), newshape_114353, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 4508)
    subscript_call_result_114355 = invoke(stypy.reporting.localization.Localization(__file__, 4508, 20), getitem___114354, axis_114352)
    
    # Processing the call keyword arguments (line 4508)
    # Getting the type of 'bool' (line 4508)
    bool_114356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4508, 42), 'bool', False)
    keyword_114357 = bool_114356
    kwargs_114358 = {'dtype': keyword_114357}
    # Getting the type of 'ones' (line 4508)
    ones_114351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4508, 15), 'ones', False)
    # Calling ones(args, kwargs) (line 4508)
    ones_call_result_114359 = invoke(stypy.reporting.localization.Localization(__file__, 4508, 15), ones_114351, *[subscript_call_result_114355], **kwargs_114358)
    
    # Assigning a type to the variable 'old_mask' (line 4508)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4508, 4), 'old_mask', ones_call_result_114359)
    
    # Assigning a Name to a Subscript (line 4509):
    
    # Assigning a Name to a Subscript (line 4509):
    # Getting the type of 'False' (line 4509)
    False_114360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4509, 24), 'False')
    # Getting the type of 'old_mask' (line 4509)
    old_mask_114361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4509, 4), 'old_mask')
    # Getting the type of 'indices' (line 4509)
    indices_114362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4509, 13), 'indices')
    # Storing an element on a container (line 4509)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4509, 4), old_mask_114361, (indices_114362, False_114360))
    
    # Assigning a Call to a Name (line 4511):
    
    # Assigning a Call to a Name (line 4511):
    
    # Call to empty(...): (line 4511)
    # Processing the call arguments (line 4511)
    # Getting the type of 'newshape' (line 4511)
    newshape_114364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4511, 16), 'newshape', False)
    # Getting the type of 'arr' (line 4511)
    arr_114365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4511, 26), 'arr', False)
    # Obtaining the member 'dtype' of a type (line 4511)
    dtype_114366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4511, 26), arr_114365, 'dtype')
    # Getting the type of 'arrorder' (line 4511)
    arrorder_114367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4511, 37), 'arrorder', False)
    # Processing the call keyword arguments (line 4511)
    kwargs_114368 = {}
    # Getting the type of 'empty' (line 4511)
    empty_114363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4511, 10), 'empty', False)
    # Calling empty(args, kwargs) (line 4511)
    empty_call_result_114369 = invoke(stypy.reporting.localization.Localization(__file__, 4511, 10), empty_114363, *[newshape_114364, dtype_114366, arrorder_114367], **kwargs_114368)
    
    # Assigning a type to the variable 'new' (line 4511)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4511, 4), 'new', empty_call_result_114369)
    
    # Assigning a BinOp to a Name (line 4512):
    
    # Assigning a BinOp to a Name (line 4512):
    
    # Obtaining an instance of the builtin type 'list' (line 4512)
    list_114370 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4512, 13), 'list')
    # Adding type elements to the builtin type 'list' instance (line 4512)
    # Adding element type (line 4512)
    
    # Call to slice(...): (line 4512)
    # Processing the call arguments (line 4512)
    # Getting the type of 'None' (line 4512)
    None_114372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4512, 20), 'None', False)
    # Processing the call keyword arguments (line 4512)
    kwargs_114373 = {}
    # Getting the type of 'slice' (line 4512)
    slice_114371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4512, 14), 'slice', False)
    # Calling slice(args, kwargs) (line 4512)
    slice_call_result_114374 = invoke(stypy.reporting.localization.Localization(__file__, 4512, 14), slice_114371, *[None_114372], **kwargs_114373)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4512, 13), list_114370, slice_call_result_114374)
    
    # Getting the type of 'ndim' (line 4512)
    ndim_114375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4512, 27), 'ndim')
    # Applying the binary operator '*' (line 4512)
    result_mul_114376 = python_operator(stypy.reporting.localization.Localization(__file__, 4512, 13), '*', list_114370, ndim_114375)
    
    # Assigning a type to the variable 'slobj2' (line 4512)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4512, 4), 'slobj2', result_mul_114376)
    
    # Assigning a Name to a Subscript (line 4513):
    
    # Assigning a Name to a Subscript (line 4513):
    # Getting the type of 'indices' (line 4513)
    indices_114377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4513, 18), 'indices')
    # Getting the type of 'slobj' (line 4513)
    slobj_114378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4513, 4), 'slobj')
    # Getting the type of 'axis' (line 4513)
    axis_114379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4513, 10), 'axis')
    # Storing an element on a container (line 4513)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4513, 4), slobj_114378, (axis_114379, indices_114377))
    
    # Assigning a Name to a Subscript (line 4514):
    
    # Assigning a Name to a Subscript (line 4514):
    # Getting the type of 'old_mask' (line 4514)
    old_mask_114380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4514, 19), 'old_mask')
    # Getting the type of 'slobj2' (line 4514)
    slobj2_114381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4514, 4), 'slobj2')
    # Getting the type of 'axis' (line 4514)
    axis_114382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4514, 11), 'axis')
    # Storing an element on a container (line 4514)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4514, 4), slobj2_114381, (axis_114382, old_mask_114380))
    
    # Assigning a Name to a Subscript (line 4515):
    
    # Assigning a Name to a Subscript (line 4515):
    # Getting the type of 'values' (line 4515)
    values_114383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4515, 17), 'values')
    # Getting the type of 'new' (line 4515)
    new_114384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4515, 4), 'new')
    # Getting the type of 'slobj' (line 4515)
    slobj_114385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4515, 8), 'slobj')
    # Storing an element on a container (line 4515)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4515, 4), new_114384, (slobj_114385, values_114383))
    
    # Assigning a Name to a Subscript (line 4516):
    
    # Assigning a Name to a Subscript (line 4516):
    # Getting the type of 'arr' (line 4516)
    arr_114386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4516, 18), 'arr')
    # Getting the type of 'new' (line 4516)
    new_114387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4516, 4), 'new')
    # Getting the type of 'slobj2' (line 4516)
    slobj2_114388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4516, 8), 'slobj2')
    # Storing an element on a container (line 4516)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4516, 4), new_114387, (slobj2_114388, arr_114386))
    
    # Getting the type of 'wrap' (line 4518)
    wrap_114389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4518, 7), 'wrap')
    # Testing the type of an if condition (line 4518)
    if_condition_114390 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4518, 4), wrap_114389)
    # Assigning a type to the variable 'if_condition_114390' (line 4518)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4518, 4), 'if_condition_114390', if_condition_114390)
    # SSA begins for if statement (line 4518)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to wrap(...): (line 4519)
    # Processing the call arguments (line 4519)
    # Getting the type of 'new' (line 4519)
    new_114392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4519, 20), 'new', False)
    # Processing the call keyword arguments (line 4519)
    kwargs_114393 = {}
    # Getting the type of 'wrap' (line 4519)
    wrap_114391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4519, 15), 'wrap', False)
    # Calling wrap(args, kwargs) (line 4519)
    wrap_call_result_114394 = invoke(stypy.reporting.localization.Localization(__file__, 4519, 15), wrap_114391, *[new_114392], **kwargs_114393)
    
    # Assigning a type to the variable 'stypy_return_type' (line 4519)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4519, 8), 'stypy_return_type', wrap_call_result_114394)
    # SSA join for if statement (line 4518)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'new' (line 4520)
    new_114395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4520, 11), 'new')
    # Assigning a type to the variable 'stypy_return_type' (line 4520)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4520, 4), 'stypy_return_type', new_114395)
    
    # ################# End of 'insert(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'insert' in the type store
    # Getting the type of 'stypy_return_type' (line 4312)
    stypy_return_type_114396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4312, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_114396)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'insert'
    return stypy_return_type_114396

# Assigning a type to the variable 'insert' (line 4312)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4312, 0), 'insert', insert)

@norecursion
def append(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 4523)
    None_114397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4523, 29), 'None')
    defaults = [None_114397]
    # Create a new context for function 'append'
    module_type_store = module_type_store.open_function_context('append', 4523, 0, False)
    
    # Passed parameters checking function
    append.stypy_localization = localization
    append.stypy_type_of_self = None
    append.stypy_type_store = module_type_store
    append.stypy_function_name = 'append'
    append.stypy_param_names_list = ['arr', 'values', 'axis']
    append.stypy_varargs_param_name = None
    append.stypy_kwargs_param_name = None
    append.stypy_call_defaults = defaults
    append.stypy_call_varargs = varargs
    append.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'append', ['arr', 'values', 'axis'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'append', localization, ['arr', 'values', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'append(...)' code ##################

    str_114398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4568, (-1)), 'str', '\n    Append values to the end of an array.\n\n    Parameters\n    ----------\n    arr : array_like\n        Values are appended to a copy of this array.\n    values : array_like\n        These values are appended to a copy of `arr`.  It must be of the\n        correct shape (the same shape as `arr`, excluding `axis`).  If\n        `axis` is not specified, `values` can be any shape and will be\n        flattened before use.\n    axis : int, optional\n        The axis along which `values` are appended.  If `axis` is not\n        given, both `arr` and `values` are flattened before use.\n\n    Returns\n    -------\n    append : ndarray\n        A copy of `arr` with `values` appended to `axis`.  Note that\n        `append` does not occur in-place: a new array is allocated and\n        filled.  If `axis` is None, `out` is a flattened array.\n\n    See Also\n    --------\n    insert : Insert elements into an array.\n    delete : Delete elements from an array.\n\n    Examples\n    --------\n    >>> np.append([1, 2, 3], [[4, 5, 6], [7, 8, 9]])\n    array([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n    When `axis` is specified, `values` must have the correct shape.\n\n    >>> np.append([[1, 2, 3], [4, 5, 6]], [[7, 8, 9]], axis=0)\n    array([[1, 2, 3],\n           [4, 5, 6],\n           [7, 8, 9]])\n    >>> np.append([[1, 2, 3], [4, 5, 6]], [7, 8, 9], axis=0)\n    Traceback (most recent call last):\n    ...\n    ValueError: arrays must have same number of dimensions\n\n    ')
    
    # Assigning a Call to a Name (line 4569):
    
    # Assigning a Call to a Name (line 4569):
    
    # Call to asanyarray(...): (line 4569)
    # Processing the call arguments (line 4569)
    # Getting the type of 'arr' (line 4569)
    arr_114400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4569, 21), 'arr', False)
    # Processing the call keyword arguments (line 4569)
    kwargs_114401 = {}
    # Getting the type of 'asanyarray' (line 4569)
    asanyarray_114399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4569, 10), 'asanyarray', False)
    # Calling asanyarray(args, kwargs) (line 4569)
    asanyarray_call_result_114402 = invoke(stypy.reporting.localization.Localization(__file__, 4569, 10), asanyarray_114399, *[arr_114400], **kwargs_114401)
    
    # Assigning a type to the variable 'arr' (line 4569)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4569, 4), 'arr', asanyarray_call_result_114402)
    
    # Type idiom detected: calculating its left and rigth part (line 4570)
    # Getting the type of 'axis' (line 4570)
    axis_114403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4570, 7), 'axis')
    # Getting the type of 'None' (line 4570)
    None_114404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4570, 15), 'None')
    
    (may_be_114405, more_types_in_union_114406) = may_be_none(axis_114403, None_114404)

    if may_be_114405:

        if more_types_in_union_114406:
            # Runtime conditional SSA (line 4570)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        
        # Getting the type of 'arr' (line 4571)
        arr_114407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4571, 11), 'arr')
        # Obtaining the member 'ndim' of a type (line 4571)
        ndim_114408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4571, 11), arr_114407, 'ndim')
        int_114409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4571, 23), 'int')
        # Applying the binary operator '!=' (line 4571)
        result_ne_114410 = python_operator(stypy.reporting.localization.Localization(__file__, 4571, 11), '!=', ndim_114408, int_114409)
        
        # Testing the type of an if condition (line 4571)
        if_condition_114411 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 4571, 8), result_ne_114410)
        # Assigning a type to the variable 'if_condition_114411' (line 4571)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4571, 8), 'if_condition_114411', if_condition_114411)
        # SSA begins for if statement (line 4571)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 4572):
        
        # Assigning a Call to a Name (line 4572):
        
        # Call to ravel(...): (line 4572)
        # Processing the call keyword arguments (line 4572)
        kwargs_114414 = {}
        # Getting the type of 'arr' (line 4572)
        arr_114412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4572, 18), 'arr', False)
        # Obtaining the member 'ravel' of a type (line 4572)
        ravel_114413 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4572, 18), arr_114412, 'ravel')
        # Calling ravel(args, kwargs) (line 4572)
        ravel_call_result_114415 = invoke(stypy.reporting.localization.Localization(__file__, 4572, 18), ravel_114413, *[], **kwargs_114414)
        
        # Assigning a type to the variable 'arr' (line 4572)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4572, 12), 'arr', ravel_call_result_114415)
        # SSA join for if statement (line 4571)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 4573):
        
        # Assigning a Call to a Name (line 4573):
        
        # Call to ravel(...): (line 4573)
        # Processing the call arguments (line 4573)
        # Getting the type of 'values' (line 4573)
        values_114417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4573, 23), 'values', False)
        # Processing the call keyword arguments (line 4573)
        kwargs_114418 = {}
        # Getting the type of 'ravel' (line 4573)
        ravel_114416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4573, 17), 'ravel', False)
        # Calling ravel(args, kwargs) (line 4573)
        ravel_call_result_114419 = invoke(stypy.reporting.localization.Localization(__file__, 4573, 17), ravel_114416, *[values_114417], **kwargs_114418)
        
        # Assigning a type to the variable 'values' (line 4573)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4573, 8), 'values', ravel_call_result_114419)
        
        # Assigning a BinOp to a Name (line 4574):
        
        # Assigning a BinOp to a Name (line 4574):
        # Getting the type of 'arr' (line 4574)
        arr_114420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4574, 15), 'arr')
        # Obtaining the member 'ndim' of a type (line 4574)
        ndim_114421 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4574, 15), arr_114420, 'ndim')
        int_114422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4574, 24), 'int')
        # Applying the binary operator '-' (line 4574)
        result_sub_114423 = python_operator(stypy.reporting.localization.Localization(__file__, 4574, 15), '-', ndim_114421, int_114422)
        
        # Assigning a type to the variable 'axis' (line 4574)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4574, 8), 'axis', result_sub_114423)

        if more_types_in_union_114406:
            # SSA join for if statement (line 4570)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Call to concatenate(...): (line 4575)
    # Processing the call arguments (line 4575)
    
    # Obtaining an instance of the builtin type 'tuple' (line 4575)
    tuple_114425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4575, 24), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 4575)
    # Adding element type (line 4575)
    # Getting the type of 'arr' (line 4575)
    arr_114426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4575, 24), 'arr', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4575, 24), tuple_114425, arr_114426)
    # Adding element type (line 4575)
    # Getting the type of 'values' (line 4575)
    values_114427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4575, 29), 'values', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 4575, 24), tuple_114425, values_114427)
    
    # Processing the call keyword arguments (line 4575)
    # Getting the type of 'axis' (line 4575)
    axis_114428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4575, 43), 'axis', False)
    keyword_114429 = axis_114428
    kwargs_114430 = {'axis': keyword_114429}
    # Getting the type of 'concatenate' (line 4575)
    concatenate_114424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4575, 11), 'concatenate', False)
    # Calling concatenate(args, kwargs) (line 4575)
    concatenate_call_result_114431 = invoke(stypy.reporting.localization.Localization(__file__, 4575, 11), concatenate_114424, *[tuple_114425], **kwargs_114430)
    
    # Assigning a type to the variable 'stypy_return_type' (line 4575)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4575, 4), 'stypy_return_type', concatenate_call_result_114431)
    
    # ################# End of 'append(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'append' in the type store
    # Getting the type of 'stypy_return_type' (line 4523)
    stypy_return_type_114432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4523, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_114432)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'append'
    return stypy_return_type_114432

# Assigning a type to the variable 'append' (line 4523)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4523, 0), 'append', append)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
