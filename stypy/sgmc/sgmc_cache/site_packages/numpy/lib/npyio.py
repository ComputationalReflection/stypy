
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: from __future__ import division, absolute_import, print_function
2: 
3: import sys
4: import os
5: import re
6: import itertools
7: import warnings
8: import weakref
9: from operator import itemgetter
10: 
11: import numpy as np
12: from . import format
13: from ._datasource import DataSource
14: from numpy.core.multiarray import packbits, unpackbits
15: from ._iotools import (
16:     LineSplitter, NameValidator, StringConverter, ConverterError,
17:     ConverterLockError, ConversionWarning, _is_string_like, has_nested_fields,
18:     flatten_dtype, easy_dtype, _bytes_to_name
19:     )
20: 
21: from numpy.compat import (
22:     asbytes, asstr, asbytes_nested, bytes, basestring, unicode
23:     )
24: 
25: if sys.version_info[0] >= 3:
26:     import pickle
27: else:
28:     import cPickle as pickle
29:     from future_builtins import map
30: 
31: loads = pickle.loads
32: 
33: __all__ = [
34:     'savetxt', 'loadtxt', 'genfromtxt', 'ndfromtxt', 'mafromtxt',
35:     'recfromtxt', 'recfromcsv', 'load', 'loads', 'save', 'savez',
36:     'savez_compressed', 'packbits', 'unpackbits', 'fromregex', 'DataSource'
37:     ]
38: 
39: 
40: class BagObj(object):
41:     '''
42:     BagObj(obj)
43: 
44:     Convert attribute look-ups to getitems on the object passed in.
45: 
46:     Parameters
47:     ----------
48:     obj : class instance
49:         Object on which attribute look-up is performed.
50: 
51:     Examples
52:     --------
53:     >>> from numpy.lib.npyio import BagObj as BO
54:     >>> class BagDemo(object):
55:     ...     def __getitem__(self, key): # An instance of BagObj(BagDemo)
56:     ...                                 # will call this method when any
57:     ...                                 # attribute look-up is required
58:     ...         result = "Doesn't matter what you want, "
59:     ...         return result + "you're gonna get this"
60:     ...
61:     >>> demo_obj = BagDemo()
62:     >>> bagobj = BO(demo_obj)
63:     >>> bagobj.hello_there
64:     "Doesn't matter what you want, you're gonna get this"
65:     >>> bagobj.I_can_be_anything
66:     "Doesn't matter what you want, you're gonna get this"
67: 
68:     '''
69: 
70:     def __init__(self, obj):
71:         # Use weakref to make NpzFile objects collectable by refcount
72:         self._obj = weakref.proxy(obj)
73: 
74:     def __getattribute__(self, key):
75:         try:
76:             return object.__getattribute__(self, '_obj')[key]
77:         except KeyError:
78:             raise AttributeError(key)
79: 
80:     def __dir__(self):
81:         '''
82:         Enables dir(bagobj) to list the files in an NpzFile.
83: 
84:         This also enables tab-completion in an interpreter or IPython.
85:         '''
86:         return object.__getattribute__(self, '_obj').keys()
87: 
88: 
89: def zipfile_factory(*args, **kwargs):
90:     import zipfile
91:     kwargs['allowZip64'] = True
92:     return zipfile.ZipFile(*args, **kwargs)
93: 
94: 
95: class NpzFile(object):
96:     '''
97:     NpzFile(fid)
98: 
99:     A dictionary-like object with lazy-loading of files in the zipped
100:     archive provided on construction.
101: 
102:     `NpzFile` is used to load files in the NumPy ``.npz`` data archive
103:     format. It assumes that files in the archive have a ``.npy`` extension,
104:     other files are ignored.
105: 
106:     The arrays and file strings are lazily loaded on either
107:     getitem access using ``obj['key']`` or attribute lookup using
108:     ``obj.f.key``. A list of all files (without ``.npy`` extensions) can
109:     be obtained with ``obj.files`` and the ZipFile object itself using
110:     ``obj.zip``.
111: 
112:     Attributes
113:     ----------
114:     files : list of str
115:         List of all files in the archive with a ``.npy`` extension.
116:     zip : ZipFile instance
117:         The ZipFile object initialized with the zipped archive.
118:     f : BagObj instance
119:         An object on which attribute can be performed as an alternative
120:         to getitem access on the `NpzFile` instance itself.
121:     allow_pickle : bool, optional
122:         Allow loading pickled data. Default: True
123:     pickle_kwargs : dict, optional
124:         Additional keyword arguments to pass on to pickle.load.
125:         These are only useful when loading object arrays saved on
126:         Python 2 when using Python 3.
127: 
128:     Parameters
129:     ----------
130:     fid : file or str
131:         The zipped archive to open. This is either a file-like object
132:         or a string containing the path to the archive.
133:     own_fid : bool, optional
134:         Whether NpzFile should close the file handle.
135:         Requires that `fid` is a file-like object.
136: 
137:     Examples
138:     --------
139:     >>> from tempfile import TemporaryFile
140:     >>> outfile = TemporaryFile()
141:     >>> x = np.arange(10)
142:     >>> y = np.sin(x)
143:     >>> np.savez(outfile, x=x, y=y)
144:     >>> outfile.seek(0)
145: 
146:     >>> npz = np.load(outfile)
147:     >>> isinstance(npz, np.lib.io.NpzFile)
148:     True
149:     >>> npz.files
150:     ['y', 'x']
151:     >>> npz['x']  # getitem access
152:     array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
153:     >>> npz.f.x  # attribute lookup
154:     array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
155: 
156:     '''
157: 
158:     def __init__(self, fid, own_fid=False, allow_pickle=True,
159:                  pickle_kwargs=None):
160:         # Import is postponed to here since zipfile depends on gzip, an
161:         # optional component of the so-called standard library.
162:         _zip = zipfile_factory(fid)
163:         self._files = _zip.namelist()
164:         self.files = []
165:         self.allow_pickle = allow_pickle
166:         self.pickle_kwargs = pickle_kwargs
167:         for x in self._files:
168:             if x.endswith('.npy'):
169:                 self.files.append(x[:-4])
170:             else:
171:                 self.files.append(x)
172:         self.zip = _zip
173:         self.f = BagObj(self)
174:         if own_fid:
175:             self.fid = fid
176:         else:
177:             self.fid = None
178: 
179:     def __enter__(self):
180:         return self
181: 
182:     def __exit__(self, exc_type, exc_value, traceback):
183:         self.close()
184: 
185:     def close(self):
186:         '''
187:         Close the file.
188: 
189:         '''
190:         if self.zip is not None:
191:             self.zip.close()
192:             self.zip = None
193:         if self.fid is not None:
194:             self.fid.close()
195:             self.fid = None
196:         self.f = None  # break reference cycle
197: 
198:     def __del__(self):
199:         self.close()
200: 
201:     def __getitem__(self, key):
202:         # FIXME: This seems like it will copy strings around
203:         #   more than is strictly necessary.  The zipfile
204:         #   will read the string and then
205:         #   the format.read_array will copy the string
206:         #   to another place in memory.
207:         #   It would be better if the zipfile could read
208:         #   (or at least uncompress) the data
209:         #   directly into the array memory.
210:         member = 0
211:         if key in self._files:
212:             member = 1
213:         elif key in self.files:
214:             member = 1
215:             key += '.npy'
216:         if member:
217:             bytes = self.zip.open(key)
218:             magic = bytes.read(len(format.MAGIC_PREFIX))
219:             bytes.close()
220:             if magic == format.MAGIC_PREFIX:
221:                 bytes = self.zip.open(key)
222:                 return format.read_array(bytes,
223:                                          allow_pickle=self.allow_pickle,
224:                                          pickle_kwargs=self.pickle_kwargs)
225:             else:
226:                 return self.zip.read(key)
227:         else:
228:             raise KeyError("%s is not a file in the archive" % key)
229: 
230:     def __iter__(self):
231:         return iter(self.files)
232: 
233:     def items(self):
234:         '''
235:         Return a list of tuples, with each tuple (filename, array in file).
236: 
237:         '''
238:         return [(f, self[f]) for f in self.files]
239: 
240:     def iteritems(self):
241:         '''Generator that returns tuples (filename, array in file).'''
242:         for f in self.files:
243:             yield (f, self[f])
244: 
245:     def keys(self):
246:         '''Return files in the archive with a ``.npy`` extension.'''
247:         return self.files
248: 
249:     def iterkeys(self):
250:         '''Return an iterator over the files in the archive.'''
251:         return self.__iter__()
252: 
253:     def __contains__(self, key):
254:         return self.files.__contains__(key)
255: 
256: 
257: def load(file, mmap_mode=None, allow_pickle=True, fix_imports=True,
258:          encoding='ASCII'):
259:     '''
260:     Load arrays or pickled objects from ``.npy``, ``.npz`` or pickled files.
261: 
262:     Parameters
263:     ----------
264:     file : file-like object or string
265:         The file to read. File-like objects must support the
266:         ``seek()`` and ``read()`` methods. Pickled files require that the
267:         file-like object support the ``readline()`` method as well.
268:     mmap_mode : {None, 'r+', 'r', 'w+', 'c'}, optional
269:         If not None, then memory-map the file, using the given mode (see
270:         `numpy.memmap` for a detailed description of the modes).  A
271:         memory-mapped array is kept on disk. However, it can be accessed
272:         and sliced like any ndarray.  Memory mapping is especially useful
273:         for accessing small fragments of large files without reading the
274:         entire file into memory.
275:     allow_pickle : bool, optional
276:         Allow loading pickled object arrays stored in npy files. Reasons for
277:         disallowing pickles include security, as loading pickled data can
278:         execute arbitrary code. If pickles are disallowed, loading object
279:         arrays will fail.
280:         Default: True
281:     fix_imports : bool, optional
282:         Only useful when loading Python 2 generated pickled files on Python 3,
283:         which includes npy/npz files containing object arrays. If `fix_imports`
284:         is True, pickle will try to map the old Python 2 names to the new names
285:         used in Python 3.
286:     encoding : str, optional
287:         What encoding to use when reading Python 2 strings. Only useful when
288:         loading Python 2 generated pickled files on Python 3, which includes
289:         npy/npz files containing object arrays. Values other than 'latin1',
290:         'ASCII', and 'bytes' are not allowed, as they can corrupt numerical
291:         data. Default: 'ASCII'
292: 
293:     Returns
294:     -------
295:     result : array, tuple, dict, etc.
296:         Data stored in the file. For ``.npz`` files, the returned instance
297:         of NpzFile class must be closed to avoid leaking file descriptors.
298: 
299:     Raises
300:     ------
301:     IOError
302:         If the input file does not exist or cannot be read.
303:     ValueError
304:         The file contains an object array, but allow_pickle=False given.
305: 
306:     See Also
307:     --------
308:     save, savez, savez_compressed, loadtxt
309:     memmap : Create a memory-map to an array stored in a file on disk.
310: 
311:     Notes
312:     -----
313:     - If the file contains pickle data, then whatever object is stored
314:       in the pickle is returned.
315:     - If the file is a ``.npy`` file, then a single array is returned.
316:     - If the file is a ``.npz`` file, then a dictionary-like object is
317:       returned, containing ``{filename: array}`` key-value pairs, one for
318:       each file in the archive.
319:     - If the file is a ``.npz`` file, the returned value supports the
320:       context manager protocol in a similar fashion to the open function::
321: 
322:         with load('foo.npz') as data:
323:             a = data['a']
324: 
325:       The underlying file descriptor is closed when exiting the 'with'
326:       block.
327: 
328:     Examples
329:     --------
330:     Store data to disk, and load it again:
331: 
332:     >>> np.save('/tmp/123', np.array([[1, 2, 3], [4, 5, 6]]))
333:     >>> np.load('/tmp/123.npy')
334:     array([[1, 2, 3],
335:            [4, 5, 6]])
336: 
337:     Store compressed data to disk, and load it again:
338: 
339:     >>> a=np.array([[1, 2, 3], [4, 5, 6]])
340:     >>> b=np.array([1, 2])
341:     >>> np.savez('/tmp/123.npz', a=a, b=b)
342:     >>> data = np.load('/tmp/123.npz')
343:     >>> data['a']
344:     array([[1, 2, 3],
345:            [4, 5, 6]])
346:     >>> data['b']
347:     array([1, 2])
348:     >>> data.close()
349: 
350:     Mem-map the stored array, and then access the second row
351:     directly from disk:
352: 
353:     >>> X = np.load('/tmp/123.npy', mmap_mode='r')
354:     >>> X[1, :]
355:     memmap([4, 5, 6])
356: 
357:     '''
358:     import gzip
359: 
360:     own_fid = False
361:     if isinstance(file, basestring):
362:         fid = open(file, "rb")
363:         own_fid = True
364:     else:
365:         fid = file
366: 
367:     if encoding not in ('ASCII', 'latin1', 'bytes'):
368:         # The 'encoding' value for pickle also affects what encoding
369:         # the serialized binary data of Numpy arrays is loaded
370:         # in. Pickle does not pass on the encoding information to
371:         # Numpy. The unpickling code in numpy.core.multiarray is
372:         # written to assume that unicode data appearing where binary
373:         # should be is in 'latin1'. 'bytes' is also safe, as is 'ASCII'.
374:         #
375:         # Other encoding values can corrupt binary data, and we
376:         # purposefully disallow them. For the same reason, the errors=
377:         # argument is not exposed, as values other than 'strict'
378:         # result can similarly silently corrupt numerical data.
379:         raise ValueError("encoding must be 'ASCII', 'latin1', or 'bytes'")
380: 
381:     if sys.version_info[0] >= 3:
382:         pickle_kwargs = dict(encoding=encoding, fix_imports=fix_imports)
383:     else:
384:         # Nothing to do on Python 2
385:         pickle_kwargs = {}
386: 
387:     try:
388:         # Code to distinguish from NumPy binary files and pickles.
389:         _ZIP_PREFIX = asbytes('PK\x03\x04')
390:         N = len(format.MAGIC_PREFIX)
391:         magic = fid.read(N)
392:         fid.seek(-N, 1)  # back-up
393:         if magic.startswith(_ZIP_PREFIX):
394:             # zip-file (assume .npz)
395:             # Transfer file ownership to NpzFile
396:             tmp = own_fid
397:             own_fid = False
398:             return NpzFile(fid, own_fid=tmp, allow_pickle=allow_pickle,
399:                            pickle_kwargs=pickle_kwargs)
400:         elif magic == format.MAGIC_PREFIX:
401:             # .npy file
402:             if mmap_mode:
403:                 return format.open_memmap(file, mode=mmap_mode)
404:             else:
405:                 return format.read_array(fid, allow_pickle=allow_pickle,
406:                                          pickle_kwargs=pickle_kwargs)
407:         else:
408:             # Try a pickle
409:             if not allow_pickle:
410:                 raise ValueError("allow_pickle=False, but file does not contain "
411:                                  "non-pickled data")
412:             try:
413:                 return pickle.load(fid, **pickle_kwargs)
414:             except:
415:                 raise IOError(
416:                     "Failed to interpret file %s as a pickle" % repr(file))
417:     finally:
418:         if own_fid:
419:             fid.close()
420: 
421: 
422: def save(file, arr, allow_pickle=True, fix_imports=True):
423:     '''
424:     Save an array to a binary file in NumPy ``.npy`` format.
425: 
426:     Parameters
427:     ----------
428:     file : file or str
429:         File or filename to which the data is saved.  If file is a file-object,
430:         then the filename is unchanged.  If file is a string, a ``.npy``
431:         extension will be appended to the file name if it does not already
432:         have one.
433:     allow_pickle : bool, optional
434:         Allow saving object arrays using Python pickles. Reasons for disallowing
435:         pickles include security (loading pickled data can execute arbitrary
436:         code) and portability (pickled objects may not be loadable on different
437:         Python installations, for example if the stored objects require libraries
438:         that are not available, and not all pickled data is compatible between
439:         Python 2 and Python 3).
440:         Default: True
441:     fix_imports : bool, optional
442:         Only useful in forcing objects in object arrays on Python 3 to be
443:         pickled in a Python 2 compatible way. If `fix_imports` is True, pickle
444:         will try to map the new Python 3 names to the old module names used in
445:         Python 2, so that the pickle data stream is readable with Python 2.
446:     arr : array_like
447:         Array data to be saved.
448: 
449:     See Also
450:     --------
451:     savez : Save several arrays into a ``.npz`` archive
452:     savetxt, load
453: 
454:     Notes
455:     -----
456:     For a description of the ``.npy`` format, see the module docstring
457:     of `numpy.lib.format` or the Numpy Enhancement Proposal
458:     http://docs.scipy.org/doc/numpy/neps/npy-format.html
459: 
460:     Examples
461:     --------
462:     >>> from tempfile import TemporaryFile
463:     >>> outfile = TemporaryFile()
464: 
465:     >>> x = np.arange(10)
466:     >>> np.save(outfile, x)
467: 
468:     >>> outfile.seek(0) # Only needed here to simulate closing & reopening file
469:     >>> np.load(outfile)
470:     array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
471: 
472:     '''
473:     own_fid = False
474:     if isinstance(file, basestring):
475:         if not file.endswith('.npy'):
476:             file = file + '.npy'
477:         fid = open(file, "wb")
478:         own_fid = True
479:     else:
480:         fid = file
481: 
482:     if sys.version_info[0] >= 3:
483:         pickle_kwargs = dict(fix_imports=fix_imports)
484:     else:
485:         # Nothing to do on Python 2
486:         pickle_kwargs = None
487: 
488:     try:
489:         arr = np.asanyarray(arr)
490:         format.write_array(fid, arr, allow_pickle=allow_pickle,
491:                            pickle_kwargs=pickle_kwargs)
492:     finally:
493:         if own_fid:
494:             fid.close()
495: 
496: 
497: def savez(file, *args, **kwds):
498:     '''
499:     Save several arrays into a single file in uncompressed ``.npz`` format.
500: 
501:     If arguments are passed in with no keywords, the corresponding variable
502:     names, in the ``.npz`` file, are 'arr_0', 'arr_1', etc. If keyword
503:     arguments are given, the corresponding variable names, in the ``.npz``
504:     file will match the keyword names.
505: 
506:     Parameters
507:     ----------
508:     file : str or file
509:         Either the file name (string) or an open file (file-like object)
510:         where the data will be saved. If file is a string, the ``.npz``
511:         extension will be appended to the file name if it is not already there.
512:     args : Arguments, optional
513:         Arrays to save to the file. Since it is not possible for Python to
514:         know the names of the arrays outside `savez`, the arrays will be saved
515:         with names "arr_0", "arr_1", and so on. These arguments can be any
516:         expression.
517:     kwds : Keyword arguments, optional
518:         Arrays to save to the file. Arrays will be saved in the file with the
519:         keyword names.
520: 
521:     Returns
522:     -------
523:     None
524: 
525:     See Also
526:     --------
527:     save : Save a single array to a binary file in NumPy format.
528:     savetxt : Save an array to a file as plain text.
529:     savez_compressed : Save several arrays into a compressed ``.npz`` archive
530: 
531:     Notes
532:     -----
533:     The ``.npz`` file format is a zipped archive of files named after the
534:     variables they contain.  The archive is not compressed and each file
535:     in the archive contains one variable in ``.npy`` format. For a
536:     description of the ``.npy`` format, see `numpy.lib.format` or the
537:     Numpy Enhancement Proposal
538:     http://docs.scipy.org/doc/numpy/neps/npy-format.html
539: 
540:     When opening the saved ``.npz`` file with `load` a `NpzFile` object is
541:     returned. This is a dictionary-like object which can be queried for
542:     its list of arrays (with the ``.files`` attribute), and for the arrays
543:     themselves.
544: 
545:     Examples
546:     --------
547:     >>> from tempfile import TemporaryFile
548:     >>> outfile = TemporaryFile()
549:     >>> x = np.arange(10)
550:     >>> y = np.sin(x)
551: 
552:     Using `savez` with \\*args, the arrays are saved with default names.
553: 
554:     >>> np.savez(outfile, x, y)
555:     >>> outfile.seek(0) # Only needed here to simulate closing & reopening file
556:     >>> npzfile = np.load(outfile)
557:     >>> npzfile.files
558:     ['arr_1', 'arr_0']
559:     >>> npzfile['arr_0']
560:     array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
561: 
562:     Using `savez` with \\**kwds, the arrays are saved with the keyword names.
563: 
564:     >>> outfile = TemporaryFile()
565:     >>> np.savez(outfile, x=x, y=y)
566:     >>> outfile.seek(0)
567:     >>> npzfile = np.load(outfile)
568:     >>> npzfile.files
569:     ['y', 'x']
570:     >>> npzfile['x']
571:     array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
572: 
573:     '''
574:     _savez(file, args, kwds, False)
575: 
576: 
577: def savez_compressed(file, *args, **kwds):
578:     '''
579:     Save several arrays into a single file in compressed ``.npz`` format.
580: 
581:     If keyword arguments are given, then filenames are taken from the keywords.
582:     If arguments are passed in with no keywords, then stored file names are
583:     arr_0, arr_1, etc.
584: 
585:     Parameters
586:     ----------
587:     file : str
588:         File name of ``.npz`` file.
589:     args : Arguments
590:         Function arguments.
591:     kwds : Keyword arguments
592:         Keywords.
593: 
594:     See Also
595:     --------
596:     numpy.savez : Save several arrays into an uncompressed ``.npz`` file format
597:     numpy.load : Load the files created by savez_compressed.
598: 
599:     '''
600:     _savez(file, args, kwds, True)
601: 
602: 
603: def _savez(file, args, kwds, compress, allow_pickle=True, pickle_kwargs=None):
604:     # Import is postponed to here since zipfile depends on gzip, an optional
605:     # component of the so-called standard library.
606:     import zipfile
607:     # Import deferred for startup time improvement
608:     import tempfile
609: 
610:     if isinstance(file, basestring):
611:         if not file.endswith('.npz'):
612:             file = file + '.npz'
613: 
614:     namedict = kwds
615:     for i, val in enumerate(args):
616:         key = 'arr_%d' % i
617:         if key in namedict.keys():
618:             raise ValueError(
619:                 "Cannot use un-named variables and keyword %s" % key)
620:         namedict[key] = val
621: 
622:     if compress:
623:         compression = zipfile.ZIP_DEFLATED
624:     else:
625:         compression = zipfile.ZIP_STORED
626: 
627:     zipf = zipfile_factory(file, mode="w", compression=compression)
628: 
629:     # Stage arrays in a temporary file on disk, before writing to zip.
630:     fd, tmpfile = tempfile.mkstemp(suffix='-numpy.npy')
631:     os.close(fd)
632:     try:
633:         for key, val in namedict.items():
634:             fname = key + '.npy'
635:             fid = open(tmpfile, 'wb')
636:             try:
637:                 format.write_array(fid, np.asanyarray(val),
638:                                    allow_pickle=allow_pickle,
639:                                    pickle_kwargs=pickle_kwargs)
640:                 fid.close()
641:                 fid = None
642:                 zipf.write(tmpfile, arcname=fname)
643:             finally:
644:                 if fid:
645:                     fid.close()
646:     finally:
647:         os.remove(tmpfile)
648: 
649:     zipf.close()
650: 
651: 
652: def _getconv(dtype):
653:     ''' Find the correct dtype converter. Adapted from matplotlib '''
654: 
655:     def floatconv(x):
656:         x.lower()
657:         if b'0x' in x:
658:             return float.fromhex(asstr(x))
659:         return float(x)
660: 
661:     typ = dtype.type
662:     if issubclass(typ, np.bool_):
663:         return lambda x: bool(int(x))
664:     if issubclass(typ, np.uint64):
665:         return np.uint64
666:     if issubclass(typ, np.int64):
667:         return np.int64
668:     if issubclass(typ, np.integer):
669:         return lambda x: int(float(x))
670:     elif issubclass(typ, np.longdouble):
671:         return np.longdouble
672:     elif issubclass(typ, np.floating):
673:         return floatconv
674:     elif issubclass(typ, np.complex):
675:         return lambda x: complex(asstr(x))
676:     elif issubclass(typ, np.bytes_):
677:         return bytes
678:     else:
679:         return str
680: 
681: 
682: def loadtxt(fname, dtype=float, comments='#', delimiter=None,
683:             converters=None, skiprows=0, usecols=None, unpack=False,
684:             ndmin=0):
685:     '''
686:     Load data from a text file.
687: 
688:     Each row in the text file must have the same number of values.
689: 
690:     Parameters
691:     ----------
692:     fname : file or str
693:         File, filename, or generator to read.  If the filename extension is
694:         ``.gz`` or ``.bz2``, the file is first decompressed. Note that
695:         generators should return byte strings for Python 3k.
696:     dtype : data-type, optional
697:         Data-type of the resulting array; default: float.  If this is a
698:         structured data-type, the resulting array will be 1-dimensional, and
699:         each row will be interpreted as an element of the array.  In this
700:         case, the number of columns used must match the number of fields in
701:         the data-type.
702:     comments : str or sequence, optional
703:         The characters or list of characters used to indicate the start of a
704:         comment;
705:         default: '#'.
706:     delimiter : str, optional
707:         The string used to separate values.  By default, this is any
708:         whitespace.
709:     converters : dict, optional
710:         A dictionary mapping column number to a function that will convert
711:         that column to a float.  E.g., if column 0 is a date string:
712:         ``converters = {0: datestr2num}``.  Converters can also be used to
713:         provide a default value for missing data (but see also `genfromtxt`):
714:         ``converters = {3: lambda s: float(s.strip() or 0)}``.  Default: None.
715:     skiprows : int, optional
716:         Skip the first `skiprows` lines; default: 0.
717:     usecols : sequence, optional
718:         Which columns to read, with 0 being the first.  For example,
719:         ``usecols = (1,4,5)`` will extract the 2nd, 5th and 6th columns.
720:         The default, None, results in all columns being read.
721:     unpack : bool, optional
722:         If True, the returned array is transposed, so that arguments may be
723:         unpacked using ``x, y, z = loadtxt(...)``.  When used with a structured
724:         data-type, arrays are returned for each field.  Default is False.
725:     ndmin : int, optional
726:         The returned array will have at least `ndmin` dimensions.
727:         Otherwise mono-dimensional axes will be squeezed.
728:         Legal values: 0 (default), 1 or 2.
729: 
730:         .. versionadded:: 1.6.0
731: 
732:     Returns
733:     -------
734:     out : ndarray
735:         Data read from the text file.
736: 
737:     See Also
738:     --------
739:     load, fromstring, fromregex
740:     genfromtxt : Load data with missing values handled as specified.
741:     scipy.io.loadmat : reads MATLAB data files
742: 
743:     Notes
744:     -----
745:     This function aims to be a fast reader for simply formatted files.  The
746:     `genfromtxt` function provides more sophisticated handling of, e.g.,
747:     lines with missing values.
748: 
749:     .. versionadded:: 1.10.0
750: 
751:     The strings produced by the Python float.hex method can be used as
752:     input for floats.
753: 
754:     Examples
755:     --------
756:     >>> from io import StringIO   # StringIO behaves like a file object
757:     >>> c = StringIO("0 1\\n2 3")
758:     >>> np.loadtxt(c)
759:     array([[ 0.,  1.],
760:            [ 2.,  3.]])
761: 
762:     >>> d = StringIO("M 21 72\\nF 35 58")
763:     >>> np.loadtxt(d, dtype={'names': ('gender', 'age', 'weight'),
764:     ...                      'formats': ('S1', 'i4', 'f4')})
765:     array([('M', 21, 72.0), ('F', 35, 58.0)],
766:           dtype=[('gender', '|S1'), ('age', '<i4'), ('weight', '<f4')])
767: 
768:     >>> c = StringIO("1,0,2\\n3,0,4")
769:     >>> x, y = np.loadtxt(c, delimiter=',', usecols=(0, 2), unpack=True)
770:     >>> x
771:     array([ 1.,  3.])
772:     >>> y
773:     array([ 2.,  4.])
774: 
775:     '''
776:     # Type conversions for Py3 convenience
777:     if comments is not None:
778:         if isinstance(comments, (basestring, bytes)):
779:             comments = [asbytes(comments)]
780:         else:
781:             comments = [asbytes(comment) for comment in comments]
782: 
783:         # Compile regex for comments beforehand
784:         comments = (re.escape(comment) for comment in comments)
785:         regex_comments = re.compile(asbytes('|').join(comments))
786:     user_converters = converters
787:     if delimiter is not None:
788:         delimiter = asbytes(delimiter)
789:     if usecols is not None:
790:         usecols = list(usecols)
791: 
792:     fown = False
793:     try:
794:         if _is_string_like(fname):
795:             fown = True
796:             if fname.endswith('.gz'):
797:                 import gzip
798:                 fh = iter(gzip.GzipFile(fname))
799:             elif fname.endswith('.bz2'):
800:                 import bz2
801:                 fh = iter(bz2.BZ2File(fname))
802:             elif sys.version_info[0] == 2:
803:                 fh = iter(open(fname, 'U'))
804:             else:
805:                 fh = iter(open(fname))
806:         else:
807:             fh = iter(fname)
808:     except TypeError:
809:         raise ValueError('fname must be a string, file handle, or generator')
810:     X = []
811: 
812:     def flatten_dtype(dt):
813:         '''Unpack a structured data-type, and produce re-packing info.'''
814:         if dt.names is None:
815:             # If the dtype is flattened, return.
816:             # If the dtype has a shape, the dtype occurs
817:             # in the list more than once.
818:             shape = dt.shape
819:             if len(shape) == 0:
820:                 return ([dt.base], None)
821:             else:
822:                 packing = [(shape[-1], list)]
823:                 if len(shape) > 1:
824:                     for dim in dt.shape[-2::-1]:
825:                         packing = [(dim*packing[0][0], packing*dim)]
826:                 return ([dt.base] * int(np.prod(dt.shape)), packing)
827:         else:
828:             types = []
829:             packing = []
830:             for field in dt.names:
831:                 tp, bytes = dt.fields[field]
832:                 flat_dt, flat_packing = flatten_dtype(tp)
833:                 types.extend(flat_dt)
834:                 # Avoid extra nesting for subarrays
835:                 if len(tp.shape) > 0:
836:                     packing.extend(flat_packing)
837:                 else:
838:                     packing.append((len(flat_dt), flat_packing))
839:             return (types, packing)
840: 
841:     def pack_items(items, packing):
842:         '''Pack items into nested lists based on re-packing info.'''
843:         if packing is None:
844:             return items[0]
845:         elif packing is tuple:
846:             return tuple(items)
847:         elif packing is list:
848:             return list(items)
849:         else:
850:             start = 0
851:             ret = []
852:             for length, subpacking in packing:
853:                 ret.append(pack_items(items[start:start+length], subpacking))
854:                 start += length
855:             return tuple(ret)
856: 
857:     def split_line(line):
858:         '''Chop off comments, strip, and split at delimiter.
859: 
860:         Note that although the file is opened as text, this function
861:         returns bytes.
862: 
863:         '''
864:         line = asbytes(line)
865:         if comments is not None:
866:             line = regex_comments.split(asbytes(line), maxsplit=1)[0]
867:         line = line.strip(asbytes('\r\n'))
868:         if line:
869:             return line.split(delimiter)
870:         else:
871:             return []
872: 
873:     try:
874:         # Make sure we're dealing with a proper dtype
875:         dtype = np.dtype(dtype)
876:         defconv = _getconv(dtype)
877: 
878:         # Skip the first `skiprows` lines
879:         for i in range(skiprows):
880:             next(fh)
881: 
882:         # Read until we find a line with some values, and use
883:         # it to estimate the number of columns, N.
884:         first_vals = None
885:         try:
886:             while not first_vals:
887:                 first_line = next(fh)
888:                 first_vals = split_line(first_line)
889:         except StopIteration:
890:             # End of lines reached
891:             first_line = ''
892:             first_vals = []
893:             warnings.warn('loadtxt: Empty input file: "%s"' % fname)
894:         N = len(usecols or first_vals)
895: 
896:         dtype_types, packing = flatten_dtype(dtype)
897:         if len(dtype_types) > 1:
898:             # We're dealing with a structured array, each field of
899:             # the dtype matches a column
900:             converters = [_getconv(dt) for dt in dtype_types]
901:         else:
902:             # All fields have the same dtype
903:             converters = [defconv for i in range(N)]
904:             if N > 1:
905:                 packing = [(N, tuple)]
906: 
907:         # By preference, use the converters specified by the user
908:         for i, conv in (user_converters or {}).items():
909:             if usecols:
910:                 try:
911:                     i = usecols.index(i)
912:                 except ValueError:
913:                     # Unused converter specified
914:                     continue
915:             converters[i] = conv
916: 
917:         # Parse each line, including the first
918:         for i, line in enumerate(itertools.chain([first_line], fh)):
919:             vals = split_line(line)
920:             if len(vals) == 0:
921:                 continue
922:             if usecols:
923:                 vals = [vals[i] for i in usecols]
924:             if len(vals) != N:
925:                 line_num = i + skiprows + 1
926:                 raise ValueError("Wrong number of columns at line %d"
927:                                  % line_num)
928: 
929:             # Convert each value according to its column and store
930:             items = [conv(val) for (conv, val) in zip(converters, vals)]
931:             # Then pack it according to the dtype's nesting
932:             items = pack_items(items, packing)
933:             X.append(items)
934:     finally:
935:         if fown:
936:             fh.close()
937: 
938:     X = np.array(X, dtype)
939:     # Multicolumn data are returned with shape (1, N, M), i.e.
940:     # (1, 1, M) for a single row - remove the singleton dimension there
941:     if X.ndim == 3 and X.shape[:2] == (1, 1):
942:         X.shape = (1, -1)
943: 
944:     # Verify that the array has at least dimensions `ndmin`.
945:     # Check correctness of the values of `ndmin`
946:     if ndmin not in [0, 1, 2]:
947:         raise ValueError('Illegal value of ndmin keyword: %s' % ndmin)
948:     # Tweak the size and shape of the arrays - remove extraneous dimensions
949:     if X.ndim > ndmin:
950:         X = np.squeeze(X)
951:     # and ensure we have the minimum number of dimensions asked for
952:     # - has to be in this order for the odd case ndmin=1, X.squeeze().ndim=0
953:     if X.ndim < ndmin:
954:         if ndmin == 1:
955:             X = np.atleast_1d(X)
956:         elif ndmin == 2:
957:             X = np.atleast_2d(X).T
958: 
959:     if unpack:
960:         if len(dtype_types) > 1:
961:             # For structured arrays, return an array for each field.
962:             return [X[field] for field in dtype.names]
963:         else:
964:             return X.T
965:     else:
966:         return X
967: 
968: 
969: def savetxt(fname, X, fmt='%.18e', delimiter=' ', newline='\n', header='',
970:             footer='', comments='# '):
971:     '''
972:     Save an array to a text file.
973: 
974:     Parameters
975:     ----------
976:     fname : filename or file handle
977:         If the filename ends in ``.gz``, the file is automatically saved in
978:         compressed gzip format.  `loadtxt` understands gzipped files
979:         transparently.
980:     X : array_like
981:         Data to be saved to a text file.
982:     fmt : str or sequence of strs, optional
983:         A single format (%10.5f), a sequence of formats, or a
984:         multi-format string, e.g. 'Iteration %d -- %10.5f', in which
985:         case `delimiter` is ignored. For complex `X`, the legal options
986:         for `fmt` are:
987:             a) a single specifier, `fmt='%.4e'`, resulting in numbers formatted
988:                 like `' (%s+%sj)' % (fmt, fmt)`
989:             b) a full string specifying every real and imaginary part, e.g.
990:                 `' %.4e %+.4j %.4e %+.4j %.4e %+.4j'` for 3 columns
991:             c) a list of specifiers, one per column - in this case, the real
992:                 and imaginary part must have separate specifiers,
993:                 e.g. `['%.3e + %.3ej', '(%.15e%+.15ej)']` for 2 columns
994:     delimiter : str, optional
995:         String or character separating columns.
996:     newline : str, optional
997:         String or character separating lines.
998: 
999:         .. versionadded:: 1.5.0
1000:     header : str, optional
1001:         String that will be written at the beginning of the file.
1002: 
1003:         .. versionadded:: 1.7.0
1004:     footer : str, optional
1005:         String that will be written at the end of the file.
1006: 
1007:         .. versionadded:: 1.7.0
1008:     comments : str, optional
1009:         String that will be prepended to the ``header`` and ``footer`` strings,
1010:         to mark them as comments. Default: '# ',  as expected by e.g.
1011:         ``numpy.loadtxt``.
1012: 
1013:         .. versionadded:: 1.7.0
1014: 
1015: 
1016:     See Also
1017:     --------
1018:     save : Save an array to a binary file in NumPy ``.npy`` format
1019:     savez : Save several arrays into an uncompressed ``.npz`` archive
1020:     savez_compressed : Save several arrays into a compressed ``.npz`` archive
1021: 
1022:     Notes
1023:     -----
1024:     Further explanation of the `fmt` parameter
1025:     (``%[flag]width[.precision]specifier``):
1026: 
1027:     flags:
1028:         ``-`` : left justify
1029: 
1030:         ``+`` : Forces to precede result with + or -.
1031: 
1032:         ``0`` : Left pad the number with zeros instead of space (see width).
1033: 
1034:     width:
1035:         Minimum number of characters to be printed. The value is not truncated
1036:         if it has more characters.
1037: 
1038:     precision:
1039:         - For integer specifiers (eg. ``d,i,o,x``), the minimum number of
1040:           digits.
1041:         - For ``e, E`` and ``f`` specifiers, the number of digits to print
1042:           after the decimal point.
1043:         - For ``g`` and ``G``, the maximum number of significant digits.
1044:         - For ``s``, the maximum number of characters.
1045: 
1046:     specifiers:
1047:         ``c`` : character
1048: 
1049:         ``d`` or ``i`` : signed decimal integer
1050: 
1051:         ``e`` or ``E`` : scientific notation with ``e`` or ``E``.
1052: 
1053:         ``f`` : decimal floating point
1054: 
1055:         ``g,G`` : use the shorter of ``e,E`` or ``f``
1056: 
1057:         ``o`` : signed octal
1058: 
1059:         ``s`` : string of characters
1060: 
1061:         ``u`` : unsigned decimal integer
1062: 
1063:         ``x,X`` : unsigned hexadecimal integer
1064: 
1065:     This explanation of ``fmt`` is not complete, for an exhaustive
1066:     specification see [1]_.
1067: 
1068:     References
1069:     ----------
1070:     .. [1] `Format Specification Mini-Language
1071:            <http://docs.python.org/library/string.html#
1072:            format-specification-mini-language>`_, Python Documentation.
1073: 
1074:     Examples
1075:     --------
1076:     >>> x = y = z = np.arange(0.0,5.0,1.0)
1077:     >>> np.savetxt('test.out', x, delimiter=',')   # X is an array
1078:     >>> np.savetxt('test.out', (x,y,z))   # x,y,z equal sized 1D arrays
1079:     >>> np.savetxt('test.out', x, fmt='%1.4e')   # use exponential notation
1080: 
1081:     '''
1082: 
1083:     # Py3 conversions first
1084:     if isinstance(fmt, bytes):
1085:         fmt = asstr(fmt)
1086:     delimiter = asstr(delimiter)
1087: 
1088:     own_fh = False
1089:     if _is_string_like(fname):
1090:         own_fh = True
1091:         if fname.endswith('.gz'):
1092:             import gzip
1093:             fh = gzip.open(fname, 'wb')
1094:         else:
1095:             if sys.version_info[0] >= 3:
1096:                 fh = open(fname, 'wb')
1097:             else:
1098:                 fh = open(fname, 'w')
1099:     elif hasattr(fname, 'write'):
1100:         fh = fname
1101:     else:
1102:         raise ValueError('fname must be a string or file handle')
1103: 
1104:     try:
1105:         X = np.asarray(X)
1106: 
1107:         # Handle 1-dimensional arrays
1108:         if X.ndim == 1:
1109:             # Common case -- 1d array of numbers
1110:             if X.dtype.names is None:
1111:                 X = np.atleast_2d(X).T
1112:                 ncol = 1
1113: 
1114:             # Complex dtype -- each field indicates a separate column
1115:             else:
1116:                 ncol = len(X.dtype.descr)
1117:         else:
1118:             ncol = X.shape[1]
1119: 
1120:         iscomplex_X = np.iscomplexobj(X)
1121:         # `fmt` can be a string with multiple insertion points or a
1122:         # list of formats.  E.g. '%10.5f\t%10d' or ('%10.5f', '$10d')
1123:         if type(fmt) in (list, tuple):
1124:             if len(fmt) != ncol:
1125:                 raise AttributeError('fmt has wrong shape.  %s' % str(fmt))
1126:             format = asstr(delimiter).join(map(asstr, fmt))
1127:         elif isinstance(fmt, str):
1128:             n_fmt_chars = fmt.count('%')
1129:             error = ValueError('fmt has wrong number of %% formats:  %s' % fmt)
1130:             if n_fmt_chars == 1:
1131:                 if iscomplex_X:
1132:                     fmt = [' (%s+%sj)' % (fmt, fmt), ] * ncol
1133:                 else:
1134:                     fmt = [fmt, ] * ncol
1135:                 format = delimiter.join(fmt)
1136:             elif iscomplex_X and n_fmt_chars != (2 * ncol):
1137:                 raise error
1138:             elif ((not iscomplex_X) and n_fmt_chars != ncol):
1139:                 raise error
1140:             else:
1141:                 format = fmt
1142:         else:
1143:             raise ValueError('invalid fmt: %r' % (fmt,))
1144: 
1145:         if len(header) > 0:
1146:             header = header.replace('\n', '\n' + comments)
1147:             fh.write(asbytes(comments + header + newline))
1148:         if iscomplex_X:
1149:             for row in X:
1150:                 row2 = []
1151:                 for number in row:
1152:                     row2.append(number.real)
1153:                     row2.append(number.imag)
1154:                 fh.write(asbytes(format % tuple(row2) + newline))
1155:         else:
1156:             for row in X:
1157:                 try:
1158:                     fh.write(asbytes(format % tuple(row) + newline))
1159:                 except TypeError:
1160:                     raise TypeError("Mismatch between array dtype ('%s') and "
1161:                                     "format specifier ('%s')"
1162:                                     % (str(X.dtype), format))
1163:         if len(footer) > 0:
1164:             footer = footer.replace('\n', '\n' + comments)
1165:             fh.write(asbytes(comments + footer + newline))
1166:     finally:
1167:         if own_fh:
1168:             fh.close()
1169: 
1170: 
1171: def fromregex(file, regexp, dtype):
1172:     '''
1173:     Construct an array from a text file, using regular expression parsing.
1174: 
1175:     The returned array is always a structured array, and is constructed from
1176:     all matches of the regular expression in the file. Groups in the regular
1177:     expression are converted to fields of the structured array.
1178: 
1179:     Parameters
1180:     ----------
1181:     file : str or file
1182:         File name or file object to read.
1183:     regexp : str or regexp
1184:         Regular expression used to parse the file.
1185:         Groups in the regular expression correspond to fields in the dtype.
1186:     dtype : dtype or list of dtypes
1187:         Dtype for the structured array.
1188: 
1189:     Returns
1190:     -------
1191:     output : ndarray
1192:         The output array, containing the part of the content of `file` that
1193:         was matched by `regexp`. `output` is always a structured array.
1194: 
1195:     Raises
1196:     ------
1197:     TypeError
1198:         When `dtype` is not a valid dtype for a structured array.
1199: 
1200:     See Also
1201:     --------
1202:     fromstring, loadtxt
1203: 
1204:     Notes
1205:     -----
1206:     Dtypes for structured arrays can be specified in several forms, but all
1207:     forms specify at least the data type and field name. For details see
1208:     `doc.structured_arrays`.
1209: 
1210:     Examples
1211:     --------
1212:     >>> f = open('test.dat', 'w')
1213:     >>> f.write("1312 foo\\n1534  bar\\n444   qux")
1214:     >>> f.close()
1215: 
1216:     >>> regexp = r"(\\d+)\\s+(...)"  # match [digits, whitespace, anything]
1217:     >>> output = np.fromregex('test.dat', regexp,
1218:     ...                       [('num', np.int64), ('key', 'S3')])
1219:     >>> output
1220:     array([(1312L, 'foo'), (1534L, 'bar'), (444L, 'qux')],
1221:           dtype=[('num', '<i8'), ('key', '|S3')])
1222:     >>> output['num']
1223:     array([1312, 1534,  444], dtype=int64)
1224: 
1225:     '''
1226:     own_fh = False
1227:     if not hasattr(file, "read"):
1228:         file = open(file, 'rb')
1229:         own_fh = True
1230: 
1231:     try:
1232:         if not hasattr(regexp, 'match'):
1233:             regexp = re.compile(asbytes(regexp))
1234:         if not isinstance(dtype, np.dtype):
1235:             dtype = np.dtype(dtype)
1236: 
1237:         seq = regexp.findall(file.read())
1238:         if seq and not isinstance(seq[0], tuple):
1239:             # Only one group is in the regexp.
1240:             # Create the new array as a single data-type and then
1241:             #   re-interpret as a single-field structured array.
1242:             newdtype = np.dtype(dtype[dtype.names[0]])
1243:             output = np.array(seq, dtype=newdtype)
1244:             output.dtype = dtype
1245:         else:
1246:             output = np.array(seq, dtype=dtype)
1247: 
1248:         return output
1249:     finally:
1250:         if own_fh:
1251:             file.close()
1252: 
1253: 
1254: #####--------------------------------------------------------------------------
1255: #---- --- ASCII functions ---
1256: #####--------------------------------------------------------------------------
1257: 
1258: 
1259: def genfromtxt(fname, dtype=float, comments='#', delimiter=None,
1260:                skip_header=0, skip_footer=0, converters=None,
1261:                missing_values=None, filling_values=None, usecols=None,
1262:                names=None, excludelist=None, deletechars=None,
1263:                replace_space='_', autostrip=False, case_sensitive=True,
1264:                defaultfmt="f%i", unpack=None, usemask=False, loose=True,
1265:                invalid_raise=True, max_rows=None):
1266:     '''
1267:     Load data from a text file, with missing values handled as specified.
1268: 
1269:     Each line past the first `skip_header` lines is split at the `delimiter`
1270:     character, and characters following the `comments` character are discarded.
1271: 
1272:     Parameters
1273:     ----------
1274:     fname : file, str, list of str, generator
1275:         File, filename, list, or generator to read.  If the filename
1276:         extension is `.gz` or `.bz2`, the file is first decompressed. Mote
1277:         that generators must return byte strings in Python 3k.  The strings
1278:         in a list or produced by a generator are treated as lines.
1279:     dtype : dtype, optional
1280:         Data type of the resulting array.
1281:         If None, the dtypes will be determined by the contents of each
1282:         column, individually.
1283:     comments : str, optional
1284:         The character used to indicate the start of a comment.
1285:         All the characters occurring on a line after a comment are discarded
1286:     delimiter : str, int, or sequence, optional
1287:         The string used to separate values.  By default, any consecutive
1288:         whitespaces act as delimiter.  An integer or sequence of integers
1289:         can also be provided as width(s) of each field.
1290:     skiprows : int, optional
1291:         `skiprows` was removed in numpy 1.10. Please use `skip_header` instead.
1292:     skip_header : int, optional
1293:         The number of lines to skip at the beginning of the file.
1294:     skip_footer : int, optional
1295:         The number of lines to skip at the end of the file.
1296:     converters : variable, optional
1297:         The set of functions that convert the data of a column to a value.
1298:         The converters can also be used to provide a default value
1299:         for missing data: ``converters = {3: lambda s: float(s or 0)}``.
1300:     missing : variable, optional
1301:         `missing` was removed in numpy 1.10. Please use `missing_values`
1302:         instead.
1303:     missing_values : variable, optional
1304:         The set of strings corresponding to missing data.
1305:     filling_values : variable, optional
1306:         The set of values to be used as default when the data are missing.
1307:     usecols : sequence, optional
1308:         Which columns to read, with 0 being the first.  For example,
1309:         ``usecols = (1, 4, 5)`` will extract the 2nd, 5th and 6th columns.
1310:     names : {None, True, str, sequence}, optional
1311:         If `names` is True, the field names are read from the first valid line
1312:         after the first `skip_header` lines.
1313:         If `names` is a sequence or a single-string of comma-separated names,
1314:         the names will be used to define the field names in a structured dtype.
1315:         If `names` is None, the names of the dtype fields will be used, if any.
1316:     excludelist : sequence, optional
1317:         A list of names to exclude. This list is appended to the default list
1318:         ['return','file','print']. Excluded names are appended an underscore:
1319:         for example, `file` would become `file_`.
1320:     deletechars : str, optional
1321:         A string combining invalid characters that must be deleted from the
1322:         names.
1323:     defaultfmt : str, optional
1324:         A format used to define default field names, such as "f%i" or "f_%02i".
1325:     autostrip : bool, optional
1326:         Whether to automatically strip white spaces from the variables.
1327:     replace_space : char, optional
1328:         Character(s) used in replacement of white spaces in the variables
1329:         names. By default, use a '_'.
1330:     case_sensitive : {True, False, 'upper', 'lower'}, optional
1331:         If True, field names are case sensitive.
1332:         If False or 'upper', field names are converted to upper case.
1333:         If 'lower', field names are converted to lower case.
1334:     unpack : bool, optional
1335:         If True, the returned array is transposed, so that arguments may be
1336:         unpacked using ``x, y, z = loadtxt(...)``
1337:     usemask : bool, optional
1338:         If True, return a masked array.
1339:         If False, return a regular array.
1340:     loose : bool, optional
1341:         If True, do not raise errors for invalid values.
1342:     invalid_raise : bool, optional
1343:         If True, an exception is raised if an inconsistency is detected in the
1344:         number of columns.
1345:         If False, a warning is emitted and the offending lines are skipped.
1346:     max_rows : int,  optional
1347:         The maximum number of rows to read. Must not be used with skip_footer
1348:         at the same time.  If given, the value must be at least 1. Default is
1349:         to read the entire file.
1350: 
1351:         .. versionadded:: 1.10.0
1352: 
1353:     Returns
1354:     -------
1355:     out : ndarray
1356:         Data read from the text file. If `usemask` is True, this is a
1357:         masked array.
1358: 
1359:     See Also
1360:     --------
1361:     numpy.loadtxt : equivalent function when no data is missing.
1362: 
1363:     Notes
1364:     -----
1365:     * When spaces are used as delimiters, or when no delimiter has been given
1366:       as input, there should not be any missing data between two fields.
1367:     * When the variables are named (either by a flexible dtype or with `names`,
1368:       there must not be any header in the file (else a ValueError
1369:       exception is raised).
1370:     * Individual values are not stripped of spaces by default.
1371:       When using a custom converter, make sure the function does remove spaces.
1372: 
1373:     References
1374:     ----------
1375:     .. [1] Numpy User Guide, section `I/O with Numpy
1376:            <http://docs.scipy.org/doc/numpy/user/basics.io.genfromtxt.html>`_.
1377: 
1378:     Examples
1379:     ---------
1380:     >>> from io import StringIO
1381:     >>> import numpy as np
1382: 
1383:     Comma delimited file with mixed dtype
1384: 
1385:     >>> s = StringIO("1,1.3,abcde")
1386:     >>> data = np.genfromtxt(s, dtype=[('myint','i8'),('myfloat','f8'),
1387:     ... ('mystring','S5')], delimiter=",")
1388:     >>> data
1389:     array((1, 1.3, 'abcde'),
1390:           dtype=[('myint', '<i8'), ('myfloat', '<f8'), ('mystring', '|S5')])
1391: 
1392:     Using dtype = None
1393: 
1394:     >>> s.seek(0) # needed for StringIO example only
1395:     >>> data = np.genfromtxt(s, dtype=None,
1396:     ... names = ['myint','myfloat','mystring'], delimiter=",")
1397:     >>> data
1398:     array((1, 1.3, 'abcde'),
1399:           dtype=[('myint', '<i8'), ('myfloat', '<f8'), ('mystring', '|S5')])
1400: 
1401:     Specifying dtype and names
1402: 
1403:     >>> s.seek(0)
1404:     >>> data = np.genfromtxt(s, dtype="i8,f8,S5",
1405:     ... names=['myint','myfloat','mystring'], delimiter=",")
1406:     >>> data
1407:     array((1, 1.3, 'abcde'),
1408:           dtype=[('myint', '<i8'), ('myfloat', '<f8'), ('mystring', '|S5')])
1409: 
1410:     An example with fixed-width columns
1411: 
1412:     >>> s = StringIO("11.3abcde")
1413:     >>> data = np.genfromtxt(s, dtype=None, names=['intvar','fltvar','strvar'],
1414:     ...     delimiter=[1,3,5])
1415:     >>> data
1416:     array((1, 1.3, 'abcde'),
1417:           dtype=[('intvar', '<i8'), ('fltvar', '<f8'), ('strvar', '|S5')])
1418: 
1419:     '''
1420:     if max_rows is not None:
1421:         if skip_footer:
1422:             raise ValueError(
1423:                     "The keywords 'skip_footer' and 'max_rows' can not be "
1424:                     "specified at the same time.")
1425:         if max_rows < 1:
1426:             raise ValueError("'max_rows' must be at least 1.")
1427: 
1428:     # Py3 data conversions to bytes, for convenience
1429:     if comments is not None:
1430:         comments = asbytes(comments)
1431:     if isinstance(delimiter, unicode):
1432:         delimiter = asbytes(delimiter)
1433:     if isinstance(missing_values, (unicode, list, tuple)):
1434:         missing_values = asbytes_nested(missing_values)
1435: 
1436:     #
1437:     if usemask:
1438:         from numpy.ma import MaskedArray, make_mask_descr
1439:     # Check the input dictionary of converters
1440:     user_converters = converters or {}
1441:     if not isinstance(user_converters, dict):
1442:         raise TypeError(
1443:             "The input argument 'converter' should be a valid dictionary "
1444:             "(got '%s' instead)" % type(user_converters))
1445: 
1446:     # Initialize the filehandle, the LineSplitter and the NameValidator
1447:     own_fhd = False
1448:     try:
1449:         if isinstance(fname, basestring):
1450:             if sys.version_info[0] == 2:
1451:                 fhd = iter(np.lib._datasource.open(fname, 'rbU'))
1452:             else:
1453:                 fhd = iter(np.lib._datasource.open(fname, 'rb'))
1454:             own_fhd = True
1455:         else:
1456:             fhd = iter(fname)
1457:     except TypeError:
1458:         raise TypeError(
1459:             "fname must be a string, filehandle, list of strings, "
1460:             "or generator. Got %s instead." % type(fname))
1461: 
1462:     split_line = LineSplitter(delimiter=delimiter, comments=comments,
1463:                               autostrip=autostrip)._handyman
1464:     validate_names = NameValidator(excludelist=excludelist,
1465:                                    deletechars=deletechars,
1466:                                    case_sensitive=case_sensitive,
1467:                                    replace_space=replace_space)
1468: 
1469:     # Skip the first `skip_header` rows
1470:     for i in range(skip_header):
1471:         next(fhd)
1472: 
1473:     # Keep on until we find the first valid values
1474:     first_values = None
1475:     try:
1476:         while not first_values:
1477:             first_line = next(fhd)
1478:             if names is True:
1479:                 if comments in first_line:
1480:                     first_line = (
1481:                         asbytes('').join(first_line.split(comments)[1:]))
1482:             first_values = split_line(first_line)
1483:     except StopIteration:
1484:         # return an empty array if the datafile is empty
1485:         first_line = asbytes('')
1486:         first_values = []
1487:         warnings.warn('genfromtxt: Empty input file: "%s"' % fname)
1488: 
1489:     # Should we take the first values as names ?
1490:     if names is True:
1491:         fval = first_values[0].strip()
1492:         if fval in comments:
1493:             del first_values[0]
1494: 
1495:     # Check the columns to use: make sure `usecols` is a list
1496:     if usecols is not None:
1497:         try:
1498:             usecols = [_.strip() for _ in usecols.split(",")]
1499:         except AttributeError:
1500:             try:
1501:                 usecols = list(usecols)
1502:             except TypeError:
1503:                 usecols = [usecols, ]
1504:     nbcols = len(usecols or first_values)
1505: 
1506:     # Check the names and overwrite the dtype.names if needed
1507:     if names is True:
1508:         names = validate_names([_bytes_to_name(_.strip())
1509:                                 for _ in first_values])
1510:         first_line = asbytes('')
1511:     elif _is_string_like(names):
1512:         names = validate_names([_.strip() for _ in names.split(',')])
1513:     elif names:
1514:         names = validate_names(names)
1515:     # Get the dtype
1516:     if dtype is not None:
1517:         dtype = easy_dtype(dtype, defaultfmt=defaultfmt, names=names,
1518:                            excludelist=excludelist,
1519:                            deletechars=deletechars,
1520:                            case_sensitive=case_sensitive,
1521:                            replace_space=replace_space)
1522:     # Make sure the names is a list (for 2.5)
1523:     if names is not None:
1524:         names = list(names)
1525: 
1526:     if usecols:
1527:         for (i, current) in enumerate(usecols):
1528:             # if usecols is a list of names, convert to a list of indices
1529:             if _is_string_like(current):
1530:                 usecols[i] = names.index(current)
1531:             elif current < 0:
1532:                 usecols[i] = current + len(first_values)
1533:         # If the dtype is not None, make sure we update it
1534:         if (dtype is not None) and (len(dtype) > nbcols):
1535:             descr = dtype.descr
1536:             dtype = np.dtype([descr[_] for _ in usecols])
1537:             names = list(dtype.names)
1538:         # If `names` is not None, update the names
1539:         elif (names is not None) and (len(names) > nbcols):
1540:             names = [names[_] for _ in usecols]
1541:     elif (names is not None) and (dtype is not None):
1542:         names = list(dtype.names)
1543: 
1544:     # Process the missing values ...............................
1545:     # Rename missing_values for convenience
1546:     user_missing_values = missing_values or ()
1547: 
1548:     # Define the list of missing_values (one column: one list)
1549:     missing_values = [list([asbytes('')]) for _ in range(nbcols)]
1550: 
1551:     # We have a dictionary: process it field by field
1552:     if isinstance(user_missing_values, dict):
1553:         # Loop on the items
1554:         for (key, val) in user_missing_values.items():
1555:             # Is the key a string ?
1556:             if _is_string_like(key):
1557:                 try:
1558:                     # Transform it into an integer
1559:                     key = names.index(key)
1560:                 except ValueError:
1561:                     # We couldn't find it: the name must have been dropped
1562:                     continue
1563:             # Redefine the key as needed if it's a column number
1564:             if usecols:
1565:                 try:
1566:                     key = usecols.index(key)
1567:                 except ValueError:
1568:                     pass
1569:             # Transform the value as a list of string
1570:             if isinstance(val, (list, tuple)):
1571:                 val = [str(_) for _ in val]
1572:             else:
1573:                 val = [str(val), ]
1574:             # Add the value(s) to the current list of missing
1575:             if key is None:
1576:                 # None acts as default
1577:                 for miss in missing_values:
1578:                     miss.extend(val)
1579:             else:
1580:                 missing_values[key].extend(val)
1581:     # We have a sequence : each item matches a column
1582:     elif isinstance(user_missing_values, (list, tuple)):
1583:         for (value, entry) in zip(user_missing_values, missing_values):
1584:             value = str(value)
1585:             if value not in entry:
1586:                 entry.append(value)
1587:     # We have a string : apply it to all entries
1588:     elif isinstance(user_missing_values, bytes):
1589:         user_value = user_missing_values.split(asbytes(","))
1590:         for entry in missing_values:
1591:             entry.extend(user_value)
1592:     # We have something else: apply it to all entries
1593:     else:
1594:         for entry in missing_values:
1595:             entry.extend([str(user_missing_values)])
1596: 
1597:     # Process the filling_values ...............................
1598:     # Rename the input for convenience
1599:     user_filling_values = filling_values
1600:     if user_filling_values is None:
1601:         user_filling_values = []
1602:     # Define the default
1603:     filling_values = [None] * nbcols
1604:     # We have a dictionary : update each entry individually
1605:     if isinstance(user_filling_values, dict):
1606:         for (key, val) in user_filling_values.items():
1607:             if _is_string_like(key):
1608:                 try:
1609:                     # Transform it into an integer
1610:                     key = names.index(key)
1611:                 except ValueError:
1612:                     # We couldn't find it: the name must have been dropped,
1613:                     continue
1614:             # Redefine the key if it's a column number and usecols is defined
1615:             if usecols:
1616:                 try:
1617:                     key = usecols.index(key)
1618:                 except ValueError:
1619:                     pass
1620:             # Add the value to the list
1621:             filling_values[key] = val
1622:     # We have a sequence : update on a one-to-one basis
1623:     elif isinstance(user_filling_values, (list, tuple)):
1624:         n = len(user_filling_values)
1625:         if (n <= nbcols):
1626:             filling_values[:n] = user_filling_values
1627:         else:
1628:             filling_values = user_filling_values[:nbcols]
1629:     # We have something else : use it for all entries
1630:     else:
1631:         filling_values = [user_filling_values] * nbcols
1632: 
1633:     # Initialize the converters ................................
1634:     if dtype is None:
1635:         # Note: we can't use a [...]*nbcols, as we would have 3 times the same
1636:         # ... converter, instead of 3 different converters.
1637:         converters = [StringConverter(None, missing_values=miss, default=fill)
1638:                       for (miss, fill) in zip(missing_values, filling_values)]
1639:     else:
1640:         dtype_flat = flatten_dtype(dtype, flatten_base=True)
1641:         # Initialize the converters
1642:         if len(dtype_flat) > 1:
1643:             # Flexible type : get a converter from each dtype
1644:             zipit = zip(dtype_flat, missing_values, filling_values)
1645:             converters = [StringConverter(dt, locked=True,
1646:                                           missing_values=miss, default=fill)
1647:                           for (dt, miss, fill) in zipit]
1648:         else:
1649:             # Set to a default converter (but w/ different missing values)
1650:             zipit = zip(missing_values, filling_values)
1651:             converters = [StringConverter(dtype, locked=True,
1652:                                           missing_values=miss, default=fill)
1653:                           for (miss, fill) in zipit]
1654:     # Update the converters to use the user-defined ones
1655:     uc_update = []
1656:     for (j, conv) in user_converters.items():
1657:         # If the converter is specified by column names, use the index instead
1658:         if _is_string_like(j):
1659:             try:
1660:                 j = names.index(j)
1661:                 i = j
1662:             except ValueError:
1663:                 continue
1664:         elif usecols:
1665:             try:
1666:                 i = usecols.index(j)
1667:             except ValueError:
1668:                 # Unused converter specified
1669:                 continue
1670:         else:
1671:             i = j
1672:         # Find the value to test - first_line is not filtered by usecols:
1673:         if len(first_line):
1674:             testing_value = first_values[j]
1675:         else:
1676:             testing_value = None
1677:         converters[i].update(conv, locked=True,
1678:                              testing_value=testing_value,
1679:                              default=filling_values[i],
1680:                              missing_values=missing_values[i],)
1681:         uc_update.append((i, conv))
1682:     # Make sure we have the corrected keys in user_converters...
1683:     user_converters.update(uc_update)
1684: 
1685:     # Fixme: possible error as following variable never used.
1686:     #miss_chars = [_.missing_values for _ in converters]
1687: 
1688:     # Initialize the output lists ...
1689:     # ... rows
1690:     rows = []
1691:     append_to_rows = rows.append
1692:     # ... masks
1693:     if usemask:
1694:         masks = []
1695:         append_to_masks = masks.append
1696:     # ... invalid
1697:     invalid = []
1698:     append_to_invalid = invalid.append
1699: 
1700:     # Parse each line
1701:     for (i, line) in enumerate(itertools.chain([first_line, ], fhd)):
1702:         values = split_line(line)
1703:         nbvalues = len(values)
1704:         # Skip an empty line
1705:         if nbvalues == 0:
1706:             continue
1707:         if usecols:
1708:             # Select only the columns we need
1709:             try:
1710:                 values = [values[_] for _ in usecols]
1711:             except IndexError:
1712:                 append_to_invalid((i + skip_header + 1, nbvalues))
1713:                 continue
1714:         elif nbvalues != nbcols:
1715:             append_to_invalid((i + skip_header + 1, nbvalues))
1716:             continue
1717:         # Store the values
1718:         append_to_rows(tuple(values))
1719:         if usemask:
1720:             append_to_masks(tuple([v.strip() in m
1721:                                    for (v, m) in zip(values,
1722:                                                      missing_values)]))
1723:         if len(rows) == max_rows:
1724:             break
1725: 
1726:     if own_fhd:
1727:         fhd.close()
1728: 
1729:     # Upgrade the converters (if needed)
1730:     if dtype is None:
1731:         for (i, converter) in enumerate(converters):
1732:             current_column = [itemgetter(i)(_m) for _m in rows]
1733:             try:
1734:                 converter.iterupgrade(current_column)
1735:             except ConverterLockError:
1736:                 errmsg = "Converter #%i is locked and cannot be upgraded: " % i
1737:                 current_column = map(itemgetter(i), rows)
1738:                 for (j, value) in enumerate(current_column):
1739:                     try:
1740:                         converter.upgrade(value)
1741:                     except (ConverterError, ValueError):
1742:                         errmsg += "(occurred line #%i for value '%s')"
1743:                         errmsg %= (j + 1 + skip_header, value)
1744:                         raise ConverterError(errmsg)
1745: 
1746:     # Check that we don't have invalid values
1747:     nbinvalid = len(invalid)
1748:     if nbinvalid > 0:
1749:         nbrows = len(rows) + nbinvalid - skip_footer
1750:         # Construct the error message
1751:         template = "    Line #%%i (got %%i columns instead of %i)" % nbcols
1752:         if skip_footer > 0:
1753:             nbinvalid_skipped = len([_ for _ in invalid
1754:                                      if _[0] > nbrows + skip_header])
1755:             invalid = invalid[:nbinvalid - nbinvalid_skipped]
1756:             skip_footer -= nbinvalid_skipped
1757: #
1758: #            nbrows -= skip_footer
1759: #            errmsg = [template % (i, nb)
1760: #                      for (i, nb) in invalid if i < nbrows]
1761: #        else:
1762:         errmsg = [template % (i, nb)
1763:                   for (i, nb) in invalid]
1764:         if len(errmsg):
1765:             errmsg.insert(0, "Some errors were detected !")
1766:             errmsg = "\n".join(errmsg)
1767:             # Raise an exception ?
1768:             if invalid_raise:
1769:                 raise ValueError(errmsg)
1770:             # Issue a warning ?
1771:             else:
1772:                 warnings.warn(errmsg, ConversionWarning)
1773: 
1774:     # Strip the last skip_footer data
1775:     if skip_footer > 0:
1776:         rows = rows[:-skip_footer]
1777:         if usemask:
1778:             masks = masks[:-skip_footer]
1779: 
1780:     # Convert each value according to the converter:
1781:     # We want to modify the list in place to avoid creating a new one...
1782:     if loose:
1783:         rows = list(
1784:             zip(*[[conv._loose_call(_r) for _r in map(itemgetter(i), rows)]
1785:                   for (i, conv) in enumerate(converters)]))
1786:     else:
1787:         rows = list(
1788:             zip(*[[conv._strict_call(_r) for _r in map(itemgetter(i), rows)]
1789:                   for (i, conv) in enumerate(converters)]))
1790: 
1791:     # Reset the dtype
1792:     data = rows
1793:     if dtype is None:
1794:         # Get the dtypes from the types of the converters
1795:         column_types = [conv.type for conv in converters]
1796:         # Find the columns with strings...
1797:         strcolidx = [i for (i, v) in enumerate(column_types)
1798:                      if v in (type('S'), np.string_)]
1799:         # ... and take the largest number of chars.
1800:         for i in strcolidx:
1801:             column_types[i] = "|S%i" % max(len(row[i]) for row in data)
1802:         #
1803:         if names is None:
1804:             # If the dtype is uniform, don't define names, else use ''
1805:             base = set([c.type for c in converters if c._checked])
1806:             if len(base) == 1:
1807:                 (ddtype, mdtype) = (list(base)[0], np.bool)
1808:             else:
1809:                 ddtype = [(defaultfmt % i, dt)
1810:                           for (i, dt) in enumerate(column_types)]
1811:                 if usemask:
1812:                     mdtype = [(defaultfmt % i, np.bool)
1813:                               for (i, dt) in enumerate(column_types)]
1814:         else:
1815:             ddtype = list(zip(names, column_types))
1816:             mdtype = list(zip(names, [np.bool] * len(column_types)))
1817:         output = np.array(data, dtype=ddtype)
1818:         if usemask:
1819:             outputmask = np.array(masks, dtype=mdtype)
1820:     else:
1821:         # Overwrite the initial dtype names if needed
1822:         if names and dtype.names:
1823:             dtype.names = names
1824:         # Case 1. We have a structured type
1825:         if len(dtype_flat) > 1:
1826:             # Nested dtype, eg [('a', int), ('b', [('b0', int), ('b1', 'f4')])]
1827:             # First, create the array using a flattened dtype:
1828:             # [('a', int), ('b1', int), ('b2', float)]
1829:             # Then, view the array using the specified dtype.
1830:             if 'O' in (_.char for _ in dtype_flat):
1831:                 if has_nested_fields(dtype):
1832:                     raise NotImplementedError(
1833:                         "Nested fields involving objects are not supported...")
1834:                 else:
1835:                     output = np.array(data, dtype=dtype)
1836:             else:
1837:                 rows = np.array(data, dtype=[('', _) for _ in dtype_flat])
1838:                 output = rows.view(dtype)
1839:             # Now, process the rowmasks the same way
1840:             if usemask:
1841:                 rowmasks = np.array(
1842:                     masks, dtype=np.dtype([('', np.bool) for t in dtype_flat]))
1843:                 # Construct the new dtype
1844:                 mdtype = make_mask_descr(dtype)
1845:                 outputmask = rowmasks.view(mdtype)
1846:         # Case #2. We have a basic dtype
1847:         else:
1848:             # We used some user-defined converters
1849:             if user_converters:
1850:                 ishomogeneous = True
1851:                 descr = []
1852:                 for i, ttype in enumerate([conv.type for conv in converters]):
1853:                     # Keep the dtype of the current converter
1854:                     if i in user_converters:
1855:                         ishomogeneous &= (ttype == dtype.type)
1856:                         if ttype == np.string_:
1857:                             ttype = "|S%i" % max(len(row[i]) for row in data)
1858:                         descr.append(('', ttype))
1859:                     else:
1860:                         descr.append(('', dtype))
1861:                 # So we changed the dtype ?
1862:                 if not ishomogeneous:
1863:                     # We have more than one field
1864:                     if len(descr) > 1:
1865:                         dtype = np.dtype(descr)
1866:                     # We have only one field: drop the name if not needed.
1867:                     else:
1868:                         dtype = np.dtype(ttype)
1869:             #
1870:             output = np.array(data, dtype)
1871:             if usemask:
1872:                 if dtype.names:
1873:                     mdtype = [(_, np.bool) for _ in dtype.names]
1874:                 else:
1875:                     mdtype = np.bool
1876:                 outputmask = np.array(masks, dtype=mdtype)
1877:     # Try to take care of the missing data we missed
1878:     names = output.dtype.names
1879:     if usemask and names:
1880:         for (name, conv) in zip(names or (), converters):
1881:             missing_values = [conv(_) for _ in conv.missing_values
1882:                               if _ != asbytes('')]
1883:             for mval in missing_values:
1884:                 outputmask[name] |= (output[name] == mval)
1885:     # Construct the final array
1886:     if usemask:
1887:         output = output.view(MaskedArray)
1888:         output._mask = outputmask
1889:     if unpack:
1890:         return output.squeeze().T
1891:     return output.squeeze()
1892: 
1893: 
1894: def ndfromtxt(fname, **kwargs):
1895:     '''
1896:     Load ASCII data stored in a file and return it as a single array.
1897: 
1898:     Parameters
1899:     ----------
1900:     fname, kwargs : For a description of input parameters, see `genfromtxt`.
1901: 
1902:     See Also
1903:     --------
1904:     numpy.genfromtxt : generic function.
1905: 
1906:     '''
1907:     kwargs['usemask'] = False
1908:     return genfromtxt(fname, **kwargs)
1909: 
1910: 
1911: def mafromtxt(fname, **kwargs):
1912:     '''
1913:     Load ASCII data stored in a text file and return a masked array.
1914: 
1915:     Parameters
1916:     ----------
1917:     fname, kwargs : For a description of input parameters, see `genfromtxt`.
1918: 
1919:     See Also
1920:     --------
1921:     numpy.genfromtxt : generic function to load ASCII data.
1922: 
1923:     '''
1924:     kwargs['usemask'] = True
1925:     return genfromtxt(fname, **kwargs)
1926: 
1927: 
1928: def recfromtxt(fname, **kwargs):
1929:     '''
1930:     Load ASCII data from a file and return it in a record array.
1931: 
1932:     If ``usemask=False`` a standard `recarray` is returned,
1933:     if ``usemask=True`` a MaskedRecords array is returned.
1934: 
1935:     Parameters
1936:     ----------
1937:     fname, kwargs : For a description of input parameters, see `genfromtxt`.
1938: 
1939:     See Also
1940:     --------
1941:     numpy.genfromtxt : generic function
1942: 
1943:     Notes
1944:     -----
1945:     By default, `dtype` is None, which means that the data-type of the output
1946:     array will be determined from the data.
1947: 
1948:     '''
1949:     kwargs.setdefault("dtype", None)
1950:     usemask = kwargs.get('usemask', False)
1951:     output = genfromtxt(fname, **kwargs)
1952:     if usemask:
1953:         from numpy.ma.mrecords import MaskedRecords
1954:         output = output.view(MaskedRecords)
1955:     else:
1956:         output = output.view(np.recarray)
1957:     return output
1958: 
1959: 
1960: def recfromcsv(fname, **kwargs):
1961:     '''
1962:     Load ASCII data stored in a comma-separated file.
1963: 
1964:     The returned array is a record array (if ``usemask=False``, see
1965:     `recarray`) or a masked record array (if ``usemask=True``,
1966:     see `ma.mrecords.MaskedRecords`).
1967: 
1968:     Parameters
1969:     ----------
1970:     fname, kwargs : For a description of input parameters, see `genfromtxt`.
1971: 
1972:     See Also
1973:     --------
1974:     numpy.genfromtxt : generic function to load ASCII data.
1975: 
1976:     Notes
1977:     -----
1978:     By default, `dtype` is None, which means that the data-type of the output
1979:     array will be determined from the data.
1980: 
1981:     '''
1982:     # Set default kwargs for genfromtxt as relevant to csv import.
1983:     kwargs.setdefault("case_sensitive", "lower")
1984:     kwargs.setdefault("names", True)
1985:     kwargs.setdefault("delimiter", ",")
1986:     kwargs.setdefault("dtype", None)
1987:     output = genfromtxt(fname, **kwargs)
1988: 
1989:     usemask = kwargs.get("usemask", False)
1990:     if usemask:
1991:         from numpy.ma.mrecords import MaskedRecords
1992:         output = output.view(MaskedRecords)
1993:     else:
1994:         output = output.view(np.recarray)
1995:     return output
1996: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3, 0))

# 'import sys' statement (line 3)
import sys

import_module(stypy.reporting.localization.Localization(__file__, 3, 0), 'sys', sys, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 4, 0))

# 'import os' statement (line 4)
import os

import_module(stypy.reporting.localization.Localization(__file__, 4, 0), 'os', os, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 5, 0))

# 'import re' statement (line 5)
import re

import_module(stypy.reporting.localization.Localization(__file__, 5, 0), 're', re, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 6, 0))

# 'import itertools' statement (line 6)
import itertools

import_module(stypy.reporting.localization.Localization(__file__, 6, 0), 'itertools', itertools, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 7, 0))

# 'import warnings' statement (line 7)
import warnings

import_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'warnings', warnings, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 8, 0))

# 'import weakref' statement (line 8)
import weakref

import_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'weakref', weakref, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 9, 0))

# 'from operator import itemgetter' statement (line 9)
from operator import itemgetter

import_from_module(stypy.reporting.localization.Localization(__file__, 9, 0), 'operator', None, module_type_store, ['itemgetter'], [itemgetter])

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 11, 0))

# 'import numpy' statement (line 11)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/lib/')
import_117145 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'numpy')

if (type(import_117145) is not StypyTypeError):

    if (import_117145 != 'pyd_module'):
        __import__(import_117145)
        sys_modules_117146 = sys.modules[import_117145]
        import_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'np', sys_modules_117146.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 11)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 11, 0), 'numpy', import_117145)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/lib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 12, 0))

# 'from numpy.lib import format' statement (line 12)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/lib/')
import_117147 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'numpy.lib')

if (type(import_117147) is not StypyTypeError):

    if (import_117147 != 'pyd_module'):
        __import__(import_117147)
        sys_modules_117148 = sys.modules[import_117147]
        import_from_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'numpy.lib', sys_modules_117148.module_type_store, module_type_store, ['format'])
        nest_module(stypy.reporting.localization.Localization(__file__, 12, 0), __file__, sys_modules_117148, sys_modules_117148.module_type_store, module_type_store)
    else:
        from numpy.lib import format

        import_from_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'numpy.lib', None, module_type_store, ['format'], [format])

else:
    # Assigning a type to the variable 'numpy.lib' (line 12)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 12, 0), 'numpy.lib', import_117147)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/lib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 13, 0))

# 'from numpy.lib._datasource import DataSource' statement (line 13)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/lib/')
import_117149 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'numpy.lib._datasource')

if (type(import_117149) is not StypyTypeError):

    if (import_117149 != 'pyd_module'):
        __import__(import_117149)
        sys_modules_117150 = sys.modules[import_117149]
        import_from_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'numpy.lib._datasource', sys_modules_117150.module_type_store, module_type_store, ['DataSource'])
        nest_module(stypy.reporting.localization.Localization(__file__, 13, 0), __file__, sys_modules_117150, sys_modules_117150.module_type_store, module_type_store)
    else:
        from numpy.lib._datasource import DataSource

        import_from_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'numpy.lib._datasource', None, module_type_store, ['DataSource'], [DataSource])

else:
    # Assigning a type to the variable 'numpy.lib._datasource' (line 13)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 13, 0), 'numpy.lib._datasource', import_117149)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/lib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 14, 0))

# 'from numpy.core.multiarray import packbits, unpackbits' statement (line 14)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/lib/')
import_117151 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'numpy.core.multiarray')

if (type(import_117151) is not StypyTypeError):

    if (import_117151 != 'pyd_module'):
        __import__(import_117151)
        sys_modules_117152 = sys.modules[import_117151]
        import_from_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'numpy.core.multiarray', sys_modules_117152.module_type_store, module_type_store, ['packbits', 'unpackbits'])
        nest_module(stypy.reporting.localization.Localization(__file__, 14, 0), __file__, sys_modules_117152, sys_modules_117152.module_type_store, module_type_store)
    else:
        from numpy.core.multiarray import packbits, unpackbits

        import_from_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'numpy.core.multiarray', None, module_type_store, ['packbits', 'unpackbits'], [packbits, unpackbits])

else:
    # Assigning a type to the variable 'numpy.core.multiarray' (line 14)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 14, 0), 'numpy.core.multiarray', import_117151)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/lib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 15, 0))

# 'from numpy.lib._iotools import LineSplitter, NameValidator, StringConverter, ConverterError, ConverterLockError, ConversionWarning, _is_string_like, has_nested_fields, flatten_dtype, easy_dtype, _bytes_to_name' statement (line 15)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/lib/')
import_117153 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'numpy.lib._iotools')

if (type(import_117153) is not StypyTypeError):

    if (import_117153 != 'pyd_module'):
        __import__(import_117153)
        sys_modules_117154 = sys.modules[import_117153]
        import_from_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'numpy.lib._iotools', sys_modules_117154.module_type_store, module_type_store, ['LineSplitter', 'NameValidator', 'StringConverter', 'ConverterError', 'ConverterLockError', 'ConversionWarning', '_is_string_like', 'has_nested_fields', 'flatten_dtype', 'easy_dtype', '_bytes_to_name'])
        nest_module(stypy.reporting.localization.Localization(__file__, 15, 0), __file__, sys_modules_117154, sys_modules_117154.module_type_store, module_type_store)
    else:
        from numpy.lib._iotools import LineSplitter, NameValidator, StringConverter, ConverterError, ConverterLockError, ConversionWarning, _is_string_like, has_nested_fields, flatten_dtype, easy_dtype, _bytes_to_name

        import_from_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'numpy.lib._iotools', None, module_type_store, ['LineSplitter', 'NameValidator', 'StringConverter', 'ConverterError', 'ConverterLockError', 'ConversionWarning', '_is_string_like', 'has_nested_fields', 'flatten_dtype', 'easy_dtype', '_bytes_to_name'], [LineSplitter, NameValidator, StringConverter, ConverterError, ConverterLockError, ConversionWarning, _is_string_like, has_nested_fields, flatten_dtype, easy_dtype, _bytes_to_name])

else:
    # Assigning a type to the variable 'numpy.lib._iotools' (line 15)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 15, 0), 'numpy.lib._iotools', import_117153)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/lib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 21, 0))

# 'from numpy.compat import asbytes, asstr, asbytes_nested, bytes, basestring, unicode' statement (line 21)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/lib/')
import_117155 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'numpy.compat')

if (type(import_117155) is not StypyTypeError):

    if (import_117155 != 'pyd_module'):
        __import__(import_117155)
        sys_modules_117156 = sys.modules[import_117155]
        import_from_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'numpy.compat', sys_modules_117156.module_type_store, module_type_store, ['asbytes', 'asstr', 'asbytes_nested', 'bytes', 'basestring', 'unicode'])
        nest_module(stypy.reporting.localization.Localization(__file__, 21, 0), __file__, sys_modules_117156, sys_modules_117156.module_type_store, module_type_store)
    else:
        from numpy.compat import asbytes, asstr, asbytes_nested, bytes, basestring, unicode

        import_from_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'numpy.compat', None, module_type_store, ['asbytes', 'asstr', 'asbytes_nested', 'bytes', 'basestring', 'unicode'], [asbytes, asstr, asbytes_nested, bytes, basestring, unicode])

else:
    # Assigning a type to the variable 'numpy.compat' (line 21)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 21, 0), 'numpy.compat', import_117155)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/lib/')




# Obtaining the type of the subscript
int_117157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 25, 20), 'int')
# Getting the type of 'sys' (line 25)
sys_117158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 25, 3), 'sys')
# Obtaining the member 'version_info' of a type (line 25)
version_info_117159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 25, 3), sys_117158, 'version_info')
# Obtaining the member '__getitem__' of a type (line 25)
getitem___117160 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 25, 3), version_info_117159, '__getitem__')
# Calling the subscript (__getitem__) to obtain the elements type (line 25)
subscript_call_result_117161 = invoke(stypy.reporting.localization.Localization(__file__, 25, 3), getitem___117160, int_117157)

int_117162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 25, 26), 'int')
# Applying the binary operator '>=' (line 25)
result_ge_117163 = python_operator(stypy.reporting.localization.Localization(__file__, 25, 3), '>=', subscript_call_result_117161, int_117162)

# Testing the type of an if condition (line 25)
if_condition_117164 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 25, 0), result_ge_117163)
# Assigning a type to the variable 'if_condition_117164' (line 25)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 25, 0), 'if_condition_117164', if_condition_117164)
# SSA begins for if statement (line 25)
module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 26, 4))

# 'import pickle' statement (line 26)
import pickle

import_module(stypy.reporting.localization.Localization(__file__, 26, 4), 'pickle', pickle, module_type_store)

# SSA branch for the else part of an if statement (line 25)
module_type_store.open_ssa_branch('else')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 28, 4))

# 'import cPickle' statement (line 28)
import cPickle as pickle

import_module(stypy.reporting.localization.Localization(__file__, 28, 4), 'pickle', pickle, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 29, 4))

# 'from future_builtins import map' statement (line 29)
from future_builtins import map

import_from_module(stypy.reporting.localization.Localization(__file__, 29, 4), 'future_builtins', None, module_type_store, ['map'], [map])

# SSA join for if statement (line 25)
module_type_store = module_type_store.join_ssa_context()


# Assigning a Attribute to a Name (line 31):

# Assigning a Attribute to a Name (line 31):
# Getting the type of 'pickle' (line 31)
pickle_117165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 31, 8), 'pickle')
# Obtaining the member 'loads' of a type (line 31)
loads_117166 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 31, 8), pickle_117165, 'loads')
# Assigning a type to the variable 'loads' (line 31)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 31, 0), 'loads', loads_117166)

# Assigning a List to a Name (line 33):

# Assigning a List to a Name (line 33):
__all__ = ['savetxt', 'loadtxt', 'genfromtxt', 'ndfromtxt', 'mafromtxt', 'recfromtxt', 'recfromcsv', 'load', 'loads', 'save', 'savez', 'savez_compressed', 'packbits', 'unpackbits', 'fromregex', 'DataSource']
module_type_store.set_exportable_members(['savetxt', 'loadtxt', 'genfromtxt', 'ndfromtxt', 'mafromtxt', 'recfromtxt', 'recfromcsv', 'load', 'loads', 'save', 'savez', 'savez_compressed', 'packbits', 'unpackbits', 'fromregex', 'DataSource'])

# Obtaining an instance of the builtin type 'list' (line 33)
list_117167 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 33, 10), 'list')
# Adding type elements to the builtin type 'list' instance (line 33)
# Adding element type (line 33)
str_117168 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 4), 'str', 'savetxt')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 33, 10), list_117167, str_117168)
# Adding element type (line 33)
str_117169 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 15), 'str', 'loadtxt')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 33, 10), list_117167, str_117169)
# Adding element type (line 33)
str_117170 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 26), 'str', 'genfromtxt')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 33, 10), list_117167, str_117170)
# Adding element type (line 33)
str_117171 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 40), 'str', 'ndfromtxt')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 33, 10), list_117167, str_117171)
# Adding element type (line 33)
str_117172 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 34, 53), 'str', 'mafromtxt')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 33, 10), list_117167, str_117172)
# Adding element type (line 33)
str_117173 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 35, 4), 'str', 'recfromtxt')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 33, 10), list_117167, str_117173)
# Adding element type (line 33)
str_117174 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 35, 18), 'str', 'recfromcsv')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 33, 10), list_117167, str_117174)
# Adding element type (line 33)
str_117175 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 35, 32), 'str', 'load')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 33, 10), list_117167, str_117175)
# Adding element type (line 33)
str_117176 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 35, 40), 'str', 'loads')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 33, 10), list_117167, str_117176)
# Adding element type (line 33)
str_117177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 35, 49), 'str', 'save')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 33, 10), list_117167, str_117177)
# Adding element type (line 33)
str_117178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 35, 57), 'str', 'savez')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 33, 10), list_117167, str_117178)
# Adding element type (line 33)
str_117179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 36, 4), 'str', 'savez_compressed')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 33, 10), list_117167, str_117179)
# Adding element type (line 33)
str_117180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 36, 24), 'str', 'packbits')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 33, 10), list_117167, str_117180)
# Adding element type (line 33)
str_117181 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 36, 36), 'str', 'unpackbits')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 33, 10), list_117167, str_117181)
# Adding element type (line 33)
str_117182 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 36, 50), 'str', 'fromregex')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 33, 10), list_117167, str_117182)
# Adding element type (line 33)
str_117183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 36, 63), 'str', 'DataSource')
add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 33, 10), list_117167, str_117183)

# Assigning a type to the variable '__all__' (line 33)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 33, 0), '__all__', list_117167)
# Declaration of the 'BagObj' class

class BagObj(object, ):
    str_117184 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 68, (-1)), 'str', '\n    BagObj(obj)\n\n    Convert attribute look-ups to getitems on the object passed in.\n\n    Parameters\n    ----------\n    obj : class instance\n        Object on which attribute look-up is performed.\n\n    Examples\n    --------\n    >>> from numpy.lib.npyio import BagObj as BO\n    >>> class BagDemo(object):\n    ...     def __getitem__(self, key): # An instance of BagObj(BagDemo)\n    ...                                 # will call this method when any\n    ...                                 # attribute look-up is required\n    ...         result = "Doesn\'t matter what you want, "\n    ...         return result + "you\'re gonna get this"\n    ...\n    >>> demo_obj = BagDemo()\n    >>> bagobj = BO(demo_obj)\n    >>> bagobj.hello_there\n    "Doesn\'t matter what you want, you\'re gonna get this"\n    >>> bagobj.I_can_be_anything\n    "Doesn\'t matter what you want, you\'re gonna get this"\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 70, 4, False)
        # Assigning a type to the variable 'self' (line 71)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 71, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BagObj.__init__', ['obj'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['obj'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Call to a Attribute (line 72):
        
        # Assigning a Call to a Attribute (line 72):
        
        # Call to proxy(...): (line 72)
        # Processing the call arguments (line 72)
        # Getting the type of 'obj' (line 72)
        obj_117187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 72, 34), 'obj', False)
        # Processing the call keyword arguments (line 72)
        kwargs_117188 = {}
        # Getting the type of 'weakref' (line 72)
        weakref_117185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 72, 20), 'weakref', False)
        # Obtaining the member 'proxy' of a type (line 72)
        proxy_117186 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 72, 20), weakref_117185, 'proxy')
        # Calling proxy(args, kwargs) (line 72)
        proxy_call_result_117189 = invoke(stypy.reporting.localization.Localization(__file__, 72, 20), proxy_117186, *[obj_117187], **kwargs_117188)
        
        # Getting the type of 'self' (line 72)
        self_117190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 72, 8), 'self')
        # Setting the type of the member '_obj' of a type (line 72)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 72, 8), self_117190, '_obj', proxy_call_result_117189)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __getattribute__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__getattribute__'
        module_type_store = module_type_store.open_function_context('__getattribute__', 74, 4, False)
        # Assigning a type to the variable 'self' (line 75)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 75, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BagObj.__getattribute__.__dict__.__setitem__('stypy_localization', localization)
        BagObj.__getattribute__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BagObj.__getattribute__.__dict__.__setitem__('stypy_type_store', module_type_store)
        BagObj.__getattribute__.__dict__.__setitem__('stypy_function_name', 'BagObj.__getattribute__')
        BagObj.__getattribute__.__dict__.__setitem__('stypy_param_names_list', ['key'])
        BagObj.__getattribute__.__dict__.__setitem__('stypy_varargs_param_name', None)
        BagObj.__getattribute__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BagObj.__getattribute__.__dict__.__setitem__('stypy_call_defaults', defaults)
        BagObj.__getattribute__.__dict__.__setitem__('stypy_call_varargs', varargs)
        BagObj.__getattribute__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BagObj.__getattribute__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BagObj.__getattribute__', ['key'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__getattribute__', localization, ['key'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__getattribute__(...)' code ##################

        
        
        # SSA begins for try-except statement (line 75)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Obtaining the type of the subscript
        # Getting the type of 'key' (line 76)
        key_117191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 76, 57), 'key')
        
        # Call to __getattribute__(...): (line 76)
        # Processing the call arguments (line 76)
        # Getting the type of 'self' (line 76)
        self_117194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 76, 43), 'self', False)
        str_117195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 76, 49), 'str', '_obj')
        # Processing the call keyword arguments (line 76)
        kwargs_117196 = {}
        # Getting the type of 'object' (line 76)
        object_117192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 76, 19), 'object', False)
        # Obtaining the member '__getattribute__' of a type (line 76)
        getattribute___117193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 76, 19), object_117192, '__getattribute__')
        # Calling __getattribute__(args, kwargs) (line 76)
        getattribute___call_result_117197 = invoke(stypy.reporting.localization.Localization(__file__, 76, 19), getattribute___117193, *[self_117194, str_117195], **kwargs_117196)
        
        # Obtaining the member '__getitem__' of a type (line 76)
        getitem___117198 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 76, 19), getattribute___call_result_117197, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 76)
        subscript_call_result_117199 = invoke(stypy.reporting.localization.Localization(__file__, 76, 19), getitem___117198, key_117191)
        
        # Assigning a type to the variable 'stypy_return_type' (line 76)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 76, 12), 'stypy_return_type', subscript_call_result_117199)
        # SSA branch for the except part of a try statement (line 75)
        # SSA branch for the except 'KeyError' branch of a try statement (line 75)
        module_type_store.open_ssa_branch('except')
        
        # Call to AttributeError(...): (line 78)
        # Processing the call arguments (line 78)
        # Getting the type of 'key' (line 78)
        key_117201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 78, 33), 'key', False)
        # Processing the call keyword arguments (line 78)
        kwargs_117202 = {}
        # Getting the type of 'AttributeError' (line 78)
        AttributeError_117200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 78, 18), 'AttributeError', False)
        # Calling AttributeError(args, kwargs) (line 78)
        AttributeError_call_result_117203 = invoke(stypy.reporting.localization.Localization(__file__, 78, 18), AttributeError_117200, *[key_117201], **kwargs_117202)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 78, 12), AttributeError_call_result_117203, 'raise parameter', BaseException)
        # SSA join for try-except statement (line 75)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__getattribute__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__getattribute__' in the type store
        # Getting the type of 'stypy_return_type' (line 74)
        stypy_return_type_117204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 74, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_117204)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__getattribute__'
        return stypy_return_type_117204


    @norecursion
    def __dir__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__dir__'
        module_type_store = module_type_store.open_function_context('__dir__', 80, 4, False)
        # Assigning a type to the variable 'self' (line 81)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 81, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BagObj.__dir__.__dict__.__setitem__('stypy_localization', localization)
        BagObj.__dir__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BagObj.__dir__.__dict__.__setitem__('stypy_type_store', module_type_store)
        BagObj.__dir__.__dict__.__setitem__('stypy_function_name', 'BagObj.__dir__')
        BagObj.__dir__.__dict__.__setitem__('stypy_param_names_list', [])
        BagObj.__dir__.__dict__.__setitem__('stypy_varargs_param_name', None)
        BagObj.__dir__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BagObj.__dir__.__dict__.__setitem__('stypy_call_defaults', defaults)
        BagObj.__dir__.__dict__.__setitem__('stypy_call_varargs', varargs)
        BagObj.__dir__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BagObj.__dir__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BagObj.__dir__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__dir__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__dir__(...)' code ##################

        str_117205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 85, (-1)), 'str', '\n        Enables dir(bagobj) to list the files in an NpzFile.\n\n        This also enables tab-completion in an interpreter or IPython.\n        ')
        
        # Call to keys(...): (line 86)
        # Processing the call keyword arguments (line 86)
        kwargs_117213 = {}
        
        # Call to __getattribute__(...): (line 86)
        # Processing the call arguments (line 86)
        # Getting the type of 'self' (line 86)
        self_117208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 86, 39), 'self', False)
        str_117209 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 86, 45), 'str', '_obj')
        # Processing the call keyword arguments (line 86)
        kwargs_117210 = {}
        # Getting the type of 'object' (line 86)
        object_117206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 86, 15), 'object', False)
        # Obtaining the member '__getattribute__' of a type (line 86)
        getattribute___117207 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 86, 15), object_117206, '__getattribute__')
        # Calling __getattribute__(args, kwargs) (line 86)
        getattribute___call_result_117211 = invoke(stypy.reporting.localization.Localization(__file__, 86, 15), getattribute___117207, *[self_117208, str_117209], **kwargs_117210)
        
        # Obtaining the member 'keys' of a type (line 86)
        keys_117212 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 86, 15), getattribute___call_result_117211, 'keys')
        # Calling keys(args, kwargs) (line 86)
        keys_call_result_117214 = invoke(stypy.reporting.localization.Localization(__file__, 86, 15), keys_117212, *[], **kwargs_117213)
        
        # Assigning a type to the variable 'stypy_return_type' (line 86)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 86, 8), 'stypy_return_type', keys_call_result_117214)
        
        # ################# End of '__dir__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__dir__' in the type store
        # Getting the type of 'stypy_return_type' (line 80)
        stypy_return_type_117215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 80, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_117215)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__dir__'
        return stypy_return_type_117215


# Assigning a type to the variable 'BagObj' (line 40)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 40, 0), 'BagObj', BagObj)

@norecursion
def zipfile_factory(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'zipfile_factory'
    module_type_store = module_type_store.open_function_context('zipfile_factory', 89, 0, False)
    
    # Passed parameters checking function
    zipfile_factory.stypy_localization = localization
    zipfile_factory.stypy_type_of_self = None
    zipfile_factory.stypy_type_store = module_type_store
    zipfile_factory.stypy_function_name = 'zipfile_factory'
    zipfile_factory.stypy_param_names_list = []
    zipfile_factory.stypy_varargs_param_name = 'args'
    zipfile_factory.stypy_kwargs_param_name = 'kwargs'
    zipfile_factory.stypy_call_defaults = defaults
    zipfile_factory.stypy_call_varargs = varargs
    zipfile_factory.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'zipfile_factory', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'zipfile_factory', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'zipfile_factory(...)' code ##################

    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 90, 4))
    
    # 'import zipfile' statement (line 90)
    import zipfile

    import_module(stypy.reporting.localization.Localization(__file__, 90, 4), 'zipfile', zipfile, module_type_store)
    
    
    # Assigning a Name to a Subscript (line 91):
    
    # Assigning a Name to a Subscript (line 91):
    # Getting the type of 'True' (line 91)
    True_117216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 91, 27), 'True')
    # Getting the type of 'kwargs' (line 91)
    kwargs_117217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 91, 4), 'kwargs')
    str_117218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 91, 11), 'str', 'allowZip64')
    # Storing an element on a container (line 91)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 91, 4), kwargs_117217, (str_117218, True_117216))
    
    # Call to ZipFile(...): (line 92)
    # Getting the type of 'args' (line 92)
    args_117221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 92, 28), 'args', False)
    # Processing the call keyword arguments (line 92)
    # Getting the type of 'kwargs' (line 92)
    kwargs_117222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 92, 36), 'kwargs', False)
    kwargs_117223 = {'kwargs_117222': kwargs_117222}
    # Getting the type of 'zipfile' (line 92)
    zipfile_117219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 92, 11), 'zipfile', False)
    # Obtaining the member 'ZipFile' of a type (line 92)
    ZipFile_117220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 92, 11), zipfile_117219, 'ZipFile')
    # Calling ZipFile(args, kwargs) (line 92)
    ZipFile_call_result_117224 = invoke(stypy.reporting.localization.Localization(__file__, 92, 11), ZipFile_117220, *[args_117221], **kwargs_117223)
    
    # Assigning a type to the variable 'stypy_return_type' (line 92)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 92, 4), 'stypy_return_type', ZipFile_call_result_117224)
    
    # ################# End of 'zipfile_factory(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'zipfile_factory' in the type store
    # Getting the type of 'stypy_return_type' (line 89)
    stypy_return_type_117225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 89, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_117225)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'zipfile_factory'
    return stypy_return_type_117225

# Assigning a type to the variable 'zipfile_factory' (line 89)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 89, 0), 'zipfile_factory', zipfile_factory)
# Declaration of the 'NpzFile' class

class NpzFile(object, ):
    str_117226 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 156, (-1)), 'str', "\n    NpzFile(fid)\n\n    A dictionary-like object with lazy-loading of files in the zipped\n    archive provided on construction.\n\n    `NpzFile` is used to load files in the NumPy ``.npz`` data archive\n    format. It assumes that files in the archive have a ``.npy`` extension,\n    other files are ignored.\n\n    The arrays and file strings are lazily loaded on either\n    getitem access using ``obj['key']`` or attribute lookup using\n    ``obj.f.key``. A list of all files (without ``.npy`` extensions) can\n    be obtained with ``obj.files`` and the ZipFile object itself using\n    ``obj.zip``.\n\n    Attributes\n    ----------\n    files : list of str\n        List of all files in the archive with a ``.npy`` extension.\n    zip : ZipFile instance\n        The ZipFile object initialized with the zipped archive.\n    f : BagObj instance\n        An object on which attribute can be performed as an alternative\n        to getitem access on the `NpzFile` instance itself.\n    allow_pickle : bool, optional\n        Allow loading pickled data. Default: True\n    pickle_kwargs : dict, optional\n        Additional keyword arguments to pass on to pickle.load.\n        These are only useful when loading object arrays saved on\n        Python 2 when using Python 3.\n\n    Parameters\n    ----------\n    fid : file or str\n        The zipped archive to open. This is either a file-like object\n        or a string containing the path to the archive.\n    own_fid : bool, optional\n        Whether NpzFile should close the file handle.\n        Requires that `fid` is a file-like object.\n\n    Examples\n    --------\n    >>> from tempfile import TemporaryFile\n    >>> outfile = TemporaryFile()\n    >>> x = np.arange(10)\n    >>> y = np.sin(x)\n    >>> np.savez(outfile, x=x, y=y)\n    >>> outfile.seek(0)\n\n    >>> npz = np.load(outfile)\n    >>> isinstance(npz, np.lib.io.NpzFile)\n    True\n    >>> npz.files\n    ['y', 'x']\n    >>> npz['x']  # getitem access\n    array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n    >>> npz.f.x  # attribute lookup\n    array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n    ")

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 158)
        False_117227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 36), 'False')
        # Getting the type of 'True' (line 158)
        True_117228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 56), 'True')
        # Getting the type of 'None' (line 159)
        None_117229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 31), 'None')
        defaults = [False_117227, True_117228, None_117229]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 158, 4, False)
        # Assigning a type to the variable 'self' (line 159)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 159, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NpzFile.__init__', ['fid', 'own_fid', 'allow_pickle', 'pickle_kwargs'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['fid', 'own_fid', 'allow_pickle', 'pickle_kwargs'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Assigning a Call to a Name (line 162):
        
        # Assigning a Call to a Name (line 162):
        
        # Call to zipfile_factory(...): (line 162)
        # Processing the call arguments (line 162)
        # Getting the type of 'fid' (line 162)
        fid_117231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 31), 'fid', False)
        # Processing the call keyword arguments (line 162)
        kwargs_117232 = {}
        # Getting the type of 'zipfile_factory' (line 162)
        zipfile_factory_117230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 15), 'zipfile_factory', False)
        # Calling zipfile_factory(args, kwargs) (line 162)
        zipfile_factory_call_result_117233 = invoke(stypy.reporting.localization.Localization(__file__, 162, 15), zipfile_factory_117230, *[fid_117231], **kwargs_117232)
        
        # Assigning a type to the variable '_zip' (line 162)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 162, 8), '_zip', zipfile_factory_call_result_117233)
        
        # Assigning a Call to a Attribute (line 163):
        
        # Assigning a Call to a Attribute (line 163):
        
        # Call to namelist(...): (line 163)
        # Processing the call keyword arguments (line 163)
        kwargs_117236 = {}
        # Getting the type of '_zip' (line 163)
        _zip_117234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 163, 22), '_zip', False)
        # Obtaining the member 'namelist' of a type (line 163)
        namelist_117235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 163, 22), _zip_117234, 'namelist')
        # Calling namelist(args, kwargs) (line 163)
        namelist_call_result_117237 = invoke(stypy.reporting.localization.Localization(__file__, 163, 22), namelist_117235, *[], **kwargs_117236)
        
        # Getting the type of 'self' (line 163)
        self_117238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 163, 8), 'self')
        # Setting the type of the member '_files' of a type (line 163)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 163, 8), self_117238, '_files', namelist_call_result_117237)
        
        # Assigning a List to a Attribute (line 164):
        
        # Assigning a List to a Attribute (line 164):
        
        # Obtaining an instance of the builtin type 'list' (line 164)
        list_117239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 164, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 164)
        
        # Getting the type of 'self' (line 164)
        self_117240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 8), 'self')
        # Setting the type of the member 'files' of a type (line 164)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 164, 8), self_117240, 'files', list_117239)
        
        # Assigning a Name to a Attribute (line 165):
        
        # Assigning a Name to a Attribute (line 165):
        # Getting the type of 'allow_pickle' (line 165)
        allow_pickle_117241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 28), 'allow_pickle')
        # Getting the type of 'self' (line 165)
        self_117242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 8), 'self')
        # Setting the type of the member 'allow_pickle' of a type (line 165)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 165, 8), self_117242, 'allow_pickle', allow_pickle_117241)
        
        # Assigning a Name to a Attribute (line 166):
        
        # Assigning a Name to a Attribute (line 166):
        # Getting the type of 'pickle_kwargs' (line 166)
        pickle_kwargs_117243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 29), 'pickle_kwargs')
        # Getting the type of 'self' (line 166)
        self_117244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 8), 'self')
        # Setting the type of the member 'pickle_kwargs' of a type (line 166)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 166, 8), self_117244, 'pickle_kwargs', pickle_kwargs_117243)
        
        # Getting the type of 'self' (line 167)
        self_117245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 167, 17), 'self')
        # Obtaining the member '_files' of a type (line 167)
        _files_117246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 167, 17), self_117245, '_files')
        # Testing the type of a for loop iterable (line 167)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 167, 8), _files_117246)
        # Getting the type of the for loop variable (line 167)
        for_loop_var_117247 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 167, 8), _files_117246)
        # Assigning a type to the variable 'x' (line 167)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 167, 8), 'x', for_loop_var_117247)
        # SSA begins for a for statement (line 167)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to endswith(...): (line 168)
        # Processing the call arguments (line 168)
        str_117250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 168, 26), 'str', '.npy')
        # Processing the call keyword arguments (line 168)
        kwargs_117251 = {}
        # Getting the type of 'x' (line 168)
        x_117248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 15), 'x', False)
        # Obtaining the member 'endswith' of a type (line 168)
        endswith_117249 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 168, 15), x_117248, 'endswith')
        # Calling endswith(args, kwargs) (line 168)
        endswith_call_result_117252 = invoke(stypy.reporting.localization.Localization(__file__, 168, 15), endswith_117249, *[str_117250], **kwargs_117251)
        
        # Testing the type of an if condition (line 168)
        if_condition_117253 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 168, 12), endswith_call_result_117252)
        # Assigning a type to the variable 'if_condition_117253' (line 168)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 168, 12), 'if_condition_117253', if_condition_117253)
        # SSA begins for if statement (line 168)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 169)
        # Processing the call arguments (line 169)
        
        # Obtaining the type of the subscript
        int_117257 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 169, 37), 'int')
        slice_117258 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 169, 34), None, int_117257, None)
        # Getting the type of 'x' (line 169)
        x_117259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 34), 'x', False)
        # Obtaining the member '__getitem__' of a type (line 169)
        getitem___117260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 169, 34), x_117259, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 169)
        subscript_call_result_117261 = invoke(stypy.reporting.localization.Localization(__file__, 169, 34), getitem___117260, slice_117258)
        
        # Processing the call keyword arguments (line 169)
        kwargs_117262 = {}
        # Getting the type of 'self' (line 169)
        self_117254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 16), 'self', False)
        # Obtaining the member 'files' of a type (line 169)
        files_117255 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 169, 16), self_117254, 'files')
        # Obtaining the member 'append' of a type (line 169)
        append_117256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 169, 16), files_117255, 'append')
        # Calling append(args, kwargs) (line 169)
        append_call_result_117263 = invoke(stypy.reporting.localization.Localization(__file__, 169, 16), append_117256, *[subscript_call_result_117261], **kwargs_117262)
        
        # SSA branch for the else part of an if statement (line 168)
        module_type_store.open_ssa_branch('else')
        
        # Call to append(...): (line 171)
        # Processing the call arguments (line 171)
        # Getting the type of 'x' (line 171)
        x_117267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 34), 'x', False)
        # Processing the call keyword arguments (line 171)
        kwargs_117268 = {}
        # Getting the type of 'self' (line 171)
        self_117264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 16), 'self', False)
        # Obtaining the member 'files' of a type (line 171)
        files_117265 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 171, 16), self_117264, 'files')
        # Obtaining the member 'append' of a type (line 171)
        append_117266 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 171, 16), files_117265, 'append')
        # Calling append(args, kwargs) (line 171)
        append_call_result_117269 = invoke(stypy.reporting.localization.Localization(__file__, 171, 16), append_117266, *[x_117267], **kwargs_117268)
        
        # SSA join for if statement (line 168)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 172):
        
        # Assigning a Name to a Attribute (line 172):
        # Getting the type of '_zip' (line 172)
        _zip_117270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 19), '_zip')
        # Getting the type of 'self' (line 172)
        self_117271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 8), 'self')
        # Setting the type of the member 'zip' of a type (line 172)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 172, 8), self_117271, 'zip', _zip_117270)
        
        # Assigning a Call to a Attribute (line 173):
        
        # Assigning a Call to a Attribute (line 173):
        
        # Call to BagObj(...): (line 173)
        # Processing the call arguments (line 173)
        # Getting the type of 'self' (line 173)
        self_117273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 24), 'self', False)
        # Processing the call keyword arguments (line 173)
        kwargs_117274 = {}
        # Getting the type of 'BagObj' (line 173)
        BagObj_117272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 17), 'BagObj', False)
        # Calling BagObj(args, kwargs) (line 173)
        BagObj_call_result_117275 = invoke(stypy.reporting.localization.Localization(__file__, 173, 17), BagObj_117272, *[self_117273], **kwargs_117274)
        
        # Getting the type of 'self' (line 173)
        self_117276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 8), 'self')
        # Setting the type of the member 'f' of a type (line 173)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 173, 8), self_117276, 'f', BagObj_call_result_117275)
        
        # Getting the type of 'own_fid' (line 174)
        own_fid_117277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 174, 11), 'own_fid')
        # Testing the type of an if condition (line 174)
        if_condition_117278 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 174, 8), own_fid_117277)
        # Assigning a type to the variable 'if_condition_117278' (line 174)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 174, 8), 'if_condition_117278', if_condition_117278)
        # SSA begins for if statement (line 174)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 175):
        
        # Assigning a Name to a Attribute (line 175):
        # Getting the type of 'fid' (line 175)
        fid_117279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 23), 'fid')
        # Getting the type of 'self' (line 175)
        self_117280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 12), 'self')
        # Setting the type of the member 'fid' of a type (line 175)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 175, 12), self_117280, 'fid', fid_117279)
        # SSA branch for the else part of an if statement (line 174)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Attribute (line 177):
        
        # Assigning a Name to a Attribute (line 177):
        # Getting the type of 'None' (line 177)
        None_117281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 177, 23), 'None')
        # Getting the type of 'self' (line 177)
        self_117282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 177, 12), 'self')
        # Setting the type of the member 'fid' of a type (line 177)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 177, 12), self_117282, 'fid', None_117281)
        # SSA join for if statement (line 174)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __enter__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__enter__'
        module_type_store = module_type_store.open_function_context('__enter__', 179, 4, False)
        # Assigning a type to the variable 'self' (line 180)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 180, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NpzFile.__enter__.__dict__.__setitem__('stypy_localization', localization)
        NpzFile.__enter__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NpzFile.__enter__.__dict__.__setitem__('stypy_type_store', module_type_store)
        NpzFile.__enter__.__dict__.__setitem__('stypy_function_name', 'NpzFile.__enter__')
        NpzFile.__enter__.__dict__.__setitem__('stypy_param_names_list', [])
        NpzFile.__enter__.__dict__.__setitem__('stypy_varargs_param_name', None)
        NpzFile.__enter__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NpzFile.__enter__.__dict__.__setitem__('stypy_call_defaults', defaults)
        NpzFile.__enter__.__dict__.__setitem__('stypy_call_varargs', varargs)
        NpzFile.__enter__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NpzFile.__enter__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NpzFile.__enter__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__enter__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__enter__(...)' code ##################

        # Getting the type of 'self' (line 180)
        self_117283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 180, 15), 'self')
        # Assigning a type to the variable 'stypy_return_type' (line 180)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 180, 8), 'stypy_return_type', self_117283)
        
        # ################# End of '__enter__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__enter__' in the type store
        # Getting the type of 'stypy_return_type' (line 179)
        stypy_return_type_117284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 179, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_117284)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__enter__'
        return stypy_return_type_117284


    @norecursion
    def __exit__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__exit__'
        module_type_store = module_type_store.open_function_context('__exit__', 182, 4, False)
        # Assigning a type to the variable 'self' (line 183)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 183, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NpzFile.__exit__.__dict__.__setitem__('stypy_localization', localization)
        NpzFile.__exit__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NpzFile.__exit__.__dict__.__setitem__('stypy_type_store', module_type_store)
        NpzFile.__exit__.__dict__.__setitem__('stypy_function_name', 'NpzFile.__exit__')
        NpzFile.__exit__.__dict__.__setitem__('stypy_param_names_list', ['exc_type', 'exc_value', 'traceback'])
        NpzFile.__exit__.__dict__.__setitem__('stypy_varargs_param_name', None)
        NpzFile.__exit__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NpzFile.__exit__.__dict__.__setitem__('stypy_call_defaults', defaults)
        NpzFile.__exit__.__dict__.__setitem__('stypy_call_varargs', varargs)
        NpzFile.__exit__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NpzFile.__exit__.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NpzFile.__exit__', ['exc_type', 'exc_value', 'traceback'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__exit__', localization, ['exc_type', 'exc_value', 'traceback'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__exit__(...)' code ##################

        
        # Call to close(...): (line 183)
        # Processing the call keyword arguments (line 183)
        kwargs_117287 = {}
        # Getting the type of 'self' (line 183)
        self_117285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 8), 'self', False)
        # Obtaining the member 'close' of a type (line 183)
        close_117286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 183, 8), self_117285, 'close')
        # Calling close(args, kwargs) (line 183)
        close_call_result_117288 = invoke(stypy.reporting.localization.Localization(__file__, 183, 8), close_117286, *[], **kwargs_117287)
        
        
        # ################# End of '__exit__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__exit__' in the type store
        # Getting the type of 'stypy_return_type' (line 182)
        stypy_return_type_117289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 182, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_117289)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__exit__'
        return stypy_return_type_117289


    @norecursion
    def close(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'close'
        module_type_store = module_type_store.open_function_context('close', 185, 4, False)
        # Assigning a type to the variable 'self' (line 186)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 186, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NpzFile.close.__dict__.__setitem__('stypy_localization', localization)
        NpzFile.close.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NpzFile.close.__dict__.__setitem__('stypy_type_store', module_type_store)
        NpzFile.close.__dict__.__setitem__('stypy_function_name', 'NpzFile.close')
        NpzFile.close.__dict__.__setitem__('stypy_param_names_list', [])
        NpzFile.close.__dict__.__setitem__('stypy_varargs_param_name', None)
        NpzFile.close.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NpzFile.close.__dict__.__setitem__('stypy_call_defaults', defaults)
        NpzFile.close.__dict__.__setitem__('stypy_call_varargs', varargs)
        NpzFile.close.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NpzFile.close.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NpzFile.close', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'close', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'close(...)' code ##################

        str_117290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, (-1)), 'str', '\n        Close the file.\n\n        ')
        
        
        # Getting the type of 'self' (line 190)
        self_117291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 11), 'self')
        # Obtaining the member 'zip' of a type (line 190)
        zip_117292 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 190, 11), self_117291, 'zip')
        # Getting the type of 'None' (line 190)
        None_117293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 27), 'None')
        # Applying the binary operator 'isnot' (line 190)
        result_is_not_117294 = python_operator(stypy.reporting.localization.Localization(__file__, 190, 11), 'isnot', zip_117292, None_117293)
        
        # Testing the type of an if condition (line 190)
        if_condition_117295 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 190, 8), result_is_not_117294)
        # Assigning a type to the variable 'if_condition_117295' (line 190)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 190, 8), 'if_condition_117295', if_condition_117295)
        # SSA begins for if statement (line 190)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to close(...): (line 191)
        # Processing the call keyword arguments (line 191)
        kwargs_117299 = {}
        # Getting the type of 'self' (line 191)
        self_117296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 191, 12), 'self', False)
        # Obtaining the member 'zip' of a type (line 191)
        zip_117297 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 191, 12), self_117296, 'zip')
        # Obtaining the member 'close' of a type (line 191)
        close_117298 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 191, 12), zip_117297, 'close')
        # Calling close(args, kwargs) (line 191)
        close_call_result_117300 = invoke(stypy.reporting.localization.Localization(__file__, 191, 12), close_117298, *[], **kwargs_117299)
        
        
        # Assigning a Name to a Attribute (line 192):
        
        # Assigning a Name to a Attribute (line 192):
        # Getting the type of 'None' (line 192)
        None_117301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 23), 'None')
        # Getting the type of 'self' (line 192)
        self_117302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 12), 'self')
        # Setting the type of the member 'zip' of a type (line 192)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 192, 12), self_117302, 'zip', None_117301)
        # SSA join for if statement (line 190)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 193)
        self_117303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 11), 'self')
        # Obtaining the member 'fid' of a type (line 193)
        fid_117304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 193, 11), self_117303, 'fid')
        # Getting the type of 'None' (line 193)
        None_117305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 27), 'None')
        # Applying the binary operator 'isnot' (line 193)
        result_is_not_117306 = python_operator(stypy.reporting.localization.Localization(__file__, 193, 11), 'isnot', fid_117304, None_117305)
        
        # Testing the type of an if condition (line 193)
        if_condition_117307 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 193, 8), result_is_not_117306)
        # Assigning a type to the variable 'if_condition_117307' (line 193)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 193, 8), 'if_condition_117307', if_condition_117307)
        # SSA begins for if statement (line 193)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to close(...): (line 194)
        # Processing the call keyword arguments (line 194)
        kwargs_117311 = {}
        # Getting the type of 'self' (line 194)
        self_117308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 12), 'self', False)
        # Obtaining the member 'fid' of a type (line 194)
        fid_117309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 194, 12), self_117308, 'fid')
        # Obtaining the member 'close' of a type (line 194)
        close_117310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 194, 12), fid_117309, 'close')
        # Calling close(args, kwargs) (line 194)
        close_call_result_117312 = invoke(stypy.reporting.localization.Localization(__file__, 194, 12), close_117310, *[], **kwargs_117311)
        
        
        # Assigning a Name to a Attribute (line 195):
        
        # Assigning a Name to a Attribute (line 195):
        # Getting the type of 'None' (line 195)
        None_117313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 23), 'None')
        # Getting the type of 'self' (line 195)
        self_117314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 12), 'self')
        # Setting the type of the member 'fid' of a type (line 195)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 195, 12), self_117314, 'fid', None_117313)
        # SSA join for if statement (line 193)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 196):
        
        # Assigning a Name to a Attribute (line 196):
        # Getting the type of 'None' (line 196)
        None_117315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 17), 'None')
        # Getting the type of 'self' (line 196)
        self_117316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 8), 'self')
        # Setting the type of the member 'f' of a type (line 196)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 196, 8), self_117316, 'f', None_117315)
        
        # ################# End of 'close(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'close' in the type store
        # Getting the type of 'stypy_return_type' (line 185)
        stypy_return_type_117317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_117317)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'close'
        return stypy_return_type_117317


    @norecursion
    def __del__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__del__'
        module_type_store = module_type_store.open_function_context('__del__', 198, 4, False)
        # Assigning a type to the variable 'self' (line 199)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 199, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NpzFile.__del__.__dict__.__setitem__('stypy_localization', localization)
        NpzFile.__del__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NpzFile.__del__.__dict__.__setitem__('stypy_type_store', module_type_store)
        NpzFile.__del__.__dict__.__setitem__('stypy_function_name', 'NpzFile.__del__')
        NpzFile.__del__.__dict__.__setitem__('stypy_param_names_list', [])
        NpzFile.__del__.__dict__.__setitem__('stypy_varargs_param_name', None)
        NpzFile.__del__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NpzFile.__del__.__dict__.__setitem__('stypy_call_defaults', defaults)
        NpzFile.__del__.__dict__.__setitem__('stypy_call_varargs', varargs)
        NpzFile.__del__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NpzFile.__del__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NpzFile.__del__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__del__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__del__(...)' code ##################

        
        # Call to close(...): (line 199)
        # Processing the call keyword arguments (line 199)
        kwargs_117320 = {}
        # Getting the type of 'self' (line 199)
        self_117318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 199, 8), 'self', False)
        # Obtaining the member 'close' of a type (line 199)
        close_117319 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 199, 8), self_117318, 'close')
        # Calling close(args, kwargs) (line 199)
        close_call_result_117321 = invoke(stypy.reporting.localization.Localization(__file__, 199, 8), close_117319, *[], **kwargs_117320)
        
        
        # ################# End of '__del__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__del__' in the type store
        # Getting the type of 'stypy_return_type' (line 198)
        stypy_return_type_117322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_117322)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__del__'
        return stypy_return_type_117322


    @norecursion
    def __getitem__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__getitem__'
        module_type_store = module_type_store.open_function_context('__getitem__', 201, 4, False)
        # Assigning a type to the variable 'self' (line 202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 202, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NpzFile.__getitem__.__dict__.__setitem__('stypy_localization', localization)
        NpzFile.__getitem__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NpzFile.__getitem__.__dict__.__setitem__('stypy_type_store', module_type_store)
        NpzFile.__getitem__.__dict__.__setitem__('stypy_function_name', 'NpzFile.__getitem__')
        NpzFile.__getitem__.__dict__.__setitem__('stypy_param_names_list', ['key'])
        NpzFile.__getitem__.__dict__.__setitem__('stypy_varargs_param_name', None)
        NpzFile.__getitem__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NpzFile.__getitem__.__dict__.__setitem__('stypy_call_defaults', defaults)
        NpzFile.__getitem__.__dict__.__setitem__('stypy_call_varargs', varargs)
        NpzFile.__getitem__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NpzFile.__getitem__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NpzFile.__getitem__', ['key'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__getitem__', localization, ['key'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__getitem__(...)' code ##################

        
        # Assigning a Num to a Name (line 210):
        
        # Assigning a Num to a Name (line 210):
        int_117323 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 210, 17), 'int')
        # Assigning a type to the variable 'member' (line 210)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 210, 8), 'member', int_117323)
        
        
        # Getting the type of 'key' (line 211)
        key_117324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 11), 'key')
        # Getting the type of 'self' (line 211)
        self_117325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 18), 'self')
        # Obtaining the member '_files' of a type (line 211)
        _files_117326 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 211, 18), self_117325, '_files')
        # Applying the binary operator 'in' (line 211)
        result_contains_117327 = python_operator(stypy.reporting.localization.Localization(__file__, 211, 11), 'in', key_117324, _files_117326)
        
        # Testing the type of an if condition (line 211)
        if_condition_117328 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 211, 8), result_contains_117327)
        # Assigning a type to the variable 'if_condition_117328' (line 211)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 211, 8), 'if_condition_117328', if_condition_117328)
        # SSA begins for if statement (line 211)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 212):
        
        # Assigning a Num to a Name (line 212):
        int_117329 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 212, 21), 'int')
        # Assigning a type to the variable 'member' (line 212)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 212, 12), 'member', int_117329)
        # SSA branch for the else part of an if statement (line 211)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'key' (line 213)
        key_117330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 13), 'key')
        # Getting the type of 'self' (line 213)
        self_117331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 20), 'self')
        # Obtaining the member 'files' of a type (line 213)
        files_117332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 213, 20), self_117331, 'files')
        # Applying the binary operator 'in' (line 213)
        result_contains_117333 = python_operator(stypy.reporting.localization.Localization(__file__, 213, 13), 'in', key_117330, files_117332)
        
        # Testing the type of an if condition (line 213)
        if_condition_117334 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 213, 13), result_contains_117333)
        # Assigning a type to the variable 'if_condition_117334' (line 213)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 213, 13), 'if_condition_117334', if_condition_117334)
        # SSA begins for if statement (line 213)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 214):
        
        # Assigning a Num to a Name (line 214):
        int_117335 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 214, 21), 'int')
        # Assigning a type to the variable 'member' (line 214)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 214, 12), 'member', int_117335)
        
        # Getting the type of 'key' (line 215)
        key_117336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 12), 'key')
        str_117337 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 215, 19), 'str', '.npy')
        # Applying the binary operator '+=' (line 215)
        result_iadd_117338 = python_operator(stypy.reporting.localization.Localization(__file__, 215, 12), '+=', key_117336, str_117337)
        # Assigning a type to the variable 'key' (line 215)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 215, 12), 'key', result_iadd_117338)
        
        # SSA join for if statement (line 213)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 211)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'member' (line 216)
        member_117339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 11), 'member')
        # Testing the type of an if condition (line 216)
        if_condition_117340 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 216, 8), member_117339)
        # Assigning a type to the variable 'if_condition_117340' (line 216)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 216, 8), 'if_condition_117340', if_condition_117340)
        # SSA begins for if statement (line 216)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 217):
        
        # Assigning a Call to a Name (line 217):
        
        # Call to open(...): (line 217)
        # Processing the call arguments (line 217)
        # Getting the type of 'key' (line 217)
        key_117344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 34), 'key', False)
        # Processing the call keyword arguments (line 217)
        kwargs_117345 = {}
        # Getting the type of 'self' (line 217)
        self_117341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 20), 'self', False)
        # Obtaining the member 'zip' of a type (line 217)
        zip_117342 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 217, 20), self_117341, 'zip')
        # Obtaining the member 'open' of a type (line 217)
        open_117343 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 217, 20), zip_117342, 'open')
        # Calling open(args, kwargs) (line 217)
        open_call_result_117346 = invoke(stypy.reporting.localization.Localization(__file__, 217, 20), open_117343, *[key_117344], **kwargs_117345)
        
        # Assigning a type to the variable 'bytes' (line 217)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 217, 12), 'bytes', open_call_result_117346)
        
        # Assigning a Call to a Name (line 218):
        
        # Assigning a Call to a Name (line 218):
        
        # Call to read(...): (line 218)
        # Processing the call arguments (line 218)
        
        # Call to len(...): (line 218)
        # Processing the call arguments (line 218)
        # Getting the type of 'format' (line 218)
        format_117350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 218, 35), 'format', False)
        # Obtaining the member 'MAGIC_PREFIX' of a type (line 218)
        MAGIC_PREFIX_117351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 218, 35), format_117350, 'MAGIC_PREFIX')
        # Processing the call keyword arguments (line 218)
        kwargs_117352 = {}
        # Getting the type of 'len' (line 218)
        len_117349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 218, 31), 'len', False)
        # Calling len(args, kwargs) (line 218)
        len_call_result_117353 = invoke(stypy.reporting.localization.Localization(__file__, 218, 31), len_117349, *[MAGIC_PREFIX_117351], **kwargs_117352)
        
        # Processing the call keyword arguments (line 218)
        kwargs_117354 = {}
        # Getting the type of 'bytes' (line 218)
        bytes_117347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 218, 20), 'bytes', False)
        # Obtaining the member 'read' of a type (line 218)
        read_117348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 218, 20), bytes_117347, 'read')
        # Calling read(args, kwargs) (line 218)
        read_call_result_117355 = invoke(stypy.reporting.localization.Localization(__file__, 218, 20), read_117348, *[len_call_result_117353], **kwargs_117354)
        
        # Assigning a type to the variable 'magic' (line 218)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 218, 12), 'magic', read_call_result_117355)
        
        # Call to close(...): (line 219)
        # Processing the call keyword arguments (line 219)
        kwargs_117358 = {}
        # Getting the type of 'bytes' (line 219)
        bytes_117356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 12), 'bytes', False)
        # Obtaining the member 'close' of a type (line 219)
        close_117357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 219, 12), bytes_117356, 'close')
        # Calling close(args, kwargs) (line 219)
        close_call_result_117359 = invoke(stypy.reporting.localization.Localization(__file__, 219, 12), close_117357, *[], **kwargs_117358)
        
        
        
        # Getting the type of 'magic' (line 220)
        magic_117360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 15), 'magic')
        # Getting the type of 'format' (line 220)
        format_117361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 24), 'format')
        # Obtaining the member 'MAGIC_PREFIX' of a type (line 220)
        MAGIC_PREFIX_117362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 220, 24), format_117361, 'MAGIC_PREFIX')
        # Applying the binary operator '==' (line 220)
        result_eq_117363 = python_operator(stypy.reporting.localization.Localization(__file__, 220, 15), '==', magic_117360, MAGIC_PREFIX_117362)
        
        # Testing the type of an if condition (line 220)
        if_condition_117364 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 220, 12), result_eq_117363)
        # Assigning a type to the variable 'if_condition_117364' (line 220)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 220, 12), 'if_condition_117364', if_condition_117364)
        # SSA begins for if statement (line 220)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 221):
        
        # Assigning a Call to a Name (line 221):
        
        # Call to open(...): (line 221)
        # Processing the call arguments (line 221)
        # Getting the type of 'key' (line 221)
        key_117368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 38), 'key', False)
        # Processing the call keyword arguments (line 221)
        kwargs_117369 = {}
        # Getting the type of 'self' (line 221)
        self_117365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 24), 'self', False)
        # Obtaining the member 'zip' of a type (line 221)
        zip_117366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 221, 24), self_117365, 'zip')
        # Obtaining the member 'open' of a type (line 221)
        open_117367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 221, 24), zip_117366, 'open')
        # Calling open(args, kwargs) (line 221)
        open_call_result_117370 = invoke(stypy.reporting.localization.Localization(__file__, 221, 24), open_117367, *[key_117368], **kwargs_117369)
        
        # Assigning a type to the variable 'bytes' (line 221)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 221, 16), 'bytes', open_call_result_117370)
        
        # Call to read_array(...): (line 222)
        # Processing the call arguments (line 222)
        # Getting the type of 'bytes' (line 222)
        bytes_117373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 41), 'bytes', False)
        # Processing the call keyword arguments (line 222)
        # Getting the type of 'self' (line 223)
        self_117374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 54), 'self', False)
        # Obtaining the member 'allow_pickle' of a type (line 223)
        allow_pickle_117375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 223, 54), self_117374, 'allow_pickle')
        keyword_117376 = allow_pickle_117375
        # Getting the type of 'self' (line 224)
        self_117377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 55), 'self', False)
        # Obtaining the member 'pickle_kwargs' of a type (line 224)
        pickle_kwargs_117378 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 224, 55), self_117377, 'pickle_kwargs')
        keyword_117379 = pickle_kwargs_117378
        kwargs_117380 = {'pickle_kwargs': keyword_117379, 'allow_pickle': keyword_117376}
        # Getting the type of 'format' (line 222)
        format_117371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 23), 'format', False)
        # Obtaining the member 'read_array' of a type (line 222)
        read_array_117372 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 222, 23), format_117371, 'read_array')
        # Calling read_array(args, kwargs) (line 222)
        read_array_call_result_117381 = invoke(stypy.reporting.localization.Localization(__file__, 222, 23), read_array_117372, *[bytes_117373], **kwargs_117380)
        
        # Assigning a type to the variable 'stypy_return_type' (line 222)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 222, 16), 'stypy_return_type', read_array_call_result_117381)
        # SSA branch for the else part of an if statement (line 220)
        module_type_store.open_ssa_branch('else')
        
        # Call to read(...): (line 226)
        # Processing the call arguments (line 226)
        # Getting the type of 'key' (line 226)
        key_117385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 226, 37), 'key', False)
        # Processing the call keyword arguments (line 226)
        kwargs_117386 = {}
        # Getting the type of 'self' (line 226)
        self_117382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 226, 23), 'self', False)
        # Obtaining the member 'zip' of a type (line 226)
        zip_117383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 226, 23), self_117382, 'zip')
        # Obtaining the member 'read' of a type (line 226)
        read_117384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 226, 23), zip_117383, 'read')
        # Calling read(args, kwargs) (line 226)
        read_call_result_117387 = invoke(stypy.reporting.localization.Localization(__file__, 226, 23), read_117384, *[key_117385], **kwargs_117386)
        
        # Assigning a type to the variable 'stypy_return_type' (line 226)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 226, 16), 'stypy_return_type', read_call_result_117387)
        # SSA join for if statement (line 220)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 216)
        module_type_store.open_ssa_branch('else')
        
        # Call to KeyError(...): (line 228)
        # Processing the call arguments (line 228)
        str_117389 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 228, 27), 'str', '%s is not a file in the archive')
        # Getting the type of 'key' (line 228)
        key_117390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 63), 'key', False)
        # Applying the binary operator '%' (line 228)
        result_mod_117391 = python_operator(stypy.reporting.localization.Localization(__file__, 228, 27), '%', str_117389, key_117390)
        
        # Processing the call keyword arguments (line 228)
        kwargs_117392 = {}
        # Getting the type of 'KeyError' (line 228)
        KeyError_117388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 18), 'KeyError', False)
        # Calling KeyError(args, kwargs) (line 228)
        KeyError_call_result_117393 = invoke(stypy.reporting.localization.Localization(__file__, 228, 18), KeyError_117388, *[result_mod_117391], **kwargs_117392)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 228, 12), KeyError_call_result_117393, 'raise parameter', BaseException)
        # SSA join for if statement (line 216)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__getitem__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__getitem__' in the type store
        # Getting the type of 'stypy_return_type' (line 201)
        stypy_return_type_117394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_117394)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__getitem__'
        return stypy_return_type_117394


    @norecursion
    def __iter__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__iter__'
        module_type_store = module_type_store.open_function_context('__iter__', 230, 4, False)
        # Assigning a type to the variable 'self' (line 231)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 231, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NpzFile.__iter__.__dict__.__setitem__('stypy_localization', localization)
        NpzFile.__iter__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NpzFile.__iter__.__dict__.__setitem__('stypy_type_store', module_type_store)
        NpzFile.__iter__.__dict__.__setitem__('stypy_function_name', 'NpzFile.__iter__')
        NpzFile.__iter__.__dict__.__setitem__('stypy_param_names_list', [])
        NpzFile.__iter__.__dict__.__setitem__('stypy_varargs_param_name', None)
        NpzFile.__iter__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NpzFile.__iter__.__dict__.__setitem__('stypy_call_defaults', defaults)
        NpzFile.__iter__.__dict__.__setitem__('stypy_call_varargs', varargs)
        NpzFile.__iter__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NpzFile.__iter__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NpzFile.__iter__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__iter__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__iter__(...)' code ##################

        
        # Call to iter(...): (line 231)
        # Processing the call arguments (line 231)
        # Getting the type of 'self' (line 231)
        self_117396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 20), 'self', False)
        # Obtaining the member 'files' of a type (line 231)
        files_117397 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 231, 20), self_117396, 'files')
        # Processing the call keyword arguments (line 231)
        kwargs_117398 = {}
        # Getting the type of 'iter' (line 231)
        iter_117395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 15), 'iter', False)
        # Calling iter(args, kwargs) (line 231)
        iter_call_result_117399 = invoke(stypy.reporting.localization.Localization(__file__, 231, 15), iter_117395, *[files_117397], **kwargs_117398)
        
        # Assigning a type to the variable 'stypy_return_type' (line 231)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 231, 8), 'stypy_return_type', iter_call_result_117399)
        
        # ################# End of '__iter__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__iter__' in the type store
        # Getting the type of 'stypy_return_type' (line 230)
        stypy_return_type_117400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_117400)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__iter__'
        return stypy_return_type_117400


    @norecursion
    def items(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'items'
        module_type_store = module_type_store.open_function_context('items', 233, 4, False)
        # Assigning a type to the variable 'self' (line 234)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 234, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NpzFile.items.__dict__.__setitem__('stypy_localization', localization)
        NpzFile.items.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NpzFile.items.__dict__.__setitem__('stypy_type_store', module_type_store)
        NpzFile.items.__dict__.__setitem__('stypy_function_name', 'NpzFile.items')
        NpzFile.items.__dict__.__setitem__('stypy_param_names_list', [])
        NpzFile.items.__dict__.__setitem__('stypy_varargs_param_name', None)
        NpzFile.items.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NpzFile.items.__dict__.__setitem__('stypy_call_defaults', defaults)
        NpzFile.items.__dict__.__setitem__('stypy_call_varargs', varargs)
        NpzFile.items.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NpzFile.items.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NpzFile.items', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'items', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'items(...)' code ##################

        str_117401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 237, (-1)), 'str', '\n        Return a list of tuples, with each tuple (filename, array in file).\n\n        ')
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'self' (line 238)
        self_117408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 238, 38), 'self')
        # Obtaining the member 'files' of a type (line 238)
        files_117409 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 238, 38), self_117408, 'files')
        comprehension_117410 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 238, 16), files_117409)
        # Assigning a type to the variable 'f' (line 238)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 238, 16), 'f', comprehension_117410)
        
        # Obtaining an instance of the builtin type 'tuple' (line 238)
        tuple_117402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 238, 17), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 238)
        # Adding element type (line 238)
        # Getting the type of 'f' (line 238)
        f_117403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 238, 17), 'f')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 238, 17), tuple_117402, f_117403)
        # Adding element type (line 238)
        
        # Obtaining the type of the subscript
        # Getting the type of 'f' (line 238)
        f_117404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 238, 25), 'f')
        # Getting the type of 'self' (line 238)
        self_117405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 238, 20), 'self')
        # Obtaining the member '__getitem__' of a type (line 238)
        getitem___117406 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 238, 20), self_117405, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 238)
        subscript_call_result_117407 = invoke(stypy.reporting.localization.Localization(__file__, 238, 20), getitem___117406, f_117404)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 238, 17), tuple_117402, subscript_call_result_117407)
        
        list_117411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 238, 16), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 238, 16), list_117411, tuple_117402)
        # Assigning a type to the variable 'stypy_return_type' (line 238)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 238, 8), 'stypy_return_type', list_117411)
        
        # ################# End of 'items(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'items' in the type store
        # Getting the type of 'stypy_return_type' (line 233)
        stypy_return_type_117412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_117412)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'items'
        return stypy_return_type_117412


    @norecursion
    def iteritems(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'iteritems'
        module_type_store = module_type_store.open_function_context('iteritems', 240, 4, False)
        # Assigning a type to the variable 'self' (line 241)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 241, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NpzFile.iteritems.__dict__.__setitem__('stypy_localization', localization)
        NpzFile.iteritems.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NpzFile.iteritems.__dict__.__setitem__('stypy_type_store', module_type_store)
        NpzFile.iteritems.__dict__.__setitem__('stypy_function_name', 'NpzFile.iteritems')
        NpzFile.iteritems.__dict__.__setitem__('stypy_param_names_list', [])
        NpzFile.iteritems.__dict__.__setitem__('stypy_varargs_param_name', None)
        NpzFile.iteritems.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NpzFile.iteritems.__dict__.__setitem__('stypy_call_defaults', defaults)
        NpzFile.iteritems.__dict__.__setitem__('stypy_call_varargs', varargs)
        NpzFile.iteritems.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NpzFile.iteritems.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NpzFile.iteritems', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'iteritems', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'iteritems(...)' code ##################

        str_117413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 241, 8), 'str', 'Generator that returns tuples (filename, array in file).')
        
        # Getting the type of 'self' (line 242)
        self_117414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 242, 17), 'self')
        # Obtaining the member 'files' of a type (line 242)
        files_117415 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 242, 17), self_117414, 'files')
        # Testing the type of a for loop iterable (line 242)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 242, 8), files_117415)
        # Getting the type of the for loop variable (line 242)
        for_loop_var_117416 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 242, 8), files_117415)
        # Assigning a type to the variable 'f' (line 242)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 242, 8), 'f', for_loop_var_117416)
        # SSA begins for a for statement (line 242)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        # Creating a generator
        
        # Obtaining an instance of the builtin type 'tuple' (line 243)
        tuple_117417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 243, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 243)
        # Adding element type (line 243)
        # Getting the type of 'f' (line 243)
        f_117418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 243, 19), 'f')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 243, 19), tuple_117417, f_117418)
        # Adding element type (line 243)
        
        # Obtaining the type of the subscript
        # Getting the type of 'f' (line 243)
        f_117419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 243, 27), 'f')
        # Getting the type of 'self' (line 243)
        self_117420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 243, 22), 'self')
        # Obtaining the member '__getitem__' of a type (line 243)
        getitem___117421 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 243, 22), self_117420, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 243)
        subscript_call_result_117422 = invoke(stypy.reporting.localization.Localization(__file__, 243, 22), getitem___117421, f_117419)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 243, 19), tuple_117417, subscript_call_result_117422)
        
        GeneratorType_117423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 243, 12), 'GeneratorType')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 243, 12), GeneratorType_117423, tuple_117417)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 243, 12), 'stypy_return_type', GeneratorType_117423)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'iteritems(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'iteritems' in the type store
        # Getting the type of 'stypy_return_type' (line 240)
        stypy_return_type_117424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 240, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_117424)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'iteritems'
        return stypy_return_type_117424


    @norecursion
    def keys(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'keys'
        module_type_store = module_type_store.open_function_context('keys', 245, 4, False)
        # Assigning a type to the variable 'self' (line 246)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 246, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NpzFile.keys.__dict__.__setitem__('stypy_localization', localization)
        NpzFile.keys.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NpzFile.keys.__dict__.__setitem__('stypy_type_store', module_type_store)
        NpzFile.keys.__dict__.__setitem__('stypy_function_name', 'NpzFile.keys')
        NpzFile.keys.__dict__.__setitem__('stypy_param_names_list', [])
        NpzFile.keys.__dict__.__setitem__('stypy_varargs_param_name', None)
        NpzFile.keys.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NpzFile.keys.__dict__.__setitem__('stypy_call_defaults', defaults)
        NpzFile.keys.__dict__.__setitem__('stypy_call_varargs', varargs)
        NpzFile.keys.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NpzFile.keys.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NpzFile.keys', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'keys', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'keys(...)' code ##################

        str_117425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 246, 8), 'str', 'Return files in the archive with a ``.npy`` extension.')
        # Getting the type of 'self' (line 247)
        self_117426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 15), 'self')
        # Obtaining the member 'files' of a type (line 247)
        files_117427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 247, 15), self_117426, 'files')
        # Assigning a type to the variable 'stypy_return_type' (line 247)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 247, 8), 'stypy_return_type', files_117427)
        
        # ################# End of 'keys(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'keys' in the type store
        # Getting the type of 'stypy_return_type' (line 245)
        stypy_return_type_117428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_117428)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'keys'
        return stypy_return_type_117428


    @norecursion
    def iterkeys(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'iterkeys'
        module_type_store = module_type_store.open_function_context('iterkeys', 249, 4, False)
        # Assigning a type to the variable 'self' (line 250)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 250, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NpzFile.iterkeys.__dict__.__setitem__('stypy_localization', localization)
        NpzFile.iterkeys.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NpzFile.iterkeys.__dict__.__setitem__('stypy_type_store', module_type_store)
        NpzFile.iterkeys.__dict__.__setitem__('stypy_function_name', 'NpzFile.iterkeys')
        NpzFile.iterkeys.__dict__.__setitem__('stypy_param_names_list', [])
        NpzFile.iterkeys.__dict__.__setitem__('stypy_varargs_param_name', None)
        NpzFile.iterkeys.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NpzFile.iterkeys.__dict__.__setitem__('stypy_call_defaults', defaults)
        NpzFile.iterkeys.__dict__.__setitem__('stypy_call_varargs', varargs)
        NpzFile.iterkeys.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NpzFile.iterkeys.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NpzFile.iterkeys', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'iterkeys', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'iterkeys(...)' code ##################

        str_117429 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 250, 8), 'str', 'Return an iterator over the files in the archive.')
        
        # Call to __iter__(...): (line 251)
        # Processing the call keyword arguments (line 251)
        kwargs_117432 = {}
        # Getting the type of 'self' (line 251)
        self_117430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 15), 'self', False)
        # Obtaining the member '__iter__' of a type (line 251)
        iter___117431 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 251, 15), self_117430, '__iter__')
        # Calling __iter__(args, kwargs) (line 251)
        iter___call_result_117433 = invoke(stypy.reporting.localization.Localization(__file__, 251, 15), iter___117431, *[], **kwargs_117432)
        
        # Assigning a type to the variable 'stypy_return_type' (line 251)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 251, 8), 'stypy_return_type', iter___call_result_117433)
        
        # ################# End of 'iterkeys(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'iterkeys' in the type store
        # Getting the type of 'stypy_return_type' (line 249)
        stypy_return_type_117434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_117434)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'iterkeys'
        return stypy_return_type_117434


    @norecursion
    def __contains__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__contains__'
        module_type_store = module_type_store.open_function_context('__contains__', 253, 4, False)
        # Assigning a type to the variable 'self' (line 254)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 254, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NpzFile.__contains__.__dict__.__setitem__('stypy_localization', localization)
        NpzFile.__contains__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NpzFile.__contains__.__dict__.__setitem__('stypy_type_store', module_type_store)
        NpzFile.__contains__.__dict__.__setitem__('stypy_function_name', 'NpzFile.__contains__')
        NpzFile.__contains__.__dict__.__setitem__('stypy_param_names_list', ['key'])
        NpzFile.__contains__.__dict__.__setitem__('stypy_varargs_param_name', None)
        NpzFile.__contains__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NpzFile.__contains__.__dict__.__setitem__('stypy_call_defaults', defaults)
        NpzFile.__contains__.__dict__.__setitem__('stypy_call_varargs', varargs)
        NpzFile.__contains__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NpzFile.__contains__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NpzFile.__contains__', ['key'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__contains__', localization, ['key'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__contains__(...)' code ##################

        
        # Call to __contains__(...): (line 254)
        # Processing the call arguments (line 254)
        # Getting the type of 'key' (line 254)
        key_117438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 39), 'key', False)
        # Processing the call keyword arguments (line 254)
        kwargs_117439 = {}
        # Getting the type of 'self' (line 254)
        self_117435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 15), 'self', False)
        # Obtaining the member 'files' of a type (line 254)
        files_117436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 254, 15), self_117435, 'files')
        # Obtaining the member '__contains__' of a type (line 254)
        contains___117437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 254, 15), files_117436, '__contains__')
        # Calling __contains__(args, kwargs) (line 254)
        contains___call_result_117440 = invoke(stypy.reporting.localization.Localization(__file__, 254, 15), contains___117437, *[key_117438], **kwargs_117439)
        
        # Assigning a type to the variable 'stypy_return_type' (line 254)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 254, 8), 'stypy_return_type', contains___call_result_117440)
        
        # ################# End of '__contains__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__contains__' in the type store
        # Getting the type of 'stypy_return_type' (line 253)
        stypy_return_type_117441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_117441)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__contains__'
        return stypy_return_type_117441


# Assigning a type to the variable 'NpzFile' (line 95)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 95, 0), 'NpzFile', NpzFile)

@norecursion
def load(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 257)
    None_117442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 25), 'None')
    # Getting the type of 'True' (line 257)
    True_117443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 44), 'True')
    # Getting the type of 'True' (line 257)
    True_117444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 62), 'True')
    str_117445 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 258, 18), 'str', 'ASCII')
    defaults = [None_117442, True_117443, True_117444, str_117445]
    # Create a new context for function 'load'
    module_type_store = module_type_store.open_function_context('load', 257, 0, False)
    
    # Passed parameters checking function
    load.stypy_localization = localization
    load.stypy_type_of_self = None
    load.stypy_type_store = module_type_store
    load.stypy_function_name = 'load'
    load.stypy_param_names_list = ['file', 'mmap_mode', 'allow_pickle', 'fix_imports', 'encoding']
    load.stypy_varargs_param_name = None
    load.stypy_kwargs_param_name = None
    load.stypy_call_defaults = defaults
    load.stypy_call_varargs = varargs
    load.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'load', ['file', 'mmap_mode', 'allow_pickle', 'fix_imports', 'encoding'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'load', localization, ['file', 'mmap_mode', 'allow_pickle', 'fix_imports', 'encoding'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'load(...)' code ##################

    str_117446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 357, (-1)), 'str', "\n    Load arrays or pickled objects from ``.npy``, ``.npz`` or pickled files.\n\n    Parameters\n    ----------\n    file : file-like object or string\n        The file to read. File-like objects must support the\n        ``seek()`` and ``read()`` methods. Pickled files require that the\n        file-like object support the ``readline()`` method as well.\n    mmap_mode : {None, 'r+', 'r', 'w+', 'c'}, optional\n        If not None, then memory-map the file, using the given mode (see\n        `numpy.memmap` for a detailed description of the modes).  A\n        memory-mapped array is kept on disk. However, it can be accessed\n        and sliced like any ndarray.  Memory mapping is especially useful\n        for accessing small fragments of large files without reading the\n        entire file into memory.\n    allow_pickle : bool, optional\n        Allow loading pickled object arrays stored in npy files. Reasons for\n        disallowing pickles include security, as loading pickled data can\n        execute arbitrary code. If pickles are disallowed, loading object\n        arrays will fail.\n        Default: True\n    fix_imports : bool, optional\n        Only useful when loading Python 2 generated pickled files on Python 3,\n        which includes npy/npz files containing object arrays. If `fix_imports`\n        is True, pickle will try to map the old Python 2 names to the new names\n        used in Python 3.\n    encoding : str, optional\n        What encoding to use when reading Python 2 strings. Only useful when\n        loading Python 2 generated pickled files on Python 3, which includes\n        npy/npz files containing object arrays. Values other than 'latin1',\n        'ASCII', and 'bytes' are not allowed, as they can corrupt numerical\n        data. Default: 'ASCII'\n\n    Returns\n    -------\n    result : array, tuple, dict, etc.\n        Data stored in the file. For ``.npz`` files, the returned instance\n        of NpzFile class must be closed to avoid leaking file descriptors.\n\n    Raises\n    ------\n    IOError\n        If the input file does not exist or cannot be read.\n    ValueError\n        The file contains an object array, but allow_pickle=False given.\n\n    See Also\n    --------\n    save, savez, savez_compressed, loadtxt\n    memmap : Create a memory-map to an array stored in a file on disk.\n\n    Notes\n    -----\n    - If the file contains pickle data, then whatever object is stored\n      in the pickle is returned.\n    - If the file is a ``.npy`` file, then a single array is returned.\n    - If the file is a ``.npz`` file, then a dictionary-like object is\n      returned, containing ``{filename: array}`` key-value pairs, one for\n      each file in the archive.\n    - If the file is a ``.npz`` file, the returned value supports the\n      context manager protocol in a similar fashion to the open function::\n\n        with load('foo.npz') as data:\n            a = data['a']\n\n      The underlying file descriptor is closed when exiting the 'with'\n      block.\n\n    Examples\n    --------\n    Store data to disk, and load it again:\n\n    >>> np.save('/tmp/123', np.array([[1, 2, 3], [4, 5, 6]]))\n    >>> np.load('/tmp/123.npy')\n    array([[1, 2, 3],\n           [4, 5, 6]])\n\n    Store compressed data to disk, and load it again:\n\n    >>> a=np.array([[1, 2, 3], [4, 5, 6]])\n    >>> b=np.array([1, 2])\n    >>> np.savez('/tmp/123.npz', a=a, b=b)\n    >>> data = np.load('/tmp/123.npz')\n    >>> data['a']\n    array([[1, 2, 3],\n           [4, 5, 6]])\n    >>> data['b']\n    array([1, 2])\n    >>> data.close()\n\n    Mem-map the stored array, and then access the second row\n    directly from disk:\n\n    >>> X = np.load('/tmp/123.npy', mmap_mode='r')\n    >>> X[1, :]\n    memmap([4, 5, 6])\n\n    ")
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 358, 4))
    
    # 'import gzip' statement (line 358)
    import gzip

    import_module(stypy.reporting.localization.Localization(__file__, 358, 4), 'gzip', gzip, module_type_store)
    
    
    # Assigning a Name to a Name (line 360):
    
    # Assigning a Name to a Name (line 360):
    # Getting the type of 'False' (line 360)
    False_117447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 14), 'False')
    # Assigning a type to the variable 'own_fid' (line 360)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 360, 4), 'own_fid', False_117447)
    
    # Type idiom detected: calculating its left and rigth part (line 361)
    # Getting the type of 'basestring' (line 361)
    basestring_117448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 24), 'basestring')
    # Getting the type of 'file' (line 361)
    file_117449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 18), 'file')
    
    (may_be_117450, more_types_in_union_117451) = may_be_subtype(basestring_117448, file_117449)

    if may_be_117450:

        if more_types_in_union_117451:
            # Runtime conditional SSA (line 361)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'file' (line 361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 361, 4), 'file', remove_not_subtype_from_union(file_117449, basestring))
        
        # Assigning a Call to a Name (line 362):
        
        # Assigning a Call to a Name (line 362):
        
        # Call to open(...): (line 362)
        # Processing the call arguments (line 362)
        # Getting the type of 'file' (line 362)
        file_117453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 19), 'file', False)
        str_117454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 362, 25), 'str', 'rb')
        # Processing the call keyword arguments (line 362)
        kwargs_117455 = {}
        # Getting the type of 'open' (line 362)
        open_117452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 14), 'open', False)
        # Calling open(args, kwargs) (line 362)
        open_call_result_117456 = invoke(stypy.reporting.localization.Localization(__file__, 362, 14), open_117452, *[file_117453, str_117454], **kwargs_117455)
        
        # Assigning a type to the variable 'fid' (line 362)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 362, 8), 'fid', open_call_result_117456)
        
        # Assigning a Name to a Name (line 363):
        
        # Assigning a Name to a Name (line 363):
        # Getting the type of 'True' (line 363)
        True_117457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 18), 'True')
        # Assigning a type to the variable 'own_fid' (line 363)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 363, 8), 'own_fid', True_117457)

        if more_types_in_union_117451:
            # Runtime conditional SSA for else branch (line 361)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_117450) or more_types_in_union_117451):
        # Assigning a type to the variable 'file' (line 361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 361, 4), 'file', remove_subtype_from_union(file_117449, basestring))
        
        # Assigning a Name to a Name (line 365):
        
        # Assigning a Name to a Name (line 365):
        # Getting the type of 'file' (line 365)
        file_117458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 14), 'file')
        # Assigning a type to the variable 'fid' (line 365)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 365, 8), 'fid', file_117458)

        if (may_be_117450 and more_types_in_union_117451):
            # SSA join for if statement (line 361)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Getting the type of 'encoding' (line 367)
    encoding_117459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 7), 'encoding')
    
    # Obtaining an instance of the builtin type 'tuple' (line 367)
    tuple_117460 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 367, 24), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 367)
    # Adding element type (line 367)
    str_117461 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 367, 24), 'str', 'ASCII')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 367, 24), tuple_117460, str_117461)
    # Adding element type (line 367)
    str_117462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 367, 33), 'str', 'latin1')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 367, 24), tuple_117460, str_117462)
    # Adding element type (line 367)
    str_117463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 367, 43), 'str', 'bytes')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 367, 24), tuple_117460, str_117463)
    
    # Applying the binary operator 'notin' (line 367)
    result_contains_117464 = python_operator(stypy.reporting.localization.Localization(__file__, 367, 7), 'notin', encoding_117459, tuple_117460)
    
    # Testing the type of an if condition (line 367)
    if_condition_117465 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 367, 4), result_contains_117464)
    # Assigning a type to the variable 'if_condition_117465' (line 367)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 367, 4), 'if_condition_117465', if_condition_117465)
    # SSA begins for if statement (line 367)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 379)
    # Processing the call arguments (line 379)
    str_117467 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 379, 25), 'str', "encoding must be 'ASCII', 'latin1', or 'bytes'")
    # Processing the call keyword arguments (line 379)
    kwargs_117468 = {}
    # Getting the type of 'ValueError' (line 379)
    ValueError_117466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 379)
    ValueError_call_result_117469 = invoke(stypy.reporting.localization.Localization(__file__, 379, 14), ValueError_117466, *[str_117467], **kwargs_117468)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 379, 8), ValueError_call_result_117469, 'raise parameter', BaseException)
    # SSA join for if statement (line 367)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Obtaining the type of the subscript
    int_117470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 381, 24), 'int')
    # Getting the type of 'sys' (line 381)
    sys_117471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 381, 7), 'sys')
    # Obtaining the member 'version_info' of a type (line 381)
    version_info_117472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 381, 7), sys_117471, 'version_info')
    # Obtaining the member '__getitem__' of a type (line 381)
    getitem___117473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 381, 7), version_info_117472, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 381)
    subscript_call_result_117474 = invoke(stypy.reporting.localization.Localization(__file__, 381, 7), getitem___117473, int_117470)
    
    int_117475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 381, 30), 'int')
    # Applying the binary operator '>=' (line 381)
    result_ge_117476 = python_operator(stypy.reporting.localization.Localization(__file__, 381, 7), '>=', subscript_call_result_117474, int_117475)
    
    # Testing the type of an if condition (line 381)
    if_condition_117477 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 381, 4), result_ge_117476)
    # Assigning a type to the variable 'if_condition_117477' (line 381)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 381, 4), 'if_condition_117477', if_condition_117477)
    # SSA begins for if statement (line 381)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 382):
    
    # Assigning a Call to a Name (line 382):
    
    # Call to dict(...): (line 382)
    # Processing the call keyword arguments (line 382)
    # Getting the type of 'encoding' (line 382)
    encoding_117479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 38), 'encoding', False)
    keyword_117480 = encoding_117479
    # Getting the type of 'fix_imports' (line 382)
    fix_imports_117481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 60), 'fix_imports', False)
    keyword_117482 = fix_imports_117481
    kwargs_117483 = {'fix_imports': keyword_117482, 'encoding': keyword_117480}
    # Getting the type of 'dict' (line 382)
    dict_117478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 24), 'dict', False)
    # Calling dict(args, kwargs) (line 382)
    dict_call_result_117484 = invoke(stypy.reporting.localization.Localization(__file__, 382, 24), dict_117478, *[], **kwargs_117483)
    
    # Assigning a type to the variable 'pickle_kwargs' (line 382)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 382, 8), 'pickle_kwargs', dict_call_result_117484)
    # SSA branch for the else part of an if statement (line 381)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Dict to a Name (line 385):
    
    # Assigning a Dict to a Name (line 385):
    
    # Obtaining an instance of the builtin type 'dict' (line 385)
    dict_117485 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 385, 24), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 385)
    
    # Assigning a type to the variable 'pickle_kwargs' (line 385)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 385, 8), 'pickle_kwargs', dict_117485)
    # SSA join for if statement (line 381)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Try-finally block (line 387)
    
    # Assigning a Call to a Name (line 389):
    
    # Assigning a Call to a Name (line 389):
    
    # Call to asbytes(...): (line 389)
    # Processing the call arguments (line 389)
    str_117487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 389, 30), 'str', 'PK\x03\x04')
    # Processing the call keyword arguments (line 389)
    kwargs_117488 = {}
    # Getting the type of 'asbytes' (line 389)
    asbytes_117486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 22), 'asbytes', False)
    # Calling asbytes(args, kwargs) (line 389)
    asbytes_call_result_117489 = invoke(stypy.reporting.localization.Localization(__file__, 389, 22), asbytes_117486, *[str_117487], **kwargs_117488)
    
    # Assigning a type to the variable '_ZIP_PREFIX' (line 389)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 389, 8), '_ZIP_PREFIX', asbytes_call_result_117489)
    
    # Assigning a Call to a Name (line 390):
    
    # Assigning a Call to a Name (line 390):
    
    # Call to len(...): (line 390)
    # Processing the call arguments (line 390)
    # Getting the type of 'format' (line 390)
    format_117491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 16), 'format', False)
    # Obtaining the member 'MAGIC_PREFIX' of a type (line 390)
    MAGIC_PREFIX_117492 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 390, 16), format_117491, 'MAGIC_PREFIX')
    # Processing the call keyword arguments (line 390)
    kwargs_117493 = {}
    # Getting the type of 'len' (line 390)
    len_117490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 12), 'len', False)
    # Calling len(args, kwargs) (line 390)
    len_call_result_117494 = invoke(stypy.reporting.localization.Localization(__file__, 390, 12), len_117490, *[MAGIC_PREFIX_117492], **kwargs_117493)
    
    # Assigning a type to the variable 'N' (line 390)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 390, 8), 'N', len_call_result_117494)
    
    # Assigning a Call to a Name (line 391):
    
    # Assigning a Call to a Name (line 391):
    
    # Call to read(...): (line 391)
    # Processing the call arguments (line 391)
    # Getting the type of 'N' (line 391)
    N_117497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 25), 'N', False)
    # Processing the call keyword arguments (line 391)
    kwargs_117498 = {}
    # Getting the type of 'fid' (line 391)
    fid_117495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 16), 'fid', False)
    # Obtaining the member 'read' of a type (line 391)
    read_117496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 391, 16), fid_117495, 'read')
    # Calling read(args, kwargs) (line 391)
    read_call_result_117499 = invoke(stypy.reporting.localization.Localization(__file__, 391, 16), read_117496, *[N_117497], **kwargs_117498)
    
    # Assigning a type to the variable 'magic' (line 391)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 391, 8), 'magic', read_call_result_117499)
    
    # Call to seek(...): (line 392)
    # Processing the call arguments (line 392)
    
    # Getting the type of 'N' (line 392)
    N_117502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 18), 'N', False)
    # Applying the 'usub' unary operator (line 392)
    result___neg___117503 = python_operator(stypy.reporting.localization.Localization(__file__, 392, 17), 'usub', N_117502)
    
    int_117504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 392, 21), 'int')
    # Processing the call keyword arguments (line 392)
    kwargs_117505 = {}
    # Getting the type of 'fid' (line 392)
    fid_117500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 8), 'fid', False)
    # Obtaining the member 'seek' of a type (line 392)
    seek_117501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 392, 8), fid_117500, 'seek')
    # Calling seek(args, kwargs) (line 392)
    seek_call_result_117506 = invoke(stypy.reporting.localization.Localization(__file__, 392, 8), seek_117501, *[result___neg___117503, int_117504], **kwargs_117505)
    
    
    
    # Call to startswith(...): (line 393)
    # Processing the call arguments (line 393)
    # Getting the type of '_ZIP_PREFIX' (line 393)
    _ZIP_PREFIX_117509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 28), '_ZIP_PREFIX', False)
    # Processing the call keyword arguments (line 393)
    kwargs_117510 = {}
    # Getting the type of 'magic' (line 393)
    magic_117507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 11), 'magic', False)
    # Obtaining the member 'startswith' of a type (line 393)
    startswith_117508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 393, 11), magic_117507, 'startswith')
    # Calling startswith(args, kwargs) (line 393)
    startswith_call_result_117511 = invoke(stypy.reporting.localization.Localization(__file__, 393, 11), startswith_117508, *[_ZIP_PREFIX_117509], **kwargs_117510)
    
    # Testing the type of an if condition (line 393)
    if_condition_117512 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 393, 8), startswith_call_result_117511)
    # Assigning a type to the variable 'if_condition_117512' (line 393)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 393, 8), 'if_condition_117512', if_condition_117512)
    # SSA begins for if statement (line 393)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 396):
    
    # Assigning a Name to a Name (line 396):
    # Getting the type of 'own_fid' (line 396)
    own_fid_117513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 18), 'own_fid')
    # Assigning a type to the variable 'tmp' (line 396)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 396, 12), 'tmp', own_fid_117513)
    
    # Assigning a Name to a Name (line 397):
    
    # Assigning a Name to a Name (line 397):
    # Getting the type of 'False' (line 397)
    False_117514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 397, 22), 'False')
    # Assigning a type to the variable 'own_fid' (line 397)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 397, 12), 'own_fid', False_117514)
    
    # Call to NpzFile(...): (line 398)
    # Processing the call arguments (line 398)
    # Getting the type of 'fid' (line 398)
    fid_117516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 398, 27), 'fid', False)
    # Processing the call keyword arguments (line 398)
    # Getting the type of 'tmp' (line 398)
    tmp_117517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 398, 40), 'tmp', False)
    keyword_117518 = tmp_117517
    # Getting the type of 'allow_pickle' (line 398)
    allow_pickle_117519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 398, 58), 'allow_pickle', False)
    keyword_117520 = allow_pickle_117519
    # Getting the type of 'pickle_kwargs' (line 399)
    pickle_kwargs_117521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 399, 41), 'pickle_kwargs', False)
    keyword_117522 = pickle_kwargs_117521
    kwargs_117523 = {'pickle_kwargs': keyword_117522, 'own_fid': keyword_117518, 'allow_pickle': keyword_117520}
    # Getting the type of 'NpzFile' (line 398)
    NpzFile_117515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 398, 19), 'NpzFile', False)
    # Calling NpzFile(args, kwargs) (line 398)
    NpzFile_call_result_117524 = invoke(stypy.reporting.localization.Localization(__file__, 398, 19), NpzFile_117515, *[fid_117516], **kwargs_117523)
    
    # Assigning a type to the variable 'stypy_return_type' (line 398)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 398, 12), 'stypy_return_type', NpzFile_call_result_117524)
    # SSA branch for the else part of an if statement (line 393)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'magic' (line 400)
    magic_117525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 400, 13), 'magic')
    # Getting the type of 'format' (line 400)
    format_117526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 400, 22), 'format')
    # Obtaining the member 'MAGIC_PREFIX' of a type (line 400)
    MAGIC_PREFIX_117527 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 400, 22), format_117526, 'MAGIC_PREFIX')
    # Applying the binary operator '==' (line 400)
    result_eq_117528 = python_operator(stypy.reporting.localization.Localization(__file__, 400, 13), '==', magic_117525, MAGIC_PREFIX_117527)
    
    # Testing the type of an if condition (line 400)
    if_condition_117529 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 400, 13), result_eq_117528)
    # Assigning a type to the variable 'if_condition_117529' (line 400)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 400, 13), 'if_condition_117529', if_condition_117529)
    # SSA begins for if statement (line 400)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'mmap_mode' (line 402)
    mmap_mode_117530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 15), 'mmap_mode')
    # Testing the type of an if condition (line 402)
    if_condition_117531 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 402, 12), mmap_mode_117530)
    # Assigning a type to the variable 'if_condition_117531' (line 402)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 402, 12), 'if_condition_117531', if_condition_117531)
    # SSA begins for if statement (line 402)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to open_memmap(...): (line 403)
    # Processing the call arguments (line 403)
    # Getting the type of 'file' (line 403)
    file_117534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 42), 'file', False)
    # Processing the call keyword arguments (line 403)
    # Getting the type of 'mmap_mode' (line 403)
    mmap_mode_117535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 53), 'mmap_mode', False)
    keyword_117536 = mmap_mode_117535
    kwargs_117537 = {'mode': keyword_117536}
    # Getting the type of 'format' (line 403)
    format_117532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 23), 'format', False)
    # Obtaining the member 'open_memmap' of a type (line 403)
    open_memmap_117533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 403, 23), format_117532, 'open_memmap')
    # Calling open_memmap(args, kwargs) (line 403)
    open_memmap_call_result_117538 = invoke(stypy.reporting.localization.Localization(__file__, 403, 23), open_memmap_117533, *[file_117534], **kwargs_117537)
    
    # Assigning a type to the variable 'stypy_return_type' (line 403)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 403, 16), 'stypy_return_type', open_memmap_call_result_117538)
    # SSA branch for the else part of an if statement (line 402)
    module_type_store.open_ssa_branch('else')
    
    # Call to read_array(...): (line 405)
    # Processing the call arguments (line 405)
    # Getting the type of 'fid' (line 405)
    fid_117541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 41), 'fid', False)
    # Processing the call keyword arguments (line 405)
    # Getting the type of 'allow_pickle' (line 405)
    allow_pickle_117542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 59), 'allow_pickle', False)
    keyword_117543 = allow_pickle_117542
    # Getting the type of 'pickle_kwargs' (line 406)
    pickle_kwargs_117544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 406, 55), 'pickle_kwargs', False)
    keyword_117545 = pickle_kwargs_117544
    kwargs_117546 = {'pickle_kwargs': keyword_117545, 'allow_pickle': keyword_117543}
    # Getting the type of 'format' (line 405)
    format_117539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 23), 'format', False)
    # Obtaining the member 'read_array' of a type (line 405)
    read_array_117540 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 405, 23), format_117539, 'read_array')
    # Calling read_array(args, kwargs) (line 405)
    read_array_call_result_117547 = invoke(stypy.reporting.localization.Localization(__file__, 405, 23), read_array_117540, *[fid_117541], **kwargs_117546)
    
    # Assigning a type to the variable 'stypy_return_type' (line 405)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 405, 16), 'stypy_return_type', read_array_call_result_117547)
    # SSA join for if statement (line 402)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 400)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'allow_pickle' (line 409)
    allow_pickle_117548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 409, 19), 'allow_pickle')
    # Applying the 'not' unary operator (line 409)
    result_not__117549 = python_operator(stypy.reporting.localization.Localization(__file__, 409, 15), 'not', allow_pickle_117548)
    
    # Testing the type of an if condition (line 409)
    if_condition_117550 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 409, 12), result_not__117549)
    # Assigning a type to the variable 'if_condition_117550' (line 409)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 409, 12), 'if_condition_117550', if_condition_117550)
    # SSA begins for if statement (line 409)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 410)
    # Processing the call arguments (line 410)
    str_117552 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 410, 33), 'str', 'allow_pickle=False, but file does not contain non-pickled data')
    # Processing the call keyword arguments (line 410)
    kwargs_117553 = {}
    # Getting the type of 'ValueError' (line 410)
    ValueError_117551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 22), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 410)
    ValueError_call_result_117554 = invoke(stypy.reporting.localization.Localization(__file__, 410, 22), ValueError_117551, *[str_117552], **kwargs_117553)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 410, 16), ValueError_call_result_117554, 'raise parameter', BaseException)
    # SSA join for if statement (line 409)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # SSA begins for try-except statement (line 412)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Call to load(...): (line 413)
    # Processing the call arguments (line 413)
    # Getting the type of 'fid' (line 413)
    fid_117557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 35), 'fid', False)
    # Processing the call keyword arguments (line 413)
    # Getting the type of 'pickle_kwargs' (line 413)
    pickle_kwargs_117558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 42), 'pickle_kwargs', False)
    kwargs_117559 = {'pickle_kwargs_117558': pickle_kwargs_117558}
    # Getting the type of 'pickle' (line 413)
    pickle_117555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 23), 'pickle', False)
    # Obtaining the member 'load' of a type (line 413)
    load_117556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 413, 23), pickle_117555, 'load')
    # Calling load(args, kwargs) (line 413)
    load_call_result_117560 = invoke(stypy.reporting.localization.Localization(__file__, 413, 23), load_117556, *[fid_117557], **kwargs_117559)
    
    # Assigning a type to the variable 'stypy_return_type' (line 413)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 413, 16), 'stypy_return_type', load_call_result_117560)
    # SSA branch for the except part of a try statement (line 412)
    # SSA branch for the except '<any exception>' branch of a try statement (line 412)
    module_type_store.open_ssa_branch('except')
    
    # Call to IOError(...): (line 415)
    # Processing the call arguments (line 415)
    str_117562 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 416, 20), 'str', 'Failed to interpret file %s as a pickle')
    
    # Call to repr(...): (line 416)
    # Processing the call arguments (line 416)
    # Getting the type of 'file' (line 416)
    file_117564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 416, 69), 'file', False)
    # Processing the call keyword arguments (line 416)
    kwargs_117565 = {}
    # Getting the type of 'repr' (line 416)
    repr_117563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 416, 64), 'repr', False)
    # Calling repr(args, kwargs) (line 416)
    repr_call_result_117566 = invoke(stypy.reporting.localization.Localization(__file__, 416, 64), repr_117563, *[file_117564], **kwargs_117565)
    
    # Applying the binary operator '%' (line 416)
    result_mod_117567 = python_operator(stypy.reporting.localization.Localization(__file__, 416, 20), '%', str_117562, repr_call_result_117566)
    
    # Processing the call keyword arguments (line 415)
    kwargs_117568 = {}
    # Getting the type of 'IOError' (line 415)
    IOError_117561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 22), 'IOError', False)
    # Calling IOError(args, kwargs) (line 415)
    IOError_call_result_117569 = invoke(stypy.reporting.localization.Localization(__file__, 415, 22), IOError_117561, *[result_mod_117567], **kwargs_117568)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 415, 16), IOError_call_result_117569, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 412)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 400)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 393)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # finally branch of the try-finally block (line 387)
    
    # Getting the type of 'own_fid' (line 418)
    own_fid_117570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 11), 'own_fid')
    # Testing the type of an if condition (line 418)
    if_condition_117571 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 418, 8), own_fid_117570)
    # Assigning a type to the variable 'if_condition_117571' (line 418)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 418, 8), 'if_condition_117571', if_condition_117571)
    # SSA begins for if statement (line 418)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to close(...): (line 419)
    # Processing the call keyword arguments (line 419)
    kwargs_117574 = {}
    # Getting the type of 'fid' (line 419)
    fid_117572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 12), 'fid', False)
    # Obtaining the member 'close' of a type (line 419)
    close_117573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 419, 12), fid_117572, 'close')
    # Calling close(args, kwargs) (line 419)
    close_call_result_117575 = invoke(stypy.reporting.localization.Localization(__file__, 419, 12), close_117573, *[], **kwargs_117574)
    
    # SSA join for if statement (line 418)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # ################# End of 'load(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'load' in the type store
    # Getting the type of 'stypy_return_type' (line 257)
    stypy_return_type_117576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_117576)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'load'
    return stypy_return_type_117576

# Assigning a type to the variable 'load' (line 257)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 257, 0), 'load', load)

@norecursion
def save(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'True' (line 422)
    True_117577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 33), 'True')
    # Getting the type of 'True' (line 422)
    True_117578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 51), 'True')
    defaults = [True_117577, True_117578]
    # Create a new context for function 'save'
    module_type_store = module_type_store.open_function_context('save', 422, 0, False)
    
    # Passed parameters checking function
    save.stypy_localization = localization
    save.stypy_type_of_self = None
    save.stypy_type_store = module_type_store
    save.stypy_function_name = 'save'
    save.stypy_param_names_list = ['file', 'arr', 'allow_pickle', 'fix_imports']
    save.stypy_varargs_param_name = None
    save.stypy_kwargs_param_name = None
    save.stypy_call_defaults = defaults
    save.stypy_call_varargs = varargs
    save.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'save', ['file', 'arr', 'allow_pickle', 'fix_imports'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'save', localization, ['file', 'arr', 'allow_pickle', 'fix_imports'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'save(...)' code ##################

    str_117579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 472, (-1)), 'str', '\n    Save an array to a binary file in NumPy ``.npy`` format.\n\n    Parameters\n    ----------\n    file : file or str\n        File or filename to which the data is saved.  If file is a file-object,\n        then the filename is unchanged.  If file is a string, a ``.npy``\n        extension will be appended to the file name if it does not already\n        have one.\n    allow_pickle : bool, optional\n        Allow saving object arrays using Python pickles. Reasons for disallowing\n        pickles include security (loading pickled data can execute arbitrary\n        code) and portability (pickled objects may not be loadable on different\n        Python installations, for example if the stored objects require libraries\n        that are not available, and not all pickled data is compatible between\n        Python 2 and Python 3).\n        Default: True\n    fix_imports : bool, optional\n        Only useful in forcing objects in object arrays on Python 3 to be\n        pickled in a Python 2 compatible way. If `fix_imports` is True, pickle\n        will try to map the new Python 3 names to the old module names used in\n        Python 2, so that the pickle data stream is readable with Python 2.\n    arr : array_like\n        Array data to be saved.\n\n    See Also\n    --------\n    savez : Save several arrays into a ``.npz`` archive\n    savetxt, load\n\n    Notes\n    -----\n    For a description of the ``.npy`` format, see the module docstring\n    of `numpy.lib.format` or the Numpy Enhancement Proposal\n    http://docs.scipy.org/doc/numpy/neps/npy-format.html\n\n    Examples\n    --------\n    >>> from tempfile import TemporaryFile\n    >>> outfile = TemporaryFile()\n\n    >>> x = np.arange(10)\n    >>> np.save(outfile, x)\n\n    >>> outfile.seek(0) # Only needed here to simulate closing & reopening file\n    >>> np.load(outfile)\n    array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n    ')
    
    # Assigning a Name to a Name (line 473):
    
    # Assigning a Name to a Name (line 473):
    # Getting the type of 'False' (line 473)
    False_117580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 14), 'False')
    # Assigning a type to the variable 'own_fid' (line 473)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 473, 4), 'own_fid', False_117580)
    
    # Type idiom detected: calculating its left and rigth part (line 474)
    # Getting the type of 'basestring' (line 474)
    basestring_117581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 24), 'basestring')
    # Getting the type of 'file' (line 474)
    file_117582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 18), 'file')
    
    (may_be_117583, more_types_in_union_117584) = may_be_subtype(basestring_117581, file_117582)

    if may_be_117583:

        if more_types_in_union_117584:
            # Runtime conditional SSA (line 474)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'file' (line 474)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 474, 4), 'file', remove_not_subtype_from_union(file_117582, basestring))
        
        
        
        # Call to endswith(...): (line 475)
        # Processing the call arguments (line 475)
        str_117587 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 475, 29), 'str', '.npy')
        # Processing the call keyword arguments (line 475)
        kwargs_117588 = {}
        # Getting the type of 'file' (line 475)
        file_117585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 15), 'file', False)
        # Obtaining the member 'endswith' of a type (line 475)
        endswith_117586 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 475, 15), file_117585, 'endswith')
        # Calling endswith(args, kwargs) (line 475)
        endswith_call_result_117589 = invoke(stypy.reporting.localization.Localization(__file__, 475, 15), endswith_117586, *[str_117587], **kwargs_117588)
        
        # Applying the 'not' unary operator (line 475)
        result_not__117590 = python_operator(stypy.reporting.localization.Localization(__file__, 475, 11), 'not', endswith_call_result_117589)
        
        # Testing the type of an if condition (line 475)
        if_condition_117591 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 475, 8), result_not__117590)
        # Assigning a type to the variable 'if_condition_117591' (line 475)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 475, 8), 'if_condition_117591', if_condition_117591)
        # SSA begins for if statement (line 475)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 476):
        
        # Assigning a BinOp to a Name (line 476):
        # Getting the type of 'file' (line 476)
        file_117592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 19), 'file')
        str_117593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 476, 26), 'str', '.npy')
        # Applying the binary operator '+' (line 476)
        result_add_117594 = python_operator(stypy.reporting.localization.Localization(__file__, 476, 19), '+', file_117592, str_117593)
        
        # Assigning a type to the variable 'file' (line 476)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 476, 12), 'file', result_add_117594)
        # SSA join for if statement (line 475)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 477):
        
        # Assigning a Call to a Name (line 477):
        
        # Call to open(...): (line 477)
        # Processing the call arguments (line 477)
        # Getting the type of 'file' (line 477)
        file_117596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 19), 'file', False)
        str_117597 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 477, 25), 'str', 'wb')
        # Processing the call keyword arguments (line 477)
        kwargs_117598 = {}
        # Getting the type of 'open' (line 477)
        open_117595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 14), 'open', False)
        # Calling open(args, kwargs) (line 477)
        open_call_result_117599 = invoke(stypy.reporting.localization.Localization(__file__, 477, 14), open_117595, *[file_117596, str_117597], **kwargs_117598)
        
        # Assigning a type to the variable 'fid' (line 477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 477, 8), 'fid', open_call_result_117599)
        
        # Assigning a Name to a Name (line 478):
        
        # Assigning a Name to a Name (line 478):
        # Getting the type of 'True' (line 478)
        True_117600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 478, 18), 'True')
        # Assigning a type to the variable 'own_fid' (line 478)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 478, 8), 'own_fid', True_117600)

        if more_types_in_union_117584:
            # Runtime conditional SSA for else branch (line 474)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_117583) or more_types_in_union_117584):
        # Assigning a type to the variable 'file' (line 474)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 474, 4), 'file', remove_subtype_from_union(file_117582, basestring))
        
        # Assigning a Name to a Name (line 480):
        
        # Assigning a Name to a Name (line 480):
        # Getting the type of 'file' (line 480)
        file_117601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 14), 'file')
        # Assigning a type to the variable 'fid' (line 480)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 480, 8), 'fid', file_117601)

        if (may_be_117583 and more_types_in_union_117584):
            # SSA join for if statement (line 474)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    
    # Obtaining the type of the subscript
    int_117602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 482, 24), 'int')
    # Getting the type of 'sys' (line 482)
    sys_117603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 7), 'sys')
    # Obtaining the member 'version_info' of a type (line 482)
    version_info_117604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 482, 7), sys_117603, 'version_info')
    # Obtaining the member '__getitem__' of a type (line 482)
    getitem___117605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 482, 7), version_info_117604, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 482)
    subscript_call_result_117606 = invoke(stypy.reporting.localization.Localization(__file__, 482, 7), getitem___117605, int_117602)
    
    int_117607 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 482, 30), 'int')
    # Applying the binary operator '>=' (line 482)
    result_ge_117608 = python_operator(stypy.reporting.localization.Localization(__file__, 482, 7), '>=', subscript_call_result_117606, int_117607)
    
    # Testing the type of an if condition (line 482)
    if_condition_117609 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 482, 4), result_ge_117608)
    # Assigning a type to the variable 'if_condition_117609' (line 482)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 482, 4), 'if_condition_117609', if_condition_117609)
    # SSA begins for if statement (line 482)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 483):
    
    # Assigning a Call to a Name (line 483):
    
    # Call to dict(...): (line 483)
    # Processing the call keyword arguments (line 483)
    # Getting the type of 'fix_imports' (line 483)
    fix_imports_117611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 41), 'fix_imports', False)
    keyword_117612 = fix_imports_117611
    kwargs_117613 = {'fix_imports': keyword_117612}
    # Getting the type of 'dict' (line 483)
    dict_117610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 24), 'dict', False)
    # Calling dict(args, kwargs) (line 483)
    dict_call_result_117614 = invoke(stypy.reporting.localization.Localization(__file__, 483, 24), dict_117610, *[], **kwargs_117613)
    
    # Assigning a type to the variable 'pickle_kwargs' (line 483)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 483, 8), 'pickle_kwargs', dict_call_result_117614)
    # SSA branch for the else part of an if statement (line 482)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 486):
    
    # Assigning a Name to a Name (line 486):
    # Getting the type of 'None' (line 486)
    None_117615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 24), 'None')
    # Assigning a type to the variable 'pickle_kwargs' (line 486)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 486, 8), 'pickle_kwargs', None_117615)
    # SSA join for if statement (line 482)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Try-finally block (line 488)
    
    # Assigning a Call to a Name (line 489):
    
    # Assigning a Call to a Name (line 489):
    
    # Call to asanyarray(...): (line 489)
    # Processing the call arguments (line 489)
    # Getting the type of 'arr' (line 489)
    arr_117618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 28), 'arr', False)
    # Processing the call keyword arguments (line 489)
    kwargs_117619 = {}
    # Getting the type of 'np' (line 489)
    np_117616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 14), 'np', False)
    # Obtaining the member 'asanyarray' of a type (line 489)
    asanyarray_117617 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 489, 14), np_117616, 'asanyarray')
    # Calling asanyarray(args, kwargs) (line 489)
    asanyarray_call_result_117620 = invoke(stypy.reporting.localization.Localization(__file__, 489, 14), asanyarray_117617, *[arr_117618], **kwargs_117619)
    
    # Assigning a type to the variable 'arr' (line 489)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 489, 8), 'arr', asanyarray_call_result_117620)
    
    # Call to write_array(...): (line 490)
    # Processing the call arguments (line 490)
    # Getting the type of 'fid' (line 490)
    fid_117623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 27), 'fid', False)
    # Getting the type of 'arr' (line 490)
    arr_117624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 32), 'arr', False)
    # Processing the call keyword arguments (line 490)
    # Getting the type of 'allow_pickle' (line 490)
    allow_pickle_117625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 50), 'allow_pickle', False)
    keyword_117626 = allow_pickle_117625
    # Getting the type of 'pickle_kwargs' (line 491)
    pickle_kwargs_117627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 41), 'pickle_kwargs', False)
    keyword_117628 = pickle_kwargs_117627
    kwargs_117629 = {'pickle_kwargs': keyword_117628, 'allow_pickle': keyword_117626}
    # Getting the type of 'format' (line 490)
    format_117621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 8), 'format', False)
    # Obtaining the member 'write_array' of a type (line 490)
    write_array_117622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 490, 8), format_117621, 'write_array')
    # Calling write_array(args, kwargs) (line 490)
    write_array_call_result_117630 = invoke(stypy.reporting.localization.Localization(__file__, 490, 8), write_array_117622, *[fid_117623, arr_117624], **kwargs_117629)
    
    
    # finally branch of the try-finally block (line 488)
    
    # Getting the type of 'own_fid' (line 493)
    own_fid_117631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 11), 'own_fid')
    # Testing the type of an if condition (line 493)
    if_condition_117632 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 493, 8), own_fid_117631)
    # Assigning a type to the variable 'if_condition_117632' (line 493)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 493, 8), 'if_condition_117632', if_condition_117632)
    # SSA begins for if statement (line 493)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to close(...): (line 494)
    # Processing the call keyword arguments (line 494)
    kwargs_117635 = {}
    # Getting the type of 'fid' (line 494)
    fid_117633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 12), 'fid', False)
    # Obtaining the member 'close' of a type (line 494)
    close_117634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 494, 12), fid_117633, 'close')
    # Calling close(args, kwargs) (line 494)
    close_call_result_117636 = invoke(stypy.reporting.localization.Localization(__file__, 494, 12), close_117634, *[], **kwargs_117635)
    
    # SSA join for if statement (line 493)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # ################# End of 'save(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'save' in the type store
    # Getting the type of 'stypy_return_type' (line 422)
    stypy_return_type_117637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_117637)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'save'
    return stypy_return_type_117637

# Assigning a type to the variable 'save' (line 422)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 422, 0), 'save', save)

@norecursion
def savez(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'savez'
    module_type_store = module_type_store.open_function_context('savez', 497, 0, False)
    
    # Passed parameters checking function
    savez.stypy_localization = localization
    savez.stypy_type_of_self = None
    savez.stypy_type_store = module_type_store
    savez.stypy_function_name = 'savez'
    savez.stypy_param_names_list = ['file']
    savez.stypy_varargs_param_name = 'args'
    savez.stypy_kwargs_param_name = 'kwds'
    savez.stypy_call_defaults = defaults
    savez.stypy_call_varargs = varargs
    savez.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'savez', ['file'], 'args', 'kwds', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'savez', localization, ['file'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'savez(...)' code ##################

    str_117638 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 573, (-1)), 'str', '\n    Save several arrays into a single file in uncompressed ``.npz`` format.\n\n    If arguments are passed in with no keywords, the corresponding variable\n    names, in the ``.npz`` file, are \'arr_0\', \'arr_1\', etc. If keyword\n    arguments are given, the corresponding variable names, in the ``.npz``\n    file will match the keyword names.\n\n    Parameters\n    ----------\n    file : str or file\n        Either the file name (string) or an open file (file-like object)\n        where the data will be saved. If file is a string, the ``.npz``\n        extension will be appended to the file name if it is not already there.\n    args : Arguments, optional\n        Arrays to save to the file. Since it is not possible for Python to\n        know the names of the arrays outside `savez`, the arrays will be saved\n        with names "arr_0", "arr_1", and so on. These arguments can be any\n        expression.\n    kwds : Keyword arguments, optional\n        Arrays to save to the file. Arrays will be saved in the file with the\n        keyword names.\n\n    Returns\n    -------\n    None\n\n    See Also\n    --------\n    save : Save a single array to a binary file in NumPy format.\n    savetxt : Save an array to a file as plain text.\n    savez_compressed : Save several arrays into a compressed ``.npz`` archive\n\n    Notes\n    -----\n    The ``.npz`` file format is a zipped archive of files named after the\n    variables they contain.  The archive is not compressed and each file\n    in the archive contains one variable in ``.npy`` format. For a\n    description of the ``.npy`` format, see `numpy.lib.format` or the\n    Numpy Enhancement Proposal\n    http://docs.scipy.org/doc/numpy/neps/npy-format.html\n\n    When opening the saved ``.npz`` file with `load` a `NpzFile` object is\n    returned. This is a dictionary-like object which can be queried for\n    its list of arrays (with the ``.files`` attribute), and for the arrays\n    themselves.\n\n    Examples\n    --------\n    >>> from tempfile import TemporaryFile\n    >>> outfile = TemporaryFile()\n    >>> x = np.arange(10)\n    >>> y = np.sin(x)\n\n    Using `savez` with \\*args, the arrays are saved with default names.\n\n    >>> np.savez(outfile, x, y)\n    >>> outfile.seek(0) # Only needed here to simulate closing & reopening file\n    >>> npzfile = np.load(outfile)\n    >>> npzfile.files\n    [\'arr_1\', \'arr_0\']\n    >>> npzfile[\'arr_0\']\n    array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n    Using `savez` with \\**kwds, the arrays are saved with the keyword names.\n\n    >>> outfile = TemporaryFile()\n    >>> np.savez(outfile, x=x, y=y)\n    >>> outfile.seek(0)\n    >>> npzfile = np.load(outfile)\n    >>> npzfile.files\n    [\'y\', \'x\']\n    >>> npzfile[\'x\']\n    array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n    ')
    
    # Call to _savez(...): (line 574)
    # Processing the call arguments (line 574)
    # Getting the type of 'file' (line 574)
    file_117640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 11), 'file', False)
    # Getting the type of 'args' (line 574)
    args_117641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 17), 'args', False)
    # Getting the type of 'kwds' (line 574)
    kwds_117642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 23), 'kwds', False)
    # Getting the type of 'False' (line 574)
    False_117643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 29), 'False', False)
    # Processing the call keyword arguments (line 574)
    kwargs_117644 = {}
    # Getting the type of '_savez' (line 574)
    _savez_117639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 4), '_savez', False)
    # Calling _savez(args, kwargs) (line 574)
    _savez_call_result_117645 = invoke(stypy.reporting.localization.Localization(__file__, 574, 4), _savez_117639, *[file_117640, args_117641, kwds_117642, False_117643], **kwargs_117644)
    
    
    # ################# End of 'savez(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'savez' in the type store
    # Getting the type of 'stypy_return_type' (line 497)
    stypy_return_type_117646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_117646)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'savez'
    return stypy_return_type_117646

# Assigning a type to the variable 'savez' (line 497)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 497, 0), 'savez', savez)

@norecursion
def savez_compressed(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'savez_compressed'
    module_type_store = module_type_store.open_function_context('savez_compressed', 577, 0, False)
    
    # Passed parameters checking function
    savez_compressed.stypy_localization = localization
    savez_compressed.stypy_type_of_self = None
    savez_compressed.stypy_type_store = module_type_store
    savez_compressed.stypy_function_name = 'savez_compressed'
    savez_compressed.stypy_param_names_list = ['file']
    savez_compressed.stypy_varargs_param_name = 'args'
    savez_compressed.stypy_kwargs_param_name = 'kwds'
    savez_compressed.stypy_call_defaults = defaults
    savez_compressed.stypy_call_varargs = varargs
    savez_compressed.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'savez_compressed', ['file'], 'args', 'kwds', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'savez_compressed', localization, ['file'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'savez_compressed(...)' code ##################

    str_117647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 599, (-1)), 'str', '\n    Save several arrays into a single file in compressed ``.npz`` format.\n\n    If keyword arguments are given, then filenames are taken from the keywords.\n    If arguments are passed in with no keywords, then stored file names are\n    arr_0, arr_1, etc.\n\n    Parameters\n    ----------\n    file : str\n        File name of ``.npz`` file.\n    args : Arguments\n        Function arguments.\n    kwds : Keyword arguments\n        Keywords.\n\n    See Also\n    --------\n    numpy.savez : Save several arrays into an uncompressed ``.npz`` file format\n    numpy.load : Load the files created by savez_compressed.\n\n    ')
    
    # Call to _savez(...): (line 600)
    # Processing the call arguments (line 600)
    # Getting the type of 'file' (line 600)
    file_117649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 11), 'file', False)
    # Getting the type of 'args' (line 600)
    args_117650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 17), 'args', False)
    # Getting the type of 'kwds' (line 600)
    kwds_117651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 23), 'kwds', False)
    # Getting the type of 'True' (line 600)
    True_117652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 29), 'True', False)
    # Processing the call keyword arguments (line 600)
    kwargs_117653 = {}
    # Getting the type of '_savez' (line 600)
    _savez_117648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 4), '_savez', False)
    # Calling _savez(args, kwargs) (line 600)
    _savez_call_result_117654 = invoke(stypy.reporting.localization.Localization(__file__, 600, 4), _savez_117648, *[file_117649, args_117650, kwds_117651, True_117652], **kwargs_117653)
    
    
    # ################# End of 'savez_compressed(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'savez_compressed' in the type store
    # Getting the type of 'stypy_return_type' (line 577)
    stypy_return_type_117655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_117655)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'savez_compressed'
    return stypy_return_type_117655

# Assigning a type to the variable 'savez_compressed' (line 577)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 577, 0), 'savez_compressed', savez_compressed)

@norecursion
def _savez(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'True' (line 603)
    True_117656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 52), 'True')
    # Getting the type of 'None' (line 603)
    None_117657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 72), 'None')
    defaults = [True_117656, None_117657]
    # Create a new context for function '_savez'
    module_type_store = module_type_store.open_function_context('_savez', 603, 0, False)
    
    # Passed parameters checking function
    _savez.stypy_localization = localization
    _savez.stypy_type_of_self = None
    _savez.stypy_type_store = module_type_store
    _savez.stypy_function_name = '_savez'
    _savez.stypy_param_names_list = ['file', 'args', 'kwds', 'compress', 'allow_pickle', 'pickle_kwargs']
    _savez.stypy_varargs_param_name = None
    _savez.stypy_kwargs_param_name = None
    _savez.stypy_call_defaults = defaults
    _savez.stypy_call_varargs = varargs
    _savez.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_savez', ['file', 'args', 'kwds', 'compress', 'allow_pickle', 'pickle_kwargs'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_savez', localization, ['file', 'args', 'kwds', 'compress', 'allow_pickle', 'pickle_kwargs'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_savez(...)' code ##################

    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 606, 4))
    
    # 'import zipfile' statement (line 606)
    import zipfile

    import_module(stypy.reporting.localization.Localization(__file__, 606, 4), 'zipfile', zipfile, module_type_store)
    
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 608, 4))
    
    # 'import tempfile' statement (line 608)
    import tempfile

    import_module(stypy.reporting.localization.Localization(__file__, 608, 4), 'tempfile', tempfile, module_type_store)
    
    
    # Type idiom detected: calculating its left and rigth part (line 610)
    # Getting the type of 'basestring' (line 610)
    basestring_117658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 24), 'basestring')
    # Getting the type of 'file' (line 610)
    file_117659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 18), 'file')
    
    (may_be_117660, more_types_in_union_117661) = may_be_subtype(basestring_117658, file_117659)

    if may_be_117660:

        if more_types_in_union_117661:
            # Runtime conditional SSA (line 610)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'file' (line 610)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 610, 4), 'file', remove_not_subtype_from_union(file_117659, basestring))
        
        
        
        # Call to endswith(...): (line 611)
        # Processing the call arguments (line 611)
        str_117664 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 611, 29), 'str', '.npz')
        # Processing the call keyword arguments (line 611)
        kwargs_117665 = {}
        # Getting the type of 'file' (line 611)
        file_117662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 15), 'file', False)
        # Obtaining the member 'endswith' of a type (line 611)
        endswith_117663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 611, 15), file_117662, 'endswith')
        # Calling endswith(args, kwargs) (line 611)
        endswith_call_result_117666 = invoke(stypy.reporting.localization.Localization(__file__, 611, 15), endswith_117663, *[str_117664], **kwargs_117665)
        
        # Applying the 'not' unary operator (line 611)
        result_not__117667 = python_operator(stypy.reporting.localization.Localization(__file__, 611, 11), 'not', endswith_call_result_117666)
        
        # Testing the type of an if condition (line 611)
        if_condition_117668 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 611, 8), result_not__117667)
        # Assigning a type to the variable 'if_condition_117668' (line 611)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 611, 8), 'if_condition_117668', if_condition_117668)
        # SSA begins for if statement (line 611)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 612):
        
        # Assigning a BinOp to a Name (line 612):
        # Getting the type of 'file' (line 612)
        file_117669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 19), 'file')
        str_117670 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 612, 26), 'str', '.npz')
        # Applying the binary operator '+' (line 612)
        result_add_117671 = python_operator(stypy.reporting.localization.Localization(__file__, 612, 19), '+', file_117669, str_117670)
        
        # Assigning a type to the variable 'file' (line 612)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 612, 12), 'file', result_add_117671)
        # SSA join for if statement (line 611)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_117661:
            # SSA join for if statement (line 610)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Name to a Name (line 614):
    
    # Assigning a Name to a Name (line 614):
    # Getting the type of 'kwds' (line 614)
    kwds_117672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 15), 'kwds')
    # Assigning a type to the variable 'namedict' (line 614)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 614, 4), 'namedict', kwds_117672)
    
    
    # Call to enumerate(...): (line 615)
    # Processing the call arguments (line 615)
    # Getting the type of 'args' (line 615)
    args_117674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 28), 'args', False)
    # Processing the call keyword arguments (line 615)
    kwargs_117675 = {}
    # Getting the type of 'enumerate' (line 615)
    enumerate_117673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 18), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 615)
    enumerate_call_result_117676 = invoke(stypy.reporting.localization.Localization(__file__, 615, 18), enumerate_117673, *[args_117674], **kwargs_117675)
    
    # Testing the type of a for loop iterable (line 615)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 615, 4), enumerate_call_result_117676)
    # Getting the type of the for loop variable (line 615)
    for_loop_var_117677 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 615, 4), enumerate_call_result_117676)
    # Assigning a type to the variable 'i' (line 615)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 615, 4), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 615, 4), for_loop_var_117677))
    # Assigning a type to the variable 'val' (line 615)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 615, 4), 'val', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 615, 4), for_loop_var_117677))
    # SSA begins for a for statement (line 615)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a BinOp to a Name (line 616):
    
    # Assigning a BinOp to a Name (line 616):
    str_117678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 616, 14), 'str', 'arr_%d')
    # Getting the type of 'i' (line 616)
    i_117679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 25), 'i')
    # Applying the binary operator '%' (line 616)
    result_mod_117680 = python_operator(stypy.reporting.localization.Localization(__file__, 616, 14), '%', str_117678, i_117679)
    
    # Assigning a type to the variable 'key' (line 616)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 616, 8), 'key', result_mod_117680)
    
    
    # Getting the type of 'key' (line 617)
    key_117681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 11), 'key')
    
    # Call to keys(...): (line 617)
    # Processing the call keyword arguments (line 617)
    kwargs_117684 = {}
    # Getting the type of 'namedict' (line 617)
    namedict_117682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 18), 'namedict', False)
    # Obtaining the member 'keys' of a type (line 617)
    keys_117683 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 617, 18), namedict_117682, 'keys')
    # Calling keys(args, kwargs) (line 617)
    keys_call_result_117685 = invoke(stypy.reporting.localization.Localization(__file__, 617, 18), keys_117683, *[], **kwargs_117684)
    
    # Applying the binary operator 'in' (line 617)
    result_contains_117686 = python_operator(stypy.reporting.localization.Localization(__file__, 617, 11), 'in', key_117681, keys_call_result_117685)
    
    # Testing the type of an if condition (line 617)
    if_condition_117687 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 617, 8), result_contains_117686)
    # Assigning a type to the variable 'if_condition_117687' (line 617)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 617, 8), 'if_condition_117687', if_condition_117687)
    # SSA begins for if statement (line 617)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 618)
    # Processing the call arguments (line 618)
    str_117689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 619, 16), 'str', 'Cannot use un-named variables and keyword %s')
    # Getting the type of 'key' (line 619)
    key_117690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 619, 65), 'key', False)
    # Applying the binary operator '%' (line 619)
    result_mod_117691 = python_operator(stypy.reporting.localization.Localization(__file__, 619, 16), '%', str_117689, key_117690)
    
    # Processing the call keyword arguments (line 618)
    kwargs_117692 = {}
    # Getting the type of 'ValueError' (line 618)
    ValueError_117688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 618)
    ValueError_call_result_117693 = invoke(stypy.reporting.localization.Localization(__file__, 618, 18), ValueError_117688, *[result_mod_117691], **kwargs_117692)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 618, 12), ValueError_call_result_117693, 'raise parameter', BaseException)
    # SSA join for if statement (line 617)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Subscript (line 620):
    
    # Assigning a Name to a Subscript (line 620):
    # Getting the type of 'val' (line 620)
    val_117694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 24), 'val')
    # Getting the type of 'namedict' (line 620)
    namedict_117695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 8), 'namedict')
    # Getting the type of 'key' (line 620)
    key_117696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 17), 'key')
    # Storing an element on a container (line 620)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 620, 8), namedict_117695, (key_117696, val_117694))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'compress' (line 622)
    compress_117697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 7), 'compress')
    # Testing the type of an if condition (line 622)
    if_condition_117698 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 622, 4), compress_117697)
    # Assigning a type to the variable 'if_condition_117698' (line 622)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 622, 4), 'if_condition_117698', if_condition_117698)
    # SSA begins for if statement (line 622)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 623):
    
    # Assigning a Attribute to a Name (line 623):
    # Getting the type of 'zipfile' (line 623)
    zipfile_117699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 22), 'zipfile')
    # Obtaining the member 'ZIP_DEFLATED' of a type (line 623)
    ZIP_DEFLATED_117700 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 623, 22), zipfile_117699, 'ZIP_DEFLATED')
    # Assigning a type to the variable 'compression' (line 623)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 623, 8), 'compression', ZIP_DEFLATED_117700)
    # SSA branch for the else part of an if statement (line 622)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Attribute to a Name (line 625):
    
    # Assigning a Attribute to a Name (line 625):
    # Getting the type of 'zipfile' (line 625)
    zipfile_117701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 22), 'zipfile')
    # Obtaining the member 'ZIP_STORED' of a type (line 625)
    ZIP_STORED_117702 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 625, 22), zipfile_117701, 'ZIP_STORED')
    # Assigning a type to the variable 'compression' (line 625)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 625, 8), 'compression', ZIP_STORED_117702)
    # SSA join for if statement (line 622)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 627):
    
    # Assigning a Call to a Name (line 627):
    
    # Call to zipfile_factory(...): (line 627)
    # Processing the call arguments (line 627)
    # Getting the type of 'file' (line 627)
    file_117704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 27), 'file', False)
    # Processing the call keyword arguments (line 627)
    str_117705 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 627, 38), 'str', 'w')
    keyword_117706 = str_117705
    # Getting the type of 'compression' (line 627)
    compression_117707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 55), 'compression', False)
    keyword_117708 = compression_117707
    kwargs_117709 = {'mode': keyword_117706, 'compression': keyword_117708}
    # Getting the type of 'zipfile_factory' (line 627)
    zipfile_factory_117703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 11), 'zipfile_factory', False)
    # Calling zipfile_factory(args, kwargs) (line 627)
    zipfile_factory_call_result_117710 = invoke(stypy.reporting.localization.Localization(__file__, 627, 11), zipfile_factory_117703, *[file_117704], **kwargs_117709)
    
    # Assigning a type to the variable 'zipf' (line 627)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 627, 4), 'zipf', zipfile_factory_call_result_117710)
    
    # Assigning a Call to a Tuple (line 630):
    
    # Assigning a Call to a Name:
    
    # Call to mkstemp(...): (line 630)
    # Processing the call keyword arguments (line 630)
    str_117713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 630, 42), 'str', '-numpy.npy')
    keyword_117714 = str_117713
    kwargs_117715 = {'suffix': keyword_117714}
    # Getting the type of 'tempfile' (line 630)
    tempfile_117711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 18), 'tempfile', False)
    # Obtaining the member 'mkstemp' of a type (line 630)
    mkstemp_117712 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 630, 18), tempfile_117711, 'mkstemp')
    # Calling mkstemp(args, kwargs) (line 630)
    mkstemp_call_result_117716 = invoke(stypy.reporting.localization.Localization(__file__, 630, 18), mkstemp_117712, *[], **kwargs_117715)
    
    # Assigning a type to the variable 'call_assignment_117132' (line 630)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 630, 4), 'call_assignment_117132', mkstemp_call_result_117716)
    
    # Assigning a Call to a Name (line 630):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_117719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 630, 4), 'int')
    # Processing the call keyword arguments
    kwargs_117720 = {}
    # Getting the type of 'call_assignment_117132' (line 630)
    call_assignment_117132_117717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 4), 'call_assignment_117132', False)
    # Obtaining the member '__getitem__' of a type (line 630)
    getitem___117718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 630, 4), call_assignment_117132_117717, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_117721 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___117718, *[int_117719], **kwargs_117720)
    
    # Assigning a type to the variable 'call_assignment_117133' (line 630)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 630, 4), 'call_assignment_117133', getitem___call_result_117721)
    
    # Assigning a Name to a Name (line 630):
    # Getting the type of 'call_assignment_117133' (line 630)
    call_assignment_117133_117722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 4), 'call_assignment_117133')
    # Assigning a type to the variable 'fd' (line 630)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 630, 4), 'fd', call_assignment_117133_117722)
    
    # Assigning a Call to a Name (line 630):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_117725 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 630, 4), 'int')
    # Processing the call keyword arguments
    kwargs_117726 = {}
    # Getting the type of 'call_assignment_117132' (line 630)
    call_assignment_117132_117723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 4), 'call_assignment_117132', False)
    # Obtaining the member '__getitem__' of a type (line 630)
    getitem___117724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 630, 4), call_assignment_117132_117723, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_117727 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___117724, *[int_117725], **kwargs_117726)
    
    # Assigning a type to the variable 'call_assignment_117134' (line 630)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 630, 4), 'call_assignment_117134', getitem___call_result_117727)
    
    # Assigning a Name to a Name (line 630):
    # Getting the type of 'call_assignment_117134' (line 630)
    call_assignment_117134_117728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 4), 'call_assignment_117134')
    # Assigning a type to the variable 'tmpfile' (line 630)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 630, 8), 'tmpfile', call_assignment_117134_117728)
    
    # Call to close(...): (line 631)
    # Processing the call arguments (line 631)
    # Getting the type of 'fd' (line 631)
    fd_117731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 631, 13), 'fd', False)
    # Processing the call keyword arguments (line 631)
    kwargs_117732 = {}
    # Getting the type of 'os' (line 631)
    os_117729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 631, 4), 'os', False)
    # Obtaining the member 'close' of a type (line 631)
    close_117730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 631, 4), os_117729, 'close')
    # Calling close(args, kwargs) (line 631)
    close_call_result_117733 = invoke(stypy.reporting.localization.Localization(__file__, 631, 4), close_117730, *[fd_117731], **kwargs_117732)
    
    
    # Try-finally block (line 632)
    
    
    # Call to items(...): (line 633)
    # Processing the call keyword arguments (line 633)
    kwargs_117736 = {}
    # Getting the type of 'namedict' (line 633)
    namedict_117734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 633, 24), 'namedict', False)
    # Obtaining the member 'items' of a type (line 633)
    items_117735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 633, 24), namedict_117734, 'items')
    # Calling items(args, kwargs) (line 633)
    items_call_result_117737 = invoke(stypy.reporting.localization.Localization(__file__, 633, 24), items_117735, *[], **kwargs_117736)
    
    # Testing the type of a for loop iterable (line 633)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 633, 8), items_call_result_117737)
    # Getting the type of the for loop variable (line 633)
    for_loop_var_117738 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 633, 8), items_call_result_117737)
    # Assigning a type to the variable 'key' (line 633)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 633, 8), 'key', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 633, 8), for_loop_var_117738))
    # Assigning a type to the variable 'val' (line 633)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 633, 8), 'val', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 633, 8), for_loop_var_117738))
    # SSA begins for a for statement (line 633)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a BinOp to a Name (line 634):
    
    # Assigning a BinOp to a Name (line 634):
    # Getting the type of 'key' (line 634)
    key_117739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 20), 'key')
    str_117740 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 634, 26), 'str', '.npy')
    # Applying the binary operator '+' (line 634)
    result_add_117741 = python_operator(stypy.reporting.localization.Localization(__file__, 634, 20), '+', key_117739, str_117740)
    
    # Assigning a type to the variable 'fname' (line 634)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 634, 12), 'fname', result_add_117741)
    
    # Assigning a Call to a Name (line 635):
    
    # Assigning a Call to a Name (line 635):
    
    # Call to open(...): (line 635)
    # Processing the call arguments (line 635)
    # Getting the type of 'tmpfile' (line 635)
    tmpfile_117743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 23), 'tmpfile', False)
    str_117744 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 635, 32), 'str', 'wb')
    # Processing the call keyword arguments (line 635)
    kwargs_117745 = {}
    # Getting the type of 'open' (line 635)
    open_117742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 18), 'open', False)
    # Calling open(args, kwargs) (line 635)
    open_call_result_117746 = invoke(stypy.reporting.localization.Localization(__file__, 635, 18), open_117742, *[tmpfile_117743, str_117744], **kwargs_117745)
    
    # Assigning a type to the variable 'fid' (line 635)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 635, 12), 'fid', open_call_result_117746)
    
    # Try-finally block (line 636)
    
    # Call to write_array(...): (line 637)
    # Processing the call arguments (line 637)
    # Getting the type of 'fid' (line 637)
    fid_117749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 35), 'fid', False)
    
    # Call to asanyarray(...): (line 637)
    # Processing the call arguments (line 637)
    # Getting the type of 'val' (line 637)
    val_117752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 54), 'val', False)
    # Processing the call keyword arguments (line 637)
    kwargs_117753 = {}
    # Getting the type of 'np' (line 637)
    np_117750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 40), 'np', False)
    # Obtaining the member 'asanyarray' of a type (line 637)
    asanyarray_117751 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 637, 40), np_117750, 'asanyarray')
    # Calling asanyarray(args, kwargs) (line 637)
    asanyarray_call_result_117754 = invoke(stypy.reporting.localization.Localization(__file__, 637, 40), asanyarray_117751, *[val_117752], **kwargs_117753)
    
    # Processing the call keyword arguments (line 637)
    # Getting the type of 'allow_pickle' (line 638)
    allow_pickle_117755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 48), 'allow_pickle', False)
    keyword_117756 = allow_pickle_117755
    # Getting the type of 'pickle_kwargs' (line 639)
    pickle_kwargs_117757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 49), 'pickle_kwargs', False)
    keyword_117758 = pickle_kwargs_117757
    kwargs_117759 = {'pickle_kwargs': keyword_117758, 'allow_pickle': keyword_117756}
    # Getting the type of 'format' (line 637)
    format_117747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 637, 16), 'format', False)
    # Obtaining the member 'write_array' of a type (line 637)
    write_array_117748 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 637, 16), format_117747, 'write_array')
    # Calling write_array(args, kwargs) (line 637)
    write_array_call_result_117760 = invoke(stypy.reporting.localization.Localization(__file__, 637, 16), write_array_117748, *[fid_117749, asanyarray_call_result_117754], **kwargs_117759)
    
    
    # Call to close(...): (line 640)
    # Processing the call keyword arguments (line 640)
    kwargs_117763 = {}
    # Getting the type of 'fid' (line 640)
    fid_117761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 16), 'fid', False)
    # Obtaining the member 'close' of a type (line 640)
    close_117762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 640, 16), fid_117761, 'close')
    # Calling close(args, kwargs) (line 640)
    close_call_result_117764 = invoke(stypy.reporting.localization.Localization(__file__, 640, 16), close_117762, *[], **kwargs_117763)
    
    
    # Assigning a Name to a Name (line 641):
    
    # Assigning a Name to a Name (line 641):
    # Getting the type of 'None' (line 641)
    None_117765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 22), 'None')
    # Assigning a type to the variable 'fid' (line 641)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 641, 16), 'fid', None_117765)
    
    # Call to write(...): (line 642)
    # Processing the call arguments (line 642)
    # Getting the type of 'tmpfile' (line 642)
    tmpfile_117768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 27), 'tmpfile', False)
    # Processing the call keyword arguments (line 642)
    # Getting the type of 'fname' (line 642)
    fname_117769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 44), 'fname', False)
    keyword_117770 = fname_117769
    kwargs_117771 = {'arcname': keyword_117770}
    # Getting the type of 'zipf' (line 642)
    zipf_117766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 16), 'zipf', False)
    # Obtaining the member 'write' of a type (line 642)
    write_117767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 642, 16), zipf_117766, 'write')
    # Calling write(args, kwargs) (line 642)
    write_call_result_117772 = invoke(stypy.reporting.localization.Localization(__file__, 642, 16), write_117767, *[tmpfile_117768], **kwargs_117771)
    
    
    # finally branch of the try-finally block (line 636)
    
    # Getting the type of 'fid' (line 644)
    fid_117773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 644, 19), 'fid')
    # Testing the type of an if condition (line 644)
    if_condition_117774 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 644, 16), fid_117773)
    # Assigning a type to the variable 'if_condition_117774' (line 644)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 644, 16), 'if_condition_117774', if_condition_117774)
    # SSA begins for if statement (line 644)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to close(...): (line 645)
    # Processing the call keyword arguments (line 645)
    kwargs_117777 = {}
    # Getting the type of 'fid' (line 645)
    fid_117775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 645, 20), 'fid', False)
    # Obtaining the member 'close' of a type (line 645)
    close_117776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 645, 20), fid_117775, 'close')
    # Calling close(args, kwargs) (line 645)
    close_call_result_117778 = invoke(stypy.reporting.localization.Localization(__file__, 645, 20), close_117776, *[], **kwargs_117777)
    
    # SSA join for if statement (line 644)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # finally branch of the try-finally block (line 632)
    
    # Call to remove(...): (line 647)
    # Processing the call arguments (line 647)
    # Getting the type of 'tmpfile' (line 647)
    tmpfile_117781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 18), 'tmpfile', False)
    # Processing the call keyword arguments (line 647)
    kwargs_117782 = {}
    # Getting the type of 'os' (line 647)
    os_117779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 8), 'os', False)
    # Obtaining the member 'remove' of a type (line 647)
    remove_117780 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 647, 8), os_117779, 'remove')
    # Calling remove(args, kwargs) (line 647)
    remove_call_result_117783 = invoke(stypy.reporting.localization.Localization(__file__, 647, 8), remove_117780, *[tmpfile_117781], **kwargs_117782)
    
    
    
    # Call to close(...): (line 649)
    # Processing the call keyword arguments (line 649)
    kwargs_117786 = {}
    # Getting the type of 'zipf' (line 649)
    zipf_117784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 4), 'zipf', False)
    # Obtaining the member 'close' of a type (line 649)
    close_117785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 649, 4), zipf_117784, 'close')
    # Calling close(args, kwargs) (line 649)
    close_call_result_117787 = invoke(stypy.reporting.localization.Localization(__file__, 649, 4), close_117785, *[], **kwargs_117786)
    
    
    # ################# End of '_savez(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_savez' in the type store
    # Getting the type of 'stypy_return_type' (line 603)
    stypy_return_type_117788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_117788)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_savez'
    return stypy_return_type_117788

# Assigning a type to the variable '_savez' (line 603)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 603, 0), '_savez', _savez)

@norecursion
def _getconv(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_getconv'
    module_type_store = module_type_store.open_function_context('_getconv', 652, 0, False)
    
    # Passed parameters checking function
    _getconv.stypy_localization = localization
    _getconv.stypy_type_of_self = None
    _getconv.stypy_type_store = module_type_store
    _getconv.stypy_function_name = '_getconv'
    _getconv.stypy_param_names_list = ['dtype']
    _getconv.stypy_varargs_param_name = None
    _getconv.stypy_kwargs_param_name = None
    _getconv.stypy_call_defaults = defaults
    _getconv.stypy_call_varargs = varargs
    _getconv.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_getconv', ['dtype'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_getconv', localization, ['dtype'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_getconv(...)' code ##################

    str_117789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 653, 4), 'str', ' Find the correct dtype converter. Adapted from matplotlib ')

    @norecursion
    def floatconv(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'floatconv'
        module_type_store = module_type_store.open_function_context('floatconv', 655, 4, False)
        
        # Passed parameters checking function
        floatconv.stypy_localization = localization
        floatconv.stypy_type_of_self = None
        floatconv.stypy_type_store = module_type_store
        floatconv.stypy_function_name = 'floatconv'
        floatconv.stypy_param_names_list = ['x']
        floatconv.stypy_varargs_param_name = None
        floatconv.stypy_kwargs_param_name = None
        floatconv.stypy_call_defaults = defaults
        floatconv.stypy_call_varargs = varargs
        floatconv.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'floatconv', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'floatconv', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'floatconv(...)' code ##################

        
        # Call to lower(...): (line 656)
        # Processing the call keyword arguments (line 656)
        kwargs_117792 = {}
        # Getting the type of 'x' (line 656)
        x_117790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 8), 'x', False)
        # Obtaining the member 'lower' of a type (line 656)
        lower_117791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 656, 8), x_117790, 'lower')
        # Calling lower(args, kwargs) (line 656)
        lower_call_result_117793 = invoke(stypy.reporting.localization.Localization(__file__, 656, 8), lower_117791, *[], **kwargs_117792)
        
        
        
        str_117794 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 657, 11), 'str', '0x')
        # Getting the type of 'x' (line 657)
        x_117795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 657, 20), 'x')
        # Applying the binary operator 'in' (line 657)
        result_contains_117796 = python_operator(stypy.reporting.localization.Localization(__file__, 657, 11), 'in', str_117794, x_117795)
        
        # Testing the type of an if condition (line 657)
        if_condition_117797 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 657, 8), result_contains_117796)
        # Assigning a type to the variable 'if_condition_117797' (line 657)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 657, 8), 'if_condition_117797', if_condition_117797)
        # SSA begins for if statement (line 657)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to fromhex(...): (line 658)
        # Processing the call arguments (line 658)
        
        # Call to asstr(...): (line 658)
        # Processing the call arguments (line 658)
        # Getting the type of 'x' (line 658)
        x_117801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 39), 'x', False)
        # Processing the call keyword arguments (line 658)
        kwargs_117802 = {}
        # Getting the type of 'asstr' (line 658)
        asstr_117800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 33), 'asstr', False)
        # Calling asstr(args, kwargs) (line 658)
        asstr_call_result_117803 = invoke(stypy.reporting.localization.Localization(__file__, 658, 33), asstr_117800, *[x_117801], **kwargs_117802)
        
        # Processing the call keyword arguments (line 658)
        kwargs_117804 = {}
        # Getting the type of 'float' (line 658)
        float_117798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 19), 'float', False)
        # Obtaining the member 'fromhex' of a type (line 658)
        fromhex_117799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 658, 19), float_117798, 'fromhex')
        # Calling fromhex(args, kwargs) (line 658)
        fromhex_call_result_117805 = invoke(stypy.reporting.localization.Localization(__file__, 658, 19), fromhex_117799, *[asstr_call_result_117803], **kwargs_117804)
        
        # Assigning a type to the variable 'stypy_return_type' (line 658)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 658, 12), 'stypy_return_type', fromhex_call_result_117805)
        # SSA join for if statement (line 657)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to float(...): (line 659)
        # Processing the call arguments (line 659)
        # Getting the type of 'x' (line 659)
        x_117807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 659, 21), 'x', False)
        # Processing the call keyword arguments (line 659)
        kwargs_117808 = {}
        # Getting the type of 'float' (line 659)
        float_117806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 659, 15), 'float', False)
        # Calling float(args, kwargs) (line 659)
        float_call_result_117809 = invoke(stypy.reporting.localization.Localization(__file__, 659, 15), float_117806, *[x_117807], **kwargs_117808)
        
        # Assigning a type to the variable 'stypy_return_type' (line 659)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 659, 8), 'stypy_return_type', float_call_result_117809)
        
        # ################# End of 'floatconv(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'floatconv' in the type store
        # Getting the type of 'stypy_return_type' (line 655)
        stypy_return_type_117810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 655, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_117810)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'floatconv'
        return stypy_return_type_117810

    # Assigning a type to the variable 'floatconv' (line 655)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 655, 4), 'floatconv', floatconv)
    
    # Assigning a Attribute to a Name (line 661):
    
    # Assigning a Attribute to a Name (line 661):
    # Getting the type of 'dtype' (line 661)
    dtype_117811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 10), 'dtype')
    # Obtaining the member 'type' of a type (line 661)
    type_117812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 661, 10), dtype_117811, 'type')
    # Assigning a type to the variable 'typ' (line 661)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 661, 4), 'typ', type_117812)
    
    
    # Call to issubclass(...): (line 662)
    # Processing the call arguments (line 662)
    # Getting the type of 'typ' (line 662)
    typ_117814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 18), 'typ', False)
    # Getting the type of 'np' (line 662)
    np_117815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 23), 'np', False)
    # Obtaining the member 'bool_' of a type (line 662)
    bool__117816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 662, 23), np_117815, 'bool_')
    # Processing the call keyword arguments (line 662)
    kwargs_117817 = {}
    # Getting the type of 'issubclass' (line 662)
    issubclass_117813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 7), 'issubclass', False)
    # Calling issubclass(args, kwargs) (line 662)
    issubclass_call_result_117818 = invoke(stypy.reporting.localization.Localization(__file__, 662, 7), issubclass_117813, *[typ_117814, bool__117816], **kwargs_117817)
    
    # Testing the type of an if condition (line 662)
    if_condition_117819 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 662, 4), issubclass_call_result_117818)
    # Assigning a type to the variable 'if_condition_117819' (line 662)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 662, 4), 'if_condition_117819', if_condition_117819)
    # SSA begins for if statement (line 662)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

    @norecursion
    def _stypy_temp_lambda_27(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_27'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_27', 663, 15, True)
        # Passed parameters checking function
        _stypy_temp_lambda_27.stypy_localization = localization
        _stypy_temp_lambda_27.stypy_type_of_self = None
        _stypy_temp_lambda_27.stypy_type_store = module_type_store
        _stypy_temp_lambda_27.stypy_function_name = '_stypy_temp_lambda_27'
        _stypy_temp_lambda_27.stypy_param_names_list = ['x']
        _stypy_temp_lambda_27.stypy_varargs_param_name = None
        _stypy_temp_lambda_27.stypy_kwargs_param_name = None
        _stypy_temp_lambda_27.stypy_call_defaults = defaults
        _stypy_temp_lambda_27.stypy_call_varargs = varargs
        _stypy_temp_lambda_27.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_27', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_27', ['x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to bool(...): (line 663)
        # Processing the call arguments (line 663)
        
        # Call to int(...): (line 663)
        # Processing the call arguments (line 663)
        # Getting the type of 'x' (line 663)
        x_117822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 663, 34), 'x', False)
        # Processing the call keyword arguments (line 663)
        kwargs_117823 = {}
        # Getting the type of 'int' (line 663)
        int_117821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 663, 30), 'int', False)
        # Calling int(args, kwargs) (line 663)
        int_call_result_117824 = invoke(stypy.reporting.localization.Localization(__file__, 663, 30), int_117821, *[x_117822], **kwargs_117823)
        
        # Processing the call keyword arguments (line 663)
        kwargs_117825 = {}
        # Getting the type of 'bool' (line 663)
        bool_117820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 663, 25), 'bool', False)
        # Calling bool(args, kwargs) (line 663)
        bool_call_result_117826 = invoke(stypy.reporting.localization.Localization(__file__, 663, 25), bool_117820, *[int_call_result_117824], **kwargs_117825)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 663)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 663, 15), 'stypy_return_type', bool_call_result_117826)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_27' in the type store
        # Getting the type of 'stypy_return_type' (line 663)
        stypy_return_type_117827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 663, 15), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_117827)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_27'
        return stypy_return_type_117827

    # Assigning a type to the variable '_stypy_temp_lambda_27' (line 663)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 663, 15), '_stypy_temp_lambda_27', _stypy_temp_lambda_27)
    # Getting the type of '_stypy_temp_lambda_27' (line 663)
    _stypy_temp_lambda_27_117828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 663, 15), '_stypy_temp_lambda_27')
    # Assigning a type to the variable 'stypy_return_type' (line 663)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 663, 8), 'stypy_return_type', _stypy_temp_lambda_27_117828)
    # SSA join for if statement (line 662)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to issubclass(...): (line 664)
    # Processing the call arguments (line 664)
    # Getting the type of 'typ' (line 664)
    typ_117830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 18), 'typ', False)
    # Getting the type of 'np' (line 664)
    np_117831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 23), 'np', False)
    # Obtaining the member 'uint64' of a type (line 664)
    uint64_117832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 664, 23), np_117831, 'uint64')
    # Processing the call keyword arguments (line 664)
    kwargs_117833 = {}
    # Getting the type of 'issubclass' (line 664)
    issubclass_117829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 7), 'issubclass', False)
    # Calling issubclass(args, kwargs) (line 664)
    issubclass_call_result_117834 = invoke(stypy.reporting.localization.Localization(__file__, 664, 7), issubclass_117829, *[typ_117830, uint64_117832], **kwargs_117833)
    
    # Testing the type of an if condition (line 664)
    if_condition_117835 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 664, 4), issubclass_call_result_117834)
    # Assigning a type to the variable 'if_condition_117835' (line 664)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 664, 4), 'if_condition_117835', if_condition_117835)
    # SSA begins for if statement (line 664)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'np' (line 665)
    np_117836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 15), 'np')
    # Obtaining the member 'uint64' of a type (line 665)
    uint64_117837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 665, 15), np_117836, 'uint64')
    # Assigning a type to the variable 'stypy_return_type' (line 665)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 665, 8), 'stypy_return_type', uint64_117837)
    # SSA join for if statement (line 664)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to issubclass(...): (line 666)
    # Processing the call arguments (line 666)
    # Getting the type of 'typ' (line 666)
    typ_117839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 18), 'typ', False)
    # Getting the type of 'np' (line 666)
    np_117840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 23), 'np', False)
    # Obtaining the member 'int64' of a type (line 666)
    int64_117841 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 666, 23), np_117840, 'int64')
    # Processing the call keyword arguments (line 666)
    kwargs_117842 = {}
    # Getting the type of 'issubclass' (line 666)
    issubclass_117838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 7), 'issubclass', False)
    # Calling issubclass(args, kwargs) (line 666)
    issubclass_call_result_117843 = invoke(stypy.reporting.localization.Localization(__file__, 666, 7), issubclass_117838, *[typ_117839, int64_117841], **kwargs_117842)
    
    # Testing the type of an if condition (line 666)
    if_condition_117844 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 666, 4), issubclass_call_result_117843)
    # Assigning a type to the variable 'if_condition_117844' (line 666)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 666, 4), 'if_condition_117844', if_condition_117844)
    # SSA begins for if statement (line 666)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'np' (line 667)
    np_117845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 15), 'np')
    # Obtaining the member 'int64' of a type (line 667)
    int64_117846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 667, 15), np_117845, 'int64')
    # Assigning a type to the variable 'stypy_return_type' (line 667)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 667, 8), 'stypy_return_type', int64_117846)
    # SSA join for if statement (line 666)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to issubclass(...): (line 668)
    # Processing the call arguments (line 668)
    # Getting the type of 'typ' (line 668)
    typ_117848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 18), 'typ', False)
    # Getting the type of 'np' (line 668)
    np_117849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 23), 'np', False)
    # Obtaining the member 'integer' of a type (line 668)
    integer_117850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 668, 23), np_117849, 'integer')
    # Processing the call keyword arguments (line 668)
    kwargs_117851 = {}
    # Getting the type of 'issubclass' (line 668)
    issubclass_117847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 7), 'issubclass', False)
    # Calling issubclass(args, kwargs) (line 668)
    issubclass_call_result_117852 = invoke(stypy.reporting.localization.Localization(__file__, 668, 7), issubclass_117847, *[typ_117848, integer_117850], **kwargs_117851)
    
    # Testing the type of an if condition (line 668)
    if_condition_117853 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 668, 4), issubclass_call_result_117852)
    # Assigning a type to the variable 'if_condition_117853' (line 668)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 668, 4), 'if_condition_117853', if_condition_117853)
    # SSA begins for if statement (line 668)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

    @norecursion
    def _stypy_temp_lambda_28(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_28'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_28', 669, 15, True)
        # Passed parameters checking function
        _stypy_temp_lambda_28.stypy_localization = localization
        _stypy_temp_lambda_28.stypy_type_of_self = None
        _stypy_temp_lambda_28.stypy_type_store = module_type_store
        _stypy_temp_lambda_28.stypy_function_name = '_stypy_temp_lambda_28'
        _stypy_temp_lambda_28.stypy_param_names_list = ['x']
        _stypy_temp_lambda_28.stypy_varargs_param_name = None
        _stypy_temp_lambda_28.stypy_kwargs_param_name = None
        _stypy_temp_lambda_28.stypy_call_defaults = defaults
        _stypy_temp_lambda_28.stypy_call_varargs = varargs
        _stypy_temp_lambda_28.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_28', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_28', ['x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to int(...): (line 669)
        # Processing the call arguments (line 669)
        
        # Call to float(...): (line 669)
        # Processing the call arguments (line 669)
        # Getting the type of 'x' (line 669)
        x_117856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 35), 'x', False)
        # Processing the call keyword arguments (line 669)
        kwargs_117857 = {}
        # Getting the type of 'float' (line 669)
        float_117855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 29), 'float', False)
        # Calling float(args, kwargs) (line 669)
        float_call_result_117858 = invoke(stypy.reporting.localization.Localization(__file__, 669, 29), float_117855, *[x_117856], **kwargs_117857)
        
        # Processing the call keyword arguments (line 669)
        kwargs_117859 = {}
        # Getting the type of 'int' (line 669)
        int_117854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 25), 'int', False)
        # Calling int(args, kwargs) (line 669)
        int_call_result_117860 = invoke(stypy.reporting.localization.Localization(__file__, 669, 25), int_117854, *[float_call_result_117858], **kwargs_117859)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 669)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 669, 15), 'stypy_return_type', int_call_result_117860)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_28' in the type store
        # Getting the type of 'stypy_return_type' (line 669)
        stypy_return_type_117861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 15), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_117861)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_28'
        return stypy_return_type_117861

    # Assigning a type to the variable '_stypy_temp_lambda_28' (line 669)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 669, 15), '_stypy_temp_lambda_28', _stypy_temp_lambda_28)
    # Getting the type of '_stypy_temp_lambda_28' (line 669)
    _stypy_temp_lambda_28_117862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 15), '_stypy_temp_lambda_28')
    # Assigning a type to the variable 'stypy_return_type' (line 669)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 669, 8), 'stypy_return_type', _stypy_temp_lambda_28_117862)
    # SSA branch for the else part of an if statement (line 668)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to issubclass(...): (line 670)
    # Processing the call arguments (line 670)
    # Getting the type of 'typ' (line 670)
    typ_117864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 20), 'typ', False)
    # Getting the type of 'np' (line 670)
    np_117865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 25), 'np', False)
    # Obtaining the member 'longdouble' of a type (line 670)
    longdouble_117866 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 670, 25), np_117865, 'longdouble')
    # Processing the call keyword arguments (line 670)
    kwargs_117867 = {}
    # Getting the type of 'issubclass' (line 670)
    issubclass_117863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 9), 'issubclass', False)
    # Calling issubclass(args, kwargs) (line 670)
    issubclass_call_result_117868 = invoke(stypy.reporting.localization.Localization(__file__, 670, 9), issubclass_117863, *[typ_117864, longdouble_117866], **kwargs_117867)
    
    # Testing the type of an if condition (line 670)
    if_condition_117869 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 670, 9), issubclass_call_result_117868)
    # Assigning a type to the variable 'if_condition_117869' (line 670)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 670, 9), 'if_condition_117869', if_condition_117869)
    # SSA begins for if statement (line 670)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'np' (line 671)
    np_117870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 15), 'np')
    # Obtaining the member 'longdouble' of a type (line 671)
    longdouble_117871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 671, 15), np_117870, 'longdouble')
    # Assigning a type to the variable 'stypy_return_type' (line 671)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 671, 8), 'stypy_return_type', longdouble_117871)
    # SSA branch for the else part of an if statement (line 670)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to issubclass(...): (line 672)
    # Processing the call arguments (line 672)
    # Getting the type of 'typ' (line 672)
    typ_117873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 20), 'typ', False)
    # Getting the type of 'np' (line 672)
    np_117874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 25), 'np', False)
    # Obtaining the member 'floating' of a type (line 672)
    floating_117875 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 25), np_117874, 'floating')
    # Processing the call keyword arguments (line 672)
    kwargs_117876 = {}
    # Getting the type of 'issubclass' (line 672)
    issubclass_117872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 9), 'issubclass', False)
    # Calling issubclass(args, kwargs) (line 672)
    issubclass_call_result_117877 = invoke(stypy.reporting.localization.Localization(__file__, 672, 9), issubclass_117872, *[typ_117873, floating_117875], **kwargs_117876)
    
    # Testing the type of an if condition (line 672)
    if_condition_117878 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 672, 9), issubclass_call_result_117877)
    # Assigning a type to the variable 'if_condition_117878' (line 672)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 672, 9), 'if_condition_117878', if_condition_117878)
    # SSA begins for if statement (line 672)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'floatconv' (line 673)
    floatconv_117879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 15), 'floatconv')
    # Assigning a type to the variable 'stypy_return_type' (line 673)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 673, 8), 'stypy_return_type', floatconv_117879)
    # SSA branch for the else part of an if statement (line 672)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to issubclass(...): (line 674)
    # Processing the call arguments (line 674)
    # Getting the type of 'typ' (line 674)
    typ_117881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 20), 'typ', False)
    # Getting the type of 'np' (line 674)
    np_117882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 25), 'np', False)
    # Obtaining the member 'complex' of a type (line 674)
    complex_117883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 674, 25), np_117882, 'complex')
    # Processing the call keyword arguments (line 674)
    kwargs_117884 = {}
    # Getting the type of 'issubclass' (line 674)
    issubclass_117880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 9), 'issubclass', False)
    # Calling issubclass(args, kwargs) (line 674)
    issubclass_call_result_117885 = invoke(stypy.reporting.localization.Localization(__file__, 674, 9), issubclass_117880, *[typ_117881, complex_117883], **kwargs_117884)
    
    # Testing the type of an if condition (line 674)
    if_condition_117886 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 674, 9), issubclass_call_result_117885)
    # Assigning a type to the variable 'if_condition_117886' (line 674)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 674, 9), 'if_condition_117886', if_condition_117886)
    # SSA begins for if statement (line 674)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')

    @norecursion
    def _stypy_temp_lambda_29(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_29'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_29', 675, 15, True)
        # Passed parameters checking function
        _stypy_temp_lambda_29.stypy_localization = localization
        _stypy_temp_lambda_29.stypy_type_of_self = None
        _stypy_temp_lambda_29.stypy_type_store = module_type_store
        _stypy_temp_lambda_29.stypy_function_name = '_stypy_temp_lambda_29'
        _stypy_temp_lambda_29.stypy_param_names_list = ['x']
        _stypy_temp_lambda_29.stypy_varargs_param_name = None
        _stypy_temp_lambda_29.stypy_kwargs_param_name = None
        _stypy_temp_lambda_29.stypy_call_defaults = defaults
        _stypy_temp_lambda_29.stypy_call_varargs = varargs
        _stypy_temp_lambda_29.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_29', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_29', ['x'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to complex(...): (line 675)
        # Processing the call arguments (line 675)
        
        # Call to asstr(...): (line 675)
        # Processing the call arguments (line 675)
        # Getting the type of 'x' (line 675)
        x_117889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 39), 'x', False)
        # Processing the call keyword arguments (line 675)
        kwargs_117890 = {}
        # Getting the type of 'asstr' (line 675)
        asstr_117888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 33), 'asstr', False)
        # Calling asstr(args, kwargs) (line 675)
        asstr_call_result_117891 = invoke(stypy.reporting.localization.Localization(__file__, 675, 33), asstr_117888, *[x_117889], **kwargs_117890)
        
        # Processing the call keyword arguments (line 675)
        kwargs_117892 = {}
        # Getting the type of 'complex' (line 675)
        complex_117887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 25), 'complex', False)
        # Calling complex(args, kwargs) (line 675)
        complex_call_result_117893 = invoke(stypy.reporting.localization.Localization(__file__, 675, 25), complex_117887, *[asstr_call_result_117891], **kwargs_117892)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 675)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 675, 15), 'stypy_return_type', complex_call_result_117893)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_29' in the type store
        # Getting the type of 'stypy_return_type' (line 675)
        stypy_return_type_117894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 15), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_117894)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_29'
        return stypy_return_type_117894

    # Assigning a type to the variable '_stypy_temp_lambda_29' (line 675)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 675, 15), '_stypy_temp_lambda_29', _stypy_temp_lambda_29)
    # Getting the type of '_stypy_temp_lambda_29' (line 675)
    _stypy_temp_lambda_29_117895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 15), '_stypy_temp_lambda_29')
    # Assigning a type to the variable 'stypy_return_type' (line 675)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 675, 8), 'stypy_return_type', _stypy_temp_lambda_29_117895)
    # SSA branch for the else part of an if statement (line 674)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to issubclass(...): (line 676)
    # Processing the call arguments (line 676)
    # Getting the type of 'typ' (line 676)
    typ_117897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 20), 'typ', False)
    # Getting the type of 'np' (line 676)
    np_117898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 25), 'np', False)
    # Obtaining the member 'bytes_' of a type (line 676)
    bytes__117899 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 676, 25), np_117898, 'bytes_')
    # Processing the call keyword arguments (line 676)
    kwargs_117900 = {}
    # Getting the type of 'issubclass' (line 676)
    issubclass_117896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 9), 'issubclass', False)
    # Calling issubclass(args, kwargs) (line 676)
    issubclass_call_result_117901 = invoke(stypy.reporting.localization.Localization(__file__, 676, 9), issubclass_117896, *[typ_117897, bytes__117899], **kwargs_117900)
    
    # Testing the type of an if condition (line 676)
    if_condition_117902 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 676, 9), issubclass_call_result_117901)
    # Assigning a type to the variable 'if_condition_117902' (line 676)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 676, 9), 'if_condition_117902', if_condition_117902)
    # SSA begins for if statement (line 676)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Getting the type of 'bytes' (line 677)
    bytes_117903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 677, 15), 'bytes')
    # Assigning a type to the variable 'stypy_return_type' (line 677)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 677, 8), 'stypy_return_type', bytes_117903)
    # SSA branch for the else part of an if statement (line 676)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'str' (line 679)
    str_117904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 15), 'str')
    # Assigning a type to the variable 'stypy_return_type' (line 679)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 679, 8), 'stypy_return_type', str_117904)
    # SSA join for if statement (line 676)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 674)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 672)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 670)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 668)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_getconv(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_getconv' in the type store
    # Getting the type of 'stypy_return_type' (line 652)
    stypy_return_type_117905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_117905)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_getconv'
    return stypy_return_type_117905

# Assigning a type to the variable '_getconv' (line 652)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 652, 0), '_getconv', _getconv)

@norecursion
def loadtxt(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'float' (line 682)
    float_117906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 682, 25), 'float')
    str_117907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 682, 41), 'str', '#')
    # Getting the type of 'None' (line 682)
    None_117908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 682, 56), 'None')
    # Getting the type of 'None' (line 683)
    None_117909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 683, 23), 'None')
    int_117910 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 683, 38), 'int')
    # Getting the type of 'None' (line 683)
    None_117911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 683, 49), 'None')
    # Getting the type of 'False' (line 683)
    False_117912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 683, 62), 'False')
    int_117913 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 684, 18), 'int')
    defaults = [float_117906, str_117907, None_117908, None_117909, int_117910, None_117911, False_117912, int_117913]
    # Create a new context for function 'loadtxt'
    module_type_store = module_type_store.open_function_context('loadtxt', 682, 0, False)
    
    # Passed parameters checking function
    loadtxt.stypy_localization = localization
    loadtxt.stypy_type_of_self = None
    loadtxt.stypy_type_store = module_type_store
    loadtxt.stypy_function_name = 'loadtxt'
    loadtxt.stypy_param_names_list = ['fname', 'dtype', 'comments', 'delimiter', 'converters', 'skiprows', 'usecols', 'unpack', 'ndmin']
    loadtxt.stypy_varargs_param_name = None
    loadtxt.stypy_kwargs_param_name = None
    loadtxt.stypy_call_defaults = defaults
    loadtxt.stypy_call_varargs = varargs
    loadtxt.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'loadtxt', ['fname', 'dtype', 'comments', 'delimiter', 'converters', 'skiprows', 'usecols', 'unpack', 'ndmin'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'loadtxt', localization, ['fname', 'dtype', 'comments', 'delimiter', 'converters', 'skiprows', 'usecols', 'unpack', 'ndmin'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'loadtxt(...)' code ##################

    str_117914 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 775, (-1)), 'str', '\n    Load data from a text file.\n\n    Each row in the text file must have the same number of values.\n\n    Parameters\n    ----------\n    fname : file or str\n        File, filename, or generator to read.  If the filename extension is\n        ``.gz`` or ``.bz2``, the file is first decompressed. Note that\n        generators should return byte strings for Python 3k.\n    dtype : data-type, optional\n        Data-type of the resulting array; default: float.  If this is a\n        structured data-type, the resulting array will be 1-dimensional, and\n        each row will be interpreted as an element of the array.  In this\n        case, the number of columns used must match the number of fields in\n        the data-type.\n    comments : str or sequence, optional\n        The characters or list of characters used to indicate the start of a\n        comment;\n        default: \'#\'.\n    delimiter : str, optional\n        The string used to separate values.  By default, this is any\n        whitespace.\n    converters : dict, optional\n        A dictionary mapping column number to a function that will convert\n        that column to a float.  E.g., if column 0 is a date string:\n        ``converters = {0: datestr2num}``.  Converters can also be used to\n        provide a default value for missing data (but see also `genfromtxt`):\n        ``converters = {3: lambda s: float(s.strip() or 0)}``.  Default: None.\n    skiprows : int, optional\n        Skip the first `skiprows` lines; default: 0.\n    usecols : sequence, optional\n        Which columns to read, with 0 being the first.  For example,\n        ``usecols = (1,4,5)`` will extract the 2nd, 5th and 6th columns.\n        The default, None, results in all columns being read.\n    unpack : bool, optional\n        If True, the returned array is transposed, so that arguments may be\n        unpacked using ``x, y, z = loadtxt(...)``.  When used with a structured\n        data-type, arrays are returned for each field.  Default is False.\n    ndmin : int, optional\n        The returned array will have at least `ndmin` dimensions.\n        Otherwise mono-dimensional axes will be squeezed.\n        Legal values: 0 (default), 1 or 2.\n\n        .. versionadded:: 1.6.0\n\n    Returns\n    -------\n    out : ndarray\n        Data read from the text file.\n\n    See Also\n    --------\n    load, fromstring, fromregex\n    genfromtxt : Load data with missing values handled as specified.\n    scipy.io.loadmat : reads MATLAB data files\n\n    Notes\n    -----\n    This function aims to be a fast reader for simply formatted files.  The\n    `genfromtxt` function provides more sophisticated handling of, e.g.,\n    lines with missing values.\n\n    .. versionadded:: 1.10.0\n\n    The strings produced by the Python float.hex method can be used as\n    input for floats.\n\n    Examples\n    --------\n    >>> from io import StringIO   # StringIO behaves like a file object\n    >>> c = StringIO("0 1\\n2 3")\n    >>> np.loadtxt(c)\n    array([[ 0.,  1.],\n           [ 2.,  3.]])\n\n    >>> d = StringIO("M 21 72\\nF 35 58")\n    >>> np.loadtxt(d, dtype={\'names\': (\'gender\', \'age\', \'weight\'),\n    ...                      \'formats\': (\'S1\', \'i4\', \'f4\')})\n    array([(\'M\', 21, 72.0), (\'F\', 35, 58.0)],\n          dtype=[(\'gender\', \'|S1\'), (\'age\', \'<i4\'), (\'weight\', \'<f4\')])\n\n    >>> c = StringIO("1,0,2\\n3,0,4")\n    >>> x, y = np.loadtxt(c, delimiter=\',\', usecols=(0, 2), unpack=True)\n    >>> x\n    array([ 1.,  3.])\n    >>> y\n    array([ 2.,  4.])\n\n    ')
    
    # Type idiom detected: calculating its left and rigth part (line 777)
    # Getting the type of 'comments' (line 777)
    comments_117915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 4), 'comments')
    # Getting the type of 'None' (line 777)
    None_117916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 23), 'None')
    
    (may_be_117917, more_types_in_union_117918) = may_not_be_none(comments_117915, None_117916)

    if may_be_117917:

        if more_types_in_union_117918:
            # Runtime conditional SSA (line 777)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        
        # Call to isinstance(...): (line 778)
        # Processing the call arguments (line 778)
        # Getting the type of 'comments' (line 778)
        comments_117920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 22), 'comments', False)
        
        # Obtaining an instance of the builtin type 'tuple' (line 778)
        tuple_117921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 778, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 778)
        # Adding element type (line 778)
        # Getting the type of 'basestring' (line 778)
        basestring_117922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 33), 'basestring', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 778, 33), tuple_117921, basestring_117922)
        # Adding element type (line 778)
        # Getting the type of 'bytes' (line 778)
        bytes_117923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 45), 'bytes', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 778, 33), tuple_117921, bytes_117923)
        
        # Processing the call keyword arguments (line 778)
        kwargs_117924 = {}
        # Getting the type of 'isinstance' (line 778)
        isinstance_117919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 778)
        isinstance_call_result_117925 = invoke(stypy.reporting.localization.Localization(__file__, 778, 11), isinstance_117919, *[comments_117920, tuple_117921], **kwargs_117924)
        
        # Testing the type of an if condition (line 778)
        if_condition_117926 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 778, 8), isinstance_call_result_117925)
        # Assigning a type to the variable 'if_condition_117926' (line 778)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 778, 8), 'if_condition_117926', if_condition_117926)
        # SSA begins for if statement (line 778)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a List to a Name (line 779):
        
        # Assigning a List to a Name (line 779):
        
        # Obtaining an instance of the builtin type 'list' (line 779)
        list_117927 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 779, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 779)
        # Adding element type (line 779)
        
        # Call to asbytes(...): (line 779)
        # Processing the call arguments (line 779)
        # Getting the type of 'comments' (line 779)
        comments_117929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 32), 'comments', False)
        # Processing the call keyword arguments (line 779)
        kwargs_117930 = {}
        # Getting the type of 'asbytes' (line 779)
        asbytes_117928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 24), 'asbytes', False)
        # Calling asbytes(args, kwargs) (line 779)
        asbytes_call_result_117931 = invoke(stypy.reporting.localization.Localization(__file__, 779, 24), asbytes_117928, *[comments_117929], **kwargs_117930)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 779, 23), list_117927, asbytes_call_result_117931)
        
        # Assigning a type to the variable 'comments' (line 779)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 779, 12), 'comments', list_117927)
        # SSA branch for the else part of an if statement (line 778)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a ListComp to a Name (line 781):
        
        # Assigning a ListComp to a Name (line 781):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'comments' (line 781)
        comments_117936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 56), 'comments')
        comprehension_117937 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 781, 24), comments_117936)
        # Assigning a type to the variable 'comment' (line 781)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 781, 24), 'comment', comprehension_117937)
        
        # Call to asbytes(...): (line 781)
        # Processing the call arguments (line 781)
        # Getting the type of 'comment' (line 781)
        comment_117933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 32), 'comment', False)
        # Processing the call keyword arguments (line 781)
        kwargs_117934 = {}
        # Getting the type of 'asbytes' (line 781)
        asbytes_117932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 24), 'asbytes', False)
        # Calling asbytes(args, kwargs) (line 781)
        asbytes_call_result_117935 = invoke(stypy.reporting.localization.Localization(__file__, 781, 24), asbytes_117932, *[comment_117933], **kwargs_117934)
        
        list_117938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 781, 24), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 781, 24), list_117938, asbytes_call_result_117935)
        # Assigning a type to the variable 'comments' (line 781)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 781, 12), 'comments', list_117938)
        # SSA join for if statement (line 778)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a GeneratorExp to a Name (line 784):
        
        # Assigning a GeneratorExp to a Name (line 784):
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 784, 20, True)
        # Calculating comprehension expression
        # Getting the type of 'comments' (line 784)
        comments_117944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 784, 54), 'comments')
        comprehension_117945 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 784, 20), comments_117944)
        # Assigning a type to the variable 'comment' (line 784)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 784, 20), 'comment', comprehension_117945)
        
        # Call to escape(...): (line 784)
        # Processing the call arguments (line 784)
        # Getting the type of 'comment' (line 784)
        comment_117941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 784, 30), 'comment', False)
        # Processing the call keyword arguments (line 784)
        kwargs_117942 = {}
        # Getting the type of 're' (line 784)
        re_117939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 784, 20), 're', False)
        # Obtaining the member 'escape' of a type (line 784)
        escape_117940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 784, 20), re_117939, 'escape')
        # Calling escape(args, kwargs) (line 784)
        escape_call_result_117943 = invoke(stypy.reporting.localization.Localization(__file__, 784, 20), escape_117940, *[comment_117941], **kwargs_117942)
        
        list_117946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 784, 20), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 784, 20), list_117946, escape_call_result_117943)
        # Assigning a type to the variable 'comments' (line 784)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 784, 8), 'comments', list_117946)
        
        # Assigning a Call to a Name (line 785):
        
        # Assigning a Call to a Name (line 785):
        
        # Call to compile(...): (line 785)
        # Processing the call arguments (line 785)
        
        # Call to join(...): (line 785)
        # Processing the call arguments (line 785)
        # Getting the type of 'comments' (line 785)
        comments_117954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 785, 54), 'comments', False)
        # Processing the call keyword arguments (line 785)
        kwargs_117955 = {}
        
        # Call to asbytes(...): (line 785)
        # Processing the call arguments (line 785)
        str_117950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 785, 44), 'str', '|')
        # Processing the call keyword arguments (line 785)
        kwargs_117951 = {}
        # Getting the type of 'asbytes' (line 785)
        asbytes_117949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 785, 36), 'asbytes', False)
        # Calling asbytes(args, kwargs) (line 785)
        asbytes_call_result_117952 = invoke(stypy.reporting.localization.Localization(__file__, 785, 36), asbytes_117949, *[str_117950], **kwargs_117951)
        
        # Obtaining the member 'join' of a type (line 785)
        join_117953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 785, 36), asbytes_call_result_117952, 'join')
        # Calling join(args, kwargs) (line 785)
        join_call_result_117956 = invoke(stypy.reporting.localization.Localization(__file__, 785, 36), join_117953, *[comments_117954], **kwargs_117955)
        
        # Processing the call keyword arguments (line 785)
        kwargs_117957 = {}
        # Getting the type of 're' (line 785)
        re_117947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 785, 25), 're', False)
        # Obtaining the member 'compile' of a type (line 785)
        compile_117948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 785, 25), re_117947, 'compile')
        # Calling compile(args, kwargs) (line 785)
        compile_call_result_117958 = invoke(stypy.reporting.localization.Localization(__file__, 785, 25), compile_117948, *[join_call_result_117956], **kwargs_117957)
        
        # Assigning a type to the variable 'regex_comments' (line 785)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 785, 8), 'regex_comments', compile_call_result_117958)

        if more_types_in_union_117918:
            # SSA join for if statement (line 777)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Name to a Name (line 786):
    
    # Assigning a Name to a Name (line 786):
    # Getting the type of 'converters' (line 786)
    converters_117959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 786, 22), 'converters')
    # Assigning a type to the variable 'user_converters' (line 786)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 786, 4), 'user_converters', converters_117959)
    
    # Type idiom detected: calculating its left and rigth part (line 787)
    # Getting the type of 'delimiter' (line 787)
    delimiter_117960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 4), 'delimiter')
    # Getting the type of 'None' (line 787)
    None_117961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 24), 'None')
    
    (may_be_117962, more_types_in_union_117963) = may_not_be_none(delimiter_117960, None_117961)

    if may_be_117962:

        if more_types_in_union_117963:
            # Runtime conditional SSA (line 787)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 788):
        
        # Assigning a Call to a Name (line 788):
        
        # Call to asbytes(...): (line 788)
        # Processing the call arguments (line 788)
        # Getting the type of 'delimiter' (line 788)
        delimiter_117965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 28), 'delimiter', False)
        # Processing the call keyword arguments (line 788)
        kwargs_117966 = {}
        # Getting the type of 'asbytes' (line 788)
        asbytes_117964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 20), 'asbytes', False)
        # Calling asbytes(args, kwargs) (line 788)
        asbytes_call_result_117967 = invoke(stypy.reporting.localization.Localization(__file__, 788, 20), asbytes_117964, *[delimiter_117965], **kwargs_117966)
        
        # Assigning a type to the variable 'delimiter' (line 788)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 788, 8), 'delimiter', asbytes_call_result_117967)

        if more_types_in_union_117963:
            # SSA join for if statement (line 787)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 789)
    # Getting the type of 'usecols' (line 789)
    usecols_117968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 4), 'usecols')
    # Getting the type of 'None' (line 789)
    None_117969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 22), 'None')
    
    (may_be_117970, more_types_in_union_117971) = may_not_be_none(usecols_117968, None_117969)

    if may_be_117970:

        if more_types_in_union_117971:
            # Runtime conditional SSA (line 789)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 790):
        
        # Assigning a Call to a Name (line 790):
        
        # Call to list(...): (line 790)
        # Processing the call arguments (line 790)
        # Getting the type of 'usecols' (line 790)
        usecols_117973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 23), 'usecols', False)
        # Processing the call keyword arguments (line 790)
        kwargs_117974 = {}
        # Getting the type of 'list' (line 790)
        list_117972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 18), 'list', False)
        # Calling list(args, kwargs) (line 790)
        list_call_result_117975 = invoke(stypy.reporting.localization.Localization(__file__, 790, 18), list_117972, *[usecols_117973], **kwargs_117974)
        
        # Assigning a type to the variable 'usecols' (line 790)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 790, 8), 'usecols', list_call_result_117975)

        if more_types_in_union_117971:
            # SSA join for if statement (line 789)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Name to a Name (line 792):
    
    # Assigning a Name to a Name (line 792):
    # Getting the type of 'False' (line 792)
    False_117976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 11), 'False')
    # Assigning a type to the variable 'fown' (line 792)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 792, 4), 'fown', False_117976)
    
    
    # SSA begins for try-except statement (line 793)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    
    # Call to _is_string_like(...): (line 794)
    # Processing the call arguments (line 794)
    # Getting the type of 'fname' (line 794)
    fname_117978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 27), 'fname', False)
    # Processing the call keyword arguments (line 794)
    kwargs_117979 = {}
    # Getting the type of '_is_string_like' (line 794)
    _is_string_like_117977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 11), '_is_string_like', False)
    # Calling _is_string_like(args, kwargs) (line 794)
    _is_string_like_call_result_117980 = invoke(stypy.reporting.localization.Localization(__file__, 794, 11), _is_string_like_117977, *[fname_117978], **kwargs_117979)
    
    # Testing the type of an if condition (line 794)
    if_condition_117981 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 794, 8), _is_string_like_call_result_117980)
    # Assigning a type to the variable 'if_condition_117981' (line 794)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 794, 8), 'if_condition_117981', if_condition_117981)
    # SSA begins for if statement (line 794)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 795):
    
    # Assigning a Name to a Name (line 795):
    # Getting the type of 'True' (line 795)
    True_117982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 795, 19), 'True')
    # Assigning a type to the variable 'fown' (line 795)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 795, 12), 'fown', True_117982)
    
    
    # Call to endswith(...): (line 796)
    # Processing the call arguments (line 796)
    str_117985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 796, 30), 'str', '.gz')
    # Processing the call keyword arguments (line 796)
    kwargs_117986 = {}
    # Getting the type of 'fname' (line 796)
    fname_117983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 15), 'fname', False)
    # Obtaining the member 'endswith' of a type (line 796)
    endswith_117984 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 796, 15), fname_117983, 'endswith')
    # Calling endswith(args, kwargs) (line 796)
    endswith_call_result_117987 = invoke(stypy.reporting.localization.Localization(__file__, 796, 15), endswith_117984, *[str_117985], **kwargs_117986)
    
    # Testing the type of an if condition (line 796)
    if_condition_117988 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 796, 12), endswith_call_result_117987)
    # Assigning a type to the variable 'if_condition_117988' (line 796)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 796, 12), 'if_condition_117988', if_condition_117988)
    # SSA begins for if statement (line 796)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 797, 16))
    
    # 'import gzip' statement (line 797)
    import gzip

    import_module(stypy.reporting.localization.Localization(__file__, 797, 16), 'gzip', gzip, module_type_store)
    
    
    # Assigning a Call to a Name (line 798):
    
    # Assigning a Call to a Name (line 798):
    
    # Call to iter(...): (line 798)
    # Processing the call arguments (line 798)
    
    # Call to GzipFile(...): (line 798)
    # Processing the call arguments (line 798)
    # Getting the type of 'fname' (line 798)
    fname_117992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 40), 'fname', False)
    # Processing the call keyword arguments (line 798)
    kwargs_117993 = {}
    # Getting the type of 'gzip' (line 798)
    gzip_117990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 26), 'gzip', False)
    # Obtaining the member 'GzipFile' of a type (line 798)
    GzipFile_117991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 798, 26), gzip_117990, 'GzipFile')
    # Calling GzipFile(args, kwargs) (line 798)
    GzipFile_call_result_117994 = invoke(stypy.reporting.localization.Localization(__file__, 798, 26), GzipFile_117991, *[fname_117992], **kwargs_117993)
    
    # Processing the call keyword arguments (line 798)
    kwargs_117995 = {}
    # Getting the type of 'iter' (line 798)
    iter_117989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 21), 'iter', False)
    # Calling iter(args, kwargs) (line 798)
    iter_call_result_117996 = invoke(stypy.reporting.localization.Localization(__file__, 798, 21), iter_117989, *[GzipFile_call_result_117994], **kwargs_117995)
    
    # Assigning a type to the variable 'fh' (line 798)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 798, 16), 'fh', iter_call_result_117996)
    # SSA branch for the else part of an if statement (line 796)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to endswith(...): (line 799)
    # Processing the call arguments (line 799)
    str_117999 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 799, 32), 'str', '.bz2')
    # Processing the call keyword arguments (line 799)
    kwargs_118000 = {}
    # Getting the type of 'fname' (line 799)
    fname_117997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 17), 'fname', False)
    # Obtaining the member 'endswith' of a type (line 799)
    endswith_117998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 799, 17), fname_117997, 'endswith')
    # Calling endswith(args, kwargs) (line 799)
    endswith_call_result_118001 = invoke(stypy.reporting.localization.Localization(__file__, 799, 17), endswith_117998, *[str_117999], **kwargs_118000)
    
    # Testing the type of an if condition (line 799)
    if_condition_118002 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 799, 17), endswith_call_result_118001)
    # Assigning a type to the variable 'if_condition_118002' (line 799)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 799, 17), 'if_condition_118002', if_condition_118002)
    # SSA begins for if statement (line 799)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 800, 16))
    
    # 'import bz2' statement (line 800)
    import bz2

    import_module(stypy.reporting.localization.Localization(__file__, 800, 16), 'bz2', bz2, module_type_store)
    
    
    # Assigning a Call to a Name (line 801):
    
    # Assigning a Call to a Name (line 801):
    
    # Call to iter(...): (line 801)
    # Processing the call arguments (line 801)
    
    # Call to BZ2File(...): (line 801)
    # Processing the call arguments (line 801)
    # Getting the type of 'fname' (line 801)
    fname_118006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 801, 38), 'fname', False)
    # Processing the call keyword arguments (line 801)
    kwargs_118007 = {}
    # Getting the type of 'bz2' (line 801)
    bz2_118004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 801, 26), 'bz2', False)
    # Obtaining the member 'BZ2File' of a type (line 801)
    BZ2File_118005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 801, 26), bz2_118004, 'BZ2File')
    # Calling BZ2File(args, kwargs) (line 801)
    BZ2File_call_result_118008 = invoke(stypy.reporting.localization.Localization(__file__, 801, 26), BZ2File_118005, *[fname_118006], **kwargs_118007)
    
    # Processing the call keyword arguments (line 801)
    kwargs_118009 = {}
    # Getting the type of 'iter' (line 801)
    iter_118003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 801, 21), 'iter', False)
    # Calling iter(args, kwargs) (line 801)
    iter_call_result_118010 = invoke(stypy.reporting.localization.Localization(__file__, 801, 21), iter_118003, *[BZ2File_call_result_118008], **kwargs_118009)
    
    # Assigning a type to the variable 'fh' (line 801)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 801, 16), 'fh', iter_call_result_118010)
    # SSA branch for the else part of an if statement (line 799)
    module_type_store.open_ssa_branch('else')
    
    
    
    # Obtaining the type of the subscript
    int_118011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 802, 34), 'int')
    # Getting the type of 'sys' (line 802)
    sys_118012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 17), 'sys')
    # Obtaining the member 'version_info' of a type (line 802)
    version_info_118013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 802, 17), sys_118012, 'version_info')
    # Obtaining the member '__getitem__' of a type (line 802)
    getitem___118014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 802, 17), version_info_118013, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 802)
    subscript_call_result_118015 = invoke(stypy.reporting.localization.Localization(__file__, 802, 17), getitem___118014, int_118011)
    
    int_118016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 802, 40), 'int')
    # Applying the binary operator '==' (line 802)
    result_eq_118017 = python_operator(stypy.reporting.localization.Localization(__file__, 802, 17), '==', subscript_call_result_118015, int_118016)
    
    # Testing the type of an if condition (line 802)
    if_condition_118018 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 802, 17), result_eq_118017)
    # Assigning a type to the variable 'if_condition_118018' (line 802)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 802, 17), 'if_condition_118018', if_condition_118018)
    # SSA begins for if statement (line 802)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 803):
    
    # Assigning a Call to a Name (line 803):
    
    # Call to iter(...): (line 803)
    # Processing the call arguments (line 803)
    
    # Call to open(...): (line 803)
    # Processing the call arguments (line 803)
    # Getting the type of 'fname' (line 803)
    fname_118021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 31), 'fname', False)
    str_118022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 803, 38), 'str', 'U')
    # Processing the call keyword arguments (line 803)
    kwargs_118023 = {}
    # Getting the type of 'open' (line 803)
    open_118020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 26), 'open', False)
    # Calling open(args, kwargs) (line 803)
    open_call_result_118024 = invoke(stypy.reporting.localization.Localization(__file__, 803, 26), open_118020, *[fname_118021, str_118022], **kwargs_118023)
    
    # Processing the call keyword arguments (line 803)
    kwargs_118025 = {}
    # Getting the type of 'iter' (line 803)
    iter_118019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 21), 'iter', False)
    # Calling iter(args, kwargs) (line 803)
    iter_call_result_118026 = invoke(stypy.reporting.localization.Localization(__file__, 803, 21), iter_118019, *[open_call_result_118024], **kwargs_118025)
    
    # Assigning a type to the variable 'fh' (line 803)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 803, 16), 'fh', iter_call_result_118026)
    # SSA branch for the else part of an if statement (line 802)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 805):
    
    # Assigning a Call to a Name (line 805):
    
    # Call to iter(...): (line 805)
    # Processing the call arguments (line 805)
    
    # Call to open(...): (line 805)
    # Processing the call arguments (line 805)
    # Getting the type of 'fname' (line 805)
    fname_118029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 31), 'fname', False)
    # Processing the call keyword arguments (line 805)
    kwargs_118030 = {}
    # Getting the type of 'open' (line 805)
    open_118028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 26), 'open', False)
    # Calling open(args, kwargs) (line 805)
    open_call_result_118031 = invoke(stypy.reporting.localization.Localization(__file__, 805, 26), open_118028, *[fname_118029], **kwargs_118030)
    
    # Processing the call keyword arguments (line 805)
    kwargs_118032 = {}
    # Getting the type of 'iter' (line 805)
    iter_118027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 21), 'iter', False)
    # Calling iter(args, kwargs) (line 805)
    iter_call_result_118033 = invoke(stypy.reporting.localization.Localization(__file__, 805, 21), iter_118027, *[open_call_result_118031], **kwargs_118032)
    
    # Assigning a type to the variable 'fh' (line 805)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 805, 16), 'fh', iter_call_result_118033)
    # SSA join for if statement (line 802)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 799)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 796)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 794)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 807):
    
    # Assigning a Call to a Name (line 807):
    
    # Call to iter(...): (line 807)
    # Processing the call arguments (line 807)
    # Getting the type of 'fname' (line 807)
    fname_118035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 22), 'fname', False)
    # Processing the call keyword arguments (line 807)
    kwargs_118036 = {}
    # Getting the type of 'iter' (line 807)
    iter_118034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 17), 'iter', False)
    # Calling iter(args, kwargs) (line 807)
    iter_call_result_118037 = invoke(stypy.reporting.localization.Localization(__file__, 807, 17), iter_118034, *[fname_118035], **kwargs_118036)
    
    # Assigning a type to the variable 'fh' (line 807)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 807, 12), 'fh', iter_call_result_118037)
    # SSA join for if statement (line 794)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the except part of a try statement (line 793)
    # SSA branch for the except 'TypeError' branch of a try statement (line 793)
    module_type_store.open_ssa_branch('except')
    
    # Call to ValueError(...): (line 809)
    # Processing the call arguments (line 809)
    str_118039 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 809, 25), 'str', 'fname must be a string, file handle, or generator')
    # Processing the call keyword arguments (line 809)
    kwargs_118040 = {}
    # Getting the type of 'ValueError' (line 809)
    ValueError_118038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 809)
    ValueError_call_result_118041 = invoke(stypy.reporting.localization.Localization(__file__, 809, 14), ValueError_118038, *[str_118039], **kwargs_118040)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 809, 8), ValueError_call_result_118041, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 793)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a List to a Name (line 810):
    
    # Assigning a List to a Name (line 810):
    
    # Obtaining an instance of the builtin type 'list' (line 810)
    list_118042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 810, 8), 'list')
    # Adding type elements to the builtin type 'list' instance (line 810)
    
    # Assigning a type to the variable 'X' (line 810)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 810, 4), 'X', list_118042)

    @norecursion
    def flatten_dtype(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'flatten_dtype'
        module_type_store = module_type_store.open_function_context('flatten_dtype', 812, 4, False)
        
        # Passed parameters checking function
        flatten_dtype.stypy_localization = localization
        flatten_dtype.stypy_type_of_self = None
        flatten_dtype.stypy_type_store = module_type_store
        flatten_dtype.stypy_function_name = 'flatten_dtype'
        flatten_dtype.stypy_param_names_list = ['dt']
        flatten_dtype.stypy_varargs_param_name = None
        flatten_dtype.stypy_kwargs_param_name = None
        flatten_dtype.stypy_call_defaults = defaults
        flatten_dtype.stypy_call_varargs = varargs
        flatten_dtype.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'flatten_dtype', ['dt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'flatten_dtype', localization, ['dt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'flatten_dtype(...)' code ##################

        str_118043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 813, 8), 'str', 'Unpack a structured data-type, and produce re-packing info.')
        
        # Type idiom detected: calculating its left and rigth part (line 814)
        # Getting the type of 'dt' (line 814)
        dt_118044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 11), 'dt')
        # Obtaining the member 'names' of a type (line 814)
        names_118045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 814, 11), dt_118044, 'names')
        # Getting the type of 'None' (line 814)
        None_118046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 23), 'None')
        
        (may_be_118047, more_types_in_union_118048) = may_be_none(names_118045, None_118046)

        if may_be_118047:

            if more_types_in_union_118048:
                # Runtime conditional SSA (line 814)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 818):
            
            # Assigning a Attribute to a Name (line 818):
            # Getting the type of 'dt' (line 818)
            dt_118049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 20), 'dt')
            # Obtaining the member 'shape' of a type (line 818)
            shape_118050 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 818, 20), dt_118049, 'shape')
            # Assigning a type to the variable 'shape' (line 818)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 818, 12), 'shape', shape_118050)
            
            
            
            # Call to len(...): (line 819)
            # Processing the call arguments (line 819)
            # Getting the type of 'shape' (line 819)
            shape_118052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 19), 'shape', False)
            # Processing the call keyword arguments (line 819)
            kwargs_118053 = {}
            # Getting the type of 'len' (line 819)
            len_118051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 15), 'len', False)
            # Calling len(args, kwargs) (line 819)
            len_call_result_118054 = invoke(stypy.reporting.localization.Localization(__file__, 819, 15), len_118051, *[shape_118052], **kwargs_118053)
            
            int_118055 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 819, 29), 'int')
            # Applying the binary operator '==' (line 819)
            result_eq_118056 = python_operator(stypy.reporting.localization.Localization(__file__, 819, 15), '==', len_call_result_118054, int_118055)
            
            # Testing the type of an if condition (line 819)
            if_condition_118057 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 819, 12), result_eq_118056)
            # Assigning a type to the variable 'if_condition_118057' (line 819)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 819, 12), 'if_condition_118057', if_condition_118057)
            # SSA begins for if statement (line 819)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Obtaining an instance of the builtin type 'tuple' (line 820)
            tuple_118058 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 820, 24), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 820)
            # Adding element type (line 820)
            
            # Obtaining an instance of the builtin type 'list' (line 820)
            list_118059 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 820, 24), 'list')
            # Adding type elements to the builtin type 'list' instance (line 820)
            # Adding element type (line 820)
            # Getting the type of 'dt' (line 820)
            dt_118060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 25), 'dt')
            # Obtaining the member 'base' of a type (line 820)
            base_118061 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 820, 25), dt_118060, 'base')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 820, 24), list_118059, base_118061)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 820, 24), tuple_118058, list_118059)
            # Adding element type (line 820)
            # Getting the type of 'None' (line 820)
            None_118062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 35), 'None')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 820, 24), tuple_118058, None_118062)
            
            # Assigning a type to the variable 'stypy_return_type' (line 820)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 820, 16), 'stypy_return_type', tuple_118058)
            # SSA branch for the else part of an if statement (line 819)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a List to a Name (line 822):
            
            # Assigning a List to a Name (line 822):
            
            # Obtaining an instance of the builtin type 'list' (line 822)
            list_118063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 822, 26), 'list')
            # Adding type elements to the builtin type 'list' instance (line 822)
            # Adding element type (line 822)
            
            # Obtaining an instance of the builtin type 'tuple' (line 822)
            tuple_118064 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 822, 28), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 822)
            # Adding element type (line 822)
            
            # Obtaining the type of the subscript
            int_118065 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 822, 34), 'int')
            # Getting the type of 'shape' (line 822)
            shape_118066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 28), 'shape')
            # Obtaining the member '__getitem__' of a type (line 822)
            getitem___118067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 822, 28), shape_118066, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 822)
            subscript_call_result_118068 = invoke(stypy.reporting.localization.Localization(__file__, 822, 28), getitem___118067, int_118065)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 822, 28), tuple_118064, subscript_call_result_118068)
            # Adding element type (line 822)
            # Getting the type of 'list' (line 822)
            list_118069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 39), 'list')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 822, 28), tuple_118064, list_118069)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 822, 26), list_118063, tuple_118064)
            
            # Assigning a type to the variable 'packing' (line 822)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 822, 16), 'packing', list_118063)
            
            
            
            # Call to len(...): (line 823)
            # Processing the call arguments (line 823)
            # Getting the type of 'shape' (line 823)
            shape_118071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 23), 'shape', False)
            # Processing the call keyword arguments (line 823)
            kwargs_118072 = {}
            # Getting the type of 'len' (line 823)
            len_118070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 19), 'len', False)
            # Calling len(args, kwargs) (line 823)
            len_call_result_118073 = invoke(stypy.reporting.localization.Localization(__file__, 823, 19), len_118070, *[shape_118071], **kwargs_118072)
            
            int_118074 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 823, 32), 'int')
            # Applying the binary operator '>' (line 823)
            result_gt_118075 = python_operator(stypy.reporting.localization.Localization(__file__, 823, 19), '>', len_call_result_118073, int_118074)
            
            # Testing the type of an if condition (line 823)
            if_condition_118076 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 823, 16), result_gt_118075)
            # Assigning a type to the variable 'if_condition_118076' (line 823)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 823, 16), 'if_condition_118076', if_condition_118076)
            # SSA begins for if statement (line 823)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            
            # Obtaining the type of the subscript
            int_118077 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 824, 40), 'int')
            int_118078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 824, 44), 'int')
            slice_118079 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 824, 31), int_118077, None, int_118078)
            # Getting the type of 'dt' (line 824)
            dt_118080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 824, 31), 'dt')
            # Obtaining the member 'shape' of a type (line 824)
            shape_118081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 824, 31), dt_118080, 'shape')
            # Obtaining the member '__getitem__' of a type (line 824)
            getitem___118082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 824, 31), shape_118081, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 824)
            subscript_call_result_118083 = invoke(stypy.reporting.localization.Localization(__file__, 824, 31), getitem___118082, slice_118079)
            
            # Testing the type of a for loop iterable (line 824)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 824, 20), subscript_call_result_118083)
            # Getting the type of the for loop variable (line 824)
            for_loop_var_118084 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 824, 20), subscript_call_result_118083)
            # Assigning a type to the variable 'dim' (line 824)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 824, 20), 'dim', for_loop_var_118084)
            # SSA begins for a for statement (line 824)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            # Assigning a List to a Name (line 825):
            
            # Assigning a List to a Name (line 825):
            
            # Obtaining an instance of the builtin type 'list' (line 825)
            list_118085 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 825, 34), 'list')
            # Adding type elements to the builtin type 'list' instance (line 825)
            # Adding element type (line 825)
            
            # Obtaining an instance of the builtin type 'tuple' (line 825)
            tuple_118086 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 825, 36), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 825)
            # Adding element type (line 825)
            # Getting the type of 'dim' (line 825)
            dim_118087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 36), 'dim')
            
            # Obtaining the type of the subscript
            int_118088 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 825, 51), 'int')
            
            # Obtaining the type of the subscript
            int_118089 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 825, 48), 'int')
            # Getting the type of 'packing' (line 825)
            packing_118090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 40), 'packing')
            # Obtaining the member '__getitem__' of a type (line 825)
            getitem___118091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 825, 40), packing_118090, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 825)
            subscript_call_result_118092 = invoke(stypy.reporting.localization.Localization(__file__, 825, 40), getitem___118091, int_118089)
            
            # Obtaining the member '__getitem__' of a type (line 825)
            getitem___118093 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 825, 40), subscript_call_result_118092, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 825)
            subscript_call_result_118094 = invoke(stypy.reporting.localization.Localization(__file__, 825, 40), getitem___118093, int_118088)
            
            # Applying the binary operator '*' (line 825)
            result_mul_118095 = python_operator(stypy.reporting.localization.Localization(__file__, 825, 36), '*', dim_118087, subscript_call_result_118094)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 825, 36), tuple_118086, result_mul_118095)
            # Adding element type (line 825)
            # Getting the type of 'packing' (line 825)
            packing_118096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 55), 'packing')
            # Getting the type of 'dim' (line 825)
            dim_118097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 63), 'dim')
            # Applying the binary operator '*' (line 825)
            result_mul_118098 = python_operator(stypy.reporting.localization.Localization(__file__, 825, 55), '*', packing_118096, dim_118097)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 825, 36), tuple_118086, result_mul_118098)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 825, 34), list_118085, tuple_118086)
            
            # Assigning a type to the variable 'packing' (line 825)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 825, 24), 'packing', list_118085)
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 823)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Obtaining an instance of the builtin type 'tuple' (line 826)
            tuple_118099 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 826, 24), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 826)
            # Adding element type (line 826)
            
            # Obtaining an instance of the builtin type 'list' (line 826)
            list_118100 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 826, 24), 'list')
            # Adding type elements to the builtin type 'list' instance (line 826)
            # Adding element type (line 826)
            # Getting the type of 'dt' (line 826)
            dt_118101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 25), 'dt')
            # Obtaining the member 'base' of a type (line 826)
            base_118102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 826, 25), dt_118101, 'base')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 826, 24), list_118100, base_118102)
            
            
            # Call to int(...): (line 826)
            # Processing the call arguments (line 826)
            
            # Call to prod(...): (line 826)
            # Processing the call arguments (line 826)
            # Getting the type of 'dt' (line 826)
            dt_118106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 48), 'dt', False)
            # Obtaining the member 'shape' of a type (line 826)
            shape_118107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 826, 48), dt_118106, 'shape')
            # Processing the call keyword arguments (line 826)
            kwargs_118108 = {}
            # Getting the type of 'np' (line 826)
            np_118104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 40), 'np', False)
            # Obtaining the member 'prod' of a type (line 826)
            prod_118105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 826, 40), np_118104, 'prod')
            # Calling prod(args, kwargs) (line 826)
            prod_call_result_118109 = invoke(stypy.reporting.localization.Localization(__file__, 826, 40), prod_118105, *[shape_118107], **kwargs_118108)
            
            # Processing the call keyword arguments (line 826)
            kwargs_118110 = {}
            # Getting the type of 'int' (line 826)
            int_118103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 36), 'int', False)
            # Calling int(args, kwargs) (line 826)
            int_call_result_118111 = invoke(stypy.reporting.localization.Localization(__file__, 826, 36), int_118103, *[prod_call_result_118109], **kwargs_118110)
            
            # Applying the binary operator '*' (line 826)
            result_mul_118112 = python_operator(stypy.reporting.localization.Localization(__file__, 826, 24), '*', list_118100, int_call_result_118111)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 826, 24), tuple_118099, result_mul_118112)
            # Adding element type (line 826)
            # Getting the type of 'packing' (line 826)
            packing_118113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 826, 60), 'packing')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 826, 24), tuple_118099, packing_118113)
            
            # Assigning a type to the variable 'stypy_return_type' (line 826)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 826, 16), 'stypy_return_type', tuple_118099)
            # SSA join for if statement (line 819)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_118048:
                # Runtime conditional SSA for else branch (line 814)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_118047) or more_types_in_union_118048):
            
            # Assigning a List to a Name (line 828):
            
            # Assigning a List to a Name (line 828):
            
            # Obtaining an instance of the builtin type 'list' (line 828)
            list_118114 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 828, 20), 'list')
            # Adding type elements to the builtin type 'list' instance (line 828)
            
            # Assigning a type to the variable 'types' (line 828)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 828, 12), 'types', list_118114)
            
            # Assigning a List to a Name (line 829):
            
            # Assigning a List to a Name (line 829):
            
            # Obtaining an instance of the builtin type 'list' (line 829)
            list_118115 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 829, 22), 'list')
            # Adding type elements to the builtin type 'list' instance (line 829)
            
            # Assigning a type to the variable 'packing' (line 829)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 829, 12), 'packing', list_118115)
            
            # Getting the type of 'dt' (line 830)
            dt_118116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 25), 'dt')
            # Obtaining the member 'names' of a type (line 830)
            names_118117 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 830, 25), dt_118116, 'names')
            # Testing the type of a for loop iterable (line 830)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 830, 12), names_118117)
            # Getting the type of the for loop variable (line 830)
            for_loop_var_118118 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 830, 12), names_118117)
            # Assigning a type to the variable 'field' (line 830)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 830, 12), 'field', for_loop_var_118118)
            # SSA begins for a for statement (line 830)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            # Assigning a Subscript to a Tuple (line 831):
            
            # Assigning a Subscript to a Name (line 831):
            
            # Obtaining the type of the subscript
            int_118119 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 831, 16), 'int')
            
            # Obtaining the type of the subscript
            # Getting the type of 'field' (line 831)
            field_118120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 831, 38), 'field')
            # Getting the type of 'dt' (line 831)
            dt_118121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 831, 28), 'dt')
            # Obtaining the member 'fields' of a type (line 831)
            fields_118122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 831, 28), dt_118121, 'fields')
            # Obtaining the member '__getitem__' of a type (line 831)
            getitem___118123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 831, 28), fields_118122, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 831)
            subscript_call_result_118124 = invoke(stypy.reporting.localization.Localization(__file__, 831, 28), getitem___118123, field_118120)
            
            # Obtaining the member '__getitem__' of a type (line 831)
            getitem___118125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 831, 16), subscript_call_result_118124, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 831)
            subscript_call_result_118126 = invoke(stypy.reporting.localization.Localization(__file__, 831, 16), getitem___118125, int_118119)
            
            # Assigning a type to the variable 'tuple_var_assignment_117135' (line 831)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 831, 16), 'tuple_var_assignment_117135', subscript_call_result_118126)
            
            # Assigning a Subscript to a Name (line 831):
            
            # Obtaining the type of the subscript
            int_118127 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 831, 16), 'int')
            
            # Obtaining the type of the subscript
            # Getting the type of 'field' (line 831)
            field_118128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 831, 38), 'field')
            # Getting the type of 'dt' (line 831)
            dt_118129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 831, 28), 'dt')
            # Obtaining the member 'fields' of a type (line 831)
            fields_118130 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 831, 28), dt_118129, 'fields')
            # Obtaining the member '__getitem__' of a type (line 831)
            getitem___118131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 831, 28), fields_118130, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 831)
            subscript_call_result_118132 = invoke(stypy.reporting.localization.Localization(__file__, 831, 28), getitem___118131, field_118128)
            
            # Obtaining the member '__getitem__' of a type (line 831)
            getitem___118133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 831, 16), subscript_call_result_118132, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 831)
            subscript_call_result_118134 = invoke(stypy.reporting.localization.Localization(__file__, 831, 16), getitem___118133, int_118127)
            
            # Assigning a type to the variable 'tuple_var_assignment_117136' (line 831)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 831, 16), 'tuple_var_assignment_117136', subscript_call_result_118134)
            
            # Assigning a Name to a Name (line 831):
            # Getting the type of 'tuple_var_assignment_117135' (line 831)
            tuple_var_assignment_117135_118135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 831, 16), 'tuple_var_assignment_117135')
            # Assigning a type to the variable 'tp' (line 831)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 831, 16), 'tp', tuple_var_assignment_117135_118135)
            
            # Assigning a Name to a Name (line 831):
            # Getting the type of 'tuple_var_assignment_117136' (line 831)
            tuple_var_assignment_117136_118136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 831, 16), 'tuple_var_assignment_117136')
            # Assigning a type to the variable 'bytes' (line 831)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 831, 20), 'bytes', tuple_var_assignment_117136_118136)
            
            # Assigning a Call to a Tuple (line 832):
            
            # Assigning a Call to a Name:
            
            # Call to flatten_dtype(...): (line 832)
            # Processing the call arguments (line 832)
            # Getting the type of 'tp' (line 832)
            tp_118138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 54), 'tp', False)
            # Processing the call keyword arguments (line 832)
            kwargs_118139 = {}
            # Getting the type of 'flatten_dtype' (line 832)
            flatten_dtype_118137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 40), 'flatten_dtype', False)
            # Calling flatten_dtype(args, kwargs) (line 832)
            flatten_dtype_call_result_118140 = invoke(stypy.reporting.localization.Localization(__file__, 832, 40), flatten_dtype_118137, *[tp_118138], **kwargs_118139)
            
            # Assigning a type to the variable 'call_assignment_117137' (line 832)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 832, 16), 'call_assignment_117137', flatten_dtype_call_result_118140)
            
            # Assigning a Call to a Name (line 832):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_118143 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 832, 16), 'int')
            # Processing the call keyword arguments
            kwargs_118144 = {}
            # Getting the type of 'call_assignment_117137' (line 832)
            call_assignment_117137_118141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 16), 'call_assignment_117137', False)
            # Obtaining the member '__getitem__' of a type (line 832)
            getitem___118142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 832, 16), call_assignment_117137_118141, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_118145 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___118142, *[int_118143], **kwargs_118144)
            
            # Assigning a type to the variable 'call_assignment_117138' (line 832)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 832, 16), 'call_assignment_117138', getitem___call_result_118145)
            
            # Assigning a Name to a Name (line 832):
            # Getting the type of 'call_assignment_117138' (line 832)
            call_assignment_117138_118146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 16), 'call_assignment_117138')
            # Assigning a type to the variable 'flat_dt' (line 832)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 832, 16), 'flat_dt', call_assignment_117138_118146)
            
            # Assigning a Call to a Name (line 832):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_118149 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 832, 16), 'int')
            # Processing the call keyword arguments
            kwargs_118150 = {}
            # Getting the type of 'call_assignment_117137' (line 832)
            call_assignment_117137_118147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 16), 'call_assignment_117137', False)
            # Obtaining the member '__getitem__' of a type (line 832)
            getitem___118148 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 832, 16), call_assignment_117137_118147, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_118151 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___118148, *[int_118149], **kwargs_118150)
            
            # Assigning a type to the variable 'call_assignment_117139' (line 832)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 832, 16), 'call_assignment_117139', getitem___call_result_118151)
            
            # Assigning a Name to a Name (line 832):
            # Getting the type of 'call_assignment_117139' (line 832)
            call_assignment_117139_118152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 16), 'call_assignment_117139')
            # Assigning a type to the variable 'flat_packing' (line 832)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 832, 25), 'flat_packing', call_assignment_117139_118152)
            
            # Call to extend(...): (line 833)
            # Processing the call arguments (line 833)
            # Getting the type of 'flat_dt' (line 833)
            flat_dt_118155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 29), 'flat_dt', False)
            # Processing the call keyword arguments (line 833)
            kwargs_118156 = {}
            # Getting the type of 'types' (line 833)
            types_118153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 16), 'types', False)
            # Obtaining the member 'extend' of a type (line 833)
            extend_118154 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 833, 16), types_118153, 'extend')
            # Calling extend(args, kwargs) (line 833)
            extend_call_result_118157 = invoke(stypy.reporting.localization.Localization(__file__, 833, 16), extend_118154, *[flat_dt_118155], **kwargs_118156)
            
            
            
            
            # Call to len(...): (line 835)
            # Processing the call arguments (line 835)
            # Getting the type of 'tp' (line 835)
            tp_118159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 835, 23), 'tp', False)
            # Obtaining the member 'shape' of a type (line 835)
            shape_118160 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 835, 23), tp_118159, 'shape')
            # Processing the call keyword arguments (line 835)
            kwargs_118161 = {}
            # Getting the type of 'len' (line 835)
            len_118158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 835, 19), 'len', False)
            # Calling len(args, kwargs) (line 835)
            len_call_result_118162 = invoke(stypy.reporting.localization.Localization(__file__, 835, 19), len_118158, *[shape_118160], **kwargs_118161)
            
            int_118163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 835, 35), 'int')
            # Applying the binary operator '>' (line 835)
            result_gt_118164 = python_operator(stypy.reporting.localization.Localization(__file__, 835, 19), '>', len_call_result_118162, int_118163)
            
            # Testing the type of an if condition (line 835)
            if_condition_118165 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 835, 16), result_gt_118164)
            # Assigning a type to the variable 'if_condition_118165' (line 835)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 835, 16), 'if_condition_118165', if_condition_118165)
            # SSA begins for if statement (line 835)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to extend(...): (line 836)
            # Processing the call arguments (line 836)
            # Getting the type of 'flat_packing' (line 836)
            flat_packing_118168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 35), 'flat_packing', False)
            # Processing the call keyword arguments (line 836)
            kwargs_118169 = {}
            # Getting the type of 'packing' (line 836)
            packing_118166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 20), 'packing', False)
            # Obtaining the member 'extend' of a type (line 836)
            extend_118167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 836, 20), packing_118166, 'extend')
            # Calling extend(args, kwargs) (line 836)
            extend_call_result_118170 = invoke(stypy.reporting.localization.Localization(__file__, 836, 20), extend_118167, *[flat_packing_118168], **kwargs_118169)
            
            # SSA branch for the else part of an if statement (line 835)
            module_type_store.open_ssa_branch('else')
            
            # Call to append(...): (line 838)
            # Processing the call arguments (line 838)
            
            # Obtaining an instance of the builtin type 'tuple' (line 838)
            tuple_118173 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 838, 36), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 838)
            # Adding element type (line 838)
            
            # Call to len(...): (line 838)
            # Processing the call arguments (line 838)
            # Getting the type of 'flat_dt' (line 838)
            flat_dt_118175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 40), 'flat_dt', False)
            # Processing the call keyword arguments (line 838)
            kwargs_118176 = {}
            # Getting the type of 'len' (line 838)
            len_118174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 36), 'len', False)
            # Calling len(args, kwargs) (line 838)
            len_call_result_118177 = invoke(stypy.reporting.localization.Localization(__file__, 838, 36), len_118174, *[flat_dt_118175], **kwargs_118176)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 838, 36), tuple_118173, len_call_result_118177)
            # Adding element type (line 838)
            # Getting the type of 'flat_packing' (line 838)
            flat_packing_118178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 50), 'flat_packing', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 838, 36), tuple_118173, flat_packing_118178)
            
            # Processing the call keyword arguments (line 838)
            kwargs_118179 = {}
            # Getting the type of 'packing' (line 838)
            packing_118171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 20), 'packing', False)
            # Obtaining the member 'append' of a type (line 838)
            append_118172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 838, 20), packing_118171, 'append')
            # Calling append(args, kwargs) (line 838)
            append_call_result_118180 = invoke(stypy.reporting.localization.Localization(__file__, 838, 20), append_118172, *[tuple_118173], **kwargs_118179)
            
            # SSA join for if statement (line 835)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Obtaining an instance of the builtin type 'tuple' (line 839)
            tuple_118181 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 839, 20), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 839)
            # Adding element type (line 839)
            # Getting the type of 'types' (line 839)
            types_118182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 20), 'types')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 839, 20), tuple_118181, types_118182)
            # Adding element type (line 839)
            # Getting the type of 'packing' (line 839)
            packing_118183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 27), 'packing')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 839, 20), tuple_118181, packing_118183)
            
            # Assigning a type to the variable 'stypy_return_type' (line 839)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 839, 12), 'stypy_return_type', tuple_118181)

            if (may_be_118047 and more_types_in_union_118048):
                # SSA join for if statement (line 814)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'flatten_dtype(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'flatten_dtype' in the type store
        # Getting the type of 'stypy_return_type' (line 812)
        stypy_return_type_118184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_118184)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'flatten_dtype'
        return stypy_return_type_118184

    # Assigning a type to the variable 'flatten_dtype' (line 812)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 812, 4), 'flatten_dtype', flatten_dtype)

    @norecursion
    def pack_items(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'pack_items'
        module_type_store = module_type_store.open_function_context('pack_items', 841, 4, False)
        
        # Passed parameters checking function
        pack_items.stypy_localization = localization
        pack_items.stypy_type_of_self = None
        pack_items.stypy_type_store = module_type_store
        pack_items.stypy_function_name = 'pack_items'
        pack_items.stypy_param_names_list = ['items', 'packing']
        pack_items.stypy_varargs_param_name = None
        pack_items.stypy_kwargs_param_name = None
        pack_items.stypy_call_defaults = defaults
        pack_items.stypy_call_varargs = varargs
        pack_items.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'pack_items', ['items', 'packing'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'pack_items', localization, ['items', 'packing'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'pack_items(...)' code ##################

        str_118185 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 842, 8), 'str', 'Pack items into nested lists based on re-packing info.')
        
        # Type idiom detected: calculating its left and rigth part (line 843)
        # Getting the type of 'packing' (line 843)
        packing_118186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 11), 'packing')
        # Getting the type of 'None' (line 843)
        None_118187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 22), 'None')
        
        (may_be_118188, more_types_in_union_118189) = may_be_none(packing_118186, None_118187)

        if may_be_118188:

            if more_types_in_union_118189:
                # Runtime conditional SSA (line 843)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Obtaining the type of the subscript
            int_118190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 844, 25), 'int')
            # Getting the type of 'items' (line 844)
            items_118191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 844, 19), 'items')
            # Obtaining the member '__getitem__' of a type (line 844)
            getitem___118192 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 844, 19), items_118191, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 844)
            subscript_call_result_118193 = invoke(stypy.reporting.localization.Localization(__file__, 844, 19), getitem___118192, int_118190)
            
            # Assigning a type to the variable 'stypy_return_type' (line 844)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 844, 12), 'stypy_return_type', subscript_call_result_118193)

            if more_types_in_union_118189:
                # Runtime conditional SSA for else branch (line 843)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_118188) or more_types_in_union_118189):
            
            
            # Getting the type of 'packing' (line 845)
            packing_118194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 845, 13), 'packing')
            # Getting the type of 'tuple' (line 845)
            tuple_118195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 845, 24), 'tuple')
            # Applying the binary operator 'is' (line 845)
            result_is__118196 = python_operator(stypy.reporting.localization.Localization(__file__, 845, 13), 'is', packing_118194, tuple_118195)
            
            # Testing the type of an if condition (line 845)
            if_condition_118197 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 845, 13), result_is__118196)
            # Assigning a type to the variable 'if_condition_118197' (line 845)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 845, 13), 'if_condition_118197', if_condition_118197)
            # SSA begins for if statement (line 845)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to tuple(...): (line 846)
            # Processing the call arguments (line 846)
            # Getting the type of 'items' (line 846)
            items_118199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 25), 'items', False)
            # Processing the call keyword arguments (line 846)
            kwargs_118200 = {}
            # Getting the type of 'tuple' (line 846)
            tuple_118198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 19), 'tuple', False)
            # Calling tuple(args, kwargs) (line 846)
            tuple_call_result_118201 = invoke(stypy.reporting.localization.Localization(__file__, 846, 19), tuple_118198, *[items_118199], **kwargs_118200)
            
            # Assigning a type to the variable 'stypy_return_type' (line 846)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 846, 12), 'stypy_return_type', tuple_call_result_118201)
            # SSA branch for the else part of an if statement (line 845)
            module_type_store.open_ssa_branch('else')
            
            
            # Getting the type of 'packing' (line 847)
            packing_118202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 847, 13), 'packing')
            # Getting the type of 'list' (line 847)
            list_118203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 847, 24), 'list')
            # Applying the binary operator 'is' (line 847)
            result_is__118204 = python_operator(stypy.reporting.localization.Localization(__file__, 847, 13), 'is', packing_118202, list_118203)
            
            # Testing the type of an if condition (line 847)
            if_condition_118205 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 847, 13), result_is__118204)
            # Assigning a type to the variable 'if_condition_118205' (line 847)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 847, 13), 'if_condition_118205', if_condition_118205)
            # SSA begins for if statement (line 847)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to list(...): (line 848)
            # Processing the call arguments (line 848)
            # Getting the type of 'items' (line 848)
            items_118207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 24), 'items', False)
            # Processing the call keyword arguments (line 848)
            kwargs_118208 = {}
            # Getting the type of 'list' (line 848)
            list_118206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 19), 'list', False)
            # Calling list(args, kwargs) (line 848)
            list_call_result_118209 = invoke(stypy.reporting.localization.Localization(__file__, 848, 19), list_118206, *[items_118207], **kwargs_118208)
            
            # Assigning a type to the variable 'stypy_return_type' (line 848)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 848, 12), 'stypy_return_type', list_call_result_118209)
            # SSA branch for the else part of an if statement (line 847)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Num to a Name (line 850):
            
            # Assigning a Num to a Name (line 850):
            int_118210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 850, 20), 'int')
            # Assigning a type to the variable 'start' (line 850)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 850, 12), 'start', int_118210)
            
            # Assigning a List to a Name (line 851):
            
            # Assigning a List to a Name (line 851):
            
            # Obtaining an instance of the builtin type 'list' (line 851)
            list_118211 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 851, 18), 'list')
            # Adding type elements to the builtin type 'list' instance (line 851)
            
            # Assigning a type to the variable 'ret' (line 851)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 851, 12), 'ret', list_118211)
            
            # Getting the type of 'packing' (line 852)
            packing_118212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 852, 38), 'packing')
            # Testing the type of a for loop iterable (line 852)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 852, 12), packing_118212)
            # Getting the type of the for loop variable (line 852)
            for_loop_var_118213 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 852, 12), packing_118212)
            # Assigning a type to the variable 'length' (line 852)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 852, 12), 'length', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 852, 12), for_loop_var_118213))
            # Assigning a type to the variable 'subpacking' (line 852)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 852, 12), 'subpacking', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 852, 12), for_loop_var_118213))
            # SSA begins for a for statement (line 852)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            # Call to append(...): (line 853)
            # Processing the call arguments (line 853)
            
            # Call to pack_items(...): (line 853)
            # Processing the call arguments (line 853)
            
            # Obtaining the type of the subscript
            # Getting the type of 'start' (line 853)
            start_118217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 853, 44), 'start', False)
            # Getting the type of 'start' (line 853)
            start_118218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 853, 50), 'start', False)
            # Getting the type of 'length' (line 853)
            length_118219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 853, 56), 'length', False)
            # Applying the binary operator '+' (line 853)
            result_add_118220 = python_operator(stypy.reporting.localization.Localization(__file__, 853, 50), '+', start_118218, length_118219)
            
            slice_118221 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 853, 38), start_118217, result_add_118220, None)
            # Getting the type of 'items' (line 853)
            items_118222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 853, 38), 'items', False)
            # Obtaining the member '__getitem__' of a type (line 853)
            getitem___118223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 853, 38), items_118222, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 853)
            subscript_call_result_118224 = invoke(stypy.reporting.localization.Localization(__file__, 853, 38), getitem___118223, slice_118221)
            
            # Getting the type of 'subpacking' (line 853)
            subpacking_118225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 853, 65), 'subpacking', False)
            # Processing the call keyword arguments (line 853)
            kwargs_118226 = {}
            # Getting the type of 'pack_items' (line 853)
            pack_items_118216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 853, 27), 'pack_items', False)
            # Calling pack_items(args, kwargs) (line 853)
            pack_items_call_result_118227 = invoke(stypy.reporting.localization.Localization(__file__, 853, 27), pack_items_118216, *[subscript_call_result_118224, subpacking_118225], **kwargs_118226)
            
            # Processing the call keyword arguments (line 853)
            kwargs_118228 = {}
            # Getting the type of 'ret' (line 853)
            ret_118214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 853, 16), 'ret', False)
            # Obtaining the member 'append' of a type (line 853)
            append_118215 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 853, 16), ret_118214, 'append')
            # Calling append(args, kwargs) (line 853)
            append_call_result_118229 = invoke(stypy.reporting.localization.Localization(__file__, 853, 16), append_118215, *[pack_items_call_result_118227], **kwargs_118228)
            
            
            # Getting the type of 'start' (line 854)
            start_118230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 854, 16), 'start')
            # Getting the type of 'length' (line 854)
            length_118231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 854, 25), 'length')
            # Applying the binary operator '+=' (line 854)
            result_iadd_118232 = python_operator(stypy.reporting.localization.Localization(__file__, 854, 16), '+=', start_118230, length_118231)
            # Assigning a type to the variable 'start' (line 854)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 854, 16), 'start', result_iadd_118232)
            
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Call to tuple(...): (line 855)
            # Processing the call arguments (line 855)
            # Getting the type of 'ret' (line 855)
            ret_118234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 25), 'ret', False)
            # Processing the call keyword arguments (line 855)
            kwargs_118235 = {}
            # Getting the type of 'tuple' (line 855)
            tuple_118233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 19), 'tuple', False)
            # Calling tuple(args, kwargs) (line 855)
            tuple_call_result_118236 = invoke(stypy.reporting.localization.Localization(__file__, 855, 19), tuple_118233, *[ret_118234], **kwargs_118235)
            
            # Assigning a type to the variable 'stypy_return_type' (line 855)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 855, 12), 'stypy_return_type', tuple_call_result_118236)
            # SSA join for if statement (line 847)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 845)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_118188 and more_types_in_union_118189):
                # SSA join for if statement (line 843)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'pack_items(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'pack_items' in the type store
        # Getting the type of 'stypy_return_type' (line 841)
        stypy_return_type_118237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_118237)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'pack_items'
        return stypy_return_type_118237

    # Assigning a type to the variable 'pack_items' (line 841)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 841, 4), 'pack_items', pack_items)

    @norecursion
    def split_line(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'split_line'
        module_type_store = module_type_store.open_function_context('split_line', 857, 4, False)
        
        # Passed parameters checking function
        split_line.stypy_localization = localization
        split_line.stypy_type_of_self = None
        split_line.stypy_type_store = module_type_store
        split_line.stypy_function_name = 'split_line'
        split_line.stypy_param_names_list = ['line']
        split_line.stypy_varargs_param_name = None
        split_line.stypy_kwargs_param_name = None
        split_line.stypy_call_defaults = defaults
        split_line.stypy_call_varargs = varargs
        split_line.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'split_line', ['line'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'split_line', localization, ['line'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'split_line(...)' code ##################

        str_118238 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 863, (-1)), 'str', 'Chop off comments, strip, and split at delimiter.\n\n        Note that although the file is opened as text, this function\n        returns bytes.\n\n        ')
        
        # Assigning a Call to a Name (line 864):
        
        # Assigning a Call to a Name (line 864):
        
        # Call to asbytes(...): (line 864)
        # Processing the call arguments (line 864)
        # Getting the type of 'line' (line 864)
        line_118240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 864, 23), 'line', False)
        # Processing the call keyword arguments (line 864)
        kwargs_118241 = {}
        # Getting the type of 'asbytes' (line 864)
        asbytes_118239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 864, 15), 'asbytes', False)
        # Calling asbytes(args, kwargs) (line 864)
        asbytes_call_result_118242 = invoke(stypy.reporting.localization.Localization(__file__, 864, 15), asbytes_118239, *[line_118240], **kwargs_118241)
        
        # Assigning a type to the variable 'line' (line 864)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 864, 8), 'line', asbytes_call_result_118242)
        
        # Type idiom detected: calculating its left and rigth part (line 865)
        # Getting the type of 'comments' (line 865)
        comments_118243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 865, 8), 'comments')
        # Getting the type of 'None' (line 865)
        None_118244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 865, 27), 'None')
        
        (may_be_118245, more_types_in_union_118246) = may_not_be_none(comments_118243, None_118244)

        if may_be_118245:

            if more_types_in_union_118246:
                # Runtime conditional SSA (line 865)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 866):
            
            # Assigning a Subscript to a Name (line 866):
            
            # Obtaining the type of the subscript
            int_118247 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 866, 67), 'int')
            
            # Call to split(...): (line 866)
            # Processing the call arguments (line 866)
            
            # Call to asbytes(...): (line 866)
            # Processing the call arguments (line 866)
            # Getting the type of 'line' (line 866)
            line_118251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 866, 48), 'line', False)
            # Processing the call keyword arguments (line 866)
            kwargs_118252 = {}
            # Getting the type of 'asbytes' (line 866)
            asbytes_118250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 866, 40), 'asbytes', False)
            # Calling asbytes(args, kwargs) (line 866)
            asbytes_call_result_118253 = invoke(stypy.reporting.localization.Localization(__file__, 866, 40), asbytes_118250, *[line_118251], **kwargs_118252)
            
            # Processing the call keyword arguments (line 866)
            int_118254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 866, 64), 'int')
            keyword_118255 = int_118254
            kwargs_118256 = {'maxsplit': keyword_118255}
            # Getting the type of 'regex_comments' (line 866)
            regex_comments_118248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 866, 19), 'regex_comments', False)
            # Obtaining the member 'split' of a type (line 866)
            split_118249 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 866, 19), regex_comments_118248, 'split')
            # Calling split(args, kwargs) (line 866)
            split_call_result_118257 = invoke(stypy.reporting.localization.Localization(__file__, 866, 19), split_118249, *[asbytes_call_result_118253], **kwargs_118256)
            
            # Obtaining the member '__getitem__' of a type (line 866)
            getitem___118258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 866, 19), split_call_result_118257, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 866)
            subscript_call_result_118259 = invoke(stypy.reporting.localization.Localization(__file__, 866, 19), getitem___118258, int_118247)
            
            # Assigning a type to the variable 'line' (line 866)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 866, 12), 'line', subscript_call_result_118259)

            if more_types_in_union_118246:
                # SSA join for if statement (line 865)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 867):
        
        # Assigning a Call to a Name (line 867):
        
        # Call to strip(...): (line 867)
        # Processing the call arguments (line 867)
        
        # Call to asbytes(...): (line 867)
        # Processing the call arguments (line 867)
        str_118263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 867, 34), 'str', '\r\n')
        # Processing the call keyword arguments (line 867)
        kwargs_118264 = {}
        # Getting the type of 'asbytes' (line 867)
        asbytes_118262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 867, 26), 'asbytes', False)
        # Calling asbytes(args, kwargs) (line 867)
        asbytes_call_result_118265 = invoke(stypy.reporting.localization.Localization(__file__, 867, 26), asbytes_118262, *[str_118263], **kwargs_118264)
        
        # Processing the call keyword arguments (line 867)
        kwargs_118266 = {}
        # Getting the type of 'line' (line 867)
        line_118260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 867, 15), 'line', False)
        # Obtaining the member 'strip' of a type (line 867)
        strip_118261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 867, 15), line_118260, 'strip')
        # Calling strip(args, kwargs) (line 867)
        strip_call_result_118267 = invoke(stypy.reporting.localization.Localization(__file__, 867, 15), strip_118261, *[asbytes_call_result_118265], **kwargs_118266)
        
        # Assigning a type to the variable 'line' (line 867)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 867, 8), 'line', strip_call_result_118267)
        
        # Getting the type of 'line' (line 868)
        line_118268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 11), 'line')
        # Testing the type of an if condition (line 868)
        if_condition_118269 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 868, 8), line_118268)
        # Assigning a type to the variable 'if_condition_118269' (line 868)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 868, 8), 'if_condition_118269', if_condition_118269)
        # SSA begins for if statement (line 868)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to split(...): (line 869)
        # Processing the call arguments (line 869)
        # Getting the type of 'delimiter' (line 869)
        delimiter_118272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 869, 30), 'delimiter', False)
        # Processing the call keyword arguments (line 869)
        kwargs_118273 = {}
        # Getting the type of 'line' (line 869)
        line_118270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 869, 19), 'line', False)
        # Obtaining the member 'split' of a type (line 869)
        split_118271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 869, 19), line_118270, 'split')
        # Calling split(args, kwargs) (line 869)
        split_call_result_118274 = invoke(stypy.reporting.localization.Localization(__file__, 869, 19), split_118271, *[delimiter_118272], **kwargs_118273)
        
        # Assigning a type to the variable 'stypy_return_type' (line 869)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 869, 12), 'stypy_return_type', split_call_result_118274)
        # SSA branch for the else part of an if statement (line 868)
        module_type_store.open_ssa_branch('else')
        
        # Obtaining an instance of the builtin type 'list' (line 871)
        list_118275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 871, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 871)
        
        # Assigning a type to the variable 'stypy_return_type' (line 871)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 871, 12), 'stypy_return_type', list_118275)
        # SSA join for if statement (line 868)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'split_line(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'split_line' in the type store
        # Getting the type of 'stypy_return_type' (line 857)
        stypy_return_type_118276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 857, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_118276)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'split_line'
        return stypy_return_type_118276

    # Assigning a type to the variable 'split_line' (line 857)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 857, 4), 'split_line', split_line)
    
    # Try-finally block (line 873)
    
    # Assigning a Call to a Name (line 875):
    
    # Assigning a Call to a Name (line 875):
    
    # Call to dtype(...): (line 875)
    # Processing the call arguments (line 875)
    # Getting the type of 'dtype' (line 875)
    dtype_118279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 875, 25), 'dtype', False)
    # Processing the call keyword arguments (line 875)
    kwargs_118280 = {}
    # Getting the type of 'np' (line 875)
    np_118277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 875, 16), 'np', False)
    # Obtaining the member 'dtype' of a type (line 875)
    dtype_118278 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 875, 16), np_118277, 'dtype')
    # Calling dtype(args, kwargs) (line 875)
    dtype_call_result_118281 = invoke(stypy.reporting.localization.Localization(__file__, 875, 16), dtype_118278, *[dtype_118279], **kwargs_118280)
    
    # Assigning a type to the variable 'dtype' (line 875)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 875, 8), 'dtype', dtype_call_result_118281)
    
    # Assigning a Call to a Name (line 876):
    
    # Assigning a Call to a Name (line 876):
    
    # Call to _getconv(...): (line 876)
    # Processing the call arguments (line 876)
    # Getting the type of 'dtype' (line 876)
    dtype_118283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 27), 'dtype', False)
    # Processing the call keyword arguments (line 876)
    kwargs_118284 = {}
    # Getting the type of '_getconv' (line 876)
    _getconv_118282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 18), '_getconv', False)
    # Calling _getconv(args, kwargs) (line 876)
    _getconv_call_result_118285 = invoke(stypy.reporting.localization.Localization(__file__, 876, 18), _getconv_118282, *[dtype_118283], **kwargs_118284)
    
    # Assigning a type to the variable 'defconv' (line 876)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 876, 8), 'defconv', _getconv_call_result_118285)
    
    
    # Call to range(...): (line 879)
    # Processing the call arguments (line 879)
    # Getting the type of 'skiprows' (line 879)
    skiprows_118287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 23), 'skiprows', False)
    # Processing the call keyword arguments (line 879)
    kwargs_118288 = {}
    # Getting the type of 'range' (line 879)
    range_118286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 17), 'range', False)
    # Calling range(args, kwargs) (line 879)
    range_call_result_118289 = invoke(stypy.reporting.localization.Localization(__file__, 879, 17), range_118286, *[skiprows_118287], **kwargs_118288)
    
    # Testing the type of a for loop iterable (line 879)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 879, 8), range_call_result_118289)
    # Getting the type of the for loop variable (line 879)
    for_loop_var_118290 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 879, 8), range_call_result_118289)
    # Assigning a type to the variable 'i' (line 879)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 879, 8), 'i', for_loop_var_118290)
    # SSA begins for a for statement (line 879)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to next(...): (line 880)
    # Processing the call arguments (line 880)
    # Getting the type of 'fh' (line 880)
    fh_118292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 880, 17), 'fh', False)
    # Processing the call keyword arguments (line 880)
    kwargs_118293 = {}
    # Getting the type of 'next' (line 880)
    next_118291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 880, 12), 'next', False)
    # Calling next(args, kwargs) (line 880)
    next_call_result_118294 = invoke(stypy.reporting.localization.Localization(__file__, 880, 12), next_118291, *[fh_118292], **kwargs_118293)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Name (line 884):
    
    # Assigning a Name to a Name (line 884):
    # Getting the type of 'None' (line 884)
    None_118295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 21), 'None')
    # Assigning a type to the variable 'first_vals' (line 884)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 884, 8), 'first_vals', None_118295)
    
    
    # SSA begins for try-except statement (line 885)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    
    # Getting the type of 'first_vals' (line 886)
    first_vals_118296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 22), 'first_vals')
    # Applying the 'not' unary operator (line 886)
    result_not__118297 = python_operator(stypy.reporting.localization.Localization(__file__, 886, 18), 'not', first_vals_118296)
    
    # Testing the type of an if condition (line 886)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 886, 12), result_not__118297)
    # SSA begins for while statement (line 886)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    # Assigning a Call to a Name (line 887):
    
    # Assigning a Call to a Name (line 887):
    
    # Call to next(...): (line 887)
    # Processing the call arguments (line 887)
    # Getting the type of 'fh' (line 887)
    fh_118299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 34), 'fh', False)
    # Processing the call keyword arguments (line 887)
    kwargs_118300 = {}
    # Getting the type of 'next' (line 887)
    next_118298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 29), 'next', False)
    # Calling next(args, kwargs) (line 887)
    next_call_result_118301 = invoke(stypy.reporting.localization.Localization(__file__, 887, 29), next_118298, *[fh_118299], **kwargs_118300)
    
    # Assigning a type to the variable 'first_line' (line 887)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 887, 16), 'first_line', next_call_result_118301)
    
    # Assigning a Call to a Name (line 888):
    
    # Assigning a Call to a Name (line 888):
    
    # Call to split_line(...): (line 888)
    # Processing the call arguments (line 888)
    # Getting the type of 'first_line' (line 888)
    first_line_118303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 40), 'first_line', False)
    # Processing the call keyword arguments (line 888)
    kwargs_118304 = {}
    # Getting the type of 'split_line' (line 888)
    split_line_118302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 29), 'split_line', False)
    # Calling split_line(args, kwargs) (line 888)
    split_line_call_result_118305 = invoke(stypy.reporting.localization.Localization(__file__, 888, 29), split_line_118302, *[first_line_118303], **kwargs_118304)
    
    # Assigning a type to the variable 'first_vals' (line 888)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 888, 16), 'first_vals', split_line_call_result_118305)
    # SSA join for while statement (line 886)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the except part of a try statement (line 885)
    # SSA branch for the except 'StopIteration' branch of a try statement (line 885)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Str to a Name (line 891):
    
    # Assigning a Str to a Name (line 891):
    str_118306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 891, 25), 'str', '')
    # Assigning a type to the variable 'first_line' (line 891)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 891, 12), 'first_line', str_118306)
    
    # Assigning a List to a Name (line 892):
    
    # Assigning a List to a Name (line 892):
    
    # Obtaining an instance of the builtin type 'list' (line 892)
    list_118307 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 892, 25), 'list')
    # Adding type elements to the builtin type 'list' instance (line 892)
    
    # Assigning a type to the variable 'first_vals' (line 892)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 892, 12), 'first_vals', list_118307)
    
    # Call to warn(...): (line 893)
    # Processing the call arguments (line 893)
    str_118310 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 893, 26), 'str', 'loadtxt: Empty input file: "%s"')
    # Getting the type of 'fname' (line 893)
    fname_118311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 893, 62), 'fname', False)
    # Applying the binary operator '%' (line 893)
    result_mod_118312 = python_operator(stypy.reporting.localization.Localization(__file__, 893, 26), '%', str_118310, fname_118311)
    
    # Processing the call keyword arguments (line 893)
    kwargs_118313 = {}
    # Getting the type of 'warnings' (line 893)
    warnings_118308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 893, 12), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 893)
    warn_118309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 893, 12), warnings_118308, 'warn')
    # Calling warn(args, kwargs) (line 893)
    warn_call_result_118314 = invoke(stypy.reporting.localization.Localization(__file__, 893, 12), warn_118309, *[result_mod_118312], **kwargs_118313)
    
    # SSA join for try-except statement (line 885)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 894):
    
    # Assigning a Call to a Name (line 894):
    
    # Call to len(...): (line 894)
    # Processing the call arguments (line 894)
    
    # Evaluating a boolean operation
    # Getting the type of 'usecols' (line 894)
    usecols_118316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 16), 'usecols', False)
    # Getting the type of 'first_vals' (line 894)
    first_vals_118317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 27), 'first_vals', False)
    # Applying the binary operator 'or' (line 894)
    result_or_keyword_118318 = python_operator(stypy.reporting.localization.Localization(__file__, 894, 16), 'or', usecols_118316, first_vals_118317)
    
    # Processing the call keyword arguments (line 894)
    kwargs_118319 = {}
    # Getting the type of 'len' (line 894)
    len_118315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 12), 'len', False)
    # Calling len(args, kwargs) (line 894)
    len_call_result_118320 = invoke(stypy.reporting.localization.Localization(__file__, 894, 12), len_118315, *[result_or_keyword_118318], **kwargs_118319)
    
    # Assigning a type to the variable 'N' (line 894)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 894, 8), 'N', len_call_result_118320)
    
    # Assigning a Call to a Tuple (line 896):
    
    # Assigning a Call to a Name:
    
    # Call to flatten_dtype(...): (line 896)
    # Processing the call arguments (line 896)
    # Getting the type of 'dtype' (line 896)
    dtype_118322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 45), 'dtype', False)
    # Processing the call keyword arguments (line 896)
    kwargs_118323 = {}
    # Getting the type of 'flatten_dtype' (line 896)
    flatten_dtype_118321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 31), 'flatten_dtype', False)
    # Calling flatten_dtype(args, kwargs) (line 896)
    flatten_dtype_call_result_118324 = invoke(stypy.reporting.localization.Localization(__file__, 896, 31), flatten_dtype_118321, *[dtype_118322], **kwargs_118323)
    
    # Assigning a type to the variable 'call_assignment_117140' (line 896)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 896, 8), 'call_assignment_117140', flatten_dtype_call_result_118324)
    
    # Assigning a Call to a Name (line 896):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_118327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 896, 8), 'int')
    # Processing the call keyword arguments
    kwargs_118328 = {}
    # Getting the type of 'call_assignment_117140' (line 896)
    call_assignment_117140_118325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 8), 'call_assignment_117140', False)
    # Obtaining the member '__getitem__' of a type (line 896)
    getitem___118326 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 896, 8), call_assignment_117140_118325, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_118329 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___118326, *[int_118327], **kwargs_118328)
    
    # Assigning a type to the variable 'call_assignment_117141' (line 896)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 896, 8), 'call_assignment_117141', getitem___call_result_118329)
    
    # Assigning a Name to a Name (line 896):
    # Getting the type of 'call_assignment_117141' (line 896)
    call_assignment_117141_118330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 8), 'call_assignment_117141')
    # Assigning a type to the variable 'dtype_types' (line 896)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 896, 8), 'dtype_types', call_assignment_117141_118330)
    
    # Assigning a Call to a Name (line 896):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_118333 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 896, 8), 'int')
    # Processing the call keyword arguments
    kwargs_118334 = {}
    # Getting the type of 'call_assignment_117140' (line 896)
    call_assignment_117140_118331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 8), 'call_assignment_117140', False)
    # Obtaining the member '__getitem__' of a type (line 896)
    getitem___118332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 896, 8), call_assignment_117140_118331, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_118335 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___118332, *[int_118333], **kwargs_118334)
    
    # Assigning a type to the variable 'call_assignment_117142' (line 896)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 896, 8), 'call_assignment_117142', getitem___call_result_118335)
    
    # Assigning a Name to a Name (line 896):
    # Getting the type of 'call_assignment_117142' (line 896)
    call_assignment_117142_118336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 8), 'call_assignment_117142')
    # Assigning a type to the variable 'packing' (line 896)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 896, 21), 'packing', call_assignment_117142_118336)
    
    
    
    # Call to len(...): (line 897)
    # Processing the call arguments (line 897)
    # Getting the type of 'dtype_types' (line 897)
    dtype_types_118338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 897, 15), 'dtype_types', False)
    # Processing the call keyword arguments (line 897)
    kwargs_118339 = {}
    # Getting the type of 'len' (line 897)
    len_118337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 897, 11), 'len', False)
    # Calling len(args, kwargs) (line 897)
    len_call_result_118340 = invoke(stypy.reporting.localization.Localization(__file__, 897, 11), len_118337, *[dtype_types_118338], **kwargs_118339)
    
    int_118341 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 897, 30), 'int')
    # Applying the binary operator '>' (line 897)
    result_gt_118342 = python_operator(stypy.reporting.localization.Localization(__file__, 897, 11), '>', len_call_result_118340, int_118341)
    
    # Testing the type of an if condition (line 897)
    if_condition_118343 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 897, 8), result_gt_118342)
    # Assigning a type to the variable 'if_condition_118343' (line 897)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 897, 8), 'if_condition_118343', if_condition_118343)
    # SSA begins for if statement (line 897)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a ListComp to a Name (line 900):
    
    # Assigning a ListComp to a Name (line 900):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'dtype_types' (line 900)
    dtype_types_118348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 49), 'dtype_types')
    comprehension_118349 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 900, 26), dtype_types_118348)
    # Assigning a type to the variable 'dt' (line 900)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 900, 26), 'dt', comprehension_118349)
    
    # Call to _getconv(...): (line 900)
    # Processing the call arguments (line 900)
    # Getting the type of 'dt' (line 900)
    dt_118345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 35), 'dt', False)
    # Processing the call keyword arguments (line 900)
    kwargs_118346 = {}
    # Getting the type of '_getconv' (line 900)
    _getconv_118344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 26), '_getconv', False)
    # Calling _getconv(args, kwargs) (line 900)
    _getconv_call_result_118347 = invoke(stypy.reporting.localization.Localization(__file__, 900, 26), _getconv_118344, *[dt_118345], **kwargs_118346)
    
    list_118350 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 900, 26), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 900, 26), list_118350, _getconv_call_result_118347)
    # Assigning a type to the variable 'converters' (line 900)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 900, 12), 'converters', list_118350)
    # SSA branch for the else part of an if statement (line 897)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a ListComp to a Name (line 903):
    
    # Assigning a ListComp to a Name (line 903):
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to range(...): (line 903)
    # Processing the call arguments (line 903)
    # Getting the type of 'N' (line 903)
    N_118353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 49), 'N', False)
    # Processing the call keyword arguments (line 903)
    kwargs_118354 = {}
    # Getting the type of 'range' (line 903)
    range_118352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 43), 'range', False)
    # Calling range(args, kwargs) (line 903)
    range_call_result_118355 = invoke(stypy.reporting.localization.Localization(__file__, 903, 43), range_118352, *[N_118353], **kwargs_118354)
    
    comprehension_118356 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 903, 26), range_call_result_118355)
    # Assigning a type to the variable 'i' (line 903)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 903, 26), 'i', comprehension_118356)
    # Getting the type of 'defconv' (line 903)
    defconv_118351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 26), 'defconv')
    list_118357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 903, 26), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 903, 26), list_118357, defconv_118351)
    # Assigning a type to the variable 'converters' (line 903)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 903, 12), 'converters', list_118357)
    
    
    # Getting the type of 'N' (line 904)
    N_118358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 904, 15), 'N')
    int_118359 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 904, 19), 'int')
    # Applying the binary operator '>' (line 904)
    result_gt_118360 = python_operator(stypy.reporting.localization.Localization(__file__, 904, 15), '>', N_118358, int_118359)
    
    # Testing the type of an if condition (line 904)
    if_condition_118361 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 904, 12), result_gt_118360)
    # Assigning a type to the variable 'if_condition_118361' (line 904)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 904, 12), 'if_condition_118361', if_condition_118361)
    # SSA begins for if statement (line 904)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a List to a Name (line 905):
    
    # Assigning a List to a Name (line 905):
    
    # Obtaining an instance of the builtin type 'list' (line 905)
    list_118362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 905, 26), 'list')
    # Adding type elements to the builtin type 'list' instance (line 905)
    # Adding element type (line 905)
    
    # Obtaining an instance of the builtin type 'tuple' (line 905)
    tuple_118363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 905, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 905)
    # Adding element type (line 905)
    # Getting the type of 'N' (line 905)
    N_118364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 28), 'N')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 905, 28), tuple_118363, N_118364)
    # Adding element type (line 905)
    # Getting the type of 'tuple' (line 905)
    tuple_118365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 31), 'tuple')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 905, 28), tuple_118363, tuple_118365)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 905, 26), list_118362, tuple_118363)
    
    # Assigning a type to the variable 'packing' (line 905)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 905, 16), 'packing', list_118362)
    # SSA join for if statement (line 904)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 897)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to items(...): (line 908)
    # Processing the call keyword arguments (line 908)
    kwargs_118370 = {}
    
    # Evaluating a boolean operation
    # Getting the type of 'user_converters' (line 908)
    user_converters_118366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 24), 'user_converters', False)
    
    # Obtaining an instance of the builtin type 'dict' (line 908)
    dict_118367 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 908, 43), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 908)
    
    # Applying the binary operator 'or' (line 908)
    result_or_keyword_118368 = python_operator(stypy.reporting.localization.Localization(__file__, 908, 24), 'or', user_converters_118366, dict_118367)
    
    # Obtaining the member 'items' of a type (line 908)
    items_118369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 908, 24), result_or_keyword_118368, 'items')
    # Calling items(args, kwargs) (line 908)
    items_call_result_118371 = invoke(stypy.reporting.localization.Localization(__file__, 908, 24), items_118369, *[], **kwargs_118370)
    
    # Testing the type of a for loop iterable (line 908)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 908, 8), items_call_result_118371)
    # Getting the type of the for loop variable (line 908)
    for_loop_var_118372 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 908, 8), items_call_result_118371)
    # Assigning a type to the variable 'i' (line 908)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 908, 8), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 908, 8), for_loop_var_118372))
    # Assigning a type to the variable 'conv' (line 908)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 908, 8), 'conv', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 908, 8), for_loop_var_118372))
    # SSA begins for a for statement (line 908)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Getting the type of 'usecols' (line 909)
    usecols_118373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 15), 'usecols')
    # Testing the type of an if condition (line 909)
    if_condition_118374 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 909, 12), usecols_118373)
    # Assigning a type to the variable 'if_condition_118374' (line 909)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 909, 12), 'if_condition_118374', if_condition_118374)
    # SSA begins for if statement (line 909)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # SSA begins for try-except statement (line 910)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 911):
    
    # Assigning a Call to a Name (line 911):
    
    # Call to index(...): (line 911)
    # Processing the call arguments (line 911)
    # Getting the type of 'i' (line 911)
    i_118377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 38), 'i', False)
    # Processing the call keyword arguments (line 911)
    kwargs_118378 = {}
    # Getting the type of 'usecols' (line 911)
    usecols_118375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 24), 'usecols', False)
    # Obtaining the member 'index' of a type (line 911)
    index_118376 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 911, 24), usecols_118375, 'index')
    # Calling index(args, kwargs) (line 911)
    index_call_result_118379 = invoke(stypy.reporting.localization.Localization(__file__, 911, 24), index_118376, *[i_118377], **kwargs_118378)
    
    # Assigning a type to the variable 'i' (line 911)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 911, 20), 'i', index_call_result_118379)
    # SSA branch for the except part of a try statement (line 910)
    # SSA branch for the except 'ValueError' branch of a try statement (line 910)
    module_type_store.open_ssa_branch('except')
    # SSA join for try-except statement (line 910)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 909)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Subscript (line 915):
    
    # Assigning a Name to a Subscript (line 915):
    # Getting the type of 'conv' (line 915)
    conv_118380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 28), 'conv')
    # Getting the type of 'converters' (line 915)
    converters_118381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 12), 'converters')
    # Getting the type of 'i' (line 915)
    i_118382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 23), 'i')
    # Storing an element on a container (line 915)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 915, 12), converters_118381, (i_118382, conv_118380))
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to enumerate(...): (line 918)
    # Processing the call arguments (line 918)
    
    # Call to chain(...): (line 918)
    # Processing the call arguments (line 918)
    
    # Obtaining an instance of the builtin type 'list' (line 918)
    list_118386 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 918, 49), 'list')
    # Adding type elements to the builtin type 'list' instance (line 918)
    # Adding element type (line 918)
    # Getting the type of 'first_line' (line 918)
    first_line_118387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 50), 'first_line', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 918, 49), list_118386, first_line_118387)
    
    # Getting the type of 'fh' (line 918)
    fh_118388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 63), 'fh', False)
    # Processing the call keyword arguments (line 918)
    kwargs_118389 = {}
    # Getting the type of 'itertools' (line 918)
    itertools_118384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 33), 'itertools', False)
    # Obtaining the member 'chain' of a type (line 918)
    chain_118385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 918, 33), itertools_118384, 'chain')
    # Calling chain(args, kwargs) (line 918)
    chain_call_result_118390 = invoke(stypy.reporting.localization.Localization(__file__, 918, 33), chain_118385, *[list_118386, fh_118388], **kwargs_118389)
    
    # Processing the call keyword arguments (line 918)
    kwargs_118391 = {}
    # Getting the type of 'enumerate' (line 918)
    enumerate_118383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 23), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 918)
    enumerate_call_result_118392 = invoke(stypy.reporting.localization.Localization(__file__, 918, 23), enumerate_118383, *[chain_call_result_118390], **kwargs_118391)
    
    # Testing the type of a for loop iterable (line 918)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 918, 8), enumerate_call_result_118392)
    # Getting the type of the for loop variable (line 918)
    for_loop_var_118393 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 918, 8), enumerate_call_result_118392)
    # Assigning a type to the variable 'i' (line 918)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 918, 8), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 918, 8), for_loop_var_118393))
    # Assigning a type to the variable 'line' (line 918)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 918, 8), 'line', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 918, 8), for_loop_var_118393))
    # SSA begins for a for statement (line 918)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 919):
    
    # Assigning a Call to a Name (line 919):
    
    # Call to split_line(...): (line 919)
    # Processing the call arguments (line 919)
    # Getting the type of 'line' (line 919)
    line_118395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 919, 30), 'line', False)
    # Processing the call keyword arguments (line 919)
    kwargs_118396 = {}
    # Getting the type of 'split_line' (line 919)
    split_line_118394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 919, 19), 'split_line', False)
    # Calling split_line(args, kwargs) (line 919)
    split_line_call_result_118397 = invoke(stypy.reporting.localization.Localization(__file__, 919, 19), split_line_118394, *[line_118395], **kwargs_118396)
    
    # Assigning a type to the variable 'vals' (line 919)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 919, 12), 'vals', split_line_call_result_118397)
    
    
    
    # Call to len(...): (line 920)
    # Processing the call arguments (line 920)
    # Getting the type of 'vals' (line 920)
    vals_118399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 19), 'vals', False)
    # Processing the call keyword arguments (line 920)
    kwargs_118400 = {}
    # Getting the type of 'len' (line 920)
    len_118398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 15), 'len', False)
    # Calling len(args, kwargs) (line 920)
    len_call_result_118401 = invoke(stypy.reporting.localization.Localization(__file__, 920, 15), len_118398, *[vals_118399], **kwargs_118400)
    
    int_118402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 920, 28), 'int')
    # Applying the binary operator '==' (line 920)
    result_eq_118403 = python_operator(stypy.reporting.localization.Localization(__file__, 920, 15), '==', len_call_result_118401, int_118402)
    
    # Testing the type of an if condition (line 920)
    if_condition_118404 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 920, 12), result_eq_118403)
    # Assigning a type to the variable 'if_condition_118404' (line 920)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 920, 12), 'if_condition_118404', if_condition_118404)
    # SSA begins for if statement (line 920)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 920)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'usecols' (line 922)
    usecols_118405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 15), 'usecols')
    # Testing the type of an if condition (line 922)
    if_condition_118406 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 922, 12), usecols_118405)
    # Assigning a type to the variable 'if_condition_118406' (line 922)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 922, 12), 'if_condition_118406', if_condition_118406)
    # SSA begins for if statement (line 922)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a ListComp to a Name (line 923):
    
    # Assigning a ListComp to a Name (line 923):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'usecols' (line 923)
    usecols_118411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 41), 'usecols')
    comprehension_118412 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 923, 24), usecols_118411)
    # Assigning a type to the variable 'i' (line 923)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 923, 24), 'i', comprehension_118412)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 923)
    i_118407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 29), 'i')
    # Getting the type of 'vals' (line 923)
    vals_118408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 24), 'vals')
    # Obtaining the member '__getitem__' of a type (line 923)
    getitem___118409 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 923, 24), vals_118408, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 923)
    subscript_call_result_118410 = invoke(stypy.reporting.localization.Localization(__file__, 923, 24), getitem___118409, i_118407)
    
    list_118413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 923, 24), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 923, 24), list_118413, subscript_call_result_118410)
    # Assigning a type to the variable 'vals' (line 923)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 923, 16), 'vals', list_118413)
    # SSA join for if statement (line 922)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 924)
    # Processing the call arguments (line 924)
    # Getting the type of 'vals' (line 924)
    vals_118415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 19), 'vals', False)
    # Processing the call keyword arguments (line 924)
    kwargs_118416 = {}
    # Getting the type of 'len' (line 924)
    len_118414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 15), 'len', False)
    # Calling len(args, kwargs) (line 924)
    len_call_result_118417 = invoke(stypy.reporting.localization.Localization(__file__, 924, 15), len_118414, *[vals_118415], **kwargs_118416)
    
    # Getting the type of 'N' (line 924)
    N_118418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 28), 'N')
    # Applying the binary operator '!=' (line 924)
    result_ne_118419 = python_operator(stypy.reporting.localization.Localization(__file__, 924, 15), '!=', len_call_result_118417, N_118418)
    
    # Testing the type of an if condition (line 924)
    if_condition_118420 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 924, 12), result_ne_118419)
    # Assigning a type to the variable 'if_condition_118420' (line 924)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 924, 12), 'if_condition_118420', if_condition_118420)
    # SSA begins for if statement (line 924)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 925):
    
    # Assigning a BinOp to a Name (line 925):
    # Getting the type of 'i' (line 925)
    i_118421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 27), 'i')
    # Getting the type of 'skiprows' (line 925)
    skiprows_118422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 31), 'skiprows')
    # Applying the binary operator '+' (line 925)
    result_add_118423 = python_operator(stypy.reporting.localization.Localization(__file__, 925, 27), '+', i_118421, skiprows_118422)
    
    int_118424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 925, 42), 'int')
    # Applying the binary operator '+' (line 925)
    result_add_118425 = python_operator(stypy.reporting.localization.Localization(__file__, 925, 40), '+', result_add_118423, int_118424)
    
    # Assigning a type to the variable 'line_num' (line 925)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 925, 16), 'line_num', result_add_118425)
    
    # Call to ValueError(...): (line 926)
    # Processing the call arguments (line 926)
    str_118427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 926, 33), 'str', 'Wrong number of columns at line %d')
    # Getting the type of 'line_num' (line 927)
    line_num_118428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 927, 35), 'line_num', False)
    # Applying the binary operator '%' (line 926)
    result_mod_118429 = python_operator(stypy.reporting.localization.Localization(__file__, 926, 33), '%', str_118427, line_num_118428)
    
    # Processing the call keyword arguments (line 926)
    kwargs_118430 = {}
    # Getting the type of 'ValueError' (line 926)
    ValueError_118426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 926, 22), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 926)
    ValueError_call_result_118431 = invoke(stypy.reporting.localization.Localization(__file__, 926, 22), ValueError_118426, *[result_mod_118429], **kwargs_118430)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 926, 16), ValueError_call_result_118431, 'raise parameter', BaseException)
    # SSA join for if statement (line 924)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a ListComp to a Name (line 930):
    
    # Assigning a ListComp to a Name (line 930):
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to zip(...): (line 930)
    # Processing the call arguments (line 930)
    # Getting the type of 'converters' (line 930)
    converters_118437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 54), 'converters', False)
    # Getting the type of 'vals' (line 930)
    vals_118438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 66), 'vals', False)
    # Processing the call keyword arguments (line 930)
    kwargs_118439 = {}
    # Getting the type of 'zip' (line 930)
    zip_118436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 50), 'zip', False)
    # Calling zip(args, kwargs) (line 930)
    zip_call_result_118440 = invoke(stypy.reporting.localization.Localization(__file__, 930, 50), zip_118436, *[converters_118437, vals_118438], **kwargs_118439)
    
    comprehension_118441 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 930, 21), zip_call_result_118440)
    # Assigning a type to the variable 'conv' (line 930)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 930, 21), 'conv', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 930, 21), comprehension_118441))
    # Assigning a type to the variable 'val' (line 930)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 930, 21), 'val', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 930, 21), comprehension_118441))
    
    # Call to conv(...): (line 930)
    # Processing the call arguments (line 930)
    # Getting the type of 'val' (line 930)
    val_118433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 26), 'val', False)
    # Processing the call keyword arguments (line 930)
    kwargs_118434 = {}
    # Getting the type of 'conv' (line 930)
    conv_118432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 21), 'conv', False)
    # Calling conv(args, kwargs) (line 930)
    conv_call_result_118435 = invoke(stypy.reporting.localization.Localization(__file__, 930, 21), conv_118432, *[val_118433], **kwargs_118434)
    
    list_118442 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 930, 21), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 930, 21), list_118442, conv_call_result_118435)
    # Assigning a type to the variable 'items' (line 930)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 930, 12), 'items', list_118442)
    
    # Assigning a Call to a Name (line 932):
    
    # Assigning a Call to a Name (line 932):
    
    # Call to pack_items(...): (line 932)
    # Processing the call arguments (line 932)
    # Getting the type of 'items' (line 932)
    items_118444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 932, 31), 'items', False)
    # Getting the type of 'packing' (line 932)
    packing_118445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 932, 38), 'packing', False)
    # Processing the call keyword arguments (line 932)
    kwargs_118446 = {}
    # Getting the type of 'pack_items' (line 932)
    pack_items_118443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 932, 20), 'pack_items', False)
    # Calling pack_items(args, kwargs) (line 932)
    pack_items_call_result_118447 = invoke(stypy.reporting.localization.Localization(__file__, 932, 20), pack_items_118443, *[items_118444, packing_118445], **kwargs_118446)
    
    # Assigning a type to the variable 'items' (line 932)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 932, 12), 'items', pack_items_call_result_118447)
    
    # Call to append(...): (line 933)
    # Processing the call arguments (line 933)
    # Getting the type of 'items' (line 933)
    items_118450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 933, 21), 'items', False)
    # Processing the call keyword arguments (line 933)
    kwargs_118451 = {}
    # Getting the type of 'X' (line 933)
    X_118448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 933, 12), 'X', False)
    # Obtaining the member 'append' of a type (line 933)
    append_118449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 933, 12), X_118448, 'append')
    # Calling append(args, kwargs) (line 933)
    append_call_result_118452 = invoke(stypy.reporting.localization.Localization(__file__, 933, 12), append_118449, *[items_118450], **kwargs_118451)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # finally branch of the try-finally block (line 873)
    
    # Getting the type of 'fown' (line 935)
    fown_118453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 11), 'fown')
    # Testing the type of an if condition (line 935)
    if_condition_118454 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 935, 8), fown_118453)
    # Assigning a type to the variable 'if_condition_118454' (line 935)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 935, 8), 'if_condition_118454', if_condition_118454)
    # SSA begins for if statement (line 935)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to close(...): (line 936)
    # Processing the call keyword arguments (line 936)
    kwargs_118457 = {}
    # Getting the type of 'fh' (line 936)
    fh_118455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 12), 'fh', False)
    # Obtaining the member 'close' of a type (line 936)
    close_118456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 936, 12), fh_118455, 'close')
    # Calling close(args, kwargs) (line 936)
    close_call_result_118458 = invoke(stypy.reporting.localization.Localization(__file__, 936, 12), close_118456, *[], **kwargs_118457)
    
    # SSA join for if statement (line 935)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Assigning a Call to a Name (line 938):
    
    # Assigning a Call to a Name (line 938):
    
    # Call to array(...): (line 938)
    # Processing the call arguments (line 938)
    # Getting the type of 'X' (line 938)
    X_118461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 17), 'X', False)
    # Getting the type of 'dtype' (line 938)
    dtype_118462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 20), 'dtype', False)
    # Processing the call keyword arguments (line 938)
    kwargs_118463 = {}
    # Getting the type of 'np' (line 938)
    np_118459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 8), 'np', False)
    # Obtaining the member 'array' of a type (line 938)
    array_118460 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 938, 8), np_118459, 'array')
    # Calling array(args, kwargs) (line 938)
    array_call_result_118464 = invoke(stypy.reporting.localization.Localization(__file__, 938, 8), array_118460, *[X_118461, dtype_118462], **kwargs_118463)
    
    # Assigning a type to the variable 'X' (line 938)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 938, 4), 'X', array_call_result_118464)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'X' (line 941)
    X_118465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 941, 7), 'X')
    # Obtaining the member 'ndim' of a type (line 941)
    ndim_118466 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 941, 7), X_118465, 'ndim')
    int_118467 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 941, 17), 'int')
    # Applying the binary operator '==' (line 941)
    result_eq_118468 = python_operator(stypy.reporting.localization.Localization(__file__, 941, 7), '==', ndim_118466, int_118467)
    
    
    
    # Obtaining the type of the subscript
    int_118469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 941, 32), 'int')
    slice_118470 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 941, 23), None, int_118469, None)
    # Getting the type of 'X' (line 941)
    X_118471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 941, 23), 'X')
    # Obtaining the member 'shape' of a type (line 941)
    shape_118472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 941, 23), X_118471, 'shape')
    # Obtaining the member '__getitem__' of a type (line 941)
    getitem___118473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 941, 23), shape_118472, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 941)
    subscript_call_result_118474 = invoke(stypy.reporting.localization.Localization(__file__, 941, 23), getitem___118473, slice_118470)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 941)
    tuple_118475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 941, 39), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 941)
    # Adding element type (line 941)
    int_118476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 941, 39), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 941, 39), tuple_118475, int_118476)
    # Adding element type (line 941)
    int_118477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 941, 42), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 941, 39), tuple_118475, int_118477)
    
    # Applying the binary operator '==' (line 941)
    result_eq_118478 = python_operator(stypy.reporting.localization.Localization(__file__, 941, 23), '==', subscript_call_result_118474, tuple_118475)
    
    # Applying the binary operator 'and' (line 941)
    result_and_keyword_118479 = python_operator(stypy.reporting.localization.Localization(__file__, 941, 7), 'and', result_eq_118468, result_eq_118478)
    
    # Testing the type of an if condition (line 941)
    if_condition_118480 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 941, 4), result_and_keyword_118479)
    # Assigning a type to the variable 'if_condition_118480' (line 941)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 941, 4), 'if_condition_118480', if_condition_118480)
    # SSA begins for if statement (line 941)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Attribute (line 942):
    
    # Assigning a Tuple to a Attribute (line 942):
    
    # Obtaining an instance of the builtin type 'tuple' (line 942)
    tuple_118481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 942, 19), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 942)
    # Adding element type (line 942)
    int_118482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 942, 19), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 942, 19), tuple_118481, int_118482)
    # Adding element type (line 942)
    int_118483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 942, 22), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 942, 19), tuple_118481, int_118483)
    
    # Getting the type of 'X' (line 942)
    X_118484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 8), 'X')
    # Setting the type of the member 'shape' of a type (line 942)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 942, 8), X_118484, 'shape', tuple_118481)
    # SSA join for if statement (line 941)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'ndmin' (line 946)
    ndmin_118485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 7), 'ndmin')
    
    # Obtaining an instance of the builtin type 'list' (line 946)
    list_118486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 946, 20), 'list')
    # Adding type elements to the builtin type 'list' instance (line 946)
    # Adding element type (line 946)
    int_118487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 946, 21), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 946, 20), list_118486, int_118487)
    # Adding element type (line 946)
    int_118488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 946, 24), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 946, 20), list_118486, int_118488)
    # Adding element type (line 946)
    int_118489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 946, 27), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 946, 20), list_118486, int_118489)
    
    # Applying the binary operator 'notin' (line 946)
    result_contains_118490 = python_operator(stypy.reporting.localization.Localization(__file__, 946, 7), 'notin', ndmin_118485, list_118486)
    
    # Testing the type of an if condition (line 946)
    if_condition_118491 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 946, 4), result_contains_118490)
    # Assigning a type to the variable 'if_condition_118491' (line 946)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 946, 4), 'if_condition_118491', if_condition_118491)
    # SSA begins for if statement (line 946)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 947)
    # Processing the call arguments (line 947)
    str_118493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 947, 25), 'str', 'Illegal value of ndmin keyword: %s')
    # Getting the type of 'ndmin' (line 947)
    ndmin_118494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 64), 'ndmin', False)
    # Applying the binary operator '%' (line 947)
    result_mod_118495 = python_operator(stypy.reporting.localization.Localization(__file__, 947, 25), '%', str_118493, ndmin_118494)
    
    # Processing the call keyword arguments (line 947)
    kwargs_118496 = {}
    # Getting the type of 'ValueError' (line 947)
    ValueError_118492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 947)
    ValueError_call_result_118497 = invoke(stypy.reporting.localization.Localization(__file__, 947, 14), ValueError_118492, *[result_mod_118495], **kwargs_118496)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 947, 8), ValueError_call_result_118497, 'raise parameter', BaseException)
    # SSA join for if statement (line 946)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'X' (line 949)
    X_118498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 7), 'X')
    # Obtaining the member 'ndim' of a type (line 949)
    ndim_118499 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 949, 7), X_118498, 'ndim')
    # Getting the type of 'ndmin' (line 949)
    ndmin_118500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 16), 'ndmin')
    # Applying the binary operator '>' (line 949)
    result_gt_118501 = python_operator(stypy.reporting.localization.Localization(__file__, 949, 7), '>', ndim_118499, ndmin_118500)
    
    # Testing the type of an if condition (line 949)
    if_condition_118502 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 949, 4), result_gt_118501)
    # Assigning a type to the variable 'if_condition_118502' (line 949)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 949, 4), 'if_condition_118502', if_condition_118502)
    # SSA begins for if statement (line 949)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 950):
    
    # Assigning a Call to a Name (line 950):
    
    # Call to squeeze(...): (line 950)
    # Processing the call arguments (line 950)
    # Getting the type of 'X' (line 950)
    X_118505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 23), 'X', False)
    # Processing the call keyword arguments (line 950)
    kwargs_118506 = {}
    # Getting the type of 'np' (line 950)
    np_118503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 12), 'np', False)
    # Obtaining the member 'squeeze' of a type (line 950)
    squeeze_118504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 950, 12), np_118503, 'squeeze')
    # Calling squeeze(args, kwargs) (line 950)
    squeeze_call_result_118507 = invoke(stypy.reporting.localization.Localization(__file__, 950, 12), squeeze_118504, *[X_118505], **kwargs_118506)
    
    # Assigning a type to the variable 'X' (line 950)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 950, 8), 'X', squeeze_call_result_118507)
    # SSA join for if statement (line 949)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'X' (line 953)
    X_118508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 7), 'X')
    # Obtaining the member 'ndim' of a type (line 953)
    ndim_118509 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 953, 7), X_118508, 'ndim')
    # Getting the type of 'ndmin' (line 953)
    ndmin_118510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 16), 'ndmin')
    # Applying the binary operator '<' (line 953)
    result_lt_118511 = python_operator(stypy.reporting.localization.Localization(__file__, 953, 7), '<', ndim_118509, ndmin_118510)
    
    # Testing the type of an if condition (line 953)
    if_condition_118512 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 953, 4), result_lt_118511)
    # Assigning a type to the variable 'if_condition_118512' (line 953)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 953, 4), 'if_condition_118512', if_condition_118512)
    # SSA begins for if statement (line 953)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'ndmin' (line 954)
    ndmin_118513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 11), 'ndmin')
    int_118514 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 954, 20), 'int')
    # Applying the binary operator '==' (line 954)
    result_eq_118515 = python_operator(stypy.reporting.localization.Localization(__file__, 954, 11), '==', ndmin_118513, int_118514)
    
    # Testing the type of an if condition (line 954)
    if_condition_118516 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 954, 8), result_eq_118515)
    # Assigning a type to the variable 'if_condition_118516' (line 954)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 954, 8), 'if_condition_118516', if_condition_118516)
    # SSA begins for if statement (line 954)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 955):
    
    # Assigning a Call to a Name (line 955):
    
    # Call to atleast_1d(...): (line 955)
    # Processing the call arguments (line 955)
    # Getting the type of 'X' (line 955)
    X_118519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 955, 30), 'X', False)
    # Processing the call keyword arguments (line 955)
    kwargs_118520 = {}
    # Getting the type of 'np' (line 955)
    np_118517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 955, 16), 'np', False)
    # Obtaining the member 'atleast_1d' of a type (line 955)
    atleast_1d_118518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 955, 16), np_118517, 'atleast_1d')
    # Calling atleast_1d(args, kwargs) (line 955)
    atleast_1d_call_result_118521 = invoke(stypy.reporting.localization.Localization(__file__, 955, 16), atleast_1d_118518, *[X_118519], **kwargs_118520)
    
    # Assigning a type to the variable 'X' (line 955)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 955, 12), 'X', atleast_1d_call_result_118521)
    # SSA branch for the else part of an if statement (line 954)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'ndmin' (line 956)
    ndmin_118522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 956, 13), 'ndmin')
    int_118523 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 956, 22), 'int')
    # Applying the binary operator '==' (line 956)
    result_eq_118524 = python_operator(stypy.reporting.localization.Localization(__file__, 956, 13), '==', ndmin_118522, int_118523)
    
    # Testing the type of an if condition (line 956)
    if_condition_118525 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 956, 13), result_eq_118524)
    # Assigning a type to the variable 'if_condition_118525' (line 956)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 956, 13), 'if_condition_118525', if_condition_118525)
    # SSA begins for if statement (line 956)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 957):
    
    # Assigning a Attribute to a Name (line 957):
    
    # Call to atleast_2d(...): (line 957)
    # Processing the call arguments (line 957)
    # Getting the type of 'X' (line 957)
    X_118528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 30), 'X', False)
    # Processing the call keyword arguments (line 957)
    kwargs_118529 = {}
    # Getting the type of 'np' (line 957)
    np_118526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 16), 'np', False)
    # Obtaining the member 'atleast_2d' of a type (line 957)
    atleast_2d_118527 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 957, 16), np_118526, 'atleast_2d')
    # Calling atleast_2d(args, kwargs) (line 957)
    atleast_2d_call_result_118530 = invoke(stypy.reporting.localization.Localization(__file__, 957, 16), atleast_2d_118527, *[X_118528], **kwargs_118529)
    
    # Obtaining the member 'T' of a type (line 957)
    T_118531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 957, 16), atleast_2d_call_result_118530, 'T')
    # Assigning a type to the variable 'X' (line 957)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 957, 12), 'X', T_118531)
    # SSA join for if statement (line 956)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 954)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 953)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'unpack' (line 959)
    unpack_118532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 7), 'unpack')
    # Testing the type of an if condition (line 959)
    if_condition_118533 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 959, 4), unpack_118532)
    # Assigning a type to the variable 'if_condition_118533' (line 959)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 959, 4), 'if_condition_118533', if_condition_118533)
    # SSA begins for if statement (line 959)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    
    # Call to len(...): (line 960)
    # Processing the call arguments (line 960)
    # Getting the type of 'dtype_types' (line 960)
    dtype_types_118535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 15), 'dtype_types', False)
    # Processing the call keyword arguments (line 960)
    kwargs_118536 = {}
    # Getting the type of 'len' (line 960)
    len_118534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 11), 'len', False)
    # Calling len(args, kwargs) (line 960)
    len_call_result_118537 = invoke(stypy.reporting.localization.Localization(__file__, 960, 11), len_118534, *[dtype_types_118535], **kwargs_118536)
    
    int_118538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 960, 30), 'int')
    # Applying the binary operator '>' (line 960)
    result_gt_118539 = python_operator(stypy.reporting.localization.Localization(__file__, 960, 11), '>', len_call_result_118537, int_118538)
    
    # Testing the type of an if condition (line 960)
    if_condition_118540 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 960, 8), result_gt_118539)
    # Assigning a type to the variable 'if_condition_118540' (line 960)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 960, 8), 'if_condition_118540', if_condition_118540)
    # SSA begins for if statement (line 960)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'dtype' (line 962)
    dtype_118545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 42), 'dtype')
    # Obtaining the member 'names' of a type (line 962)
    names_118546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 962, 42), dtype_118545, 'names')
    comprehension_118547 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 962, 20), names_118546)
    # Assigning a type to the variable 'field' (line 962)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 962, 20), 'field', comprehension_118547)
    
    # Obtaining the type of the subscript
    # Getting the type of 'field' (line 962)
    field_118541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 22), 'field')
    # Getting the type of 'X' (line 962)
    X_118542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 20), 'X')
    # Obtaining the member '__getitem__' of a type (line 962)
    getitem___118543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 962, 20), X_118542, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 962)
    subscript_call_result_118544 = invoke(stypy.reporting.localization.Localization(__file__, 962, 20), getitem___118543, field_118541)
    
    list_118548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 962, 20), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 962, 20), list_118548, subscript_call_result_118544)
    # Assigning a type to the variable 'stypy_return_type' (line 962)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 962, 12), 'stypy_return_type', list_118548)
    # SSA branch for the else part of an if statement (line 960)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'X' (line 964)
    X_118549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 19), 'X')
    # Obtaining the member 'T' of a type (line 964)
    T_118550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 964, 19), X_118549, 'T')
    # Assigning a type to the variable 'stypy_return_type' (line 964)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 964, 12), 'stypy_return_type', T_118550)
    # SSA join for if statement (line 960)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 959)
    module_type_store.open_ssa_branch('else')
    # Getting the type of 'X' (line 966)
    X_118551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 15), 'X')
    # Assigning a type to the variable 'stypy_return_type' (line 966)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 966, 8), 'stypy_return_type', X_118551)
    # SSA join for if statement (line 959)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'loadtxt(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'loadtxt' in the type store
    # Getting the type of 'stypy_return_type' (line 682)
    stypy_return_type_118552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 682, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_118552)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'loadtxt'
    return stypy_return_type_118552

# Assigning a type to the variable 'loadtxt' (line 682)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 682, 0), 'loadtxt', loadtxt)

@norecursion
def savetxt(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    str_118553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 969, 26), 'str', '%.18e')
    str_118554 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 969, 45), 'str', ' ')
    str_118555 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 969, 58), 'str', '\n')
    str_118556 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 969, 71), 'str', '')
    str_118557 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 970, 19), 'str', '')
    str_118558 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 970, 32), 'str', '# ')
    defaults = [str_118553, str_118554, str_118555, str_118556, str_118557, str_118558]
    # Create a new context for function 'savetxt'
    module_type_store = module_type_store.open_function_context('savetxt', 969, 0, False)
    
    # Passed parameters checking function
    savetxt.stypy_localization = localization
    savetxt.stypy_type_of_self = None
    savetxt.stypy_type_store = module_type_store
    savetxt.stypy_function_name = 'savetxt'
    savetxt.stypy_param_names_list = ['fname', 'X', 'fmt', 'delimiter', 'newline', 'header', 'footer', 'comments']
    savetxt.stypy_varargs_param_name = None
    savetxt.stypy_kwargs_param_name = None
    savetxt.stypy_call_defaults = defaults
    savetxt.stypy_call_varargs = varargs
    savetxt.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'savetxt', ['fname', 'X', 'fmt', 'delimiter', 'newline', 'header', 'footer', 'comments'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'savetxt', localization, ['fname', 'X', 'fmt', 'delimiter', 'newline', 'header', 'footer', 'comments'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'savetxt(...)' code ##################

    str_118559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1081, (-1)), 'str', "\n    Save an array to a text file.\n\n    Parameters\n    ----------\n    fname : filename or file handle\n        If the filename ends in ``.gz``, the file is automatically saved in\n        compressed gzip format.  `loadtxt` understands gzipped files\n        transparently.\n    X : array_like\n        Data to be saved to a text file.\n    fmt : str or sequence of strs, optional\n        A single format (%10.5f), a sequence of formats, or a\n        multi-format string, e.g. 'Iteration %d -- %10.5f', in which\n        case `delimiter` is ignored. For complex `X`, the legal options\n        for `fmt` are:\n            a) a single specifier, `fmt='%.4e'`, resulting in numbers formatted\n                like `' (%s+%sj)' % (fmt, fmt)`\n            b) a full string specifying every real and imaginary part, e.g.\n                `' %.4e %+.4j %.4e %+.4j %.4e %+.4j'` for 3 columns\n            c) a list of specifiers, one per column - in this case, the real\n                and imaginary part must have separate specifiers,\n                e.g. `['%.3e + %.3ej', '(%.15e%+.15ej)']` for 2 columns\n    delimiter : str, optional\n        String or character separating columns.\n    newline : str, optional\n        String or character separating lines.\n\n        .. versionadded:: 1.5.0\n    header : str, optional\n        String that will be written at the beginning of the file.\n\n        .. versionadded:: 1.7.0\n    footer : str, optional\n        String that will be written at the end of the file.\n\n        .. versionadded:: 1.7.0\n    comments : str, optional\n        String that will be prepended to the ``header`` and ``footer`` strings,\n        to mark them as comments. Default: '# ',  as expected by e.g.\n        ``numpy.loadtxt``.\n\n        .. versionadded:: 1.7.0\n\n\n    See Also\n    --------\n    save : Save an array to a binary file in NumPy ``.npy`` format\n    savez : Save several arrays into an uncompressed ``.npz`` archive\n    savez_compressed : Save several arrays into a compressed ``.npz`` archive\n\n    Notes\n    -----\n    Further explanation of the `fmt` parameter\n    (``%[flag]width[.precision]specifier``):\n\n    flags:\n        ``-`` : left justify\n\n        ``+`` : Forces to precede result with + or -.\n\n        ``0`` : Left pad the number with zeros instead of space (see width).\n\n    width:\n        Minimum number of characters to be printed. The value is not truncated\n        if it has more characters.\n\n    precision:\n        - For integer specifiers (eg. ``d,i,o,x``), the minimum number of\n          digits.\n        - For ``e, E`` and ``f`` specifiers, the number of digits to print\n          after the decimal point.\n        - For ``g`` and ``G``, the maximum number of significant digits.\n        - For ``s``, the maximum number of characters.\n\n    specifiers:\n        ``c`` : character\n\n        ``d`` or ``i`` : signed decimal integer\n\n        ``e`` or ``E`` : scientific notation with ``e`` or ``E``.\n\n        ``f`` : decimal floating point\n\n        ``g,G`` : use the shorter of ``e,E`` or ``f``\n\n        ``o`` : signed octal\n\n        ``s`` : string of characters\n\n        ``u`` : unsigned decimal integer\n\n        ``x,X`` : unsigned hexadecimal integer\n\n    This explanation of ``fmt`` is not complete, for an exhaustive\n    specification see [1]_.\n\n    References\n    ----------\n    .. [1] `Format Specification Mini-Language\n           <http://docs.python.org/library/string.html#\n           format-specification-mini-language>`_, Python Documentation.\n\n    Examples\n    --------\n    >>> x = y = z = np.arange(0.0,5.0,1.0)\n    >>> np.savetxt('test.out', x, delimiter=',')   # X is an array\n    >>> np.savetxt('test.out', (x,y,z))   # x,y,z equal sized 1D arrays\n    >>> np.savetxt('test.out', x, fmt='%1.4e')   # use exponential notation\n\n    ")
    
    # Type idiom detected: calculating its left and rigth part (line 1084)
    # Getting the type of 'bytes' (line 1084)
    bytes_118560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1084, 23), 'bytes')
    # Getting the type of 'fmt' (line 1084)
    fmt_118561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1084, 18), 'fmt')
    
    (may_be_118562, more_types_in_union_118563) = may_be_subtype(bytes_118560, fmt_118561)

    if may_be_118562:

        if more_types_in_union_118563:
            # Runtime conditional SSA (line 1084)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'fmt' (line 1084)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1084, 4), 'fmt', remove_not_subtype_from_union(fmt_118561, bytes))
        
        # Assigning a Call to a Name (line 1085):
        
        # Assigning a Call to a Name (line 1085):
        
        # Call to asstr(...): (line 1085)
        # Processing the call arguments (line 1085)
        # Getting the type of 'fmt' (line 1085)
        fmt_118565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 20), 'fmt', False)
        # Processing the call keyword arguments (line 1085)
        kwargs_118566 = {}
        # Getting the type of 'asstr' (line 1085)
        asstr_118564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1085, 14), 'asstr', False)
        # Calling asstr(args, kwargs) (line 1085)
        asstr_call_result_118567 = invoke(stypy.reporting.localization.Localization(__file__, 1085, 14), asstr_118564, *[fmt_118565], **kwargs_118566)
        
        # Assigning a type to the variable 'fmt' (line 1085)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1085, 8), 'fmt', asstr_call_result_118567)

        if more_types_in_union_118563:
            # SSA join for if statement (line 1084)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 1086):
    
    # Assigning a Call to a Name (line 1086):
    
    # Call to asstr(...): (line 1086)
    # Processing the call arguments (line 1086)
    # Getting the type of 'delimiter' (line 1086)
    delimiter_118569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1086, 22), 'delimiter', False)
    # Processing the call keyword arguments (line 1086)
    kwargs_118570 = {}
    # Getting the type of 'asstr' (line 1086)
    asstr_118568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1086, 16), 'asstr', False)
    # Calling asstr(args, kwargs) (line 1086)
    asstr_call_result_118571 = invoke(stypy.reporting.localization.Localization(__file__, 1086, 16), asstr_118568, *[delimiter_118569], **kwargs_118570)
    
    # Assigning a type to the variable 'delimiter' (line 1086)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1086, 4), 'delimiter', asstr_call_result_118571)
    
    # Assigning a Name to a Name (line 1088):
    
    # Assigning a Name to a Name (line 1088):
    # Getting the type of 'False' (line 1088)
    False_118572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 13), 'False')
    # Assigning a type to the variable 'own_fh' (line 1088)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1088, 4), 'own_fh', False_118572)
    
    
    # Call to _is_string_like(...): (line 1089)
    # Processing the call arguments (line 1089)
    # Getting the type of 'fname' (line 1089)
    fname_118574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 23), 'fname', False)
    # Processing the call keyword arguments (line 1089)
    kwargs_118575 = {}
    # Getting the type of '_is_string_like' (line 1089)
    _is_string_like_118573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 7), '_is_string_like', False)
    # Calling _is_string_like(args, kwargs) (line 1089)
    _is_string_like_call_result_118576 = invoke(stypy.reporting.localization.Localization(__file__, 1089, 7), _is_string_like_118573, *[fname_118574], **kwargs_118575)
    
    # Testing the type of an if condition (line 1089)
    if_condition_118577 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1089, 4), _is_string_like_call_result_118576)
    # Assigning a type to the variable 'if_condition_118577' (line 1089)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1089, 4), 'if_condition_118577', if_condition_118577)
    # SSA begins for if statement (line 1089)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 1090):
    
    # Assigning a Name to a Name (line 1090):
    # Getting the type of 'True' (line 1090)
    True_118578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1090, 17), 'True')
    # Assigning a type to the variable 'own_fh' (line 1090)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1090, 8), 'own_fh', True_118578)
    
    
    # Call to endswith(...): (line 1091)
    # Processing the call arguments (line 1091)
    str_118581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1091, 26), 'str', '.gz')
    # Processing the call keyword arguments (line 1091)
    kwargs_118582 = {}
    # Getting the type of 'fname' (line 1091)
    fname_118579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 11), 'fname', False)
    # Obtaining the member 'endswith' of a type (line 1091)
    endswith_118580 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1091, 11), fname_118579, 'endswith')
    # Calling endswith(args, kwargs) (line 1091)
    endswith_call_result_118583 = invoke(stypy.reporting.localization.Localization(__file__, 1091, 11), endswith_118580, *[str_118581], **kwargs_118582)
    
    # Testing the type of an if condition (line 1091)
    if_condition_118584 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1091, 8), endswith_call_result_118583)
    # Assigning a type to the variable 'if_condition_118584' (line 1091)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1091, 8), 'if_condition_118584', if_condition_118584)
    # SSA begins for if statement (line 1091)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1092, 12))
    
    # 'import gzip' statement (line 1092)
    import gzip

    import_module(stypy.reporting.localization.Localization(__file__, 1092, 12), 'gzip', gzip, module_type_store)
    
    
    # Assigning a Call to a Name (line 1093):
    
    # Assigning a Call to a Name (line 1093):
    
    # Call to open(...): (line 1093)
    # Processing the call arguments (line 1093)
    # Getting the type of 'fname' (line 1093)
    fname_118587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 27), 'fname', False)
    str_118588 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1093, 34), 'str', 'wb')
    # Processing the call keyword arguments (line 1093)
    kwargs_118589 = {}
    # Getting the type of 'gzip' (line 1093)
    gzip_118585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 17), 'gzip', False)
    # Obtaining the member 'open' of a type (line 1093)
    open_118586 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1093, 17), gzip_118585, 'open')
    # Calling open(args, kwargs) (line 1093)
    open_call_result_118590 = invoke(stypy.reporting.localization.Localization(__file__, 1093, 17), open_118586, *[fname_118587, str_118588], **kwargs_118589)
    
    # Assigning a type to the variable 'fh' (line 1093)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1093, 12), 'fh', open_call_result_118590)
    # SSA branch for the else part of an if statement (line 1091)
    module_type_store.open_ssa_branch('else')
    
    
    
    # Obtaining the type of the subscript
    int_118591 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1095, 32), 'int')
    # Getting the type of 'sys' (line 1095)
    sys_118592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1095, 15), 'sys')
    # Obtaining the member 'version_info' of a type (line 1095)
    version_info_118593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1095, 15), sys_118592, 'version_info')
    # Obtaining the member '__getitem__' of a type (line 1095)
    getitem___118594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1095, 15), version_info_118593, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1095)
    subscript_call_result_118595 = invoke(stypy.reporting.localization.Localization(__file__, 1095, 15), getitem___118594, int_118591)
    
    int_118596 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1095, 38), 'int')
    # Applying the binary operator '>=' (line 1095)
    result_ge_118597 = python_operator(stypy.reporting.localization.Localization(__file__, 1095, 15), '>=', subscript_call_result_118595, int_118596)
    
    # Testing the type of an if condition (line 1095)
    if_condition_118598 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1095, 12), result_ge_118597)
    # Assigning a type to the variable 'if_condition_118598' (line 1095)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1095, 12), 'if_condition_118598', if_condition_118598)
    # SSA begins for if statement (line 1095)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1096):
    
    # Assigning a Call to a Name (line 1096):
    
    # Call to open(...): (line 1096)
    # Processing the call arguments (line 1096)
    # Getting the type of 'fname' (line 1096)
    fname_118600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1096, 26), 'fname', False)
    str_118601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1096, 33), 'str', 'wb')
    # Processing the call keyword arguments (line 1096)
    kwargs_118602 = {}
    # Getting the type of 'open' (line 1096)
    open_118599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1096, 21), 'open', False)
    # Calling open(args, kwargs) (line 1096)
    open_call_result_118603 = invoke(stypy.reporting.localization.Localization(__file__, 1096, 21), open_118599, *[fname_118600, str_118601], **kwargs_118602)
    
    # Assigning a type to the variable 'fh' (line 1096)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1096, 16), 'fh', open_call_result_118603)
    # SSA branch for the else part of an if statement (line 1095)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1098):
    
    # Assigning a Call to a Name (line 1098):
    
    # Call to open(...): (line 1098)
    # Processing the call arguments (line 1098)
    # Getting the type of 'fname' (line 1098)
    fname_118605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1098, 26), 'fname', False)
    str_118606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1098, 33), 'str', 'w')
    # Processing the call keyword arguments (line 1098)
    kwargs_118607 = {}
    # Getting the type of 'open' (line 1098)
    open_118604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1098, 21), 'open', False)
    # Calling open(args, kwargs) (line 1098)
    open_call_result_118608 = invoke(stypy.reporting.localization.Localization(__file__, 1098, 21), open_118604, *[fname_118605, str_118606], **kwargs_118607)
    
    # Assigning a type to the variable 'fh' (line 1098)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1098, 16), 'fh', open_call_result_118608)
    # SSA join for if statement (line 1095)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1091)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 1089)
    module_type_store.open_ssa_branch('else')
    
    # Type idiom detected: calculating its left and rigth part (line 1099)
    str_118609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1099, 24), 'str', 'write')
    # Getting the type of 'fname' (line 1099)
    fname_118610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 17), 'fname')
    
    (may_be_118611, more_types_in_union_118612) = may_provide_member(str_118609, fname_118610)

    if may_be_118611:

        if more_types_in_union_118612:
            # Runtime conditional SSA (line 1099)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'fname' (line 1099)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1099, 9), 'fname', remove_not_member_provider_from_union(fname_118610, 'write'))
        
        # Assigning a Name to a Name (line 1100):
        
        # Assigning a Name to a Name (line 1100):
        # Getting the type of 'fname' (line 1100)
        fname_118613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1100, 13), 'fname')
        # Assigning a type to the variable 'fh' (line 1100)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1100, 8), 'fh', fname_118613)

        if more_types_in_union_118612:
            # Runtime conditional SSA for else branch (line 1099)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_118611) or more_types_in_union_118612):
        # Assigning a type to the variable 'fname' (line 1099)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1099, 9), 'fname', remove_member_provider_from_union(fname_118610, 'write'))
        
        # Call to ValueError(...): (line 1102)
        # Processing the call arguments (line 1102)
        str_118615 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1102, 25), 'str', 'fname must be a string or file handle')
        # Processing the call keyword arguments (line 1102)
        kwargs_118616 = {}
        # Getting the type of 'ValueError' (line 1102)
        ValueError_118614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1102, 14), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1102)
        ValueError_call_result_118617 = invoke(stypy.reporting.localization.Localization(__file__, 1102, 14), ValueError_118614, *[str_118615], **kwargs_118616)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1102, 8), ValueError_call_result_118617, 'raise parameter', BaseException)

        if (may_be_118611 and more_types_in_union_118612):
            # SSA join for if statement (line 1099)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA join for if statement (line 1089)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Try-finally block (line 1104)
    
    # Assigning a Call to a Name (line 1105):
    
    # Assigning a Call to a Name (line 1105):
    
    # Call to asarray(...): (line 1105)
    # Processing the call arguments (line 1105)
    # Getting the type of 'X' (line 1105)
    X_118620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 23), 'X', False)
    # Processing the call keyword arguments (line 1105)
    kwargs_118621 = {}
    # Getting the type of 'np' (line 1105)
    np_118618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 12), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1105)
    asarray_118619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1105, 12), np_118618, 'asarray')
    # Calling asarray(args, kwargs) (line 1105)
    asarray_call_result_118622 = invoke(stypy.reporting.localization.Localization(__file__, 1105, 12), asarray_118619, *[X_118620], **kwargs_118621)
    
    # Assigning a type to the variable 'X' (line 1105)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1105, 8), 'X', asarray_call_result_118622)
    
    
    # Getting the type of 'X' (line 1108)
    X_118623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1108, 11), 'X')
    # Obtaining the member 'ndim' of a type (line 1108)
    ndim_118624 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1108, 11), X_118623, 'ndim')
    int_118625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1108, 21), 'int')
    # Applying the binary operator '==' (line 1108)
    result_eq_118626 = python_operator(stypy.reporting.localization.Localization(__file__, 1108, 11), '==', ndim_118624, int_118625)
    
    # Testing the type of an if condition (line 1108)
    if_condition_118627 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1108, 8), result_eq_118626)
    # Assigning a type to the variable 'if_condition_118627' (line 1108)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1108, 8), 'if_condition_118627', if_condition_118627)
    # SSA begins for if statement (line 1108)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Type idiom detected: calculating its left and rigth part (line 1110)
    # Getting the type of 'X' (line 1110)
    X_118628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 15), 'X')
    # Obtaining the member 'dtype' of a type (line 1110)
    dtype_118629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1110, 15), X_118628, 'dtype')
    # Obtaining the member 'names' of a type (line 1110)
    names_118630 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1110, 15), dtype_118629, 'names')
    # Getting the type of 'None' (line 1110)
    None_118631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 32), 'None')
    
    (may_be_118632, more_types_in_union_118633) = may_be_none(names_118630, None_118631)

    if may_be_118632:

        if more_types_in_union_118633:
            # Runtime conditional SSA (line 1110)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Attribute to a Name (line 1111):
        
        # Assigning a Attribute to a Name (line 1111):
        
        # Call to atleast_2d(...): (line 1111)
        # Processing the call arguments (line 1111)
        # Getting the type of 'X' (line 1111)
        X_118636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1111, 34), 'X', False)
        # Processing the call keyword arguments (line 1111)
        kwargs_118637 = {}
        # Getting the type of 'np' (line 1111)
        np_118634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1111, 20), 'np', False)
        # Obtaining the member 'atleast_2d' of a type (line 1111)
        atleast_2d_118635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1111, 20), np_118634, 'atleast_2d')
        # Calling atleast_2d(args, kwargs) (line 1111)
        atleast_2d_call_result_118638 = invoke(stypy.reporting.localization.Localization(__file__, 1111, 20), atleast_2d_118635, *[X_118636], **kwargs_118637)
        
        # Obtaining the member 'T' of a type (line 1111)
        T_118639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1111, 20), atleast_2d_call_result_118638, 'T')
        # Assigning a type to the variable 'X' (line 1111)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1111, 16), 'X', T_118639)
        
        # Assigning a Num to a Name (line 1112):
        
        # Assigning a Num to a Name (line 1112):
        int_118640 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1112, 23), 'int')
        # Assigning a type to the variable 'ncol' (line 1112)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1112, 16), 'ncol', int_118640)

        if more_types_in_union_118633:
            # Runtime conditional SSA for else branch (line 1110)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_118632) or more_types_in_union_118633):
        
        # Assigning a Call to a Name (line 1116):
        
        # Assigning a Call to a Name (line 1116):
        
        # Call to len(...): (line 1116)
        # Processing the call arguments (line 1116)
        # Getting the type of 'X' (line 1116)
        X_118642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1116, 27), 'X', False)
        # Obtaining the member 'dtype' of a type (line 1116)
        dtype_118643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1116, 27), X_118642, 'dtype')
        # Obtaining the member 'descr' of a type (line 1116)
        descr_118644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1116, 27), dtype_118643, 'descr')
        # Processing the call keyword arguments (line 1116)
        kwargs_118645 = {}
        # Getting the type of 'len' (line 1116)
        len_118641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1116, 23), 'len', False)
        # Calling len(args, kwargs) (line 1116)
        len_call_result_118646 = invoke(stypy.reporting.localization.Localization(__file__, 1116, 23), len_118641, *[descr_118644], **kwargs_118645)
        
        # Assigning a type to the variable 'ncol' (line 1116)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1116, 16), 'ncol', len_call_result_118646)

        if (may_be_118632 and more_types_in_union_118633):
            # SSA join for if statement (line 1110)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA branch for the else part of an if statement (line 1108)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Subscript to a Name (line 1118):
    
    # Assigning a Subscript to a Name (line 1118):
    
    # Obtaining the type of the subscript
    int_118647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1118, 27), 'int')
    # Getting the type of 'X' (line 1118)
    X_118648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 19), 'X')
    # Obtaining the member 'shape' of a type (line 1118)
    shape_118649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1118, 19), X_118648, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1118)
    getitem___118650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1118, 19), shape_118649, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1118)
    subscript_call_result_118651 = invoke(stypy.reporting.localization.Localization(__file__, 1118, 19), getitem___118650, int_118647)
    
    # Assigning a type to the variable 'ncol' (line 1118)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1118, 12), 'ncol', subscript_call_result_118651)
    # SSA join for if statement (line 1108)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1120):
    
    # Assigning a Call to a Name (line 1120):
    
    # Call to iscomplexobj(...): (line 1120)
    # Processing the call arguments (line 1120)
    # Getting the type of 'X' (line 1120)
    X_118654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 38), 'X', False)
    # Processing the call keyword arguments (line 1120)
    kwargs_118655 = {}
    # Getting the type of 'np' (line 1120)
    np_118652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 22), 'np', False)
    # Obtaining the member 'iscomplexobj' of a type (line 1120)
    iscomplexobj_118653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1120, 22), np_118652, 'iscomplexobj')
    # Calling iscomplexobj(args, kwargs) (line 1120)
    iscomplexobj_call_result_118656 = invoke(stypy.reporting.localization.Localization(__file__, 1120, 22), iscomplexobj_118653, *[X_118654], **kwargs_118655)
    
    # Assigning a type to the variable 'iscomplex_X' (line 1120)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1120, 8), 'iscomplex_X', iscomplexobj_call_result_118656)
    
    
    
    # Call to type(...): (line 1123)
    # Processing the call arguments (line 1123)
    # Getting the type of 'fmt' (line 1123)
    fmt_118658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 16), 'fmt', False)
    # Processing the call keyword arguments (line 1123)
    kwargs_118659 = {}
    # Getting the type of 'type' (line 1123)
    type_118657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 11), 'type', False)
    # Calling type(args, kwargs) (line 1123)
    type_call_result_118660 = invoke(stypy.reporting.localization.Localization(__file__, 1123, 11), type_118657, *[fmt_118658], **kwargs_118659)
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1123)
    tuple_118661 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1123, 25), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1123)
    # Adding element type (line 1123)
    # Getting the type of 'list' (line 1123)
    list_118662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 25), 'list')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1123, 25), tuple_118661, list_118662)
    # Adding element type (line 1123)
    # Getting the type of 'tuple' (line 1123)
    tuple_118663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 31), 'tuple')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1123, 25), tuple_118661, tuple_118663)
    
    # Applying the binary operator 'in' (line 1123)
    result_contains_118664 = python_operator(stypy.reporting.localization.Localization(__file__, 1123, 11), 'in', type_call_result_118660, tuple_118661)
    
    # Testing the type of an if condition (line 1123)
    if_condition_118665 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1123, 8), result_contains_118664)
    # Assigning a type to the variable 'if_condition_118665' (line 1123)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1123, 8), 'if_condition_118665', if_condition_118665)
    # SSA begins for if statement (line 1123)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    
    # Call to len(...): (line 1124)
    # Processing the call arguments (line 1124)
    # Getting the type of 'fmt' (line 1124)
    fmt_118667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 19), 'fmt', False)
    # Processing the call keyword arguments (line 1124)
    kwargs_118668 = {}
    # Getting the type of 'len' (line 1124)
    len_118666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 15), 'len', False)
    # Calling len(args, kwargs) (line 1124)
    len_call_result_118669 = invoke(stypy.reporting.localization.Localization(__file__, 1124, 15), len_118666, *[fmt_118667], **kwargs_118668)
    
    # Getting the type of 'ncol' (line 1124)
    ncol_118670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 27), 'ncol')
    # Applying the binary operator '!=' (line 1124)
    result_ne_118671 = python_operator(stypy.reporting.localization.Localization(__file__, 1124, 15), '!=', len_call_result_118669, ncol_118670)
    
    # Testing the type of an if condition (line 1124)
    if_condition_118672 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1124, 12), result_ne_118671)
    # Assigning a type to the variable 'if_condition_118672' (line 1124)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1124, 12), 'if_condition_118672', if_condition_118672)
    # SSA begins for if statement (line 1124)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to AttributeError(...): (line 1125)
    # Processing the call arguments (line 1125)
    str_118674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1125, 37), 'str', 'fmt has wrong shape.  %s')
    
    # Call to str(...): (line 1125)
    # Processing the call arguments (line 1125)
    # Getting the type of 'fmt' (line 1125)
    fmt_118676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1125, 70), 'fmt', False)
    # Processing the call keyword arguments (line 1125)
    kwargs_118677 = {}
    # Getting the type of 'str' (line 1125)
    str_118675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1125, 66), 'str', False)
    # Calling str(args, kwargs) (line 1125)
    str_call_result_118678 = invoke(stypy.reporting.localization.Localization(__file__, 1125, 66), str_118675, *[fmt_118676], **kwargs_118677)
    
    # Applying the binary operator '%' (line 1125)
    result_mod_118679 = python_operator(stypy.reporting.localization.Localization(__file__, 1125, 37), '%', str_118674, str_call_result_118678)
    
    # Processing the call keyword arguments (line 1125)
    kwargs_118680 = {}
    # Getting the type of 'AttributeError' (line 1125)
    AttributeError_118673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1125, 22), 'AttributeError', False)
    # Calling AttributeError(args, kwargs) (line 1125)
    AttributeError_call_result_118681 = invoke(stypy.reporting.localization.Localization(__file__, 1125, 22), AttributeError_118673, *[result_mod_118679], **kwargs_118680)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1125, 16), AttributeError_call_result_118681, 'raise parameter', BaseException)
    # SSA join for if statement (line 1124)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1126):
    
    # Assigning a Call to a Name (line 1126):
    
    # Call to join(...): (line 1126)
    # Processing the call arguments (line 1126)
    
    # Call to map(...): (line 1126)
    # Processing the call arguments (line 1126)
    # Getting the type of 'asstr' (line 1126)
    asstr_118688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 47), 'asstr', False)
    # Getting the type of 'fmt' (line 1126)
    fmt_118689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 54), 'fmt', False)
    # Processing the call keyword arguments (line 1126)
    kwargs_118690 = {}
    # Getting the type of 'map' (line 1126)
    map_118687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 43), 'map', False)
    # Calling map(args, kwargs) (line 1126)
    map_call_result_118691 = invoke(stypy.reporting.localization.Localization(__file__, 1126, 43), map_118687, *[asstr_118688, fmt_118689], **kwargs_118690)
    
    # Processing the call keyword arguments (line 1126)
    kwargs_118692 = {}
    
    # Call to asstr(...): (line 1126)
    # Processing the call arguments (line 1126)
    # Getting the type of 'delimiter' (line 1126)
    delimiter_118683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 27), 'delimiter', False)
    # Processing the call keyword arguments (line 1126)
    kwargs_118684 = {}
    # Getting the type of 'asstr' (line 1126)
    asstr_118682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 21), 'asstr', False)
    # Calling asstr(args, kwargs) (line 1126)
    asstr_call_result_118685 = invoke(stypy.reporting.localization.Localization(__file__, 1126, 21), asstr_118682, *[delimiter_118683], **kwargs_118684)
    
    # Obtaining the member 'join' of a type (line 1126)
    join_118686 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 21), asstr_call_result_118685, 'join')
    # Calling join(args, kwargs) (line 1126)
    join_call_result_118693 = invoke(stypy.reporting.localization.Localization(__file__, 1126, 21), join_118686, *[map_call_result_118691], **kwargs_118692)
    
    # Assigning a type to the variable 'format' (line 1126)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1126, 12), 'format', join_call_result_118693)
    # SSA branch for the else part of an if statement (line 1123)
    module_type_store.open_ssa_branch('else')
    
    # Type idiom detected: calculating its left and rigth part (line 1127)
    # Getting the type of 'str' (line 1127)
    str_118694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 29), 'str')
    # Getting the type of 'fmt' (line 1127)
    fmt_118695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 24), 'fmt')
    
    (may_be_118696, more_types_in_union_118697) = may_be_subtype(str_118694, fmt_118695)

    if may_be_118696:

        if more_types_in_union_118697:
            # Runtime conditional SSA (line 1127)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'fmt' (line 1127)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1127, 13), 'fmt', remove_not_subtype_from_union(fmt_118695, str))
        
        # Assigning a Call to a Name (line 1128):
        
        # Assigning a Call to a Name (line 1128):
        
        # Call to count(...): (line 1128)
        # Processing the call arguments (line 1128)
        str_118700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1128, 36), 'str', '%')
        # Processing the call keyword arguments (line 1128)
        kwargs_118701 = {}
        # Getting the type of 'fmt' (line 1128)
        fmt_118698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 26), 'fmt', False)
        # Obtaining the member 'count' of a type (line 1128)
        count_118699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1128, 26), fmt_118698, 'count')
        # Calling count(args, kwargs) (line 1128)
        count_call_result_118702 = invoke(stypy.reporting.localization.Localization(__file__, 1128, 26), count_118699, *[str_118700], **kwargs_118701)
        
        # Assigning a type to the variable 'n_fmt_chars' (line 1128)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1128, 12), 'n_fmt_chars', count_call_result_118702)
        
        # Assigning a Call to a Name (line 1129):
        
        # Assigning a Call to a Name (line 1129):
        
        # Call to ValueError(...): (line 1129)
        # Processing the call arguments (line 1129)
        str_118704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1129, 31), 'str', 'fmt has wrong number of %% formats:  %s')
        # Getting the type of 'fmt' (line 1129)
        fmt_118705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 75), 'fmt', False)
        # Applying the binary operator '%' (line 1129)
        result_mod_118706 = python_operator(stypy.reporting.localization.Localization(__file__, 1129, 31), '%', str_118704, fmt_118705)
        
        # Processing the call keyword arguments (line 1129)
        kwargs_118707 = {}
        # Getting the type of 'ValueError' (line 1129)
        ValueError_118703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 20), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1129)
        ValueError_call_result_118708 = invoke(stypy.reporting.localization.Localization(__file__, 1129, 20), ValueError_118703, *[result_mod_118706], **kwargs_118707)
        
        # Assigning a type to the variable 'error' (line 1129)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1129, 12), 'error', ValueError_call_result_118708)
        
        
        # Getting the type of 'n_fmt_chars' (line 1130)
        n_fmt_chars_118709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 15), 'n_fmt_chars')
        int_118710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1130, 30), 'int')
        # Applying the binary operator '==' (line 1130)
        result_eq_118711 = python_operator(stypy.reporting.localization.Localization(__file__, 1130, 15), '==', n_fmt_chars_118709, int_118710)
        
        # Testing the type of an if condition (line 1130)
        if_condition_118712 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1130, 12), result_eq_118711)
        # Assigning a type to the variable 'if_condition_118712' (line 1130)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1130, 12), 'if_condition_118712', if_condition_118712)
        # SSA begins for if statement (line 1130)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'iscomplex_X' (line 1131)
        iscomplex_X_118713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1131, 19), 'iscomplex_X')
        # Testing the type of an if condition (line 1131)
        if_condition_118714 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1131, 16), iscomplex_X_118713)
        # Assigning a type to the variable 'if_condition_118714' (line 1131)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1131, 16), 'if_condition_118714', if_condition_118714)
        # SSA begins for if statement (line 1131)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1132):
        
        # Assigning a BinOp to a Name (line 1132):
        
        # Obtaining an instance of the builtin type 'list' (line 1132)
        list_118715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1132, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1132)
        # Adding element type (line 1132)
        str_118716 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1132, 27), 'str', ' (%s+%sj)')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1132)
        tuple_118717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1132, 42), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1132)
        # Adding element type (line 1132)
        # Getting the type of 'fmt' (line 1132)
        fmt_118718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 42), 'fmt')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1132, 42), tuple_118717, fmt_118718)
        # Adding element type (line 1132)
        # Getting the type of 'fmt' (line 1132)
        fmt_118719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 47), 'fmt')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1132, 42), tuple_118717, fmt_118719)
        
        # Applying the binary operator '%' (line 1132)
        result_mod_118720 = python_operator(stypy.reporting.localization.Localization(__file__, 1132, 27), '%', str_118716, tuple_118717)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1132, 26), list_118715, result_mod_118720)
        
        # Getting the type of 'ncol' (line 1132)
        ncol_118721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 57), 'ncol')
        # Applying the binary operator '*' (line 1132)
        result_mul_118722 = python_operator(stypy.reporting.localization.Localization(__file__, 1132, 26), '*', list_118715, ncol_118721)
        
        # Assigning a type to the variable 'fmt' (line 1132)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1132, 20), 'fmt', result_mul_118722)
        # SSA branch for the else part of an if statement (line 1131)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 1134):
        
        # Assigning a BinOp to a Name (line 1134):
        
        # Obtaining an instance of the builtin type 'list' (line 1134)
        list_118723 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1134, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1134)
        # Adding element type (line 1134)
        # Getting the type of 'fmt' (line 1134)
        fmt_118724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 27), 'fmt')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1134, 26), list_118723, fmt_118724)
        
        # Getting the type of 'ncol' (line 1134)
        ncol_118725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 36), 'ncol')
        # Applying the binary operator '*' (line 1134)
        result_mul_118726 = python_operator(stypy.reporting.localization.Localization(__file__, 1134, 26), '*', list_118723, ncol_118725)
        
        # Assigning a type to the variable 'fmt' (line 1134)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1134, 20), 'fmt', result_mul_118726)
        # SSA join for if statement (line 1131)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1135):
        
        # Assigning a Call to a Name (line 1135):
        
        # Call to join(...): (line 1135)
        # Processing the call arguments (line 1135)
        # Getting the type of 'fmt' (line 1135)
        fmt_118729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 40), 'fmt', False)
        # Processing the call keyword arguments (line 1135)
        kwargs_118730 = {}
        # Getting the type of 'delimiter' (line 1135)
        delimiter_118727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 25), 'delimiter', False)
        # Obtaining the member 'join' of a type (line 1135)
        join_118728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1135, 25), delimiter_118727, 'join')
        # Calling join(args, kwargs) (line 1135)
        join_call_result_118731 = invoke(stypy.reporting.localization.Localization(__file__, 1135, 25), join_118728, *[fmt_118729], **kwargs_118730)
        
        # Assigning a type to the variable 'format' (line 1135)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1135, 16), 'format', join_call_result_118731)
        # SSA branch for the else part of an if statement (line 1130)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        # Getting the type of 'iscomplex_X' (line 1136)
        iscomplex_X_118732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 17), 'iscomplex_X')
        
        # Getting the type of 'n_fmt_chars' (line 1136)
        n_fmt_chars_118733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 33), 'n_fmt_chars')
        int_118734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1136, 49), 'int')
        # Getting the type of 'ncol' (line 1136)
        ncol_118735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 53), 'ncol')
        # Applying the binary operator '*' (line 1136)
        result_mul_118736 = python_operator(stypy.reporting.localization.Localization(__file__, 1136, 49), '*', int_118734, ncol_118735)
        
        # Applying the binary operator '!=' (line 1136)
        result_ne_118737 = python_operator(stypy.reporting.localization.Localization(__file__, 1136, 33), '!=', n_fmt_chars_118733, result_mul_118736)
        
        # Applying the binary operator 'and' (line 1136)
        result_and_keyword_118738 = python_operator(stypy.reporting.localization.Localization(__file__, 1136, 17), 'and', iscomplex_X_118732, result_ne_118737)
        
        # Testing the type of an if condition (line 1136)
        if_condition_118739 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1136, 17), result_and_keyword_118738)
        # Assigning a type to the variable 'if_condition_118739' (line 1136)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1136, 17), 'if_condition_118739', if_condition_118739)
        # SSA begins for if statement (line 1136)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'error' (line 1137)
        error_118740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1137, 22), 'error')
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1137, 16), error_118740, 'raise parameter', BaseException)
        # SSA branch for the else part of an if statement (line 1136)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'iscomplex_X' (line 1138)
        iscomplex_X_118741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 23), 'iscomplex_X')
        # Applying the 'not' unary operator (line 1138)
        result_not__118742 = python_operator(stypy.reporting.localization.Localization(__file__, 1138, 19), 'not', iscomplex_X_118741)
        
        
        # Getting the type of 'n_fmt_chars' (line 1138)
        n_fmt_chars_118743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 40), 'n_fmt_chars')
        # Getting the type of 'ncol' (line 1138)
        ncol_118744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 55), 'ncol')
        # Applying the binary operator '!=' (line 1138)
        result_ne_118745 = python_operator(stypy.reporting.localization.Localization(__file__, 1138, 40), '!=', n_fmt_chars_118743, ncol_118744)
        
        # Applying the binary operator 'and' (line 1138)
        result_and_keyword_118746 = python_operator(stypy.reporting.localization.Localization(__file__, 1138, 18), 'and', result_not__118742, result_ne_118745)
        
        # Testing the type of an if condition (line 1138)
        if_condition_118747 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1138, 17), result_and_keyword_118746)
        # Assigning a type to the variable 'if_condition_118747' (line 1138)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1138, 17), 'if_condition_118747', if_condition_118747)
        # SSA begins for if statement (line 1138)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'error' (line 1139)
        error_118748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1139, 22), 'error')
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1139, 16), error_118748, 'raise parameter', BaseException)
        # SSA branch for the else part of an if statement (line 1138)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 1141):
        
        # Assigning a Name to a Name (line 1141):
        # Getting the type of 'fmt' (line 1141)
        fmt_118749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1141, 25), 'fmt')
        # Assigning a type to the variable 'format' (line 1141)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1141, 16), 'format', fmt_118749)
        # SSA join for if statement (line 1138)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1136)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1130)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_118697:
            # Runtime conditional SSA for else branch (line 1127)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_118696) or more_types_in_union_118697):
        # Assigning a type to the variable 'fmt' (line 1127)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1127, 13), 'fmt', remove_subtype_from_union(fmt_118695, str))
        
        # Call to ValueError(...): (line 1143)
        # Processing the call arguments (line 1143)
        str_118751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1143, 29), 'str', 'invalid fmt: %r')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1143)
        tuple_118752 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1143, 50), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1143)
        # Adding element type (line 1143)
        # Getting the type of 'fmt' (line 1143)
        fmt_118753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 50), 'fmt', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1143, 50), tuple_118752, fmt_118753)
        
        # Applying the binary operator '%' (line 1143)
        result_mod_118754 = python_operator(stypy.reporting.localization.Localization(__file__, 1143, 29), '%', str_118751, tuple_118752)
        
        # Processing the call keyword arguments (line 1143)
        kwargs_118755 = {}
        # Getting the type of 'ValueError' (line 1143)
        ValueError_118750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1143)
        ValueError_call_result_118756 = invoke(stypy.reporting.localization.Localization(__file__, 1143, 18), ValueError_118750, *[result_mod_118754], **kwargs_118755)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1143, 12), ValueError_call_result_118756, 'raise parameter', BaseException)

        if (may_be_118696 and more_types_in_union_118697):
            # SSA join for if statement (line 1127)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA join for if statement (line 1123)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 1145)
    # Processing the call arguments (line 1145)
    # Getting the type of 'header' (line 1145)
    header_118758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 15), 'header', False)
    # Processing the call keyword arguments (line 1145)
    kwargs_118759 = {}
    # Getting the type of 'len' (line 1145)
    len_118757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 11), 'len', False)
    # Calling len(args, kwargs) (line 1145)
    len_call_result_118760 = invoke(stypy.reporting.localization.Localization(__file__, 1145, 11), len_118757, *[header_118758], **kwargs_118759)
    
    int_118761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1145, 25), 'int')
    # Applying the binary operator '>' (line 1145)
    result_gt_118762 = python_operator(stypy.reporting.localization.Localization(__file__, 1145, 11), '>', len_call_result_118760, int_118761)
    
    # Testing the type of an if condition (line 1145)
    if_condition_118763 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1145, 8), result_gt_118762)
    # Assigning a type to the variable 'if_condition_118763' (line 1145)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1145, 8), 'if_condition_118763', if_condition_118763)
    # SSA begins for if statement (line 1145)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1146):
    
    # Assigning a Call to a Name (line 1146):
    
    # Call to replace(...): (line 1146)
    # Processing the call arguments (line 1146)
    str_118766 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1146, 36), 'str', '\n')
    str_118767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1146, 42), 'str', '\n')
    # Getting the type of 'comments' (line 1146)
    comments_118768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 49), 'comments', False)
    # Applying the binary operator '+' (line 1146)
    result_add_118769 = python_operator(stypy.reporting.localization.Localization(__file__, 1146, 42), '+', str_118767, comments_118768)
    
    # Processing the call keyword arguments (line 1146)
    kwargs_118770 = {}
    # Getting the type of 'header' (line 1146)
    header_118764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 21), 'header', False)
    # Obtaining the member 'replace' of a type (line 1146)
    replace_118765 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1146, 21), header_118764, 'replace')
    # Calling replace(args, kwargs) (line 1146)
    replace_call_result_118771 = invoke(stypy.reporting.localization.Localization(__file__, 1146, 21), replace_118765, *[str_118766, result_add_118769], **kwargs_118770)
    
    # Assigning a type to the variable 'header' (line 1146)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1146, 12), 'header', replace_call_result_118771)
    
    # Call to write(...): (line 1147)
    # Processing the call arguments (line 1147)
    
    # Call to asbytes(...): (line 1147)
    # Processing the call arguments (line 1147)
    # Getting the type of 'comments' (line 1147)
    comments_118775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 29), 'comments', False)
    # Getting the type of 'header' (line 1147)
    header_118776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 40), 'header', False)
    # Applying the binary operator '+' (line 1147)
    result_add_118777 = python_operator(stypy.reporting.localization.Localization(__file__, 1147, 29), '+', comments_118775, header_118776)
    
    # Getting the type of 'newline' (line 1147)
    newline_118778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 49), 'newline', False)
    # Applying the binary operator '+' (line 1147)
    result_add_118779 = python_operator(stypy.reporting.localization.Localization(__file__, 1147, 47), '+', result_add_118777, newline_118778)
    
    # Processing the call keyword arguments (line 1147)
    kwargs_118780 = {}
    # Getting the type of 'asbytes' (line 1147)
    asbytes_118774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 21), 'asbytes', False)
    # Calling asbytes(args, kwargs) (line 1147)
    asbytes_call_result_118781 = invoke(stypy.reporting.localization.Localization(__file__, 1147, 21), asbytes_118774, *[result_add_118779], **kwargs_118780)
    
    # Processing the call keyword arguments (line 1147)
    kwargs_118782 = {}
    # Getting the type of 'fh' (line 1147)
    fh_118772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 12), 'fh', False)
    # Obtaining the member 'write' of a type (line 1147)
    write_118773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1147, 12), fh_118772, 'write')
    # Calling write(args, kwargs) (line 1147)
    write_call_result_118783 = invoke(stypy.reporting.localization.Localization(__file__, 1147, 12), write_118773, *[asbytes_call_result_118781], **kwargs_118782)
    
    # SSA join for if statement (line 1145)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'iscomplex_X' (line 1148)
    iscomplex_X_118784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 11), 'iscomplex_X')
    # Testing the type of an if condition (line 1148)
    if_condition_118785 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1148, 8), iscomplex_X_118784)
    # Assigning a type to the variable 'if_condition_118785' (line 1148)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1148, 8), 'if_condition_118785', if_condition_118785)
    # SSA begins for if statement (line 1148)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'X' (line 1149)
    X_118786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 23), 'X')
    # Testing the type of a for loop iterable (line 1149)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1149, 12), X_118786)
    # Getting the type of the for loop variable (line 1149)
    for_loop_var_118787 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1149, 12), X_118786)
    # Assigning a type to the variable 'row' (line 1149)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1149, 12), 'row', for_loop_var_118787)
    # SSA begins for a for statement (line 1149)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a List to a Name (line 1150):
    
    # Assigning a List to a Name (line 1150):
    
    # Obtaining an instance of the builtin type 'list' (line 1150)
    list_118788 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1150, 23), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1150)
    
    # Assigning a type to the variable 'row2' (line 1150)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1150, 16), 'row2', list_118788)
    
    # Getting the type of 'row' (line 1151)
    row_118789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1151, 30), 'row')
    # Testing the type of a for loop iterable (line 1151)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1151, 16), row_118789)
    # Getting the type of the for loop variable (line 1151)
    for_loop_var_118790 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1151, 16), row_118789)
    # Assigning a type to the variable 'number' (line 1151)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1151, 16), 'number', for_loop_var_118790)
    # SSA begins for a for statement (line 1151)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to append(...): (line 1152)
    # Processing the call arguments (line 1152)
    # Getting the type of 'number' (line 1152)
    number_118793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1152, 32), 'number', False)
    # Obtaining the member 'real' of a type (line 1152)
    real_118794 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1152, 32), number_118793, 'real')
    # Processing the call keyword arguments (line 1152)
    kwargs_118795 = {}
    # Getting the type of 'row2' (line 1152)
    row2_118791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1152, 20), 'row2', False)
    # Obtaining the member 'append' of a type (line 1152)
    append_118792 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1152, 20), row2_118791, 'append')
    # Calling append(args, kwargs) (line 1152)
    append_call_result_118796 = invoke(stypy.reporting.localization.Localization(__file__, 1152, 20), append_118792, *[real_118794], **kwargs_118795)
    
    
    # Call to append(...): (line 1153)
    # Processing the call arguments (line 1153)
    # Getting the type of 'number' (line 1153)
    number_118799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 32), 'number', False)
    # Obtaining the member 'imag' of a type (line 1153)
    imag_118800 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1153, 32), number_118799, 'imag')
    # Processing the call keyword arguments (line 1153)
    kwargs_118801 = {}
    # Getting the type of 'row2' (line 1153)
    row2_118797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 20), 'row2', False)
    # Obtaining the member 'append' of a type (line 1153)
    append_118798 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1153, 20), row2_118797, 'append')
    # Calling append(args, kwargs) (line 1153)
    append_call_result_118802 = invoke(stypy.reporting.localization.Localization(__file__, 1153, 20), append_118798, *[imag_118800], **kwargs_118801)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to write(...): (line 1154)
    # Processing the call arguments (line 1154)
    
    # Call to asbytes(...): (line 1154)
    # Processing the call arguments (line 1154)
    # Getting the type of 'format' (line 1154)
    format_118806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 33), 'format', False)
    
    # Call to tuple(...): (line 1154)
    # Processing the call arguments (line 1154)
    # Getting the type of 'row2' (line 1154)
    row2_118808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 48), 'row2', False)
    # Processing the call keyword arguments (line 1154)
    kwargs_118809 = {}
    # Getting the type of 'tuple' (line 1154)
    tuple_118807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 42), 'tuple', False)
    # Calling tuple(args, kwargs) (line 1154)
    tuple_call_result_118810 = invoke(stypy.reporting.localization.Localization(__file__, 1154, 42), tuple_118807, *[row2_118808], **kwargs_118809)
    
    # Applying the binary operator '%' (line 1154)
    result_mod_118811 = python_operator(stypy.reporting.localization.Localization(__file__, 1154, 33), '%', format_118806, tuple_call_result_118810)
    
    # Getting the type of 'newline' (line 1154)
    newline_118812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 56), 'newline', False)
    # Applying the binary operator '+' (line 1154)
    result_add_118813 = python_operator(stypy.reporting.localization.Localization(__file__, 1154, 33), '+', result_mod_118811, newline_118812)
    
    # Processing the call keyword arguments (line 1154)
    kwargs_118814 = {}
    # Getting the type of 'asbytes' (line 1154)
    asbytes_118805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 25), 'asbytes', False)
    # Calling asbytes(args, kwargs) (line 1154)
    asbytes_call_result_118815 = invoke(stypy.reporting.localization.Localization(__file__, 1154, 25), asbytes_118805, *[result_add_118813], **kwargs_118814)
    
    # Processing the call keyword arguments (line 1154)
    kwargs_118816 = {}
    # Getting the type of 'fh' (line 1154)
    fh_118803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 16), 'fh', False)
    # Obtaining the member 'write' of a type (line 1154)
    write_118804 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1154, 16), fh_118803, 'write')
    # Calling write(args, kwargs) (line 1154)
    write_call_result_118817 = invoke(stypy.reporting.localization.Localization(__file__, 1154, 16), write_118804, *[asbytes_call_result_118815], **kwargs_118816)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 1148)
    module_type_store.open_ssa_branch('else')
    
    # Getting the type of 'X' (line 1156)
    X_118818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1156, 23), 'X')
    # Testing the type of a for loop iterable (line 1156)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1156, 12), X_118818)
    # Getting the type of the for loop variable (line 1156)
    for_loop_var_118819 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1156, 12), X_118818)
    # Assigning a type to the variable 'row' (line 1156)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1156, 12), 'row', for_loop_var_118819)
    # SSA begins for a for statement (line 1156)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # SSA begins for try-except statement (line 1157)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Call to write(...): (line 1158)
    # Processing the call arguments (line 1158)
    
    # Call to asbytes(...): (line 1158)
    # Processing the call arguments (line 1158)
    # Getting the type of 'format' (line 1158)
    format_118823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1158, 37), 'format', False)
    
    # Call to tuple(...): (line 1158)
    # Processing the call arguments (line 1158)
    # Getting the type of 'row' (line 1158)
    row_118825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1158, 52), 'row', False)
    # Processing the call keyword arguments (line 1158)
    kwargs_118826 = {}
    # Getting the type of 'tuple' (line 1158)
    tuple_118824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1158, 46), 'tuple', False)
    # Calling tuple(args, kwargs) (line 1158)
    tuple_call_result_118827 = invoke(stypy.reporting.localization.Localization(__file__, 1158, 46), tuple_118824, *[row_118825], **kwargs_118826)
    
    # Applying the binary operator '%' (line 1158)
    result_mod_118828 = python_operator(stypy.reporting.localization.Localization(__file__, 1158, 37), '%', format_118823, tuple_call_result_118827)
    
    # Getting the type of 'newline' (line 1158)
    newline_118829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1158, 59), 'newline', False)
    # Applying the binary operator '+' (line 1158)
    result_add_118830 = python_operator(stypy.reporting.localization.Localization(__file__, 1158, 37), '+', result_mod_118828, newline_118829)
    
    # Processing the call keyword arguments (line 1158)
    kwargs_118831 = {}
    # Getting the type of 'asbytes' (line 1158)
    asbytes_118822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1158, 29), 'asbytes', False)
    # Calling asbytes(args, kwargs) (line 1158)
    asbytes_call_result_118832 = invoke(stypy.reporting.localization.Localization(__file__, 1158, 29), asbytes_118822, *[result_add_118830], **kwargs_118831)
    
    # Processing the call keyword arguments (line 1158)
    kwargs_118833 = {}
    # Getting the type of 'fh' (line 1158)
    fh_118820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1158, 20), 'fh', False)
    # Obtaining the member 'write' of a type (line 1158)
    write_118821 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1158, 20), fh_118820, 'write')
    # Calling write(args, kwargs) (line 1158)
    write_call_result_118834 = invoke(stypy.reporting.localization.Localization(__file__, 1158, 20), write_118821, *[asbytes_call_result_118832], **kwargs_118833)
    
    # SSA branch for the except part of a try statement (line 1157)
    # SSA branch for the except 'TypeError' branch of a try statement (line 1157)
    module_type_store.open_ssa_branch('except')
    
    # Call to TypeError(...): (line 1160)
    # Processing the call arguments (line 1160)
    str_118836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1160, 36), 'str', "Mismatch between array dtype ('%s') and format specifier ('%s')")
    
    # Obtaining an instance of the builtin type 'tuple' (line 1162)
    tuple_118837 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1162, 39), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1162)
    # Adding element type (line 1162)
    
    # Call to str(...): (line 1162)
    # Processing the call arguments (line 1162)
    # Getting the type of 'X' (line 1162)
    X_118839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1162, 43), 'X', False)
    # Obtaining the member 'dtype' of a type (line 1162)
    dtype_118840 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1162, 43), X_118839, 'dtype')
    # Processing the call keyword arguments (line 1162)
    kwargs_118841 = {}
    # Getting the type of 'str' (line 1162)
    str_118838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1162, 39), 'str', False)
    # Calling str(args, kwargs) (line 1162)
    str_call_result_118842 = invoke(stypy.reporting.localization.Localization(__file__, 1162, 39), str_118838, *[dtype_118840], **kwargs_118841)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1162, 39), tuple_118837, str_call_result_118842)
    # Adding element type (line 1162)
    # Getting the type of 'format' (line 1162)
    format_118843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1162, 53), 'format', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1162, 39), tuple_118837, format_118843)
    
    # Applying the binary operator '%' (line 1160)
    result_mod_118844 = python_operator(stypy.reporting.localization.Localization(__file__, 1160, 36), '%', str_118836, tuple_118837)
    
    # Processing the call keyword arguments (line 1160)
    kwargs_118845 = {}
    # Getting the type of 'TypeError' (line 1160)
    TypeError_118835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1160, 26), 'TypeError', False)
    # Calling TypeError(args, kwargs) (line 1160)
    TypeError_call_result_118846 = invoke(stypy.reporting.localization.Localization(__file__, 1160, 26), TypeError_118835, *[result_mod_118844], **kwargs_118845)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1160, 20), TypeError_call_result_118846, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 1157)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1148)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 1163)
    # Processing the call arguments (line 1163)
    # Getting the type of 'footer' (line 1163)
    footer_118848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 15), 'footer', False)
    # Processing the call keyword arguments (line 1163)
    kwargs_118849 = {}
    # Getting the type of 'len' (line 1163)
    len_118847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 11), 'len', False)
    # Calling len(args, kwargs) (line 1163)
    len_call_result_118850 = invoke(stypy.reporting.localization.Localization(__file__, 1163, 11), len_118847, *[footer_118848], **kwargs_118849)
    
    int_118851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1163, 25), 'int')
    # Applying the binary operator '>' (line 1163)
    result_gt_118852 = python_operator(stypy.reporting.localization.Localization(__file__, 1163, 11), '>', len_call_result_118850, int_118851)
    
    # Testing the type of an if condition (line 1163)
    if_condition_118853 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1163, 8), result_gt_118852)
    # Assigning a type to the variable 'if_condition_118853' (line 1163)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1163, 8), 'if_condition_118853', if_condition_118853)
    # SSA begins for if statement (line 1163)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1164):
    
    # Assigning a Call to a Name (line 1164):
    
    # Call to replace(...): (line 1164)
    # Processing the call arguments (line 1164)
    str_118856 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1164, 36), 'str', '\n')
    str_118857 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1164, 42), 'str', '\n')
    # Getting the type of 'comments' (line 1164)
    comments_118858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 49), 'comments', False)
    # Applying the binary operator '+' (line 1164)
    result_add_118859 = python_operator(stypy.reporting.localization.Localization(__file__, 1164, 42), '+', str_118857, comments_118858)
    
    # Processing the call keyword arguments (line 1164)
    kwargs_118860 = {}
    # Getting the type of 'footer' (line 1164)
    footer_118854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 21), 'footer', False)
    # Obtaining the member 'replace' of a type (line 1164)
    replace_118855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1164, 21), footer_118854, 'replace')
    # Calling replace(args, kwargs) (line 1164)
    replace_call_result_118861 = invoke(stypy.reporting.localization.Localization(__file__, 1164, 21), replace_118855, *[str_118856, result_add_118859], **kwargs_118860)
    
    # Assigning a type to the variable 'footer' (line 1164)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1164, 12), 'footer', replace_call_result_118861)
    
    # Call to write(...): (line 1165)
    # Processing the call arguments (line 1165)
    
    # Call to asbytes(...): (line 1165)
    # Processing the call arguments (line 1165)
    # Getting the type of 'comments' (line 1165)
    comments_118865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 29), 'comments', False)
    # Getting the type of 'footer' (line 1165)
    footer_118866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 40), 'footer', False)
    # Applying the binary operator '+' (line 1165)
    result_add_118867 = python_operator(stypy.reporting.localization.Localization(__file__, 1165, 29), '+', comments_118865, footer_118866)
    
    # Getting the type of 'newline' (line 1165)
    newline_118868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 49), 'newline', False)
    # Applying the binary operator '+' (line 1165)
    result_add_118869 = python_operator(stypy.reporting.localization.Localization(__file__, 1165, 47), '+', result_add_118867, newline_118868)
    
    # Processing the call keyword arguments (line 1165)
    kwargs_118870 = {}
    # Getting the type of 'asbytes' (line 1165)
    asbytes_118864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 21), 'asbytes', False)
    # Calling asbytes(args, kwargs) (line 1165)
    asbytes_call_result_118871 = invoke(stypy.reporting.localization.Localization(__file__, 1165, 21), asbytes_118864, *[result_add_118869], **kwargs_118870)
    
    # Processing the call keyword arguments (line 1165)
    kwargs_118872 = {}
    # Getting the type of 'fh' (line 1165)
    fh_118862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 12), 'fh', False)
    # Obtaining the member 'write' of a type (line 1165)
    write_118863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1165, 12), fh_118862, 'write')
    # Calling write(args, kwargs) (line 1165)
    write_call_result_118873 = invoke(stypy.reporting.localization.Localization(__file__, 1165, 12), write_118863, *[asbytes_call_result_118871], **kwargs_118872)
    
    # SSA join for if statement (line 1163)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # finally branch of the try-finally block (line 1104)
    
    # Getting the type of 'own_fh' (line 1167)
    own_fh_118874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1167, 11), 'own_fh')
    # Testing the type of an if condition (line 1167)
    if_condition_118875 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1167, 8), own_fh_118874)
    # Assigning a type to the variable 'if_condition_118875' (line 1167)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1167, 8), 'if_condition_118875', if_condition_118875)
    # SSA begins for if statement (line 1167)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to close(...): (line 1168)
    # Processing the call keyword arguments (line 1168)
    kwargs_118878 = {}
    # Getting the type of 'fh' (line 1168)
    fh_118876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1168, 12), 'fh', False)
    # Obtaining the member 'close' of a type (line 1168)
    close_118877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1168, 12), fh_118876, 'close')
    # Calling close(args, kwargs) (line 1168)
    close_call_result_118879 = invoke(stypy.reporting.localization.Localization(__file__, 1168, 12), close_118877, *[], **kwargs_118878)
    
    # SSA join for if statement (line 1167)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # ################# End of 'savetxt(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'savetxt' in the type store
    # Getting the type of 'stypy_return_type' (line 969)
    stypy_return_type_118880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 969, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_118880)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'savetxt'
    return stypy_return_type_118880

# Assigning a type to the variable 'savetxt' (line 969)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 969, 0), 'savetxt', savetxt)

@norecursion
def fromregex(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'fromregex'
    module_type_store = module_type_store.open_function_context('fromregex', 1171, 0, False)
    
    # Passed parameters checking function
    fromregex.stypy_localization = localization
    fromregex.stypy_type_of_self = None
    fromregex.stypy_type_store = module_type_store
    fromregex.stypy_function_name = 'fromregex'
    fromregex.stypy_param_names_list = ['file', 'regexp', 'dtype']
    fromregex.stypy_varargs_param_name = None
    fromregex.stypy_kwargs_param_name = None
    fromregex.stypy_call_defaults = defaults
    fromregex.stypy_call_varargs = varargs
    fromregex.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'fromregex', ['file', 'regexp', 'dtype'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'fromregex', localization, ['file', 'regexp', 'dtype'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'fromregex(...)' code ##################

    str_118881 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1225, (-1)), 'str', '\n    Construct an array from a text file, using regular expression parsing.\n\n    The returned array is always a structured array, and is constructed from\n    all matches of the regular expression in the file. Groups in the regular\n    expression are converted to fields of the structured array.\n\n    Parameters\n    ----------\n    file : str or file\n        File name or file object to read.\n    regexp : str or regexp\n        Regular expression used to parse the file.\n        Groups in the regular expression correspond to fields in the dtype.\n    dtype : dtype or list of dtypes\n        Dtype for the structured array.\n\n    Returns\n    -------\n    output : ndarray\n        The output array, containing the part of the content of `file` that\n        was matched by `regexp`. `output` is always a structured array.\n\n    Raises\n    ------\n    TypeError\n        When `dtype` is not a valid dtype for a structured array.\n\n    See Also\n    --------\n    fromstring, loadtxt\n\n    Notes\n    -----\n    Dtypes for structured arrays can be specified in several forms, but all\n    forms specify at least the data type and field name. For details see\n    `doc.structured_arrays`.\n\n    Examples\n    --------\n    >>> f = open(\'test.dat\', \'w\')\n    >>> f.write("1312 foo\\n1534  bar\\n444   qux")\n    >>> f.close()\n\n    >>> regexp = r"(\\d+)\\s+(...)"  # match [digits, whitespace, anything]\n    >>> output = np.fromregex(\'test.dat\', regexp,\n    ...                       [(\'num\', np.int64), (\'key\', \'S3\')])\n    >>> output\n    array([(1312L, \'foo\'), (1534L, \'bar\'), (444L, \'qux\')],\n          dtype=[(\'num\', \'<i8\'), (\'key\', \'|S3\')])\n    >>> output[\'num\']\n    array([1312, 1534,  444], dtype=int64)\n\n    ')
    
    # Assigning a Name to a Name (line 1226):
    
    # Assigning a Name to a Name (line 1226):
    # Getting the type of 'False' (line 1226)
    False_118882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 13), 'False')
    # Assigning a type to the variable 'own_fh' (line 1226)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1226, 4), 'own_fh', False_118882)
    
    # Type idiom detected: calculating its left and rigth part (line 1227)
    str_118883 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1227, 25), 'str', 'read')
    # Getting the type of 'file' (line 1227)
    file_118884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1227, 19), 'file')
    
    (may_be_118885, more_types_in_union_118886) = may_not_provide_member(str_118883, file_118884)

    if may_be_118885:

        if more_types_in_union_118886:
            # Runtime conditional SSA (line 1227)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'file' (line 1227)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1227, 4), 'file', remove_member_provider_from_union(file_118884, 'read'))
        
        # Assigning a Call to a Name (line 1228):
        
        # Assigning a Call to a Name (line 1228):
        
        # Call to open(...): (line 1228)
        # Processing the call arguments (line 1228)
        # Getting the type of 'file' (line 1228)
        file_118888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1228, 20), 'file', False)
        str_118889 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1228, 26), 'str', 'rb')
        # Processing the call keyword arguments (line 1228)
        kwargs_118890 = {}
        # Getting the type of 'open' (line 1228)
        open_118887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1228, 15), 'open', False)
        # Calling open(args, kwargs) (line 1228)
        open_call_result_118891 = invoke(stypy.reporting.localization.Localization(__file__, 1228, 15), open_118887, *[file_118888, str_118889], **kwargs_118890)
        
        # Assigning a type to the variable 'file' (line 1228)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1228, 8), 'file', open_call_result_118891)
        
        # Assigning a Name to a Name (line 1229):
        
        # Assigning a Name to a Name (line 1229):
        # Getting the type of 'True' (line 1229)
        True_118892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 17), 'True')
        # Assigning a type to the variable 'own_fh' (line 1229)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1229, 8), 'own_fh', True_118892)

        if more_types_in_union_118886:
            # SSA join for if statement (line 1227)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 1231)
    
    # Type idiom detected: calculating its left and rigth part (line 1232)
    str_118893 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1232, 31), 'str', 'match')
    # Getting the type of 'regexp' (line 1232)
    regexp_118894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 23), 'regexp')
    
    (may_be_118895, more_types_in_union_118896) = may_not_provide_member(str_118893, regexp_118894)

    if may_be_118895:

        if more_types_in_union_118896:
            # Runtime conditional SSA (line 1232)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'regexp' (line 1232)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1232, 8), 'regexp', remove_member_provider_from_union(regexp_118894, 'match'))
        
        # Assigning a Call to a Name (line 1233):
        
        # Assigning a Call to a Name (line 1233):
        
        # Call to compile(...): (line 1233)
        # Processing the call arguments (line 1233)
        
        # Call to asbytes(...): (line 1233)
        # Processing the call arguments (line 1233)
        # Getting the type of 'regexp' (line 1233)
        regexp_118900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1233, 40), 'regexp', False)
        # Processing the call keyword arguments (line 1233)
        kwargs_118901 = {}
        # Getting the type of 'asbytes' (line 1233)
        asbytes_118899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1233, 32), 'asbytes', False)
        # Calling asbytes(args, kwargs) (line 1233)
        asbytes_call_result_118902 = invoke(stypy.reporting.localization.Localization(__file__, 1233, 32), asbytes_118899, *[regexp_118900], **kwargs_118901)
        
        # Processing the call keyword arguments (line 1233)
        kwargs_118903 = {}
        # Getting the type of 're' (line 1233)
        re_118897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1233, 21), 're', False)
        # Obtaining the member 'compile' of a type (line 1233)
        compile_118898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1233, 21), re_118897, 'compile')
        # Calling compile(args, kwargs) (line 1233)
        compile_call_result_118904 = invoke(stypy.reporting.localization.Localization(__file__, 1233, 21), compile_118898, *[asbytes_call_result_118902], **kwargs_118903)
        
        # Assigning a type to the variable 'regexp' (line 1233)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1233, 12), 'regexp', compile_call_result_118904)

        if more_types_in_union_118896:
            # SSA join for if statement (line 1232)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    
    # Call to isinstance(...): (line 1234)
    # Processing the call arguments (line 1234)
    # Getting the type of 'dtype' (line 1234)
    dtype_118906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 26), 'dtype', False)
    # Getting the type of 'np' (line 1234)
    np_118907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 33), 'np', False)
    # Obtaining the member 'dtype' of a type (line 1234)
    dtype_118908 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1234, 33), np_118907, 'dtype')
    # Processing the call keyword arguments (line 1234)
    kwargs_118909 = {}
    # Getting the type of 'isinstance' (line 1234)
    isinstance_118905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 15), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1234)
    isinstance_call_result_118910 = invoke(stypy.reporting.localization.Localization(__file__, 1234, 15), isinstance_118905, *[dtype_118906, dtype_118908], **kwargs_118909)
    
    # Applying the 'not' unary operator (line 1234)
    result_not__118911 = python_operator(stypy.reporting.localization.Localization(__file__, 1234, 11), 'not', isinstance_call_result_118910)
    
    # Testing the type of an if condition (line 1234)
    if_condition_118912 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1234, 8), result_not__118911)
    # Assigning a type to the variable 'if_condition_118912' (line 1234)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1234, 8), 'if_condition_118912', if_condition_118912)
    # SSA begins for if statement (line 1234)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1235):
    
    # Assigning a Call to a Name (line 1235):
    
    # Call to dtype(...): (line 1235)
    # Processing the call arguments (line 1235)
    # Getting the type of 'dtype' (line 1235)
    dtype_118915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 29), 'dtype', False)
    # Processing the call keyword arguments (line 1235)
    kwargs_118916 = {}
    # Getting the type of 'np' (line 1235)
    np_118913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 20), 'np', False)
    # Obtaining the member 'dtype' of a type (line 1235)
    dtype_118914 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1235, 20), np_118913, 'dtype')
    # Calling dtype(args, kwargs) (line 1235)
    dtype_call_result_118917 = invoke(stypy.reporting.localization.Localization(__file__, 1235, 20), dtype_118914, *[dtype_118915], **kwargs_118916)
    
    # Assigning a type to the variable 'dtype' (line 1235)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1235, 12), 'dtype', dtype_call_result_118917)
    # SSA join for if statement (line 1234)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1237):
    
    # Assigning a Call to a Name (line 1237):
    
    # Call to findall(...): (line 1237)
    # Processing the call arguments (line 1237)
    
    # Call to read(...): (line 1237)
    # Processing the call keyword arguments (line 1237)
    kwargs_118922 = {}
    # Getting the type of 'file' (line 1237)
    file_118920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1237, 29), 'file', False)
    # Obtaining the member 'read' of a type (line 1237)
    read_118921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1237, 29), file_118920, 'read')
    # Calling read(args, kwargs) (line 1237)
    read_call_result_118923 = invoke(stypy.reporting.localization.Localization(__file__, 1237, 29), read_118921, *[], **kwargs_118922)
    
    # Processing the call keyword arguments (line 1237)
    kwargs_118924 = {}
    # Getting the type of 'regexp' (line 1237)
    regexp_118918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1237, 14), 'regexp', False)
    # Obtaining the member 'findall' of a type (line 1237)
    findall_118919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1237, 14), regexp_118918, 'findall')
    # Calling findall(args, kwargs) (line 1237)
    findall_call_result_118925 = invoke(stypy.reporting.localization.Localization(__file__, 1237, 14), findall_118919, *[read_call_result_118923], **kwargs_118924)
    
    # Assigning a type to the variable 'seq' (line 1237)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1237, 8), 'seq', findall_call_result_118925)
    
    
    # Evaluating a boolean operation
    # Getting the type of 'seq' (line 1238)
    seq_118926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 11), 'seq')
    
    
    # Call to isinstance(...): (line 1238)
    # Processing the call arguments (line 1238)
    
    # Obtaining the type of the subscript
    int_118928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1238, 38), 'int')
    # Getting the type of 'seq' (line 1238)
    seq_118929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 34), 'seq', False)
    # Obtaining the member '__getitem__' of a type (line 1238)
    getitem___118930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1238, 34), seq_118929, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1238)
    subscript_call_result_118931 = invoke(stypy.reporting.localization.Localization(__file__, 1238, 34), getitem___118930, int_118928)
    
    # Getting the type of 'tuple' (line 1238)
    tuple_118932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 42), 'tuple', False)
    # Processing the call keyword arguments (line 1238)
    kwargs_118933 = {}
    # Getting the type of 'isinstance' (line 1238)
    isinstance_118927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 23), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1238)
    isinstance_call_result_118934 = invoke(stypy.reporting.localization.Localization(__file__, 1238, 23), isinstance_118927, *[subscript_call_result_118931, tuple_118932], **kwargs_118933)
    
    # Applying the 'not' unary operator (line 1238)
    result_not__118935 = python_operator(stypy.reporting.localization.Localization(__file__, 1238, 19), 'not', isinstance_call_result_118934)
    
    # Applying the binary operator 'and' (line 1238)
    result_and_keyword_118936 = python_operator(stypy.reporting.localization.Localization(__file__, 1238, 11), 'and', seq_118926, result_not__118935)
    
    # Testing the type of an if condition (line 1238)
    if_condition_118937 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1238, 8), result_and_keyword_118936)
    # Assigning a type to the variable 'if_condition_118937' (line 1238)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1238, 8), 'if_condition_118937', if_condition_118937)
    # SSA begins for if statement (line 1238)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1242):
    
    # Assigning a Call to a Name (line 1242):
    
    # Call to dtype(...): (line 1242)
    # Processing the call arguments (line 1242)
    
    # Obtaining the type of the subscript
    
    # Obtaining the type of the subscript
    int_118940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1242, 50), 'int')
    # Getting the type of 'dtype' (line 1242)
    dtype_118941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 38), 'dtype', False)
    # Obtaining the member 'names' of a type (line 1242)
    names_118942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1242, 38), dtype_118941, 'names')
    # Obtaining the member '__getitem__' of a type (line 1242)
    getitem___118943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1242, 38), names_118942, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1242)
    subscript_call_result_118944 = invoke(stypy.reporting.localization.Localization(__file__, 1242, 38), getitem___118943, int_118940)
    
    # Getting the type of 'dtype' (line 1242)
    dtype_118945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 32), 'dtype', False)
    # Obtaining the member '__getitem__' of a type (line 1242)
    getitem___118946 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1242, 32), dtype_118945, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1242)
    subscript_call_result_118947 = invoke(stypy.reporting.localization.Localization(__file__, 1242, 32), getitem___118946, subscript_call_result_118944)
    
    # Processing the call keyword arguments (line 1242)
    kwargs_118948 = {}
    # Getting the type of 'np' (line 1242)
    np_118938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 23), 'np', False)
    # Obtaining the member 'dtype' of a type (line 1242)
    dtype_118939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1242, 23), np_118938, 'dtype')
    # Calling dtype(args, kwargs) (line 1242)
    dtype_call_result_118949 = invoke(stypy.reporting.localization.Localization(__file__, 1242, 23), dtype_118939, *[subscript_call_result_118947], **kwargs_118948)
    
    # Assigning a type to the variable 'newdtype' (line 1242)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1242, 12), 'newdtype', dtype_call_result_118949)
    
    # Assigning a Call to a Name (line 1243):
    
    # Assigning a Call to a Name (line 1243):
    
    # Call to array(...): (line 1243)
    # Processing the call arguments (line 1243)
    # Getting the type of 'seq' (line 1243)
    seq_118952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 30), 'seq', False)
    # Processing the call keyword arguments (line 1243)
    # Getting the type of 'newdtype' (line 1243)
    newdtype_118953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 41), 'newdtype', False)
    keyword_118954 = newdtype_118953
    kwargs_118955 = {'dtype': keyword_118954}
    # Getting the type of 'np' (line 1243)
    np_118950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 21), 'np', False)
    # Obtaining the member 'array' of a type (line 1243)
    array_118951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1243, 21), np_118950, 'array')
    # Calling array(args, kwargs) (line 1243)
    array_call_result_118956 = invoke(stypy.reporting.localization.Localization(__file__, 1243, 21), array_118951, *[seq_118952], **kwargs_118955)
    
    # Assigning a type to the variable 'output' (line 1243)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1243, 12), 'output', array_call_result_118956)
    
    # Assigning a Name to a Attribute (line 1244):
    
    # Assigning a Name to a Attribute (line 1244):
    # Getting the type of 'dtype' (line 1244)
    dtype_118957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1244, 27), 'dtype')
    # Getting the type of 'output' (line 1244)
    output_118958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1244, 12), 'output')
    # Setting the type of the member 'dtype' of a type (line 1244)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1244, 12), output_118958, 'dtype', dtype_118957)
    # SSA branch for the else part of an if statement (line 1238)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1246):
    
    # Assigning a Call to a Name (line 1246):
    
    # Call to array(...): (line 1246)
    # Processing the call arguments (line 1246)
    # Getting the type of 'seq' (line 1246)
    seq_118961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1246, 30), 'seq', False)
    # Processing the call keyword arguments (line 1246)
    # Getting the type of 'dtype' (line 1246)
    dtype_118962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1246, 41), 'dtype', False)
    keyword_118963 = dtype_118962
    kwargs_118964 = {'dtype': keyword_118963}
    # Getting the type of 'np' (line 1246)
    np_118959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1246, 21), 'np', False)
    # Obtaining the member 'array' of a type (line 1246)
    array_118960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1246, 21), np_118959, 'array')
    # Calling array(args, kwargs) (line 1246)
    array_call_result_118965 = invoke(stypy.reporting.localization.Localization(__file__, 1246, 21), array_118960, *[seq_118961], **kwargs_118964)
    
    # Assigning a type to the variable 'output' (line 1246)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1246, 12), 'output', array_call_result_118965)
    # SSA join for if statement (line 1238)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'output' (line 1248)
    output_118966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 15), 'output')
    # Assigning a type to the variable 'stypy_return_type' (line 1248)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1248, 8), 'stypy_return_type', output_118966)
    
    # finally branch of the try-finally block (line 1231)
    
    # Getting the type of 'own_fh' (line 1250)
    own_fh_118967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1250, 11), 'own_fh')
    # Testing the type of an if condition (line 1250)
    if_condition_118968 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1250, 8), own_fh_118967)
    # Assigning a type to the variable 'if_condition_118968' (line 1250)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1250, 8), 'if_condition_118968', if_condition_118968)
    # SSA begins for if statement (line 1250)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to close(...): (line 1251)
    # Processing the call keyword arguments (line 1251)
    kwargs_118971 = {}
    # Getting the type of 'file' (line 1251)
    file_118969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1251, 12), 'file', False)
    # Obtaining the member 'close' of a type (line 1251)
    close_118970 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1251, 12), file_118969, 'close')
    # Calling close(args, kwargs) (line 1251)
    close_call_result_118972 = invoke(stypy.reporting.localization.Localization(__file__, 1251, 12), close_118970, *[], **kwargs_118971)
    
    # SSA join for if statement (line 1250)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # ################# End of 'fromregex(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'fromregex' in the type store
    # Getting the type of 'stypy_return_type' (line 1171)
    stypy_return_type_118973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1171, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_118973)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'fromregex'
    return stypy_return_type_118973

# Assigning a type to the variable 'fromregex' (line 1171)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1171, 0), 'fromregex', fromregex)

@norecursion
def genfromtxt(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'float' (line 1259)
    float_118974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1259, 28), 'float')
    str_118975 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1259, 44), 'str', '#')
    # Getting the type of 'None' (line 1259)
    None_118976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1259, 59), 'None')
    int_118977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1260, 27), 'int')
    int_118978 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1260, 42), 'int')
    # Getting the type of 'None' (line 1260)
    None_118979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 56), 'None')
    # Getting the type of 'None' (line 1261)
    None_118980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1261, 30), 'None')
    # Getting the type of 'None' (line 1261)
    None_118981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1261, 51), 'None')
    # Getting the type of 'None' (line 1261)
    None_118982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1261, 65), 'None')
    # Getting the type of 'None' (line 1262)
    None_118983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1262, 21), 'None')
    # Getting the type of 'None' (line 1262)
    None_118984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1262, 39), 'None')
    # Getting the type of 'None' (line 1262)
    None_118985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1262, 57), 'None')
    str_118986 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1263, 29), 'str', '_')
    # Getting the type of 'False' (line 1263)
    False_118987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1263, 44), 'False')
    # Getting the type of 'True' (line 1263)
    True_118988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1263, 66), 'True')
    str_118989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1264, 26), 'str', 'f%i')
    # Getting the type of 'None' (line 1264)
    None_118990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1264, 40), 'None')
    # Getting the type of 'False' (line 1264)
    False_118991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1264, 54), 'False')
    # Getting the type of 'True' (line 1264)
    True_118992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1264, 67), 'True')
    # Getting the type of 'True' (line 1265)
    True_118993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1265, 29), 'True')
    # Getting the type of 'None' (line 1265)
    None_118994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1265, 44), 'None')
    defaults = [float_118974, str_118975, None_118976, int_118977, int_118978, None_118979, None_118980, None_118981, None_118982, None_118983, None_118984, None_118985, str_118986, False_118987, True_118988, str_118989, None_118990, False_118991, True_118992, True_118993, None_118994]
    # Create a new context for function 'genfromtxt'
    module_type_store = module_type_store.open_function_context('genfromtxt', 1259, 0, False)
    
    # Passed parameters checking function
    genfromtxt.stypy_localization = localization
    genfromtxt.stypy_type_of_self = None
    genfromtxt.stypy_type_store = module_type_store
    genfromtxt.stypy_function_name = 'genfromtxt'
    genfromtxt.stypy_param_names_list = ['fname', 'dtype', 'comments', 'delimiter', 'skip_header', 'skip_footer', 'converters', 'missing_values', 'filling_values', 'usecols', 'names', 'excludelist', 'deletechars', 'replace_space', 'autostrip', 'case_sensitive', 'defaultfmt', 'unpack', 'usemask', 'loose', 'invalid_raise', 'max_rows']
    genfromtxt.stypy_varargs_param_name = None
    genfromtxt.stypy_kwargs_param_name = None
    genfromtxt.stypy_call_defaults = defaults
    genfromtxt.stypy_call_varargs = varargs
    genfromtxt.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'genfromtxt', ['fname', 'dtype', 'comments', 'delimiter', 'skip_header', 'skip_footer', 'converters', 'missing_values', 'filling_values', 'usecols', 'names', 'excludelist', 'deletechars', 'replace_space', 'autostrip', 'case_sensitive', 'defaultfmt', 'unpack', 'usemask', 'loose', 'invalid_raise', 'max_rows'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'genfromtxt', localization, ['fname', 'dtype', 'comments', 'delimiter', 'skip_header', 'skip_footer', 'converters', 'missing_values', 'filling_values', 'usecols', 'names', 'excludelist', 'deletechars', 'replace_space', 'autostrip', 'case_sensitive', 'defaultfmt', 'unpack', 'usemask', 'loose', 'invalid_raise', 'max_rows'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'genfromtxt(...)' code ##################

    str_118995 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1419, (-1)), 'str', '\n    Load data from a text file, with missing values handled as specified.\n\n    Each line past the first `skip_header` lines is split at the `delimiter`\n    character, and characters following the `comments` character are discarded.\n\n    Parameters\n    ----------\n    fname : file, str, list of str, generator\n        File, filename, list, or generator to read.  If the filename\n        extension is `.gz` or `.bz2`, the file is first decompressed. Mote\n        that generators must return byte strings in Python 3k.  The strings\n        in a list or produced by a generator are treated as lines.\n    dtype : dtype, optional\n        Data type of the resulting array.\n        If None, the dtypes will be determined by the contents of each\n        column, individually.\n    comments : str, optional\n        The character used to indicate the start of a comment.\n        All the characters occurring on a line after a comment are discarded\n    delimiter : str, int, or sequence, optional\n        The string used to separate values.  By default, any consecutive\n        whitespaces act as delimiter.  An integer or sequence of integers\n        can also be provided as width(s) of each field.\n    skiprows : int, optional\n        `skiprows` was removed in numpy 1.10. Please use `skip_header` instead.\n    skip_header : int, optional\n        The number of lines to skip at the beginning of the file.\n    skip_footer : int, optional\n        The number of lines to skip at the end of the file.\n    converters : variable, optional\n        The set of functions that convert the data of a column to a value.\n        The converters can also be used to provide a default value\n        for missing data: ``converters = {3: lambda s: float(s or 0)}``.\n    missing : variable, optional\n        `missing` was removed in numpy 1.10. Please use `missing_values`\n        instead.\n    missing_values : variable, optional\n        The set of strings corresponding to missing data.\n    filling_values : variable, optional\n        The set of values to be used as default when the data are missing.\n    usecols : sequence, optional\n        Which columns to read, with 0 being the first.  For example,\n        ``usecols = (1, 4, 5)`` will extract the 2nd, 5th and 6th columns.\n    names : {None, True, str, sequence}, optional\n        If `names` is True, the field names are read from the first valid line\n        after the first `skip_header` lines.\n        If `names` is a sequence or a single-string of comma-separated names,\n        the names will be used to define the field names in a structured dtype.\n        If `names` is None, the names of the dtype fields will be used, if any.\n    excludelist : sequence, optional\n        A list of names to exclude. This list is appended to the default list\n        [\'return\',\'file\',\'print\']. Excluded names are appended an underscore:\n        for example, `file` would become `file_`.\n    deletechars : str, optional\n        A string combining invalid characters that must be deleted from the\n        names.\n    defaultfmt : str, optional\n        A format used to define default field names, such as "f%i" or "f_%02i".\n    autostrip : bool, optional\n        Whether to automatically strip white spaces from the variables.\n    replace_space : char, optional\n        Character(s) used in replacement of white spaces in the variables\n        names. By default, use a \'_\'.\n    case_sensitive : {True, False, \'upper\', \'lower\'}, optional\n        If True, field names are case sensitive.\n        If False or \'upper\', field names are converted to upper case.\n        If \'lower\', field names are converted to lower case.\n    unpack : bool, optional\n        If True, the returned array is transposed, so that arguments may be\n        unpacked using ``x, y, z = loadtxt(...)``\n    usemask : bool, optional\n        If True, return a masked array.\n        If False, return a regular array.\n    loose : bool, optional\n        If True, do not raise errors for invalid values.\n    invalid_raise : bool, optional\n        If True, an exception is raised if an inconsistency is detected in the\n        number of columns.\n        If False, a warning is emitted and the offending lines are skipped.\n    max_rows : int,  optional\n        The maximum number of rows to read. Must not be used with skip_footer\n        at the same time.  If given, the value must be at least 1. Default is\n        to read the entire file.\n\n        .. versionadded:: 1.10.0\n\n    Returns\n    -------\n    out : ndarray\n        Data read from the text file. If `usemask` is True, this is a\n        masked array.\n\n    See Also\n    --------\n    numpy.loadtxt : equivalent function when no data is missing.\n\n    Notes\n    -----\n    * When spaces are used as delimiters, or when no delimiter has been given\n      as input, there should not be any missing data between two fields.\n    * When the variables are named (either by a flexible dtype or with `names`,\n      there must not be any header in the file (else a ValueError\n      exception is raised).\n    * Individual values are not stripped of spaces by default.\n      When using a custom converter, make sure the function does remove spaces.\n\n    References\n    ----------\n    .. [1] Numpy User Guide, section `I/O with Numpy\n           <http://docs.scipy.org/doc/numpy/user/basics.io.genfromtxt.html>`_.\n\n    Examples\n    ---------\n    >>> from io import StringIO\n    >>> import numpy as np\n\n    Comma delimited file with mixed dtype\n\n    >>> s = StringIO("1,1.3,abcde")\n    >>> data = np.genfromtxt(s, dtype=[(\'myint\',\'i8\'),(\'myfloat\',\'f8\'),\n    ... (\'mystring\',\'S5\')], delimiter=",")\n    >>> data\n    array((1, 1.3, \'abcde\'),\n          dtype=[(\'myint\', \'<i8\'), (\'myfloat\', \'<f8\'), (\'mystring\', \'|S5\')])\n\n    Using dtype = None\n\n    >>> s.seek(0) # needed for StringIO example only\n    >>> data = np.genfromtxt(s, dtype=None,\n    ... names = [\'myint\',\'myfloat\',\'mystring\'], delimiter=",")\n    >>> data\n    array((1, 1.3, \'abcde\'),\n          dtype=[(\'myint\', \'<i8\'), (\'myfloat\', \'<f8\'), (\'mystring\', \'|S5\')])\n\n    Specifying dtype and names\n\n    >>> s.seek(0)\n    >>> data = np.genfromtxt(s, dtype="i8,f8,S5",\n    ... names=[\'myint\',\'myfloat\',\'mystring\'], delimiter=",")\n    >>> data\n    array((1, 1.3, \'abcde\'),\n          dtype=[(\'myint\', \'<i8\'), (\'myfloat\', \'<f8\'), (\'mystring\', \'|S5\')])\n\n    An example with fixed-width columns\n\n    >>> s = StringIO("11.3abcde")\n    >>> data = np.genfromtxt(s, dtype=None, names=[\'intvar\',\'fltvar\',\'strvar\'],\n    ...     delimiter=[1,3,5])\n    >>> data\n    array((1, 1.3, \'abcde\'),\n          dtype=[(\'intvar\', \'<i8\'), (\'fltvar\', \'<f8\'), (\'strvar\', \'|S5\')])\n\n    ')
    
    # Type idiom detected: calculating its left and rigth part (line 1420)
    # Getting the type of 'max_rows' (line 1420)
    max_rows_118996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1420, 4), 'max_rows')
    # Getting the type of 'None' (line 1420)
    None_118997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1420, 23), 'None')
    
    (may_be_118998, more_types_in_union_118999) = may_not_be_none(max_rows_118996, None_118997)

    if may_be_118998:

        if more_types_in_union_118999:
            # Runtime conditional SSA (line 1420)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Getting the type of 'skip_footer' (line 1421)
        skip_footer_119000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1421, 11), 'skip_footer')
        # Testing the type of an if condition (line 1421)
        if_condition_119001 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1421, 8), skip_footer_119000)
        # Assigning a type to the variable 'if_condition_119001' (line 1421)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1421, 8), 'if_condition_119001', if_condition_119001)
        # SSA begins for if statement (line 1421)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1422)
        # Processing the call arguments (line 1422)
        str_119003 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1423, 20), 'str', "The keywords 'skip_footer' and 'max_rows' can not be specified at the same time.")
        # Processing the call keyword arguments (line 1422)
        kwargs_119004 = {}
        # Getting the type of 'ValueError' (line 1422)
        ValueError_119002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1422, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1422)
        ValueError_call_result_119005 = invoke(stypy.reporting.localization.Localization(__file__, 1422, 18), ValueError_119002, *[str_119003], **kwargs_119004)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1422, 12), ValueError_call_result_119005, 'raise parameter', BaseException)
        # SSA join for if statement (line 1421)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'max_rows' (line 1425)
        max_rows_119006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1425, 11), 'max_rows')
        int_119007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1425, 22), 'int')
        # Applying the binary operator '<' (line 1425)
        result_lt_119008 = python_operator(stypy.reporting.localization.Localization(__file__, 1425, 11), '<', max_rows_119006, int_119007)
        
        # Testing the type of an if condition (line 1425)
        if_condition_119009 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1425, 8), result_lt_119008)
        # Assigning a type to the variable 'if_condition_119009' (line 1425)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1425, 8), 'if_condition_119009', if_condition_119009)
        # SSA begins for if statement (line 1425)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1426)
        # Processing the call arguments (line 1426)
        str_119011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1426, 29), 'str', "'max_rows' must be at least 1.")
        # Processing the call keyword arguments (line 1426)
        kwargs_119012 = {}
        # Getting the type of 'ValueError' (line 1426)
        ValueError_119010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1426, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1426)
        ValueError_call_result_119013 = invoke(stypy.reporting.localization.Localization(__file__, 1426, 18), ValueError_119010, *[str_119011], **kwargs_119012)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1426, 12), ValueError_call_result_119013, 'raise parameter', BaseException)
        # SSA join for if statement (line 1425)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_118999:
            # SSA join for if statement (line 1420)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 1429)
    # Getting the type of 'comments' (line 1429)
    comments_119014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 4), 'comments')
    # Getting the type of 'None' (line 1429)
    None_119015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 23), 'None')
    
    (may_be_119016, more_types_in_union_119017) = may_not_be_none(comments_119014, None_119015)

    if may_be_119016:

        if more_types_in_union_119017:
            # Runtime conditional SSA (line 1429)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 1430):
        
        # Assigning a Call to a Name (line 1430):
        
        # Call to asbytes(...): (line 1430)
        # Processing the call arguments (line 1430)
        # Getting the type of 'comments' (line 1430)
        comments_119019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 27), 'comments', False)
        # Processing the call keyword arguments (line 1430)
        kwargs_119020 = {}
        # Getting the type of 'asbytes' (line 1430)
        asbytes_119018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 19), 'asbytes', False)
        # Calling asbytes(args, kwargs) (line 1430)
        asbytes_call_result_119021 = invoke(stypy.reporting.localization.Localization(__file__, 1430, 19), asbytes_119018, *[comments_119019], **kwargs_119020)
        
        # Assigning a type to the variable 'comments' (line 1430)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1430, 8), 'comments', asbytes_call_result_119021)

        if more_types_in_union_119017:
            # SSA join for if statement (line 1429)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 1431)
    # Getting the type of 'unicode' (line 1431)
    unicode_119022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 29), 'unicode')
    # Getting the type of 'delimiter' (line 1431)
    delimiter_119023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 18), 'delimiter')
    
    (may_be_119024, more_types_in_union_119025) = may_be_subtype(unicode_119022, delimiter_119023)

    if may_be_119024:

        if more_types_in_union_119025:
            # Runtime conditional SSA (line 1431)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'delimiter' (line 1431)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1431, 4), 'delimiter', remove_not_subtype_from_union(delimiter_119023, unicode))
        
        # Assigning a Call to a Name (line 1432):
        
        # Assigning a Call to a Name (line 1432):
        
        # Call to asbytes(...): (line 1432)
        # Processing the call arguments (line 1432)
        # Getting the type of 'delimiter' (line 1432)
        delimiter_119027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1432, 28), 'delimiter', False)
        # Processing the call keyword arguments (line 1432)
        kwargs_119028 = {}
        # Getting the type of 'asbytes' (line 1432)
        asbytes_119026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1432, 20), 'asbytes', False)
        # Calling asbytes(args, kwargs) (line 1432)
        asbytes_call_result_119029 = invoke(stypy.reporting.localization.Localization(__file__, 1432, 20), asbytes_119026, *[delimiter_119027], **kwargs_119028)
        
        # Assigning a type to the variable 'delimiter' (line 1432)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1432, 8), 'delimiter', asbytes_call_result_119029)

        if more_types_in_union_119025:
            # SSA join for if statement (line 1431)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Call to isinstance(...): (line 1433)
    # Processing the call arguments (line 1433)
    # Getting the type of 'missing_values' (line 1433)
    missing_values_119031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1433, 18), 'missing_values', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1433)
    tuple_119032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1433, 35), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1433)
    # Adding element type (line 1433)
    # Getting the type of 'unicode' (line 1433)
    unicode_119033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1433, 35), 'unicode', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1433, 35), tuple_119032, unicode_119033)
    # Adding element type (line 1433)
    # Getting the type of 'list' (line 1433)
    list_119034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1433, 44), 'list', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1433, 35), tuple_119032, list_119034)
    # Adding element type (line 1433)
    # Getting the type of 'tuple' (line 1433)
    tuple_119035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1433, 50), 'tuple', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1433, 35), tuple_119032, tuple_119035)
    
    # Processing the call keyword arguments (line 1433)
    kwargs_119036 = {}
    # Getting the type of 'isinstance' (line 1433)
    isinstance_119030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1433, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1433)
    isinstance_call_result_119037 = invoke(stypy.reporting.localization.Localization(__file__, 1433, 7), isinstance_119030, *[missing_values_119031, tuple_119032], **kwargs_119036)
    
    # Testing the type of an if condition (line 1433)
    if_condition_119038 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1433, 4), isinstance_call_result_119037)
    # Assigning a type to the variable 'if_condition_119038' (line 1433)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1433, 4), 'if_condition_119038', if_condition_119038)
    # SSA begins for if statement (line 1433)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1434):
    
    # Assigning a Call to a Name (line 1434):
    
    # Call to asbytes_nested(...): (line 1434)
    # Processing the call arguments (line 1434)
    # Getting the type of 'missing_values' (line 1434)
    missing_values_119040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1434, 40), 'missing_values', False)
    # Processing the call keyword arguments (line 1434)
    kwargs_119041 = {}
    # Getting the type of 'asbytes_nested' (line 1434)
    asbytes_nested_119039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1434, 25), 'asbytes_nested', False)
    # Calling asbytes_nested(args, kwargs) (line 1434)
    asbytes_nested_call_result_119042 = invoke(stypy.reporting.localization.Localization(__file__, 1434, 25), asbytes_nested_119039, *[missing_values_119040], **kwargs_119041)
    
    # Assigning a type to the variable 'missing_values' (line 1434)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1434, 8), 'missing_values', asbytes_nested_call_result_119042)
    # SSA join for if statement (line 1433)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'usemask' (line 1437)
    usemask_119043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 7), 'usemask')
    # Testing the type of an if condition (line 1437)
    if_condition_119044 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1437, 4), usemask_119043)
    # Assigning a type to the variable 'if_condition_119044' (line 1437)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1437, 4), 'if_condition_119044', if_condition_119044)
    # SSA begins for if statement (line 1437)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1438, 8))
    
    # 'from numpy.ma import MaskedArray, make_mask_descr' statement (line 1438)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/lib/')
    import_119045 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1438, 8), 'numpy.ma')

    if (type(import_119045) is not StypyTypeError):

        if (import_119045 != 'pyd_module'):
            __import__(import_119045)
            sys_modules_119046 = sys.modules[import_119045]
            import_from_module(stypy.reporting.localization.Localization(__file__, 1438, 8), 'numpy.ma', sys_modules_119046.module_type_store, module_type_store, ['MaskedArray', 'make_mask_descr'])
            nest_module(stypy.reporting.localization.Localization(__file__, 1438, 8), __file__, sys_modules_119046, sys_modules_119046.module_type_store, module_type_store)
        else:
            from numpy.ma import MaskedArray, make_mask_descr

            import_from_module(stypy.reporting.localization.Localization(__file__, 1438, 8), 'numpy.ma', None, module_type_store, ['MaskedArray', 'make_mask_descr'], [MaskedArray, make_mask_descr])

    else:
        # Assigning a type to the variable 'numpy.ma' (line 1438)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1438, 8), 'numpy.ma', import_119045)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/lib/')
    
    # SSA join for if statement (line 1437)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BoolOp to a Name (line 1440):
    
    # Assigning a BoolOp to a Name (line 1440):
    
    # Evaluating a boolean operation
    # Getting the type of 'converters' (line 1440)
    converters_119047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1440, 22), 'converters')
    
    # Obtaining an instance of the builtin type 'dict' (line 1440)
    dict_119048 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1440, 36), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 1440)
    
    # Applying the binary operator 'or' (line 1440)
    result_or_keyword_119049 = python_operator(stypy.reporting.localization.Localization(__file__, 1440, 22), 'or', converters_119047, dict_119048)
    
    # Assigning a type to the variable 'user_converters' (line 1440)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1440, 4), 'user_converters', result_or_keyword_119049)
    
    # Type idiom detected: calculating its left and rigth part (line 1441)
    # Getting the type of 'dict' (line 1441)
    dict_119050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1441, 39), 'dict')
    # Getting the type of 'user_converters' (line 1441)
    user_converters_119051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1441, 22), 'user_converters')
    
    (may_be_119052, more_types_in_union_119053) = may_not_be_subtype(dict_119050, user_converters_119051)

    if may_be_119052:

        if more_types_in_union_119053:
            # Runtime conditional SSA (line 1441)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'user_converters' (line 1441)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1441, 4), 'user_converters', remove_subtype_from_union(user_converters_119051, dict))
        
        # Call to TypeError(...): (line 1442)
        # Processing the call arguments (line 1442)
        str_119055 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1443, 12), 'str', "The input argument 'converter' should be a valid dictionary (got '%s' instead)")
        
        # Call to type(...): (line 1444)
        # Processing the call arguments (line 1444)
        # Getting the type of 'user_converters' (line 1444)
        user_converters_119057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 40), 'user_converters', False)
        # Processing the call keyword arguments (line 1444)
        kwargs_119058 = {}
        # Getting the type of 'type' (line 1444)
        type_119056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 35), 'type', False)
        # Calling type(args, kwargs) (line 1444)
        type_call_result_119059 = invoke(stypy.reporting.localization.Localization(__file__, 1444, 35), type_119056, *[user_converters_119057], **kwargs_119058)
        
        # Applying the binary operator '%' (line 1443)
        result_mod_119060 = python_operator(stypy.reporting.localization.Localization(__file__, 1443, 12), '%', str_119055, type_call_result_119059)
        
        # Processing the call keyword arguments (line 1442)
        kwargs_119061 = {}
        # Getting the type of 'TypeError' (line 1442)
        TypeError_119054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 14), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 1442)
        TypeError_call_result_119062 = invoke(stypy.reporting.localization.Localization(__file__, 1442, 14), TypeError_119054, *[result_mod_119060], **kwargs_119061)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1442, 8), TypeError_call_result_119062, 'raise parameter', BaseException)

        if more_types_in_union_119053:
            # SSA join for if statement (line 1441)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Name to a Name (line 1447):
    
    # Assigning a Name to a Name (line 1447):
    # Getting the type of 'False' (line 1447)
    False_119063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 14), 'False')
    # Assigning a type to the variable 'own_fhd' (line 1447)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1447, 4), 'own_fhd', False_119063)
    
    
    # SSA begins for try-except statement (line 1448)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Type idiom detected: calculating its left and rigth part (line 1449)
    # Getting the type of 'basestring' (line 1449)
    basestring_119064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 29), 'basestring')
    # Getting the type of 'fname' (line 1449)
    fname_119065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 22), 'fname')
    
    (may_be_119066, more_types_in_union_119067) = may_be_subtype(basestring_119064, fname_119065)

    if may_be_119066:

        if more_types_in_union_119067:
            # Runtime conditional SSA (line 1449)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'fname' (line 1449)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1449, 8), 'fname', remove_not_subtype_from_union(fname_119065, basestring))
        
        
        
        # Obtaining the type of the subscript
        int_119068 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1450, 32), 'int')
        # Getting the type of 'sys' (line 1450)
        sys_119069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 15), 'sys')
        # Obtaining the member 'version_info' of a type (line 1450)
        version_info_119070 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1450, 15), sys_119069, 'version_info')
        # Obtaining the member '__getitem__' of a type (line 1450)
        getitem___119071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1450, 15), version_info_119070, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1450)
        subscript_call_result_119072 = invoke(stypy.reporting.localization.Localization(__file__, 1450, 15), getitem___119071, int_119068)
        
        int_119073 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1450, 38), 'int')
        # Applying the binary operator '==' (line 1450)
        result_eq_119074 = python_operator(stypy.reporting.localization.Localization(__file__, 1450, 15), '==', subscript_call_result_119072, int_119073)
        
        # Testing the type of an if condition (line 1450)
        if_condition_119075 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1450, 12), result_eq_119074)
        # Assigning a type to the variable 'if_condition_119075' (line 1450)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1450, 12), 'if_condition_119075', if_condition_119075)
        # SSA begins for if statement (line 1450)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1451):
        
        # Assigning a Call to a Name (line 1451):
        
        # Call to iter(...): (line 1451)
        # Processing the call arguments (line 1451)
        
        # Call to open(...): (line 1451)
        # Processing the call arguments (line 1451)
        # Getting the type of 'fname' (line 1451)
        fname_119081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 51), 'fname', False)
        str_119082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1451, 58), 'str', 'rbU')
        # Processing the call keyword arguments (line 1451)
        kwargs_119083 = {}
        # Getting the type of 'np' (line 1451)
        np_119077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 27), 'np', False)
        # Obtaining the member 'lib' of a type (line 1451)
        lib_119078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1451, 27), np_119077, 'lib')
        # Obtaining the member '_datasource' of a type (line 1451)
        _datasource_119079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1451, 27), lib_119078, '_datasource')
        # Obtaining the member 'open' of a type (line 1451)
        open_119080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1451, 27), _datasource_119079, 'open')
        # Calling open(args, kwargs) (line 1451)
        open_call_result_119084 = invoke(stypy.reporting.localization.Localization(__file__, 1451, 27), open_119080, *[fname_119081, str_119082], **kwargs_119083)
        
        # Processing the call keyword arguments (line 1451)
        kwargs_119085 = {}
        # Getting the type of 'iter' (line 1451)
        iter_119076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 22), 'iter', False)
        # Calling iter(args, kwargs) (line 1451)
        iter_call_result_119086 = invoke(stypy.reporting.localization.Localization(__file__, 1451, 22), iter_119076, *[open_call_result_119084], **kwargs_119085)
        
        # Assigning a type to the variable 'fhd' (line 1451)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1451, 16), 'fhd', iter_call_result_119086)
        # SSA branch for the else part of an if statement (line 1450)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 1453):
        
        # Assigning a Call to a Name (line 1453):
        
        # Call to iter(...): (line 1453)
        # Processing the call arguments (line 1453)
        
        # Call to open(...): (line 1453)
        # Processing the call arguments (line 1453)
        # Getting the type of 'fname' (line 1453)
        fname_119092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1453, 51), 'fname', False)
        str_119093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1453, 58), 'str', 'rb')
        # Processing the call keyword arguments (line 1453)
        kwargs_119094 = {}
        # Getting the type of 'np' (line 1453)
        np_119088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1453, 27), 'np', False)
        # Obtaining the member 'lib' of a type (line 1453)
        lib_119089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1453, 27), np_119088, 'lib')
        # Obtaining the member '_datasource' of a type (line 1453)
        _datasource_119090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1453, 27), lib_119089, '_datasource')
        # Obtaining the member 'open' of a type (line 1453)
        open_119091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1453, 27), _datasource_119090, 'open')
        # Calling open(args, kwargs) (line 1453)
        open_call_result_119095 = invoke(stypy.reporting.localization.Localization(__file__, 1453, 27), open_119091, *[fname_119092, str_119093], **kwargs_119094)
        
        # Processing the call keyword arguments (line 1453)
        kwargs_119096 = {}
        # Getting the type of 'iter' (line 1453)
        iter_119087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1453, 22), 'iter', False)
        # Calling iter(args, kwargs) (line 1453)
        iter_call_result_119097 = invoke(stypy.reporting.localization.Localization(__file__, 1453, 22), iter_119087, *[open_call_result_119095], **kwargs_119096)
        
        # Assigning a type to the variable 'fhd' (line 1453)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1453, 16), 'fhd', iter_call_result_119097)
        # SSA join for if statement (line 1450)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 1454):
        
        # Assigning a Name to a Name (line 1454):
        # Getting the type of 'True' (line 1454)
        True_119098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1454, 22), 'True')
        # Assigning a type to the variable 'own_fhd' (line 1454)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1454, 12), 'own_fhd', True_119098)

        if more_types_in_union_119067:
            # Runtime conditional SSA for else branch (line 1449)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_119066) or more_types_in_union_119067):
        # Assigning a type to the variable 'fname' (line 1449)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1449, 8), 'fname', remove_subtype_from_union(fname_119065, basestring))
        
        # Assigning a Call to a Name (line 1456):
        
        # Assigning a Call to a Name (line 1456):
        
        # Call to iter(...): (line 1456)
        # Processing the call arguments (line 1456)
        # Getting the type of 'fname' (line 1456)
        fname_119100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 23), 'fname', False)
        # Processing the call keyword arguments (line 1456)
        kwargs_119101 = {}
        # Getting the type of 'iter' (line 1456)
        iter_119099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 18), 'iter', False)
        # Calling iter(args, kwargs) (line 1456)
        iter_call_result_119102 = invoke(stypy.reporting.localization.Localization(__file__, 1456, 18), iter_119099, *[fname_119100], **kwargs_119101)
        
        # Assigning a type to the variable 'fhd' (line 1456)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1456, 12), 'fhd', iter_call_result_119102)

        if (may_be_119066 and more_types_in_union_119067):
            # SSA join for if statement (line 1449)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA branch for the except part of a try statement (line 1448)
    # SSA branch for the except 'TypeError' branch of a try statement (line 1448)
    module_type_store.open_ssa_branch('except')
    
    # Call to TypeError(...): (line 1458)
    # Processing the call arguments (line 1458)
    str_119104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1459, 12), 'str', 'fname must be a string, filehandle, list of strings, or generator. Got %s instead.')
    
    # Call to type(...): (line 1460)
    # Processing the call arguments (line 1460)
    # Getting the type of 'fname' (line 1460)
    fname_119106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 51), 'fname', False)
    # Processing the call keyword arguments (line 1460)
    kwargs_119107 = {}
    # Getting the type of 'type' (line 1460)
    type_119105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 46), 'type', False)
    # Calling type(args, kwargs) (line 1460)
    type_call_result_119108 = invoke(stypy.reporting.localization.Localization(__file__, 1460, 46), type_119105, *[fname_119106], **kwargs_119107)
    
    # Applying the binary operator '%' (line 1459)
    result_mod_119109 = python_operator(stypy.reporting.localization.Localization(__file__, 1459, 12), '%', str_119104, type_call_result_119108)
    
    # Processing the call keyword arguments (line 1458)
    kwargs_119110 = {}
    # Getting the type of 'TypeError' (line 1458)
    TypeError_119103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 14), 'TypeError', False)
    # Calling TypeError(args, kwargs) (line 1458)
    TypeError_call_result_119111 = invoke(stypy.reporting.localization.Localization(__file__, 1458, 14), TypeError_119103, *[result_mod_119109], **kwargs_119110)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1458, 8), TypeError_call_result_119111, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 1448)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Attribute to a Name (line 1462):
    
    # Assigning a Attribute to a Name (line 1462):
    
    # Call to LineSplitter(...): (line 1462)
    # Processing the call keyword arguments (line 1462)
    # Getting the type of 'delimiter' (line 1462)
    delimiter_119113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1462, 40), 'delimiter', False)
    keyword_119114 = delimiter_119113
    # Getting the type of 'comments' (line 1462)
    comments_119115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1462, 60), 'comments', False)
    keyword_119116 = comments_119115
    # Getting the type of 'autostrip' (line 1463)
    autostrip_119117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1463, 40), 'autostrip', False)
    keyword_119118 = autostrip_119117
    kwargs_119119 = {'delimiter': keyword_119114, 'autostrip': keyword_119118, 'comments': keyword_119116}
    # Getting the type of 'LineSplitter' (line 1462)
    LineSplitter_119112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1462, 17), 'LineSplitter', False)
    # Calling LineSplitter(args, kwargs) (line 1462)
    LineSplitter_call_result_119120 = invoke(stypy.reporting.localization.Localization(__file__, 1462, 17), LineSplitter_119112, *[], **kwargs_119119)
    
    # Obtaining the member '_handyman' of a type (line 1462)
    _handyman_119121 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1462, 17), LineSplitter_call_result_119120, '_handyman')
    # Assigning a type to the variable 'split_line' (line 1462)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1462, 4), 'split_line', _handyman_119121)
    
    # Assigning a Call to a Name (line 1464):
    
    # Assigning a Call to a Name (line 1464):
    
    # Call to NameValidator(...): (line 1464)
    # Processing the call keyword arguments (line 1464)
    # Getting the type of 'excludelist' (line 1464)
    excludelist_119123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1464, 47), 'excludelist', False)
    keyword_119124 = excludelist_119123
    # Getting the type of 'deletechars' (line 1465)
    deletechars_119125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1465, 47), 'deletechars', False)
    keyword_119126 = deletechars_119125
    # Getting the type of 'case_sensitive' (line 1466)
    case_sensitive_119127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1466, 50), 'case_sensitive', False)
    keyword_119128 = case_sensitive_119127
    # Getting the type of 'replace_space' (line 1467)
    replace_space_119129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1467, 49), 'replace_space', False)
    keyword_119130 = replace_space_119129
    kwargs_119131 = {'excludelist': keyword_119124, 'replace_space': keyword_119130, 'deletechars': keyword_119126, 'case_sensitive': keyword_119128}
    # Getting the type of 'NameValidator' (line 1464)
    NameValidator_119122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1464, 21), 'NameValidator', False)
    # Calling NameValidator(args, kwargs) (line 1464)
    NameValidator_call_result_119132 = invoke(stypy.reporting.localization.Localization(__file__, 1464, 21), NameValidator_119122, *[], **kwargs_119131)
    
    # Assigning a type to the variable 'validate_names' (line 1464)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1464, 4), 'validate_names', NameValidator_call_result_119132)
    
    
    # Call to range(...): (line 1470)
    # Processing the call arguments (line 1470)
    # Getting the type of 'skip_header' (line 1470)
    skip_header_119134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 19), 'skip_header', False)
    # Processing the call keyword arguments (line 1470)
    kwargs_119135 = {}
    # Getting the type of 'range' (line 1470)
    range_119133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 13), 'range', False)
    # Calling range(args, kwargs) (line 1470)
    range_call_result_119136 = invoke(stypy.reporting.localization.Localization(__file__, 1470, 13), range_119133, *[skip_header_119134], **kwargs_119135)
    
    # Testing the type of a for loop iterable (line 1470)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1470, 4), range_call_result_119136)
    # Getting the type of the for loop variable (line 1470)
    for_loop_var_119137 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1470, 4), range_call_result_119136)
    # Assigning a type to the variable 'i' (line 1470)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1470, 4), 'i', for_loop_var_119137)
    # SSA begins for a for statement (line 1470)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to next(...): (line 1471)
    # Processing the call arguments (line 1471)
    # Getting the type of 'fhd' (line 1471)
    fhd_119139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 13), 'fhd', False)
    # Processing the call keyword arguments (line 1471)
    kwargs_119140 = {}
    # Getting the type of 'next' (line 1471)
    next_119138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 8), 'next', False)
    # Calling next(args, kwargs) (line 1471)
    next_call_result_119141 = invoke(stypy.reporting.localization.Localization(__file__, 1471, 8), next_119138, *[fhd_119139], **kwargs_119140)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Name (line 1474):
    
    # Assigning a Name to a Name (line 1474):
    # Getting the type of 'None' (line 1474)
    None_119142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1474, 19), 'None')
    # Assigning a type to the variable 'first_values' (line 1474)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1474, 4), 'first_values', None_119142)
    
    
    # SSA begins for try-except statement (line 1475)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    
    # Getting the type of 'first_values' (line 1476)
    first_values_119143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 18), 'first_values')
    # Applying the 'not' unary operator (line 1476)
    result_not__119144 = python_operator(stypy.reporting.localization.Localization(__file__, 1476, 14), 'not', first_values_119143)
    
    # Testing the type of an if condition (line 1476)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1476, 8), result_not__119144)
    # SSA begins for while statement (line 1476)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'while loop')
    
    # Assigning a Call to a Name (line 1477):
    
    # Assigning a Call to a Name (line 1477):
    
    # Call to next(...): (line 1477)
    # Processing the call arguments (line 1477)
    # Getting the type of 'fhd' (line 1477)
    fhd_119146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 30), 'fhd', False)
    # Processing the call keyword arguments (line 1477)
    kwargs_119147 = {}
    # Getting the type of 'next' (line 1477)
    next_119145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 25), 'next', False)
    # Calling next(args, kwargs) (line 1477)
    next_call_result_119148 = invoke(stypy.reporting.localization.Localization(__file__, 1477, 25), next_119145, *[fhd_119146], **kwargs_119147)
    
    # Assigning a type to the variable 'first_line' (line 1477)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1477, 12), 'first_line', next_call_result_119148)
    
    
    # Getting the type of 'names' (line 1478)
    names_119149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1478, 15), 'names')
    # Getting the type of 'True' (line 1478)
    True_119150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1478, 24), 'True')
    # Applying the binary operator 'is' (line 1478)
    result_is__119151 = python_operator(stypy.reporting.localization.Localization(__file__, 1478, 15), 'is', names_119149, True_119150)
    
    # Testing the type of an if condition (line 1478)
    if_condition_119152 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1478, 12), result_is__119151)
    # Assigning a type to the variable 'if_condition_119152' (line 1478)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1478, 12), 'if_condition_119152', if_condition_119152)
    # SSA begins for if statement (line 1478)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'comments' (line 1479)
    comments_119153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 19), 'comments')
    # Getting the type of 'first_line' (line 1479)
    first_line_119154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 31), 'first_line')
    # Applying the binary operator 'in' (line 1479)
    result_contains_119155 = python_operator(stypy.reporting.localization.Localization(__file__, 1479, 19), 'in', comments_119153, first_line_119154)
    
    # Testing the type of an if condition (line 1479)
    if_condition_119156 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1479, 16), result_contains_119155)
    # Assigning a type to the variable 'if_condition_119156' (line 1479)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1479, 16), 'if_condition_119156', if_condition_119156)
    # SSA begins for if statement (line 1479)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1480):
    
    # Assigning a Call to a Name (line 1480):
    
    # Call to join(...): (line 1481)
    # Processing the call arguments (line 1481)
    
    # Obtaining the type of the subscript
    int_119162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1481, 68), 'int')
    slice_119163 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1481, 41), int_119162, None, None)
    
    # Call to split(...): (line 1481)
    # Processing the call arguments (line 1481)
    # Getting the type of 'comments' (line 1481)
    comments_119166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 58), 'comments', False)
    # Processing the call keyword arguments (line 1481)
    kwargs_119167 = {}
    # Getting the type of 'first_line' (line 1481)
    first_line_119164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 41), 'first_line', False)
    # Obtaining the member 'split' of a type (line 1481)
    split_119165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1481, 41), first_line_119164, 'split')
    # Calling split(args, kwargs) (line 1481)
    split_call_result_119168 = invoke(stypy.reporting.localization.Localization(__file__, 1481, 41), split_119165, *[comments_119166], **kwargs_119167)
    
    # Obtaining the member '__getitem__' of a type (line 1481)
    getitem___119169 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1481, 41), split_call_result_119168, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1481)
    subscript_call_result_119170 = invoke(stypy.reporting.localization.Localization(__file__, 1481, 41), getitem___119169, slice_119163)
    
    # Processing the call keyword arguments (line 1481)
    kwargs_119171 = {}
    
    # Call to asbytes(...): (line 1481)
    # Processing the call arguments (line 1481)
    str_119158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1481, 32), 'str', '')
    # Processing the call keyword arguments (line 1481)
    kwargs_119159 = {}
    # Getting the type of 'asbytes' (line 1481)
    asbytes_119157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 24), 'asbytes', False)
    # Calling asbytes(args, kwargs) (line 1481)
    asbytes_call_result_119160 = invoke(stypy.reporting.localization.Localization(__file__, 1481, 24), asbytes_119157, *[str_119158], **kwargs_119159)
    
    # Obtaining the member 'join' of a type (line 1481)
    join_119161 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1481, 24), asbytes_call_result_119160, 'join')
    # Calling join(args, kwargs) (line 1481)
    join_call_result_119172 = invoke(stypy.reporting.localization.Localization(__file__, 1481, 24), join_119161, *[subscript_call_result_119170], **kwargs_119171)
    
    # Assigning a type to the variable 'first_line' (line 1480)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1480, 20), 'first_line', join_call_result_119172)
    # SSA join for if statement (line 1479)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1478)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1482):
    
    # Assigning a Call to a Name (line 1482):
    
    # Call to split_line(...): (line 1482)
    # Processing the call arguments (line 1482)
    # Getting the type of 'first_line' (line 1482)
    first_line_119174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1482, 38), 'first_line', False)
    # Processing the call keyword arguments (line 1482)
    kwargs_119175 = {}
    # Getting the type of 'split_line' (line 1482)
    split_line_119173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1482, 27), 'split_line', False)
    # Calling split_line(args, kwargs) (line 1482)
    split_line_call_result_119176 = invoke(stypy.reporting.localization.Localization(__file__, 1482, 27), split_line_119173, *[first_line_119174], **kwargs_119175)
    
    # Assigning a type to the variable 'first_values' (line 1482)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1482, 12), 'first_values', split_line_call_result_119176)
    # SSA join for while statement (line 1476)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the except part of a try statement (line 1475)
    # SSA branch for the except 'StopIteration' branch of a try statement (line 1475)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Call to a Name (line 1485):
    
    # Assigning a Call to a Name (line 1485):
    
    # Call to asbytes(...): (line 1485)
    # Processing the call arguments (line 1485)
    str_119178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1485, 29), 'str', '')
    # Processing the call keyword arguments (line 1485)
    kwargs_119179 = {}
    # Getting the type of 'asbytes' (line 1485)
    asbytes_119177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1485, 21), 'asbytes', False)
    # Calling asbytes(args, kwargs) (line 1485)
    asbytes_call_result_119180 = invoke(stypy.reporting.localization.Localization(__file__, 1485, 21), asbytes_119177, *[str_119178], **kwargs_119179)
    
    # Assigning a type to the variable 'first_line' (line 1485)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1485, 8), 'first_line', asbytes_call_result_119180)
    
    # Assigning a List to a Name (line 1486):
    
    # Assigning a List to a Name (line 1486):
    
    # Obtaining an instance of the builtin type 'list' (line 1486)
    list_119181 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1486, 23), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1486)
    
    # Assigning a type to the variable 'first_values' (line 1486)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1486, 8), 'first_values', list_119181)
    
    # Call to warn(...): (line 1487)
    # Processing the call arguments (line 1487)
    str_119184 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1487, 22), 'str', 'genfromtxt: Empty input file: "%s"')
    # Getting the type of 'fname' (line 1487)
    fname_119185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1487, 61), 'fname', False)
    # Applying the binary operator '%' (line 1487)
    result_mod_119186 = python_operator(stypy.reporting.localization.Localization(__file__, 1487, 22), '%', str_119184, fname_119185)
    
    # Processing the call keyword arguments (line 1487)
    kwargs_119187 = {}
    # Getting the type of 'warnings' (line 1487)
    warnings_119182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1487, 8), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 1487)
    warn_119183 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1487, 8), warnings_119182, 'warn')
    # Calling warn(args, kwargs) (line 1487)
    warn_call_result_119188 = invoke(stypy.reporting.localization.Localization(__file__, 1487, 8), warn_119183, *[result_mod_119186], **kwargs_119187)
    
    # SSA join for try-except statement (line 1475)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'names' (line 1490)
    names_119189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1490, 7), 'names')
    # Getting the type of 'True' (line 1490)
    True_119190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1490, 16), 'True')
    # Applying the binary operator 'is' (line 1490)
    result_is__119191 = python_operator(stypy.reporting.localization.Localization(__file__, 1490, 7), 'is', names_119189, True_119190)
    
    # Testing the type of an if condition (line 1490)
    if_condition_119192 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1490, 4), result_is__119191)
    # Assigning a type to the variable 'if_condition_119192' (line 1490)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1490, 4), 'if_condition_119192', if_condition_119192)
    # SSA begins for if statement (line 1490)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1491):
    
    # Assigning a Call to a Name (line 1491):
    
    # Call to strip(...): (line 1491)
    # Processing the call keyword arguments (line 1491)
    kwargs_119198 = {}
    
    # Obtaining the type of the subscript
    int_119193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1491, 28), 'int')
    # Getting the type of 'first_values' (line 1491)
    first_values_119194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 15), 'first_values', False)
    # Obtaining the member '__getitem__' of a type (line 1491)
    getitem___119195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1491, 15), first_values_119194, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1491)
    subscript_call_result_119196 = invoke(stypy.reporting.localization.Localization(__file__, 1491, 15), getitem___119195, int_119193)
    
    # Obtaining the member 'strip' of a type (line 1491)
    strip_119197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1491, 15), subscript_call_result_119196, 'strip')
    # Calling strip(args, kwargs) (line 1491)
    strip_call_result_119199 = invoke(stypy.reporting.localization.Localization(__file__, 1491, 15), strip_119197, *[], **kwargs_119198)
    
    # Assigning a type to the variable 'fval' (line 1491)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1491, 8), 'fval', strip_call_result_119199)
    
    
    # Getting the type of 'fval' (line 1492)
    fval_119200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 11), 'fval')
    # Getting the type of 'comments' (line 1492)
    comments_119201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 19), 'comments')
    # Applying the binary operator 'in' (line 1492)
    result_contains_119202 = python_operator(stypy.reporting.localization.Localization(__file__, 1492, 11), 'in', fval_119200, comments_119201)
    
    # Testing the type of an if condition (line 1492)
    if_condition_119203 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1492, 8), result_contains_119202)
    # Assigning a type to the variable 'if_condition_119203' (line 1492)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1492, 8), 'if_condition_119203', if_condition_119203)
    # SSA begins for if statement (line 1492)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Deleting a member
    # Getting the type of 'first_values' (line 1493)
    first_values_119204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 16), 'first_values')
    
    # Obtaining the type of the subscript
    int_119205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1493, 29), 'int')
    # Getting the type of 'first_values' (line 1493)
    first_values_119206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 16), 'first_values')
    # Obtaining the member '__getitem__' of a type (line 1493)
    getitem___119207 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1493, 16), first_values_119206, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1493)
    subscript_call_result_119208 = invoke(stypy.reporting.localization.Localization(__file__, 1493, 16), getitem___119207, int_119205)
    
    del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1493, 12), first_values_119204, subscript_call_result_119208)
    # SSA join for if statement (line 1492)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1490)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 1496)
    # Getting the type of 'usecols' (line 1496)
    usecols_119209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1496, 4), 'usecols')
    # Getting the type of 'None' (line 1496)
    None_119210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1496, 22), 'None')
    
    (may_be_119211, more_types_in_union_119212) = may_not_be_none(usecols_119209, None_119210)

    if may_be_119211:

        if more_types_in_union_119212:
            # Runtime conditional SSA (line 1496)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        
        # SSA begins for try-except statement (line 1497)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a ListComp to a Name (line 1498):
        
        # Assigning a ListComp to a Name (line 1498):
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to split(...): (line 1498)
        # Processing the call arguments (line 1498)
        str_119219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1498, 56), 'str', ',')
        # Processing the call keyword arguments (line 1498)
        kwargs_119220 = {}
        # Getting the type of 'usecols' (line 1498)
        usecols_119217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1498, 42), 'usecols', False)
        # Obtaining the member 'split' of a type (line 1498)
        split_119218 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1498, 42), usecols_119217, 'split')
        # Calling split(args, kwargs) (line 1498)
        split_call_result_119221 = invoke(stypy.reporting.localization.Localization(__file__, 1498, 42), split_119218, *[str_119219], **kwargs_119220)
        
        comprehension_119222 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1498, 23), split_call_result_119221)
        # Assigning a type to the variable '_' (line 1498)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1498, 23), '_', comprehension_119222)
        
        # Call to strip(...): (line 1498)
        # Processing the call keyword arguments (line 1498)
        kwargs_119215 = {}
        # Getting the type of '_' (line 1498)
        __119213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1498, 23), '_', False)
        # Obtaining the member 'strip' of a type (line 1498)
        strip_119214 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1498, 23), __119213, 'strip')
        # Calling strip(args, kwargs) (line 1498)
        strip_call_result_119216 = invoke(stypy.reporting.localization.Localization(__file__, 1498, 23), strip_119214, *[], **kwargs_119215)
        
        list_119223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1498, 23), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1498, 23), list_119223, strip_call_result_119216)
        # Assigning a type to the variable 'usecols' (line 1498)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1498, 12), 'usecols', list_119223)
        # SSA branch for the except part of a try statement (line 1497)
        # SSA branch for the except 'AttributeError' branch of a try statement (line 1497)
        module_type_store.open_ssa_branch('except')
        
        
        # SSA begins for try-except statement (line 1500)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 1501):
        
        # Assigning a Call to a Name (line 1501):
        
        # Call to list(...): (line 1501)
        # Processing the call arguments (line 1501)
        # Getting the type of 'usecols' (line 1501)
        usecols_119225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 31), 'usecols', False)
        # Processing the call keyword arguments (line 1501)
        kwargs_119226 = {}
        # Getting the type of 'list' (line 1501)
        list_119224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 26), 'list', False)
        # Calling list(args, kwargs) (line 1501)
        list_call_result_119227 = invoke(stypy.reporting.localization.Localization(__file__, 1501, 26), list_119224, *[usecols_119225], **kwargs_119226)
        
        # Assigning a type to the variable 'usecols' (line 1501)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1501, 16), 'usecols', list_call_result_119227)
        # SSA branch for the except part of a try statement (line 1500)
        # SSA branch for the except 'TypeError' branch of a try statement (line 1500)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a List to a Name (line 1503):
        
        # Assigning a List to a Name (line 1503):
        
        # Obtaining an instance of the builtin type 'list' (line 1503)
        list_119228 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1503, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1503)
        # Adding element type (line 1503)
        # Getting the type of 'usecols' (line 1503)
        usecols_119229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1503, 27), 'usecols')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1503, 26), list_119228, usecols_119229)
        
        # Assigning a type to the variable 'usecols' (line 1503)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1503, 16), 'usecols', list_119228)
        # SSA join for try-except statement (line 1500)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for try-except statement (line 1497)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_119212:
            # SSA join for if statement (line 1496)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 1504):
    
    # Assigning a Call to a Name (line 1504):
    
    # Call to len(...): (line 1504)
    # Processing the call arguments (line 1504)
    
    # Evaluating a boolean operation
    # Getting the type of 'usecols' (line 1504)
    usecols_119231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1504, 17), 'usecols', False)
    # Getting the type of 'first_values' (line 1504)
    first_values_119232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1504, 28), 'first_values', False)
    # Applying the binary operator 'or' (line 1504)
    result_or_keyword_119233 = python_operator(stypy.reporting.localization.Localization(__file__, 1504, 17), 'or', usecols_119231, first_values_119232)
    
    # Processing the call keyword arguments (line 1504)
    kwargs_119234 = {}
    # Getting the type of 'len' (line 1504)
    len_119230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1504, 13), 'len', False)
    # Calling len(args, kwargs) (line 1504)
    len_call_result_119235 = invoke(stypy.reporting.localization.Localization(__file__, 1504, 13), len_119230, *[result_or_keyword_119233], **kwargs_119234)
    
    # Assigning a type to the variable 'nbcols' (line 1504)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1504, 4), 'nbcols', len_call_result_119235)
    
    
    # Getting the type of 'names' (line 1507)
    names_119236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1507, 7), 'names')
    # Getting the type of 'True' (line 1507)
    True_119237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1507, 16), 'True')
    # Applying the binary operator 'is' (line 1507)
    result_is__119238 = python_operator(stypy.reporting.localization.Localization(__file__, 1507, 7), 'is', names_119236, True_119237)
    
    # Testing the type of an if condition (line 1507)
    if_condition_119239 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1507, 4), result_is__119238)
    # Assigning a type to the variable 'if_condition_119239' (line 1507)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1507, 4), 'if_condition_119239', if_condition_119239)
    # SSA begins for if statement (line 1507)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1508):
    
    # Assigning a Call to a Name (line 1508):
    
    # Call to validate_names(...): (line 1508)
    # Processing the call arguments (line 1508)
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'first_values' (line 1509)
    first_values_119248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1509, 41), 'first_values', False)
    comprehension_119249 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1508, 32), first_values_119248)
    # Assigning a type to the variable '_' (line 1508)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1508, 32), '_', comprehension_119249)
    
    # Call to _bytes_to_name(...): (line 1508)
    # Processing the call arguments (line 1508)
    
    # Call to strip(...): (line 1508)
    # Processing the call keyword arguments (line 1508)
    kwargs_119244 = {}
    # Getting the type of '_' (line 1508)
    __119242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1508, 47), '_', False)
    # Obtaining the member 'strip' of a type (line 1508)
    strip_119243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1508, 47), __119242, 'strip')
    # Calling strip(args, kwargs) (line 1508)
    strip_call_result_119245 = invoke(stypy.reporting.localization.Localization(__file__, 1508, 47), strip_119243, *[], **kwargs_119244)
    
    # Processing the call keyword arguments (line 1508)
    kwargs_119246 = {}
    # Getting the type of '_bytes_to_name' (line 1508)
    _bytes_to_name_119241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1508, 32), '_bytes_to_name', False)
    # Calling _bytes_to_name(args, kwargs) (line 1508)
    _bytes_to_name_call_result_119247 = invoke(stypy.reporting.localization.Localization(__file__, 1508, 32), _bytes_to_name_119241, *[strip_call_result_119245], **kwargs_119246)
    
    list_119250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1508, 32), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1508, 32), list_119250, _bytes_to_name_call_result_119247)
    # Processing the call keyword arguments (line 1508)
    kwargs_119251 = {}
    # Getting the type of 'validate_names' (line 1508)
    validate_names_119240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1508, 16), 'validate_names', False)
    # Calling validate_names(args, kwargs) (line 1508)
    validate_names_call_result_119252 = invoke(stypy.reporting.localization.Localization(__file__, 1508, 16), validate_names_119240, *[list_119250], **kwargs_119251)
    
    # Assigning a type to the variable 'names' (line 1508)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1508, 8), 'names', validate_names_call_result_119252)
    
    # Assigning a Call to a Name (line 1510):
    
    # Assigning a Call to a Name (line 1510):
    
    # Call to asbytes(...): (line 1510)
    # Processing the call arguments (line 1510)
    str_119254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1510, 29), 'str', '')
    # Processing the call keyword arguments (line 1510)
    kwargs_119255 = {}
    # Getting the type of 'asbytes' (line 1510)
    asbytes_119253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1510, 21), 'asbytes', False)
    # Calling asbytes(args, kwargs) (line 1510)
    asbytes_call_result_119256 = invoke(stypy.reporting.localization.Localization(__file__, 1510, 21), asbytes_119253, *[str_119254], **kwargs_119255)
    
    # Assigning a type to the variable 'first_line' (line 1510)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1510, 8), 'first_line', asbytes_call_result_119256)
    # SSA branch for the else part of an if statement (line 1507)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to _is_string_like(...): (line 1511)
    # Processing the call arguments (line 1511)
    # Getting the type of 'names' (line 1511)
    names_119258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1511, 25), 'names', False)
    # Processing the call keyword arguments (line 1511)
    kwargs_119259 = {}
    # Getting the type of '_is_string_like' (line 1511)
    _is_string_like_119257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1511, 9), '_is_string_like', False)
    # Calling _is_string_like(args, kwargs) (line 1511)
    _is_string_like_call_result_119260 = invoke(stypy.reporting.localization.Localization(__file__, 1511, 9), _is_string_like_119257, *[names_119258], **kwargs_119259)
    
    # Testing the type of an if condition (line 1511)
    if_condition_119261 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1511, 9), _is_string_like_call_result_119260)
    # Assigning a type to the variable 'if_condition_119261' (line 1511)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1511, 9), 'if_condition_119261', if_condition_119261)
    # SSA begins for if statement (line 1511)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1512):
    
    # Assigning a Call to a Name (line 1512):
    
    # Call to validate_names(...): (line 1512)
    # Processing the call arguments (line 1512)
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to split(...): (line 1512)
    # Processing the call arguments (line 1512)
    str_119269 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1512, 63), 'str', ',')
    # Processing the call keyword arguments (line 1512)
    kwargs_119270 = {}
    # Getting the type of 'names' (line 1512)
    names_119267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1512, 51), 'names', False)
    # Obtaining the member 'split' of a type (line 1512)
    split_119268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1512, 51), names_119267, 'split')
    # Calling split(args, kwargs) (line 1512)
    split_call_result_119271 = invoke(stypy.reporting.localization.Localization(__file__, 1512, 51), split_119268, *[str_119269], **kwargs_119270)
    
    comprehension_119272 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1512, 32), split_call_result_119271)
    # Assigning a type to the variable '_' (line 1512)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1512, 32), '_', comprehension_119272)
    
    # Call to strip(...): (line 1512)
    # Processing the call keyword arguments (line 1512)
    kwargs_119265 = {}
    # Getting the type of '_' (line 1512)
    __119263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1512, 32), '_', False)
    # Obtaining the member 'strip' of a type (line 1512)
    strip_119264 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1512, 32), __119263, 'strip')
    # Calling strip(args, kwargs) (line 1512)
    strip_call_result_119266 = invoke(stypy.reporting.localization.Localization(__file__, 1512, 32), strip_119264, *[], **kwargs_119265)
    
    list_119273 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1512, 32), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1512, 32), list_119273, strip_call_result_119266)
    # Processing the call keyword arguments (line 1512)
    kwargs_119274 = {}
    # Getting the type of 'validate_names' (line 1512)
    validate_names_119262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1512, 16), 'validate_names', False)
    # Calling validate_names(args, kwargs) (line 1512)
    validate_names_call_result_119275 = invoke(stypy.reporting.localization.Localization(__file__, 1512, 16), validate_names_119262, *[list_119273], **kwargs_119274)
    
    # Assigning a type to the variable 'names' (line 1512)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1512, 8), 'names', validate_names_call_result_119275)
    # SSA branch for the else part of an if statement (line 1511)
    module_type_store.open_ssa_branch('else')
    
    # Getting the type of 'names' (line 1513)
    names_119276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1513, 9), 'names')
    # Testing the type of an if condition (line 1513)
    if_condition_119277 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1513, 9), names_119276)
    # Assigning a type to the variable 'if_condition_119277' (line 1513)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1513, 9), 'if_condition_119277', if_condition_119277)
    # SSA begins for if statement (line 1513)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1514):
    
    # Assigning a Call to a Name (line 1514):
    
    # Call to validate_names(...): (line 1514)
    # Processing the call arguments (line 1514)
    # Getting the type of 'names' (line 1514)
    names_119279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1514, 31), 'names', False)
    # Processing the call keyword arguments (line 1514)
    kwargs_119280 = {}
    # Getting the type of 'validate_names' (line 1514)
    validate_names_119278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1514, 16), 'validate_names', False)
    # Calling validate_names(args, kwargs) (line 1514)
    validate_names_call_result_119281 = invoke(stypy.reporting.localization.Localization(__file__, 1514, 16), validate_names_119278, *[names_119279], **kwargs_119280)
    
    # Assigning a type to the variable 'names' (line 1514)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1514, 8), 'names', validate_names_call_result_119281)
    # SSA join for if statement (line 1513)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1511)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1507)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 1516)
    # Getting the type of 'dtype' (line 1516)
    dtype_119282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1516, 4), 'dtype')
    # Getting the type of 'None' (line 1516)
    None_119283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1516, 20), 'None')
    
    (may_be_119284, more_types_in_union_119285) = may_not_be_none(dtype_119282, None_119283)

    if may_be_119284:

        if more_types_in_union_119285:
            # Runtime conditional SSA (line 1516)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 1517):
        
        # Assigning a Call to a Name (line 1517):
        
        # Call to easy_dtype(...): (line 1517)
        # Processing the call arguments (line 1517)
        # Getting the type of 'dtype' (line 1517)
        dtype_119287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1517, 27), 'dtype', False)
        # Processing the call keyword arguments (line 1517)
        # Getting the type of 'defaultfmt' (line 1517)
        defaultfmt_119288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1517, 45), 'defaultfmt', False)
        keyword_119289 = defaultfmt_119288
        # Getting the type of 'names' (line 1517)
        names_119290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1517, 63), 'names', False)
        keyword_119291 = names_119290
        # Getting the type of 'excludelist' (line 1518)
        excludelist_119292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1518, 39), 'excludelist', False)
        keyword_119293 = excludelist_119292
        # Getting the type of 'deletechars' (line 1519)
        deletechars_119294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1519, 39), 'deletechars', False)
        keyword_119295 = deletechars_119294
        # Getting the type of 'case_sensitive' (line 1520)
        case_sensitive_119296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1520, 42), 'case_sensitive', False)
        keyword_119297 = case_sensitive_119296
        # Getting the type of 'replace_space' (line 1521)
        replace_space_119298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1521, 41), 'replace_space', False)
        keyword_119299 = replace_space_119298
        kwargs_119300 = {'excludelist': keyword_119293, 'replace_space': keyword_119299, 'case_sensitive': keyword_119297, 'names': keyword_119291, 'defaultfmt': keyword_119289, 'deletechars': keyword_119295}
        # Getting the type of 'easy_dtype' (line 1517)
        easy_dtype_119286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1517, 16), 'easy_dtype', False)
        # Calling easy_dtype(args, kwargs) (line 1517)
        easy_dtype_call_result_119301 = invoke(stypy.reporting.localization.Localization(__file__, 1517, 16), easy_dtype_119286, *[dtype_119287], **kwargs_119300)
        
        # Assigning a type to the variable 'dtype' (line 1517)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1517, 8), 'dtype', easy_dtype_call_result_119301)

        if more_types_in_union_119285:
            # SSA join for if statement (line 1516)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 1523)
    # Getting the type of 'names' (line 1523)
    names_119302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1523, 4), 'names')
    # Getting the type of 'None' (line 1523)
    None_119303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1523, 20), 'None')
    
    (may_be_119304, more_types_in_union_119305) = may_not_be_none(names_119302, None_119303)

    if may_be_119304:

        if more_types_in_union_119305:
            # Runtime conditional SSA (line 1523)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 1524):
        
        # Assigning a Call to a Name (line 1524):
        
        # Call to list(...): (line 1524)
        # Processing the call arguments (line 1524)
        # Getting the type of 'names' (line 1524)
        names_119307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1524, 21), 'names', False)
        # Processing the call keyword arguments (line 1524)
        kwargs_119308 = {}
        # Getting the type of 'list' (line 1524)
        list_119306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1524, 16), 'list', False)
        # Calling list(args, kwargs) (line 1524)
        list_call_result_119309 = invoke(stypy.reporting.localization.Localization(__file__, 1524, 16), list_119306, *[names_119307], **kwargs_119308)
        
        # Assigning a type to the variable 'names' (line 1524)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1524, 8), 'names', list_call_result_119309)

        if more_types_in_union_119305:
            # SSA join for if statement (line 1523)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Getting the type of 'usecols' (line 1526)
    usecols_119310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1526, 7), 'usecols')
    # Testing the type of an if condition (line 1526)
    if_condition_119311 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1526, 4), usecols_119310)
    # Assigning a type to the variable 'if_condition_119311' (line 1526)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1526, 4), 'if_condition_119311', if_condition_119311)
    # SSA begins for if statement (line 1526)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Call to enumerate(...): (line 1527)
    # Processing the call arguments (line 1527)
    # Getting the type of 'usecols' (line 1527)
    usecols_119313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 38), 'usecols', False)
    # Processing the call keyword arguments (line 1527)
    kwargs_119314 = {}
    # Getting the type of 'enumerate' (line 1527)
    enumerate_119312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 28), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 1527)
    enumerate_call_result_119315 = invoke(stypy.reporting.localization.Localization(__file__, 1527, 28), enumerate_119312, *[usecols_119313], **kwargs_119314)
    
    # Testing the type of a for loop iterable (line 1527)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1527, 8), enumerate_call_result_119315)
    # Getting the type of the for loop variable (line 1527)
    for_loop_var_119316 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1527, 8), enumerate_call_result_119315)
    # Assigning a type to the variable 'i' (line 1527)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1527, 8), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1527, 8), for_loop_var_119316))
    # Assigning a type to the variable 'current' (line 1527)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1527, 8), 'current', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1527, 8), for_loop_var_119316))
    # SSA begins for a for statement (line 1527)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Call to _is_string_like(...): (line 1529)
    # Processing the call arguments (line 1529)
    # Getting the type of 'current' (line 1529)
    current_119318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 31), 'current', False)
    # Processing the call keyword arguments (line 1529)
    kwargs_119319 = {}
    # Getting the type of '_is_string_like' (line 1529)
    _is_string_like_119317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 15), '_is_string_like', False)
    # Calling _is_string_like(args, kwargs) (line 1529)
    _is_string_like_call_result_119320 = invoke(stypy.reporting.localization.Localization(__file__, 1529, 15), _is_string_like_119317, *[current_119318], **kwargs_119319)
    
    # Testing the type of an if condition (line 1529)
    if_condition_119321 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1529, 12), _is_string_like_call_result_119320)
    # Assigning a type to the variable 'if_condition_119321' (line 1529)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1529, 12), 'if_condition_119321', if_condition_119321)
    # SSA begins for if statement (line 1529)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Subscript (line 1530):
    
    # Assigning a Call to a Subscript (line 1530):
    
    # Call to index(...): (line 1530)
    # Processing the call arguments (line 1530)
    # Getting the type of 'current' (line 1530)
    current_119324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1530, 41), 'current', False)
    # Processing the call keyword arguments (line 1530)
    kwargs_119325 = {}
    # Getting the type of 'names' (line 1530)
    names_119322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1530, 29), 'names', False)
    # Obtaining the member 'index' of a type (line 1530)
    index_119323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1530, 29), names_119322, 'index')
    # Calling index(args, kwargs) (line 1530)
    index_call_result_119326 = invoke(stypy.reporting.localization.Localization(__file__, 1530, 29), index_119323, *[current_119324], **kwargs_119325)
    
    # Getting the type of 'usecols' (line 1530)
    usecols_119327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1530, 16), 'usecols')
    # Getting the type of 'i' (line 1530)
    i_119328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1530, 24), 'i')
    # Storing an element on a container (line 1530)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1530, 16), usecols_119327, (i_119328, index_call_result_119326))
    # SSA branch for the else part of an if statement (line 1529)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'current' (line 1531)
    current_119329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 17), 'current')
    int_119330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1531, 27), 'int')
    # Applying the binary operator '<' (line 1531)
    result_lt_119331 = python_operator(stypy.reporting.localization.Localization(__file__, 1531, 17), '<', current_119329, int_119330)
    
    # Testing the type of an if condition (line 1531)
    if_condition_119332 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1531, 17), result_lt_119331)
    # Assigning a type to the variable 'if_condition_119332' (line 1531)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1531, 17), 'if_condition_119332', if_condition_119332)
    # SSA begins for if statement (line 1531)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Subscript (line 1532):
    
    # Assigning a BinOp to a Subscript (line 1532):
    # Getting the type of 'current' (line 1532)
    current_119333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 29), 'current')
    
    # Call to len(...): (line 1532)
    # Processing the call arguments (line 1532)
    # Getting the type of 'first_values' (line 1532)
    first_values_119335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 43), 'first_values', False)
    # Processing the call keyword arguments (line 1532)
    kwargs_119336 = {}
    # Getting the type of 'len' (line 1532)
    len_119334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 39), 'len', False)
    # Calling len(args, kwargs) (line 1532)
    len_call_result_119337 = invoke(stypy.reporting.localization.Localization(__file__, 1532, 39), len_119334, *[first_values_119335], **kwargs_119336)
    
    # Applying the binary operator '+' (line 1532)
    result_add_119338 = python_operator(stypy.reporting.localization.Localization(__file__, 1532, 29), '+', current_119333, len_call_result_119337)
    
    # Getting the type of 'usecols' (line 1532)
    usecols_119339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 16), 'usecols')
    # Getting the type of 'i' (line 1532)
    i_119340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 24), 'i')
    # Storing an element on a container (line 1532)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1532, 16), usecols_119339, (i_119340, result_add_119338))
    # SSA join for if statement (line 1531)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1529)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'dtype' (line 1534)
    dtype_119341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 12), 'dtype')
    # Getting the type of 'None' (line 1534)
    None_119342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 25), 'None')
    # Applying the binary operator 'isnot' (line 1534)
    result_is_not_119343 = python_operator(stypy.reporting.localization.Localization(__file__, 1534, 12), 'isnot', dtype_119341, None_119342)
    
    
    
    # Call to len(...): (line 1534)
    # Processing the call arguments (line 1534)
    # Getting the type of 'dtype' (line 1534)
    dtype_119345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 40), 'dtype', False)
    # Processing the call keyword arguments (line 1534)
    kwargs_119346 = {}
    # Getting the type of 'len' (line 1534)
    len_119344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 36), 'len', False)
    # Calling len(args, kwargs) (line 1534)
    len_call_result_119347 = invoke(stypy.reporting.localization.Localization(__file__, 1534, 36), len_119344, *[dtype_119345], **kwargs_119346)
    
    # Getting the type of 'nbcols' (line 1534)
    nbcols_119348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 49), 'nbcols')
    # Applying the binary operator '>' (line 1534)
    result_gt_119349 = python_operator(stypy.reporting.localization.Localization(__file__, 1534, 36), '>', len_call_result_119347, nbcols_119348)
    
    # Applying the binary operator 'and' (line 1534)
    result_and_keyword_119350 = python_operator(stypy.reporting.localization.Localization(__file__, 1534, 11), 'and', result_is_not_119343, result_gt_119349)
    
    # Testing the type of an if condition (line 1534)
    if_condition_119351 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1534, 8), result_and_keyword_119350)
    # Assigning a type to the variable 'if_condition_119351' (line 1534)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1534, 8), 'if_condition_119351', if_condition_119351)
    # SSA begins for if statement (line 1534)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Attribute to a Name (line 1535):
    
    # Assigning a Attribute to a Name (line 1535):
    # Getting the type of 'dtype' (line 1535)
    dtype_119352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 20), 'dtype')
    # Obtaining the member 'descr' of a type (line 1535)
    descr_119353 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1535, 20), dtype_119352, 'descr')
    # Assigning a type to the variable 'descr' (line 1535)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1535, 12), 'descr', descr_119353)
    
    # Assigning a Call to a Name (line 1536):
    
    # Assigning a Call to a Name (line 1536):
    
    # Call to dtype(...): (line 1536)
    # Processing the call arguments (line 1536)
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'usecols' (line 1536)
    usecols_119360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 48), 'usecols', False)
    comprehension_119361 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1536, 30), usecols_119360)
    # Assigning a type to the variable '_' (line 1536)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1536, 30), '_', comprehension_119361)
    
    # Obtaining the type of the subscript
    # Getting the type of '_' (line 1536)
    __119356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 36), '_', False)
    # Getting the type of 'descr' (line 1536)
    descr_119357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 30), 'descr', False)
    # Obtaining the member '__getitem__' of a type (line 1536)
    getitem___119358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1536, 30), descr_119357, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1536)
    subscript_call_result_119359 = invoke(stypy.reporting.localization.Localization(__file__, 1536, 30), getitem___119358, __119356)
    
    list_119362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1536, 30), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1536, 30), list_119362, subscript_call_result_119359)
    # Processing the call keyword arguments (line 1536)
    kwargs_119363 = {}
    # Getting the type of 'np' (line 1536)
    np_119354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 20), 'np', False)
    # Obtaining the member 'dtype' of a type (line 1536)
    dtype_119355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1536, 20), np_119354, 'dtype')
    # Calling dtype(args, kwargs) (line 1536)
    dtype_call_result_119364 = invoke(stypy.reporting.localization.Localization(__file__, 1536, 20), dtype_119355, *[list_119362], **kwargs_119363)
    
    # Assigning a type to the variable 'dtype' (line 1536)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1536, 12), 'dtype', dtype_call_result_119364)
    
    # Assigning a Call to a Name (line 1537):
    
    # Assigning a Call to a Name (line 1537):
    
    # Call to list(...): (line 1537)
    # Processing the call arguments (line 1537)
    # Getting the type of 'dtype' (line 1537)
    dtype_119366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 25), 'dtype', False)
    # Obtaining the member 'names' of a type (line 1537)
    names_119367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1537, 25), dtype_119366, 'names')
    # Processing the call keyword arguments (line 1537)
    kwargs_119368 = {}
    # Getting the type of 'list' (line 1537)
    list_119365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 20), 'list', False)
    # Calling list(args, kwargs) (line 1537)
    list_call_result_119369 = invoke(stypy.reporting.localization.Localization(__file__, 1537, 20), list_119365, *[names_119367], **kwargs_119368)
    
    # Assigning a type to the variable 'names' (line 1537)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1537, 12), 'names', list_call_result_119369)
    # SSA branch for the else part of an if statement (line 1534)
    module_type_store.open_ssa_branch('else')
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'names' (line 1539)
    names_119370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 14), 'names')
    # Getting the type of 'None' (line 1539)
    None_119371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 27), 'None')
    # Applying the binary operator 'isnot' (line 1539)
    result_is_not_119372 = python_operator(stypy.reporting.localization.Localization(__file__, 1539, 14), 'isnot', names_119370, None_119371)
    
    
    
    # Call to len(...): (line 1539)
    # Processing the call arguments (line 1539)
    # Getting the type of 'names' (line 1539)
    names_119374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 42), 'names', False)
    # Processing the call keyword arguments (line 1539)
    kwargs_119375 = {}
    # Getting the type of 'len' (line 1539)
    len_119373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 38), 'len', False)
    # Calling len(args, kwargs) (line 1539)
    len_call_result_119376 = invoke(stypy.reporting.localization.Localization(__file__, 1539, 38), len_119373, *[names_119374], **kwargs_119375)
    
    # Getting the type of 'nbcols' (line 1539)
    nbcols_119377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 51), 'nbcols')
    # Applying the binary operator '>' (line 1539)
    result_gt_119378 = python_operator(stypy.reporting.localization.Localization(__file__, 1539, 38), '>', len_call_result_119376, nbcols_119377)
    
    # Applying the binary operator 'and' (line 1539)
    result_and_keyword_119379 = python_operator(stypy.reporting.localization.Localization(__file__, 1539, 13), 'and', result_is_not_119372, result_gt_119378)
    
    # Testing the type of an if condition (line 1539)
    if_condition_119380 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1539, 13), result_and_keyword_119379)
    # Assigning a type to the variable 'if_condition_119380' (line 1539)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1539, 13), 'if_condition_119380', if_condition_119380)
    # SSA begins for if statement (line 1539)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a ListComp to a Name (line 1540):
    
    # Assigning a ListComp to a Name (line 1540):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'usecols' (line 1540)
    usecols_119385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 39), 'usecols')
    comprehension_119386 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1540, 21), usecols_119385)
    # Assigning a type to the variable '_' (line 1540)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1540, 21), '_', comprehension_119386)
    
    # Obtaining the type of the subscript
    # Getting the type of '_' (line 1540)
    __119381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 27), '_')
    # Getting the type of 'names' (line 1540)
    names_119382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 21), 'names')
    # Obtaining the member '__getitem__' of a type (line 1540)
    getitem___119383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1540, 21), names_119382, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1540)
    subscript_call_result_119384 = invoke(stypy.reporting.localization.Localization(__file__, 1540, 21), getitem___119383, __119381)
    
    list_119387 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1540, 21), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1540, 21), list_119387, subscript_call_result_119384)
    # Assigning a type to the variable 'names' (line 1540)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1540, 12), 'names', list_119387)
    # SSA join for if statement (line 1539)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1534)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 1526)
    module_type_store.open_ssa_branch('else')
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'names' (line 1541)
    names_119388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1541, 10), 'names')
    # Getting the type of 'None' (line 1541)
    None_119389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1541, 23), 'None')
    # Applying the binary operator 'isnot' (line 1541)
    result_is_not_119390 = python_operator(stypy.reporting.localization.Localization(__file__, 1541, 10), 'isnot', names_119388, None_119389)
    
    
    # Getting the type of 'dtype' (line 1541)
    dtype_119391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1541, 34), 'dtype')
    # Getting the type of 'None' (line 1541)
    None_119392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1541, 47), 'None')
    # Applying the binary operator 'isnot' (line 1541)
    result_is_not_119393 = python_operator(stypy.reporting.localization.Localization(__file__, 1541, 34), 'isnot', dtype_119391, None_119392)
    
    # Applying the binary operator 'and' (line 1541)
    result_and_keyword_119394 = python_operator(stypy.reporting.localization.Localization(__file__, 1541, 9), 'and', result_is_not_119390, result_is_not_119393)
    
    # Testing the type of an if condition (line 1541)
    if_condition_119395 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1541, 9), result_and_keyword_119394)
    # Assigning a type to the variable 'if_condition_119395' (line 1541)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1541, 9), 'if_condition_119395', if_condition_119395)
    # SSA begins for if statement (line 1541)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1542):
    
    # Assigning a Call to a Name (line 1542):
    
    # Call to list(...): (line 1542)
    # Processing the call arguments (line 1542)
    # Getting the type of 'dtype' (line 1542)
    dtype_119397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 21), 'dtype', False)
    # Obtaining the member 'names' of a type (line 1542)
    names_119398 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1542, 21), dtype_119397, 'names')
    # Processing the call keyword arguments (line 1542)
    kwargs_119399 = {}
    # Getting the type of 'list' (line 1542)
    list_119396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 16), 'list', False)
    # Calling list(args, kwargs) (line 1542)
    list_call_result_119400 = invoke(stypy.reporting.localization.Localization(__file__, 1542, 16), list_119396, *[names_119398], **kwargs_119399)
    
    # Assigning a type to the variable 'names' (line 1542)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1542, 8), 'names', list_call_result_119400)
    # SSA join for if statement (line 1541)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1526)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BoolOp to a Name (line 1546):
    
    # Assigning a BoolOp to a Name (line 1546):
    
    # Evaluating a boolean operation
    # Getting the type of 'missing_values' (line 1546)
    missing_values_119401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1546, 26), 'missing_values')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1546)
    tuple_119402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1546, 44), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1546)
    
    # Applying the binary operator 'or' (line 1546)
    result_or_keyword_119403 = python_operator(stypy.reporting.localization.Localization(__file__, 1546, 26), 'or', missing_values_119401, tuple_119402)
    
    # Assigning a type to the variable 'user_missing_values' (line 1546)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1546, 4), 'user_missing_values', result_or_keyword_119403)
    
    # Assigning a ListComp to a Name (line 1549):
    
    # Assigning a ListComp to a Name (line 1549):
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to range(...): (line 1549)
    # Processing the call arguments (line 1549)
    # Getting the type of 'nbcols' (line 1549)
    nbcols_119413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1549, 57), 'nbcols', False)
    # Processing the call keyword arguments (line 1549)
    kwargs_119414 = {}
    # Getting the type of 'range' (line 1549)
    range_119412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1549, 51), 'range', False)
    # Calling range(args, kwargs) (line 1549)
    range_call_result_119415 = invoke(stypy.reporting.localization.Localization(__file__, 1549, 51), range_119412, *[nbcols_119413], **kwargs_119414)
    
    comprehension_119416 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1549, 22), range_call_result_119415)
    # Assigning a type to the variable '_' (line 1549)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1549, 22), '_', comprehension_119416)
    
    # Call to list(...): (line 1549)
    # Processing the call arguments (line 1549)
    
    # Obtaining an instance of the builtin type 'list' (line 1549)
    list_119405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1549, 27), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1549)
    # Adding element type (line 1549)
    
    # Call to asbytes(...): (line 1549)
    # Processing the call arguments (line 1549)
    str_119407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1549, 36), 'str', '')
    # Processing the call keyword arguments (line 1549)
    kwargs_119408 = {}
    # Getting the type of 'asbytes' (line 1549)
    asbytes_119406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1549, 28), 'asbytes', False)
    # Calling asbytes(args, kwargs) (line 1549)
    asbytes_call_result_119409 = invoke(stypy.reporting.localization.Localization(__file__, 1549, 28), asbytes_119406, *[str_119407], **kwargs_119408)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1549, 27), list_119405, asbytes_call_result_119409)
    
    # Processing the call keyword arguments (line 1549)
    kwargs_119410 = {}
    # Getting the type of 'list' (line 1549)
    list_119404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1549, 22), 'list', False)
    # Calling list(args, kwargs) (line 1549)
    list_call_result_119411 = invoke(stypy.reporting.localization.Localization(__file__, 1549, 22), list_119404, *[list_119405], **kwargs_119410)
    
    list_119417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1549, 22), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1549, 22), list_119417, list_call_result_119411)
    # Assigning a type to the variable 'missing_values' (line 1549)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1549, 4), 'missing_values', list_119417)
    
    # Type idiom detected: calculating its left and rigth part (line 1552)
    # Getting the type of 'dict' (line 1552)
    dict_119418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1552, 39), 'dict')
    # Getting the type of 'user_missing_values' (line 1552)
    user_missing_values_119419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1552, 18), 'user_missing_values')
    
    (may_be_119420, more_types_in_union_119421) = may_be_subtype(dict_119418, user_missing_values_119419)

    if may_be_119420:

        if more_types_in_union_119421:
            # Runtime conditional SSA (line 1552)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'user_missing_values' (line 1552)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1552, 4), 'user_missing_values', remove_not_subtype_from_union(user_missing_values_119419, dict))
        
        
        # Call to items(...): (line 1554)
        # Processing the call keyword arguments (line 1554)
        kwargs_119424 = {}
        # Getting the type of 'user_missing_values' (line 1554)
        user_missing_values_119422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1554, 26), 'user_missing_values', False)
        # Obtaining the member 'items' of a type (line 1554)
        items_119423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1554, 26), user_missing_values_119422, 'items')
        # Calling items(args, kwargs) (line 1554)
        items_call_result_119425 = invoke(stypy.reporting.localization.Localization(__file__, 1554, 26), items_119423, *[], **kwargs_119424)
        
        # Testing the type of a for loop iterable (line 1554)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1554, 8), items_call_result_119425)
        # Getting the type of the for loop variable (line 1554)
        for_loop_var_119426 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1554, 8), items_call_result_119425)
        # Assigning a type to the variable 'key' (line 1554)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1554, 8), 'key', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1554, 8), for_loop_var_119426))
        # Assigning a type to the variable 'val' (line 1554)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1554, 8), 'val', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1554, 8), for_loop_var_119426))
        # SSA begins for a for statement (line 1554)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to _is_string_like(...): (line 1556)
        # Processing the call arguments (line 1556)
        # Getting the type of 'key' (line 1556)
        key_119428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1556, 31), 'key', False)
        # Processing the call keyword arguments (line 1556)
        kwargs_119429 = {}
        # Getting the type of '_is_string_like' (line 1556)
        _is_string_like_119427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1556, 15), '_is_string_like', False)
        # Calling _is_string_like(args, kwargs) (line 1556)
        _is_string_like_call_result_119430 = invoke(stypy.reporting.localization.Localization(__file__, 1556, 15), _is_string_like_119427, *[key_119428], **kwargs_119429)
        
        # Testing the type of an if condition (line 1556)
        if_condition_119431 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1556, 12), _is_string_like_call_result_119430)
        # Assigning a type to the variable 'if_condition_119431' (line 1556)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1556, 12), 'if_condition_119431', if_condition_119431)
        # SSA begins for if statement (line 1556)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # SSA begins for try-except statement (line 1557)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 1559):
        
        # Assigning a Call to a Name (line 1559):
        
        # Call to index(...): (line 1559)
        # Processing the call arguments (line 1559)
        # Getting the type of 'key' (line 1559)
        key_119434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1559, 38), 'key', False)
        # Processing the call keyword arguments (line 1559)
        kwargs_119435 = {}
        # Getting the type of 'names' (line 1559)
        names_119432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1559, 26), 'names', False)
        # Obtaining the member 'index' of a type (line 1559)
        index_119433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1559, 26), names_119432, 'index')
        # Calling index(args, kwargs) (line 1559)
        index_call_result_119436 = invoke(stypy.reporting.localization.Localization(__file__, 1559, 26), index_119433, *[key_119434], **kwargs_119435)
        
        # Assigning a type to the variable 'key' (line 1559)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1559, 20), 'key', index_call_result_119436)
        # SSA branch for the except part of a try statement (line 1557)
        # SSA branch for the except 'ValueError' branch of a try statement (line 1557)
        module_type_store.open_ssa_branch('except')
        # SSA join for try-except statement (line 1557)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1556)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'usecols' (line 1564)
        usecols_119437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1564, 15), 'usecols')
        # Testing the type of an if condition (line 1564)
        if_condition_119438 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1564, 12), usecols_119437)
        # Assigning a type to the variable 'if_condition_119438' (line 1564)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1564, 12), 'if_condition_119438', if_condition_119438)
        # SSA begins for if statement (line 1564)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # SSA begins for try-except statement (line 1565)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 1566):
        
        # Assigning a Call to a Name (line 1566):
        
        # Call to index(...): (line 1566)
        # Processing the call arguments (line 1566)
        # Getting the type of 'key' (line 1566)
        key_119441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1566, 40), 'key', False)
        # Processing the call keyword arguments (line 1566)
        kwargs_119442 = {}
        # Getting the type of 'usecols' (line 1566)
        usecols_119439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1566, 26), 'usecols', False)
        # Obtaining the member 'index' of a type (line 1566)
        index_119440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1566, 26), usecols_119439, 'index')
        # Calling index(args, kwargs) (line 1566)
        index_call_result_119443 = invoke(stypy.reporting.localization.Localization(__file__, 1566, 26), index_119440, *[key_119441], **kwargs_119442)
        
        # Assigning a type to the variable 'key' (line 1566)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1566, 20), 'key', index_call_result_119443)
        # SSA branch for the except part of a try statement (line 1565)
        # SSA branch for the except 'ValueError' branch of a try statement (line 1565)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 1565)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1564)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to isinstance(...): (line 1570)
        # Processing the call arguments (line 1570)
        # Getting the type of 'val' (line 1570)
        val_119445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1570, 26), 'val', False)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1570)
        tuple_119446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1570, 32), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1570)
        # Adding element type (line 1570)
        # Getting the type of 'list' (line 1570)
        list_119447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1570, 32), 'list', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1570, 32), tuple_119446, list_119447)
        # Adding element type (line 1570)
        # Getting the type of 'tuple' (line 1570)
        tuple_119448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1570, 38), 'tuple', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1570, 32), tuple_119446, tuple_119448)
        
        # Processing the call keyword arguments (line 1570)
        kwargs_119449 = {}
        # Getting the type of 'isinstance' (line 1570)
        isinstance_119444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1570, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1570)
        isinstance_call_result_119450 = invoke(stypy.reporting.localization.Localization(__file__, 1570, 15), isinstance_119444, *[val_119445, tuple_119446], **kwargs_119449)
        
        # Testing the type of an if condition (line 1570)
        if_condition_119451 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1570, 12), isinstance_call_result_119450)
        # Assigning a type to the variable 'if_condition_119451' (line 1570)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1570, 12), 'if_condition_119451', if_condition_119451)
        # SSA begins for if statement (line 1570)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a ListComp to a Name (line 1571):
        
        # Assigning a ListComp to a Name (line 1571):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'val' (line 1571)
        val_119456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 39), 'val')
        comprehension_119457 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1571, 23), val_119456)
        # Assigning a type to the variable '_' (line 1571)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1571, 23), '_', comprehension_119457)
        
        # Call to str(...): (line 1571)
        # Processing the call arguments (line 1571)
        # Getting the type of '_' (line 1571)
        __119453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 27), '_', False)
        # Processing the call keyword arguments (line 1571)
        kwargs_119454 = {}
        # Getting the type of 'str' (line 1571)
        str_119452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 23), 'str', False)
        # Calling str(args, kwargs) (line 1571)
        str_call_result_119455 = invoke(stypy.reporting.localization.Localization(__file__, 1571, 23), str_119452, *[__119453], **kwargs_119454)
        
        list_119458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1571, 23), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1571, 23), list_119458, str_call_result_119455)
        # Assigning a type to the variable 'val' (line 1571)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1571, 16), 'val', list_119458)
        # SSA branch for the else part of an if statement (line 1570)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a List to a Name (line 1573):
        
        # Assigning a List to a Name (line 1573):
        
        # Obtaining an instance of the builtin type 'list' (line 1573)
        list_119459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1573, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1573)
        # Adding element type (line 1573)
        
        # Call to str(...): (line 1573)
        # Processing the call arguments (line 1573)
        # Getting the type of 'val' (line 1573)
        val_119461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 27), 'val', False)
        # Processing the call keyword arguments (line 1573)
        kwargs_119462 = {}
        # Getting the type of 'str' (line 1573)
        str_119460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 23), 'str', False)
        # Calling str(args, kwargs) (line 1573)
        str_call_result_119463 = invoke(stypy.reporting.localization.Localization(__file__, 1573, 23), str_119460, *[val_119461], **kwargs_119462)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1573, 22), list_119459, str_call_result_119463)
        
        # Assigning a type to the variable 'val' (line 1573)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1573, 16), 'val', list_119459)
        # SSA join for if statement (line 1570)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 1575)
        # Getting the type of 'key' (line 1575)
        key_119464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 15), 'key')
        # Getting the type of 'None' (line 1575)
        None_119465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 22), 'None')
        
        (may_be_119466, more_types_in_union_119467) = may_be_none(key_119464, None_119465)

        if may_be_119466:

            if more_types_in_union_119467:
                # Runtime conditional SSA (line 1575)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Getting the type of 'missing_values' (line 1577)
            missing_values_119468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1577, 28), 'missing_values')
            # Testing the type of a for loop iterable (line 1577)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1577, 16), missing_values_119468)
            # Getting the type of the for loop variable (line 1577)
            for_loop_var_119469 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1577, 16), missing_values_119468)
            # Assigning a type to the variable 'miss' (line 1577)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1577, 16), 'miss', for_loop_var_119469)
            # SSA begins for a for statement (line 1577)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            # Call to extend(...): (line 1578)
            # Processing the call arguments (line 1578)
            # Getting the type of 'val' (line 1578)
            val_119472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1578, 32), 'val', False)
            # Processing the call keyword arguments (line 1578)
            kwargs_119473 = {}
            # Getting the type of 'miss' (line 1578)
            miss_119470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1578, 20), 'miss', False)
            # Obtaining the member 'extend' of a type (line 1578)
            extend_119471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1578, 20), miss_119470, 'extend')
            # Calling extend(args, kwargs) (line 1578)
            extend_call_result_119474 = invoke(stypy.reporting.localization.Localization(__file__, 1578, 20), extend_119471, *[val_119472], **kwargs_119473)
            
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_119467:
                # Runtime conditional SSA for else branch (line 1575)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_119466) or more_types_in_union_119467):
            
            # Call to extend(...): (line 1580)
            # Processing the call arguments (line 1580)
            # Getting the type of 'val' (line 1580)
            val_119480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1580, 43), 'val', False)
            # Processing the call keyword arguments (line 1580)
            kwargs_119481 = {}
            
            # Obtaining the type of the subscript
            # Getting the type of 'key' (line 1580)
            key_119475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1580, 31), 'key', False)
            # Getting the type of 'missing_values' (line 1580)
            missing_values_119476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1580, 16), 'missing_values', False)
            # Obtaining the member '__getitem__' of a type (line 1580)
            getitem___119477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1580, 16), missing_values_119476, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1580)
            subscript_call_result_119478 = invoke(stypy.reporting.localization.Localization(__file__, 1580, 16), getitem___119477, key_119475)
            
            # Obtaining the member 'extend' of a type (line 1580)
            extend_119479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1580, 16), subscript_call_result_119478, 'extend')
            # Calling extend(args, kwargs) (line 1580)
            extend_call_result_119482 = invoke(stypy.reporting.localization.Localization(__file__, 1580, 16), extend_119479, *[val_119480], **kwargs_119481)
            

            if (may_be_119466 and more_types_in_union_119467):
                # SSA join for if statement (line 1575)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_119421:
            # Runtime conditional SSA for else branch (line 1552)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_119420) or more_types_in_union_119421):
        # Assigning a type to the variable 'user_missing_values' (line 1552)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1552, 4), 'user_missing_values', remove_subtype_from_union(user_missing_values_119419, dict))
        
        
        # Call to isinstance(...): (line 1582)
        # Processing the call arguments (line 1582)
        # Getting the type of 'user_missing_values' (line 1582)
        user_missing_values_119484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 20), 'user_missing_values', False)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1582)
        tuple_119485 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1582, 42), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1582)
        # Adding element type (line 1582)
        # Getting the type of 'list' (line 1582)
        list_119486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 42), 'list', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1582, 42), tuple_119485, list_119486)
        # Adding element type (line 1582)
        # Getting the type of 'tuple' (line 1582)
        tuple_119487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 48), 'tuple', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1582, 42), tuple_119485, tuple_119487)
        
        # Processing the call keyword arguments (line 1582)
        kwargs_119488 = {}
        # Getting the type of 'isinstance' (line 1582)
        isinstance_119483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1582, 9), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1582)
        isinstance_call_result_119489 = invoke(stypy.reporting.localization.Localization(__file__, 1582, 9), isinstance_119483, *[user_missing_values_119484, tuple_119485], **kwargs_119488)
        
        # Testing the type of an if condition (line 1582)
        if_condition_119490 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1582, 9), isinstance_call_result_119489)
        # Assigning a type to the variable 'if_condition_119490' (line 1582)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1582, 9), 'if_condition_119490', if_condition_119490)
        # SSA begins for if statement (line 1582)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to zip(...): (line 1583)
        # Processing the call arguments (line 1583)
        # Getting the type of 'user_missing_values' (line 1583)
        user_missing_values_119492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 34), 'user_missing_values', False)
        # Getting the type of 'missing_values' (line 1583)
        missing_values_119493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 55), 'missing_values', False)
        # Processing the call keyword arguments (line 1583)
        kwargs_119494 = {}
        # Getting the type of 'zip' (line 1583)
        zip_119491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 30), 'zip', False)
        # Calling zip(args, kwargs) (line 1583)
        zip_call_result_119495 = invoke(stypy.reporting.localization.Localization(__file__, 1583, 30), zip_119491, *[user_missing_values_119492, missing_values_119493], **kwargs_119494)
        
        # Testing the type of a for loop iterable (line 1583)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1583, 8), zip_call_result_119495)
        # Getting the type of the for loop variable (line 1583)
        for_loop_var_119496 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1583, 8), zip_call_result_119495)
        # Assigning a type to the variable 'value' (line 1583)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1583, 8), 'value', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1583, 8), for_loop_var_119496))
        # Assigning a type to the variable 'entry' (line 1583)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1583, 8), 'entry', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1583, 8), for_loop_var_119496))
        # SSA begins for a for statement (line 1583)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 1584):
        
        # Assigning a Call to a Name (line 1584):
        
        # Call to str(...): (line 1584)
        # Processing the call arguments (line 1584)
        # Getting the type of 'value' (line 1584)
        value_119498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1584, 24), 'value', False)
        # Processing the call keyword arguments (line 1584)
        kwargs_119499 = {}
        # Getting the type of 'str' (line 1584)
        str_119497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1584, 20), 'str', False)
        # Calling str(args, kwargs) (line 1584)
        str_call_result_119500 = invoke(stypy.reporting.localization.Localization(__file__, 1584, 20), str_119497, *[value_119498], **kwargs_119499)
        
        # Assigning a type to the variable 'value' (line 1584)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1584, 12), 'value', str_call_result_119500)
        
        
        # Getting the type of 'value' (line 1585)
        value_119501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1585, 15), 'value')
        # Getting the type of 'entry' (line 1585)
        entry_119502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1585, 28), 'entry')
        # Applying the binary operator 'notin' (line 1585)
        result_contains_119503 = python_operator(stypy.reporting.localization.Localization(__file__, 1585, 15), 'notin', value_119501, entry_119502)
        
        # Testing the type of an if condition (line 1585)
        if_condition_119504 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1585, 12), result_contains_119503)
        # Assigning a type to the variable 'if_condition_119504' (line 1585)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1585, 12), 'if_condition_119504', if_condition_119504)
        # SSA begins for if statement (line 1585)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 1586)
        # Processing the call arguments (line 1586)
        # Getting the type of 'value' (line 1586)
        value_119507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1586, 29), 'value', False)
        # Processing the call keyword arguments (line 1586)
        kwargs_119508 = {}
        # Getting the type of 'entry' (line 1586)
        entry_119505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1586, 16), 'entry', False)
        # Obtaining the member 'append' of a type (line 1586)
        append_119506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1586, 16), entry_119505, 'append')
        # Calling append(args, kwargs) (line 1586)
        append_call_result_119509 = invoke(stypy.reporting.localization.Localization(__file__, 1586, 16), append_119506, *[value_119507], **kwargs_119508)
        
        # SSA join for if statement (line 1585)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1582)
        module_type_store.open_ssa_branch('else')
        
        # Type idiom detected: calculating its left and rigth part (line 1588)
        # Getting the type of 'bytes' (line 1588)
        bytes_119510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1588, 41), 'bytes')
        # Getting the type of 'user_missing_values' (line 1588)
        user_missing_values_119511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1588, 20), 'user_missing_values')
        
        (may_be_119512, more_types_in_union_119513) = may_be_subtype(bytes_119510, user_missing_values_119511)

        if may_be_119512:

            if more_types_in_union_119513:
                # Runtime conditional SSA (line 1588)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'user_missing_values' (line 1588)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1588, 9), 'user_missing_values', remove_not_subtype_from_union(user_missing_values_119511, bytes))
            
            # Assigning a Call to a Name (line 1589):
            
            # Assigning a Call to a Name (line 1589):
            
            # Call to split(...): (line 1589)
            # Processing the call arguments (line 1589)
            
            # Call to asbytes(...): (line 1589)
            # Processing the call arguments (line 1589)
            str_119517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1589, 55), 'str', ',')
            # Processing the call keyword arguments (line 1589)
            kwargs_119518 = {}
            # Getting the type of 'asbytes' (line 1589)
            asbytes_119516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1589, 47), 'asbytes', False)
            # Calling asbytes(args, kwargs) (line 1589)
            asbytes_call_result_119519 = invoke(stypy.reporting.localization.Localization(__file__, 1589, 47), asbytes_119516, *[str_119517], **kwargs_119518)
            
            # Processing the call keyword arguments (line 1589)
            kwargs_119520 = {}
            # Getting the type of 'user_missing_values' (line 1589)
            user_missing_values_119514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1589, 21), 'user_missing_values', False)
            # Obtaining the member 'split' of a type (line 1589)
            split_119515 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1589, 21), user_missing_values_119514, 'split')
            # Calling split(args, kwargs) (line 1589)
            split_call_result_119521 = invoke(stypy.reporting.localization.Localization(__file__, 1589, 21), split_119515, *[asbytes_call_result_119519], **kwargs_119520)
            
            # Assigning a type to the variable 'user_value' (line 1589)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1589, 8), 'user_value', split_call_result_119521)
            
            # Getting the type of 'missing_values' (line 1590)
            missing_values_119522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1590, 21), 'missing_values')
            # Testing the type of a for loop iterable (line 1590)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1590, 8), missing_values_119522)
            # Getting the type of the for loop variable (line 1590)
            for_loop_var_119523 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1590, 8), missing_values_119522)
            # Assigning a type to the variable 'entry' (line 1590)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1590, 8), 'entry', for_loop_var_119523)
            # SSA begins for a for statement (line 1590)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            # Call to extend(...): (line 1591)
            # Processing the call arguments (line 1591)
            # Getting the type of 'user_value' (line 1591)
            user_value_119526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1591, 25), 'user_value', False)
            # Processing the call keyword arguments (line 1591)
            kwargs_119527 = {}
            # Getting the type of 'entry' (line 1591)
            entry_119524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1591, 12), 'entry', False)
            # Obtaining the member 'extend' of a type (line 1591)
            extend_119525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1591, 12), entry_119524, 'extend')
            # Calling extend(args, kwargs) (line 1591)
            extend_call_result_119528 = invoke(stypy.reporting.localization.Localization(__file__, 1591, 12), extend_119525, *[user_value_119526], **kwargs_119527)
            
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_119513:
                # Runtime conditional SSA for else branch (line 1588)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_119512) or more_types_in_union_119513):
            # Assigning a type to the variable 'user_missing_values' (line 1588)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1588, 9), 'user_missing_values', remove_subtype_from_union(user_missing_values_119511, bytes))
            
            # Getting the type of 'missing_values' (line 1594)
            missing_values_119529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1594, 21), 'missing_values')
            # Testing the type of a for loop iterable (line 1594)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1594, 8), missing_values_119529)
            # Getting the type of the for loop variable (line 1594)
            for_loop_var_119530 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1594, 8), missing_values_119529)
            # Assigning a type to the variable 'entry' (line 1594)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1594, 8), 'entry', for_loop_var_119530)
            # SSA begins for a for statement (line 1594)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            # Call to extend(...): (line 1595)
            # Processing the call arguments (line 1595)
            
            # Obtaining an instance of the builtin type 'list' (line 1595)
            list_119533 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1595, 25), 'list')
            # Adding type elements to the builtin type 'list' instance (line 1595)
            # Adding element type (line 1595)
            
            # Call to str(...): (line 1595)
            # Processing the call arguments (line 1595)
            # Getting the type of 'user_missing_values' (line 1595)
            user_missing_values_119535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1595, 30), 'user_missing_values', False)
            # Processing the call keyword arguments (line 1595)
            kwargs_119536 = {}
            # Getting the type of 'str' (line 1595)
            str_119534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1595, 26), 'str', False)
            # Calling str(args, kwargs) (line 1595)
            str_call_result_119537 = invoke(stypy.reporting.localization.Localization(__file__, 1595, 26), str_119534, *[user_missing_values_119535], **kwargs_119536)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1595, 25), list_119533, str_call_result_119537)
            
            # Processing the call keyword arguments (line 1595)
            kwargs_119538 = {}
            # Getting the type of 'entry' (line 1595)
            entry_119531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1595, 12), 'entry', False)
            # Obtaining the member 'extend' of a type (line 1595)
            extend_119532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1595, 12), entry_119531, 'extend')
            # Calling extend(args, kwargs) (line 1595)
            extend_call_result_119539 = invoke(stypy.reporting.localization.Localization(__file__, 1595, 12), extend_119532, *[list_119533], **kwargs_119538)
            
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_119512 and more_types_in_union_119513):
                # SSA join for if statement (line 1588)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 1582)
        module_type_store = module_type_store.join_ssa_context()
        

        if (may_be_119420 and more_types_in_union_119421):
            # SSA join for if statement (line 1552)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Name to a Name (line 1599):
    
    # Assigning a Name to a Name (line 1599):
    # Getting the type of 'filling_values' (line 1599)
    filling_values_119540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1599, 26), 'filling_values')
    # Assigning a type to the variable 'user_filling_values' (line 1599)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1599, 4), 'user_filling_values', filling_values_119540)
    
    # Type idiom detected: calculating its left and rigth part (line 1600)
    # Getting the type of 'user_filling_values' (line 1600)
    user_filling_values_119541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 7), 'user_filling_values')
    # Getting the type of 'None' (line 1600)
    None_119542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1600, 30), 'None')
    
    (may_be_119543, more_types_in_union_119544) = may_be_none(user_filling_values_119541, None_119542)

    if may_be_119543:

        if more_types_in_union_119544:
            # Runtime conditional SSA (line 1600)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a List to a Name (line 1601):
        
        # Assigning a List to a Name (line 1601):
        
        # Obtaining an instance of the builtin type 'list' (line 1601)
        list_119545 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1601, 30), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1601)
        
        # Assigning a type to the variable 'user_filling_values' (line 1601)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1601, 8), 'user_filling_values', list_119545)

        if more_types_in_union_119544:
            # SSA join for if statement (line 1600)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a BinOp to a Name (line 1603):
    
    # Assigning a BinOp to a Name (line 1603):
    
    # Obtaining an instance of the builtin type 'list' (line 1603)
    list_119546 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1603, 21), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1603)
    # Adding element type (line 1603)
    # Getting the type of 'None' (line 1603)
    None_119547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1603, 22), 'None')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1603, 21), list_119546, None_119547)
    
    # Getting the type of 'nbcols' (line 1603)
    nbcols_119548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1603, 30), 'nbcols')
    # Applying the binary operator '*' (line 1603)
    result_mul_119549 = python_operator(stypy.reporting.localization.Localization(__file__, 1603, 21), '*', list_119546, nbcols_119548)
    
    # Assigning a type to the variable 'filling_values' (line 1603)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1603, 4), 'filling_values', result_mul_119549)
    
    # Type idiom detected: calculating its left and rigth part (line 1605)
    # Getting the type of 'dict' (line 1605)
    dict_119550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1605, 39), 'dict')
    # Getting the type of 'user_filling_values' (line 1605)
    user_filling_values_119551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1605, 18), 'user_filling_values')
    
    (may_be_119552, more_types_in_union_119553) = may_be_subtype(dict_119550, user_filling_values_119551)

    if may_be_119552:

        if more_types_in_union_119553:
            # Runtime conditional SSA (line 1605)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'user_filling_values' (line 1605)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1605, 4), 'user_filling_values', remove_not_subtype_from_union(user_filling_values_119551, dict))
        
        
        # Call to items(...): (line 1606)
        # Processing the call keyword arguments (line 1606)
        kwargs_119556 = {}
        # Getting the type of 'user_filling_values' (line 1606)
        user_filling_values_119554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 26), 'user_filling_values', False)
        # Obtaining the member 'items' of a type (line 1606)
        items_119555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1606, 26), user_filling_values_119554, 'items')
        # Calling items(args, kwargs) (line 1606)
        items_call_result_119557 = invoke(stypy.reporting.localization.Localization(__file__, 1606, 26), items_119555, *[], **kwargs_119556)
        
        # Testing the type of a for loop iterable (line 1606)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1606, 8), items_call_result_119557)
        # Getting the type of the for loop variable (line 1606)
        for_loop_var_119558 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1606, 8), items_call_result_119557)
        # Assigning a type to the variable 'key' (line 1606)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1606, 8), 'key', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1606, 8), for_loop_var_119558))
        # Assigning a type to the variable 'val' (line 1606)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1606, 8), 'val', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1606, 8), for_loop_var_119558))
        # SSA begins for a for statement (line 1606)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to _is_string_like(...): (line 1607)
        # Processing the call arguments (line 1607)
        # Getting the type of 'key' (line 1607)
        key_119560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1607, 31), 'key', False)
        # Processing the call keyword arguments (line 1607)
        kwargs_119561 = {}
        # Getting the type of '_is_string_like' (line 1607)
        _is_string_like_119559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1607, 15), '_is_string_like', False)
        # Calling _is_string_like(args, kwargs) (line 1607)
        _is_string_like_call_result_119562 = invoke(stypy.reporting.localization.Localization(__file__, 1607, 15), _is_string_like_119559, *[key_119560], **kwargs_119561)
        
        # Testing the type of an if condition (line 1607)
        if_condition_119563 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1607, 12), _is_string_like_call_result_119562)
        # Assigning a type to the variable 'if_condition_119563' (line 1607)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1607, 12), 'if_condition_119563', if_condition_119563)
        # SSA begins for if statement (line 1607)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # SSA begins for try-except statement (line 1608)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 1610):
        
        # Assigning a Call to a Name (line 1610):
        
        # Call to index(...): (line 1610)
        # Processing the call arguments (line 1610)
        # Getting the type of 'key' (line 1610)
        key_119566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1610, 38), 'key', False)
        # Processing the call keyword arguments (line 1610)
        kwargs_119567 = {}
        # Getting the type of 'names' (line 1610)
        names_119564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1610, 26), 'names', False)
        # Obtaining the member 'index' of a type (line 1610)
        index_119565 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1610, 26), names_119564, 'index')
        # Calling index(args, kwargs) (line 1610)
        index_call_result_119568 = invoke(stypy.reporting.localization.Localization(__file__, 1610, 26), index_119565, *[key_119566], **kwargs_119567)
        
        # Assigning a type to the variable 'key' (line 1610)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1610, 20), 'key', index_call_result_119568)
        # SSA branch for the except part of a try statement (line 1608)
        # SSA branch for the except 'ValueError' branch of a try statement (line 1608)
        module_type_store.open_ssa_branch('except')
        # SSA join for try-except statement (line 1608)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1607)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'usecols' (line 1615)
        usecols_119569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1615, 15), 'usecols')
        # Testing the type of an if condition (line 1615)
        if_condition_119570 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1615, 12), usecols_119569)
        # Assigning a type to the variable 'if_condition_119570' (line 1615)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1615, 12), 'if_condition_119570', if_condition_119570)
        # SSA begins for if statement (line 1615)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # SSA begins for try-except statement (line 1616)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 1617):
        
        # Assigning a Call to a Name (line 1617):
        
        # Call to index(...): (line 1617)
        # Processing the call arguments (line 1617)
        # Getting the type of 'key' (line 1617)
        key_119573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1617, 40), 'key', False)
        # Processing the call keyword arguments (line 1617)
        kwargs_119574 = {}
        # Getting the type of 'usecols' (line 1617)
        usecols_119571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1617, 26), 'usecols', False)
        # Obtaining the member 'index' of a type (line 1617)
        index_119572 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1617, 26), usecols_119571, 'index')
        # Calling index(args, kwargs) (line 1617)
        index_call_result_119575 = invoke(stypy.reporting.localization.Localization(__file__, 1617, 26), index_119572, *[key_119573], **kwargs_119574)
        
        # Assigning a type to the variable 'key' (line 1617)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1617, 20), 'key', index_call_result_119575)
        # SSA branch for the except part of a try statement (line 1616)
        # SSA branch for the except 'ValueError' branch of a try statement (line 1616)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 1616)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1615)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Subscript (line 1621):
        
        # Assigning a Name to a Subscript (line 1621):
        # Getting the type of 'val' (line 1621)
        val_119576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1621, 34), 'val')
        # Getting the type of 'filling_values' (line 1621)
        filling_values_119577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1621, 12), 'filling_values')
        # Getting the type of 'key' (line 1621)
        key_119578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1621, 27), 'key')
        # Storing an element on a container (line 1621)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1621, 12), filling_values_119577, (key_119578, val_119576))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_119553:
            # Runtime conditional SSA for else branch (line 1605)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_119552) or more_types_in_union_119553):
        # Assigning a type to the variable 'user_filling_values' (line 1605)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1605, 4), 'user_filling_values', remove_subtype_from_union(user_filling_values_119551, dict))
        
        
        # Call to isinstance(...): (line 1623)
        # Processing the call arguments (line 1623)
        # Getting the type of 'user_filling_values' (line 1623)
        user_filling_values_119580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1623, 20), 'user_filling_values', False)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1623)
        tuple_119581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1623, 42), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1623)
        # Adding element type (line 1623)
        # Getting the type of 'list' (line 1623)
        list_119582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1623, 42), 'list', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1623, 42), tuple_119581, list_119582)
        # Adding element type (line 1623)
        # Getting the type of 'tuple' (line 1623)
        tuple_119583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1623, 48), 'tuple', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1623, 42), tuple_119581, tuple_119583)
        
        # Processing the call keyword arguments (line 1623)
        kwargs_119584 = {}
        # Getting the type of 'isinstance' (line 1623)
        isinstance_119579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1623, 9), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1623)
        isinstance_call_result_119585 = invoke(stypy.reporting.localization.Localization(__file__, 1623, 9), isinstance_119579, *[user_filling_values_119580, tuple_119581], **kwargs_119584)
        
        # Testing the type of an if condition (line 1623)
        if_condition_119586 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1623, 9), isinstance_call_result_119585)
        # Assigning a type to the variable 'if_condition_119586' (line 1623)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1623, 9), 'if_condition_119586', if_condition_119586)
        # SSA begins for if statement (line 1623)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1624):
        
        # Assigning a Call to a Name (line 1624):
        
        # Call to len(...): (line 1624)
        # Processing the call arguments (line 1624)
        # Getting the type of 'user_filling_values' (line 1624)
        user_filling_values_119588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1624, 16), 'user_filling_values', False)
        # Processing the call keyword arguments (line 1624)
        kwargs_119589 = {}
        # Getting the type of 'len' (line 1624)
        len_119587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1624, 12), 'len', False)
        # Calling len(args, kwargs) (line 1624)
        len_call_result_119590 = invoke(stypy.reporting.localization.Localization(__file__, 1624, 12), len_119587, *[user_filling_values_119588], **kwargs_119589)
        
        # Assigning a type to the variable 'n' (line 1624)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1624, 8), 'n', len_call_result_119590)
        
        
        # Getting the type of 'n' (line 1625)
        n_119591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1625, 12), 'n')
        # Getting the type of 'nbcols' (line 1625)
        nbcols_119592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1625, 17), 'nbcols')
        # Applying the binary operator '<=' (line 1625)
        result_le_119593 = python_operator(stypy.reporting.localization.Localization(__file__, 1625, 12), '<=', n_119591, nbcols_119592)
        
        # Testing the type of an if condition (line 1625)
        if_condition_119594 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1625, 8), result_le_119593)
        # Assigning a type to the variable 'if_condition_119594' (line 1625)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1625, 8), 'if_condition_119594', if_condition_119594)
        # SSA begins for if statement (line 1625)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Subscript (line 1626):
        
        # Assigning a Name to a Subscript (line 1626):
        # Getting the type of 'user_filling_values' (line 1626)
        user_filling_values_119595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 33), 'user_filling_values')
        # Getting the type of 'filling_values' (line 1626)
        filling_values_119596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 12), 'filling_values')
        # Getting the type of 'n' (line 1626)
        n_119597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 28), 'n')
        slice_119598 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1626, 12), None, n_119597, None)
        # Storing an element on a container (line 1626)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1626, 12), filling_values_119596, (slice_119598, user_filling_values_119595))
        # SSA branch for the else part of an if statement (line 1625)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Subscript to a Name (line 1628):
        
        # Assigning a Subscript to a Name (line 1628):
        
        # Obtaining the type of the subscript
        # Getting the type of 'nbcols' (line 1628)
        nbcols_119599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1628, 50), 'nbcols')
        slice_119600 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1628, 29), None, nbcols_119599, None)
        # Getting the type of 'user_filling_values' (line 1628)
        user_filling_values_119601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1628, 29), 'user_filling_values')
        # Obtaining the member '__getitem__' of a type (line 1628)
        getitem___119602 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1628, 29), user_filling_values_119601, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1628)
        subscript_call_result_119603 = invoke(stypy.reporting.localization.Localization(__file__, 1628, 29), getitem___119602, slice_119600)
        
        # Assigning a type to the variable 'filling_values' (line 1628)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1628, 12), 'filling_values', subscript_call_result_119603)
        # SSA join for if statement (line 1625)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1623)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 1631):
        
        # Assigning a BinOp to a Name (line 1631):
        
        # Obtaining an instance of the builtin type 'list' (line 1631)
        list_119604 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1631, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1631)
        # Adding element type (line 1631)
        # Getting the type of 'user_filling_values' (line 1631)
        user_filling_values_119605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1631, 26), 'user_filling_values')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1631, 25), list_119604, user_filling_values_119605)
        
        # Getting the type of 'nbcols' (line 1631)
        nbcols_119606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1631, 49), 'nbcols')
        # Applying the binary operator '*' (line 1631)
        result_mul_119607 = python_operator(stypy.reporting.localization.Localization(__file__, 1631, 25), '*', list_119604, nbcols_119606)
        
        # Assigning a type to the variable 'filling_values' (line 1631)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1631, 8), 'filling_values', result_mul_119607)
        # SSA join for if statement (line 1623)
        module_type_store = module_type_store.join_ssa_context()
        

        if (may_be_119552 and more_types_in_union_119553):
            # SSA join for if statement (line 1605)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 1634)
    # Getting the type of 'dtype' (line 1634)
    dtype_119608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1634, 7), 'dtype')
    # Getting the type of 'None' (line 1634)
    None_119609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1634, 16), 'None')
    
    (may_be_119610, more_types_in_union_119611) = may_be_none(dtype_119608, None_119609)

    if may_be_119610:

        if more_types_in_union_119611:
            # Runtime conditional SSA (line 1634)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a ListComp to a Name (line 1637):
        
        # Assigning a ListComp to a Name (line 1637):
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to zip(...): (line 1638)
        # Processing the call arguments (line 1638)
        # Getting the type of 'missing_values' (line 1638)
        missing_values_119621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 46), 'missing_values', False)
        # Getting the type of 'filling_values' (line 1638)
        filling_values_119622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 62), 'filling_values', False)
        # Processing the call keyword arguments (line 1638)
        kwargs_119623 = {}
        # Getting the type of 'zip' (line 1638)
        zip_119620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 42), 'zip', False)
        # Calling zip(args, kwargs) (line 1638)
        zip_call_result_119624 = invoke(stypy.reporting.localization.Localization(__file__, 1638, 42), zip_119620, *[missing_values_119621, filling_values_119622], **kwargs_119623)
        
        comprehension_119625 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1637, 22), zip_call_result_119624)
        # Assigning a type to the variable 'miss' (line 1637)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1637, 22), 'miss', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1637, 22), comprehension_119625))
        # Assigning a type to the variable 'fill' (line 1637)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1637, 22), 'fill', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1637, 22), comprehension_119625))
        
        # Call to StringConverter(...): (line 1637)
        # Processing the call arguments (line 1637)
        # Getting the type of 'None' (line 1637)
        None_119613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1637, 38), 'None', False)
        # Processing the call keyword arguments (line 1637)
        # Getting the type of 'miss' (line 1637)
        miss_119614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1637, 59), 'miss', False)
        keyword_119615 = miss_119614
        # Getting the type of 'fill' (line 1637)
        fill_119616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1637, 73), 'fill', False)
        keyword_119617 = fill_119616
        kwargs_119618 = {'default': keyword_119617, 'missing_values': keyword_119615}
        # Getting the type of 'StringConverter' (line 1637)
        StringConverter_119612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1637, 22), 'StringConverter', False)
        # Calling StringConverter(args, kwargs) (line 1637)
        StringConverter_call_result_119619 = invoke(stypy.reporting.localization.Localization(__file__, 1637, 22), StringConverter_119612, *[None_119613], **kwargs_119618)
        
        list_119626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1637, 22), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1637, 22), list_119626, StringConverter_call_result_119619)
        # Assigning a type to the variable 'converters' (line 1637)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1637, 8), 'converters', list_119626)

        if more_types_in_union_119611:
            # Runtime conditional SSA for else branch (line 1634)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_119610) or more_types_in_union_119611):
        
        # Assigning a Call to a Name (line 1640):
        
        # Assigning a Call to a Name (line 1640):
        
        # Call to flatten_dtype(...): (line 1640)
        # Processing the call arguments (line 1640)
        # Getting the type of 'dtype' (line 1640)
        dtype_119628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1640, 35), 'dtype', False)
        # Processing the call keyword arguments (line 1640)
        # Getting the type of 'True' (line 1640)
        True_119629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1640, 55), 'True', False)
        keyword_119630 = True_119629
        kwargs_119631 = {'flatten_base': keyword_119630}
        # Getting the type of 'flatten_dtype' (line 1640)
        flatten_dtype_119627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1640, 21), 'flatten_dtype', False)
        # Calling flatten_dtype(args, kwargs) (line 1640)
        flatten_dtype_call_result_119632 = invoke(stypy.reporting.localization.Localization(__file__, 1640, 21), flatten_dtype_119627, *[dtype_119628], **kwargs_119631)
        
        # Assigning a type to the variable 'dtype_flat' (line 1640)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1640, 8), 'dtype_flat', flatten_dtype_call_result_119632)
        
        
        
        # Call to len(...): (line 1642)
        # Processing the call arguments (line 1642)
        # Getting the type of 'dtype_flat' (line 1642)
        dtype_flat_119634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1642, 15), 'dtype_flat', False)
        # Processing the call keyword arguments (line 1642)
        kwargs_119635 = {}
        # Getting the type of 'len' (line 1642)
        len_119633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1642, 11), 'len', False)
        # Calling len(args, kwargs) (line 1642)
        len_call_result_119636 = invoke(stypy.reporting.localization.Localization(__file__, 1642, 11), len_119633, *[dtype_flat_119634], **kwargs_119635)
        
        int_119637 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1642, 29), 'int')
        # Applying the binary operator '>' (line 1642)
        result_gt_119638 = python_operator(stypy.reporting.localization.Localization(__file__, 1642, 11), '>', len_call_result_119636, int_119637)
        
        # Testing the type of an if condition (line 1642)
        if_condition_119639 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1642, 8), result_gt_119638)
        # Assigning a type to the variable 'if_condition_119639' (line 1642)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1642, 8), 'if_condition_119639', if_condition_119639)
        # SSA begins for if statement (line 1642)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1644):
        
        # Assigning a Call to a Name (line 1644):
        
        # Call to zip(...): (line 1644)
        # Processing the call arguments (line 1644)
        # Getting the type of 'dtype_flat' (line 1644)
        dtype_flat_119641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1644, 24), 'dtype_flat', False)
        # Getting the type of 'missing_values' (line 1644)
        missing_values_119642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1644, 36), 'missing_values', False)
        # Getting the type of 'filling_values' (line 1644)
        filling_values_119643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1644, 52), 'filling_values', False)
        # Processing the call keyword arguments (line 1644)
        kwargs_119644 = {}
        # Getting the type of 'zip' (line 1644)
        zip_119640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1644, 20), 'zip', False)
        # Calling zip(args, kwargs) (line 1644)
        zip_call_result_119645 = invoke(stypy.reporting.localization.Localization(__file__, 1644, 20), zip_119640, *[dtype_flat_119641, missing_values_119642, filling_values_119643], **kwargs_119644)
        
        # Assigning a type to the variable 'zipit' (line 1644)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1644, 12), 'zipit', zip_call_result_119645)
        
        # Assigning a ListComp to a Name (line 1645):
        
        # Assigning a ListComp to a Name (line 1645):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'zipit' (line 1647)
        zipit_119656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 50), 'zipit')
        comprehension_119657 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1645, 26), zipit_119656)
        # Assigning a type to the variable 'dt' (line 1645)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1645, 26), 'dt', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1645, 26), comprehension_119657))
        # Assigning a type to the variable 'miss' (line 1645)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1645, 26), 'miss', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1645, 26), comprehension_119657))
        # Assigning a type to the variable 'fill' (line 1645)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1645, 26), 'fill', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1645, 26), comprehension_119657))
        
        # Call to StringConverter(...): (line 1645)
        # Processing the call arguments (line 1645)
        # Getting the type of 'dt' (line 1645)
        dt_119647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 42), 'dt', False)
        # Processing the call keyword arguments (line 1645)
        # Getting the type of 'True' (line 1645)
        True_119648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 53), 'True', False)
        keyword_119649 = True_119648
        # Getting the type of 'miss' (line 1646)
        miss_119650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 57), 'miss', False)
        keyword_119651 = miss_119650
        # Getting the type of 'fill' (line 1646)
        fill_119652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 71), 'fill', False)
        keyword_119653 = fill_119652
        kwargs_119654 = {'default': keyword_119653, 'locked': keyword_119649, 'missing_values': keyword_119651}
        # Getting the type of 'StringConverter' (line 1645)
        StringConverter_119646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 26), 'StringConverter', False)
        # Calling StringConverter(args, kwargs) (line 1645)
        StringConverter_call_result_119655 = invoke(stypy.reporting.localization.Localization(__file__, 1645, 26), StringConverter_119646, *[dt_119647], **kwargs_119654)
        
        list_119658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1645, 26), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1645, 26), list_119658, StringConverter_call_result_119655)
        # Assigning a type to the variable 'converters' (line 1645)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1645, 12), 'converters', list_119658)
        # SSA branch for the else part of an if statement (line 1642)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 1650):
        
        # Assigning a Call to a Name (line 1650):
        
        # Call to zip(...): (line 1650)
        # Processing the call arguments (line 1650)
        # Getting the type of 'missing_values' (line 1650)
        missing_values_119660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 24), 'missing_values', False)
        # Getting the type of 'filling_values' (line 1650)
        filling_values_119661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 40), 'filling_values', False)
        # Processing the call keyword arguments (line 1650)
        kwargs_119662 = {}
        # Getting the type of 'zip' (line 1650)
        zip_119659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 20), 'zip', False)
        # Calling zip(args, kwargs) (line 1650)
        zip_call_result_119663 = invoke(stypy.reporting.localization.Localization(__file__, 1650, 20), zip_119659, *[missing_values_119660, filling_values_119661], **kwargs_119662)
        
        # Assigning a type to the variable 'zipit' (line 1650)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1650, 12), 'zipit', zip_call_result_119663)
        
        # Assigning a ListComp to a Name (line 1651):
        
        # Assigning a ListComp to a Name (line 1651):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'zipit' (line 1653)
        zipit_119674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1653, 46), 'zipit')
        comprehension_119675 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1651, 26), zipit_119674)
        # Assigning a type to the variable 'miss' (line 1651)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1651, 26), 'miss', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1651, 26), comprehension_119675))
        # Assigning a type to the variable 'fill' (line 1651)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1651, 26), 'fill', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1651, 26), comprehension_119675))
        
        # Call to StringConverter(...): (line 1651)
        # Processing the call arguments (line 1651)
        # Getting the type of 'dtype' (line 1651)
        dtype_119665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 42), 'dtype', False)
        # Processing the call keyword arguments (line 1651)
        # Getting the type of 'True' (line 1651)
        True_119666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 56), 'True', False)
        keyword_119667 = True_119666
        # Getting the type of 'miss' (line 1652)
        miss_119668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1652, 57), 'miss', False)
        keyword_119669 = miss_119668
        # Getting the type of 'fill' (line 1652)
        fill_119670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1652, 71), 'fill', False)
        keyword_119671 = fill_119670
        kwargs_119672 = {'default': keyword_119671, 'locked': keyword_119667, 'missing_values': keyword_119669}
        # Getting the type of 'StringConverter' (line 1651)
        StringConverter_119664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 26), 'StringConverter', False)
        # Calling StringConverter(args, kwargs) (line 1651)
        StringConverter_call_result_119673 = invoke(stypy.reporting.localization.Localization(__file__, 1651, 26), StringConverter_119664, *[dtype_119665], **kwargs_119672)
        
        list_119676 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1651, 26), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1651, 26), list_119676, StringConverter_call_result_119673)
        # Assigning a type to the variable 'converters' (line 1651)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1651, 12), 'converters', list_119676)
        # SSA join for if statement (line 1642)
        module_type_store = module_type_store.join_ssa_context()
        

        if (may_be_119610 and more_types_in_union_119611):
            # SSA join for if statement (line 1634)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a List to a Name (line 1655):
    
    # Assigning a List to a Name (line 1655):
    
    # Obtaining an instance of the builtin type 'list' (line 1655)
    list_119677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1655, 16), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1655)
    
    # Assigning a type to the variable 'uc_update' (line 1655)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1655, 4), 'uc_update', list_119677)
    
    
    # Call to items(...): (line 1656)
    # Processing the call keyword arguments (line 1656)
    kwargs_119680 = {}
    # Getting the type of 'user_converters' (line 1656)
    user_converters_119678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1656, 21), 'user_converters', False)
    # Obtaining the member 'items' of a type (line 1656)
    items_119679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1656, 21), user_converters_119678, 'items')
    # Calling items(args, kwargs) (line 1656)
    items_call_result_119681 = invoke(stypy.reporting.localization.Localization(__file__, 1656, 21), items_119679, *[], **kwargs_119680)
    
    # Testing the type of a for loop iterable (line 1656)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1656, 4), items_call_result_119681)
    # Getting the type of the for loop variable (line 1656)
    for_loop_var_119682 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1656, 4), items_call_result_119681)
    # Assigning a type to the variable 'j' (line 1656)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1656, 4), 'j', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1656, 4), for_loop_var_119682))
    # Assigning a type to the variable 'conv' (line 1656)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1656, 4), 'conv', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1656, 4), for_loop_var_119682))
    # SSA begins for a for statement (line 1656)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Call to _is_string_like(...): (line 1658)
    # Processing the call arguments (line 1658)
    # Getting the type of 'j' (line 1658)
    j_119684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1658, 27), 'j', False)
    # Processing the call keyword arguments (line 1658)
    kwargs_119685 = {}
    # Getting the type of '_is_string_like' (line 1658)
    _is_string_like_119683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1658, 11), '_is_string_like', False)
    # Calling _is_string_like(args, kwargs) (line 1658)
    _is_string_like_call_result_119686 = invoke(stypy.reporting.localization.Localization(__file__, 1658, 11), _is_string_like_119683, *[j_119684], **kwargs_119685)
    
    # Testing the type of an if condition (line 1658)
    if_condition_119687 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1658, 8), _is_string_like_call_result_119686)
    # Assigning a type to the variable 'if_condition_119687' (line 1658)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1658, 8), 'if_condition_119687', if_condition_119687)
    # SSA begins for if statement (line 1658)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # SSA begins for try-except statement (line 1659)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 1660):
    
    # Assigning a Call to a Name (line 1660):
    
    # Call to index(...): (line 1660)
    # Processing the call arguments (line 1660)
    # Getting the type of 'j' (line 1660)
    j_119690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 32), 'j', False)
    # Processing the call keyword arguments (line 1660)
    kwargs_119691 = {}
    # Getting the type of 'names' (line 1660)
    names_119688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 20), 'names', False)
    # Obtaining the member 'index' of a type (line 1660)
    index_119689 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1660, 20), names_119688, 'index')
    # Calling index(args, kwargs) (line 1660)
    index_call_result_119692 = invoke(stypy.reporting.localization.Localization(__file__, 1660, 20), index_119689, *[j_119690], **kwargs_119691)
    
    # Assigning a type to the variable 'j' (line 1660)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1660, 16), 'j', index_call_result_119692)
    
    # Assigning a Name to a Name (line 1661):
    
    # Assigning a Name to a Name (line 1661):
    # Getting the type of 'j' (line 1661)
    j_119693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 20), 'j')
    # Assigning a type to the variable 'i' (line 1661)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1661, 16), 'i', j_119693)
    # SSA branch for the except part of a try statement (line 1659)
    # SSA branch for the except 'ValueError' branch of a try statement (line 1659)
    module_type_store.open_ssa_branch('except')
    # SSA join for try-except statement (line 1659)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 1658)
    module_type_store.open_ssa_branch('else')
    
    # Getting the type of 'usecols' (line 1664)
    usecols_119694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 13), 'usecols')
    # Testing the type of an if condition (line 1664)
    if_condition_119695 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1664, 13), usecols_119694)
    # Assigning a type to the variable 'if_condition_119695' (line 1664)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1664, 13), 'if_condition_119695', if_condition_119695)
    # SSA begins for if statement (line 1664)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # SSA begins for try-except statement (line 1665)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 1666):
    
    # Assigning a Call to a Name (line 1666):
    
    # Call to index(...): (line 1666)
    # Processing the call arguments (line 1666)
    # Getting the type of 'j' (line 1666)
    j_119698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1666, 34), 'j', False)
    # Processing the call keyword arguments (line 1666)
    kwargs_119699 = {}
    # Getting the type of 'usecols' (line 1666)
    usecols_119696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1666, 20), 'usecols', False)
    # Obtaining the member 'index' of a type (line 1666)
    index_119697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1666, 20), usecols_119696, 'index')
    # Calling index(args, kwargs) (line 1666)
    index_call_result_119700 = invoke(stypy.reporting.localization.Localization(__file__, 1666, 20), index_119697, *[j_119698], **kwargs_119699)
    
    # Assigning a type to the variable 'i' (line 1666)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1666, 16), 'i', index_call_result_119700)
    # SSA branch for the except part of a try statement (line 1665)
    # SSA branch for the except 'ValueError' branch of a try statement (line 1665)
    module_type_store.open_ssa_branch('except')
    # SSA join for try-except statement (line 1665)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 1664)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 1671):
    
    # Assigning a Name to a Name (line 1671):
    # Getting the type of 'j' (line 1671)
    j_119701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 16), 'j')
    # Assigning a type to the variable 'i' (line 1671)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1671, 12), 'i', j_119701)
    # SSA join for if statement (line 1664)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1658)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to len(...): (line 1673)
    # Processing the call arguments (line 1673)
    # Getting the type of 'first_line' (line 1673)
    first_line_119703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 15), 'first_line', False)
    # Processing the call keyword arguments (line 1673)
    kwargs_119704 = {}
    # Getting the type of 'len' (line 1673)
    len_119702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 11), 'len', False)
    # Calling len(args, kwargs) (line 1673)
    len_call_result_119705 = invoke(stypy.reporting.localization.Localization(__file__, 1673, 11), len_119702, *[first_line_119703], **kwargs_119704)
    
    # Testing the type of an if condition (line 1673)
    if_condition_119706 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1673, 8), len_call_result_119705)
    # Assigning a type to the variable 'if_condition_119706' (line 1673)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1673, 8), 'if_condition_119706', if_condition_119706)
    # SSA begins for if statement (line 1673)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 1674):
    
    # Assigning a Subscript to a Name (line 1674):
    
    # Obtaining the type of the subscript
    # Getting the type of 'j' (line 1674)
    j_119707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 41), 'j')
    # Getting the type of 'first_values' (line 1674)
    first_values_119708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 28), 'first_values')
    # Obtaining the member '__getitem__' of a type (line 1674)
    getitem___119709 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1674, 28), first_values_119708, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1674)
    subscript_call_result_119710 = invoke(stypy.reporting.localization.Localization(__file__, 1674, 28), getitem___119709, j_119707)
    
    # Assigning a type to the variable 'testing_value' (line 1674)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1674, 12), 'testing_value', subscript_call_result_119710)
    # SSA branch for the else part of an if statement (line 1673)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 1676):
    
    # Assigning a Name to a Name (line 1676):
    # Getting the type of 'None' (line 1676)
    None_119711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 28), 'None')
    # Assigning a type to the variable 'testing_value' (line 1676)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1676, 12), 'testing_value', None_119711)
    # SSA join for if statement (line 1673)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to update(...): (line 1677)
    # Processing the call arguments (line 1677)
    # Getting the type of 'conv' (line 1677)
    conv_119717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 29), 'conv', False)
    # Processing the call keyword arguments (line 1677)
    # Getting the type of 'True' (line 1677)
    True_119718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 42), 'True', False)
    keyword_119719 = True_119718
    # Getting the type of 'testing_value' (line 1678)
    testing_value_119720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 43), 'testing_value', False)
    keyword_119721 = testing_value_119720
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1679)
    i_119722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1679, 52), 'i', False)
    # Getting the type of 'filling_values' (line 1679)
    filling_values_119723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1679, 37), 'filling_values', False)
    # Obtaining the member '__getitem__' of a type (line 1679)
    getitem___119724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1679, 37), filling_values_119723, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1679)
    subscript_call_result_119725 = invoke(stypy.reporting.localization.Localization(__file__, 1679, 37), getitem___119724, i_119722)
    
    keyword_119726 = subscript_call_result_119725
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1680)
    i_119727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 59), 'i', False)
    # Getting the type of 'missing_values' (line 1680)
    missing_values_119728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 44), 'missing_values', False)
    # Obtaining the member '__getitem__' of a type (line 1680)
    getitem___119729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1680, 44), missing_values_119728, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1680)
    subscript_call_result_119730 = invoke(stypy.reporting.localization.Localization(__file__, 1680, 44), getitem___119729, i_119727)
    
    keyword_119731 = subscript_call_result_119730
    kwargs_119732 = {'default': keyword_119726, 'missing_values': keyword_119731, 'locked': keyword_119719, 'testing_value': keyword_119721}
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 1677)
    i_119712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 19), 'i', False)
    # Getting the type of 'converters' (line 1677)
    converters_119713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 8), 'converters', False)
    # Obtaining the member '__getitem__' of a type (line 1677)
    getitem___119714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1677, 8), converters_119713, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1677)
    subscript_call_result_119715 = invoke(stypy.reporting.localization.Localization(__file__, 1677, 8), getitem___119714, i_119712)
    
    # Obtaining the member 'update' of a type (line 1677)
    update_119716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1677, 8), subscript_call_result_119715, 'update')
    # Calling update(args, kwargs) (line 1677)
    update_call_result_119733 = invoke(stypy.reporting.localization.Localization(__file__, 1677, 8), update_119716, *[conv_119717], **kwargs_119732)
    
    
    # Call to append(...): (line 1681)
    # Processing the call arguments (line 1681)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1681)
    tuple_119736 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1681, 26), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1681)
    # Adding element type (line 1681)
    # Getting the type of 'i' (line 1681)
    i_119737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 26), 'i', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1681, 26), tuple_119736, i_119737)
    # Adding element type (line 1681)
    # Getting the type of 'conv' (line 1681)
    conv_119738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 29), 'conv', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1681, 26), tuple_119736, conv_119738)
    
    # Processing the call keyword arguments (line 1681)
    kwargs_119739 = {}
    # Getting the type of 'uc_update' (line 1681)
    uc_update_119734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 8), 'uc_update', False)
    # Obtaining the member 'append' of a type (line 1681)
    append_119735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1681, 8), uc_update_119734, 'append')
    # Calling append(args, kwargs) (line 1681)
    append_call_result_119740 = invoke(stypy.reporting.localization.Localization(__file__, 1681, 8), append_119735, *[tuple_119736], **kwargs_119739)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to update(...): (line 1683)
    # Processing the call arguments (line 1683)
    # Getting the type of 'uc_update' (line 1683)
    uc_update_119743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 27), 'uc_update', False)
    # Processing the call keyword arguments (line 1683)
    kwargs_119744 = {}
    # Getting the type of 'user_converters' (line 1683)
    user_converters_119741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1683, 4), 'user_converters', False)
    # Obtaining the member 'update' of a type (line 1683)
    update_119742 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1683, 4), user_converters_119741, 'update')
    # Calling update(args, kwargs) (line 1683)
    update_call_result_119745 = invoke(stypy.reporting.localization.Localization(__file__, 1683, 4), update_119742, *[uc_update_119743], **kwargs_119744)
    
    
    # Assigning a List to a Name (line 1690):
    
    # Assigning a List to a Name (line 1690):
    
    # Obtaining an instance of the builtin type 'list' (line 1690)
    list_119746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1690, 11), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1690)
    
    # Assigning a type to the variable 'rows' (line 1690)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1690, 4), 'rows', list_119746)
    
    # Assigning a Attribute to a Name (line 1691):
    
    # Assigning a Attribute to a Name (line 1691):
    # Getting the type of 'rows' (line 1691)
    rows_119747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1691, 21), 'rows')
    # Obtaining the member 'append' of a type (line 1691)
    append_119748 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1691, 21), rows_119747, 'append')
    # Assigning a type to the variable 'append_to_rows' (line 1691)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1691, 4), 'append_to_rows', append_119748)
    
    # Getting the type of 'usemask' (line 1693)
    usemask_119749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 7), 'usemask')
    # Testing the type of an if condition (line 1693)
    if_condition_119750 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1693, 4), usemask_119749)
    # Assigning a type to the variable 'if_condition_119750' (line 1693)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1693, 4), 'if_condition_119750', if_condition_119750)
    # SSA begins for if statement (line 1693)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a List to a Name (line 1694):
    
    # Assigning a List to a Name (line 1694):
    
    # Obtaining an instance of the builtin type 'list' (line 1694)
    list_119751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1694, 16), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1694)
    
    # Assigning a type to the variable 'masks' (line 1694)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1694, 8), 'masks', list_119751)
    
    # Assigning a Attribute to a Name (line 1695):
    
    # Assigning a Attribute to a Name (line 1695):
    # Getting the type of 'masks' (line 1695)
    masks_119752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1695, 26), 'masks')
    # Obtaining the member 'append' of a type (line 1695)
    append_119753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1695, 26), masks_119752, 'append')
    # Assigning a type to the variable 'append_to_masks' (line 1695)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1695, 8), 'append_to_masks', append_119753)
    # SSA join for if statement (line 1693)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a List to a Name (line 1697):
    
    # Assigning a List to a Name (line 1697):
    
    # Obtaining an instance of the builtin type 'list' (line 1697)
    list_119754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1697, 14), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1697)
    
    # Assigning a type to the variable 'invalid' (line 1697)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1697, 4), 'invalid', list_119754)
    
    # Assigning a Attribute to a Name (line 1698):
    
    # Assigning a Attribute to a Name (line 1698):
    # Getting the type of 'invalid' (line 1698)
    invalid_119755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1698, 24), 'invalid')
    # Obtaining the member 'append' of a type (line 1698)
    append_119756 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1698, 24), invalid_119755, 'append')
    # Assigning a type to the variable 'append_to_invalid' (line 1698)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1698, 4), 'append_to_invalid', append_119756)
    
    
    # Call to enumerate(...): (line 1701)
    # Processing the call arguments (line 1701)
    
    # Call to chain(...): (line 1701)
    # Processing the call arguments (line 1701)
    
    # Obtaining an instance of the builtin type 'list' (line 1701)
    list_119760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1701, 47), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1701)
    # Adding element type (line 1701)
    # Getting the type of 'first_line' (line 1701)
    first_line_119761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 48), 'first_line', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1701, 47), list_119760, first_line_119761)
    
    # Getting the type of 'fhd' (line 1701)
    fhd_119762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 63), 'fhd', False)
    # Processing the call keyword arguments (line 1701)
    kwargs_119763 = {}
    # Getting the type of 'itertools' (line 1701)
    itertools_119758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 31), 'itertools', False)
    # Obtaining the member 'chain' of a type (line 1701)
    chain_119759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1701, 31), itertools_119758, 'chain')
    # Calling chain(args, kwargs) (line 1701)
    chain_call_result_119764 = invoke(stypy.reporting.localization.Localization(__file__, 1701, 31), chain_119759, *[list_119760, fhd_119762], **kwargs_119763)
    
    # Processing the call keyword arguments (line 1701)
    kwargs_119765 = {}
    # Getting the type of 'enumerate' (line 1701)
    enumerate_119757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 21), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 1701)
    enumerate_call_result_119766 = invoke(stypy.reporting.localization.Localization(__file__, 1701, 21), enumerate_119757, *[chain_call_result_119764], **kwargs_119765)
    
    # Testing the type of a for loop iterable (line 1701)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1701, 4), enumerate_call_result_119766)
    # Getting the type of the for loop variable (line 1701)
    for_loop_var_119767 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1701, 4), enumerate_call_result_119766)
    # Assigning a type to the variable 'i' (line 1701)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1701, 4), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1701, 4), for_loop_var_119767))
    # Assigning a type to the variable 'line' (line 1701)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1701, 4), 'line', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1701, 4), for_loop_var_119767))
    # SSA begins for a for statement (line 1701)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 1702):
    
    # Assigning a Call to a Name (line 1702):
    
    # Call to split_line(...): (line 1702)
    # Processing the call arguments (line 1702)
    # Getting the type of 'line' (line 1702)
    line_119769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1702, 28), 'line', False)
    # Processing the call keyword arguments (line 1702)
    kwargs_119770 = {}
    # Getting the type of 'split_line' (line 1702)
    split_line_119768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1702, 17), 'split_line', False)
    # Calling split_line(args, kwargs) (line 1702)
    split_line_call_result_119771 = invoke(stypy.reporting.localization.Localization(__file__, 1702, 17), split_line_119768, *[line_119769], **kwargs_119770)
    
    # Assigning a type to the variable 'values' (line 1702)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1702, 8), 'values', split_line_call_result_119771)
    
    # Assigning a Call to a Name (line 1703):
    
    # Assigning a Call to a Name (line 1703):
    
    # Call to len(...): (line 1703)
    # Processing the call arguments (line 1703)
    # Getting the type of 'values' (line 1703)
    values_119773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1703, 23), 'values', False)
    # Processing the call keyword arguments (line 1703)
    kwargs_119774 = {}
    # Getting the type of 'len' (line 1703)
    len_119772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1703, 19), 'len', False)
    # Calling len(args, kwargs) (line 1703)
    len_call_result_119775 = invoke(stypy.reporting.localization.Localization(__file__, 1703, 19), len_119772, *[values_119773], **kwargs_119774)
    
    # Assigning a type to the variable 'nbvalues' (line 1703)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1703, 8), 'nbvalues', len_call_result_119775)
    
    
    # Getting the type of 'nbvalues' (line 1705)
    nbvalues_119776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1705, 11), 'nbvalues')
    int_119777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1705, 23), 'int')
    # Applying the binary operator '==' (line 1705)
    result_eq_119778 = python_operator(stypy.reporting.localization.Localization(__file__, 1705, 11), '==', nbvalues_119776, int_119777)
    
    # Testing the type of an if condition (line 1705)
    if_condition_119779 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1705, 8), result_eq_119778)
    # Assigning a type to the variable 'if_condition_119779' (line 1705)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1705, 8), 'if_condition_119779', if_condition_119779)
    # SSA begins for if statement (line 1705)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 1705)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'usecols' (line 1707)
    usecols_119780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1707, 11), 'usecols')
    # Testing the type of an if condition (line 1707)
    if_condition_119781 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1707, 8), usecols_119780)
    # Assigning a type to the variable 'if_condition_119781' (line 1707)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1707, 8), 'if_condition_119781', if_condition_119781)
    # SSA begins for if statement (line 1707)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # SSA begins for try-except statement (line 1709)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a ListComp to a Name (line 1710):
    
    # Assigning a ListComp to a Name (line 1710):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'usecols' (line 1710)
    usecols_119786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1710, 45), 'usecols')
    comprehension_119787 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1710, 26), usecols_119786)
    # Assigning a type to the variable '_' (line 1710)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1710, 26), '_', comprehension_119787)
    
    # Obtaining the type of the subscript
    # Getting the type of '_' (line 1710)
    __119782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1710, 33), '_')
    # Getting the type of 'values' (line 1710)
    values_119783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1710, 26), 'values')
    # Obtaining the member '__getitem__' of a type (line 1710)
    getitem___119784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1710, 26), values_119783, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1710)
    subscript_call_result_119785 = invoke(stypy.reporting.localization.Localization(__file__, 1710, 26), getitem___119784, __119782)
    
    list_119788 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1710, 26), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1710, 26), list_119788, subscript_call_result_119785)
    # Assigning a type to the variable 'values' (line 1710)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1710, 16), 'values', list_119788)
    # SSA branch for the except part of a try statement (line 1709)
    # SSA branch for the except 'IndexError' branch of a try statement (line 1709)
    module_type_store.open_ssa_branch('except')
    
    # Call to append_to_invalid(...): (line 1712)
    # Processing the call arguments (line 1712)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1712)
    tuple_119790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1712, 35), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1712)
    # Adding element type (line 1712)
    # Getting the type of 'i' (line 1712)
    i_119791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1712, 35), 'i', False)
    # Getting the type of 'skip_header' (line 1712)
    skip_header_119792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1712, 39), 'skip_header', False)
    # Applying the binary operator '+' (line 1712)
    result_add_119793 = python_operator(stypy.reporting.localization.Localization(__file__, 1712, 35), '+', i_119791, skip_header_119792)
    
    int_119794 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1712, 53), 'int')
    # Applying the binary operator '+' (line 1712)
    result_add_119795 = python_operator(stypy.reporting.localization.Localization(__file__, 1712, 51), '+', result_add_119793, int_119794)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1712, 35), tuple_119790, result_add_119795)
    # Adding element type (line 1712)
    # Getting the type of 'nbvalues' (line 1712)
    nbvalues_119796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1712, 56), 'nbvalues', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1712, 35), tuple_119790, nbvalues_119796)
    
    # Processing the call keyword arguments (line 1712)
    kwargs_119797 = {}
    # Getting the type of 'append_to_invalid' (line 1712)
    append_to_invalid_119789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1712, 16), 'append_to_invalid', False)
    # Calling append_to_invalid(args, kwargs) (line 1712)
    append_to_invalid_call_result_119798 = invoke(stypy.reporting.localization.Localization(__file__, 1712, 16), append_to_invalid_119789, *[tuple_119790], **kwargs_119797)
    
    # SSA join for try-except statement (line 1709)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 1707)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'nbvalues' (line 1714)
    nbvalues_119799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1714, 13), 'nbvalues')
    # Getting the type of 'nbcols' (line 1714)
    nbcols_119800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1714, 25), 'nbcols')
    # Applying the binary operator '!=' (line 1714)
    result_ne_119801 = python_operator(stypy.reporting.localization.Localization(__file__, 1714, 13), '!=', nbvalues_119799, nbcols_119800)
    
    # Testing the type of an if condition (line 1714)
    if_condition_119802 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1714, 13), result_ne_119801)
    # Assigning a type to the variable 'if_condition_119802' (line 1714)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1714, 13), 'if_condition_119802', if_condition_119802)
    # SSA begins for if statement (line 1714)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append_to_invalid(...): (line 1715)
    # Processing the call arguments (line 1715)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1715)
    tuple_119804 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1715, 31), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1715)
    # Adding element type (line 1715)
    # Getting the type of 'i' (line 1715)
    i_119805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1715, 31), 'i', False)
    # Getting the type of 'skip_header' (line 1715)
    skip_header_119806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1715, 35), 'skip_header', False)
    # Applying the binary operator '+' (line 1715)
    result_add_119807 = python_operator(stypy.reporting.localization.Localization(__file__, 1715, 31), '+', i_119805, skip_header_119806)
    
    int_119808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1715, 49), 'int')
    # Applying the binary operator '+' (line 1715)
    result_add_119809 = python_operator(stypy.reporting.localization.Localization(__file__, 1715, 47), '+', result_add_119807, int_119808)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1715, 31), tuple_119804, result_add_119809)
    # Adding element type (line 1715)
    # Getting the type of 'nbvalues' (line 1715)
    nbvalues_119810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1715, 52), 'nbvalues', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1715, 31), tuple_119804, nbvalues_119810)
    
    # Processing the call keyword arguments (line 1715)
    kwargs_119811 = {}
    # Getting the type of 'append_to_invalid' (line 1715)
    append_to_invalid_119803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1715, 12), 'append_to_invalid', False)
    # Calling append_to_invalid(args, kwargs) (line 1715)
    append_to_invalid_call_result_119812 = invoke(stypy.reporting.localization.Localization(__file__, 1715, 12), append_to_invalid_119803, *[tuple_119804], **kwargs_119811)
    
    # SSA join for if statement (line 1714)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1707)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to append_to_rows(...): (line 1718)
    # Processing the call arguments (line 1718)
    
    # Call to tuple(...): (line 1718)
    # Processing the call arguments (line 1718)
    # Getting the type of 'values' (line 1718)
    values_119815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1718, 29), 'values', False)
    # Processing the call keyword arguments (line 1718)
    kwargs_119816 = {}
    # Getting the type of 'tuple' (line 1718)
    tuple_119814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1718, 23), 'tuple', False)
    # Calling tuple(args, kwargs) (line 1718)
    tuple_call_result_119817 = invoke(stypy.reporting.localization.Localization(__file__, 1718, 23), tuple_119814, *[values_119815], **kwargs_119816)
    
    # Processing the call keyword arguments (line 1718)
    kwargs_119818 = {}
    # Getting the type of 'append_to_rows' (line 1718)
    append_to_rows_119813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1718, 8), 'append_to_rows', False)
    # Calling append_to_rows(args, kwargs) (line 1718)
    append_to_rows_call_result_119819 = invoke(stypy.reporting.localization.Localization(__file__, 1718, 8), append_to_rows_119813, *[tuple_call_result_119817], **kwargs_119818)
    
    
    # Getting the type of 'usemask' (line 1719)
    usemask_119820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 11), 'usemask')
    # Testing the type of an if condition (line 1719)
    if_condition_119821 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1719, 8), usemask_119820)
    # Assigning a type to the variable 'if_condition_119821' (line 1719)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1719, 8), 'if_condition_119821', if_condition_119821)
    # SSA begins for if statement (line 1719)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append_to_masks(...): (line 1720)
    # Processing the call arguments (line 1720)
    
    # Call to tuple(...): (line 1720)
    # Processing the call arguments (line 1720)
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to zip(...): (line 1721)
    # Processing the call arguments (line 1721)
    # Getting the type of 'values' (line 1721)
    values_119831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 53), 'values', False)
    # Getting the type of 'missing_values' (line 1722)
    missing_values_119832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1722, 53), 'missing_values', False)
    # Processing the call keyword arguments (line 1721)
    kwargs_119833 = {}
    # Getting the type of 'zip' (line 1721)
    zip_119830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 49), 'zip', False)
    # Calling zip(args, kwargs) (line 1721)
    zip_call_result_119834 = invoke(stypy.reporting.localization.Localization(__file__, 1721, 49), zip_119830, *[values_119831, missing_values_119832], **kwargs_119833)
    
    comprehension_119835 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1720, 35), zip_call_result_119834)
    # Assigning a type to the variable 'v' (line 1720)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1720, 35), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1720, 35), comprehension_119835))
    # Assigning a type to the variable 'm' (line 1720)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1720, 35), 'm', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1720, 35), comprehension_119835))
    
    
    # Call to strip(...): (line 1720)
    # Processing the call keyword arguments (line 1720)
    kwargs_119826 = {}
    # Getting the type of 'v' (line 1720)
    v_119824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 35), 'v', False)
    # Obtaining the member 'strip' of a type (line 1720)
    strip_119825 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1720, 35), v_119824, 'strip')
    # Calling strip(args, kwargs) (line 1720)
    strip_call_result_119827 = invoke(stypy.reporting.localization.Localization(__file__, 1720, 35), strip_119825, *[], **kwargs_119826)
    
    # Getting the type of 'm' (line 1720)
    m_119828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 48), 'm', False)
    # Applying the binary operator 'in' (line 1720)
    result_contains_119829 = python_operator(stypy.reporting.localization.Localization(__file__, 1720, 35), 'in', strip_call_result_119827, m_119828)
    
    list_119836 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1720, 35), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1720, 35), list_119836, result_contains_119829)
    # Processing the call keyword arguments (line 1720)
    kwargs_119837 = {}
    # Getting the type of 'tuple' (line 1720)
    tuple_119823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 28), 'tuple', False)
    # Calling tuple(args, kwargs) (line 1720)
    tuple_call_result_119838 = invoke(stypy.reporting.localization.Localization(__file__, 1720, 28), tuple_119823, *[list_119836], **kwargs_119837)
    
    # Processing the call keyword arguments (line 1720)
    kwargs_119839 = {}
    # Getting the type of 'append_to_masks' (line 1720)
    append_to_masks_119822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 12), 'append_to_masks', False)
    # Calling append_to_masks(args, kwargs) (line 1720)
    append_to_masks_call_result_119840 = invoke(stypy.reporting.localization.Localization(__file__, 1720, 12), append_to_masks_119822, *[tuple_call_result_119838], **kwargs_119839)
    
    # SSA join for if statement (line 1719)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 1723)
    # Processing the call arguments (line 1723)
    # Getting the type of 'rows' (line 1723)
    rows_119842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1723, 15), 'rows', False)
    # Processing the call keyword arguments (line 1723)
    kwargs_119843 = {}
    # Getting the type of 'len' (line 1723)
    len_119841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1723, 11), 'len', False)
    # Calling len(args, kwargs) (line 1723)
    len_call_result_119844 = invoke(stypy.reporting.localization.Localization(__file__, 1723, 11), len_119841, *[rows_119842], **kwargs_119843)
    
    # Getting the type of 'max_rows' (line 1723)
    max_rows_119845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1723, 24), 'max_rows')
    # Applying the binary operator '==' (line 1723)
    result_eq_119846 = python_operator(stypy.reporting.localization.Localization(__file__, 1723, 11), '==', len_call_result_119844, max_rows_119845)
    
    # Testing the type of an if condition (line 1723)
    if_condition_119847 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1723, 8), result_eq_119846)
    # Assigning a type to the variable 'if_condition_119847' (line 1723)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1723, 8), 'if_condition_119847', if_condition_119847)
    # SSA begins for if statement (line 1723)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 1723)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'own_fhd' (line 1726)
    own_fhd_119848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1726, 7), 'own_fhd')
    # Testing the type of an if condition (line 1726)
    if_condition_119849 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1726, 4), own_fhd_119848)
    # Assigning a type to the variable 'if_condition_119849' (line 1726)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1726, 4), 'if_condition_119849', if_condition_119849)
    # SSA begins for if statement (line 1726)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to close(...): (line 1727)
    # Processing the call keyword arguments (line 1727)
    kwargs_119852 = {}
    # Getting the type of 'fhd' (line 1727)
    fhd_119850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 8), 'fhd', False)
    # Obtaining the member 'close' of a type (line 1727)
    close_119851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1727, 8), fhd_119850, 'close')
    # Calling close(args, kwargs) (line 1727)
    close_call_result_119853 = invoke(stypy.reporting.localization.Localization(__file__, 1727, 8), close_119851, *[], **kwargs_119852)
    
    # SSA join for if statement (line 1726)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 1730)
    # Getting the type of 'dtype' (line 1730)
    dtype_119854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1730, 7), 'dtype')
    # Getting the type of 'None' (line 1730)
    None_119855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1730, 16), 'None')
    
    (may_be_119856, more_types_in_union_119857) = may_be_none(dtype_119854, None_119855)

    if may_be_119856:

        if more_types_in_union_119857:
            # Runtime conditional SSA (line 1730)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        
        # Call to enumerate(...): (line 1731)
        # Processing the call arguments (line 1731)
        # Getting the type of 'converters' (line 1731)
        converters_119859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1731, 40), 'converters', False)
        # Processing the call keyword arguments (line 1731)
        kwargs_119860 = {}
        # Getting the type of 'enumerate' (line 1731)
        enumerate_119858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1731, 30), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 1731)
        enumerate_call_result_119861 = invoke(stypy.reporting.localization.Localization(__file__, 1731, 30), enumerate_119858, *[converters_119859], **kwargs_119860)
        
        # Testing the type of a for loop iterable (line 1731)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1731, 8), enumerate_call_result_119861)
        # Getting the type of the for loop variable (line 1731)
        for_loop_var_119862 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1731, 8), enumerate_call_result_119861)
        # Assigning a type to the variable 'i' (line 1731)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1731, 8), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1731, 8), for_loop_var_119862))
        # Assigning a type to the variable 'converter' (line 1731)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1731, 8), 'converter', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1731, 8), for_loop_var_119862))
        # SSA begins for a for statement (line 1731)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a ListComp to a Name (line 1732):
        
        # Assigning a ListComp to a Name (line 1732):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'rows' (line 1732)
        rows_119870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1732, 58), 'rows')
        comprehension_119871 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1732, 30), rows_119870)
        # Assigning a type to the variable '_m' (line 1732)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1732, 30), '_m', comprehension_119871)
        
        # Call to (...): (line 1732)
        # Processing the call arguments (line 1732)
        # Getting the type of '_m' (line 1732)
        _m_119867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1732, 44), '_m', False)
        # Processing the call keyword arguments (line 1732)
        kwargs_119868 = {}
        
        # Call to itemgetter(...): (line 1732)
        # Processing the call arguments (line 1732)
        # Getting the type of 'i' (line 1732)
        i_119864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1732, 41), 'i', False)
        # Processing the call keyword arguments (line 1732)
        kwargs_119865 = {}
        # Getting the type of 'itemgetter' (line 1732)
        itemgetter_119863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1732, 30), 'itemgetter', False)
        # Calling itemgetter(args, kwargs) (line 1732)
        itemgetter_call_result_119866 = invoke(stypy.reporting.localization.Localization(__file__, 1732, 30), itemgetter_119863, *[i_119864], **kwargs_119865)
        
        # Calling (args, kwargs) (line 1732)
        _call_result_119869 = invoke(stypy.reporting.localization.Localization(__file__, 1732, 30), itemgetter_call_result_119866, *[_m_119867], **kwargs_119868)
        
        list_119872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1732, 30), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1732, 30), list_119872, _call_result_119869)
        # Assigning a type to the variable 'current_column' (line 1732)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1732, 12), 'current_column', list_119872)
        
        
        # SSA begins for try-except statement (line 1733)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to iterupgrade(...): (line 1734)
        # Processing the call arguments (line 1734)
        # Getting the type of 'current_column' (line 1734)
        current_column_119875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1734, 38), 'current_column', False)
        # Processing the call keyword arguments (line 1734)
        kwargs_119876 = {}
        # Getting the type of 'converter' (line 1734)
        converter_119873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1734, 16), 'converter', False)
        # Obtaining the member 'iterupgrade' of a type (line 1734)
        iterupgrade_119874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1734, 16), converter_119873, 'iterupgrade')
        # Calling iterupgrade(args, kwargs) (line 1734)
        iterupgrade_call_result_119877 = invoke(stypy.reporting.localization.Localization(__file__, 1734, 16), iterupgrade_119874, *[current_column_119875], **kwargs_119876)
        
        # SSA branch for the except part of a try statement (line 1733)
        # SSA branch for the except 'ConverterLockError' branch of a try statement (line 1733)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a BinOp to a Name (line 1736):
        
        # Assigning a BinOp to a Name (line 1736):
        str_119878 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1736, 25), 'str', 'Converter #%i is locked and cannot be upgraded: ')
        # Getting the type of 'i' (line 1736)
        i_119879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 78), 'i')
        # Applying the binary operator '%' (line 1736)
        result_mod_119880 = python_operator(stypy.reporting.localization.Localization(__file__, 1736, 25), '%', str_119878, i_119879)
        
        # Assigning a type to the variable 'errmsg' (line 1736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1736, 16), 'errmsg', result_mod_119880)
        
        # Assigning a Call to a Name (line 1737):
        
        # Assigning a Call to a Name (line 1737):
        
        # Call to map(...): (line 1737)
        # Processing the call arguments (line 1737)
        
        # Call to itemgetter(...): (line 1737)
        # Processing the call arguments (line 1737)
        # Getting the type of 'i' (line 1737)
        i_119883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 48), 'i', False)
        # Processing the call keyword arguments (line 1737)
        kwargs_119884 = {}
        # Getting the type of 'itemgetter' (line 1737)
        itemgetter_119882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 37), 'itemgetter', False)
        # Calling itemgetter(args, kwargs) (line 1737)
        itemgetter_call_result_119885 = invoke(stypy.reporting.localization.Localization(__file__, 1737, 37), itemgetter_119882, *[i_119883], **kwargs_119884)
        
        # Getting the type of 'rows' (line 1737)
        rows_119886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 52), 'rows', False)
        # Processing the call keyword arguments (line 1737)
        kwargs_119887 = {}
        # Getting the type of 'map' (line 1737)
        map_119881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 33), 'map', False)
        # Calling map(args, kwargs) (line 1737)
        map_call_result_119888 = invoke(stypy.reporting.localization.Localization(__file__, 1737, 33), map_119881, *[itemgetter_call_result_119885, rows_119886], **kwargs_119887)
        
        # Assigning a type to the variable 'current_column' (line 1737)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1737, 16), 'current_column', map_call_result_119888)
        
        
        # Call to enumerate(...): (line 1738)
        # Processing the call arguments (line 1738)
        # Getting the type of 'current_column' (line 1738)
        current_column_119890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 44), 'current_column', False)
        # Processing the call keyword arguments (line 1738)
        kwargs_119891 = {}
        # Getting the type of 'enumerate' (line 1738)
        enumerate_119889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 34), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 1738)
        enumerate_call_result_119892 = invoke(stypy.reporting.localization.Localization(__file__, 1738, 34), enumerate_119889, *[current_column_119890], **kwargs_119891)
        
        # Testing the type of a for loop iterable (line 1738)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1738, 16), enumerate_call_result_119892)
        # Getting the type of the for loop variable (line 1738)
        for_loop_var_119893 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1738, 16), enumerate_call_result_119892)
        # Assigning a type to the variable 'j' (line 1738)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1738, 16), 'j', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1738, 16), for_loop_var_119893))
        # Assigning a type to the variable 'value' (line 1738)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1738, 16), 'value', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1738, 16), for_loop_var_119893))
        # SSA begins for a for statement (line 1738)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # SSA begins for try-except statement (line 1739)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to upgrade(...): (line 1740)
        # Processing the call arguments (line 1740)
        # Getting the type of 'value' (line 1740)
        value_119896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 42), 'value', False)
        # Processing the call keyword arguments (line 1740)
        kwargs_119897 = {}
        # Getting the type of 'converter' (line 1740)
        converter_119894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 24), 'converter', False)
        # Obtaining the member 'upgrade' of a type (line 1740)
        upgrade_119895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1740, 24), converter_119894, 'upgrade')
        # Calling upgrade(args, kwargs) (line 1740)
        upgrade_call_result_119898 = invoke(stypy.reporting.localization.Localization(__file__, 1740, 24), upgrade_119895, *[value_119896], **kwargs_119897)
        
        # SSA branch for the except part of a try statement (line 1739)
        # SSA branch for the except 'Tuple' branch of a try statement (line 1739)
        module_type_store.open_ssa_branch('except')
        
        # Getting the type of 'errmsg' (line 1742)
        errmsg_119899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1742, 24), 'errmsg')
        str_119900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1742, 34), 'str', "(occurred line #%i for value '%s')")
        # Applying the binary operator '+=' (line 1742)
        result_iadd_119901 = python_operator(stypy.reporting.localization.Localization(__file__, 1742, 24), '+=', errmsg_119899, str_119900)
        # Assigning a type to the variable 'errmsg' (line 1742)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1742, 24), 'errmsg', result_iadd_119901)
        
        
        # Getting the type of 'errmsg' (line 1743)
        errmsg_119902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 24), 'errmsg')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1743)
        tuple_119903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1743, 35), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1743)
        # Adding element type (line 1743)
        # Getting the type of 'j' (line 1743)
        j_119904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 35), 'j')
        int_119905 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1743, 39), 'int')
        # Applying the binary operator '+' (line 1743)
        result_add_119906 = python_operator(stypy.reporting.localization.Localization(__file__, 1743, 35), '+', j_119904, int_119905)
        
        # Getting the type of 'skip_header' (line 1743)
        skip_header_119907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 43), 'skip_header')
        # Applying the binary operator '+' (line 1743)
        result_add_119908 = python_operator(stypy.reporting.localization.Localization(__file__, 1743, 41), '+', result_add_119906, skip_header_119907)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1743, 35), tuple_119903, result_add_119908)
        # Adding element type (line 1743)
        # Getting the type of 'value' (line 1743)
        value_119909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 56), 'value')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1743, 35), tuple_119903, value_119909)
        
        # Applying the binary operator '%=' (line 1743)
        result_imod_119910 = python_operator(stypy.reporting.localization.Localization(__file__, 1743, 24), '%=', errmsg_119902, tuple_119903)
        # Assigning a type to the variable 'errmsg' (line 1743)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1743, 24), 'errmsg', result_imod_119910)
        
        
        # Call to ConverterError(...): (line 1744)
        # Processing the call arguments (line 1744)
        # Getting the type of 'errmsg' (line 1744)
        errmsg_119912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1744, 45), 'errmsg', False)
        # Processing the call keyword arguments (line 1744)
        kwargs_119913 = {}
        # Getting the type of 'ConverterError' (line 1744)
        ConverterError_119911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1744, 30), 'ConverterError', False)
        # Calling ConverterError(args, kwargs) (line 1744)
        ConverterError_call_result_119914 = invoke(stypy.reporting.localization.Localization(__file__, 1744, 30), ConverterError_119911, *[errmsg_119912], **kwargs_119913)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1744, 24), ConverterError_call_result_119914, 'raise parameter', BaseException)
        # SSA join for try-except statement (line 1739)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for try-except statement (line 1733)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_119857:
            # SSA join for if statement (line 1730)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 1747):
    
    # Assigning a Call to a Name (line 1747):
    
    # Call to len(...): (line 1747)
    # Processing the call arguments (line 1747)
    # Getting the type of 'invalid' (line 1747)
    invalid_119916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 20), 'invalid', False)
    # Processing the call keyword arguments (line 1747)
    kwargs_119917 = {}
    # Getting the type of 'len' (line 1747)
    len_119915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 16), 'len', False)
    # Calling len(args, kwargs) (line 1747)
    len_call_result_119918 = invoke(stypy.reporting.localization.Localization(__file__, 1747, 16), len_119915, *[invalid_119916], **kwargs_119917)
    
    # Assigning a type to the variable 'nbinvalid' (line 1747)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1747, 4), 'nbinvalid', len_call_result_119918)
    
    
    # Getting the type of 'nbinvalid' (line 1748)
    nbinvalid_119919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1748, 7), 'nbinvalid')
    int_119920 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1748, 19), 'int')
    # Applying the binary operator '>' (line 1748)
    result_gt_119921 = python_operator(stypy.reporting.localization.Localization(__file__, 1748, 7), '>', nbinvalid_119919, int_119920)
    
    # Testing the type of an if condition (line 1748)
    if_condition_119922 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1748, 4), result_gt_119921)
    # Assigning a type to the variable 'if_condition_119922' (line 1748)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1748, 4), 'if_condition_119922', if_condition_119922)
    # SSA begins for if statement (line 1748)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Name (line 1749):
    
    # Assigning a BinOp to a Name (line 1749):
    
    # Call to len(...): (line 1749)
    # Processing the call arguments (line 1749)
    # Getting the type of 'rows' (line 1749)
    rows_119924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1749, 21), 'rows', False)
    # Processing the call keyword arguments (line 1749)
    kwargs_119925 = {}
    # Getting the type of 'len' (line 1749)
    len_119923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1749, 17), 'len', False)
    # Calling len(args, kwargs) (line 1749)
    len_call_result_119926 = invoke(stypy.reporting.localization.Localization(__file__, 1749, 17), len_119923, *[rows_119924], **kwargs_119925)
    
    # Getting the type of 'nbinvalid' (line 1749)
    nbinvalid_119927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1749, 29), 'nbinvalid')
    # Applying the binary operator '+' (line 1749)
    result_add_119928 = python_operator(stypy.reporting.localization.Localization(__file__, 1749, 17), '+', len_call_result_119926, nbinvalid_119927)
    
    # Getting the type of 'skip_footer' (line 1749)
    skip_footer_119929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1749, 41), 'skip_footer')
    # Applying the binary operator '-' (line 1749)
    result_sub_119930 = python_operator(stypy.reporting.localization.Localization(__file__, 1749, 39), '-', result_add_119928, skip_footer_119929)
    
    # Assigning a type to the variable 'nbrows' (line 1749)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1749, 8), 'nbrows', result_sub_119930)
    
    # Assigning a BinOp to a Name (line 1751):
    
    # Assigning a BinOp to a Name (line 1751):
    str_119931 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1751, 19), 'str', '    Line #%%i (got %%i columns instead of %i)')
    # Getting the type of 'nbcols' (line 1751)
    nbcols_119932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1751, 69), 'nbcols')
    # Applying the binary operator '%' (line 1751)
    result_mod_119933 = python_operator(stypy.reporting.localization.Localization(__file__, 1751, 19), '%', str_119931, nbcols_119932)
    
    # Assigning a type to the variable 'template' (line 1751)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1751, 8), 'template', result_mod_119933)
    
    
    # Getting the type of 'skip_footer' (line 1752)
    skip_footer_119934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1752, 11), 'skip_footer')
    int_119935 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1752, 25), 'int')
    # Applying the binary operator '>' (line 1752)
    result_gt_119936 = python_operator(stypy.reporting.localization.Localization(__file__, 1752, 11), '>', skip_footer_119934, int_119935)
    
    # Testing the type of an if condition (line 1752)
    if_condition_119937 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1752, 8), result_gt_119936)
    # Assigning a type to the variable 'if_condition_119937' (line 1752)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1752, 8), 'if_condition_119937', if_condition_119937)
    # SSA begins for if statement (line 1752)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1753):
    
    # Assigning a Call to a Name (line 1753):
    
    # Call to len(...): (line 1753)
    # Processing the call arguments (line 1753)
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'invalid' (line 1753)
    invalid_119948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1753, 48), 'invalid', False)
    comprehension_119949 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1753, 37), invalid_119948)
    # Assigning a type to the variable '_' (line 1753)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1753, 37), '_', comprehension_119949)
    
    
    # Obtaining the type of the subscript
    int_119940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1754, 42), 'int')
    # Getting the type of '_' (line 1754)
    __119941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1754, 40), '_', False)
    # Obtaining the member '__getitem__' of a type (line 1754)
    getitem___119942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1754, 40), __119941, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1754)
    subscript_call_result_119943 = invoke(stypy.reporting.localization.Localization(__file__, 1754, 40), getitem___119942, int_119940)
    
    # Getting the type of 'nbrows' (line 1754)
    nbrows_119944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1754, 47), 'nbrows', False)
    # Getting the type of 'skip_header' (line 1754)
    skip_header_119945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1754, 56), 'skip_header', False)
    # Applying the binary operator '+' (line 1754)
    result_add_119946 = python_operator(stypy.reporting.localization.Localization(__file__, 1754, 47), '+', nbrows_119944, skip_header_119945)
    
    # Applying the binary operator '>' (line 1754)
    result_gt_119947 = python_operator(stypy.reporting.localization.Localization(__file__, 1754, 40), '>', subscript_call_result_119943, result_add_119946)
    
    # Getting the type of '_' (line 1753)
    __119939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1753, 37), '_', False)
    list_119950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1753, 37), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1753, 37), list_119950, __119939)
    # Processing the call keyword arguments (line 1753)
    kwargs_119951 = {}
    # Getting the type of 'len' (line 1753)
    len_119938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1753, 32), 'len', False)
    # Calling len(args, kwargs) (line 1753)
    len_call_result_119952 = invoke(stypy.reporting.localization.Localization(__file__, 1753, 32), len_119938, *[list_119950], **kwargs_119951)
    
    # Assigning a type to the variable 'nbinvalid_skipped' (line 1753)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1753, 12), 'nbinvalid_skipped', len_call_result_119952)
    
    # Assigning a Subscript to a Name (line 1755):
    
    # Assigning a Subscript to a Name (line 1755):
    
    # Obtaining the type of the subscript
    # Getting the type of 'nbinvalid' (line 1755)
    nbinvalid_119953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1755, 31), 'nbinvalid')
    # Getting the type of 'nbinvalid_skipped' (line 1755)
    nbinvalid_skipped_119954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1755, 43), 'nbinvalid_skipped')
    # Applying the binary operator '-' (line 1755)
    result_sub_119955 = python_operator(stypy.reporting.localization.Localization(__file__, 1755, 31), '-', nbinvalid_119953, nbinvalid_skipped_119954)
    
    slice_119956 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1755, 22), None, result_sub_119955, None)
    # Getting the type of 'invalid' (line 1755)
    invalid_119957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1755, 22), 'invalid')
    # Obtaining the member '__getitem__' of a type (line 1755)
    getitem___119958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1755, 22), invalid_119957, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1755)
    subscript_call_result_119959 = invoke(stypy.reporting.localization.Localization(__file__, 1755, 22), getitem___119958, slice_119956)
    
    # Assigning a type to the variable 'invalid' (line 1755)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1755, 12), 'invalid', subscript_call_result_119959)
    
    # Getting the type of 'skip_footer' (line 1756)
    skip_footer_119960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1756, 12), 'skip_footer')
    # Getting the type of 'nbinvalid_skipped' (line 1756)
    nbinvalid_skipped_119961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1756, 27), 'nbinvalid_skipped')
    # Applying the binary operator '-=' (line 1756)
    result_isub_119962 = python_operator(stypy.reporting.localization.Localization(__file__, 1756, 12), '-=', skip_footer_119960, nbinvalid_skipped_119961)
    # Assigning a type to the variable 'skip_footer' (line 1756)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1756, 12), 'skip_footer', result_isub_119962)
    
    # SSA join for if statement (line 1752)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a ListComp to a Name (line 1762):
    
    # Assigning a ListComp to a Name (line 1762):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'invalid' (line 1763)
    invalid_119968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1763, 33), 'invalid')
    comprehension_119969 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1762, 18), invalid_119968)
    # Assigning a type to the variable 'i' (line 1762)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1762, 18), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1762, 18), comprehension_119969))
    # Assigning a type to the variable 'nb' (line 1762)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1762, 18), 'nb', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1762, 18), comprehension_119969))
    # Getting the type of 'template' (line 1762)
    template_119963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1762, 18), 'template')
    
    # Obtaining an instance of the builtin type 'tuple' (line 1762)
    tuple_119964 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1762, 30), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1762)
    # Adding element type (line 1762)
    # Getting the type of 'i' (line 1762)
    i_119965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1762, 30), 'i')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1762, 30), tuple_119964, i_119965)
    # Adding element type (line 1762)
    # Getting the type of 'nb' (line 1762)
    nb_119966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1762, 33), 'nb')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1762, 30), tuple_119964, nb_119966)
    
    # Applying the binary operator '%' (line 1762)
    result_mod_119967 = python_operator(stypy.reporting.localization.Localization(__file__, 1762, 18), '%', template_119963, tuple_119964)
    
    list_119970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1762, 18), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1762, 18), list_119970, result_mod_119967)
    # Assigning a type to the variable 'errmsg' (line 1762)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1762, 8), 'errmsg', list_119970)
    
    
    # Call to len(...): (line 1764)
    # Processing the call arguments (line 1764)
    # Getting the type of 'errmsg' (line 1764)
    errmsg_119972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1764, 15), 'errmsg', False)
    # Processing the call keyword arguments (line 1764)
    kwargs_119973 = {}
    # Getting the type of 'len' (line 1764)
    len_119971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1764, 11), 'len', False)
    # Calling len(args, kwargs) (line 1764)
    len_call_result_119974 = invoke(stypy.reporting.localization.Localization(__file__, 1764, 11), len_119971, *[errmsg_119972], **kwargs_119973)
    
    # Testing the type of an if condition (line 1764)
    if_condition_119975 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1764, 8), len_call_result_119974)
    # Assigning a type to the variable 'if_condition_119975' (line 1764)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1764, 8), 'if_condition_119975', if_condition_119975)
    # SSA begins for if statement (line 1764)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to insert(...): (line 1765)
    # Processing the call arguments (line 1765)
    int_119978 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1765, 26), 'int')
    str_119979 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1765, 29), 'str', 'Some errors were detected !')
    # Processing the call keyword arguments (line 1765)
    kwargs_119980 = {}
    # Getting the type of 'errmsg' (line 1765)
    errmsg_119976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1765, 12), 'errmsg', False)
    # Obtaining the member 'insert' of a type (line 1765)
    insert_119977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1765, 12), errmsg_119976, 'insert')
    # Calling insert(args, kwargs) (line 1765)
    insert_call_result_119981 = invoke(stypy.reporting.localization.Localization(__file__, 1765, 12), insert_119977, *[int_119978, str_119979], **kwargs_119980)
    
    
    # Assigning a Call to a Name (line 1766):
    
    # Assigning a Call to a Name (line 1766):
    
    # Call to join(...): (line 1766)
    # Processing the call arguments (line 1766)
    # Getting the type of 'errmsg' (line 1766)
    errmsg_119984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1766, 31), 'errmsg', False)
    # Processing the call keyword arguments (line 1766)
    kwargs_119985 = {}
    str_119982 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1766, 21), 'str', '\n')
    # Obtaining the member 'join' of a type (line 1766)
    join_119983 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1766, 21), str_119982, 'join')
    # Calling join(args, kwargs) (line 1766)
    join_call_result_119986 = invoke(stypy.reporting.localization.Localization(__file__, 1766, 21), join_119983, *[errmsg_119984], **kwargs_119985)
    
    # Assigning a type to the variable 'errmsg' (line 1766)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1766, 12), 'errmsg', join_call_result_119986)
    
    # Getting the type of 'invalid_raise' (line 1768)
    invalid_raise_119987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1768, 15), 'invalid_raise')
    # Testing the type of an if condition (line 1768)
    if_condition_119988 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1768, 12), invalid_raise_119987)
    # Assigning a type to the variable 'if_condition_119988' (line 1768)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1768, 12), 'if_condition_119988', if_condition_119988)
    # SSA begins for if statement (line 1768)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 1769)
    # Processing the call arguments (line 1769)
    # Getting the type of 'errmsg' (line 1769)
    errmsg_119990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1769, 33), 'errmsg', False)
    # Processing the call keyword arguments (line 1769)
    kwargs_119991 = {}
    # Getting the type of 'ValueError' (line 1769)
    ValueError_119989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1769, 22), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1769)
    ValueError_call_result_119992 = invoke(stypy.reporting.localization.Localization(__file__, 1769, 22), ValueError_119989, *[errmsg_119990], **kwargs_119991)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1769, 16), ValueError_call_result_119992, 'raise parameter', BaseException)
    # SSA branch for the else part of an if statement (line 1768)
    module_type_store.open_ssa_branch('else')
    
    # Call to warn(...): (line 1772)
    # Processing the call arguments (line 1772)
    # Getting the type of 'errmsg' (line 1772)
    errmsg_119995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1772, 30), 'errmsg', False)
    # Getting the type of 'ConversionWarning' (line 1772)
    ConversionWarning_119996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1772, 38), 'ConversionWarning', False)
    # Processing the call keyword arguments (line 1772)
    kwargs_119997 = {}
    # Getting the type of 'warnings' (line 1772)
    warnings_119993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1772, 16), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 1772)
    warn_119994 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1772, 16), warnings_119993, 'warn')
    # Calling warn(args, kwargs) (line 1772)
    warn_call_result_119998 = invoke(stypy.reporting.localization.Localization(__file__, 1772, 16), warn_119994, *[errmsg_119995, ConversionWarning_119996], **kwargs_119997)
    
    # SSA join for if statement (line 1768)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1764)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1748)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'skip_footer' (line 1775)
    skip_footer_119999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1775, 7), 'skip_footer')
    int_120000 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1775, 21), 'int')
    # Applying the binary operator '>' (line 1775)
    result_gt_120001 = python_operator(stypy.reporting.localization.Localization(__file__, 1775, 7), '>', skip_footer_119999, int_120000)
    
    # Testing the type of an if condition (line 1775)
    if_condition_120002 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1775, 4), result_gt_120001)
    # Assigning a type to the variable 'if_condition_120002' (line 1775)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1775, 4), 'if_condition_120002', if_condition_120002)
    # SSA begins for if statement (line 1775)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 1776):
    
    # Assigning a Subscript to a Name (line 1776):
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'skip_footer' (line 1776)
    skip_footer_120003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1776, 22), 'skip_footer')
    # Applying the 'usub' unary operator (line 1776)
    result___neg___120004 = python_operator(stypy.reporting.localization.Localization(__file__, 1776, 21), 'usub', skip_footer_120003)
    
    slice_120005 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1776, 15), None, result___neg___120004, None)
    # Getting the type of 'rows' (line 1776)
    rows_120006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1776, 15), 'rows')
    # Obtaining the member '__getitem__' of a type (line 1776)
    getitem___120007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1776, 15), rows_120006, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1776)
    subscript_call_result_120008 = invoke(stypy.reporting.localization.Localization(__file__, 1776, 15), getitem___120007, slice_120005)
    
    # Assigning a type to the variable 'rows' (line 1776)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1776, 8), 'rows', subscript_call_result_120008)
    
    # Getting the type of 'usemask' (line 1777)
    usemask_120009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 11), 'usemask')
    # Testing the type of an if condition (line 1777)
    if_condition_120010 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1777, 8), usemask_120009)
    # Assigning a type to the variable 'if_condition_120010' (line 1777)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1777, 8), 'if_condition_120010', if_condition_120010)
    # SSA begins for if statement (line 1777)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 1778):
    
    # Assigning a Subscript to a Name (line 1778):
    
    # Obtaining the type of the subscript
    
    # Getting the type of 'skip_footer' (line 1778)
    skip_footer_120011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1778, 28), 'skip_footer')
    # Applying the 'usub' unary operator (line 1778)
    result___neg___120012 = python_operator(stypy.reporting.localization.Localization(__file__, 1778, 27), 'usub', skip_footer_120011)
    
    slice_120013 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1778, 20), None, result___neg___120012, None)
    # Getting the type of 'masks' (line 1778)
    masks_120014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1778, 20), 'masks')
    # Obtaining the member '__getitem__' of a type (line 1778)
    getitem___120015 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1778, 20), masks_120014, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1778)
    subscript_call_result_120016 = invoke(stypy.reporting.localization.Localization(__file__, 1778, 20), getitem___120015, slice_120013)
    
    # Assigning a type to the variable 'masks' (line 1778)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1778, 12), 'masks', subscript_call_result_120016)
    # SSA join for if statement (line 1777)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1775)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'loose' (line 1782)
    loose_120017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1782, 7), 'loose')
    # Testing the type of an if condition (line 1782)
    if_condition_120018 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1782, 4), loose_120017)
    # Assigning a type to the variable 'if_condition_120018' (line 1782)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1782, 4), 'if_condition_120018', if_condition_120018)
    # SSA begins for if statement (line 1782)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1783):
    
    # Assigning a Call to a Name (line 1783):
    
    # Call to list(...): (line 1783)
    # Processing the call arguments (line 1783)
    
    # Call to zip(...): (line 1784)
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to enumerate(...): (line 1785)
    # Processing the call arguments (line 1785)
    # Getting the type of 'converters' (line 1785)
    converters_120037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 45), 'converters', False)
    # Processing the call keyword arguments (line 1785)
    kwargs_120038 = {}
    # Getting the type of 'enumerate' (line 1785)
    enumerate_120036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1785, 35), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 1785)
    enumerate_call_result_120039 = invoke(stypy.reporting.localization.Localization(__file__, 1785, 35), enumerate_120036, *[converters_120037], **kwargs_120038)
    
    comprehension_120040 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1784, 18), enumerate_call_result_120039)
    # Assigning a type to the variable 'i' (line 1784)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1784, 18), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1784, 18), comprehension_120040))
    # Assigning a type to the variable 'conv' (line 1784)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1784, 18), 'conv', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1784, 18), comprehension_120040))
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to map(...): (line 1784)
    # Processing the call arguments (line 1784)
    
    # Call to itemgetter(...): (line 1784)
    # Processing the call arguments (line 1784)
    # Getting the type of 'i' (line 1784)
    i_120028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 65), 'i', False)
    # Processing the call keyword arguments (line 1784)
    kwargs_120029 = {}
    # Getting the type of 'itemgetter' (line 1784)
    itemgetter_120027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 54), 'itemgetter', False)
    # Calling itemgetter(args, kwargs) (line 1784)
    itemgetter_call_result_120030 = invoke(stypy.reporting.localization.Localization(__file__, 1784, 54), itemgetter_120027, *[i_120028], **kwargs_120029)
    
    # Getting the type of 'rows' (line 1784)
    rows_120031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 69), 'rows', False)
    # Processing the call keyword arguments (line 1784)
    kwargs_120032 = {}
    # Getting the type of 'map' (line 1784)
    map_120026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 50), 'map', False)
    # Calling map(args, kwargs) (line 1784)
    map_call_result_120033 = invoke(stypy.reporting.localization.Localization(__file__, 1784, 50), map_120026, *[itemgetter_call_result_120030, rows_120031], **kwargs_120032)
    
    comprehension_120034 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1784, 19), map_call_result_120033)
    # Assigning a type to the variable '_r' (line 1784)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1784, 19), '_r', comprehension_120034)
    
    # Call to _loose_call(...): (line 1784)
    # Processing the call arguments (line 1784)
    # Getting the type of '_r' (line 1784)
    _r_120023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 36), '_r', False)
    # Processing the call keyword arguments (line 1784)
    kwargs_120024 = {}
    # Getting the type of 'conv' (line 1784)
    conv_120021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 19), 'conv', False)
    # Obtaining the member '_loose_call' of a type (line 1784)
    _loose_call_120022 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1784, 19), conv_120021, '_loose_call')
    # Calling _loose_call(args, kwargs) (line 1784)
    _loose_call_call_result_120025 = invoke(stypy.reporting.localization.Localization(__file__, 1784, 19), _loose_call_120022, *[_r_120023], **kwargs_120024)
    
    list_120035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1784, 19), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1784, 19), list_120035, _loose_call_call_result_120025)
    list_120041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1784, 18), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1784, 18), list_120041, list_120035)
    # Processing the call keyword arguments (line 1784)
    kwargs_120042 = {}
    # Getting the type of 'zip' (line 1784)
    zip_120020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 12), 'zip', False)
    # Calling zip(args, kwargs) (line 1784)
    zip_call_result_120043 = invoke(stypy.reporting.localization.Localization(__file__, 1784, 12), zip_120020, *[list_120041], **kwargs_120042)
    
    # Processing the call keyword arguments (line 1783)
    kwargs_120044 = {}
    # Getting the type of 'list' (line 1783)
    list_120019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1783, 15), 'list', False)
    # Calling list(args, kwargs) (line 1783)
    list_call_result_120045 = invoke(stypy.reporting.localization.Localization(__file__, 1783, 15), list_120019, *[zip_call_result_120043], **kwargs_120044)
    
    # Assigning a type to the variable 'rows' (line 1783)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1783, 8), 'rows', list_call_result_120045)
    # SSA branch for the else part of an if statement (line 1782)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1787):
    
    # Assigning a Call to a Name (line 1787):
    
    # Call to list(...): (line 1787)
    # Processing the call arguments (line 1787)
    
    # Call to zip(...): (line 1788)
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to enumerate(...): (line 1789)
    # Processing the call arguments (line 1789)
    # Getting the type of 'converters' (line 1789)
    converters_120064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1789, 45), 'converters', False)
    # Processing the call keyword arguments (line 1789)
    kwargs_120065 = {}
    # Getting the type of 'enumerate' (line 1789)
    enumerate_120063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1789, 35), 'enumerate', False)
    # Calling enumerate(args, kwargs) (line 1789)
    enumerate_call_result_120066 = invoke(stypy.reporting.localization.Localization(__file__, 1789, 35), enumerate_120063, *[converters_120064], **kwargs_120065)
    
    comprehension_120067 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1788, 18), enumerate_call_result_120066)
    # Assigning a type to the variable 'i' (line 1788)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1788, 18), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1788, 18), comprehension_120067))
    # Assigning a type to the variable 'conv' (line 1788)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1788, 18), 'conv', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1788, 18), comprehension_120067))
    # Calculating list comprehension
    # Calculating comprehension expression
    
    # Call to map(...): (line 1788)
    # Processing the call arguments (line 1788)
    
    # Call to itemgetter(...): (line 1788)
    # Processing the call arguments (line 1788)
    # Getting the type of 'i' (line 1788)
    i_120055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 66), 'i', False)
    # Processing the call keyword arguments (line 1788)
    kwargs_120056 = {}
    # Getting the type of 'itemgetter' (line 1788)
    itemgetter_120054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 55), 'itemgetter', False)
    # Calling itemgetter(args, kwargs) (line 1788)
    itemgetter_call_result_120057 = invoke(stypy.reporting.localization.Localization(__file__, 1788, 55), itemgetter_120054, *[i_120055], **kwargs_120056)
    
    # Getting the type of 'rows' (line 1788)
    rows_120058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 70), 'rows', False)
    # Processing the call keyword arguments (line 1788)
    kwargs_120059 = {}
    # Getting the type of 'map' (line 1788)
    map_120053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 51), 'map', False)
    # Calling map(args, kwargs) (line 1788)
    map_call_result_120060 = invoke(stypy.reporting.localization.Localization(__file__, 1788, 51), map_120053, *[itemgetter_call_result_120057, rows_120058], **kwargs_120059)
    
    comprehension_120061 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1788, 19), map_call_result_120060)
    # Assigning a type to the variable '_r' (line 1788)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1788, 19), '_r', comprehension_120061)
    
    # Call to _strict_call(...): (line 1788)
    # Processing the call arguments (line 1788)
    # Getting the type of '_r' (line 1788)
    _r_120050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 37), '_r', False)
    # Processing the call keyword arguments (line 1788)
    kwargs_120051 = {}
    # Getting the type of 'conv' (line 1788)
    conv_120048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 19), 'conv', False)
    # Obtaining the member '_strict_call' of a type (line 1788)
    _strict_call_120049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1788, 19), conv_120048, '_strict_call')
    # Calling _strict_call(args, kwargs) (line 1788)
    _strict_call_call_result_120052 = invoke(stypy.reporting.localization.Localization(__file__, 1788, 19), _strict_call_120049, *[_r_120050], **kwargs_120051)
    
    list_120062 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1788, 19), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1788, 19), list_120062, _strict_call_call_result_120052)
    list_120068 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1788, 18), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1788, 18), list_120068, list_120062)
    # Processing the call keyword arguments (line 1788)
    kwargs_120069 = {}
    # Getting the type of 'zip' (line 1788)
    zip_120047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 12), 'zip', False)
    # Calling zip(args, kwargs) (line 1788)
    zip_call_result_120070 = invoke(stypy.reporting.localization.Localization(__file__, 1788, 12), zip_120047, *[list_120068], **kwargs_120069)
    
    # Processing the call keyword arguments (line 1787)
    kwargs_120071 = {}
    # Getting the type of 'list' (line 1787)
    list_120046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1787, 15), 'list', False)
    # Calling list(args, kwargs) (line 1787)
    list_call_result_120072 = invoke(stypy.reporting.localization.Localization(__file__, 1787, 15), list_120046, *[zip_call_result_120070], **kwargs_120071)
    
    # Assigning a type to the variable 'rows' (line 1787)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1787, 8), 'rows', list_call_result_120072)
    # SSA join for if statement (line 1782)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Name (line 1792):
    
    # Assigning a Name to a Name (line 1792):
    # Getting the type of 'rows' (line 1792)
    rows_120073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 11), 'rows')
    # Assigning a type to the variable 'data' (line 1792)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1792, 4), 'data', rows_120073)
    
    # Type idiom detected: calculating its left and rigth part (line 1793)
    # Getting the type of 'dtype' (line 1793)
    dtype_120074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 7), 'dtype')
    # Getting the type of 'None' (line 1793)
    None_120075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 16), 'None')
    
    (may_be_120076, more_types_in_union_120077) = may_be_none(dtype_120074, None_120075)

    if may_be_120076:

        if more_types_in_union_120077:
            # Runtime conditional SSA (line 1793)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a ListComp to a Name (line 1795):
        
        # Assigning a ListComp to a Name (line 1795):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'converters' (line 1795)
        converters_120080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 46), 'converters')
        comprehension_120081 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1795, 24), converters_120080)
        # Assigning a type to the variable 'conv' (line 1795)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1795, 24), 'conv', comprehension_120081)
        # Getting the type of 'conv' (line 1795)
        conv_120078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 24), 'conv')
        # Obtaining the member 'type' of a type (line 1795)
        type_120079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1795, 24), conv_120078, 'type')
        list_120082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1795, 24), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1795, 24), list_120082, type_120079)
        # Assigning a type to the variable 'column_types' (line 1795)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1795, 8), 'column_types', list_120082)
        
        # Assigning a ListComp to a Name (line 1797):
        
        # Assigning a ListComp to a Name (line 1797):
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to enumerate(...): (line 1797)
        # Processing the call arguments (line 1797)
        # Getting the type of 'column_types' (line 1797)
        column_types_120094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1797, 47), 'column_types', False)
        # Processing the call keyword arguments (line 1797)
        kwargs_120095 = {}
        # Getting the type of 'enumerate' (line 1797)
        enumerate_120093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1797, 37), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 1797)
        enumerate_call_result_120096 = invoke(stypy.reporting.localization.Localization(__file__, 1797, 37), enumerate_120093, *[column_types_120094], **kwargs_120095)
        
        comprehension_120097 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1797, 21), enumerate_call_result_120096)
        # Assigning a type to the variable 'i' (line 1797)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1797, 21), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1797, 21), comprehension_120097))
        # Assigning a type to the variable 'v' (line 1797)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1797, 21), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1797, 21), comprehension_120097))
        
        # Getting the type of 'v' (line 1798)
        v_120084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 24), 'v')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1798)
        tuple_120085 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1798, 30), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1798)
        # Adding element type (line 1798)
        
        # Call to type(...): (line 1798)
        # Processing the call arguments (line 1798)
        str_120087 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1798, 35), 'str', 'S')
        # Processing the call keyword arguments (line 1798)
        kwargs_120088 = {}
        # Getting the type of 'type' (line 1798)
        type_120086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 30), 'type', False)
        # Calling type(args, kwargs) (line 1798)
        type_call_result_120089 = invoke(stypy.reporting.localization.Localization(__file__, 1798, 30), type_120086, *[str_120087], **kwargs_120088)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1798, 30), tuple_120085, type_call_result_120089)
        # Adding element type (line 1798)
        # Getting the type of 'np' (line 1798)
        np_120090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 41), 'np')
        # Obtaining the member 'string_' of a type (line 1798)
        string__120091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1798, 41), np_120090, 'string_')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1798, 30), tuple_120085, string__120091)
        
        # Applying the binary operator 'in' (line 1798)
        result_contains_120092 = python_operator(stypy.reporting.localization.Localization(__file__, 1798, 24), 'in', v_120084, tuple_120085)
        
        # Getting the type of 'i' (line 1797)
        i_120083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1797, 21), 'i')
        list_120098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1797, 21), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1797, 21), list_120098, i_120083)
        # Assigning a type to the variable 'strcolidx' (line 1797)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1797, 8), 'strcolidx', list_120098)
        
        # Getting the type of 'strcolidx' (line 1800)
        strcolidx_120099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 17), 'strcolidx')
        # Testing the type of a for loop iterable (line 1800)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1800, 8), strcolidx_120099)
        # Getting the type of the for loop variable (line 1800)
        for_loop_var_120100 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1800, 8), strcolidx_120099)
        # Assigning a type to the variable 'i' (line 1800)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1800, 8), 'i', for_loop_var_120100)
        # SSA begins for a for statement (line 1800)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a BinOp to a Subscript (line 1801):
        
        # Assigning a BinOp to a Subscript (line 1801):
        str_120101 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1801, 30), 'str', '|S%i')
        
        # Call to max(...): (line 1801)
        # Processing the call arguments (line 1801)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 1801, 43, True)
        # Calculating comprehension expression
        # Getting the type of 'data' (line 1801)
        data_120110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1801, 66), 'data', False)
        comprehension_120111 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1801, 43), data_120110)
        # Assigning a type to the variable 'row' (line 1801)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1801, 43), 'row', comprehension_120111)
        
        # Call to len(...): (line 1801)
        # Processing the call arguments (line 1801)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1801)
        i_120104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1801, 51), 'i', False)
        # Getting the type of 'row' (line 1801)
        row_120105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1801, 47), 'row', False)
        # Obtaining the member '__getitem__' of a type (line 1801)
        getitem___120106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1801, 47), row_120105, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1801)
        subscript_call_result_120107 = invoke(stypy.reporting.localization.Localization(__file__, 1801, 47), getitem___120106, i_120104)
        
        # Processing the call keyword arguments (line 1801)
        kwargs_120108 = {}
        # Getting the type of 'len' (line 1801)
        len_120103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1801, 43), 'len', False)
        # Calling len(args, kwargs) (line 1801)
        len_call_result_120109 = invoke(stypy.reporting.localization.Localization(__file__, 1801, 43), len_120103, *[subscript_call_result_120107], **kwargs_120108)
        
        list_120112 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1801, 43), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1801, 43), list_120112, len_call_result_120109)
        # Processing the call keyword arguments (line 1801)
        kwargs_120113 = {}
        # Getting the type of 'max' (line 1801)
        max_120102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1801, 39), 'max', False)
        # Calling max(args, kwargs) (line 1801)
        max_call_result_120114 = invoke(stypy.reporting.localization.Localization(__file__, 1801, 39), max_120102, *[list_120112], **kwargs_120113)
        
        # Applying the binary operator '%' (line 1801)
        result_mod_120115 = python_operator(stypy.reporting.localization.Localization(__file__, 1801, 30), '%', str_120101, max_call_result_120114)
        
        # Getting the type of 'column_types' (line 1801)
        column_types_120116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1801, 12), 'column_types')
        # Getting the type of 'i' (line 1801)
        i_120117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1801, 25), 'i')
        # Storing an element on a container (line 1801)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1801, 12), column_types_120116, (i_120117, result_mod_120115))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 1803)
        # Getting the type of 'names' (line 1803)
        names_120118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1803, 11), 'names')
        # Getting the type of 'None' (line 1803)
        None_120119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1803, 20), 'None')
        
        (may_be_120120, more_types_in_union_120121) = may_be_none(names_120118, None_120119)

        if may_be_120120:

            if more_types_in_union_120121:
                # Runtime conditional SSA (line 1803)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 1805):
            
            # Assigning a Call to a Name (line 1805):
            
            # Call to set(...): (line 1805)
            # Processing the call arguments (line 1805)
            # Calculating list comprehension
            # Calculating comprehension expression
            # Getting the type of 'converters' (line 1805)
            converters_120127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 40), 'converters', False)
            comprehension_120128 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1805, 24), converters_120127)
            # Assigning a type to the variable 'c' (line 1805)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1805, 24), 'c', comprehension_120128)
            # Getting the type of 'c' (line 1805)
            c_120125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 54), 'c', False)
            # Obtaining the member '_checked' of a type (line 1805)
            _checked_120126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1805, 54), c_120125, '_checked')
            # Getting the type of 'c' (line 1805)
            c_120123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 24), 'c', False)
            # Obtaining the member 'type' of a type (line 1805)
            type_120124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1805, 24), c_120123, 'type')
            list_120129 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1805, 24), 'list')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1805, 24), list_120129, type_120124)
            # Processing the call keyword arguments (line 1805)
            kwargs_120130 = {}
            # Getting the type of 'set' (line 1805)
            set_120122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 19), 'set', False)
            # Calling set(args, kwargs) (line 1805)
            set_call_result_120131 = invoke(stypy.reporting.localization.Localization(__file__, 1805, 19), set_120122, *[list_120129], **kwargs_120130)
            
            # Assigning a type to the variable 'base' (line 1805)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1805, 12), 'base', set_call_result_120131)
            
            
            
            # Call to len(...): (line 1806)
            # Processing the call arguments (line 1806)
            # Getting the type of 'base' (line 1806)
            base_120133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1806, 19), 'base', False)
            # Processing the call keyword arguments (line 1806)
            kwargs_120134 = {}
            # Getting the type of 'len' (line 1806)
            len_120132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1806, 15), 'len', False)
            # Calling len(args, kwargs) (line 1806)
            len_call_result_120135 = invoke(stypy.reporting.localization.Localization(__file__, 1806, 15), len_120132, *[base_120133], **kwargs_120134)
            
            int_120136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1806, 28), 'int')
            # Applying the binary operator '==' (line 1806)
            result_eq_120137 = python_operator(stypy.reporting.localization.Localization(__file__, 1806, 15), '==', len_call_result_120135, int_120136)
            
            # Testing the type of an if condition (line 1806)
            if_condition_120138 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1806, 12), result_eq_120137)
            # Assigning a type to the variable 'if_condition_120138' (line 1806)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1806, 12), 'if_condition_120138', if_condition_120138)
            # SSA begins for if statement (line 1806)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Tuple to a Tuple (line 1807):
            
            # Assigning a Subscript to a Name (line 1807):
            
            # Obtaining the type of the subscript
            int_120139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1807, 47), 'int')
            
            # Call to list(...): (line 1807)
            # Processing the call arguments (line 1807)
            # Getting the type of 'base' (line 1807)
            base_120141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1807, 41), 'base', False)
            # Processing the call keyword arguments (line 1807)
            kwargs_120142 = {}
            # Getting the type of 'list' (line 1807)
            list_120140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1807, 36), 'list', False)
            # Calling list(args, kwargs) (line 1807)
            list_call_result_120143 = invoke(stypy.reporting.localization.Localization(__file__, 1807, 36), list_120140, *[base_120141], **kwargs_120142)
            
            # Obtaining the member '__getitem__' of a type (line 1807)
            getitem___120144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1807, 36), list_call_result_120143, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1807)
            subscript_call_result_120145 = invoke(stypy.reporting.localization.Localization(__file__, 1807, 36), getitem___120144, int_120139)
            
            # Assigning a type to the variable 'tuple_assignment_117143' (line 1807)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1807, 16), 'tuple_assignment_117143', subscript_call_result_120145)
            
            # Assigning a Attribute to a Name (line 1807):
            # Getting the type of 'np' (line 1807)
            np_120146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1807, 51), 'np')
            # Obtaining the member 'bool' of a type (line 1807)
            bool_120147 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1807, 51), np_120146, 'bool')
            # Assigning a type to the variable 'tuple_assignment_117144' (line 1807)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1807, 16), 'tuple_assignment_117144', bool_120147)
            
            # Assigning a Name to a Name (line 1807):
            # Getting the type of 'tuple_assignment_117143' (line 1807)
            tuple_assignment_117143_120148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1807, 16), 'tuple_assignment_117143')
            # Assigning a type to the variable 'ddtype' (line 1807)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1807, 17), 'ddtype', tuple_assignment_117143_120148)
            
            # Assigning a Name to a Name (line 1807):
            # Getting the type of 'tuple_assignment_117144' (line 1807)
            tuple_assignment_117144_120149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1807, 16), 'tuple_assignment_117144')
            # Assigning a type to the variable 'mdtype' (line 1807)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1807, 25), 'mdtype', tuple_assignment_117144_120149)
            # SSA branch for the else part of an if statement (line 1806)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a ListComp to a Name (line 1809):
            
            # Assigning a ListComp to a Name (line 1809):
            # Calculating list comprehension
            # Calculating comprehension expression
            
            # Call to enumerate(...): (line 1810)
            # Processing the call arguments (line 1810)
            # Getting the type of 'column_types' (line 1810)
            column_types_120156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1810, 51), 'column_types', False)
            # Processing the call keyword arguments (line 1810)
            kwargs_120157 = {}
            # Getting the type of 'enumerate' (line 1810)
            enumerate_120155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1810, 41), 'enumerate', False)
            # Calling enumerate(args, kwargs) (line 1810)
            enumerate_call_result_120158 = invoke(stypy.reporting.localization.Localization(__file__, 1810, 41), enumerate_120155, *[column_types_120156], **kwargs_120157)
            
            comprehension_120159 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1809, 26), enumerate_call_result_120158)
            # Assigning a type to the variable 'i' (line 1809)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1809, 26), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1809, 26), comprehension_120159))
            # Assigning a type to the variable 'dt' (line 1809)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1809, 26), 'dt', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1809, 26), comprehension_120159))
            
            # Obtaining an instance of the builtin type 'tuple' (line 1809)
            tuple_120150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1809, 27), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1809)
            # Adding element type (line 1809)
            # Getting the type of 'defaultfmt' (line 1809)
            defaultfmt_120151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 27), 'defaultfmt')
            # Getting the type of 'i' (line 1809)
            i_120152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 40), 'i')
            # Applying the binary operator '%' (line 1809)
            result_mod_120153 = python_operator(stypy.reporting.localization.Localization(__file__, 1809, 27), '%', defaultfmt_120151, i_120152)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1809, 27), tuple_120150, result_mod_120153)
            # Adding element type (line 1809)
            # Getting the type of 'dt' (line 1809)
            dt_120154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1809, 43), 'dt')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1809, 27), tuple_120150, dt_120154)
            
            list_120160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1809, 26), 'list')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1809, 26), list_120160, tuple_120150)
            # Assigning a type to the variable 'ddtype' (line 1809)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1809, 16), 'ddtype', list_120160)
            
            # Getting the type of 'usemask' (line 1811)
            usemask_120161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 19), 'usemask')
            # Testing the type of an if condition (line 1811)
            if_condition_120162 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1811, 16), usemask_120161)
            # Assigning a type to the variable 'if_condition_120162' (line 1811)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1811, 16), 'if_condition_120162', if_condition_120162)
            # SSA begins for if statement (line 1811)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a ListComp to a Name (line 1812):
            
            # Assigning a ListComp to a Name (line 1812):
            # Calculating list comprehension
            # Calculating comprehension expression
            
            # Call to enumerate(...): (line 1813)
            # Processing the call arguments (line 1813)
            # Getting the type of 'column_types' (line 1813)
            column_types_120170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 55), 'column_types', False)
            # Processing the call keyword arguments (line 1813)
            kwargs_120171 = {}
            # Getting the type of 'enumerate' (line 1813)
            enumerate_120169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 45), 'enumerate', False)
            # Calling enumerate(args, kwargs) (line 1813)
            enumerate_call_result_120172 = invoke(stypy.reporting.localization.Localization(__file__, 1813, 45), enumerate_120169, *[column_types_120170], **kwargs_120171)
            
            comprehension_120173 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1812, 30), enumerate_call_result_120172)
            # Assigning a type to the variable 'i' (line 1812)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1812, 30), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1812, 30), comprehension_120173))
            # Assigning a type to the variable 'dt' (line 1812)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1812, 30), 'dt', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1812, 30), comprehension_120173))
            
            # Obtaining an instance of the builtin type 'tuple' (line 1812)
            tuple_120163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1812, 31), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1812)
            # Adding element type (line 1812)
            # Getting the type of 'defaultfmt' (line 1812)
            defaultfmt_120164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1812, 31), 'defaultfmt')
            # Getting the type of 'i' (line 1812)
            i_120165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1812, 44), 'i')
            # Applying the binary operator '%' (line 1812)
            result_mod_120166 = python_operator(stypy.reporting.localization.Localization(__file__, 1812, 31), '%', defaultfmt_120164, i_120165)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1812, 31), tuple_120163, result_mod_120166)
            # Adding element type (line 1812)
            # Getting the type of 'np' (line 1812)
            np_120167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1812, 47), 'np')
            # Obtaining the member 'bool' of a type (line 1812)
            bool_120168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1812, 47), np_120167, 'bool')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1812, 31), tuple_120163, bool_120168)
            
            list_120174 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1812, 30), 'list')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1812, 30), list_120174, tuple_120163)
            # Assigning a type to the variable 'mdtype' (line 1812)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1812, 20), 'mdtype', list_120174)
            # SSA join for if statement (line 1811)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 1806)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_120121:
                # Runtime conditional SSA for else branch (line 1803)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_120120) or more_types_in_union_120121):
            
            # Assigning a Call to a Name (line 1815):
            
            # Assigning a Call to a Name (line 1815):
            
            # Call to list(...): (line 1815)
            # Processing the call arguments (line 1815)
            
            # Call to zip(...): (line 1815)
            # Processing the call arguments (line 1815)
            # Getting the type of 'names' (line 1815)
            names_120177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 30), 'names', False)
            # Getting the type of 'column_types' (line 1815)
            column_types_120178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 37), 'column_types', False)
            # Processing the call keyword arguments (line 1815)
            kwargs_120179 = {}
            # Getting the type of 'zip' (line 1815)
            zip_120176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 26), 'zip', False)
            # Calling zip(args, kwargs) (line 1815)
            zip_call_result_120180 = invoke(stypy.reporting.localization.Localization(__file__, 1815, 26), zip_120176, *[names_120177, column_types_120178], **kwargs_120179)
            
            # Processing the call keyword arguments (line 1815)
            kwargs_120181 = {}
            # Getting the type of 'list' (line 1815)
            list_120175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1815, 21), 'list', False)
            # Calling list(args, kwargs) (line 1815)
            list_call_result_120182 = invoke(stypy.reporting.localization.Localization(__file__, 1815, 21), list_120175, *[zip_call_result_120180], **kwargs_120181)
            
            # Assigning a type to the variable 'ddtype' (line 1815)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1815, 12), 'ddtype', list_call_result_120182)
            
            # Assigning a Call to a Name (line 1816):
            
            # Assigning a Call to a Name (line 1816):
            
            # Call to list(...): (line 1816)
            # Processing the call arguments (line 1816)
            
            # Call to zip(...): (line 1816)
            # Processing the call arguments (line 1816)
            # Getting the type of 'names' (line 1816)
            names_120185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1816, 30), 'names', False)
            
            # Obtaining an instance of the builtin type 'list' (line 1816)
            list_120186 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1816, 37), 'list')
            # Adding type elements to the builtin type 'list' instance (line 1816)
            # Adding element type (line 1816)
            # Getting the type of 'np' (line 1816)
            np_120187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1816, 38), 'np', False)
            # Obtaining the member 'bool' of a type (line 1816)
            bool_120188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1816, 38), np_120187, 'bool')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1816, 37), list_120186, bool_120188)
            
            
            # Call to len(...): (line 1816)
            # Processing the call arguments (line 1816)
            # Getting the type of 'column_types' (line 1816)
            column_types_120190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1816, 53), 'column_types', False)
            # Processing the call keyword arguments (line 1816)
            kwargs_120191 = {}
            # Getting the type of 'len' (line 1816)
            len_120189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1816, 49), 'len', False)
            # Calling len(args, kwargs) (line 1816)
            len_call_result_120192 = invoke(stypy.reporting.localization.Localization(__file__, 1816, 49), len_120189, *[column_types_120190], **kwargs_120191)
            
            # Applying the binary operator '*' (line 1816)
            result_mul_120193 = python_operator(stypy.reporting.localization.Localization(__file__, 1816, 37), '*', list_120186, len_call_result_120192)
            
            # Processing the call keyword arguments (line 1816)
            kwargs_120194 = {}
            # Getting the type of 'zip' (line 1816)
            zip_120184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1816, 26), 'zip', False)
            # Calling zip(args, kwargs) (line 1816)
            zip_call_result_120195 = invoke(stypy.reporting.localization.Localization(__file__, 1816, 26), zip_120184, *[names_120185, result_mul_120193], **kwargs_120194)
            
            # Processing the call keyword arguments (line 1816)
            kwargs_120196 = {}
            # Getting the type of 'list' (line 1816)
            list_120183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1816, 21), 'list', False)
            # Calling list(args, kwargs) (line 1816)
            list_call_result_120197 = invoke(stypy.reporting.localization.Localization(__file__, 1816, 21), list_120183, *[zip_call_result_120195], **kwargs_120196)
            
            # Assigning a type to the variable 'mdtype' (line 1816)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1816, 12), 'mdtype', list_call_result_120197)

            if (may_be_120120 and more_types_in_union_120121):
                # SSA join for if statement (line 1803)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 1817):
        
        # Assigning a Call to a Name (line 1817):
        
        # Call to array(...): (line 1817)
        # Processing the call arguments (line 1817)
        # Getting the type of 'data' (line 1817)
        data_120200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 26), 'data', False)
        # Processing the call keyword arguments (line 1817)
        # Getting the type of 'ddtype' (line 1817)
        ddtype_120201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 38), 'ddtype', False)
        keyword_120202 = ddtype_120201
        kwargs_120203 = {'dtype': keyword_120202}
        # Getting the type of 'np' (line 1817)
        np_120198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 17), 'np', False)
        # Obtaining the member 'array' of a type (line 1817)
        array_120199 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1817, 17), np_120198, 'array')
        # Calling array(args, kwargs) (line 1817)
        array_call_result_120204 = invoke(stypy.reporting.localization.Localization(__file__, 1817, 17), array_120199, *[data_120200], **kwargs_120203)
        
        # Assigning a type to the variable 'output' (line 1817)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1817, 8), 'output', array_call_result_120204)
        
        # Getting the type of 'usemask' (line 1818)
        usemask_120205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1818, 11), 'usemask')
        # Testing the type of an if condition (line 1818)
        if_condition_120206 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1818, 8), usemask_120205)
        # Assigning a type to the variable 'if_condition_120206' (line 1818)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1818, 8), 'if_condition_120206', if_condition_120206)
        # SSA begins for if statement (line 1818)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1819):
        
        # Assigning a Call to a Name (line 1819):
        
        # Call to array(...): (line 1819)
        # Processing the call arguments (line 1819)
        # Getting the type of 'masks' (line 1819)
        masks_120209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 34), 'masks', False)
        # Processing the call keyword arguments (line 1819)
        # Getting the type of 'mdtype' (line 1819)
        mdtype_120210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 47), 'mdtype', False)
        keyword_120211 = mdtype_120210
        kwargs_120212 = {'dtype': keyword_120211}
        # Getting the type of 'np' (line 1819)
        np_120207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 25), 'np', False)
        # Obtaining the member 'array' of a type (line 1819)
        array_120208 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1819, 25), np_120207, 'array')
        # Calling array(args, kwargs) (line 1819)
        array_call_result_120213 = invoke(stypy.reporting.localization.Localization(__file__, 1819, 25), array_120208, *[masks_120209], **kwargs_120212)
        
        # Assigning a type to the variable 'outputmask' (line 1819)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1819, 12), 'outputmask', array_call_result_120213)
        # SSA join for if statement (line 1818)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_120077:
            # Runtime conditional SSA for else branch (line 1793)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_120076) or more_types_in_union_120077):
        
        
        # Evaluating a boolean operation
        # Getting the type of 'names' (line 1822)
        names_120214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1822, 11), 'names')
        # Getting the type of 'dtype' (line 1822)
        dtype_120215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1822, 21), 'dtype')
        # Obtaining the member 'names' of a type (line 1822)
        names_120216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1822, 21), dtype_120215, 'names')
        # Applying the binary operator 'and' (line 1822)
        result_and_keyword_120217 = python_operator(stypy.reporting.localization.Localization(__file__, 1822, 11), 'and', names_120214, names_120216)
        
        # Testing the type of an if condition (line 1822)
        if_condition_120218 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1822, 8), result_and_keyword_120217)
        # Assigning a type to the variable 'if_condition_120218' (line 1822)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1822, 8), 'if_condition_120218', if_condition_120218)
        # SSA begins for if statement (line 1822)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 1823):
        
        # Assigning a Name to a Attribute (line 1823):
        # Getting the type of 'names' (line 1823)
        names_120219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1823, 26), 'names')
        # Getting the type of 'dtype' (line 1823)
        dtype_120220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1823, 12), 'dtype')
        # Setting the type of the member 'names' of a type (line 1823)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1823, 12), dtype_120220, 'names', names_120219)
        # SSA join for if statement (line 1822)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to len(...): (line 1825)
        # Processing the call arguments (line 1825)
        # Getting the type of 'dtype_flat' (line 1825)
        dtype_flat_120222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1825, 15), 'dtype_flat', False)
        # Processing the call keyword arguments (line 1825)
        kwargs_120223 = {}
        # Getting the type of 'len' (line 1825)
        len_120221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1825, 11), 'len', False)
        # Calling len(args, kwargs) (line 1825)
        len_call_result_120224 = invoke(stypy.reporting.localization.Localization(__file__, 1825, 11), len_120221, *[dtype_flat_120222], **kwargs_120223)
        
        int_120225 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1825, 29), 'int')
        # Applying the binary operator '>' (line 1825)
        result_gt_120226 = python_operator(stypy.reporting.localization.Localization(__file__, 1825, 11), '>', len_call_result_120224, int_120225)
        
        # Testing the type of an if condition (line 1825)
        if_condition_120227 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1825, 8), result_gt_120226)
        # Assigning a type to the variable 'if_condition_120227' (line 1825)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1825, 8), 'if_condition_120227', if_condition_120227)
        # SSA begins for if statement (line 1825)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        str_120228 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1830, 15), 'str', 'O')
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 1830, 23, True)
        # Calculating comprehension expression
        # Getting the type of 'dtype_flat' (line 1830)
        dtype_flat_120231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1830, 39), 'dtype_flat')
        comprehension_120232 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1830, 23), dtype_flat_120231)
        # Assigning a type to the variable '_' (line 1830)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1830, 23), '_', comprehension_120232)
        # Getting the type of '_' (line 1830)
        __120229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1830, 23), '_')
        # Obtaining the member 'char' of a type (line 1830)
        char_120230 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1830, 23), __120229, 'char')
        list_120233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1830, 23), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1830, 23), list_120233, char_120230)
        # Applying the binary operator 'in' (line 1830)
        result_contains_120234 = python_operator(stypy.reporting.localization.Localization(__file__, 1830, 15), 'in', str_120228, list_120233)
        
        # Testing the type of an if condition (line 1830)
        if_condition_120235 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1830, 12), result_contains_120234)
        # Assigning a type to the variable 'if_condition_120235' (line 1830)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1830, 12), 'if_condition_120235', if_condition_120235)
        # SSA begins for if statement (line 1830)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to has_nested_fields(...): (line 1831)
        # Processing the call arguments (line 1831)
        # Getting the type of 'dtype' (line 1831)
        dtype_120237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1831, 37), 'dtype', False)
        # Processing the call keyword arguments (line 1831)
        kwargs_120238 = {}
        # Getting the type of 'has_nested_fields' (line 1831)
        has_nested_fields_120236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1831, 19), 'has_nested_fields', False)
        # Calling has_nested_fields(args, kwargs) (line 1831)
        has_nested_fields_call_result_120239 = invoke(stypy.reporting.localization.Localization(__file__, 1831, 19), has_nested_fields_120236, *[dtype_120237], **kwargs_120238)
        
        # Testing the type of an if condition (line 1831)
        if_condition_120240 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1831, 16), has_nested_fields_call_result_120239)
        # Assigning a type to the variable 'if_condition_120240' (line 1831)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1831, 16), 'if_condition_120240', if_condition_120240)
        # SSA begins for if statement (line 1831)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to NotImplementedError(...): (line 1832)
        # Processing the call arguments (line 1832)
        str_120242 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1833, 24), 'str', 'Nested fields involving objects are not supported...')
        # Processing the call keyword arguments (line 1832)
        kwargs_120243 = {}
        # Getting the type of 'NotImplementedError' (line 1832)
        NotImplementedError_120241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1832, 26), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 1832)
        NotImplementedError_call_result_120244 = invoke(stypy.reporting.localization.Localization(__file__, 1832, 26), NotImplementedError_120241, *[str_120242], **kwargs_120243)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1832, 20), NotImplementedError_call_result_120244, 'raise parameter', BaseException)
        # SSA branch for the else part of an if statement (line 1831)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 1835):
        
        # Assigning a Call to a Name (line 1835):
        
        # Call to array(...): (line 1835)
        # Processing the call arguments (line 1835)
        # Getting the type of 'data' (line 1835)
        data_120247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1835, 38), 'data', False)
        # Processing the call keyword arguments (line 1835)
        # Getting the type of 'dtype' (line 1835)
        dtype_120248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1835, 50), 'dtype', False)
        keyword_120249 = dtype_120248
        kwargs_120250 = {'dtype': keyword_120249}
        # Getting the type of 'np' (line 1835)
        np_120245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1835, 29), 'np', False)
        # Obtaining the member 'array' of a type (line 1835)
        array_120246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1835, 29), np_120245, 'array')
        # Calling array(args, kwargs) (line 1835)
        array_call_result_120251 = invoke(stypy.reporting.localization.Localization(__file__, 1835, 29), array_120246, *[data_120247], **kwargs_120250)
        
        # Assigning a type to the variable 'output' (line 1835)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1835, 20), 'output', array_call_result_120251)
        # SSA join for if statement (line 1831)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1830)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 1837):
        
        # Assigning a Call to a Name (line 1837):
        
        # Call to array(...): (line 1837)
        # Processing the call arguments (line 1837)
        # Getting the type of 'data' (line 1837)
        data_120254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1837, 32), 'data', False)
        # Processing the call keyword arguments (line 1837)
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'dtype_flat' (line 1837)
        dtype_flat_120258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1837, 62), 'dtype_flat', False)
        comprehension_120259 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1837, 45), dtype_flat_120258)
        # Assigning a type to the variable '_' (line 1837)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1837, 45), '_', comprehension_120259)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1837)
        tuple_120255 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1837, 46), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1837)
        # Adding element type (line 1837)
        str_120256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1837, 46), 'str', '')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1837, 46), tuple_120255, str_120256)
        # Adding element type (line 1837)
        # Getting the type of '_' (line 1837)
        __120257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1837, 50), '_', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1837, 46), tuple_120255, __120257)
        
        list_120260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1837, 45), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1837, 45), list_120260, tuple_120255)
        keyword_120261 = list_120260
        kwargs_120262 = {'dtype': keyword_120261}
        # Getting the type of 'np' (line 1837)
        np_120252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1837, 23), 'np', False)
        # Obtaining the member 'array' of a type (line 1837)
        array_120253 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1837, 23), np_120252, 'array')
        # Calling array(args, kwargs) (line 1837)
        array_call_result_120263 = invoke(stypy.reporting.localization.Localization(__file__, 1837, 23), array_120253, *[data_120254], **kwargs_120262)
        
        # Assigning a type to the variable 'rows' (line 1837)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1837, 16), 'rows', array_call_result_120263)
        
        # Assigning a Call to a Name (line 1838):
        
        # Assigning a Call to a Name (line 1838):
        
        # Call to view(...): (line 1838)
        # Processing the call arguments (line 1838)
        # Getting the type of 'dtype' (line 1838)
        dtype_120266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1838, 35), 'dtype', False)
        # Processing the call keyword arguments (line 1838)
        kwargs_120267 = {}
        # Getting the type of 'rows' (line 1838)
        rows_120264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1838, 25), 'rows', False)
        # Obtaining the member 'view' of a type (line 1838)
        view_120265 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1838, 25), rows_120264, 'view')
        # Calling view(args, kwargs) (line 1838)
        view_call_result_120268 = invoke(stypy.reporting.localization.Localization(__file__, 1838, 25), view_120265, *[dtype_120266], **kwargs_120267)
        
        # Assigning a type to the variable 'output' (line 1838)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1838, 16), 'output', view_call_result_120268)
        # SSA join for if statement (line 1830)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'usemask' (line 1840)
        usemask_120269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1840, 15), 'usemask')
        # Testing the type of an if condition (line 1840)
        if_condition_120270 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1840, 12), usemask_120269)
        # Assigning a type to the variable 'if_condition_120270' (line 1840)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1840, 12), 'if_condition_120270', if_condition_120270)
        # SSA begins for if statement (line 1840)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1841):
        
        # Assigning a Call to a Name (line 1841):
        
        # Call to array(...): (line 1841)
        # Processing the call arguments (line 1841)
        # Getting the type of 'masks' (line 1842)
        masks_120273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1842, 20), 'masks', False)
        # Processing the call keyword arguments (line 1841)
        
        # Call to dtype(...): (line 1842)
        # Processing the call arguments (line 1842)
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'dtype_flat' (line 1842)
        dtype_flat_120280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1842, 66), 'dtype_flat', False)
        comprehension_120281 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1842, 43), dtype_flat_120280)
        # Assigning a type to the variable 't' (line 1842)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1842, 43), 't', comprehension_120281)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1842)
        tuple_120276 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1842, 44), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1842)
        # Adding element type (line 1842)
        str_120277 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1842, 44), 'str', '')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1842, 44), tuple_120276, str_120277)
        # Adding element type (line 1842)
        # Getting the type of 'np' (line 1842)
        np_120278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1842, 48), 'np', False)
        # Obtaining the member 'bool' of a type (line 1842)
        bool_120279 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1842, 48), np_120278, 'bool')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1842, 44), tuple_120276, bool_120279)
        
        list_120282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1842, 43), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1842, 43), list_120282, tuple_120276)
        # Processing the call keyword arguments (line 1842)
        kwargs_120283 = {}
        # Getting the type of 'np' (line 1842)
        np_120274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1842, 33), 'np', False)
        # Obtaining the member 'dtype' of a type (line 1842)
        dtype_120275 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1842, 33), np_120274, 'dtype')
        # Calling dtype(args, kwargs) (line 1842)
        dtype_call_result_120284 = invoke(stypy.reporting.localization.Localization(__file__, 1842, 33), dtype_120275, *[list_120282], **kwargs_120283)
        
        keyword_120285 = dtype_call_result_120284
        kwargs_120286 = {'dtype': keyword_120285}
        # Getting the type of 'np' (line 1841)
        np_120271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1841, 27), 'np', False)
        # Obtaining the member 'array' of a type (line 1841)
        array_120272 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1841, 27), np_120271, 'array')
        # Calling array(args, kwargs) (line 1841)
        array_call_result_120287 = invoke(stypy.reporting.localization.Localization(__file__, 1841, 27), array_120272, *[masks_120273], **kwargs_120286)
        
        # Assigning a type to the variable 'rowmasks' (line 1841)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1841, 16), 'rowmasks', array_call_result_120287)
        
        # Assigning a Call to a Name (line 1844):
        
        # Assigning a Call to a Name (line 1844):
        
        # Call to make_mask_descr(...): (line 1844)
        # Processing the call arguments (line 1844)
        # Getting the type of 'dtype' (line 1844)
        dtype_120289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1844, 41), 'dtype', False)
        # Processing the call keyword arguments (line 1844)
        kwargs_120290 = {}
        # Getting the type of 'make_mask_descr' (line 1844)
        make_mask_descr_120288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1844, 25), 'make_mask_descr', False)
        # Calling make_mask_descr(args, kwargs) (line 1844)
        make_mask_descr_call_result_120291 = invoke(stypy.reporting.localization.Localization(__file__, 1844, 25), make_mask_descr_120288, *[dtype_120289], **kwargs_120290)
        
        # Assigning a type to the variable 'mdtype' (line 1844)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1844, 16), 'mdtype', make_mask_descr_call_result_120291)
        
        # Assigning a Call to a Name (line 1845):
        
        # Assigning a Call to a Name (line 1845):
        
        # Call to view(...): (line 1845)
        # Processing the call arguments (line 1845)
        # Getting the type of 'mdtype' (line 1845)
        mdtype_120294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1845, 43), 'mdtype', False)
        # Processing the call keyword arguments (line 1845)
        kwargs_120295 = {}
        # Getting the type of 'rowmasks' (line 1845)
        rowmasks_120292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1845, 29), 'rowmasks', False)
        # Obtaining the member 'view' of a type (line 1845)
        view_120293 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1845, 29), rowmasks_120292, 'view')
        # Calling view(args, kwargs) (line 1845)
        view_call_result_120296 = invoke(stypy.reporting.localization.Localization(__file__, 1845, 29), view_120293, *[mdtype_120294], **kwargs_120295)
        
        # Assigning a type to the variable 'outputmask' (line 1845)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1845, 16), 'outputmask', view_call_result_120296)
        # SSA join for if statement (line 1840)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1825)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'user_converters' (line 1849)
        user_converters_120297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 15), 'user_converters')
        # Testing the type of an if condition (line 1849)
        if_condition_120298 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1849, 12), user_converters_120297)
        # Assigning a type to the variable 'if_condition_120298' (line 1849)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1849, 12), 'if_condition_120298', if_condition_120298)
        # SSA begins for if statement (line 1849)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1850):
        
        # Assigning a Name to a Name (line 1850):
        # Getting the type of 'True' (line 1850)
        True_120299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1850, 32), 'True')
        # Assigning a type to the variable 'ishomogeneous' (line 1850)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1850, 16), 'ishomogeneous', True_120299)
        
        # Assigning a List to a Name (line 1851):
        
        # Assigning a List to a Name (line 1851):
        
        # Obtaining an instance of the builtin type 'list' (line 1851)
        list_120300 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1851, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1851)
        
        # Assigning a type to the variable 'descr' (line 1851)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1851, 16), 'descr', list_120300)
        
        
        # Call to enumerate(...): (line 1852)
        # Processing the call arguments (line 1852)
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'converters' (line 1852)
        converters_120304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1852, 65), 'converters', False)
        comprehension_120305 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1852, 43), converters_120304)
        # Assigning a type to the variable 'conv' (line 1852)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1852, 43), 'conv', comprehension_120305)
        # Getting the type of 'conv' (line 1852)
        conv_120302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1852, 43), 'conv', False)
        # Obtaining the member 'type' of a type (line 1852)
        type_120303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1852, 43), conv_120302, 'type')
        list_120306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1852, 43), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1852, 43), list_120306, type_120303)
        # Processing the call keyword arguments (line 1852)
        kwargs_120307 = {}
        # Getting the type of 'enumerate' (line 1852)
        enumerate_120301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1852, 32), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 1852)
        enumerate_call_result_120308 = invoke(stypy.reporting.localization.Localization(__file__, 1852, 32), enumerate_120301, *[list_120306], **kwargs_120307)
        
        # Testing the type of a for loop iterable (line 1852)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1852, 16), enumerate_call_result_120308)
        # Getting the type of the for loop variable (line 1852)
        for_loop_var_120309 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1852, 16), enumerate_call_result_120308)
        # Assigning a type to the variable 'i' (line 1852)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1852, 16), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1852, 16), for_loop_var_120309))
        # Assigning a type to the variable 'ttype' (line 1852)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1852, 16), 'ttype', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1852, 16), for_loop_var_120309))
        # SSA begins for a for statement (line 1852)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'i' (line 1854)
        i_120310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 23), 'i')
        # Getting the type of 'user_converters' (line 1854)
        user_converters_120311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 28), 'user_converters')
        # Applying the binary operator 'in' (line 1854)
        result_contains_120312 = python_operator(stypy.reporting.localization.Localization(__file__, 1854, 23), 'in', i_120310, user_converters_120311)
        
        # Testing the type of an if condition (line 1854)
        if_condition_120313 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1854, 20), result_contains_120312)
        # Assigning a type to the variable 'if_condition_120313' (line 1854)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1854, 20), 'if_condition_120313', if_condition_120313)
        # SSA begins for if statement (line 1854)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'ishomogeneous' (line 1855)
        ishomogeneous_120314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1855, 24), 'ishomogeneous')
        
        # Getting the type of 'ttype' (line 1855)
        ttype_120315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1855, 42), 'ttype')
        # Getting the type of 'dtype' (line 1855)
        dtype_120316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1855, 51), 'dtype')
        # Obtaining the member 'type' of a type (line 1855)
        type_120317 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1855, 51), dtype_120316, 'type')
        # Applying the binary operator '==' (line 1855)
        result_eq_120318 = python_operator(stypy.reporting.localization.Localization(__file__, 1855, 42), '==', ttype_120315, type_120317)
        
        # Applying the binary operator '&=' (line 1855)
        result_iand_120319 = python_operator(stypy.reporting.localization.Localization(__file__, 1855, 24), '&=', ishomogeneous_120314, result_eq_120318)
        # Assigning a type to the variable 'ishomogeneous' (line 1855)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1855, 24), 'ishomogeneous', result_iand_120319)
        
        
        
        # Getting the type of 'ttype' (line 1856)
        ttype_120320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1856, 27), 'ttype')
        # Getting the type of 'np' (line 1856)
        np_120321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1856, 36), 'np')
        # Obtaining the member 'string_' of a type (line 1856)
        string__120322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1856, 36), np_120321, 'string_')
        # Applying the binary operator '==' (line 1856)
        result_eq_120323 = python_operator(stypy.reporting.localization.Localization(__file__, 1856, 27), '==', ttype_120320, string__120322)
        
        # Testing the type of an if condition (line 1856)
        if_condition_120324 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1856, 24), result_eq_120323)
        # Assigning a type to the variable 'if_condition_120324' (line 1856)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1856, 24), 'if_condition_120324', if_condition_120324)
        # SSA begins for if statement (line 1856)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1857):
        
        # Assigning a BinOp to a Name (line 1857):
        str_120325 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1857, 36), 'str', '|S%i')
        
        # Call to max(...): (line 1857)
        # Processing the call arguments (line 1857)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 1857, 49, True)
        # Calculating comprehension expression
        # Getting the type of 'data' (line 1857)
        data_120334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1857, 72), 'data', False)
        comprehension_120335 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1857, 49), data_120334)
        # Assigning a type to the variable 'row' (line 1857)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1857, 49), 'row', comprehension_120335)
        
        # Call to len(...): (line 1857)
        # Processing the call arguments (line 1857)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1857)
        i_120328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1857, 57), 'i', False)
        # Getting the type of 'row' (line 1857)
        row_120329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1857, 53), 'row', False)
        # Obtaining the member '__getitem__' of a type (line 1857)
        getitem___120330 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1857, 53), row_120329, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1857)
        subscript_call_result_120331 = invoke(stypy.reporting.localization.Localization(__file__, 1857, 53), getitem___120330, i_120328)
        
        # Processing the call keyword arguments (line 1857)
        kwargs_120332 = {}
        # Getting the type of 'len' (line 1857)
        len_120327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1857, 49), 'len', False)
        # Calling len(args, kwargs) (line 1857)
        len_call_result_120333 = invoke(stypy.reporting.localization.Localization(__file__, 1857, 49), len_120327, *[subscript_call_result_120331], **kwargs_120332)
        
        list_120336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1857, 49), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1857, 49), list_120336, len_call_result_120333)
        # Processing the call keyword arguments (line 1857)
        kwargs_120337 = {}
        # Getting the type of 'max' (line 1857)
        max_120326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1857, 45), 'max', False)
        # Calling max(args, kwargs) (line 1857)
        max_call_result_120338 = invoke(stypy.reporting.localization.Localization(__file__, 1857, 45), max_120326, *[list_120336], **kwargs_120337)
        
        # Applying the binary operator '%' (line 1857)
        result_mod_120339 = python_operator(stypy.reporting.localization.Localization(__file__, 1857, 36), '%', str_120325, max_call_result_120338)
        
        # Assigning a type to the variable 'ttype' (line 1857)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1857, 28), 'ttype', result_mod_120339)
        # SSA join for if statement (line 1856)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to append(...): (line 1858)
        # Processing the call arguments (line 1858)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1858)
        tuple_120342 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1858, 38), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1858)
        # Adding element type (line 1858)
        str_120343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1858, 38), 'str', '')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1858, 38), tuple_120342, str_120343)
        # Adding element type (line 1858)
        # Getting the type of 'ttype' (line 1858)
        ttype_120344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1858, 42), 'ttype', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1858, 38), tuple_120342, ttype_120344)
        
        # Processing the call keyword arguments (line 1858)
        kwargs_120345 = {}
        # Getting the type of 'descr' (line 1858)
        descr_120340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1858, 24), 'descr', False)
        # Obtaining the member 'append' of a type (line 1858)
        append_120341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1858, 24), descr_120340, 'append')
        # Calling append(args, kwargs) (line 1858)
        append_call_result_120346 = invoke(stypy.reporting.localization.Localization(__file__, 1858, 24), append_120341, *[tuple_120342], **kwargs_120345)
        
        # SSA branch for the else part of an if statement (line 1854)
        module_type_store.open_ssa_branch('else')
        
        # Call to append(...): (line 1860)
        # Processing the call arguments (line 1860)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1860)
        tuple_120349 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1860, 38), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1860)
        # Adding element type (line 1860)
        str_120350 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1860, 38), 'str', '')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1860, 38), tuple_120349, str_120350)
        # Adding element type (line 1860)
        # Getting the type of 'dtype' (line 1860)
        dtype_120351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1860, 42), 'dtype', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1860, 38), tuple_120349, dtype_120351)
        
        # Processing the call keyword arguments (line 1860)
        kwargs_120352 = {}
        # Getting the type of 'descr' (line 1860)
        descr_120347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1860, 24), 'descr', False)
        # Obtaining the member 'append' of a type (line 1860)
        append_120348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1860, 24), descr_120347, 'append')
        # Calling append(args, kwargs) (line 1860)
        append_call_result_120353 = invoke(stypy.reporting.localization.Localization(__file__, 1860, 24), append_120348, *[tuple_120349], **kwargs_120352)
        
        # SSA join for if statement (line 1854)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'ishomogeneous' (line 1862)
        ishomogeneous_120354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1862, 23), 'ishomogeneous')
        # Applying the 'not' unary operator (line 1862)
        result_not__120355 = python_operator(stypy.reporting.localization.Localization(__file__, 1862, 19), 'not', ishomogeneous_120354)
        
        # Testing the type of an if condition (line 1862)
        if_condition_120356 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1862, 16), result_not__120355)
        # Assigning a type to the variable 'if_condition_120356' (line 1862)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1862, 16), 'if_condition_120356', if_condition_120356)
        # SSA begins for if statement (line 1862)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        
        # Call to len(...): (line 1864)
        # Processing the call arguments (line 1864)
        # Getting the type of 'descr' (line 1864)
        descr_120358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1864, 27), 'descr', False)
        # Processing the call keyword arguments (line 1864)
        kwargs_120359 = {}
        # Getting the type of 'len' (line 1864)
        len_120357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1864, 23), 'len', False)
        # Calling len(args, kwargs) (line 1864)
        len_call_result_120360 = invoke(stypy.reporting.localization.Localization(__file__, 1864, 23), len_120357, *[descr_120358], **kwargs_120359)
        
        int_120361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1864, 36), 'int')
        # Applying the binary operator '>' (line 1864)
        result_gt_120362 = python_operator(stypy.reporting.localization.Localization(__file__, 1864, 23), '>', len_call_result_120360, int_120361)
        
        # Testing the type of an if condition (line 1864)
        if_condition_120363 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1864, 20), result_gt_120362)
        # Assigning a type to the variable 'if_condition_120363' (line 1864)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1864, 20), 'if_condition_120363', if_condition_120363)
        # SSA begins for if statement (line 1864)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1865):
        
        # Assigning a Call to a Name (line 1865):
        
        # Call to dtype(...): (line 1865)
        # Processing the call arguments (line 1865)
        # Getting the type of 'descr' (line 1865)
        descr_120366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 41), 'descr', False)
        # Processing the call keyword arguments (line 1865)
        kwargs_120367 = {}
        # Getting the type of 'np' (line 1865)
        np_120364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 32), 'np', False)
        # Obtaining the member 'dtype' of a type (line 1865)
        dtype_120365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1865, 32), np_120364, 'dtype')
        # Calling dtype(args, kwargs) (line 1865)
        dtype_call_result_120368 = invoke(stypy.reporting.localization.Localization(__file__, 1865, 32), dtype_120365, *[descr_120366], **kwargs_120367)
        
        # Assigning a type to the variable 'dtype' (line 1865)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1865, 24), 'dtype', dtype_call_result_120368)
        # SSA branch for the else part of an if statement (line 1864)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 1868):
        
        # Assigning a Call to a Name (line 1868):
        
        # Call to dtype(...): (line 1868)
        # Processing the call arguments (line 1868)
        # Getting the type of 'ttype' (line 1868)
        ttype_120371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 41), 'ttype', False)
        # Processing the call keyword arguments (line 1868)
        kwargs_120372 = {}
        # Getting the type of 'np' (line 1868)
        np_120369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 32), 'np', False)
        # Obtaining the member 'dtype' of a type (line 1868)
        dtype_120370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1868, 32), np_120369, 'dtype')
        # Calling dtype(args, kwargs) (line 1868)
        dtype_call_result_120373 = invoke(stypy.reporting.localization.Localization(__file__, 1868, 32), dtype_120370, *[ttype_120371], **kwargs_120372)
        
        # Assigning a type to the variable 'dtype' (line 1868)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1868, 24), 'dtype', dtype_call_result_120373)
        # SSA join for if statement (line 1864)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1862)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1849)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1870):
        
        # Assigning a Call to a Name (line 1870):
        
        # Call to array(...): (line 1870)
        # Processing the call arguments (line 1870)
        # Getting the type of 'data' (line 1870)
        data_120376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1870, 30), 'data', False)
        # Getting the type of 'dtype' (line 1870)
        dtype_120377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1870, 36), 'dtype', False)
        # Processing the call keyword arguments (line 1870)
        kwargs_120378 = {}
        # Getting the type of 'np' (line 1870)
        np_120374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1870, 21), 'np', False)
        # Obtaining the member 'array' of a type (line 1870)
        array_120375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1870, 21), np_120374, 'array')
        # Calling array(args, kwargs) (line 1870)
        array_call_result_120379 = invoke(stypy.reporting.localization.Localization(__file__, 1870, 21), array_120375, *[data_120376, dtype_120377], **kwargs_120378)
        
        # Assigning a type to the variable 'output' (line 1870)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1870, 12), 'output', array_call_result_120379)
        
        # Getting the type of 'usemask' (line 1871)
        usemask_120380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1871, 15), 'usemask')
        # Testing the type of an if condition (line 1871)
        if_condition_120381 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1871, 12), usemask_120380)
        # Assigning a type to the variable 'if_condition_120381' (line 1871)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1871, 12), 'if_condition_120381', if_condition_120381)
        # SSA begins for if statement (line 1871)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'dtype' (line 1872)
        dtype_120382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1872, 19), 'dtype')
        # Obtaining the member 'names' of a type (line 1872)
        names_120383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1872, 19), dtype_120382, 'names')
        # Testing the type of an if condition (line 1872)
        if_condition_120384 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1872, 16), names_120383)
        # Assigning a type to the variable 'if_condition_120384' (line 1872)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1872, 16), 'if_condition_120384', if_condition_120384)
        # SSA begins for if statement (line 1872)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a ListComp to a Name (line 1873):
        
        # Assigning a ListComp to a Name (line 1873):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'dtype' (line 1873)
        dtype_120389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1873, 52), 'dtype')
        # Obtaining the member 'names' of a type (line 1873)
        names_120390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1873, 52), dtype_120389, 'names')
        comprehension_120391 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1873, 30), names_120390)
        # Assigning a type to the variable '_' (line 1873)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1873, 30), '_', comprehension_120391)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1873)
        tuple_120385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1873, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1873)
        # Adding element type (line 1873)
        # Getting the type of '_' (line 1873)
        __120386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1873, 31), '_')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1873, 31), tuple_120385, __120386)
        # Adding element type (line 1873)
        # Getting the type of 'np' (line 1873)
        np_120387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1873, 34), 'np')
        # Obtaining the member 'bool' of a type (line 1873)
        bool_120388 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1873, 34), np_120387, 'bool')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1873, 31), tuple_120385, bool_120388)
        
        list_120392 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1873, 30), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1873, 30), list_120392, tuple_120385)
        # Assigning a type to the variable 'mdtype' (line 1873)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1873, 20), 'mdtype', list_120392)
        # SSA branch for the else part of an if statement (line 1872)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 1875):
        
        # Assigning a Attribute to a Name (line 1875):
        # Getting the type of 'np' (line 1875)
        np_120393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1875, 29), 'np')
        # Obtaining the member 'bool' of a type (line 1875)
        bool_120394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1875, 29), np_120393, 'bool')
        # Assigning a type to the variable 'mdtype' (line 1875)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1875, 20), 'mdtype', bool_120394)
        # SSA join for if statement (line 1872)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1876):
        
        # Assigning a Call to a Name (line 1876):
        
        # Call to array(...): (line 1876)
        # Processing the call arguments (line 1876)
        # Getting the type of 'masks' (line 1876)
        masks_120397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1876, 38), 'masks', False)
        # Processing the call keyword arguments (line 1876)
        # Getting the type of 'mdtype' (line 1876)
        mdtype_120398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1876, 51), 'mdtype', False)
        keyword_120399 = mdtype_120398
        kwargs_120400 = {'dtype': keyword_120399}
        # Getting the type of 'np' (line 1876)
        np_120395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1876, 29), 'np', False)
        # Obtaining the member 'array' of a type (line 1876)
        array_120396 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1876, 29), np_120395, 'array')
        # Calling array(args, kwargs) (line 1876)
        array_call_result_120401 = invoke(stypy.reporting.localization.Localization(__file__, 1876, 29), array_120396, *[masks_120397], **kwargs_120400)
        
        # Assigning a type to the variable 'outputmask' (line 1876)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1876, 16), 'outputmask', array_call_result_120401)
        # SSA join for if statement (line 1871)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1825)
        module_type_store = module_type_store.join_ssa_context()
        

        if (may_be_120076 and more_types_in_union_120077):
            # SSA join for if statement (line 1793)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Attribute to a Name (line 1878):
    
    # Assigning a Attribute to a Name (line 1878):
    # Getting the type of 'output' (line 1878)
    output_120402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 12), 'output')
    # Obtaining the member 'dtype' of a type (line 1878)
    dtype_120403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1878, 12), output_120402, 'dtype')
    # Obtaining the member 'names' of a type (line 1878)
    names_120404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1878, 12), dtype_120403, 'names')
    # Assigning a type to the variable 'names' (line 1878)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1878, 4), 'names', names_120404)
    
    
    # Evaluating a boolean operation
    # Getting the type of 'usemask' (line 1879)
    usemask_120405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1879, 7), 'usemask')
    # Getting the type of 'names' (line 1879)
    names_120406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1879, 19), 'names')
    # Applying the binary operator 'and' (line 1879)
    result_and_keyword_120407 = python_operator(stypy.reporting.localization.Localization(__file__, 1879, 7), 'and', usemask_120405, names_120406)
    
    # Testing the type of an if condition (line 1879)
    if_condition_120408 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1879, 4), result_and_keyword_120407)
    # Assigning a type to the variable 'if_condition_120408' (line 1879)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1879, 4), 'if_condition_120408', if_condition_120408)
    # SSA begins for if statement (line 1879)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Call to zip(...): (line 1880)
    # Processing the call arguments (line 1880)
    
    # Evaluating a boolean operation
    # Getting the type of 'names' (line 1880)
    names_120410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1880, 32), 'names', False)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1880)
    tuple_120411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1880, 41), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1880)
    
    # Applying the binary operator 'or' (line 1880)
    result_or_keyword_120412 = python_operator(stypy.reporting.localization.Localization(__file__, 1880, 32), 'or', names_120410, tuple_120411)
    
    # Getting the type of 'converters' (line 1880)
    converters_120413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1880, 45), 'converters', False)
    # Processing the call keyword arguments (line 1880)
    kwargs_120414 = {}
    # Getting the type of 'zip' (line 1880)
    zip_120409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1880, 28), 'zip', False)
    # Calling zip(args, kwargs) (line 1880)
    zip_call_result_120415 = invoke(stypy.reporting.localization.Localization(__file__, 1880, 28), zip_120409, *[result_or_keyword_120412, converters_120413], **kwargs_120414)
    
    # Testing the type of a for loop iterable (line 1880)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1880, 8), zip_call_result_120415)
    # Getting the type of the for loop variable (line 1880)
    for_loop_var_120416 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1880, 8), zip_call_result_120415)
    # Assigning a type to the variable 'name' (line 1880)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1880, 8), 'name', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1880, 8), for_loop_var_120416))
    # Assigning a type to the variable 'conv' (line 1880)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1880, 8), 'conv', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1880, 8), for_loop_var_120416))
    # SSA begins for a for statement (line 1880)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a ListComp to a Name (line 1881):
    
    # Assigning a ListComp to a Name (line 1881):
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'conv' (line 1881)
    conv_120427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1881, 47), 'conv')
    # Obtaining the member 'missing_values' of a type (line 1881)
    missing_values_120428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1881, 47), conv_120427, 'missing_values')
    comprehension_120429 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1881, 30), missing_values_120428)
    # Assigning a type to the variable '_' (line 1881)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1881, 30), '_', comprehension_120429)
    
    # Getting the type of '_' (line 1882)
    __120421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1882, 33), '_')
    
    # Call to asbytes(...): (line 1882)
    # Processing the call arguments (line 1882)
    str_120423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1882, 46), 'str', '')
    # Processing the call keyword arguments (line 1882)
    kwargs_120424 = {}
    # Getting the type of 'asbytes' (line 1882)
    asbytes_120422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1882, 38), 'asbytes', False)
    # Calling asbytes(args, kwargs) (line 1882)
    asbytes_call_result_120425 = invoke(stypy.reporting.localization.Localization(__file__, 1882, 38), asbytes_120422, *[str_120423], **kwargs_120424)
    
    # Applying the binary operator '!=' (line 1882)
    result_ne_120426 = python_operator(stypy.reporting.localization.Localization(__file__, 1882, 33), '!=', __120421, asbytes_call_result_120425)
    
    
    # Call to conv(...): (line 1881)
    # Processing the call arguments (line 1881)
    # Getting the type of '_' (line 1881)
    __120418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1881, 35), '_', False)
    # Processing the call keyword arguments (line 1881)
    kwargs_120419 = {}
    # Getting the type of 'conv' (line 1881)
    conv_120417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1881, 30), 'conv', False)
    # Calling conv(args, kwargs) (line 1881)
    conv_call_result_120420 = invoke(stypy.reporting.localization.Localization(__file__, 1881, 30), conv_120417, *[__120418], **kwargs_120419)
    
    list_120430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1881, 30), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1881, 30), list_120430, conv_call_result_120420)
    # Assigning a type to the variable 'missing_values' (line 1881)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1881, 12), 'missing_values', list_120430)
    
    # Getting the type of 'missing_values' (line 1883)
    missing_values_120431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1883, 24), 'missing_values')
    # Testing the type of a for loop iterable (line 1883)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1883, 12), missing_values_120431)
    # Getting the type of the for loop variable (line 1883)
    for_loop_var_120432 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1883, 12), missing_values_120431)
    # Assigning a type to the variable 'mval' (line 1883)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1883, 12), 'mval', for_loop_var_120432)
    # SSA begins for a for statement (line 1883)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Getting the type of 'outputmask' (line 1884)
    outputmask_120433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1884, 16), 'outputmask')
    
    # Obtaining the type of the subscript
    # Getting the type of 'name' (line 1884)
    name_120434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1884, 27), 'name')
    # Getting the type of 'outputmask' (line 1884)
    outputmask_120435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1884, 16), 'outputmask')
    # Obtaining the member '__getitem__' of a type (line 1884)
    getitem___120436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1884, 16), outputmask_120435, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1884)
    subscript_call_result_120437 = invoke(stypy.reporting.localization.Localization(__file__, 1884, 16), getitem___120436, name_120434)
    
    
    
    # Obtaining the type of the subscript
    # Getting the type of 'name' (line 1884)
    name_120438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1884, 44), 'name')
    # Getting the type of 'output' (line 1884)
    output_120439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1884, 37), 'output')
    # Obtaining the member '__getitem__' of a type (line 1884)
    getitem___120440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1884, 37), output_120439, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1884)
    subscript_call_result_120441 = invoke(stypy.reporting.localization.Localization(__file__, 1884, 37), getitem___120440, name_120438)
    
    # Getting the type of 'mval' (line 1884)
    mval_120442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1884, 53), 'mval')
    # Applying the binary operator '==' (line 1884)
    result_eq_120443 = python_operator(stypy.reporting.localization.Localization(__file__, 1884, 37), '==', subscript_call_result_120441, mval_120442)
    
    # Applying the binary operator '|=' (line 1884)
    result_ior_120444 = python_operator(stypy.reporting.localization.Localization(__file__, 1884, 16), '|=', subscript_call_result_120437, result_eq_120443)
    # Getting the type of 'outputmask' (line 1884)
    outputmask_120445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1884, 16), 'outputmask')
    # Getting the type of 'name' (line 1884)
    name_120446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1884, 27), 'name')
    # Storing an element on a container (line 1884)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1884, 16), outputmask_120445, (name_120446, result_ior_120444))
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1879)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'usemask' (line 1886)
    usemask_120447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1886, 7), 'usemask')
    # Testing the type of an if condition (line 1886)
    if_condition_120448 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1886, 4), usemask_120447)
    # Assigning a type to the variable 'if_condition_120448' (line 1886)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1886, 4), 'if_condition_120448', if_condition_120448)
    # SSA begins for if statement (line 1886)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1887):
    
    # Assigning a Call to a Name (line 1887):
    
    # Call to view(...): (line 1887)
    # Processing the call arguments (line 1887)
    # Getting the type of 'MaskedArray' (line 1887)
    MaskedArray_120451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 29), 'MaskedArray', False)
    # Processing the call keyword arguments (line 1887)
    kwargs_120452 = {}
    # Getting the type of 'output' (line 1887)
    output_120449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 17), 'output', False)
    # Obtaining the member 'view' of a type (line 1887)
    view_120450 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1887, 17), output_120449, 'view')
    # Calling view(args, kwargs) (line 1887)
    view_call_result_120453 = invoke(stypy.reporting.localization.Localization(__file__, 1887, 17), view_120450, *[MaskedArray_120451], **kwargs_120452)
    
    # Assigning a type to the variable 'output' (line 1887)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1887, 8), 'output', view_call_result_120453)
    
    # Assigning a Name to a Attribute (line 1888):
    
    # Assigning a Name to a Attribute (line 1888):
    # Getting the type of 'outputmask' (line 1888)
    outputmask_120454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1888, 23), 'outputmask')
    # Getting the type of 'output' (line 1888)
    output_120455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1888, 8), 'output')
    # Setting the type of the member '_mask' of a type (line 1888)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1888, 8), output_120455, '_mask', outputmask_120454)
    # SSA join for if statement (line 1886)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'unpack' (line 1889)
    unpack_120456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1889, 7), 'unpack')
    # Testing the type of an if condition (line 1889)
    if_condition_120457 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1889, 4), unpack_120456)
    # Assigning a type to the variable 'if_condition_120457' (line 1889)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1889, 4), 'if_condition_120457', if_condition_120457)
    # SSA begins for if statement (line 1889)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to squeeze(...): (line 1890)
    # Processing the call keyword arguments (line 1890)
    kwargs_120460 = {}
    # Getting the type of 'output' (line 1890)
    output_120458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1890, 15), 'output', False)
    # Obtaining the member 'squeeze' of a type (line 1890)
    squeeze_120459 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1890, 15), output_120458, 'squeeze')
    # Calling squeeze(args, kwargs) (line 1890)
    squeeze_call_result_120461 = invoke(stypy.reporting.localization.Localization(__file__, 1890, 15), squeeze_120459, *[], **kwargs_120460)
    
    # Obtaining the member 'T' of a type (line 1890)
    T_120462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1890, 15), squeeze_call_result_120461, 'T')
    # Assigning a type to the variable 'stypy_return_type' (line 1890)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1890, 8), 'stypy_return_type', T_120462)
    # SSA join for if statement (line 1889)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to squeeze(...): (line 1891)
    # Processing the call keyword arguments (line 1891)
    kwargs_120465 = {}
    # Getting the type of 'output' (line 1891)
    output_120463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1891, 11), 'output', False)
    # Obtaining the member 'squeeze' of a type (line 1891)
    squeeze_120464 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1891, 11), output_120463, 'squeeze')
    # Calling squeeze(args, kwargs) (line 1891)
    squeeze_call_result_120466 = invoke(stypy.reporting.localization.Localization(__file__, 1891, 11), squeeze_120464, *[], **kwargs_120465)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1891)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1891, 4), 'stypy_return_type', squeeze_call_result_120466)
    
    # ################# End of 'genfromtxt(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'genfromtxt' in the type store
    # Getting the type of 'stypy_return_type' (line 1259)
    stypy_return_type_120467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1259, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_120467)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'genfromtxt'
    return stypy_return_type_120467

# Assigning a type to the variable 'genfromtxt' (line 1259)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1259, 0), 'genfromtxt', genfromtxt)

@norecursion
def ndfromtxt(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'ndfromtxt'
    module_type_store = module_type_store.open_function_context('ndfromtxt', 1894, 0, False)
    
    # Passed parameters checking function
    ndfromtxt.stypy_localization = localization
    ndfromtxt.stypy_type_of_self = None
    ndfromtxt.stypy_type_store = module_type_store
    ndfromtxt.stypy_function_name = 'ndfromtxt'
    ndfromtxt.stypy_param_names_list = ['fname']
    ndfromtxt.stypy_varargs_param_name = None
    ndfromtxt.stypy_kwargs_param_name = 'kwargs'
    ndfromtxt.stypy_call_defaults = defaults
    ndfromtxt.stypy_call_varargs = varargs
    ndfromtxt.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'ndfromtxt', ['fname'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'ndfromtxt', localization, ['fname'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'ndfromtxt(...)' code ##################

    str_120468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1906, (-1)), 'str', '\n    Load ASCII data stored in a file and return it as a single array.\n\n    Parameters\n    ----------\n    fname, kwargs : For a description of input parameters, see `genfromtxt`.\n\n    See Also\n    --------\n    numpy.genfromtxt : generic function.\n\n    ')
    
    # Assigning a Name to a Subscript (line 1907):
    
    # Assigning a Name to a Subscript (line 1907):
    # Getting the type of 'False' (line 1907)
    False_120469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1907, 24), 'False')
    # Getting the type of 'kwargs' (line 1907)
    kwargs_120470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1907, 4), 'kwargs')
    str_120471 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1907, 11), 'str', 'usemask')
    # Storing an element on a container (line 1907)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1907, 4), kwargs_120470, (str_120471, False_120469))
    
    # Call to genfromtxt(...): (line 1908)
    # Processing the call arguments (line 1908)
    # Getting the type of 'fname' (line 1908)
    fname_120473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1908, 22), 'fname', False)
    # Processing the call keyword arguments (line 1908)
    # Getting the type of 'kwargs' (line 1908)
    kwargs_120474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1908, 31), 'kwargs', False)
    kwargs_120475 = {'kwargs_120474': kwargs_120474}
    # Getting the type of 'genfromtxt' (line 1908)
    genfromtxt_120472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1908, 11), 'genfromtxt', False)
    # Calling genfromtxt(args, kwargs) (line 1908)
    genfromtxt_call_result_120476 = invoke(stypy.reporting.localization.Localization(__file__, 1908, 11), genfromtxt_120472, *[fname_120473], **kwargs_120475)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1908)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1908, 4), 'stypy_return_type', genfromtxt_call_result_120476)
    
    # ################# End of 'ndfromtxt(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'ndfromtxt' in the type store
    # Getting the type of 'stypy_return_type' (line 1894)
    stypy_return_type_120477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1894, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_120477)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'ndfromtxt'
    return stypy_return_type_120477

# Assigning a type to the variable 'ndfromtxt' (line 1894)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1894, 0), 'ndfromtxt', ndfromtxt)

@norecursion
def mafromtxt(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'mafromtxt'
    module_type_store = module_type_store.open_function_context('mafromtxt', 1911, 0, False)
    
    # Passed parameters checking function
    mafromtxt.stypy_localization = localization
    mafromtxt.stypy_type_of_self = None
    mafromtxt.stypy_type_store = module_type_store
    mafromtxt.stypy_function_name = 'mafromtxt'
    mafromtxt.stypy_param_names_list = ['fname']
    mafromtxt.stypy_varargs_param_name = None
    mafromtxt.stypy_kwargs_param_name = 'kwargs'
    mafromtxt.stypy_call_defaults = defaults
    mafromtxt.stypy_call_varargs = varargs
    mafromtxt.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'mafromtxt', ['fname'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'mafromtxt', localization, ['fname'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'mafromtxt(...)' code ##################

    str_120478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1923, (-1)), 'str', '\n    Load ASCII data stored in a text file and return a masked array.\n\n    Parameters\n    ----------\n    fname, kwargs : For a description of input parameters, see `genfromtxt`.\n\n    See Also\n    --------\n    numpy.genfromtxt : generic function to load ASCII data.\n\n    ')
    
    # Assigning a Name to a Subscript (line 1924):
    
    # Assigning a Name to a Subscript (line 1924):
    # Getting the type of 'True' (line 1924)
    True_120479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 24), 'True')
    # Getting the type of 'kwargs' (line 1924)
    kwargs_120480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 4), 'kwargs')
    str_120481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1924, 11), 'str', 'usemask')
    # Storing an element on a container (line 1924)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1924, 4), kwargs_120480, (str_120481, True_120479))
    
    # Call to genfromtxt(...): (line 1925)
    # Processing the call arguments (line 1925)
    # Getting the type of 'fname' (line 1925)
    fname_120483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1925, 22), 'fname', False)
    # Processing the call keyword arguments (line 1925)
    # Getting the type of 'kwargs' (line 1925)
    kwargs_120484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1925, 31), 'kwargs', False)
    kwargs_120485 = {'kwargs_120484': kwargs_120484}
    # Getting the type of 'genfromtxt' (line 1925)
    genfromtxt_120482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1925, 11), 'genfromtxt', False)
    # Calling genfromtxt(args, kwargs) (line 1925)
    genfromtxt_call_result_120486 = invoke(stypy.reporting.localization.Localization(__file__, 1925, 11), genfromtxt_120482, *[fname_120483], **kwargs_120485)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1925)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1925, 4), 'stypy_return_type', genfromtxt_call_result_120486)
    
    # ################# End of 'mafromtxt(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'mafromtxt' in the type store
    # Getting the type of 'stypy_return_type' (line 1911)
    stypy_return_type_120487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1911, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_120487)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'mafromtxt'
    return stypy_return_type_120487

# Assigning a type to the variable 'mafromtxt' (line 1911)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1911, 0), 'mafromtxt', mafromtxt)

@norecursion
def recfromtxt(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'recfromtxt'
    module_type_store = module_type_store.open_function_context('recfromtxt', 1928, 0, False)
    
    # Passed parameters checking function
    recfromtxt.stypy_localization = localization
    recfromtxt.stypy_type_of_self = None
    recfromtxt.stypy_type_store = module_type_store
    recfromtxt.stypy_function_name = 'recfromtxt'
    recfromtxt.stypy_param_names_list = ['fname']
    recfromtxt.stypy_varargs_param_name = None
    recfromtxt.stypy_kwargs_param_name = 'kwargs'
    recfromtxt.stypy_call_defaults = defaults
    recfromtxt.stypy_call_varargs = varargs
    recfromtxt.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'recfromtxt', ['fname'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'recfromtxt', localization, ['fname'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'recfromtxt(...)' code ##################

    str_120488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1948, (-1)), 'str', '\n    Load ASCII data from a file and return it in a record array.\n\n    If ``usemask=False`` a standard `recarray` is returned,\n    if ``usemask=True`` a MaskedRecords array is returned.\n\n    Parameters\n    ----------\n    fname, kwargs : For a description of input parameters, see `genfromtxt`.\n\n    See Also\n    --------\n    numpy.genfromtxt : generic function\n\n    Notes\n    -----\n    By default, `dtype` is None, which means that the data-type of the output\n    array will be determined from the data.\n\n    ')
    
    # Call to setdefault(...): (line 1949)
    # Processing the call arguments (line 1949)
    str_120491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1949, 22), 'str', 'dtype')
    # Getting the type of 'None' (line 1949)
    None_120492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1949, 31), 'None', False)
    # Processing the call keyword arguments (line 1949)
    kwargs_120493 = {}
    # Getting the type of 'kwargs' (line 1949)
    kwargs_120489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1949, 4), 'kwargs', False)
    # Obtaining the member 'setdefault' of a type (line 1949)
    setdefault_120490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1949, 4), kwargs_120489, 'setdefault')
    # Calling setdefault(args, kwargs) (line 1949)
    setdefault_call_result_120494 = invoke(stypy.reporting.localization.Localization(__file__, 1949, 4), setdefault_120490, *[str_120491, None_120492], **kwargs_120493)
    
    
    # Assigning a Call to a Name (line 1950):
    
    # Assigning a Call to a Name (line 1950):
    
    # Call to get(...): (line 1950)
    # Processing the call arguments (line 1950)
    str_120497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1950, 25), 'str', 'usemask')
    # Getting the type of 'False' (line 1950)
    False_120498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1950, 36), 'False', False)
    # Processing the call keyword arguments (line 1950)
    kwargs_120499 = {}
    # Getting the type of 'kwargs' (line 1950)
    kwargs_120495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1950, 14), 'kwargs', False)
    # Obtaining the member 'get' of a type (line 1950)
    get_120496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1950, 14), kwargs_120495, 'get')
    # Calling get(args, kwargs) (line 1950)
    get_call_result_120500 = invoke(stypy.reporting.localization.Localization(__file__, 1950, 14), get_120496, *[str_120497, False_120498], **kwargs_120499)
    
    # Assigning a type to the variable 'usemask' (line 1950)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1950, 4), 'usemask', get_call_result_120500)
    
    # Assigning a Call to a Name (line 1951):
    
    # Assigning a Call to a Name (line 1951):
    
    # Call to genfromtxt(...): (line 1951)
    # Processing the call arguments (line 1951)
    # Getting the type of 'fname' (line 1951)
    fname_120502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1951, 24), 'fname', False)
    # Processing the call keyword arguments (line 1951)
    # Getting the type of 'kwargs' (line 1951)
    kwargs_120503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1951, 33), 'kwargs', False)
    kwargs_120504 = {'kwargs_120503': kwargs_120503}
    # Getting the type of 'genfromtxt' (line 1951)
    genfromtxt_120501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1951, 13), 'genfromtxt', False)
    # Calling genfromtxt(args, kwargs) (line 1951)
    genfromtxt_call_result_120505 = invoke(stypy.reporting.localization.Localization(__file__, 1951, 13), genfromtxt_120501, *[fname_120502], **kwargs_120504)
    
    # Assigning a type to the variable 'output' (line 1951)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1951, 4), 'output', genfromtxt_call_result_120505)
    
    # Getting the type of 'usemask' (line 1952)
    usemask_120506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 7), 'usemask')
    # Testing the type of an if condition (line 1952)
    if_condition_120507 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1952, 4), usemask_120506)
    # Assigning a type to the variable 'if_condition_120507' (line 1952)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1952, 4), 'if_condition_120507', if_condition_120507)
    # SSA begins for if statement (line 1952)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1953, 8))
    
    # 'from numpy.ma.mrecords import MaskedRecords' statement (line 1953)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/lib/')
    import_120508 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1953, 8), 'numpy.ma.mrecords')

    if (type(import_120508) is not StypyTypeError):

        if (import_120508 != 'pyd_module'):
            __import__(import_120508)
            sys_modules_120509 = sys.modules[import_120508]
            import_from_module(stypy.reporting.localization.Localization(__file__, 1953, 8), 'numpy.ma.mrecords', sys_modules_120509.module_type_store, module_type_store, ['MaskedRecords'])
            nest_module(stypy.reporting.localization.Localization(__file__, 1953, 8), __file__, sys_modules_120509, sys_modules_120509.module_type_store, module_type_store)
        else:
            from numpy.ma.mrecords import MaskedRecords

            import_from_module(stypy.reporting.localization.Localization(__file__, 1953, 8), 'numpy.ma.mrecords', None, module_type_store, ['MaskedRecords'], [MaskedRecords])

    else:
        # Assigning a type to the variable 'numpy.ma.mrecords' (line 1953)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1953, 8), 'numpy.ma.mrecords', import_120508)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/lib/')
    
    
    # Assigning a Call to a Name (line 1954):
    
    # Assigning a Call to a Name (line 1954):
    
    # Call to view(...): (line 1954)
    # Processing the call arguments (line 1954)
    # Getting the type of 'MaskedRecords' (line 1954)
    MaskedRecords_120512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1954, 29), 'MaskedRecords', False)
    # Processing the call keyword arguments (line 1954)
    kwargs_120513 = {}
    # Getting the type of 'output' (line 1954)
    output_120510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1954, 17), 'output', False)
    # Obtaining the member 'view' of a type (line 1954)
    view_120511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1954, 17), output_120510, 'view')
    # Calling view(args, kwargs) (line 1954)
    view_call_result_120514 = invoke(stypy.reporting.localization.Localization(__file__, 1954, 17), view_120511, *[MaskedRecords_120512], **kwargs_120513)
    
    # Assigning a type to the variable 'output' (line 1954)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1954, 8), 'output', view_call_result_120514)
    # SSA branch for the else part of an if statement (line 1952)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1956):
    
    # Assigning a Call to a Name (line 1956):
    
    # Call to view(...): (line 1956)
    # Processing the call arguments (line 1956)
    # Getting the type of 'np' (line 1956)
    np_120517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1956, 29), 'np', False)
    # Obtaining the member 'recarray' of a type (line 1956)
    recarray_120518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1956, 29), np_120517, 'recarray')
    # Processing the call keyword arguments (line 1956)
    kwargs_120519 = {}
    # Getting the type of 'output' (line 1956)
    output_120515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1956, 17), 'output', False)
    # Obtaining the member 'view' of a type (line 1956)
    view_120516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1956, 17), output_120515, 'view')
    # Calling view(args, kwargs) (line 1956)
    view_call_result_120520 = invoke(stypy.reporting.localization.Localization(__file__, 1956, 17), view_120516, *[recarray_120518], **kwargs_120519)
    
    # Assigning a type to the variable 'output' (line 1956)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1956, 8), 'output', view_call_result_120520)
    # SSA join for if statement (line 1952)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'output' (line 1957)
    output_120521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1957, 11), 'output')
    # Assigning a type to the variable 'stypy_return_type' (line 1957)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1957, 4), 'stypy_return_type', output_120521)
    
    # ################# End of 'recfromtxt(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'recfromtxt' in the type store
    # Getting the type of 'stypy_return_type' (line 1928)
    stypy_return_type_120522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1928, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_120522)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'recfromtxt'
    return stypy_return_type_120522

# Assigning a type to the variable 'recfromtxt' (line 1928)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1928, 0), 'recfromtxt', recfromtxt)

@norecursion
def recfromcsv(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'recfromcsv'
    module_type_store = module_type_store.open_function_context('recfromcsv', 1960, 0, False)
    
    # Passed parameters checking function
    recfromcsv.stypy_localization = localization
    recfromcsv.stypy_type_of_self = None
    recfromcsv.stypy_type_store = module_type_store
    recfromcsv.stypy_function_name = 'recfromcsv'
    recfromcsv.stypy_param_names_list = ['fname']
    recfromcsv.stypy_varargs_param_name = None
    recfromcsv.stypy_kwargs_param_name = 'kwargs'
    recfromcsv.stypy_call_defaults = defaults
    recfromcsv.stypy_call_varargs = varargs
    recfromcsv.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'recfromcsv', ['fname'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'recfromcsv', localization, ['fname'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'recfromcsv(...)' code ##################

    str_120523 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1981, (-1)), 'str', '\n    Load ASCII data stored in a comma-separated file.\n\n    The returned array is a record array (if ``usemask=False``, see\n    `recarray`) or a masked record array (if ``usemask=True``,\n    see `ma.mrecords.MaskedRecords`).\n\n    Parameters\n    ----------\n    fname, kwargs : For a description of input parameters, see `genfromtxt`.\n\n    See Also\n    --------\n    numpy.genfromtxt : generic function to load ASCII data.\n\n    Notes\n    -----\n    By default, `dtype` is None, which means that the data-type of the output\n    array will be determined from the data.\n\n    ')
    
    # Call to setdefault(...): (line 1983)
    # Processing the call arguments (line 1983)
    str_120526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1983, 22), 'str', 'case_sensitive')
    str_120527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1983, 40), 'str', 'lower')
    # Processing the call keyword arguments (line 1983)
    kwargs_120528 = {}
    # Getting the type of 'kwargs' (line 1983)
    kwargs_120524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1983, 4), 'kwargs', False)
    # Obtaining the member 'setdefault' of a type (line 1983)
    setdefault_120525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1983, 4), kwargs_120524, 'setdefault')
    # Calling setdefault(args, kwargs) (line 1983)
    setdefault_call_result_120529 = invoke(stypy.reporting.localization.Localization(__file__, 1983, 4), setdefault_120525, *[str_120526, str_120527], **kwargs_120528)
    
    
    # Call to setdefault(...): (line 1984)
    # Processing the call arguments (line 1984)
    str_120532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1984, 22), 'str', 'names')
    # Getting the type of 'True' (line 1984)
    True_120533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1984, 31), 'True', False)
    # Processing the call keyword arguments (line 1984)
    kwargs_120534 = {}
    # Getting the type of 'kwargs' (line 1984)
    kwargs_120530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1984, 4), 'kwargs', False)
    # Obtaining the member 'setdefault' of a type (line 1984)
    setdefault_120531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1984, 4), kwargs_120530, 'setdefault')
    # Calling setdefault(args, kwargs) (line 1984)
    setdefault_call_result_120535 = invoke(stypy.reporting.localization.Localization(__file__, 1984, 4), setdefault_120531, *[str_120532, True_120533], **kwargs_120534)
    
    
    # Call to setdefault(...): (line 1985)
    # Processing the call arguments (line 1985)
    str_120538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1985, 22), 'str', 'delimiter')
    str_120539 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1985, 35), 'str', ',')
    # Processing the call keyword arguments (line 1985)
    kwargs_120540 = {}
    # Getting the type of 'kwargs' (line 1985)
    kwargs_120536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1985, 4), 'kwargs', False)
    # Obtaining the member 'setdefault' of a type (line 1985)
    setdefault_120537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1985, 4), kwargs_120536, 'setdefault')
    # Calling setdefault(args, kwargs) (line 1985)
    setdefault_call_result_120541 = invoke(stypy.reporting.localization.Localization(__file__, 1985, 4), setdefault_120537, *[str_120538, str_120539], **kwargs_120540)
    
    
    # Call to setdefault(...): (line 1986)
    # Processing the call arguments (line 1986)
    str_120544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1986, 22), 'str', 'dtype')
    # Getting the type of 'None' (line 1986)
    None_120545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1986, 31), 'None', False)
    # Processing the call keyword arguments (line 1986)
    kwargs_120546 = {}
    # Getting the type of 'kwargs' (line 1986)
    kwargs_120542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1986, 4), 'kwargs', False)
    # Obtaining the member 'setdefault' of a type (line 1986)
    setdefault_120543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1986, 4), kwargs_120542, 'setdefault')
    # Calling setdefault(args, kwargs) (line 1986)
    setdefault_call_result_120547 = invoke(stypy.reporting.localization.Localization(__file__, 1986, 4), setdefault_120543, *[str_120544, None_120545], **kwargs_120546)
    
    
    # Assigning a Call to a Name (line 1987):
    
    # Assigning a Call to a Name (line 1987):
    
    # Call to genfromtxt(...): (line 1987)
    # Processing the call arguments (line 1987)
    # Getting the type of 'fname' (line 1987)
    fname_120549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1987, 24), 'fname', False)
    # Processing the call keyword arguments (line 1987)
    # Getting the type of 'kwargs' (line 1987)
    kwargs_120550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1987, 33), 'kwargs', False)
    kwargs_120551 = {'kwargs_120550': kwargs_120550}
    # Getting the type of 'genfromtxt' (line 1987)
    genfromtxt_120548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1987, 13), 'genfromtxt', False)
    # Calling genfromtxt(args, kwargs) (line 1987)
    genfromtxt_call_result_120552 = invoke(stypy.reporting.localization.Localization(__file__, 1987, 13), genfromtxt_120548, *[fname_120549], **kwargs_120551)
    
    # Assigning a type to the variable 'output' (line 1987)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1987, 4), 'output', genfromtxt_call_result_120552)
    
    # Assigning a Call to a Name (line 1989):
    
    # Assigning a Call to a Name (line 1989):
    
    # Call to get(...): (line 1989)
    # Processing the call arguments (line 1989)
    str_120555 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1989, 25), 'str', 'usemask')
    # Getting the type of 'False' (line 1989)
    False_120556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1989, 36), 'False', False)
    # Processing the call keyword arguments (line 1989)
    kwargs_120557 = {}
    # Getting the type of 'kwargs' (line 1989)
    kwargs_120553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1989, 14), 'kwargs', False)
    # Obtaining the member 'get' of a type (line 1989)
    get_120554 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1989, 14), kwargs_120553, 'get')
    # Calling get(args, kwargs) (line 1989)
    get_call_result_120558 = invoke(stypy.reporting.localization.Localization(__file__, 1989, 14), get_120554, *[str_120555, False_120556], **kwargs_120557)
    
    # Assigning a type to the variable 'usemask' (line 1989)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1989, 4), 'usemask', get_call_result_120558)
    
    # Getting the type of 'usemask' (line 1990)
    usemask_120559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1990, 7), 'usemask')
    # Testing the type of an if condition (line 1990)
    if_condition_120560 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1990, 4), usemask_120559)
    # Assigning a type to the variable 'if_condition_120560' (line 1990)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1990, 4), 'if_condition_120560', if_condition_120560)
    # SSA begins for if statement (line 1990)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1991, 8))
    
    # 'from numpy.ma.mrecords import MaskedRecords' statement (line 1991)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/numpy/lib/')
    import_120561 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1991, 8), 'numpy.ma.mrecords')

    if (type(import_120561) is not StypyTypeError):

        if (import_120561 != 'pyd_module'):
            __import__(import_120561)
            sys_modules_120562 = sys.modules[import_120561]
            import_from_module(stypy.reporting.localization.Localization(__file__, 1991, 8), 'numpy.ma.mrecords', sys_modules_120562.module_type_store, module_type_store, ['MaskedRecords'])
            nest_module(stypy.reporting.localization.Localization(__file__, 1991, 8), __file__, sys_modules_120562, sys_modules_120562.module_type_store, module_type_store)
        else:
            from numpy.ma.mrecords import MaskedRecords

            import_from_module(stypy.reporting.localization.Localization(__file__, 1991, 8), 'numpy.ma.mrecords', None, module_type_store, ['MaskedRecords'], [MaskedRecords])

    else:
        # Assigning a type to the variable 'numpy.ma.mrecords' (line 1991)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1991, 8), 'numpy.ma.mrecords', import_120561)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/numpy/lib/')
    
    
    # Assigning a Call to a Name (line 1992):
    
    # Assigning a Call to a Name (line 1992):
    
    # Call to view(...): (line 1992)
    # Processing the call arguments (line 1992)
    # Getting the type of 'MaskedRecords' (line 1992)
    MaskedRecords_120565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1992, 29), 'MaskedRecords', False)
    # Processing the call keyword arguments (line 1992)
    kwargs_120566 = {}
    # Getting the type of 'output' (line 1992)
    output_120563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1992, 17), 'output', False)
    # Obtaining the member 'view' of a type (line 1992)
    view_120564 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1992, 17), output_120563, 'view')
    # Calling view(args, kwargs) (line 1992)
    view_call_result_120567 = invoke(stypy.reporting.localization.Localization(__file__, 1992, 17), view_120564, *[MaskedRecords_120565], **kwargs_120566)
    
    # Assigning a type to the variable 'output' (line 1992)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1992, 8), 'output', view_call_result_120567)
    # SSA branch for the else part of an if statement (line 1990)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1994):
    
    # Assigning a Call to a Name (line 1994):
    
    # Call to view(...): (line 1994)
    # Processing the call arguments (line 1994)
    # Getting the type of 'np' (line 1994)
    np_120570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1994, 29), 'np', False)
    # Obtaining the member 'recarray' of a type (line 1994)
    recarray_120571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1994, 29), np_120570, 'recarray')
    # Processing the call keyword arguments (line 1994)
    kwargs_120572 = {}
    # Getting the type of 'output' (line 1994)
    output_120568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1994, 17), 'output', False)
    # Obtaining the member 'view' of a type (line 1994)
    view_120569 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1994, 17), output_120568, 'view')
    # Calling view(args, kwargs) (line 1994)
    view_call_result_120573 = invoke(stypy.reporting.localization.Localization(__file__, 1994, 17), view_120569, *[recarray_120571], **kwargs_120572)
    
    # Assigning a type to the variable 'output' (line 1994)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1994, 8), 'output', view_call_result_120573)
    # SSA join for if statement (line 1990)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'output' (line 1995)
    output_120574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1995, 11), 'output')
    # Assigning a type to the variable 'stypy_return_type' (line 1995)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1995, 4), 'stypy_return_type', output_120574)
    
    # ################# End of 'recfromcsv(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'recfromcsv' in the type store
    # Getting the type of 'stypy_return_type' (line 1960)
    stypy_return_type_120575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1960, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_120575)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'recfromcsv'
    return stypy_return_type_120575

# Assigning a type to the variable 'recfromcsv' (line 1960)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1960, 0), 'recfromcsv', recfromcsv)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
